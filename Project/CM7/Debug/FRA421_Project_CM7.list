
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d244  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001714  0800d4e4  0800d4e4  0001d4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebf8  0800ebf8  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebf8  0800ebf8  0001ebf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ec00  0800ec00  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ec00  0800ec00  0001ec00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ec04  0800ec04  0001ec04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  0800ec08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  0800ec90  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0800ecf0  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d78  24000148  0800ed50  00020148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec0  0800ed50  00020ec0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025bbb  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bdc  00000000  00000000  00045d31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a40  00000000  00000000  00049910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001948  00000000  00000000  0004b350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0004cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000227dd  00000000  00000000  0008a6cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019368c  00000000  00000000  000acea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00240534  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007544  00000000  00000000  00240584  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d4cc 	.word	0x0800d4cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800d4cc 	.word	0x0800d4cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3318      	adds	r3, #24
 800077e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	78db      	ldrb	r3, [r3, #3]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d126      	bne.n	80007de <Player_Reading_Card+0x8a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f8aa 	bl	80008ea <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000796:	6979      	ldr	r1, [r7, #20]
 8000798:	69b8      	ldr	r0, [r7, #24]
 800079a:	f7ff ff73 	bl	8000684 <YUGIOH_card_copy>

		// Mod standPosition in case off 2 player
		ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	799a      	ldrb	r2, [r3, #6]
 80007a2:	4b11      	ldr	r3, [pc, #68]	; (80007e8 <Player_Reading_Card+0x94>)
 80007a4:	fba3 1302 	umull	r1, r3, r3, r2
 80007a8:	0899      	lsrs	r1, r3, #2
 80007aa:	460b      	mov	r3, r1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	440b      	add	r3, r1
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	719a      	strb	r2, [r3, #6]
		// Card Reading So it can't attack
		ptrYugiohCard_dst->actionPoint_Atk = 0;
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	2200      	movs	r2, #0
 80007be:	721a      	strb	r2, [r3, #8]
		// Card Reading Then it can use it Effect
		ptrYugiohCard_dst->actionPoint_Eff = 1;
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	2201      	movs	r2, #1
 80007c4:	725a      	strb	r2, [r3, #9]
		RFID_Clear_Card_Bufffer(ptrRFID);
 80007c6:	69f8      	ldr	r0, [r7, #28]
 80007c8:	f7ff ffa8 	bl	800071c <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	2200      	movs	r2, #0
 80007d0:	70da      	strb	r2, [r3, #3]
		state_game->action += 1;
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	781b      	ldrb	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	701a      	strb	r2, [r3, #0]
	}
}
 80007de:	bf00      	nop
 80007e0:	3720      	adds	r7, #32
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	aaaaaaab 	.word	0xaaaaaaab

080007ec <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000808:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800080a:	2300      	movs	r3, #0
 800080c:	76fb      	strb	r3, [r7, #27]
 800080e:	e00b      	b.n	8000828 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000810:	f107 0308 	add.w	r3, r7, #8
 8000814:	69f9      	ldr	r1, [r7, #28]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff34 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800081c:	69fb      	ldr	r3, [r7, #28]
 800081e:	3310      	adds	r3, #16
 8000820:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000822:	7efb      	ldrb	r3, [r7, #27]
 8000824:	3301      	adds	r3, #1
 8000826:	76fb      	strb	r3, [r7, #27]
 8000828:	7efb      	ldrb	r3, [r7, #27]
 800082a:	2b05      	cmp	r3, #5
 800082c:	d9f0      	bls.n	8000810 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000854:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000856:	2300      	movs	r3, #0
 8000858:	76fb      	strb	r3, [r7, #27]
 800085a:	e00b      	b.n	8000874 <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	69f9      	ldr	r1, [r7, #28]
 8000862:	4618      	mov	r0, r3
 8000864:	f7ff ff0e 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000868:	69fb      	ldr	r3, [r7, #28]
 800086a:	3310      	adds	r3, #16
 800086c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800086e:	7efb      	ldrb	r3, [r7, #27]
 8000870:	3301      	adds	r3, #1
 8000872:	76fb      	strb	r3, [r7, #27]
 8000874:	7efb      	ldrb	r3, [r7, #27]
 8000876:	2b05      	cmp	r3, #5
 8000878:	d9f0      	bls.n	800085c <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	3368      	adds	r3, #104	; 0x68
 800087e:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000880:	2300      	movs	r3, #0
 8000882:	76bb      	strb	r3, [r7, #26]
 8000884:	e00b      	b.n	800089e <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000886:	f107 0308 	add.w	r3, r7, #8
 800088a:	69f9      	ldr	r1, [r7, #28]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fef9 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3310      	adds	r3, #16
 8000896:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000898:	7ebb      	ldrb	r3, [r7, #26]
 800089a:	3301      	adds	r3, #1
 800089c:	76bb      	strb	r3, [r7, #26]
 800089e:	7ebb      	ldrb	r3, [r7, #26]
 80008a0:	2b13      	cmp	r3, #19
 80008a2:	d9f0      	bls.n	8000886 <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3308      	adds	r3, #8
 80008a8:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80008aa:	2300      	movs	r3, #0
 80008ac:	767b      	strb	r3, [r7, #25]
 80008ae:	e00b      	b.n	80008c8 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008b0:	f107 0308 	add.w	r3, r7, #8
 80008b4:	69f9      	ldr	r1, [r7, #28]
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fee4 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	3310      	adds	r3, #16
 80008c0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80008c2:	7e7b      	ldrb	r3, [r7, #25]
 80008c4:	3301      	adds	r3, #1
 80008c6:	767b      	strb	r3, [r7, #25]
 80008c8:	7e7b      	ldrb	r3, [r7, #25]
 80008ca:	2b05      	cmp	r3, #5
 80008cc:	d9f0      	bls.n	80008b0 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80008d4:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	69f9      	ldr	r1, [r7, #28]
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff fed1 	bl	8000684 <YUGIOH_card_copy>
}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b086      	sub	sp, #24
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80008f8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000900:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000908:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000910:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000912:	2306      	movs	r3, #6
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	e00c      	b.n	8000932 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000918:	6939      	ldr	r1, [r7, #16]
 800091a:	6978      	ldr	r0, [r7, #20]
 800091c:	f7ff feb2 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	3b10      	subs	r3, #16
 8000924:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000926:	693b      	ldr	r3, [r7, #16]
 8000928:	3b10      	subs	r3, #16
 800092a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	3b01      	subs	r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	2b00      	cmp	r3, #0
 8000936:	dcef      	bgt.n	8000918 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000938:	bf00      	nop
 800093a:	bf00      	nop
 800093c:	3718      	adds	r7, #24
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000950:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000958:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8000960:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000968:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800096a:	2306      	movs	r3, #6
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	e02c      	b.n	80009ca <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000970:	6939      	ldr	r1, [r7, #16]
 8000972:	6978      	ldr	r0, [r7, #20]
 8000974:	f7ff fe86 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3b02      	subs	r3, #2
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	1e50      	subs	r0, r2, #1
 8000980:	687a      	ldr	r2, [r7, #4]
 8000982:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	4413      	add	r3, r2
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	6879      	ldr	r1, [r7, #4]
 800098e:	f500 7394 	add.w	r3, r0, #296	; 0x128
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	440b      	add	r3, r1
 8000996:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	3b02      	subs	r3, #2
 800099c:	68fa      	ldr	r2, [r7, #12]
 800099e:	1e50      	subs	r0, r2, #1
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	3b10      	subs	r3, #16
 80009bc:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	3b10      	subs	r3, #16
 80009c2:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	60fb      	str	r3, [r7, #12]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	dccf      	bgt.n	8000970 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 80009d0:	bf00      	nop
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 80009da:	b580      	push	{r7, lr}
 80009dc:	b08a      	sub	sp, #40	; 0x28
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
 80009e2:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	3368      	adds	r3, #104	; 0x68
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3368      	adds	r3, #104	; 0x68
 8000a04:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000a0c:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000a0e:	2314      	movs	r3, #20
 8000a10:	61fb      	str	r3, [r7, #28]
 8000a12:	e00c      	b.n	8000a2e <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a14:	6a39      	ldr	r1, [r7, #32]
 8000a16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a18:	f7ff fe34 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1e:	3b10      	subs	r3, #16
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 8000a22:	6a3b      	ldr	r3, [r7, #32]
 8000a24:	3b10      	subs	r3, #16
 8000a26:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	61fb      	str	r3, [r7, #28]
 8000a2e:	69fb      	ldr	r3, [r7, #28]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	dcef      	bgt.n	8000a14 <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	3368      	adds	r3, #104	; 0x68
 8000a3c:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a3e:	6a39      	ldr	r1, [r7, #32]
 8000a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a42:	f7ff fe1f 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8000a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a4e:	6a38      	ldr	r0, [r7, #32]
 8000a50:	f7ff fe18 	bl	8000684 <YUGIOH_card_copy>

}
 8000a54:	bf00      	nop
 8000a56:	3728      	adds	r7, #40	; 0x28
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08c      	sub	sp, #48	; 0x30
 8000a60:	af04      	add	r7, sp, #16
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	3304      	adds	r3, #4
 8000a6a:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8000a6c:	683b      	ldr	r3, [r7, #0]
 8000a6e:	3304      	adds	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	3304      	adds	r3, #4
 8000a76:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000a7e:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->displayNSS = 1;
 8000a80:	69fb      	ldr	r3, [r7, #28]
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8000a8c:	2108      	movs	r1, #8
 8000a8e:	48ad      	ldr	r0, [pc, #692]	; (8000d44 <GAME_PLAY_Management+0x2e8>)
 8000a90:	f006 fbc4 	bl	800721c <HAL_GPIO_ReadPin>
 8000a94:	4603      	mov	r3, r0
 8000a96:	461a      	mov	r2, r3
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8000a9c:	2102      	movs	r1, #2
 8000a9e:	48aa      	ldr	r0, [pc, #680]	; (8000d48 <GAME_PLAY_Management+0x2ec>)
 8000aa0:	f006 fbbc 	bl	800721c <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000aac:	2104      	movs	r1, #4
 8000aae:	48a5      	ldr	r0, [pc, #660]	; (8000d44 <GAME_PLAY_Management+0x2e8>)
 8000ab0:	f006 fbb4 	bl	800721c <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000abc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac0:	48a2      	ldr	r0, [pc, #648]	; (8000d4c <GAME_PLAY_Management+0x2f0>)
 8000ac2:	f006 fbab 	bl	800721c <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000ad4:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	3304      	adds	r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	3304      	adds	r3, #4
 8000ae0:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	2b04      	cmp	r3, #4
 8000ae6:	f200 82a6 	bhi.w	8001036 <GAME_PLAY_Management+0x5da>
 8000aea:	a201      	add	r2, pc, #4	; (adr r2, 8000af0 <GAME_PLAY_Management+0x94>)
 8000aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af0:	08000b05 	.word	0x08000b05
 8000af4:	08000d81 	.word	0x08000d81
 8000af8:	08000edf 	.word	0x08000edf
 8000afc:	08000f51 	.word	0x08000f51
 8000b00:	08000fc3 	.word	0x08000fc3
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b04:	4b92      	ldr	r3, [pc, #584]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	9202      	str	r2, [sp, #8]
 8000b0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0e:	9201      	str	r2, [sp, #4]
 8000b10:	685a      	ldr	r2, [r3, #4]
 8000b12:	9200      	str	r2, [sp, #0]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a8f      	ldr	r2, [pc, #572]	; (8000d54 <GAME_PLAY_Management+0x2f8>)
 8000b18:	2105      	movs	r1, #5
 8000b1a:	2005      	movs	r0, #5
 8000b1c:	f002 fbbb 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b20:	4b8b      	ldr	r3, [pc, #556]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	9202      	str	r2, [sp, #8]
 8000b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2a:	9201      	str	r2, [sp, #4]
 8000b2c:	685a      	ldr	r2, [r3, #4]
 8000b2e:	9200      	str	r2, [sp, #0]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a89      	ldr	r2, [pc, #548]	; (8000d58 <GAME_PLAY_Management+0x2fc>)
 8000b34:	210f      	movs	r1, #15
 8000b36:	2000      	movs	r0, #0
 8000b38:	f002 fbad 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b3c:	4b87      	ldr	r3, [pc, #540]	; (8000d5c <GAME_PLAY_Management+0x300>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	9202      	str	r2, [sp, #8]
 8000b42:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b46:	9201      	str	r2, [sp, #4]
 8000b48:	685a      	ldr	r2, [r3, #4]
 8000b4a:	9200      	str	r2, [sp, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a84      	ldr	r2, [pc, #528]	; (8000d60 <GAME_PLAY_Management+0x304>)
 8000b50:	2123      	movs	r1, #35	; 0x23
 8000b52:	2008      	movs	r0, #8
 8000b54:	f002 fb9f 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b58:	4b80      	ldr	r3, [pc, #512]	; (8000d5c <GAME_PLAY_Management+0x300>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	9202      	str	r2, [sp, #8]
 8000b5e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b62:	9201      	str	r2, [sp, #4]
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	9200      	str	r2, [sp, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4a7e      	ldr	r2, [pc, #504]	; (8000d64 <GAME_PLAY_Management+0x308>)
 8000b6c:	213c      	movs	r1, #60	; 0x3c
 8000b6e:	2019      	movs	r0, #25
 8000b70:	f002 fb91 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b74:	4b76      	ldr	r3, [pc, #472]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	9202      	str	r2, [sp, #8]
 8000b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b7e:	9201      	str	r2, [sp, #4]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	9200      	str	r2, [sp, #0]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a74      	ldr	r2, [pc, #464]	; (8000d58 <GAME_PLAY_Management+0x2fc>)
 8000b88:	214b      	movs	r1, #75	; 0x4b
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f002 fb83 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b90:	4b6f      	ldr	r3, [pc, #444]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	9202      	str	r2, [sp, #8]
 8000b96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b9a:	9201      	str	r2, [sp, #4]
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	9200      	str	r2, [sp, #0]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	4a71      	ldr	r2, [pc, #452]	; (8000d68 <GAME_PLAY_Management+0x30c>)
 8000ba4:	215a      	movs	r1, #90	; 0x5a
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f002 fb75 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000bac:	4b68      	ldr	r3, [pc, #416]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	9202      	str	r2, [sp, #8]
 8000bb2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bb6:	9201      	str	r2, [sp, #4]
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	9200      	str	r2, [sp, #0]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a6b      	ldr	r2, [pc, #428]	; (8000d6c <GAME_PLAY_Management+0x310>)
 8000bc0:	215a      	movs	r1, #90	; 0x5a
 8000bc2:	205d      	movs	r0, #93	; 0x5d
 8000bc4:	f002 fb67 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bc8:	4b61      	ldr	r3, [pc, #388]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	9202      	str	r2, [sp, #8]
 8000bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd2:	9201      	str	r2, [sp, #4]
 8000bd4:	685a      	ldr	r2, [r3, #4]
 8000bd6:	9200      	str	r2, [sp, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	4a65      	ldr	r2, [pc, #404]	; (8000d70 <GAME_PLAY_Management+0x314>)
 8000bdc:	2169      	movs	r1, #105	; 0x69
 8000bde:	2000      	movs	r0, #0
 8000be0:	f002 fb59 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000be4:	4b5a      	ldr	r3, [pc, #360]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	9202      	str	r2, [sp, #8]
 8000bea:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bee:	9201      	str	r2, [sp, #4]
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	9200      	str	r2, [sp, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a5f      	ldr	r2, [pc, #380]	; (8000d74 <GAME_PLAY_Management+0x318>)
 8000bf8:	2169      	movs	r1, #105	; 0x69
 8000bfa:	2064      	movs	r0, #100	; 0x64
 8000bfc:	f002 fb4b 	bl	8003296 <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c00:	4b53      	ldr	r3, [pc, #332]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	9202      	str	r2, [sp, #8]
 8000c06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c0a:	9201      	str	r2, [sp, #4]
 8000c0c:	685a      	ldr	r2, [r3, #4]
 8000c0e:	9200      	str	r2, [sp, #0]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a59      	ldr	r2, [pc, #356]	; (8000d78 <GAME_PLAY_Management+0x31c>)
 8000c14:	2105      	movs	r1, #5
 8000c16:	2005      	movs	r0, #5
 8000c18:	f002 fb87 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c1c:	4b4c      	ldr	r3, [pc, #304]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	9202      	str	r2, [sp, #8]
 8000c22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c26:	9201      	str	r2, [sp, #4]
 8000c28:	685a      	ldr	r2, [r3, #4]
 8000c2a:	9200      	str	r2, [sp, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a4a      	ldr	r2, [pc, #296]	; (8000d58 <GAME_PLAY_Management+0x2fc>)
 8000c30:	210f      	movs	r1, #15
 8000c32:	2000      	movs	r0, #0
 8000c34:	f002 fb79 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000c38:	4b48      	ldr	r3, [pc, #288]	; (8000d5c <GAME_PLAY_Management+0x300>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	9202      	str	r2, [sp, #8]
 8000c3e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000c42:	9201      	str	r2, [sp, #4]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	9200      	str	r2, [sp, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a45      	ldr	r2, [pc, #276]	; (8000d60 <GAME_PLAY_Management+0x304>)
 8000c4c:	2123      	movs	r1, #35	; 0x23
 8000c4e:	2008      	movs	r0, #8
 8000c50:	f002 fb6b 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000c54:	4b41      	ldr	r3, [pc, #260]	; (8000d5c <GAME_PLAY_Management+0x300>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	9202      	str	r2, [sp, #8]
 8000c5a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c5e:	9201      	str	r2, [sp, #4]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	9200      	str	r2, [sp, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a3f      	ldr	r2, [pc, #252]	; (8000d64 <GAME_PLAY_Management+0x308>)
 8000c68:	213c      	movs	r1, #60	; 0x3c
 8000c6a:	2014      	movs	r0, #20
 8000c6c:	f002 fb5d 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c70:	4b37      	ldr	r3, [pc, #220]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	9202      	str	r2, [sp, #8]
 8000c76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c7a:	9201      	str	r2, [sp, #4]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <GAME_PLAY_Management+0x2fc>)
 8000c84:	214b      	movs	r1, #75	; 0x4b
 8000c86:	2000      	movs	r0, #0
 8000c88:	f002 fb4f 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c8c:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	9202      	str	r2, [sp, #8]
 8000c92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c96:	9201      	str	r2, [sp, #4]
 8000c98:	685a      	ldr	r2, [r3, #4]
 8000c9a:	9200      	str	r2, [sp, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a32      	ldr	r2, [pc, #200]	; (8000d68 <GAME_PLAY_Management+0x30c>)
 8000ca0:	215a      	movs	r1, #90	; 0x5a
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f002 fb41 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000ca8:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	9202      	str	r2, [sp, #8]
 8000cae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cb2:	9201      	str	r2, [sp, #4]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	9200      	str	r2, [sp, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <GAME_PLAY_Management+0x310>)
 8000cbc:	215a      	movs	r1, #90	; 0x5a
 8000cbe:	205d      	movs	r0, #93	; 0x5d
 8000cc0:	f002 fb33 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000cc4:	4b22      	ldr	r3, [pc, #136]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	9202      	str	r2, [sp, #8]
 8000cca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cce:	9201      	str	r2, [sp, #4]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	9200      	str	r2, [sp, #0]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a26      	ldr	r2, [pc, #152]	; (8000d70 <GAME_PLAY_Management+0x314>)
 8000cd8:	2169      	movs	r1, #105	; 0x69
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f002 fb25 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <GAME_PLAY_Management+0x2f4>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	9202      	str	r2, [sp, #8]
 8000ce6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cea:	9201      	str	r2, [sp, #4]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	9200      	str	r2, [sp, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a20      	ldr	r2, [pc, #128]	; (8000d74 <GAME_PLAY_Management+0x318>)
 8000cf4:	2169      	movs	r1, #105	; 0x69
 8000cf6:	2064      	movs	r0, #100	; 0x64
 8000cf8:	f002 fb17 	bl	800332a <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000cfc:	2108      	movs	r1, #8
 8000cfe:	481f      	ldr	r0, [pc, #124]	; (8000d7c <GAME_PLAY_Management+0x320>)
 8000d00:	f006 fa8c 	bl	800721c <HAL_GPIO_ReadPin>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10a      	bne.n	8000d20 <GAME_PLAY_Management+0x2c4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f002 fd2a 	bl	8003764 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000d10:	2000      	movs	r0, #0
 8000d12:	f002 fd38 	bl	8003786 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8000d1e:	e18a      	b.n	8001036 <GAME_PLAY_Management+0x5da>
			state_game->PlyerAction_State = PS_AFK;
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	2200      	movs	r2, #0
 8000d24:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8000d40:	e179      	b.n	8001036 <GAME_PLAY_Management+0x5da>
 8000d42:	bf00      	nop
 8000d44:	58020800 	.word	0x58020800
 8000d48:	58020400 	.word	0x58020400
 8000d4c:	58021400 	.word	0x58021400
 8000d50:	2400000c 	.word	0x2400000c
 8000d54:	0800d4e4 	.word	0x0800d4e4
 8000d58:	0800d4f0 	.word	0x0800d4f0
 8000d5c:	24000014 	.word	0x24000014
 8000d60:	0800d504 	.word	0x0800d504
 8000d64:	0800d510 	.word	0x0800d510
 8000d68:	0800d518 	.word	0x0800d518
 8000d6c:	0800d528 	.word	0x0800d528
 8000d70:	0800d530 	.word	0x0800d530
 8000d74:	0800d540 	.word	0x0800d540
 8000d78:	0800d544 	.word	0x0800d544
 8000d7c:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d80:	4baf      	ldr	r3, [pc, #700]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	9202      	str	r2, [sp, #8]
 8000d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d8a:	9201      	str	r2, [sp, #4]
 8000d8c:	685a      	ldr	r2, [r3, #4]
 8000d8e:	9200      	str	r2, [sp, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4aac      	ldr	r2, [pc, #688]	; (8001044 <GAME_PLAY_Management+0x5e8>)
 8000d94:	2105      	movs	r1, #5
 8000d96:	2005      	movs	r0, #5
 8000d98:	f002 fa7d 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d9c:	4ba8      	ldr	r3, [pc, #672]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	9202      	str	r2, [sp, #8]
 8000da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000da6:	9201      	str	r2, [sp, #4]
 8000da8:	685a      	ldr	r2, [r3, #4]
 8000daa:	9200      	str	r2, [sp, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4aa6      	ldr	r2, [pc, #664]	; (8001048 <GAME_PLAY_Management+0x5ec>)
 8000db0:	210f      	movs	r1, #15
 8000db2:	2000      	movs	r0, #0
 8000db4:	f002 fa6f 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000db8:	4ba4      	ldr	r3, [pc, #656]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	9202      	str	r2, [sp, #8]
 8000dbe:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000dc2:	9201      	str	r2, [sp, #4]
 8000dc4:	685a      	ldr	r2, [r3, #4]
 8000dc6:	9200      	str	r2, [sp, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4aa1      	ldr	r2, [pc, #644]	; (8001050 <GAME_PLAY_Management+0x5f4>)
 8000dcc:	2123      	movs	r1, #35	; 0x23
 8000dce:	2019      	movs	r0, #25
 8000dd0:	f002 fa61 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000dd4:	4b9d      	ldr	r3, [pc, #628]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	9202      	str	r2, [sp, #8]
 8000dda:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000dde:	9201      	str	r2, [sp, #4]
 8000de0:	685a      	ldr	r2, [r3, #4]
 8000de2:	9200      	str	r2, [sp, #0]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a9b      	ldr	r2, [pc, #620]	; (8001054 <GAME_PLAY_Management+0x5f8>)
 8000de8:	213c      	movs	r1, #60	; 0x3c
 8000dea:	2021      	movs	r0, #33	; 0x21
 8000dec:	f002 fa53 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000df0:	4b93      	ldr	r3, [pc, #588]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	9202      	str	r2, [sp, #8]
 8000df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfa:	9201      	str	r2, [sp, #4]
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	9200      	str	r2, [sp, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a91      	ldr	r2, [pc, #580]	; (8001048 <GAME_PLAY_Management+0x5ec>)
 8000e04:	214b      	movs	r1, #75	; 0x4b
 8000e06:	2000      	movs	r0, #0
 8000e08:	f002 fa45 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e0c:	4b8c      	ldr	r3, [pc, #560]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	9202      	str	r2, [sp, #8]
 8000e12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e16:	9201      	str	r2, [sp, #4]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	9200      	str	r2, [sp, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a8e      	ldr	r2, [pc, #568]	; (8001058 <GAME_PLAY_Management+0x5fc>)
 8000e20:	2105      	movs	r1, #5
 8000e22:	2005      	movs	r0, #5
 8000e24:	f002 fa81 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e28:	4b85      	ldr	r3, [pc, #532]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	9202      	str	r2, [sp, #8]
 8000e2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e32:	9201      	str	r2, [sp, #4]
 8000e34:	685a      	ldr	r2, [r3, #4]
 8000e36:	9200      	str	r2, [sp, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a83      	ldr	r2, [pc, #524]	; (8001048 <GAME_PLAY_Management+0x5ec>)
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f002 fa73 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000e44:	4b81      	ldr	r3, [pc, #516]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	9202      	str	r2, [sp, #8]
 8000e4a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000e4e:	9201      	str	r2, [sp, #4]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	9200      	str	r2, [sp, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a7e      	ldr	r2, [pc, #504]	; (8001050 <GAME_PLAY_Management+0x5f4>)
 8000e58:	2123      	movs	r1, #35	; 0x23
 8000e5a:	2019      	movs	r0, #25
 8000e5c:	f002 fa65 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000e60:	4b7a      	ldr	r3, [pc, #488]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	9202      	str	r2, [sp, #8]
 8000e66:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e6a:	9201      	str	r2, [sp, #4]
 8000e6c:	685a      	ldr	r2, [r3, #4]
 8000e6e:	9200      	str	r2, [sp, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a7a      	ldr	r2, [pc, #488]	; (800105c <GAME_PLAY_Management+0x600>)
 8000e74:	213c      	movs	r1, #60	; 0x3c
 8000e76:	2025      	movs	r0, #37	; 0x25
 8000e78:	f002 fa57 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e7c:	4b70      	ldr	r3, [pc, #448]	; (8001040 <GAME_PLAY_Management+0x5e4>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	9202      	str	r2, [sp, #8]
 8000e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e86:	9201      	str	r2, [sp, #4]
 8000e88:	685a      	ldr	r2, [r3, #4]
 8000e8a:	9200      	str	r2, [sp, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a6e      	ldr	r2, [pc, #440]	; (8001048 <GAME_PLAY_Management+0x5ec>)
 8000e90:	214b      	movs	r1, #75	; 0x4b
 8000e92:	2000      	movs	r0, #0
 8000e94:	f002 fa49 	bl	800332a <ST7735_WriteString1>
		HAL_Delay(3000);
 8000e98:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000e9c:	f003 f870 	bl	8003f80 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f002 fc5f 	bl	8003764 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f002 fc6d 	bl	8003786 <ST7735_FillScreen1>
		MainGUI();
 8000eac:	f001 fa44 	bl	8002338 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000eb6:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ebe:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8000ec0:	69f8      	ldr	r0, [r7, #28]
 8000ec2:	f7ff fcb9 	bl	8000838 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8000ec6:	69b8      	ldr	r0, [r7, #24]
 8000ec8:	f7ff fcb6 	bl	8000838 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	2202      	movs	r2, #2
 8000ed0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8000edc:	e0ab      	b.n	8001036 <GAME_PLAY_Management+0x5da>
	case first_player:
		if (state_game -> F_flag == 0){
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d125      	bne.n	8000f34 <GAME_PLAY_Management+0x4d8>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000ee8:	4b58      	ldr	r3, [pc, #352]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	9202      	str	r2, [sp, #8]
 8000eee:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ef2:	9201      	str	r2, [sp, #4]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	9200      	str	r2, [sp, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a59      	ldr	r2, [pc, #356]	; (8001060 <GAME_PLAY_Management+0x604>)
 8000efc:	215a      	movs	r1, #90	; 0x5a
 8000efe:	200f      	movs	r0, #15
 8000f00:	f002 fa13 	bl	800332a <ST7735_WriteString1>
			HAL_Delay(2000);
 8000f04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f08:	f003 f83a 	bl	8003f80 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2326      	movs	r3, #38	; 0x26
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	215a      	movs	r1, #90	; 0x5a
 8000f16:	2000      	movs	r0, #0
 8000f18:	f002 fb26 	bl	8003568 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
		}
		ptrPlayerAtk = &state_game->player[0];
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	3304      	adds	r3, #4
 8000f38:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f40:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	6839      	ldr	r1, [r7, #0]
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f000 f88f 	bl	800106c <GAME_PLAY_Phase_Management>
		break;
 8000f4e:	e072      	b.n	8001036 <GAME_PLAY_Management+0x5da>
	case second_player:
		if (state_game -> S_flag == 0){
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d125      	bne.n	8000fa6 <GAME_PLAY_Management+0x54a>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000f5a:	4b3c      	ldr	r3, [pc, #240]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	9202      	str	r2, [sp, #8]
 8000f60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f64:	9201      	str	r2, [sp, #4]
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	9200      	str	r2, [sp, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a3c      	ldr	r2, [pc, #240]	; (8001060 <GAME_PLAY_Management+0x604>)
 8000f6e:	215a      	movs	r1, #90	; 0x5a
 8000f70:	200f      	movs	r0, #15
 8000f72:	f002 f990 	bl	8003296 <ST7735_WriteString>
			HAL_Delay(2000);
 8000f76:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f7a:	f003 f801 	bl	8003f80 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	2326      	movs	r3, #38	; 0x26
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	215a      	movs	r1, #90	; 0x5a
 8000f88:	2000      	movs	r0, #0
 8000f8a:	f002 fa79 	bl	8003480 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
		}
		ptrPlayerAtk = &state_game->player[1];
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000fac:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	6839      	ldr	r1, [r7, #0]
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f000 f856 	bl	800106c <GAME_PLAY_Phase_Management>
		break;
 8000fc0:	e039      	b.n	8001036 <GAME_PLAY_Management+0x5da>
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	9300      	str	r3, [sp, #0]
 8000fca:	2326      	movs	r3, #38	; 0x26
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	215a      	movs	r1, #90	; 0x5a
 8000fd0:	2000      	movs	r0, #0
 8000fd2:	f002 fb3d 	bl	8003650 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9301      	str	r3, [sp, #4]
 8000fda:	2300      	movs	r3, #0
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2326      	movs	r3, #38	; 0x26
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	215a      	movs	r1, #90	; 0x5a
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	f002 fb33 	bl	8003650 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8000fea:	20c8      	movs	r0, #200	; 0xc8
 8000fec:	f002 ffc8 	bl	8003f80 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	9203      	str	r2, [sp, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	9202      	str	r2, [sp, #8]
 8000ffa:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000ffe:	9201      	str	r2, [sp, #4]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	9200      	str	r2, [sp, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a17      	ldr	r2, [pc, #92]	; (8001064 <GAME_PLAY_Management+0x608>)
 8001008:	215a      	movs	r1, #90	; 0x5a
 800100a:	2014      	movs	r0, #20
 800100c:	f002 f9d7 	bl	80033be <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <GAME_PLAY_Management+0x5f0>)
 8001012:	2200      	movs	r2, #0
 8001014:	9203      	str	r2, [sp, #12]
 8001016:	2200      	movs	r2, #0
 8001018:	9202      	str	r2, [sp, #8]
 800101a:	221f      	movs	r2, #31
 800101c:	9201      	str	r2, [sp, #4]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	9200      	str	r2, [sp, #0]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a10      	ldr	r2, [pc, #64]	; (8001068 <GAME_PLAY_Management+0x60c>)
 8001026:	215a      	movs	r1, #90	; 0x5a
 8001028:	200f      	movs	r0, #15
 800102a:	f002 f9c8 	bl	80033be <ST7735_WriteStringNSS>
		HAL_Delay(200);
 800102e:	20c8      	movs	r0, #200	; 0xc8
 8001030:	f002 ffa6 	bl	8003f80 <HAL_Delay>
		break;
 8001034:	bf00      	nop
	}
}
 8001036:	bf00      	nop
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2400000c 	.word	0x2400000c
 8001044:	0800d4e4 	.word	0x0800d4e4
 8001048:	0800d4f0 	.word	0x0800d4f0
 800104c:	24000014 	.word	0x24000014
 8001050:	0800d550 	.word	0x0800d550
 8001054:	0800d558 	.word	0x0800d558
 8001058:	0800d544 	.word	0x0800d544
 800105c:	0800d560 	.word	0x0800d560
 8001060:	0800d568 	.word	0x0800d568
 8001064:	0800d574 	.word	0x0800d574
 8001068:	0800d57c 	.word	0x0800d57c

0800106c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b090      	sub	sp, #64	; 0x40
 8001070:	af04      	add	r7, sp, #16
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8001080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 800108a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001094:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	switch (PAS) {
 8001098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800109c:	2b03      	cmp	r3, #3
 800109e:	f200 87b5 	bhi.w	800200c <GAME_PLAY_Phase_Management+0xfa0>
 80010a2:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <GAME_PLAY_Phase_Management+0x3c>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	08001fff 	.word	0x08001fff
 80010ac:	080010b9 	.word	0x080010b9
 80010b0:	08001185 	.word	0x08001185
 80010b4:	080019f1 	.word	0x080019f1
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 80010b8:	48a4      	ldr	r0, [pc, #656]	; (800134c <GAME_PLAY_Phase_Management+0x2e0>)
 80010ba:	f009 fa35 	bl	800a528 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 80010be:	6839      	ldr	r1, [r7, #0]
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f001 f9d9 	bl	8002478 <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80010c6:	4ba2      	ldr	r3, [pc, #648]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	9202      	str	r2, [sp, #8]
 80010cc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80010d0:	9201      	str	r2, [sp, #4]
 80010d2:	685a      	ldr	r2, [r3, #4]
 80010d4:	9200      	str	r2, [sp, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a9e      	ldr	r2, [pc, #632]	; (8001354 <GAME_PLAY_Phase_Management+0x2e8>)
 80010da:	2123      	movs	r1, #35	; 0x23
 80010dc:	203c      	movs	r0, #60	; 0x3c
 80010de:	f002 f8da 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80010e2:	4b9b      	ldr	r3, [pc, #620]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	9202      	str	r2, [sp, #8]
 80010e8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80010ec:	9201      	str	r2, [sp, #4]
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	9200      	str	r2, [sp, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a97      	ldr	r2, [pc, #604]	; (8001354 <GAME_PLAY_Phase_Management+0x2e8>)
 80010f6:	2123      	movs	r1, #35	; 0x23
 80010f8:	203c      	movs	r0, #60	; 0x3c
 80010fa:	f002 f916 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	781a      	ldrb	r2, [r3, #0]
 8001102:	4b93      	ldr	r3, [pc, #588]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 8001104:	9203      	str	r2, [sp, #12]
 8001106:	2200      	movs	r2, #0
 8001108:	9202      	str	r2, [sp, #8]
 800110a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800110e:	9201      	str	r2, [sp, #4]
 8001110:	685a      	ldr	r2, [r3, #4]
 8001112:	9200      	str	r2, [sp, #0]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a90      	ldr	r2, [pc, #576]	; (8001358 <GAME_PLAY_Phase_Management+0x2ec>)
 8001118:	215a      	movs	r1, #90	; 0x5a
 800111a:	2005      	movs	r0, #5
 800111c:	f002 f94f 	bl	80033be <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	781a      	ldrb	r2, [r3, #0]
 8001124:	4b8a      	ldr	r3, [pc, #552]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 8001126:	9203      	str	r2, [sp, #12]
 8001128:	2200      	movs	r2, #0
 800112a:	9202      	str	r2, [sp, #8]
 800112c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001130:	9201      	str	r2, [sp, #4]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a88      	ldr	r2, [pc, #544]	; (800135c <GAME_PLAY_Phase_Management+0x2f0>)
 800113a:	215a      	movs	r1, #90	; 0x5a
 800113c:	2005      	movs	r0, #5
 800113e:	f002 f93e 	bl	80033be <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001142:	2101      	movs	r1, #1
 8001144:	4886      	ldr	r0, [pc, #536]	; (8001360 <GAME_PLAY_Phase_Management+0x2f4>)
 8001146:	f006 f869 	bl	800721c <HAL_GPIO_ReadPin>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	f040 8758 	bne.w	8002002 <GAME_PLAY_Phase_Management+0xf96>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001152:	2000      	movs	r0, #0
 8001154:	f002 fb06 	bl	8003764 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001158:	2000      	movs	r0, #0
 800115a:	f002 fb14 	bl	8003786 <ST7735_FillScreen1>
			MainGUI();
 800115e:	f001 f8eb 	bl	8002338 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2201      	movs	r2, #1
 800116e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8001178:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800117c:	f002 ff00 	bl	8003f80 <HAL_Delay>
		}
		break;
 8001180:	f000 bf3f 	b.w	8002002 <GAME_PLAY_Phase_Management+0xf96>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8001184:	6839      	ldr	r1, [r7, #0]
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f001 f976 	bl	8002478 <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800118c:	4b70      	ldr	r3, [pc, #448]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 800118e:	2200      	movs	r2, #0
 8001190:	9202      	str	r2, [sp, #8]
 8001192:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001196:	9201      	str	r2, [sp, #4]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	9200      	str	r2, [sp, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a71      	ldr	r2, [pc, #452]	; (8001364 <GAME_PLAY_Phase_Management+0x2f8>)
 80011a0:	2123      	movs	r1, #35	; 0x23
 80011a2:	203c      	movs	r0, #60	; 0x3c
 80011a4:	f002 f877 	bl	8003296 <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80011a8:	4b69      	ldr	r3, [pc, #420]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	9202      	str	r2, [sp, #8]
 80011ae:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011b2:	9201      	str	r2, [sp, #4]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	9200      	str	r2, [sp, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a6a      	ldr	r2, [pc, #424]	; (8001364 <GAME_PLAY_Phase_Management+0x2f8>)
 80011bc:	2123      	movs	r1, #35	; 0x23
 80011be:	203c      	movs	r0, #60	; 0x3c
 80011c0:	f002 f8b3 	bl	800332a <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	781a      	ldrb	r2, [r3, #0]
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80011ca:	9203      	str	r2, [sp, #12]
 80011cc:	2200      	movs	r2, #0
 80011ce:	9202      	str	r2, [sp, #8]
 80011d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d4:	9201      	str	r2, [sp, #4]
 80011d6:	685a      	ldr	r2, [r3, #4]
 80011d8:	9200      	str	r2, [sp, #0]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a5e      	ldr	r2, [pc, #376]	; (8001358 <GAME_PLAY_Phase_Management+0x2ec>)
 80011de:	215a      	movs	r1, #90	; 0x5a
 80011e0:	2005      	movs	r0, #5
 80011e2:	f002 f8ec 	bl	80033be <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781a      	ldrb	r2, [r3, #0]
 80011ea:	4b59      	ldr	r3, [pc, #356]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80011ec:	9203      	str	r2, [sp, #12]
 80011ee:	2200      	movs	r2, #0
 80011f0:	9202      	str	r2, [sp, #8]
 80011f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011f6:	9201      	str	r2, [sp, #4]
 80011f8:	685a      	ldr	r2, [r3, #4]
 80011fa:	9200      	str	r2, [sp, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a5a      	ldr	r2, [pc, #360]	; (8001368 <GAME_PLAY_Phase_Management+0x2fc>)
 8001200:	215a      	movs	r1, #90	; 0x5a
 8001202:	2005      	movs	r0, #5
 8001204:	f002 f8db 	bl	80033be <ST7735_WriteStringNSS>

		switch (PMS)
 8001208:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800120c:	2b07      	cmp	r3, #7
 800120e:	f200 86fa 	bhi.w	8002006 <GAME_PLAY_Phase_Management+0xf9a>
 8001212:	a201      	add	r2, pc, #4	; (adr r2, 8001218 <GAME_PLAY_Phase_Management+0x1ac>)
 8001214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001218:	080019d1 	.word	0x080019d1
 800121c:	08001239 	.word	0x08001239
 8001220:	080012c3 	.word	0x080012c3
 8001224:	08001371 	.word	0x08001371
 8001228:	08001521 	.word	0x08001521
 800122c:	08001729 	.word	0x08001729
 8001230:	080016a7 	.word	0x080016a7
 8001234:	08001623 	.word	0x08001623
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:
			if (state_game->action == 0)
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d127      	bne.n	8001290 <GAME_PLAY_Phase_Management+0x224>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001240:	2101      	movs	r1, #1
 8001242:	4847      	ldr	r0, [pc, #284]	; (8001360 <GAME_PLAY_Phase_Management+0x2f4>)
 8001244:	f005 ffea 	bl	800721c <HAL_GPIO_ReadPin>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d11a      	bne.n	8001284 <GAME_PLAY_Phase_Management+0x218>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 800124e:	2000      	movs	r0, #0
 8001250:	f002 fa88 	bl	8003764 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001254:	2000      	movs	r0, #0
 8001256:	f002 fa96 	bl	8003786 <ST7735_FillScreen1>
					MainGUI();
 800125a:	f001 f86d 	bl	8002338 <MainGUI>
					state_game->action = 50;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2232      	movs	r2, #50	; 0x32
 8001262:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->PlyerAction_State = Battle_Phase;
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2203      	movs	r2, #3
 8001270:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2201      	movs	r2, #1
 8001278:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1500);
 800127c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001280:	f002 fe7e 	bl	8003f80 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	68f8      	ldr	r0, [r7, #12]
 800128a:	f7ff fa63 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 800128e:	e3a1      	b.n	80019d4 <GAME_PLAY_Phase_Management+0x968>
			else if (state_game->action == 1)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 839d 	bne.w	80019d4 <GAME_PLAY_Phase_Management+0x968>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2300      	movs	r3, #0
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	2326      	movs	r3, #38	; 0x26
 80012a6:	2280      	movs	r2, #128	; 0x80
 80012a8:	215a      	movs	r1, #90	; 0x5a
 80012aa:	2000      	movs	r0, #0
 80012ac:	f002 f9d0 	bl	8003650 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80012c0:	e388      	b.n	80019d4 <GAME_PLAY_Phase_Management+0x968>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	781a      	ldrb	r2, [r3, #0]
 80012c6:	4b22      	ldr	r3, [pc, #136]	; (8001350 <GAME_PLAY_Phase_Management+0x2e4>)
 80012c8:	9203      	str	r2, [sp, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	9202      	str	r2, [sp, #8]
 80012ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d2:	9201      	str	r2, [sp, #4]
 80012d4:	685a      	ldr	r2, [r3, #4]
 80012d6:	9200      	str	r2, [sp, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a24      	ldr	r2, [pc, #144]	; (800136c <GAME_PLAY_Phase_Management+0x300>)
 80012dc:	215a      	movs	r1, #90	; 0x5a
 80012de:	2005      	movs	r0, #5
 80012e0:	f002 f86d 	bl	80033be <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80012ea:	623b      	str	r3, [r7, #32]
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c

			if (state_game->action == 1)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d116      	bne.n	800132a <GAME_PLAY_Phase_Management+0x2be>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	789b      	ldrb	r3, [r3, #2]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d106      	bne.n	8001312 <GAME_PLAY_Phase_Management+0x2a6>
					ptrYugiohCard_src->cardState = 0;
 8001304:	6a3b      	ldr	r3, [r7, #32]
 8001306:	2200      	movs	r2, #0
 8001308:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	2202      	movs	r2, #2
 800130e:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8001310:	e362      	b.n	80019d8 <GAME_PLAY_Phase_Management+0x96c>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	785b      	ldrb	r3, [r3, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	f040 835e 	bne.w	80019d8 <GAME_PLAY_Phase_Management+0x96c>
					ptrYugiohCard_src->cardState = 1;
 800131c:	6a3b      	ldr	r3, [r7, #32]
 800131e:	2201      	movs	r2, #1
 8001320:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	2202      	movs	r2, #2
 8001326:	701a      	strb	r2, [r3, #0]
			break;
 8001328:	e356      	b.n	80019d8 <GAME_PLAY_Phase_Management+0x96c>
			else if (state_game->action == 2)
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	f040 8352 	bne.w	80019d8 <GAME_PLAY_Phase_Management+0x96c>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001334:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001336:	6a38      	ldr	r0, [r7, #32]
 8001338:	f7ff f9a4 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2203      	movs	r2, #3
 8001340:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	2203      	movs	r2, #3
 8001346:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800134a:	e345      	b.n	80019d8 <GAME_PLAY_Phase_Management+0x96c>
 800134c:	240002e4 	.word	0x240002e4
 8001350:	2400000c 	.word	0x2400000c
 8001354:	0800d588 	.word	0x0800d588
 8001358:	0800d594 	.word	0x0800d594
 800135c:	0800d5a4 	.word	0x0800d5a4
 8001360:	58020800 	.word	0x58020800
 8001364:	0800d5b0 	.word	0x0800d5b0
 8001368:	0800d5bc 	.word	0x0800d5bc
 800136c:	0800d5cc 	.word	0x0800d5cc
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001376:	623b      	str	r3, [r7, #32]

			if (state_game->action == 3)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b03      	cmp	r3, #3
 800137e:	f040 832d 	bne.w	80019dc <GAME_PLAY_Phase_Management+0x970>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	785b      	ldrb	r3, [r3, #1]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d127      	bne.n	80013da <GAME_PLAY_Phase_Management+0x36e>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800138a:	6a3b      	ldr	r3, [r7, #32]
 800138c:	799a      	ldrb	r2, [r3, #6]
 800138e:	4baf      	ldr	r3, [pc, #700]	; (800164c <GAME_PLAY_Phase_Management+0x5e0>)
 8001390:	fba3 1302 	umull	r1, r3, r3, r2
 8001394:	0899      	lsrs	r1, r3, #2
 8001396:	460b      	mov	r3, r1
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	440b      	add	r3, r1
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	743b      	strb	r3, [r7, #16]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80013a2:	7c3b      	ldrb	r3, [r7, #16]
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	3308      	adds	r3, #8
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	4413      	add	r3, r2
 80013ac:	62fb      	str	r3, [r7, #44]	; 0x2c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013b0:	6a38      	ldr	r0, [r7, #32]
 80013b2:	f7ff f967 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fa18 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80013c2:	6a39      	ldr	r1, [r7, #32]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff f95d 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 80013d8:	e300      	b.n	80019dc <GAME_PLAY_Phase_Management+0x970>
				else if (ptrYugiohCard_src->cardType == 2)
 80013da:	6a3b      	ldr	r3, [r7, #32]
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d15a      	bne.n	8001498 <GAME_PLAY_Phase_Management+0x42c>
					state_game->count_chain = 1;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2201      	movs	r2, #1
 80013e6:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 80013e8:	6a3b      	ldr	r3, [r7, #32]
 80013ea:	789b      	ldrb	r3, [r3, #2]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d12b      	bne.n	8001448 <GAME_PLAY_Phase_Management+0x3dc>
						state_game->action = 4;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	2204      	movs	r2, #4
 80013f4:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 80013f6:	68b8      	ldr	r0, [r7, #8]
 80013f8:	f7ff faa3 	bl	8000942 <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001402:	4619      	mov	r1, r3
 8001404:	6a38      	ldr	r0, [r7, #32]
 8001406:	f7ff f93d 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	683a      	ldr	r2, [r7, #0]
 8001416:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001420:	3301      	adds	r3, #1
 8001422:	b2da      	uxtb	r2, r3
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff f9de 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001436:	6a39      	ldr	r1, [r7, #32]
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff f923 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	2207      	movs	r2, #7
 8001442:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001446:	e2c9      	b.n	80019dc <GAME_PLAY_Phase_Management+0x970>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	799a      	ldrb	r2, [r3, #6]
 800144c:	4b7f      	ldr	r3, [pc, #508]	; (800164c <GAME_PLAY_Phase_Management+0x5e0>)
 800144e:	fba3 1302 	umull	r1, r3, r3, r2
 8001452:	0899      	lsrs	r1, r3, #2
 8001454:	460b      	mov	r3, r1
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	440b      	add	r3, r1
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	747b      	strb	r3, [r7, #17]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001460:	7c7b      	ldrb	r3, [r7, #17]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	3308      	adds	r3, #8
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	62fb      	str	r3, [r7, #44]	; 0x2c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800146c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800146e:	6a38      	ldr	r0, [r7, #32]
 8001470:	f7ff f908 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff f9b9 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001480:	6a39      	ldr	r1, [r7, #32]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff f8fe 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	2201      	movs	r2, #1
 8001492:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001496:	e2a1      	b.n	80019dc <GAME_PLAY_Phase_Management+0x970>
				else if (ptrYugiohCard_src->cardType == 1)
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	785b      	ldrb	r3, [r3, #1]
 800149c:	2b01      	cmp	r3, #1
 800149e:	f040 829d 	bne.w	80019dc <GAME_PLAY_Phase_Management+0x970>
					state_game->test = 2;
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	2202      	movs	r2, #2
 80014a6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	78db      	ldrb	r3, [r3, #3]
 80014ae:	2b06      	cmp	r3, #6
 80014b0:	d82b      	bhi.n	800150a <GAME_PLAY_Phase_Management+0x49e>
						state_game->test = 1;
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80014ba:	6a3b      	ldr	r3, [r7, #32]
 80014bc:	799a      	ldrb	r2, [r3, #6]
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <GAME_PLAY_Phase_Management+0x5e0>)
 80014c0:	fba3 1302 	umull	r1, r3, r3, r2
 80014c4:	0899      	lsrs	r1, r3, #2
 80014c6:	460b      	mov	r3, r1
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	440b      	add	r3, r1
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	74bb      	strb	r3, [r7, #18]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80014d2:	7cbb      	ldrb	r3, [r7, #18]
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	3308      	adds	r3, #8
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	4413      	add	r3, r2
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80014de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80014e0:	6a38      	ldr	r0, [r7, #32]
 80014e2:	f7ff f8cf 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f7ff f980 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80014f2:	6a39      	ldr	r1, [r7, #32]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff f8c5 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001508:	e268      	b.n	80019dc <GAME_PLAY_Phase_Management+0x970>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff f96e 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2204      	movs	r2, #4
 8001514:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2204      	movs	r2, #4
 800151a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800151e:	e25d      	b.n	80019dc <GAME_PLAY_Phase_Management+0x970>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001526:	623b      	str	r3, [r7, #32]

			if (state_game->action == 4)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b04      	cmp	r3, #4
 800152e:	d105      	bne.n	800153c <GAME_PLAY_Phase_Management+0x4d0>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	68b9      	ldr	r1, [r7, #8]
 8001534:	68f8      	ldr	r0, [r7, #12]
 8001536:	f7ff f90d 	bl	8000754 <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
				}
			}
			break;
 800153a:	e251      	b.n	80019e0 <GAME_PLAY_Phase_Management+0x974>
			else if (state_game->action == 5)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d105      	bne.n	8001550 <GAME_PLAY_Phase_Management+0x4e4>
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f7ff f903 	bl	8000754 <Player_Reading_Card>
			break;
 800154e:	e247      	b.n	80019e0 <GAME_PLAY_Phase_Management+0x974>
			else if (state_game->action == 6)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b06      	cmp	r3, #6
 8001556:	f040 8243 	bne.w	80019e0 <GAME_PLAY_Phase_Management+0x974>
				uint8_t monsterflag = 0 ;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156a:	78db      	ldrb	r3, [r3, #3]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d804      	bhi.n	800157a <GAME_PLAY_Phase_Management+0x50e>
					monsterflag += 1;
 8001570:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001574:	3301      	adds	r3, #1
 8001576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				ptrYugiohCard_dst++;
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	3310      	adds	r3, #16
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	78db      	ldrb	r3, [r3, #3]
 8001584:	2b04      	cmp	r3, #4
 8001586:	d804      	bhi.n	8001592 <GAME_PLAY_Phase_Management+0x526>
					monsterflag += 1;
 8001588:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800158c:	3301      	adds	r3, #1
 800158e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				if (monsterflag == 2)
 8001592:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001596:	2b02      	cmp	r3, #2
 8001598:	d135      	bne.n	8001606 <GAME_PLAY_Phase_Management+0x59a>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800159a:	6a3b      	ldr	r3, [r7, #32]
 800159c:	799a      	ldrb	r2, [r3, #6]
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <GAME_PLAY_Phase_Management+0x5e0>)
 80015a0:	fba3 1302 	umull	r1, r3, r3, r2
 80015a4:	0899      	lsrs	r1, r3, #2
 80015a6:	460b      	mov	r3, r1
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	440b      	add	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	74fb      	strb	r3, [r7, #19]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80015b2:	7cfb      	ldrb	r3, [r7, #19]
 80015b4:	011b      	lsls	r3, r3, #4
 80015b6:	3308      	adds	r3, #8
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	4413      	add	r3, r2
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80015be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80015c0:	6a38      	ldr	r0, [r7, #32]
 80015c2:	f7ff f85f 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015cc:	4619      	mov	r1, r3
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fa03 	bl	80009da <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff f9fc 	bl	80009da <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff f902 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015ee:	6a39      	ldr	r1, [r7, #32]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7ff f847 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001604:	e1ec      	b.n	80019e0 <GAME_PLAY_Phase_Management+0x974>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff f8f0 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001618:	4619      	mov	r1, r3
 800161a:	4610      	mov	r0, r2
 800161c:	f7ff f832 	bl	8000684 <YUGIOH_card_copy>
			break;
 8001620:	e1de      	b.n	80019e0 <GAME_PLAY_Phase_Management+0x974>
		case chaining_main_DEF:

			// Current state_game->action = 4

			if(state_game->action == 4)
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b04      	cmp	r3, #4
 8001628:	d112      	bne.n	8001650 <GAME_PLAY_Phase_Management+0x5e4>
			{
				if (playerDef->noBTN == GPIO_PIN_RESET){
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d106      	bne.n	8001640 <GAME_PLAY_Phase_Management+0x5d4>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	2205      	movs	r2, #5
 8001636:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	2200      	movs	r2, #0
 800163e:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	68b9      	ldr	r1, [r7, #8]
 8001644:	68f8      	ldr	r0, [r7, #12]
 8001646:	f7ff f885 	bl	8000754 <Player_Reading_Card>
				state_game->ChainCount++;

				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 800164a:	e1cb      	b.n	80019e4 <GAME_PLAY_Phase_Management+0x978>
 800164c:	aaaaaaab 	.word	0xaaaaaaab
			else if ((state_game->action == 5 )){
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b05      	cmp	r3, #5
 8001656:	f040 81c5 	bne.w	80019e4 <GAME_PLAY_Phase_Management+0x978>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001660:	623b      	str	r3, [r7, #32]
				YUGIOH_card_Buffer_Update_Chain(state_game);
 8001662:	68b8      	ldr	r0, [r7, #8]
 8001664:	f7ff f96d 	bl	8000942 <YUGIOH_card_Buffer_Update_Chain>
				YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800166e:	4619      	mov	r1, r3
 8001670:	6a38      	ldr	r0, [r7, #32]
 8001672:	f7ff f807 	bl	8000684 <YUGIOH_card_copy>
				state_game->ptrChainUser[0] = playerDef;
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	683a      	ldr	r2, [r7, #0]
 800167a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
				state_game->ptrChainOpponent[0] = playerAtk;
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
				state_game->ChainCount++;
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800168c:	3301      	adds	r3, #1
 800168e:	b2da      	uxtb	r2, r3
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2206      	movs	r2, #6
 800169a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2204      	movs	r2, #4
 80016a2:	701a      	strb	r2, [r3, #0]
			break;
 80016a4:	e19e      	b.n	80019e4 <GAME_PLAY_Phase_Management+0x978>
		case chaining_main_ATK:
			if(state_game->action == 4)
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d111      	bne.n	80016d2 <GAME_PLAY_Phase_Management+0x666>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80016ae:	687a      	ldr	r2, [r7, #4]
 80016b0:	68b9      	ldr	r1, [r7, #8]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7ff f84e 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	789b      	ldrb	r3, [r3, #2]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	f040 8193 	bne.w	80019e8 <GAME_PLAY_Phase_Management+0x97c>
					state_game->PlyerAction_Main_Substate = activate_effect;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2205      	movs	r2, #5
 80016c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2200      	movs	r2, #0
 80016ce:	705a      	strb	r2, [r3, #1]
				state_game->ChainCount++;

				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 80016d0:	e18a      	b.n	80019e8 <GAME_PLAY_Phase_Management+0x97c>
			else if ((state_game->action == 5 )){
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	f040 8186 	bne.w	80019e8 <GAME_PLAY_Phase_Management+0x97c>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80016e2:	623b      	str	r3, [r7, #32]
				YUGIOH_card_Buffer_Update_Chain(state_game);
 80016e4:	68b8      	ldr	r0, [r7, #8]
 80016e6:	f7ff f92c 	bl	8000942 <YUGIOH_card_Buffer_Update_Chain>
				YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80016f0:	4619      	mov	r1, r3
 80016f2:	6a38      	ldr	r0, [r7, #32]
 80016f4:	f7fe ffc6 	bl	8000684 <YUGIOH_card_copy>
				state_game->ptrChainUser[0] = playerAtk;
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
				state_game->ptrChainOpponent[0] = playerDef;
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
				state_game->ChainCount++;
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800170e:	3301      	adds	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	2207      	movs	r2, #7
 800171c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				state_game->action = 4;
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2204      	movs	r2, #4
 8001724:	701a      	strb	r2, [r3, #0]
			break;
 8001726:	e15f      	b.n	80019e8 <GAME_PLAY_Phase_Management+0x97c>
		case activate_effect:
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	785b      	ldrb	r3, [r3, #1]
 800172c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	68ba      	ldr	r2, [r7, #8]
 8001734:	4413      	add	r3, r2
 8001736:	3304      	adds	r3, #4
 8001738:	61bb      	str	r3, [r7, #24]
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 800173a:	68bb      	ldr	r3, [r7, #8]
 800173c:	785b      	ldrb	r3, [r3, #1]
 800173e:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	68ba      	ldr	r2, [r7, #8]
 8001746:	4413      	add	r3, r2
 8001748:	3304      	adds	r3, #4
 800174a:	617b      	str	r3, [r7, #20]

			if(state_game->action == 4)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b04      	cmp	r3, #4
 8001752:	f040 808f 	bne.w	8001874 <GAME_PLAY_Phase_Management+0x808>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	785a      	ldrb	r2, [r3, #1]
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001760:	429a      	cmp	r2, r3
 8001762:	d27f      	bcs.n	8001864 <GAME_PLAY_Phase_Management+0x7f8>
				{
					state_game->test = 165;
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	22a5      	movs	r2, #165	; 0xa5
 8001768:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	785b      	ldrb	r3, [r3, #1]
 8001770:	3344      	adds	r3, #68	; 0x44
 8001772:	011b      	lsls	r3, r3, #4
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	4413      	add	r3, r2
 8001778:	3304      	adds	r3, #4
 800177a:	623b      	str	r3, [r7, #32]

					if (ptrYugiohCard_src->cardSignature == 11)
 800177c:	6a3b      	ldr	r3, [r7, #32]
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b0b      	cmp	r3, #11
 8001782:	d10b      	bne.n	800179c <GAME_PLAY_Phase_Management+0x730>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f000 fc5b 	bl	8002044 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						state_game->count_chain++;
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	785b      	ldrb	r3, [r3, #1]
 8001792:	3301      	adds	r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	705a      	strb	r2, [r3, #1]
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
					state_game->action = 4;
					state_game->count_chain++;
				}
			}
			break;
 800179a:	e127      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					else if (ptrYugiohCard_src->cardSignature == 12)
 800179c:	6a3b      	ldr	r3, [r7, #32]
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d10e      	bne.n	80017c2 <GAME_PLAY_Phase_Management+0x756>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4619      	mov	r1, r3
 80017ae:	4610      	mov	r0, r2
 80017b0:	f000 fc68 	bl	8002084 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						state_game->count_chain++;
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	785b      	ldrb	r3, [r3, #1]
 80017b8:	3301      	adds	r3, #1
 80017ba:	b2da      	uxtb	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	705a      	strb	r2, [r3, #1]
			break;
 80017c0:	e114      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					else if (ptrYugiohCard_src->cardSignature == 13)
 80017c2:	6a3b      	ldr	r3, [r7, #32]
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b0d      	cmp	r3, #13
 80017c8:	d107      	bne.n	80017da <GAME_PLAY_Phase_Management+0x76e>
						state_game->test = 166;
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	22a6      	movs	r2, #166	; 0xa6
 80017ce:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	2205      	movs	r2, #5
 80017d6:	701a      	strb	r2, [r3, #0]
			break;
 80017d8:	e108      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b0e      	cmp	r3, #14
 80017e0:	d003      	beq.n	80017ea <GAME_PLAY_Phase_Management+0x77e>
 80017e2:	6a3b      	ldr	r3, [r7, #32]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b0f      	cmp	r3, #15
 80017e8:	d112      	bne.n	8001810 <GAME_PLAY_Phase_Management+0x7a4>
						state_game->test = 133;
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2285      	movs	r2, #133	; 0x85
 80017ee:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4619      	mov	r1, r3
 80017fc:	4610      	mov	r0, r2
 80017fe:	f000 fd15 	bl	800222c <YUGIOH_Gift_of_the_Mystical_Elf>
						state_game->count_chain++;
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	785b      	ldrb	r3, [r3, #1]
 8001806:	3301      	adds	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	705a      	strb	r2, [r3, #1]
			break;
 800180e:	e0ed      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					else if(ptrYugiohCard_src->cardSignature == 16)
 8001810:	6a3b      	ldr	r3, [r7, #32]
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b10      	cmp	r3, #16
 8001816:	d107      	bne.n	8001828 <GAME_PLAY_Phase_Management+0x7bc>
						state_game->test = 124;
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	227c      	movs	r2, #124	; 0x7c
 800181c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2205      	movs	r2, #5
 8001824:	701a      	strb	r2, [r3, #0]
			break;
 8001826:	e0e1      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8001828:	6a3b      	ldr	r3, [r7, #32]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b11      	cmp	r3, #17
 800182e:	d103      	bne.n	8001838 <GAME_PLAY_Phase_Management+0x7cc>
						state_game->action = 5;
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	2205      	movs	r2, #5
 8001834:	701a      	strb	r2, [r3, #0]
			break;
 8001836:	e0d9      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b12      	cmp	r3, #18
 800183e:	d004      	beq.n	800184a <GAME_PLAY_Phase_Management+0x7de>
 8001840:	6a3b      	ldr	r3, [r7, #32]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b13      	cmp	r3, #19
 8001846:	f040 80d1 	bne.w	80019ec <GAME_PLAY_Phase_Management+0x980>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	785b      	ldrb	r3, [r3, #1]
 8001850:	2b00      	cmp	r3, #0
 8001852:	f040 80cb 	bne.w	80019ec <GAME_PLAY_Phase_Management+0x980>
							state_game->count_chain++;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	785b      	ldrb	r3, [r3, #1]
 800185a:	3301      	adds	r3, #1
 800185c:	b2da      	uxtb	r2, r3
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	705a      	strb	r2, [r3, #1]
			break;
 8001862:	e0c3      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					state_game->action = 0;
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	2200      	movs	r2, #0
 8001868:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001872:	e0bb      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
			else if (state_game->action == 5)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b05      	cmp	r3, #5
 800187a:	d10b      	bne.n	8001894 <GAME_PLAY_Phase_Management+0x828>
				state_game->test = 167;
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	22a7      	movs	r2, #167	; 0xa7
 8001880:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				Player_Reading_Card(RFIDmain, state_game, *ptrUser);
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	68b9      	ldr	r1, [r7, #8]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f7fe ff61 	bl	8000754 <Player_Reading_Card>
			break;
 8001892:	e0ab      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
			else if (state_game->action == 6)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b06      	cmp	r3, #6
 800189a:	f040 80a7 	bne.w	80019ec <GAME_PLAY_Phase_Management+0x980>
				state_game->test = 169;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	22a9      	movs	r2, #169	; 0xa9
 80018a2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	785b      	ldrb	r3, [r3, #1]
 80018aa:	3344      	adds	r3, #68	; 0x44
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	68ba      	ldr	r2, [r7, #8]
 80018b0:	4413      	add	r3, r2
 80018b2:	3304      	adds	r3, #4
 80018b4:	623b      	str	r3, [r7, #32]
				if (ptrYugiohCard_src->cardSignature == 13)
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b0d      	cmp	r3, #13
 80018bc:	d15f      	bne.n	800197e <GAME_PLAY_Phase_Management+0x912>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	789b      	ldrb	r3, [r3, #2]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d12a      	bne.n	800191e <GAME_PLAY_Phase_Management+0x8b2>
						state_game->test = 170;
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	22aa      	movs	r2, #170	; 0xaa
 80018cc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80018d8:	62fb      	str	r3, [r7, #44]	; 0x2c
						ptrYugiohCard_dst->cardState = 0;
 80018da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018dc:	2200      	movs	r2, #0
 80018de:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80018e8:	4619      	mov	r1, r3
 80018ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80018ec:	f7fe feca 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fc03 	bl	8002100 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4619      	mov	r1, r3
 8001904:	4610      	mov	r0, r2
 8001906:	f000 fb85 	bl	8002014 <Test_EFF>
						state_game->action = 4;
 800190a:	68bb      	ldr	r3, [r7, #8]
 800190c:	2204      	movs	r2, #4
 800190e:	701a      	strb	r2, [r3, #0]
						state_game->count_chain++;
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	785b      	ldrb	r3, [r3, #1]
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	705a      	strb	r2, [r3, #1]
			break;
 800191c:	e066      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	785b      	ldrb	r3, [r3, #1]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d161      	bne.n	80019ec <GAME_PLAY_Phase_Management+0x980>
						state_game->test = 171;
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	22ab      	movs	r2, #171	; 0xab
 800192c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
						ptrYugiohCard_dst->cardState = 1;
 800193a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193c:	2201      	movs	r2, #1
 800193e:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001948:	4619      	mov	r1, r3
 800194a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800194c:	f7fe fe9a 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fbd3 	bl	8002100 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4619      	mov	r1, r3
 8001964:	4610      	mov	r0, r2
 8001966:	f000 fb55 	bl	8002014 <Test_EFF>
						state_game->action = 4;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	2204      	movs	r2, #4
 800196e:	701a      	strb	r2, [r3, #0]
						state_game->count_chain++;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	3301      	adds	r3, #1
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	705a      	strb	r2, [r3, #1]
			break;
 800197c:	e036      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
				else if(ptrYugiohCard_src->cardSignature == 16){
 800197e:	6a3b      	ldr	r3, [r7, #32]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b10      	cmp	r3, #16
 8001984:	d10e      	bne.n	80019a4 <GAME_PLAY_Phase_Management+0x938>
					YUGIOH_Ancient_Rules(*ptrUser);
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f000 fc22 	bl	80021d4 <YUGIOH_Ancient_Rules>
					state_game->action = 4;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	2204      	movs	r2, #4
 8001994:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	785b      	ldrb	r3, [r3, #1]
 800199a:	3301      	adds	r3, #1
 800199c:	b2da      	uxtb	r2, r3
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	705a      	strb	r2, [r3, #1]
			break;
 80019a2:	e023      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
				else if(ptrYugiohCard_src->cardSignature == 17){
 80019a4:	6a3b      	ldr	r3, [r7, #32]
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b11      	cmp	r3, #17
 80019aa:	d11f      	bne.n	80019ec <GAME_PLAY_Phase_Management+0x980>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4610      	mov	r0, r2
 80019b8:	f000 fc88 	bl	80022cc <YUGIOH_Stop_Defense>
					state_game->action = 4;
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	2204      	movs	r2, #4
 80019c0:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	3301      	adds	r3, #1
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	705a      	strb	r2, [r3, #1]
			break;
 80019ce:	e00d      	b.n	80019ec <GAME_PLAY_Phase_Management+0x980>
			break;
 80019d0:	bf00      	nop
 80019d2:	e318      	b.n	8002006 <GAME_PLAY_Phase_Management+0xf9a>
			break;
 80019d4:	bf00      	nop
 80019d6:	e316      	b.n	8002006 <GAME_PLAY_Phase_Management+0xf9a>
			break;
 80019d8:	bf00      	nop
 80019da:	e314      	b.n	8002006 <GAME_PLAY_Phase_Management+0xf9a>
			break;
 80019dc:	bf00      	nop
 80019de:	e312      	b.n	8002006 <GAME_PLAY_Phase_Management+0xf9a>
			break;
 80019e0:	bf00      	nop
 80019e2:	e310      	b.n	8002006 <GAME_PLAY_Phase_Management+0xf9a>
			break;
 80019e4:	bf00      	nop
 80019e6:	e30e      	b.n	8002006 <GAME_PLAY_Phase_Management+0xf9a>
			break;
 80019e8:	bf00      	nop
 80019ea:	e30c      	b.n	8002006 <GAME_PLAY_Phase_Management+0xf9a>
			break;
 80019ec:	bf00      	nop
		}
		break;
 80019ee:	e30a      	b.n	8002006 <GAME_PLAY_Phase_Management+0xf9a>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 fd40 	bl	8002478 <LCDvalue>
			ST7735_WriteString(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80019f8:	4b9b      	ldr	r3, [pc, #620]	; (8001c68 <GAME_PLAY_Phase_Management+0xbfc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	9202      	str	r2, [sp, #8]
 80019fe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a02:	9201      	str	r2, [sp, #4]
 8001a04:	685a      	ldr	r2, [r3, #4]
 8001a06:	9200      	str	r2, [sp, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a98      	ldr	r2, [pc, #608]	; (8001c6c <GAME_PLAY_Phase_Management+0xc00>)
 8001a0c:	2123      	movs	r1, #35	; 0x23
 8001a0e:	203c      	movs	r0, #60	; 0x3c
 8001a10:	f001 fc41 	bl	8003296 <ST7735_WriteString>
			ST7735_WriteString1(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001a14:	4b94      	ldr	r3, [pc, #592]	; (8001c68 <GAME_PLAY_Phase_Management+0xbfc>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	9202      	str	r2, [sp, #8]
 8001a1a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a1e:	9201      	str	r2, [sp, #4]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	9200      	str	r2, [sp, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a91      	ldr	r2, [pc, #580]	; (8001c6c <GAME_PLAY_Phase_Management+0xc00>)
 8001a28:	2123      	movs	r1, #35	; 0x23
 8001a2a:	203c      	movs	r0, #60	; 0x3c
 8001a2c:	f001 fc7d 	bl	800332a <ST7735_WriteString1>
			ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	781a      	ldrb	r2, [r3, #0]
 8001a34:	4b8c      	ldr	r3, [pc, #560]	; (8001c68 <GAME_PLAY_Phase_Management+0xbfc>)
 8001a36:	9203      	str	r2, [sp, #12]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	9202      	str	r2, [sp, #8]
 8001a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a40:	9201      	str	r2, [sp, #4]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	9200      	str	r2, [sp, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a89      	ldr	r2, [pc, #548]	; (8001c70 <GAME_PLAY_Phase_Management+0xc04>)
 8001a4a:	215a      	movs	r1, #90	; 0x5a
 8001a4c:	2005      	movs	r0, #5
 8001a4e:	f001 fcb6 	bl	80033be <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781a      	ldrb	r2, [r3, #0]
 8001a56:	4b84      	ldr	r3, [pc, #528]	; (8001c68 <GAME_PLAY_Phase_Management+0xbfc>)
 8001a58:	9203      	str	r2, [sp, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	9202      	str	r2, [sp, #8]
 8001a5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	9200      	str	r2, [sp, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a82      	ldr	r2, [pc, #520]	; (8001c74 <GAME_PLAY_Phase_Management+0xc08>)
 8001a6c:	215a      	movs	r1, #90	; 0x5a
 8001a6e:	2005      	movs	r0, #5
 8001a70:	f001 fca5 	bl	80033be <ST7735_WriteStringNSS>

			switch(PBS){
 8001a74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001a78:	2b06      	cmp	r3, #6
 8001a7a:	f200 82c6 	bhi.w	800200a <GAME_PLAY_Phase_Management+0xf9e>
 8001a7e:	a201      	add	r2, pc, #4	; (adr r2, 8001a84 <GAME_PLAY_Phase_Management+0xa18>)
 8001a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a84:	08001fe7 	.word	0x08001fe7
 8001a88:	08001aa1 	.word	0x08001aa1
 8001a8c:	08001ce3 	.word	0x08001ce3
 8001a90:	08001c3d 	.word	0x08001c3d
 8001a94:	08001d65 	.word	0x08001d65
 8001a98:	08001e47 	.word	0x08001e47
 8001a9c:	08001fab 	.word	0x08001fab
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b32      	cmp	r3, #50	; 0x32
 8001aa6:	d162      	bne.n	8001b6e <GAME_PLAY_Phase_Management+0xb02>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f7fe fe51 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4870      	ldr	r0, [pc, #448]	; (8001c78 <GAME_PLAY_Phase_Management+0xc0c>)
 8001ab6:	f005 fbb1 	bl	800721c <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f040 8294 	bne.w	8001fea <GAME_PLAY_Phase_Management+0xf7e>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001ac2:	486e      	ldr	r0, [pc, #440]	; (8001c7c <GAME_PLAY_Phase_Management+0xc10>)
 8001ac4:	f008 fda8 	bl	800a618 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8001ac8:	496d      	ldr	r1, [pc, #436]	; (8001c80 <GAME_PLAY_Phase_Management+0xc14>)
 8001aca:	f04f 0200 	mov.w	r2, #0
 8001ace:	f04f 0300 	mov.w	r3, #0
 8001ad2:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	2300      	movs	r3, #0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2326      	movs	r3, #38	; 0x26
 8001ae2:	2280      	movs	r2, #128	; 0x80
 8001ae4:	215a      	movs	r1, #90	; 0x5a
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f001 fdb2 	bl	8003650 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	781a      	ldrb	r2, [r3, #0]
 8001af0:	4b64      	ldr	r3, [pc, #400]	; (8001c84 <GAME_PLAY_Phase_Management+0xc18>)
 8001af2:	9203      	str	r2, [sp, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	9202      	str	r2, [sp, #8]
 8001af8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	9200      	str	r2, [sp, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a60      	ldr	r2, [pc, #384]	; (8001c88 <GAME_PLAY_Phase_Management+0xc1c>)
 8001b06:	215a      	movs	r1, #90	; 0x5a
 8001b08:	200f      	movs	r0, #15
 8001b0a:	f001 fc58 	bl	80033be <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8001b0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b12:	f002 fa35 	bl	8003f80 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2326      	movs	r3, #38	; 0x26
 8001b22:	2280      	movs	r2, #128	; 0x80
 8001b24:	215a      	movs	r1, #90	; 0x5a
 8001b26:	2000      	movs	r0, #0
 8001b28:	f001 fd92 	bl	8003650 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2300      	movs	r3, #0
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2326      	movs	r3, #38	; 0x26
 8001b38:	2280      	movs	r2, #128	; 0x80
 8001b3a:	215a      	movs	r1, #90	; 0x5a
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f001 fd87 	bl	8003650 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
						if(state_game->MainGame_State == first_player){
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d104      	bne.n	8001b5c <GAME_PLAY_Phase_Management+0xaf0>
							state_game->MainGame_State = second_player;
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	2203      	movs	r2, #3
 8001b56:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8001b5a:	e003      	b.n	8001b64 <GAME_PLAY_Phase_Management+0xaf8>
						}
						else{
							state_game->MainGame_State = first_player;
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
							break;
						}
						ptrYugiohCard_dst++;
					}
				}
				break;
 8001b6c:	e23d      	b.n	8001fea <GAME_PLAY_Phase_Management+0xf7e>
				else if(state_game->action == 51){
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	2b33      	cmp	r3, #51	; 0x33
 8001b74:	f040 8239 	bne.w	8001fea <GAME_PLAY_Phase_Management+0xf7e>
					uint8_t check_def_mon = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					ptrYugiohCard_src = &playerDef->cardOnBoard[3];
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	3338      	adds	r3, #56	; 0x38
 8001b82:	623b      	str	r3, [r7, #32]
					for(uint8_t i = 0;i < 3; ++i){
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001b8a:	e00d      	b.n	8001ba8 <GAME_PLAY_Phase_Management+0xb3c>
						if(ptrYugiohCard_src->cardData == 0){
 8001b8c:	6a3b      	ldr	r3, [r7, #32]
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d104      	bne.n	8001b9e <GAME_PLAY_Phase_Management+0xb32>
							check_def_mon++;
 8001b94:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					for(uint8_t i = 0;i < 3; ++i){
 8001b9e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001ba8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d9ed      	bls.n	8001b8c <GAME_PLAY_Phase_Management+0xb20>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001bb6:	623b      	str	r3, [r7, #32]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3338      	adds	r3, #56	; 0x38
 8001bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
					for (uint8_t i = 0;i < 3; ++i) {
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001bc4:	e033      	b.n	8001c2e <GAME_PLAY_Phase_Management+0xbc2>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d125      	bne.n	8001c1e <GAME_PLAY_Phase_Management+0xbb2>
							if(ptrYugiohCard_dst->cardState == 1){
 8001bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bd4:	789b      	ldrb	r3, [r3, #2]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d12e      	bne.n	8001c38 <GAME_PLAY_Phase_Management+0xbcc>
								YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001be0:	4619      	mov	r1, r3
 8001be2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001be4:	f7fe fd4e 	bl	8000684 <YUGIOH_card_copy>
								ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
								if(check_def_mon == 3){
 8001bf0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001bf4:	2b03      	cmp	r3, #3
 8001bf6:	d103      	bne.n	8001c00 <GAME_PLAY_Phase_Management+0xb94>
									ptrYugiohCard_dst->targetPosition = 99;
 8001bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bfa:	2263      	movs	r2, #99	; 0x63
 8001bfc:	71da      	strb	r2, [r3, #7]
 8001bfe:	e003      	b.n	8001c08 <GAME_PLAY_Phase_Management+0xb9c>
									ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 8001c00:	6a3b      	ldr	r3, [r7, #32]
 8001c02:	799a      	ldrb	r2, [r3, #6]
 8001c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c06:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8001c08:	6838      	ldr	r0, [r7, #0]
 8001c0a:	f7fe fdef 	bl	80007ec <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	2234      	movs	r2, #52	; 0x34
 8001c12:	701a      	strb	r2, [r3, #0]
								state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	2203      	movs	r2, #3
 8001c18:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							break;
 8001c1c:	e00c      	b.n	8001c38 <GAME_PLAY_Phase_Management+0xbcc>
						ptrYugiohCard_dst++;
 8001c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c20:	3310      	adds	r3, #16
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
					for (uint8_t i = 0;i < 3; ++i) {
 8001c24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c28:	3301      	adds	r3, #1
 8001c2a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8001c2e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d9c7      	bls.n	8001bc6 <GAME_PLAY_Phase_Management+0xb5a>
				break;
 8001c36:	e1d8      	b.n	8001fea <GAME_PLAY_Phase_Management+0xf7e>
							break;
 8001c38:	bf00      	nop
				break;
 8001c3a:	e1d6      	b.n	8001fea <GAME_PLAY_Phase_Management+0xf7e>
			case counter_DEF:
				//action 52
				if(state_game->action == 52)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b34      	cmp	r3, #52	; 0x34
 8001c42:	d123      	bne.n	8001c8c <GAME_PLAY_Phase_Management+0xc20>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	789b      	ldrb	r3, [r3, #2]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d106      	bne.n	8001c5a <GAME_PLAY_Phase_Management+0xbee>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	2204      	movs	r2, #4
 8001c50:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	2200      	movs	r2, #0
 8001c58:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	68b9      	ldr	r1, [r7, #8]
 8001c5e:	68f8      	ldr	r0, [r7, #12]
 8001c60:	f7fe fd78 	bl	8000754 <Player_Reading_Card>

					state_game->PlyerAction_Battle_Substate = counter_ATK;
					state_game->action = 54;
				}

				break;
 8001c64:	e1c3      	b.n	8001fee <GAME_PLAY_Phase_Management+0xf82>
 8001c66:	bf00      	nop
 8001c68:	2400000c 	.word	0x2400000c
 8001c6c:	0800d5dc 	.word	0x0800d5dc
 8001c70:	0800d5e8 	.word	0x0800d5e8
 8001c74:	0800d5f8 	.word	0x0800d5f8
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	240002e4 	.word	0x240002e4
 8001c80:	24000e98 	.word	0x24000e98
 8001c84:	24000014 	.word	0x24000014
 8001c88:	0800d608 	.word	0x0800d608
				else if ((state_game->action == 53 )){
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	2b35      	cmp	r3, #53	; 0x35
 8001c92:	f040 81ac 	bne.w	8001fee <GAME_PLAY_Phase_Management+0xf82>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001c9c:	623b      	str	r3, [r7, #32]
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8001c9e:	68b8      	ldr	r0, [r7, #8]
 8001ca0:	f7fe fe4f 	bl	8000942 <YUGIOH_card_Buffer_Update_Chain>
					YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001caa:	4619      	mov	r1, r3
 8001cac:	6a38      	ldr	r0, [r7, #32]
 8001cae:	f7fe fce9 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001cc8:	3301      	adds	r3, #1
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Battle_Substate = counter_ATK;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2202      	movs	r2, #2
 8001cd6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	2236      	movs	r2, #54	; 0x36
 8001cde:	701a      	strb	r2, [r3, #0]
				break;
 8001ce0:	e185      	b.n	8001fee <GAME_PLAY_Phase_Management+0xf82>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b36      	cmp	r3, #54	; 0x36
 8001ce8:	d111      	bne.n	8001d0e <GAME_PLAY_Phase_Management+0xca2>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	68b9      	ldr	r1, [r7, #8]
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7fe fd30 	bl	8000754 <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f040 817a 	bne.w	8001ff2 <GAME_PLAY_Phase_Management+0xf86>
						//affect
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2204      	movs	r2, #4
 8001d02:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	705a      	strb	r2, [r3, #1]

					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 54;
				}

				break;
 8001d0c:	e171      	b.n	8001ff2 <GAME_PLAY_Phase_Management+0xf86>
				else if ((state_game->action == 55 )){
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b37      	cmp	r3, #55	; 0x37
 8001d14:	f040 816d 	bne.w	8001ff2 <GAME_PLAY_Phase_Management+0xf86>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001d1e:	623b      	str	r3, [r7, #32]
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7fe fe0e 	bl	8000942 <YUGIOH_card_Buffer_Update_Chain>
					YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	6a38      	ldr	r0, [r7, #32]
 8001d30:	f7fe fca8 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2203      	movs	r2, #3
 8001d58:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2236      	movs	r2, #54	; 0x36
 8001d60:	701a      	strb	r2, [r3, #0]
				break;
 8001d62:	e146      	b.n	8001ff2 <GAME_PLAY_Phase_Management+0xf86>
			case chain_effect:
				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	785b      	ldrb	r3, [r3, #1]
 8001d68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	68ba      	ldr	r2, [r7, #8]
 8001d70:	4413      	add	r3, r2
 8001d72:	3304      	adds	r3, #4
 8001d74:	61bb      	str	r3, [r7, #24]
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	785b      	ldrb	r3, [r3, #1]
 8001d7a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	4413      	add	r3, r2
 8001d84:	3304      	adds	r3, #4
 8001d86:	617b      	str	r3, [r7, #20]

				if(state_game->action == 54)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b36      	cmp	r3, #54	; 0x36
 8001d8e:	f040 8132 	bne.w	8001ff6 <GAME_PLAY_Phase_Management+0xf8a>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	785a      	ldrb	r2, [r3, #1]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d24a      	bcs.n	8001e36 <GAME_PLAY_Phase_Management+0xdca>
					{
						state_game->test = 165;
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	22a5      	movs	r2, #165	; 0xa5
 8001da4:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	3344      	adds	r3, #68	; 0x44
 8001dae:	011b      	lsls	r3, r3, #4
 8001db0:	68ba      	ldr	r2, [r7, #8]
 8001db2:	4413      	add	r3, r2
 8001db4:	3304      	adds	r3, #4
 8001db6:	623b      	str	r3, [r7, #32]

						if (ptrYugiohCard_src->cardSignature == 11)
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b0b      	cmp	r3, #11
 8001dbe:	d10b      	bne.n	8001dd8 <GAME_PLAY_Phase_Management+0xd6c>
						{
							YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f93d 	bl	8002044 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
							state_game->count_chain++;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	785b      	ldrb	r3, [r3, #1]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8001dd6:	e10e      	b.n	8001ff6 <GAME_PLAY_Phase_Management+0xf8a>
						else if (ptrYugiohCard_src->cardSignature == 12)
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b0c      	cmp	r3, #12
 8001dde:	d10e      	bne.n	8001dfe <GAME_PLAY_Phase_Management+0xd92>
							YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f000 f94a 	bl	8002084 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
							state_game->count_chain++;
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	3301      	adds	r3, #1
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	705a      	strb	r2, [r3, #1]
				break;
 8001dfc:	e0fb      	b.n	8001ff6 <GAME_PLAY_Phase_Management+0xf8a>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	2b0e      	cmp	r3, #14
 8001e04:	d004      	beq.n	8001e10 <GAME_PLAY_Phase_Management+0xda4>
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b0f      	cmp	r3, #15
 8001e0c:	f040 80f3 	bne.w	8001ff6 <GAME_PLAY_Phase_Management+0xf8a>
							state_game->test = 133;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2285      	movs	r2, #133	; 0x85
 8001e14:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4619      	mov	r1, r3
 8001e22:	4610      	mov	r0, r2
 8001e24:	f000 fa02 	bl	800222c <YUGIOH_Gift_of_the_Mystical_Elf>
							state_game->count_chain++;
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	785b      	ldrb	r3, [r3, #1]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	705a      	strb	r2, [r3, #1]
				break;
 8001e34:	e0df      	b.n	8001ff6 <GAME_PLAY_Phase_Management+0xf8a>
						state_game->action = 50;
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	2232      	movs	r2, #50	; 0x32
 8001e3a:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2205      	movs	r2, #5
 8001e40:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001e44:	e0d7      	b.n	8001ff6 <GAME_PLAY_Phase_Management+0xf8a>
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001e4c:	623b      	str	r3, [r7, #32]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	791b      	ldrb	r3, [r3, #4]
 8001e52:	77fb      	strb	r3, [r7, #31]

				if(ptrYugiohCard_src->targetPosition == 99){
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	79db      	ldrb	r3, [r3, #7]
 8001e58:	2b63      	cmp	r3, #99	; 0x63
 8001e5a:	d114      	bne.n	8001e86 <GAME_PLAY_Phase_Management+0xe1a>
					playerDef->life_point -= atk*100;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	889a      	ldrh	r2, [r3, #4]
 8001e60:	7ffb      	ldrb	r3, [r7, #31]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4619      	mov	r1, r3
 8001e66:	0249      	lsls	r1, r1, #9
 8001e68:	1ac9      	subs	r1, r1, r3
 8001e6a:	0089      	lsls	r1, r1, #2
 8001e6c:	4419      	add	r1, r3
 8001e6e:	00c9      	lsls	r1, r1, #3
 8001e70:	1acb      	subs	r3, r1, r3
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	4413      	add	r3, r2
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	2206      	movs	r2, #6
 8001e82:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				}

				ptrYugiohCard_dst = playerDef->cardOnBoard;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	3308      	adds	r3, #8
 8001e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	799b      	ldrb	r3, [r3, #6]
 8001e90:	011b      	lsls	r3, r3, #4
 8001e92:	3308      	adds	r3, #8
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	4413      	add	r3, r2
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c

				state_game->test = 54;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	2236      	movs	r2, #54	; 0x36
 8001e9e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				if(ptrYugiohCard_dst->cardState == 0){
 8001ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea4:	789b      	ldrb	r3, [r3, #2]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d12c      	bne.n	8001f04 <GAME_PLAY_Phase_Management+0xe98>
					//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001eac:	795b      	ldrb	r3, [r3, #5]
 8001eae:	777b      	strb	r3, [r7, #29]
					if(atk < def){
 8001eb0:	7ffa      	ldrb	r2, [r7, #31]
 8001eb2:	7f7b      	ldrb	r3, [r7, #29]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d217      	bcs.n	8001ee8 <GAME_PLAY_Phase_Management+0xe7c>
						playerAtk->life_point -= (def-atk)*100;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	889a      	ldrh	r2, [r3, #4]
 8001ebc:	7f79      	ldrb	r1, [r7, #29]
 8001ebe:	7ffb      	ldrb	r3, [r7, #31]
 8001ec0:	1acb      	subs	r3, r1, r3
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	0249      	lsls	r1, r1, #9
 8001ec8:	1ac9      	subs	r1, r1, r3
 8001eca:	0089      	lsls	r1, r1, #2
 8001ecc:	4419      	add	r1, r3
 8001ece:	00c9      	lsls	r1, r1, #3
 8001ed0:	1acb      	subs	r3, r1, r3
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2206      	movs	r2, #6
 8001ee2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						playerDef->life_point -= (atk-atk2)*100;
						state_game->PlyerAction_Battle_Substate = after_calculate;
					}

				}
				break;
 8001ee6:	e088      	b.n	8001ffa <GAME_PLAY_Phase_Management+0xf8e>
					else if(atk > def){
 8001ee8:	7ffa      	ldrb	r2, [r7, #31]
 8001eea:	7f7b      	ldrb	r3, [r7, #29]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	f240 8084 	bls.w	8001ffa <GAME_PLAY_Phase_Management+0xf8e>
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8001ef2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ef4:	6838      	ldr	r0, [r7, #0]
 8001ef6:	f7fe fd70 	bl	80009da <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2206      	movs	r2, #6
 8001efe:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001f02:	e07a      	b.n	8001ffa <GAME_PLAY_Phase_Management+0xf8e>
				else if(ptrYugiohCard_dst->cardState == 1){
 8001f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f06:	789b      	ldrb	r3, [r3, #2]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d176      	bne.n	8001ffa <GAME_PLAY_Phase_Management+0xf8e>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8001f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f0e:	791b      	ldrb	r3, [r3, #4]
 8001f10:	77bb      	strb	r3, [r7, #30]
					state_game->test = 60;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	223c      	movs	r2, #60	; 0x3c
 8001f16:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(atk < atk2){
 8001f1a:	7ffa      	ldrb	r2, [r7, #31]
 8001f1c:	7fbb      	ldrb	r3, [r7, #30]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d21f      	bcs.n	8001f62 <GAME_PLAY_Phase_Management+0xef6>
						state_game->test = 61;
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	223d      	movs	r2, #61	; 0x3d
 8001f26:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						playerAtk->life_point -= (atk2-atk)*100;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	889a      	ldrh	r2, [r3, #4]
 8001f2e:	7fb9      	ldrb	r1, [r7, #30]
 8001f30:	7ffb      	ldrb	r3, [r7, #31]
 8001f32:	1acb      	subs	r3, r1, r3
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4619      	mov	r1, r3
 8001f38:	0249      	lsls	r1, r1, #9
 8001f3a:	1ac9      	subs	r1, r1, r3
 8001f3c:	0089      	lsls	r1, r1, #2
 8001f3e:	4419      	add	r1, r3
 8001f40:	00c9      	lsls	r1, r1, #3
 8001f42:	1acb      	subs	r3, r1, r3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	809a      	strh	r2, [r3, #4]
						YUGIOH_To_GY(playerAtk, ptrYugiohCard_src);
 8001f50:	6a39      	ldr	r1, [r7, #32]
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fd41 	bl	80009da <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2206      	movs	r2, #6
 8001f5c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001f60:	e04b      	b.n	8001ffa <GAME_PLAY_Phase_Management+0xf8e>
					else if(atk > atk2){
 8001f62:	7ffa      	ldrb	r2, [r7, #31]
 8001f64:	7fbb      	ldrb	r3, [r7, #30]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d947      	bls.n	8001ffa <GAME_PLAY_Phase_Management+0xf8e>
						state_game->test = 70;
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2246      	movs	r2, #70	; 0x46
 8001f6e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8001f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f74:	6838      	ldr	r0, [r7, #0]
 8001f76:	f7fe fd30 	bl	80009da <YUGIOH_To_GY>
						playerDef->life_point -= (atk-atk2)*100;
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	889a      	ldrh	r2, [r3, #4]
 8001f7e:	7ff9      	ldrb	r1, [r7, #31]
 8001f80:	7fbb      	ldrb	r3, [r7, #30]
 8001f82:	1acb      	subs	r3, r1, r3
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	0249      	lsls	r1, r1, #9
 8001f8a:	1ac9      	subs	r1, r1, r3
 8001f8c:	0089      	lsls	r1, r1, #2
 8001f8e:	4419      	add	r1, r3
 8001f90:	00c9      	lsls	r1, r1, #3
 8001f92:	1acb      	subs	r3, r1, r3
 8001f94:	009b      	lsls	r3, r3, #2
 8001f96:	b29b      	uxth	r3, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	2206      	movs	r2, #6
 8001fa4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001fa8:	e027      	b.n	8001ffa <GAME_PLAY_Phase_Management+0xf8e>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001fb0:	623b      	str	r3, [r7, #32]
				YUGIOH_card_clear(ptrYugiohCard_src);
 8001fb2:	6a38      	ldr	r0, [r7, #32]
 8001fb4:	f7fe fb9d 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	889b      	ldrh	r3, [r3, #4]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <GAME_PLAY_Phase_Management+0xf60>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	889b      	ldrh	r3, [r3, #4]
 8001fc4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d904      	bls.n	8001fd6 <GAME_PLAY_Phase_Management+0xf6a>
					state_game->MainGame_State = Game_Ended;
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8001fd4:	e012      	b.n	8001ffc <GAME_PLAY_Phase_Management+0xf90>
					state_game->action = 50;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2232      	movs	r2, #50	; 0x32
 8001fda:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2201      	movs	r2, #1
 8001fe0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001fe4:	e00a      	b.n	8001ffc <GAME_PLAY_Phase_Management+0xf90>
				break;
 8001fe6:	bf00      	nop
 8001fe8:	e00f      	b.n	800200a <GAME_PLAY_Phase_Management+0xf9e>
				break;
 8001fea:	bf00      	nop
 8001fec:	e00d      	b.n	800200a <GAME_PLAY_Phase_Management+0xf9e>
				break;
 8001fee:	bf00      	nop
 8001ff0:	e00b      	b.n	800200a <GAME_PLAY_Phase_Management+0xf9e>
				break;
 8001ff2:	bf00      	nop
 8001ff4:	e009      	b.n	800200a <GAME_PLAY_Phase_Management+0xf9e>
				break;
 8001ff6:	bf00      	nop
 8001ff8:	e007      	b.n	800200a <GAME_PLAY_Phase_Management+0xf9e>
				break;
 8001ffa:	bf00      	nop
			}
			break;
 8001ffc:	e005      	b.n	800200a <GAME_PLAY_Phase_Management+0xf9e>
		break;
 8001ffe:	bf00      	nop
 8002000:	e004      	b.n	800200c <GAME_PLAY_Phase_Management+0xfa0>
		break;
 8002002:	bf00      	nop
 8002004:	e002      	b.n	800200c <GAME_PLAY_Phase_Management+0xfa0>
		break;
 8002006:	bf00      	nop
 8002008:	e000      	b.n	800200c <GAME_PLAY_Phase_Management+0xfa0>
			break;
 800200a:	bf00      	nop

	}
}
 800200c:	bf00      	nop
 800200e:	3730      	adds	r7, #48	; 0x30
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <Test_EFF>:

void Test_EFF(Player *playerUser,Player *playerOpponent)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
	playerUser->life_point += 1000;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	889b      	ldrh	r3, [r3, #4]
 8002022:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8002026:	b29a      	uxth	r2, r3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	809a      	strh	r2, [r3, #4]
	playerOpponent->life_point -=100;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	889b      	ldrh	r3, [r3, #4]
 8002030:	3b64      	subs	r3, #100	; 0x64
 8002032:	b29a      	uxth	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	809a      	strh	r2, [r3, #4]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3338      	adds	r3, #56	; 0x38
 8002050:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002052:	2300      	movs	r3, #0
 8002054:	72fb      	strb	r3, [r7, #11]
 8002056:	e00d      	b.n	8002074 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fcb9 	bl	80009da <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3310      	adds	r3, #16
 800206c:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	3301      	adds	r3, #1
 8002072:	72fb      	strb	r3, [r7, #11]
 8002074:	7afb      	ldrb	r3, [r7, #11]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d9ee      	bls.n	8002058 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 800207a:	bf00      	nop
 800207c:	bf00      	nop
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3308      	adds	r3, #8
 8002092:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3338      	adds	r3, #56	; 0x38
 8002098:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3308      	adds	r3, #8
 800209e:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	3338      	adds	r3, #56	; 0x38
 80020a4:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e00d      	b.n	80020c8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d003      	beq.n	80020bc <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 80020b4:	6979      	ldr	r1, [r7, #20]
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f7fe fc8f 	bl	80009da <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3310      	adds	r3, #16
 80020c0:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	3301      	adds	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d9ee      	bls.n	80020ac <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80020ce:	2300      	movs	r3, #0
 80020d0:	73bb      	strb	r3, [r7, #14]
 80020d2:	e00d      	b.n	80020f0 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 80020dc:	6939      	ldr	r1, [r7, #16]
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f7fe fc7b 	bl	80009da <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	3310      	adds	r3, #16
 80020e8:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	3301      	adds	r3, #1
 80020ee:	73bb      	strb	r3, [r7, #14]
 80020f0:	7bbb      	ldrb	r3, [r7, #14]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d9ee      	bls.n	80020d4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002116:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3368      	adds	r3, #104	; 0x68
 800211c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	3368      	adds	r3, #104	; 0x68
 8002122:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8002124:	2300      	movs	r3, #0
 8002126:	74fb      	strb	r3, [r7, #19]
 8002128:	e010      	b.n	800214c <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	68da      	ldr	r2, [r3, #12]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	429a      	cmp	r2, r3
 8002134:	d104      	bne.n	8002140 <YUGIOH_Reborn+0x40>
			flag = 1;
 8002136:	2301      	movs	r3, #1
 8002138:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800213a:	7cfb      	ldrb	r3, [r7, #19]
 800213c:	77bb      	strb	r3, [r7, #30]
			break;
 800213e:	e008      	b.n	8002152 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	3310      	adds	r3, #16
 8002144:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8002146:	7cfb      	ldrb	r3, [r7, #19]
 8002148:	3301      	adds	r3, #1
 800214a:	74fb      	strb	r3, [r7, #19]
 800214c:	7cfb      	ldrb	r3, [r7, #19]
 800214e:	2b13      	cmp	r3, #19
 8002150:	d9eb      	bls.n	800212a <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3338      	adds	r3, #56	; 0x38
 8002156:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 8002158:	7ffb      	ldrb	r3, [r7, #31]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d134      	bne.n	80021c8 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	799a      	ldrb	r2, [r3, #6]
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <YUGIOH_Reborn+0xd0>)
 8002164:	fba3 1302 	umull	r1, r3, r3, r2
 8002168:	0899      	lsrs	r1, r3, #2
 800216a:	460b      	mov	r3, r1
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	440b      	add	r3, r1
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 8002176:	7afb      	ldrb	r3, [r7, #11]
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	3308      	adds	r3, #8
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	4413      	add	r3, r2
 8002180:	4619      	mov	r1, r3
 8002182:	69b8      	ldr	r0, [r7, #24]
 8002184:	f7fe fa7e 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 8002188:	7fbb      	ldrb	r3, [r7, #30]
 800218a:	3301      	adds	r3, #1
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	3368      	adds	r3, #104	; 0x68
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 8002196:	7fbb      	ldrb	r3, [r7, #30]
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	3368      	adds	r3, #104	; 0x68
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80021a2:	7fbb      	ldrb	r3, [r7, #30]
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	e00c      	b.n	80021c2 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80021a8:	6979      	ldr	r1, [r7, #20]
 80021aa:	69b8      	ldr	r0, [r7, #24]
 80021ac:	f7fe fa6a 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	3310      	adds	r3, #16
 80021b4:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	3310      	adds	r3, #16
 80021ba:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	3301      	adds	r3, #1
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b13      	cmp	r3, #19
 80021c6:	ddef      	ble.n	80021a8 <YUGIOH_Reborn+0xa8>
		}


	}
}
 80021c8:	bf00      	nop
 80021ca:	3720      	adds	r7, #32
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	aaaaaaab 	.word	0xaaaaaaab

080021d4 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80021e2:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80021ea:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	799a      	ldrb	r2, [r3, #6]
 80021f0:	4b0d      	ldr	r3, [pc, #52]	; (8002228 <YUGIOH_Ancient_Rules+0x54>)
 80021f2:	fba3 1302 	umull	r1, r3, r3, r2
 80021f6:	0899      	lsrs	r1, r3, #2
 80021f8:	460b      	mov	r3, r1
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	440b      	add	r3, r1
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3308      	adds	r3, #8
 8002208:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800220a:	7cfb      	ldrb	r3, [r7, #19]
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	3308      	adds	r3, #8
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	4413      	add	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002216:	68f9      	ldr	r1, [r7, #12]
 8002218:	6978      	ldr	r0, [r7, #20]
 800221a:	f7fe fa33 	bl	8000684 <YUGIOH_card_copy>

}
 800221e:	bf00      	nop
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	aaaaaaab 	.word	0xaaaaaaab

0800222c <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	3308      	adds	r3, #8
 800223a:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3338      	adds	r3, #56	; 0x38
 8002240:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	3308      	adds	r3, #8
 8002246:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3338      	adds	r3, #56	; 0x38
 800224c:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002252:	2300      	movs	r3, #0
 8002254:	73bb      	strb	r3, [r7, #14]
 8002256:	e00c      	b.n	8002272 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	785b      	ldrb	r3, [r3, #1]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d102      	bne.n	8002266 <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	3301      	adds	r3, #1
 8002264:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	3310      	adds	r3, #16
 800226a:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800226c:	7bbb      	ldrb	r3, [r7, #14]
 800226e:	3301      	adds	r3, #1
 8002270:	73bb      	strb	r3, [r7, #14]
 8002272:	7bbb      	ldrb	r3, [r7, #14]
 8002274:	2b02      	cmp	r3, #2
 8002276:	d9ef      	bls.n	8002258 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002278:	2300      	movs	r3, #0
 800227a:	737b      	strb	r3, [r7, #13]
 800227c:	e00c      	b.n	8002298 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	785b      	ldrb	r3, [r3, #1]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d102      	bne.n	800228c <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	3301      	adds	r3, #1
 800228a:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	3310      	adds	r3, #16
 8002290:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002292:	7b7b      	ldrb	r3, [r7, #13]
 8002294:	3301      	adds	r3, #1
 8002296:	737b      	strb	r3, [r7, #13]
 8002298:	7b7b      	ldrb	r3, [r7, #13]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d9ef      	bls.n	800227e <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	889a      	ldrh	r2, [r3, #4]
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	4619      	mov	r1, r3
 80022a8:	0089      	lsls	r1, r1, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	4619      	mov	r1, r3
 80022ae:	0109      	lsls	r1, r1, #4
 80022b0:	1acb      	subs	r3, r1, r3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	4413      	add	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	809a      	strh	r2, [r3, #4]

}
 80022be:	bf00      	nop
 80022c0:	371c      	adds	r7, #28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
	...

080022cc <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80022dc:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80022e4:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	799a      	ldrb	r2, [r3, #6]
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <YUGIOH_Stop_Defense+0x68>)
 80022ec:	fba3 1302 	umull	r1, r3, r3, r2
 80022f0:	0899      	lsrs	r1, r3, #2
 80022f2:	460b      	mov	r3, r1
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	440b      	add	r3, r1
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	3308      	adds	r3, #8
 8002302:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	3308      	adds	r3, #8
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	4413      	add	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	789b      	ldrb	r3, [r3, #2]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d106      	bne.n	8002326 <YUGIOH_Stop_Defense+0x5a>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2201      	movs	r2, #1
 8002324:	709a      	strb	r2, [r3, #2]
	}

}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	aaaaaaab 	.word	0xaaaaaaab

08002338 <MainGUI>:

//void YUGIOH_Pot_Of_Greed(Player *player){
//
//}

void MainGUI(){
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800233e:	4b47      	ldr	r3, [pc, #284]	; (800245c <MainGUI+0x124>)
 8002340:	2200      	movs	r2, #0
 8002342:	9202      	str	r2, [sp, #8]
 8002344:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002348:	9201      	str	r2, [sp, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	9200      	str	r2, [sp, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a43      	ldr	r2, [pc, #268]	; (8002460 <MainGUI+0x128>)
 8002352:	2105      	movs	r1, #5
 8002354:	2005      	movs	r0, #5
 8002356:	f000 ffe8 	bl	800332a <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800235a:	4b40      	ldr	r3, [pc, #256]	; (800245c <MainGUI+0x124>)
 800235c:	2200      	movs	r2, #0
 800235e:	9202      	str	r2, [sp, #8]
 8002360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002364:	9201      	str	r2, [sp, #4]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	9200      	str	r2, [sp, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3d      	ldr	r2, [pc, #244]	; (8002464 <MainGUI+0x12c>)
 800236e:	2114      	movs	r1, #20
 8002370:	2005      	movs	r0, #5
 8002372:	f000 ffda 	bl	800332a <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002376:	4b39      	ldr	r3, [pc, #228]	; (800245c <MainGUI+0x124>)
 8002378:	2200      	movs	r2, #0
 800237a:	9202      	str	r2, [sp, #8]
 800237c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002380:	9201      	str	r2, [sp, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	9200      	str	r2, [sp, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a37      	ldr	r2, [pc, #220]	; (8002468 <MainGUI+0x130>)
 800238a:	2123      	movs	r1, #35	; 0x23
 800238c:	2005      	movs	r0, #5
 800238e:	f000 ffcc 	bl	800332a <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002392:	4b32      	ldr	r3, [pc, #200]	; (800245c <MainGUI+0x124>)
 8002394:	2200      	movs	r2, #0
 8002396:	9202      	str	r2, [sp, #8]
 8002398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800239c:	9201      	str	r2, [sp, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	9200      	str	r2, [sp, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a31      	ldr	r2, [pc, #196]	; (800246c <MainGUI+0x134>)
 80023a6:	2132      	movs	r1, #50	; 0x32
 80023a8:	2000      	movs	r0, #0
 80023aa:	f000 ffbe 	bl	800332a <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80023ae:	4b2b      	ldr	r3, [pc, #172]	; (800245c <MainGUI+0x124>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	9202      	str	r2, [sp, #8]
 80023b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b8:	9201      	str	r2, [sp, #4]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	9200      	str	r2, [sp, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a2b      	ldr	r2, [pc, #172]	; (8002470 <MainGUI+0x138>)
 80023c2:	213c      	movs	r1, #60	; 0x3c
 80023c4:	2000      	movs	r0, #0
 80023c6:	f000 ffb0 	bl	800332a <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80023ca:	4b24      	ldr	r3, [pc, #144]	; (800245c <MainGUI+0x124>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	9202      	str	r2, [sp, #8]
 80023d0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80023d4:	9201      	str	r2, [sp, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	9200      	str	r2, [sp, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a25      	ldr	r2, [pc, #148]	; (8002474 <MainGUI+0x13c>)
 80023de:	2105      	movs	r1, #5
 80023e0:	2005      	movs	r0, #5
 80023e2:	f000 ff58 	bl	8003296 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <MainGUI+0x124>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	9202      	str	r2, [sp, #8]
 80023ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023f0:	9201      	str	r2, [sp, #4]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	9200      	str	r2, [sp, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <MainGUI+0x12c>)
 80023fa:	2114      	movs	r1, #20
 80023fc:	2005      	movs	r0, #5
 80023fe:	f000 ff4a 	bl	8003296 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002402:	4b16      	ldr	r3, [pc, #88]	; (800245c <MainGUI+0x124>)
 8002404:	2200      	movs	r2, #0
 8002406:	9202      	str	r2, [sp, #8]
 8002408:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800240c:	9201      	str	r2, [sp, #4]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	9200      	str	r2, [sp, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a14      	ldr	r2, [pc, #80]	; (8002468 <MainGUI+0x130>)
 8002416:	2123      	movs	r1, #35	; 0x23
 8002418:	2005      	movs	r0, #5
 800241a:	f000 ff3c 	bl	8003296 <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800241e:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MainGUI+0x124>)
 8002420:	2200      	movs	r2, #0
 8002422:	9202      	str	r2, [sp, #8]
 8002424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002428:	9201      	str	r2, [sp, #4]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	9200      	str	r2, [sp, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0e      	ldr	r2, [pc, #56]	; (800246c <MainGUI+0x134>)
 8002432:	2132      	movs	r1, #50	; 0x32
 8002434:	2000      	movs	r0, #0
 8002436:	f000 ff2e 	bl	8003296 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <MainGUI+0x124>)
 800243c:	2200      	movs	r2, #0
 800243e:	9202      	str	r2, [sp, #8]
 8002440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002444:	9201      	str	r2, [sp, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	9200      	str	r2, [sp, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a08      	ldr	r2, [pc, #32]	; (8002470 <MainGUI+0x138>)
 800244e:	213c      	movs	r1, #60	; 0x3c
 8002450:	2000      	movs	r0, #0
 8002452:	f000 ff20 	bl	8003296 <ST7735_WriteString>
}
 8002456:	bf00      	nop
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	2400000c 	.word	0x2400000c
 8002460:	0800d544 	.word	0x0800d544
 8002464:	0800d614 	.word	0x0800d614
 8002468:	0800d624 	.word	0x0800d624
 800246c:	0800d62c 	.word	0x0800d62c
 8002470:	0800d4f0 	.word	0x0800d4f0
 8002474:	0800d4e4 	.word	0x0800d4e4

08002478 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8002478:	b580      	push	{r7, lr}
 800247a:	b088      	sub	sp, #32
 800247c:	af04      	add	r7, sp, #16
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8002482:	2300      	movs	r3, #0
 8002484:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8002486:	4b5e      	ldr	r3, [pc, #376]	; (8002600 <LCDvalue+0x188>)
 8002488:	881a      	ldrh	r2, [r3, #0]
 800248a:	4b5e      	ldr	r3, [pc, #376]	; (8002604 <LCDvalue+0x18c>)
 800248c:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 800248e:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <LCDvalue+0x190>)
 8002490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002494:	4a5d      	ldr	r2, [pc, #372]	; (800260c <LCDvalue+0x194>)
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	f7fd ff71 	bl	8000380 <__aeabi_uldivmod>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4613      	mov	r3, r2
 80024a4:	817b      	strh	r3, [r7, #10]
	time -= a;
 80024a6:	4b57      	ldr	r3, [pc, #348]	; (8002604 <LCDvalue+0x18c>)
 80024a8:	881a      	ldrh	r2, [r3, #0]
 80024aa:	897b      	ldrh	r3, [r7, #10]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	b29a      	uxth	r2, r3
 80024b0:	4b54      	ldr	r3, [pc, #336]	; (8002604 <LCDvalue+0x18c>)
 80024b2:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 80024b4:	4b53      	ldr	r3, [pc, #332]	; (8002604 <LCDvalue+0x18c>)
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4955      	ldr	r1, [pc, #340]	; (8002610 <LCDvalue+0x198>)
 80024bc:	4855      	ldr	r0, [pc, #340]	; (8002614 <LCDvalue+0x19c>)
 80024be:	f00a fc87 	bl	800cdd0 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 80024c2:	2300      	movs	r3, #0
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e012      	b.n	80024ee <LCDvalue+0x76>
		if(t_c[i] == 0){
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <LCDvalue+0x19c>)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4413      	add	r3, r2
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d109      	bne.n	80024e8 <LCDvalue+0x70>
			t_c[i] = 32;
 80024d4:	4a4f      	ldr	r2, [pc, #316]	; (8002614 <LCDvalue+0x19c>)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4413      	add	r3, r2
 80024da:	2220      	movs	r2, #32
 80024dc:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3301      	adds	r3, #1
 80024e2:	4a4c      	ldr	r2, [pc, #304]	; (8002614 <LCDvalue+0x19c>)
 80024e4:	2120      	movs	r1, #32
 80024e6:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	3301      	adds	r3, #1
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	dde9      	ble.n	80024c8 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <LCDvalue+0x18c>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d105      	bne.n	8002508 <LCDvalue+0x90>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 80024fc:	4846      	ldr	r0, [pc, #280]	; (8002618 <LCDvalue+0x1a0>)
 80024fe:	f008 f88b 	bl	800a618 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8002502:	4b40      	ldr	r3, [pc, #256]	; (8002604 <LCDvalue+0x18c>)
 8002504:	2200      	movs	r2, #0
 8002506:	801a      	strh	r2, [r3, #0]
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	889b      	ldrh	r3, [r3, #4]
 800250c:	461a      	mov	r2, r3
 800250e:	4940      	ldr	r1, [pc, #256]	; (8002610 <LCDvalue+0x198>)
 8002510:	4842      	ldr	r0, [pc, #264]	; (800261c <LCDvalue+0x1a4>)
 8002512:	f00a fc5d 	bl	800cdd0 <siprintf>
	if(C_LP_ATK[3] == 0){
 8002516:	4b41      	ldr	r3, [pc, #260]	; (800261c <LCDvalue+0x1a4>)
 8002518:	78db      	ldrb	r3, [r3, #3]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d10e      	bne.n	800253c <LCDvalue+0xc4>
		C_LP_ATK[3] = C_LP_ATK[2];
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <LCDvalue+0x1a4>)
 8002520:	789a      	ldrb	r2, [r3, #2]
 8002522:	4b3e      	ldr	r3, [pc, #248]	; (800261c <LCDvalue+0x1a4>)
 8002524:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <LCDvalue+0x1a4>)
 8002528:	785a      	ldrb	r2, [r3, #1]
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <LCDvalue+0x1a4>)
 800252c:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 800252e:	4b3b      	ldr	r3, [pc, #236]	; (800261c <LCDvalue+0x1a4>)
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	4b3a      	ldr	r3, [pc, #232]	; (800261c <LCDvalue+0x1a4>)
 8002534:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8002536:	4b39      	ldr	r3, [pc, #228]	; (800261c <LCDvalue+0x1a4>)
 8002538:	2220      	movs	r2, #32
 800253a:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	781a      	ldrb	r2, [r3, #0]
 8002540:	4b37      	ldr	r3, [pc, #220]	; (8002620 <LCDvalue+0x1a8>)
 8002542:	9203      	str	r2, [sp, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	9202      	str	r2, [sp, #8]
 8002548:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800254c:	9201      	str	r2, [sp, #4]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	9200      	str	r2, [sp, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a31      	ldr	r2, [pc, #196]	; (800261c <LCDvalue+0x1a4>)
 8002556:	2114      	movs	r1, #20
 8002558:	205a      	movs	r0, #90	; 0x5a
 800255a:	f000 ff30 	bl	80033be <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <LCDvalue+0x1a8>)
 8002564:	9203      	str	r2, [sp, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	9202      	str	r2, [sp, #8]
 800256a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800256e:	9201      	str	r2, [sp, #4]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	9200      	str	r2, [sp, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a27      	ldr	r2, [pc, #156]	; (8002614 <LCDvalue+0x19c>)
 8002578:	2132      	movs	r1, #50	; 0x32
 800257a:	2069      	movs	r0, #105	; 0x69
 800257c:	f000 ff1f 	bl	80033be <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	889b      	ldrh	r3, [r3, #4]
 8002584:	461a      	mov	r2, r3
 8002586:	4922      	ldr	r1, [pc, #136]	; (8002610 <LCDvalue+0x198>)
 8002588:	4826      	ldr	r0, [pc, #152]	; (8002624 <LCDvalue+0x1ac>)
 800258a:	f00a fc21 	bl	800cdd0 <siprintf>
	if(C_LP_DEF[3] == 0){
 800258e:	4b25      	ldr	r3, [pc, #148]	; (8002624 <LCDvalue+0x1ac>)
 8002590:	78db      	ldrb	r3, [r3, #3]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10e      	bne.n	80025b4 <LCDvalue+0x13c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8002596:	4b23      	ldr	r3, [pc, #140]	; (8002624 <LCDvalue+0x1ac>)
 8002598:	789a      	ldrb	r2, [r3, #2]
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <LCDvalue+0x1ac>)
 800259c:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 800259e:	4b21      	ldr	r3, [pc, #132]	; (8002624 <LCDvalue+0x1ac>)
 80025a0:	785a      	ldrb	r2, [r3, #1]
 80025a2:	4b20      	ldr	r3, [pc, #128]	; (8002624 <LCDvalue+0x1ac>)
 80025a4:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 80025a6:	4b1f      	ldr	r3, [pc, #124]	; (8002624 <LCDvalue+0x1ac>)
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	4b1e      	ldr	r3, [pc, #120]	; (8002624 <LCDvalue+0x1ac>)
 80025ac:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 80025ae:	4b1d      	ldr	r3, [pc, #116]	; (8002624 <LCDvalue+0x1ac>)
 80025b0:	2220      	movs	r2, #32
 80025b2:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	781a      	ldrb	r2, [r3, #0]
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <LCDvalue+0x1a8>)
 80025ba:	9203      	str	r2, [sp, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	9202      	str	r2, [sp, #8]
 80025c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80025c4:	9201      	str	r2, [sp, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	9200      	str	r2, [sp, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a15      	ldr	r2, [pc, #84]	; (8002624 <LCDvalue+0x1ac>)
 80025ce:	2114      	movs	r1, #20
 80025d0:	205a      	movs	r0, #90	; 0x5a
 80025d2:	f000 fef4 	bl	80033be <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	781a      	ldrb	r2, [r3, #0]
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <LCDvalue+0x1a8>)
 80025dc:	9203      	str	r2, [sp, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	9202      	str	r2, [sp, #8]
 80025e2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80025e6:	9201      	str	r2, [sp, #4]
 80025e8:	685a      	ldr	r2, [r3, #4]
 80025ea:	9200      	str	r2, [sp, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a0e      	ldr	r2, [pc, #56]	; (8002628 <LCDvalue+0x1b0>)
 80025f0:	2132      	movs	r1, #50	; 0x32
 80025f2:	2069      	movs	r0, #105	; 0x69
 80025f4:	f000 fee3 	bl	80033be <ST7735_WriteStringNSS>

}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	24000000 	.word	0x24000000
 8002604:	2400016c 	.word	0x2400016c
 8002608:	24000e98 	.word	0x24000e98
 800260c:	000f4240 	.word	0x000f4240
 8002610:	0800d640 	.word	0x0800d640
 8002614:	24000170 	.word	0x24000170
 8002618:	240002e4 	.word	0x240002e4
 800261c:	24000164 	.word	0x24000164
 8002620:	2400000c 	.word	0x2400000c
 8002624:	24000168 	.word	0x24000168
 8002628:	0800d540 	.word	0x0800d540

0800262c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002630:	4b3d      	ldr	r3, [pc, #244]	; (8002728 <SystemInit+0xfc>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	4a3c      	ldr	r2, [pc, #240]	; (8002728 <SystemInit+0xfc>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8002640:	4b39      	ldr	r3, [pc, #228]	; (8002728 <SystemInit+0xfc>)
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	4a38      	ldr	r2, [pc, #224]	; (8002728 <SystemInit+0xfc>)
 8002646:	f043 0310 	orr.w	r3, r3, #16
 800264a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800264c:	4b37      	ldr	r3, [pc, #220]	; (800272c <SystemInit+0x100>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 030f 	and.w	r3, r3, #15
 8002654:	2b06      	cmp	r3, #6
 8002656:	d807      	bhi.n	8002668 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <SystemInit+0x100>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 030f 	bic.w	r3, r3, #15
 8002660:	4a32      	ldr	r2, [pc, #200]	; (800272c <SystemInit+0x100>)
 8002662:	f043 0307 	orr.w	r3, r3, #7
 8002666:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002668:	4b31      	ldr	r3, [pc, #196]	; (8002730 <SystemInit+0x104>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a30      	ldr	r2, [pc, #192]	; (8002730 <SystemInit+0x104>)
 800266e:	f043 0301 	orr.w	r3, r3, #1
 8002672:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <SystemInit+0x104>)
 8002676:	2200      	movs	r2, #0
 8002678:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800267a:	4b2d      	ldr	r3, [pc, #180]	; (8002730 <SystemInit+0x104>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	492c      	ldr	r1, [pc, #176]	; (8002730 <SystemInit+0x104>)
 8002680:	4b2c      	ldr	r3, [pc, #176]	; (8002734 <SystemInit+0x108>)
 8002682:	4013      	ands	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002686:	4b29      	ldr	r3, [pc, #164]	; (800272c <SystemInit+0x100>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	2b00      	cmp	r3, #0
 8002690:	d007      	beq.n	80026a2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002692:	4b26      	ldr	r3, [pc, #152]	; (800272c <SystemInit+0x100>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 030f 	bic.w	r3, r3, #15
 800269a:	4a24      	ldr	r2, [pc, #144]	; (800272c <SystemInit+0x100>)
 800269c:	f043 0307 	orr.w	r3, r3, #7
 80026a0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <SystemInit+0x104>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80026a8:	4b21      	ldr	r3, [pc, #132]	; (8002730 <SystemInit+0x104>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80026ae:	4b20      	ldr	r3, [pc, #128]	; (8002730 <SystemInit+0x104>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80026b4:	4b1e      	ldr	r3, [pc, #120]	; (8002730 <SystemInit+0x104>)
 80026b6:	4a20      	ldr	r2, [pc, #128]	; (8002738 <SystemInit+0x10c>)
 80026b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80026ba:	4b1d      	ldr	r3, [pc, #116]	; (8002730 <SystemInit+0x104>)
 80026bc:	4a1f      	ldr	r2, [pc, #124]	; (800273c <SystemInit+0x110>)
 80026be:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <SystemInit+0x104>)
 80026c2:	4a1f      	ldr	r2, [pc, #124]	; (8002740 <SystemInit+0x114>)
 80026c4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <SystemInit+0x104>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <SystemInit+0x104>)
 80026ce:	4a1c      	ldr	r2, [pc, #112]	; (8002740 <SystemInit+0x114>)
 80026d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <SystemInit+0x104>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80026d8:	4b15      	ldr	r3, [pc, #84]	; (8002730 <SystemInit+0x104>)
 80026da:	4a19      	ldr	r2, [pc, #100]	; (8002740 <SystemInit+0x114>)
 80026dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <SystemInit+0x104>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <SystemInit+0x104>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a11      	ldr	r2, [pc, #68]	; (8002730 <SystemInit+0x104>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <SystemInit+0x104>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80026f6:	4b13      	ldr	r3, [pc, #76]	; (8002744 <SystemInit+0x118>)
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	4a12      	ldr	r2, [pc, #72]	; (8002744 <SystemInit+0x118>)
 80026fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002700:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002702:	4b11      	ldr	r3, [pc, #68]	; (8002748 <SystemInit+0x11c>)
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <SystemInit+0x120>)
 8002708:	4013      	ands	r3, r2
 800270a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800270e:	d202      	bcs.n	8002716 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002710:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <SystemInit+0x124>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002716:	4b0f      	ldr	r3, [pc, #60]	; (8002754 <SystemInit+0x128>)
 8002718:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800271c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000ed00 	.word	0xe000ed00
 800272c:	52002000 	.word	0x52002000
 8002730:	58024400 	.word	0x58024400
 8002734:	eaf6ed7f 	.word	0xeaf6ed7f
 8002738:	02020200 	.word	0x02020200
 800273c:	01ff0000 	.word	0x01ff0000
 8002740:	01010280 	.word	0x01010280
 8002744:	580000c0 	.word	0x580000c0
 8002748:	5c001000 	.word	0x5c001000
 800274c:	ffff0000 	.word	0xffff0000
 8002750:	51008108 	.word	0x51008108
 8002754:	52004000 	.word	0x52004000

08002758 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800275e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002762:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8002764:	bf00      	nop
 8002766:	4b37      	ldr	r3, [pc, #220]	; (8002844 <main+0xec>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <main+0x24>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	1e5a      	subs	r2, r3, #1
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	dcf4      	bgt.n	8002766 <main+0xe>
	if ( timeout < 0 )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	da01      	bge.n	8002786 <main+0x2e>
	{
		Error_Handler();
 8002782:	f000 fbeb 	bl	8002f5c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002786:	f001 fb69 	bl	8003e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800278a:	f000 f863 	bl	8002854 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800278e:	f000 f8e5 	bl	800295c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8002792:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <main+0xec>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002798:	4a2a      	ldr	r2, [pc, #168]	; (8002844 <main+0xec>)
 800279a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800279e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <main+0xec>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ac:	603b      	str	r3, [r7, #0]
 80027ae:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80027b0:	2000      	movs	r0, #0
 80027b2:	f004 fd7f 	bl	80072b4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80027b6:	2100      	movs	r1, #0
 80027b8:	2000      	movs	r0, #0
 80027ba:	f004 fd95 	bl	80072e8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80027be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80027c4:	bf00      	nop
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <main+0xec>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d104      	bne.n	80027dc <main+0x84>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	1e5a      	subs	r2, r3, #1
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	dcf4      	bgt.n	80027c6 <main+0x6e>
	if ( timeout < 0 )
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	da01      	bge.n	80027e6 <main+0x8e>
	{
		Error_Handler();
 80027e2:	f000 fbbb 	bl	8002f5c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027e6:	f000 fa6d 	bl	8002cc4 <MX_GPIO_Init>
  MX_ETH_Init();
 80027ea:	f000 f8e9 	bl	80029c0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80027ee:	f000 f9c1 	bl	8002b74 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80027f2:	f000 fa3f 	bl	8002c74 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80027f6:	f000 fa0b 	bl	8002c10 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80027fa:	f000 f92d 	bl	8002a58 <MX_SPI3_Init>
  MX_TIM7_Init();
 80027fe:	f000 f983 	bl	8002b08 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8002802:	f000 fcb3 	bl	800316c <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8002806:	2000      	movs	r0, #0
 8002808:	f000 ffbd 	bl	8003786 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 800280c:	2000      	movs	r0, #0
 800280e:	f000 ffa9 	bl	8003764 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8002812:	f001 fba9 	bl	8003f68 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <main+0xf0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2bc8      	cmp	r3, #200	; 0xc8
 8002820:	d9f7      	bls.n	8002812 <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8002822:	f001 fba1 	bl	8003f68 <HAL_GetTick>
 8002826:	4603      	mov	r3, r0
 8002828:	4a07      	ldr	r2, [pc, #28]	; (8002848 <main+0xf0>)
 800282a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800282c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002830:	4806      	ldr	r0, [pc, #24]	; (800284c <main+0xf4>)
 8002832:	f004 fd24 	bl	800727e <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8002836:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800283a:	4905      	ldr	r1, [pc, #20]	; (8002850 <main+0xf8>)
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe f90d 	bl	8000a5c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8002842:	e7e6      	b.n	8002812 <main+0xba>
 8002844:	58024400 	.word	0x58024400
 8002848:	24000e94 	.word	0x24000e94
 800284c:	58020400 	.word	0x58020400
 8002850:	240009bc 	.word	0x240009bc

08002854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b09c      	sub	sp, #112	; 0x70
 8002858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800285a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285e:	224c      	movs	r2, #76	; 0x4c
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f00a f9bc 	bl	800cbe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002868:	1d3b      	adds	r3, r7, #4
 800286a:	2220      	movs	r2, #32
 800286c:	2100      	movs	r1, #0
 800286e:	4618      	mov	r0, r3
 8002870:	f00a f9b6 	bl	800cbe0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8002874:	2004      	movs	r0, #4
 8002876:	f004 fe93 	bl	80075a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800287a:	2300      	movs	r3, #0
 800287c:	603b      	str	r3, [r7, #0]
 800287e:	4b34      	ldr	r3, [pc, #208]	; (8002950 <SystemClock_Config+0xfc>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a33      	ldr	r2, [pc, #204]	; (8002950 <SystemClock_Config+0xfc>)
 8002884:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b31      	ldr	r3, [pc, #196]	; (8002950 <SystemClock_Config+0xfc>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <SystemClock_Config+0x100>)
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	4a2e      	ldr	r2, [pc, #184]	; (8002954 <SystemClock_Config+0x100>)
 800289a:	f043 0301 	orr.w	r3, r3, #1
 800289e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80028a0:	4b2c      	ldr	r3, [pc, #176]	; (8002954 <SystemClock_Config+0x100>)
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80028ac:	bf00      	nop
 80028ae:	4b28      	ldr	r3, [pc, #160]	; (8002950 <SystemClock_Config+0xfc>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ba:	d1f8      	bne.n	80028ae <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80028bc:	4b26      	ldr	r3, [pc, #152]	; (8002958 <SystemClock_Config+0x104>)
 80028be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028c0:	f023 0303 	bic.w	r3, r3, #3
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <SystemClock_Config+0x104>)
 80028c6:	f043 0302 	orr.w	r3, r3, #2
 80028ca:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028cc:	2301      	movs	r3, #1
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80028d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028d6:	2302      	movs	r3, #2
 80028d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028da:	2302      	movs	r3, #2
 80028dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80028de:	2301      	movs	r3, #1
 80028e0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80028e2:	2378      	movs	r3, #120	; 0x78
 80028e4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80028e6:	2302      	movs	r3, #2
 80028e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80028ea:	2302      	movs	r3, #2
 80028ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80028ee:	2302      	movs	r3, #2
 80028f0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80028f2:	230c      	movs	r3, #12
 80028f4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80028f6:	2300      	movs	r3, #0
 80028f8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002902:	4618      	mov	r0, r3
 8002904:	f004 feb6 	bl	8007674 <HAL_RCC_OscConfig>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800290e:	f000 fb25 	bl	8002f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002912:	233f      	movs	r3, #63	; 0x3f
 8002914:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002916:	2303      	movs	r3, #3
 8002918:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800291e:	2308      	movs	r3, #8
 8002920:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002922:	2340      	movs	r3, #64	; 0x40
 8002924:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002926:	2340      	movs	r3, #64	; 0x40
 8002928:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800292a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800292e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002930:	2340      	movs	r3, #64	; 0x40
 8002932:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002934:	1d3b      	adds	r3, r7, #4
 8002936:	2104      	movs	r1, #4
 8002938:	4618      	mov	r0, r3
 800293a:	f005 fac9 	bl	8007ed0 <HAL_RCC_ClockConfig>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d001      	beq.n	8002948 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002944:	f000 fb0a 	bl	8002f5c <Error_Handler>
  }
}
 8002948:	bf00      	nop
 800294a:	3770      	adds	r7, #112	; 0x70
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	58024800 	.word	0x58024800
 8002954:	58000400 	.word	0x58000400
 8002958:	58024400 	.word	0x58024400

0800295c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b0b0      	sub	sp, #192	; 0xc0
 8002960:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	22bc      	movs	r2, #188	; 0xbc
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f00a f939 	bl	800cbe0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 800296e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8002972:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002974:	2301      	movs	r3, #1
 8002976:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002978:	2318      	movs	r3, #24
 800297a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800297c:	2302      	movs	r3, #2
 800297e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002980:	2304      	movs	r3, #4
 8002982:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002984:	2302      	movs	r3, #2
 8002986:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002988:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800298c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800298e:	2300      	movs	r3, #0
 8002990:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8002996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800299a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800299c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80029a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029a4:	1d3b      	adds	r3, r7, #4
 80029a6:	4618      	mov	r0, r3
 80029a8:	f005 fe1e 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80029b2:	f000 fad3 	bl	8002f5c <Error_Handler>
  }
}
 80029b6:	bf00      	nop
 80029b8:	37c0      	adds	r7, #192	; 0xc0
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <MX_ETH_Init+0x80>)
 80029c6:	4a1f      	ldr	r2, [pc, #124]	; (8002a44 <MX_ETH_Init+0x84>)
 80029c8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80029ca:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <MX_ETH_Init+0x88>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <MX_ETH_Init+0x88>)
 80029d2:	2280      	movs	r2, #128	; 0x80
 80029d4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <MX_ETH_Init+0x88>)
 80029d8:	22e1      	movs	r2, #225	; 0xe1
 80029da:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80029dc:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <MX_ETH_Init+0x88>)
 80029de:	2200      	movs	r2, #0
 80029e0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80029e2:	4b19      	ldr	r3, [pc, #100]	; (8002a48 <MX_ETH_Init+0x88>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80029e8:	4b17      	ldr	r3, [pc, #92]	; (8002a48 <MX_ETH_Init+0x88>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80029ee:	4b14      	ldr	r3, [pc, #80]	; (8002a40 <MX_ETH_Init+0x80>)
 80029f0:	4a15      	ldr	r2, [pc, #84]	; (8002a48 <MX_ETH_Init+0x88>)
 80029f2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80029f4:	4b12      	ldr	r3, [pc, #72]	; (8002a40 <MX_ETH_Init+0x80>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <MX_ETH_Init+0x80>)
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <MX_ETH_Init+0x8c>)
 80029fe:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002a00:	4b0f      	ldr	r3, [pc, #60]	; (8002a40 <MX_ETH_Init+0x80>)
 8002a02:	4a13      	ldr	r2, [pc, #76]	; (8002a50 <MX_ETH_Init+0x90>)
 8002a04:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002a06:	4b0e      	ldr	r3, [pc, #56]	; (8002a40 <MX_ETH_Init+0x80>)
 8002a08:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002a0c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002a0e:	480c      	ldr	r0, [pc, #48]	; (8002a40 <MX_ETH_Init+0x80>)
 8002a10:	f003 fe30 	bl	8006674 <HAL_ETH_Init>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002a1a:	f000 fa9f 	bl	8002f5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002a1e:	2238      	movs	r2, #56	; 0x38
 8002a20:	2100      	movs	r1, #0
 8002a22:	480c      	ldr	r0, [pc, #48]	; (8002a54 <MX_ETH_Init+0x94>)
 8002a24:	f00a f8dc 	bl	800cbe0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	; (8002a54 <MX_ETH_Init+0x94>)
 8002a2a:	2221      	movs	r2, #33	; 0x21
 8002a2c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002a2e:	4b09      	ldr	r3, [pc, #36]	; (8002a54 <MX_ETH_Init+0x94>)
 8002a30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002a34:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002a36:	4b07      	ldr	r3, [pc, #28]	; (8002a54 <MX_ETH_Init+0x94>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002a3c:	bf00      	nop
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	240001ac 	.word	0x240001ac
 8002a44:	40028000 	.word	0x40028000
 8002a48:	24000ea0 	.word	0x24000ea0
 8002a4c:	240000e8 	.word	0x240000e8
 8002a50:	24000088 	.word	0x24000088
 8002a54:	24000174 	.word	0x24000174

08002a58 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002a5c:	4b28      	ldr	r3, [pc, #160]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a5e:	4a29      	ldr	r2, [pc, #164]	; (8002b04 <MX_SPI3_Init+0xac>)
 8002a60:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002a62:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002a68:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002a6a:	4b25      	ldr	r3, [pc, #148]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a70:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a74:	2207      	movs	r2, #7
 8002a76:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a78:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a7e:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002a84:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a8a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002a8c:	4b1c      	ldr	r3, [pc, #112]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a92:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a94:	4b1a      	ldr	r3, [pc, #104]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aa0:	4b17      	ldr	r3, [pc, #92]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002aa6:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002aba:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac0:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002ac6:	4b0e      	ldr	r3, [pc, #56]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002acc:	4b0c      	ldr	r3, [pc, #48]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002ad2:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002ad8:	4b09      	ldr	r3, [pc, #36]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002ae4:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002aea:	4805      	ldr	r0, [pc, #20]	; (8002b00 <MX_SPI3_Init+0xa8>)
 8002aec:	f007 f8e4 	bl	8009cb8 <HAL_SPI_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8002af6:	f000 fa31 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	2400025c 	.word	0x2400025c
 8002b04:	40003c00 	.word	0x40003c00

08002b08 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b0e:	1d3b      	adds	r3, r7, #4
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002b18:	4b14      	ldr	r3, [pc, #80]	; (8002b6c <MX_TIM7_Init+0x64>)
 8002b1a:	4a15      	ldr	r2, [pc, #84]	; (8002b70 <MX_TIM7_Init+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8002b1e:	4b13      	ldr	r3, [pc, #76]	; (8002b6c <MX_TIM7_Init+0x64>)
 8002b20:	22ef      	movs	r2, #239	; 0xef
 8002b22:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b24:	4b11      	ldr	r3, [pc, #68]	; (8002b6c <MX_TIM7_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002b2a:	4b10      	ldr	r3, [pc, #64]	; (8002b6c <MX_TIM7_Init+0x64>)
 8002b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b30:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b32:	4b0e      	ldr	r3, [pc, #56]	; (8002b6c <MX_TIM7_Init+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002b38:	480c      	ldr	r0, [pc, #48]	; (8002b6c <MX_TIM7_Init+0x64>)
 8002b3a:	f007 fc9e 	bl	800a47a <HAL_TIM_Base_Init>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d001      	beq.n	8002b48 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002b44:	f000 fa0a 	bl	8002f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	4619      	mov	r1, r3
 8002b54:	4805      	ldr	r0, [pc, #20]	; (8002b6c <MX_TIM7_Init+0x64>)
 8002b56:	f007 ff6f 	bl	800aa38 <HAL_TIMEx_MasterConfigSynchronization>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002b60:	f000 f9fc 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002b64:	bf00      	nop
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	240002e4 	.word	0x240002e4
 8002b70:	40001400 	.word	0x40001400

08002b74 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002b7a:	4a23      	ldr	r2, [pc, #140]	; (8002c08 <MX_USART3_UART_Init+0x94>)
 8002b7c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <MX_USART3_UART_Init+0x98>)
 8002b82:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002b90:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002b96:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002b98:	220c      	movs	r2, #12
 8002b9a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b9c:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba2:	4b18      	ldr	r3, [pc, #96]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ba8:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002bba:	4812      	ldr	r0, [pc, #72]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002bbc:	f007 ffe8 	bl	800ab90 <HAL_UART_Init>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002bc6:	f000 f9c9 	bl	8002f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bca:	2100      	movs	r1, #0
 8002bcc:	480d      	ldr	r0, [pc, #52]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002bce:	f009 fc09 	bl	800c3e4 <HAL_UARTEx_SetTxFifoThreshold>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002bd8:	f000 f9c0 	bl	8002f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002bdc:	2100      	movs	r1, #0
 8002bde:	4809      	ldr	r0, [pc, #36]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002be0:	f009 fc3e 	bl	800c460 <HAL_UARTEx_SetRxFifoThreshold>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002bea:	f000 f9b7 	bl	8002f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002bee:	4805      	ldr	r0, [pc, #20]	; (8002c04 <MX_USART3_UART_Init+0x90>)
 8002bf0:	f009 fbbf 	bl	800c372 <HAL_UARTEx_DisableFifoMode>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002bfa:	f000 f9af 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	24000330 	.word	0x24000330
 8002c08:	40004800 	.word	0x40004800
 8002c0c:	0005dc00 	.word	0x0005dc00

08002c10 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c14:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002c18:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002c1a:	4b14      	ldr	r3, [pc, #80]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c1c:	2209      	movs	r2, #9
 8002c1e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c20:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c22:	2202      	movs	r2, #2
 8002c24:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c26:	4b11      	ldr	r3, [pc, #68]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c2c:	4b0f      	ldr	r3, [pc, #60]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c2e:	2202      	movs	r2, #2
 8002c30:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c32:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c3e:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c50:	4b06      	ldr	r3, [pc, #24]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002c58:	f004 fb5a 	bl	8007310 <HAL_PCD_Init>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002c62:	f000 f97b 	bl	8002f5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	240004b0 	.word	0x240004b0
 8002c70:	40080000 	.word	0x40080000

08002c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c7a:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <MX_DMA_Init+0x4c>)
 8002c7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <MX_DMA_Init+0x4c>)
 8002c82:	f043 0301 	orr.w	r3, r3, #1
 8002c86:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002c8a:	4b0d      	ldr	r3, [pc, #52]	; (8002cc0 <MX_DMA_Init+0x4c>)
 8002c8c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	607b      	str	r3, [r7, #4]
 8002c96:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	200c      	movs	r0, #12
 8002c9e:	f001 fa8e 	bl	80041be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002ca2:	200c      	movs	r0, #12
 8002ca4:	f001 faa5 	bl	80041f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2100      	movs	r1, #0
 8002cac:	200f      	movs	r0, #15
 8002cae:	f001 fa86 	bl	80041be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002cb2:	200f      	movs	r0, #15
 8002cb4:	f001 fa9d 	bl	80041f2 <HAL_NVIC_EnableIRQ>

}
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	58024400 	.word	0x58024400

08002cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	; 0x38
 8002cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
 8002cd2:	605a      	str	r2, [r3, #4]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	60da      	str	r2, [r3, #12]
 8002cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cda:	4b8a      	ldr	r3, [pc, #552]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce0:	4a88      	ldr	r2, [pc, #544]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002ce2:	f043 0304 	orr.w	r3, r3, #4
 8002ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cea:	4b86      	ldr	r3, [pc, #536]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	623b      	str	r3, [r7, #32]
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002cf8:	4b82      	ldr	r3, [pc, #520]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002cfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfe:	4a81      	ldr	r2, [pc, #516]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d08:	4b7e      	ldr	r3, [pc, #504]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	4b7b      	ldr	r3, [pc, #492]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1c:	4a79      	ldr	r2, [pc, #484]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d26:	4b77      	ldr	r3, [pc, #476]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d34:	4b73      	ldr	r3, [pc, #460]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3a:	4a72      	ldr	r2, [pc, #456]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d3c:	f043 0302 	orr.w	r3, r3, #2
 8002d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d44:	4b6f      	ldr	r3, [pc, #444]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	617b      	str	r3, [r7, #20]
 8002d50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002d52:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d58:	4a6a      	ldr	r2, [pc, #424]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d5a:	f043 0320 	orr.w	r3, r3, #32
 8002d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d62:	4b68      	ldr	r3, [pc, #416]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d70:	4b64      	ldr	r3, [pc, #400]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d76:	4a63      	ldr	r2, [pc, #396]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d78:	f043 0310 	orr.w	r3, r3, #16
 8002d7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d80:	4b60      	ldr	r3, [pc, #384]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8e:	4b5d      	ldr	r3, [pc, #372]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d94:	4a5b      	ldr	r2, [pc, #364]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d9e:	4b59      	ldr	r3, [pc, #356]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002dac:	4b55      	ldr	r3, [pc, #340]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db2:	4a54      	ldr	r2, [pc, #336]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dbc:	4b51      	ldr	r3, [pc, #324]	; (8002f04 <MX_GPIO_Init+0x240>)
 8002dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc6:	607b      	str	r3, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8002dd0:	484d      	ldr	r0, [pc, #308]	; (8002f08 <MX_GPIO_Init+0x244>)
 8002dd2:	f004 fa3b 	bl	800724c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ddc:	484a      	ldr	r0, [pc, #296]	; (8002f08 <MX_GPIO_Init+0x244>)
 8002dde:	f004 fa35 	bl	800724c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002de2:	2200      	movs	r2, #0
 8002de4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002de8:	4848      	ldr	r0, [pc, #288]	; (8002f0c <MX_GPIO_Init+0x248>)
 8002dea:	f004 fa2f 	bl	800724c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002dee:	2200      	movs	r2, #0
 8002df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002df4:	4846      	ldr	r0, [pc, #280]	; (8002f10 <MX_GPIO_Init+0x24c>)
 8002df6:	f004 fa29 	bl	800724c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e00:	4844      	ldr	r0, [pc, #272]	; (8002f14 <MX_GPIO_Init+0x250>)
 8002e02:	f004 fa23 	bl	800724c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8002e06:	230d      	movs	r3, #13
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e16:	4619      	mov	r1, r3
 8002e18:	483f      	ldr	r0, [pc, #252]	; (8002f18 <MX_GPIO_Init+0x254>)
 8002e1a:	f004 f84f 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8002e1e:	2308      	movs	r3, #8
 8002e20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e22:	2300      	movs	r3, #0
 8002e24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002e2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e2e:	4619      	mov	r1, r3
 8002e30:	483a      	ldr	r0, [pc, #232]	; (8002f1c <MX_GPIO_Init+0x258>)
 8002e32:	f004 f843 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8002e36:	2302      	movs	r3, #2
 8002e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8002e42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e46:	4619      	mov	r1, r3
 8002e48:	4830      	ldr	r0, [pc, #192]	; (8002f0c <MX_GPIO_Init+0x248>)
 8002e4a:	f004 f837 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8002e4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e54:	2300      	movs	r3, #0
 8002e56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8002e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e60:	4619      	mov	r1, r3
 8002e62:	482f      	ldr	r0, [pc, #188]	; (8002f20 <MX_GPIO_Init+0x25c>)
 8002e64:	f004 f82a 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8002e68:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	2300      	movs	r3, #0
 8002e78:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4821      	ldr	r0, [pc, #132]	; (8002f08 <MX_GPIO_Init+0x244>)
 8002e82:	f004 f81b 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002e86:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e94:	2300      	movs	r3, #0
 8002e96:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	481b      	ldr	r0, [pc, #108]	; (8002f0c <MX_GPIO_Init+0x248>)
 8002ea0:	f004 f80c 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002ea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4814      	ldr	r0, [pc, #80]	; (8002f10 <MX_GPIO_Init+0x24c>)
 8002ebe:	f003 fffd 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ec6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	480f      	ldr	r0, [pc, #60]	; (8002f14 <MX_GPIO_Init+0x250>)
 8002ed8:	f003 fff0 	bl	8006ebc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8002eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4807      	ldr	r0, [pc, #28]	; (8002f14 <MX_GPIO_Init+0x250>)
 8002ef6:	f003 ffe1 	bl	8006ebc <HAL_GPIO_Init>

}
 8002efa:	bf00      	nop
 8002efc:	3738      	adds	r7, #56	; 0x38
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	58024400 	.word	0x58024400
 8002f08:	58021000 	.word	0x58021000
 8002f0c:	58020400 	.word	0x58020400
 8002f10:	58020c00 	.word	0x58020c00
 8002f14:	58021800 	.word	0x58021800
 8002f18:	58020800 	.word	0x58020800
 8002f1c:	58020000 	.word	0x58020000
 8002f20:	58021400 	.word	0x58021400

08002f24 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002f24:	b4b0      	push	{r4, r5, r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a09      	ldr	r2, [pc, #36]	; (8002f54 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d10a      	bne.n	8002f4a <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8002f34:	4b08      	ldr	r3, [pc, #32]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f3e:	1854      	adds	r4, r2, r1
 8002f40:	f143 0500 	adc.w	r5, r3, #0
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002f46:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bcb0      	pop	{r4, r5, r7}
 8002f52:	4770      	bx	lr
 8002f54:	240002e4 	.word	0x240002e4
 8002f58:	24000e98 	.word	0x24000e98

08002f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f60:	b672      	cpsid	i
}
 8002f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002f64:	e7fe      	b.n	8002f64 <Error_Handler+0x8>
	...

08002f68 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f72:	4802      	ldr	r0, [pc, #8]	; (8002f7c <ST7735_Select+0x14>)
 8002f74:	f004 f96a 	bl	800724c <HAL_GPIO_WritePin>
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	58021000 	.word	0x58021000

08002f80 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002f84:	2201      	movs	r2, #1
 8002f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f8a:	4802      	ldr	r0, [pc, #8]	; (8002f94 <ST7735_Unselect+0x14>)
 8002f8c:	f004 f95e 	bl	800724c <HAL_GPIO_WritePin>
}
 8002f90:	bf00      	nop
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	58021000 	.word	0x58021000

08002f98 <ST7735_Select1>:
static void ST7735_Select1() {
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fa2:	4802      	ldr	r0, [pc, #8]	; (8002fac <ST7735_Select1+0x14>)
 8002fa4:	f004 f952 	bl	800724c <HAL_GPIO_WritePin>
}
 8002fa8:	bf00      	nop
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	58021000 	.word	0x58021000

08002fb0 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002fba:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <ST7735_Unselect1+0x14>)
 8002fbc:	f004 f946 	bl	800724c <HAL_GPIO_WritePin>
}
 8002fc0:	bf00      	nop
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	58021000 	.word	0x58021000

08002fc8 <ST7735_Reset>:

static void ST7735_Reset() {
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fd2:	4807      	ldr	r0, [pc, #28]	; (8002ff0 <ST7735_Reset+0x28>)
 8002fd4:	f004 f93a 	bl	800724c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8002fd8:	2005      	movs	r0, #5
 8002fda:	f000 ffd1 	bl	8003f80 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <ST7735_Reset+0x28>)
 8002fe6:	f004 f931 	bl	800724c <HAL_GPIO_WritePin>
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	58021000 	.word	0x58021000

08002ff4 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002ffe:	2200      	movs	r2, #0
 8003000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003004:	4806      	ldr	r0, [pc, #24]	; (8003020 <ST7735_WriteCommand+0x2c>)
 8003006:	f004 f921 	bl	800724c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800300a:	1df9      	adds	r1, r7, #7
 800300c:	f04f 33ff 	mov.w	r3, #4294967295
 8003010:	2201      	movs	r2, #1
 8003012:	4804      	ldr	r0, [pc, #16]	; (8003024 <ST7735_WriteCommand+0x30>)
 8003014:	f006 ff56 	bl	8009ec4 <HAL_SPI_Transmit>
}
 8003018:	bf00      	nop
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	58021800 	.word	0x58021800
 8003024:	2400025c 	.word	0x2400025c

08003028 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003032:	2201      	movs	r2, #1
 8003034:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003038:	4807      	ldr	r0, [pc, #28]	; (8003058 <ST7735_WriteData+0x30>)
 800303a:	f004 f907 	bl	800724c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	b29a      	uxth	r2, r3
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4804      	ldr	r0, [pc, #16]	; (800305c <ST7735_WriteData+0x34>)
 800304a:	f006 ff3b 	bl	8009ec4 <HAL_SPI_Transmit>
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	58021800 	.word	0x58021800
 800305c:	2400025c 	.word	0x2400025c

08003060 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	1c5a      	adds	r2, r3, #1
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8003072:	e034      	b.n	80030de <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	1c5a      	adds	r2, r3, #1
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 800307e:	7afb      	ldrb	r3, [r7, #11]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff ffb7 	bl	8002ff4 <ST7735_WriteCommand>

		numArgs = *addr++;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	1c5a      	adds	r2, r3, #1
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8003090:	7abb      	ldrb	r3, [r7, #10]
 8003092:	b29b      	uxth	r3, r3
 8003094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003098:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 800309a:	7abb      	ldrb	r3, [r7, #10]
 800309c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030a0:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 80030a2:	7abb      	ldrb	r3, [r7, #10]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d008      	beq.n	80030ba <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 80030a8:	7abb      	ldrb	r3, [r7, #10]
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff ffbb 	bl	8003028 <ST7735_WriteData>
			addr += numArgs;
 80030b2:	7abb      	ldrb	r3, [r7, #10]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	4413      	add	r3, r2
 80030b8:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 80030ba:	89bb      	ldrh	r3, [r7, #12]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00e      	beq.n	80030de <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1c5a      	adds	r2, r3, #1
 80030c4:	607a      	str	r2, [r7, #4]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 80030ca:	89bb      	ldrh	r3, [r7, #12]
 80030cc:	2bff      	cmp	r3, #255	; 0xff
 80030ce:	d102      	bne.n	80030d6 <ST7735_ExecuteCommandList+0x76>
 80030d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80030d4:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 80030d6:	89bb      	ldrh	r3, [r7, #12]
 80030d8:	4618      	mov	r0, r3
 80030da:	f000 ff51 	bl	8003f80 <HAL_Delay>
	while(numCommands--) {
 80030de:	7bfb      	ldrb	r3, [r7, #15]
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	73fa      	strb	r2, [r7, #15]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1c5      	bne.n	8003074 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 80030e8:	bf00      	nop
 80030ea:	bf00      	nop
 80030ec:	3710      	adds	r7, #16
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80030f2:	b590      	push	{r4, r7, lr}
 80030f4:	b085      	sub	sp, #20
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4604      	mov	r4, r0
 80030fa:	4608      	mov	r0, r1
 80030fc:	4611      	mov	r1, r2
 80030fe:	461a      	mov	r2, r3
 8003100:	4623      	mov	r3, r4
 8003102:	71fb      	strb	r3, [r7, #7]
 8003104:	4603      	mov	r3, r0
 8003106:	71bb      	strb	r3, [r7, #6]
 8003108:	460b      	mov	r3, r1
 800310a:	717b      	strb	r3, [r7, #5]
 800310c:	4613      	mov	r3, r2
 800310e:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8003110:	202a      	movs	r0, #42	; 0x2a
 8003112:	f7ff ff6f 	bl	8002ff4 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8003116:	2300      	movs	r3, #0
 8003118:	733b      	strb	r3, [r7, #12]
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	3302      	adds	r3, #2
 800311e:	b2db      	uxtb	r3, r3
 8003120:	737b      	strb	r3, [r7, #13]
 8003122:	2300      	movs	r3, #0
 8003124:	73bb      	strb	r3, [r7, #14]
 8003126:	797b      	ldrb	r3, [r7, #5]
 8003128:	3302      	adds	r3, #2
 800312a:	b2db      	uxtb	r3, r3
 800312c:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	2104      	movs	r1, #4
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff77 	bl	8003028 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 800313a:	202b      	movs	r0, #43	; 0x2b
 800313c:	f7ff ff5a 	bl	8002ff4 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8003140:	79bb      	ldrb	r3, [r7, #6]
 8003142:	3301      	adds	r3, #1
 8003144:	b2db      	uxtb	r3, r3
 8003146:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8003148:	793b      	ldrb	r3, [r7, #4]
 800314a:	3301      	adds	r3, #1
 800314c:	b2db      	uxtb	r3, r3
 800314e:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8003150:	f107 030c 	add.w	r3, r7, #12
 8003154:	2104      	movs	r1, #4
 8003156:	4618      	mov	r0, r3
 8003158:	f7ff ff66 	bl	8003028 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 800315c:	202c      	movs	r0, #44	; 0x2c
 800315e:	f7ff ff49 	bl	8002ff4 <ST7735_WriteCommand>
}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	bd90      	pop	{r4, r7, pc}
	...

0800316c <ST7735_Init>:

void ST7735_Init() {
 800316c:	b580      	push	{r7, lr}
 800316e:	af00      	add	r7, sp, #0
	ST7735_Select();
 8003170:	f7ff fefa 	bl	8002f68 <ST7735_Select>
	ST7735_Select1();
 8003174:	f7ff ff10 	bl	8002f98 <ST7735_Select1>
	ST7735_Reset();
 8003178:	f7ff ff26 	bl	8002fc8 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 800317c:	4807      	ldr	r0, [pc, #28]	; (800319c <ST7735_Init+0x30>)
 800317e:	f7ff ff6f 	bl	8003060 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8003182:	4807      	ldr	r0, [pc, #28]	; (80031a0 <ST7735_Init+0x34>)
 8003184:	f7ff ff6c 	bl	8003060 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8003188:	4806      	ldr	r0, [pc, #24]	; (80031a4 <ST7735_Init+0x38>)
 800318a:	f7ff ff69 	bl	8003060 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 800318e:	f7ff fef7 	bl	8002f80 <ST7735_Unselect>
	ST7735_Unselect1();
 8003192:	f7ff ff0d 	bl	8002fb0 <ST7735_Unselect1>
}
 8003196:	bf00      	nop
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	0800eb1c 	.word	0x0800eb1c
 80031a0:	0800eb58 	.word	0x0800eb58
 80031a4:	0800eb68 	.word	0x0800eb68

080031a8 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80031a8:	b082      	sub	sp, #8
 80031aa:	b590      	push	{r4, r7, lr}
 80031ac:	b089      	sub	sp, #36	; 0x24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
 80031b2:	4603      	mov	r3, r0
 80031b4:	80fb      	strh	r3, [r7, #6]
 80031b6:	460b      	mov	r3, r1
 80031b8:	80bb      	strh	r3, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	b2d8      	uxtb	r0, r3
 80031c2:	88bb      	ldrh	r3, [r7, #4]
 80031c4:	b2d9      	uxtb	r1, r3
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80031ce:	4413      	add	r3, r2
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b2dc      	uxtb	r4, r3
 80031d6:	88bb      	ldrh	r3, [r7, #4]
 80031d8:	b2da      	uxtb	r2, r3
 80031da:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80031de:	4413      	add	r3, r2
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	4622      	mov	r2, r4
 80031e8:	f7ff ff83 	bl	80030f2 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 80031ec:	2300      	movs	r3, #0
 80031ee:	61fb      	str	r3, [r7, #28]
 80031f0:	e043      	b.n	800327a <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 80031f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	3b20      	subs	r3, #32
 80031f8:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 80031fc:	fb01 f303 	mul.w	r3, r1, r3
 8003200:	4619      	mov	r1, r3
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	440b      	add	r3, r1
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	4413      	add	r3, r2
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 800320e:	2300      	movs	r3, #0
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e029      	b.n	8003268 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	69bb      	ldr	r3, [r7, #24]
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00e      	beq.n	8003242 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8003224:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003226:	0a1b      	lsrs	r3, r3, #8
 8003228:	b29b      	uxth	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	743b      	strb	r3, [r7, #16]
 800322e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003230:	b2db      	uxtb	r3, r3
 8003232:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8003234:	f107 0310 	add.w	r3, r7, #16
 8003238:	2102      	movs	r1, #2
 800323a:	4618      	mov	r0, r3
 800323c:	f7ff fef4 	bl	8003028 <ST7735_WriteData>
 8003240:	e00f      	b.n	8003262 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003242:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	b29b      	uxth	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	733b      	strb	r3, [r7, #12]
 800324e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003252:	b2db      	uxtb	r3, r3
 8003254:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8003256:	f107 030c 	add.w	r3, r7, #12
 800325a:	2102      	movs	r1, #2
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fee3 	bl	8003028 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	3301      	adds	r3, #1
 8003266:	61bb      	str	r3, [r7, #24]
 8003268:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800326c:	461a      	mov	r2, r3
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	4293      	cmp	r3, r2
 8003272:	d3cf      	bcc.n	8003214 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	3301      	adds	r3, #1
 8003278:	61fb      	str	r3, [r7, #28]
 800327a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800327e:	461a      	mov	r2, r3
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	4293      	cmp	r3, r2
 8003284:	d3b5      	bcc.n	80031f2 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8003286:	bf00      	nop
 8003288:	bf00      	nop
 800328a:	3724      	adds	r7, #36	; 0x24
 800328c:	46bd      	mov	sp, r7
 800328e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003292:	b002      	add	sp, #8
 8003294:	4770      	bx	lr

08003296 <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8003296:	b082      	sub	sp, #8
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af04      	add	r7, sp, #16
 800329e:	603a      	str	r2, [r7, #0]
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	4603      	mov	r3, r0
 80032a4:	80fb      	strh	r3, [r7, #6]
 80032a6:	460b      	mov	r3, r1
 80032a8:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 80032aa:	f7ff fe5d 	bl	8002f68 <ST7735_Select>

	while(*str) {
 80032ae:	e02d      	b.n	800330c <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80032b0:	88fb      	ldrh	r3, [r7, #6]
 80032b2:	7d3a      	ldrb	r2, [r7, #20]
 80032b4:	4413      	add	r3, r2
 80032b6:	2b7f      	cmp	r3, #127	; 0x7f
 80032b8:	dd13      	ble.n	80032e2 <ST7735_WriteString+0x4c>
			x = 0;
 80032ba:	2300      	movs	r3, #0
 80032bc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80032be:	7d7b      	ldrb	r3, [r7, #21]
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	88bb      	ldrh	r3, [r7, #4]
 80032c4:	4413      	add	r3, r2
 80032c6:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80032c8:	88bb      	ldrh	r3, [r7, #4]
 80032ca:	7d7a      	ldrb	r2, [r7, #21]
 80032cc:	4413      	add	r3, r2
 80032ce:	2b7f      	cmp	r3, #127	; 0x7f
 80032d0:	dc21      	bgt.n	8003316 <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b20      	cmp	r3, #32
 80032d8:	d103      	bne.n	80032e2 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	3301      	adds	r3, #1
 80032de:	603b      	str	r3, [r7, #0]
				continue;
 80032e0:	e014      	b.n	800330c <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	781a      	ldrb	r2, [r3, #0]
 80032e6:	88b9      	ldrh	r1, [r7, #4]
 80032e8:	88f8      	ldrh	r0, [r7, #6]
 80032ea:	8c3b      	ldrh	r3, [r7, #32]
 80032ec:	9302      	str	r3, [sp, #8]
 80032ee:	8bbb      	ldrh	r3, [r7, #28]
 80032f0:	9301      	str	r3, [sp, #4]
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f7ff ff56 	bl	80031a8 <ST7735_WriteChar>
		x += font.width;
 80032fc:	7d3b      	ldrb	r3, [r7, #20]
 80032fe:	b29a      	uxth	r2, r3
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	4413      	add	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
		str++;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	603b      	str	r3, [r7, #0]
	while(*str) {
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1cd      	bne.n	80032b0 <ST7735_WriteString+0x1a>
 8003314:	e000      	b.n	8003318 <ST7735_WriteString+0x82>
				break;
 8003316:	bf00      	nop
	}

	ST7735_Unselect();
 8003318:	f7ff fe32 	bl	8002f80 <ST7735_Unselect>
}
 800331c:	bf00      	nop
 800331e:	3708      	adds	r7, #8
 8003320:	46bd      	mov	sp, r7
 8003322:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003326:	b002      	add	sp, #8
 8003328:	4770      	bx	lr

0800332a <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800332a:	b082      	sub	sp, #8
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af04      	add	r7, sp, #16
 8003332:	603a      	str	r2, [r7, #0]
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	4603      	mov	r3, r0
 8003338:	80fb      	strh	r3, [r7, #6]
 800333a:	460b      	mov	r3, r1
 800333c:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 800333e:	f7ff fe2b 	bl	8002f98 <ST7735_Select1>

	while(*str) {
 8003342:	e02d      	b.n	80033a0 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	7d3a      	ldrb	r2, [r7, #20]
 8003348:	4413      	add	r3, r2
 800334a:	2b7f      	cmp	r3, #127	; 0x7f
 800334c:	dd13      	ble.n	8003376 <ST7735_WriteString1+0x4c>
			x = 0;
 800334e:	2300      	movs	r3, #0
 8003350:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003352:	7d7b      	ldrb	r3, [r7, #21]
 8003354:	b29a      	uxth	r2, r3
 8003356:	88bb      	ldrh	r3, [r7, #4]
 8003358:	4413      	add	r3, r2
 800335a:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 800335c:	88bb      	ldrh	r3, [r7, #4]
 800335e:	7d7a      	ldrb	r2, [r7, #21]
 8003360:	4413      	add	r3, r2
 8003362:	2b7f      	cmp	r3, #127	; 0x7f
 8003364:	dc21      	bgt.n	80033aa <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b20      	cmp	r3, #32
 800336c:	d103      	bne.n	8003376 <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	603b      	str	r3, [r7, #0]
				continue;
 8003374:	e014      	b.n	80033a0 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	88b9      	ldrh	r1, [r7, #4]
 800337c:	88f8      	ldrh	r0, [r7, #6]
 800337e:	8c3b      	ldrh	r3, [r7, #32]
 8003380:	9302      	str	r3, [sp, #8]
 8003382:	8bbb      	ldrh	r3, [r7, #28]
 8003384:	9301      	str	r3, [sp, #4]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f7ff ff0c 	bl	80031a8 <ST7735_WriteChar>
		x += font.width;
 8003390:	7d3b      	ldrb	r3, [r7, #20]
 8003392:	b29a      	uxth	r2, r3
 8003394:	88fb      	ldrh	r3, [r7, #6]
 8003396:	4413      	add	r3, r2
 8003398:	80fb      	strh	r3, [r7, #6]
		str++;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	3301      	adds	r3, #1
 800339e:	603b      	str	r3, [r7, #0]
	while(*str) {
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d1cd      	bne.n	8003344 <ST7735_WriteString1+0x1a>
 80033a8:	e000      	b.n	80033ac <ST7735_WriteString1+0x82>
				break;
 80033aa:	bf00      	nop
	}

	ST7735_Unselect1();
 80033ac:	f7ff fe00 	bl	8002fb0 <ST7735_Unselect1>
}
 80033b0:	bf00      	nop
 80033b2:	3708      	adds	r7, #8
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033ba:	b002      	add	sp, #8
 80033bc:	4770      	bx	lr

080033be <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 80033be:	b082      	sub	sp, #8
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af04      	add	r7, sp, #16
 80033c6:	603a      	str	r2, [r7, #0]
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	4603      	mov	r3, r0
 80033cc:	80fb      	strh	r3, [r7, #6]
 80033ce:	460b      	mov	r3, r1
 80033d0:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 80033d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d102      	bne.n	80033e0 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 80033da:	f7ff fdc5 	bl	8002f68 <ST7735_Select>
 80033de:	e034      	b.n	800344a <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 80033e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d130      	bne.n	800344a <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 80033e8:	f7ff fdd6 	bl	8002f98 <ST7735_Select1>

	}


	while(*str) {
 80033ec:	e02d      	b.n	800344a <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 80033ee:	88fb      	ldrh	r3, [r7, #6]
 80033f0:	7d3a      	ldrb	r2, [r7, #20]
 80033f2:	4413      	add	r3, r2
 80033f4:	2b7f      	cmp	r3, #127	; 0x7f
 80033f6:	dd13      	ble.n	8003420 <ST7735_WriteStringNSS+0x62>
			x = 0;
 80033f8:	2300      	movs	r3, #0
 80033fa:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80033fc:	7d7b      	ldrb	r3, [r7, #21]
 80033fe:	b29a      	uxth	r2, r3
 8003400:	88bb      	ldrh	r3, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8003406:	88bb      	ldrh	r3, [r7, #4]
 8003408:	7d7a      	ldrb	r2, [r7, #21]
 800340a:	4413      	add	r3, r2
 800340c:	2b7f      	cmp	r3, #127	; 0x7f
 800340e:	dc21      	bgt.n	8003454 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b20      	cmp	r3, #32
 8003416:	d103      	bne.n	8003420 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	3301      	adds	r3, #1
 800341c:	603b      	str	r3, [r7, #0]
				continue;
 800341e:	e014      	b.n	800344a <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	781a      	ldrb	r2, [r3, #0]
 8003424:	88b9      	ldrh	r1, [r7, #4]
 8003426:	88f8      	ldrh	r0, [r7, #6]
 8003428:	8c3b      	ldrh	r3, [r7, #32]
 800342a:	9302      	str	r3, [sp, #8]
 800342c:	8bbb      	ldrh	r3, [r7, #28]
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f7ff feb7 	bl	80031a8 <ST7735_WriteChar>
		x += font.width;
 800343a:	7d3b      	ldrb	r3, [r7, #20]
 800343c:	b29a      	uxth	r2, r3
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	4413      	add	r3, r2
 8003442:	80fb      	strh	r3, [r7, #6]
		str++;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	3301      	adds	r3, #1
 8003448:	603b      	str	r3, [r7, #0]
	while(*str) {
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1cd      	bne.n	80033ee <ST7735_WriteStringNSS+0x30>
 8003452:	e000      	b.n	8003456 <ST7735_WriteStringNSS+0x98>
				break;
 8003454:	bf00      	nop
	}
	if(NSS == 0){
 8003456:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 800345e:	f7ff fd8f 	bl	8002f80 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8003462:	e005      	b.n	8003470 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8003464:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 800346c:	f7ff fda0 	bl	8002fb0 <ST7735_Unselect1>
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800347a:	b002      	add	sp, #8
 800347c:	4770      	bx	lr
	...

08003480 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	4604      	mov	r4, r0
 8003488:	4608      	mov	r0, r1
 800348a:	4611      	mov	r1, r2
 800348c:	461a      	mov	r2, r3
 800348e:	4623      	mov	r3, r4
 8003490:	80fb      	strh	r3, [r7, #6]
 8003492:	4603      	mov	r3, r0
 8003494:	80bb      	strh	r3, [r7, #4]
 8003496:	460b      	mov	r3, r1
 8003498:	807b      	strh	r3, [r7, #2]
 800349a:	4613      	mov	r3, r2
 800349c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800349e:	88fb      	ldrh	r3, [r7, #6]
 80034a0:	2b7f      	cmp	r3, #127	; 0x7f
 80034a2:	d858      	bhi.n	8003556 <ST7735_FillRectangle+0xd6>
 80034a4:	88bb      	ldrh	r3, [r7, #4]
 80034a6:	2b7f      	cmp	r3, #127	; 0x7f
 80034a8:	d855      	bhi.n	8003556 <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80034aa:	88fa      	ldrh	r2, [r7, #6]
 80034ac:	887b      	ldrh	r3, [r7, #2]
 80034ae:	4413      	add	r3, r2
 80034b0:	2b80      	cmp	r3, #128	; 0x80
 80034b2:	dd03      	ble.n	80034bc <ST7735_FillRectangle+0x3c>
 80034b4:	88fb      	ldrh	r3, [r7, #6]
 80034b6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80034ba:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80034bc:	88ba      	ldrh	r2, [r7, #4]
 80034be:	883b      	ldrh	r3, [r7, #0]
 80034c0:	4413      	add	r3, r2
 80034c2:	2b80      	cmp	r3, #128	; 0x80
 80034c4:	dd03      	ble.n	80034ce <ST7735_FillRectangle+0x4e>
 80034c6:	88bb      	ldrh	r3, [r7, #4]
 80034c8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80034cc:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 80034ce:	f7ff fd4b 	bl	8002f68 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	b2d8      	uxtb	r0, r3
 80034d6:	88bb      	ldrh	r3, [r7, #4]
 80034d8:	b2d9      	uxtb	r1, r3
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	887b      	ldrh	r3, [r7, #2]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	4413      	add	r3, r2
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b2dc      	uxtb	r4, r3
 80034ea:	88bb      	ldrh	r3, [r7, #4]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	883b      	ldrh	r3, [r7, #0]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	4622      	mov	r2, r4
 80034fc:	f7ff fdf9 	bl	80030f2 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8003500:	8c3b      	ldrh	r3, [r7, #32]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	b29b      	uxth	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	733b      	strb	r3, [r7, #12]
 800350a:	8c3b      	ldrh	r3, [r7, #32]
 800350c:	b2db      	uxtb	r3, r3
 800350e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003510:	2201      	movs	r2, #1
 8003512:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003516:	4812      	ldr	r0, [pc, #72]	; (8003560 <ST7735_FillRectangle+0xe0>)
 8003518:	f003 fe98 	bl	800724c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 800351c:	883b      	ldrh	r3, [r7, #0]
 800351e:	80bb      	strh	r3, [r7, #4]
 8003520:	e013      	b.n	800354a <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	80fb      	strh	r3, [r7, #6]
 8003526:	e00a      	b.n	800353e <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003528:	f107 010c 	add.w	r1, r7, #12
 800352c:	f04f 33ff 	mov.w	r3, #4294967295
 8003530:	2202      	movs	r2, #2
 8003532:	480c      	ldr	r0, [pc, #48]	; (8003564 <ST7735_FillRectangle+0xe4>)
 8003534:	f006 fcc6 	bl	8009ec4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	3b01      	subs	r3, #1
 800353c:	80fb      	strh	r3, [r7, #6]
 800353e:	88fb      	ldrh	r3, [r7, #6]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1f1      	bne.n	8003528 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8003544:	88bb      	ldrh	r3, [r7, #4]
 8003546:	3b01      	subs	r3, #1
 8003548:	80bb      	strh	r3, [r7, #4]
 800354a:	88bb      	ldrh	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1e8      	bne.n	8003522 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8003550:	f7ff fd16 	bl	8002f80 <ST7735_Unselect>
 8003554:	e000      	b.n	8003558 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003556:	bf00      	nop
}
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	bd90      	pop	{r4, r7, pc}
 800355e:	bf00      	nop
 8003560:	58021800 	.word	0x58021800
 8003564:	2400025c 	.word	0x2400025c

08003568 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	4604      	mov	r4, r0
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4623      	mov	r3, r4
 8003578:	80fb      	strh	r3, [r7, #6]
 800357a:	4603      	mov	r3, r0
 800357c:	80bb      	strh	r3, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	807b      	strh	r3, [r7, #2]
 8003582:	4613      	mov	r3, r2
 8003584:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	2b7f      	cmp	r3, #127	; 0x7f
 800358a:	d858      	bhi.n	800363e <ST7735_FillRectangle1+0xd6>
 800358c:	88bb      	ldrh	r3, [r7, #4]
 800358e:	2b7f      	cmp	r3, #127	; 0x7f
 8003590:	d855      	bhi.n	800363e <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8003592:	88fa      	ldrh	r2, [r7, #6]
 8003594:	887b      	ldrh	r3, [r7, #2]
 8003596:	4413      	add	r3, r2
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	dd03      	ble.n	80035a4 <ST7735_FillRectangle1+0x3c>
 800359c:	88fb      	ldrh	r3, [r7, #6]
 800359e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80035a2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80035a4:	88ba      	ldrh	r2, [r7, #4]
 80035a6:	883b      	ldrh	r3, [r7, #0]
 80035a8:	4413      	add	r3, r2
 80035aa:	2b80      	cmp	r3, #128	; 0x80
 80035ac:	dd03      	ble.n	80035b6 <ST7735_FillRectangle1+0x4e>
 80035ae:	88bb      	ldrh	r3, [r7, #4]
 80035b0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80035b4:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 80035b6:	f7ff fcef 	bl	8002f98 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	b2d8      	uxtb	r0, r3
 80035be:	88bb      	ldrh	r3, [r7, #4]
 80035c0:	b2d9      	uxtb	r1, r3
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	887b      	ldrh	r3, [r7, #2]
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	4413      	add	r3, r2
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b2dc      	uxtb	r4, r3
 80035d2:	88bb      	ldrh	r3, [r7, #4]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	883b      	ldrh	r3, [r7, #0]
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	4413      	add	r3, r2
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	4622      	mov	r2, r4
 80035e4:	f7ff fd85 	bl	80030f2 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 80035e8:	8c3b      	ldrh	r3, [r7, #32]
 80035ea:	0a1b      	lsrs	r3, r3, #8
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	733b      	strb	r3, [r7, #12]
 80035f2:	8c3b      	ldrh	r3, [r7, #32]
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80035f8:	2201      	movs	r2, #1
 80035fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035fe:	4812      	ldr	r0, [pc, #72]	; (8003648 <ST7735_FillRectangle1+0xe0>)
 8003600:	f003 fe24 	bl	800724c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003604:	883b      	ldrh	r3, [r7, #0]
 8003606:	80bb      	strh	r3, [r7, #4]
 8003608:	e013      	b.n	8003632 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 800360a:	887b      	ldrh	r3, [r7, #2]
 800360c:	80fb      	strh	r3, [r7, #6]
 800360e:	e00a      	b.n	8003626 <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003610:	f107 010c 	add.w	r1, r7, #12
 8003614:	f04f 33ff 	mov.w	r3, #4294967295
 8003618:	2202      	movs	r2, #2
 800361a:	480c      	ldr	r0, [pc, #48]	; (800364c <ST7735_FillRectangle1+0xe4>)
 800361c:	f006 fc52 	bl	8009ec4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003620:	88fb      	ldrh	r3, [r7, #6]
 8003622:	3b01      	subs	r3, #1
 8003624:	80fb      	strh	r3, [r7, #6]
 8003626:	88fb      	ldrh	r3, [r7, #6]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f1      	bne.n	8003610 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 800362c:	88bb      	ldrh	r3, [r7, #4]
 800362e:	3b01      	subs	r3, #1
 8003630:	80bb      	strh	r3, [r7, #4]
 8003632:	88bb      	ldrh	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1e8      	bne.n	800360a <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8003638:	f7ff fcba 	bl	8002fb0 <ST7735_Unselect1>
 800363c:	e000      	b.n	8003640 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800363e:	bf00      	nop
}
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	bd90      	pop	{r4, r7, pc}
 8003646:	bf00      	nop
 8003648:	58021800 	.word	0x58021800
 800364c:	2400025c 	.word	0x2400025c

08003650 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	4604      	mov	r4, r0
 8003658:	4608      	mov	r0, r1
 800365a:	4611      	mov	r1, r2
 800365c:	461a      	mov	r2, r3
 800365e:	4623      	mov	r3, r4
 8003660:	80fb      	strh	r3, [r7, #6]
 8003662:	4603      	mov	r3, r0
 8003664:	80bb      	strh	r3, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	807b      	strh	r3, [r7, #2]
 800366a:	4613      	mov	r3, r2
 800366c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b7f      	cmp	r3, #127	; 0x7f
 8003672:	d86e      	bhi.n	8003752 <ST7735_FillRectangleNSS+0x102>
 8003674:	88bb      	ldrh	r3, [r7, #4]
 8003676:	2b7f      	cmp	r3, #127	; 0x7f
 8003678:	d86b      	bhi.n	8003752 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800367a:	88fa      	ldrh	r2, [r7, #6]
 800367c:	887b      	ldrh	r3, [r7, #2]
 800367e:	4413      	add	r3, r2
 8003680:	2b80      	cmp	r3, #128	; 0x80
 8003682:	dd03      	ble.n	800368c <ST7735_FillRectangleNSS+0x3c>
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800368a:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800368c:	88ba      	ldrh	r2, [r7, #4]
 800368e:	883b      	ldrh	r3, [r7, #0]
 8003690:	4413      	add	r3, r2
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	dd03      	ble.n	800369e <ST7735_FillRectangleNSS+0x4e>
 8003696:	88bb      	ldrh	r3, [r7, #4]
 8003698:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800369c:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 800369e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d102      	bne.n	80036ac <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 80036a6:	f7ff fc5f 	bl	8002f68 <ST7735_Select>
 80036aa:	e005      	b.n	80036b8 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 80036ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 80036b4:	f7ff fc70 	bl	8002f98 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	b2d8      	uxtb	r0, r3
 80036bc:	88bb      	ldrh	r3, [r7, #4]
 80036be:	b2d9      	uxtb	r1, r3
 80036c0:	88fb      	ldrh	r3, [r7, #6]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	887b      	ldrh	r3, [r7, #2]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b2dc      	uxtb	r4, r3
 80036d0:	88bb      	ldrh	r3, [r7, #4]
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	883b      	ldrh	r3, [r7, #0]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	4413      	add	r3, r2
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	4622      	mov	r2, r4
 80036e2:	f7ff fd06 	bl	80030f2 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 80036e6:	8c3b      	ldrh	r3, [r7, #32]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	733b      	strb	r3, [r7, #12]
 80036f0:	8c3b      	ldrh	r3, [r7, #32]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80036f6:	2201      	movs	r2, #1
 80036f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036fc:	4817      	ldr	r0, [pc, #92]	; (800375c <ST7735_FillRectangleNSS+0x10c>)
 80036fe:	f003 fda5 	bl	800724c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003702:	883b      	ldrh	r3, [r7, #0]
 8003704:	80bb      	strh	r3, [r7, #4]
 8003706:	e013      	b.n	8003730 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8003708:	887b      	ldrh	r3, [r7, #2]
 800370a:	80fb      	strh	r3, [r7, #6]
 800370c:	e00a      	b.n	8003724 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800370e:	f107 010c 	add.w	r1, r7, #12
 8003712:	f04f 33ff 	mov.w	r3, #4294967295
 8003716:	2202      	movs	r2, #2
 8003718:	4811      	ldr	r0, [pc, #68]	; (8003760 <ST7735_FillRectangleNSS+0x110>)
 800371a:	f006 fbd3 	bl	8009ec4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800371e:	88fb      	ldrh	r3, [r7, #6]
 8003720:	3b01      	subs	r3, #1
 8003722:	80fb      	strh	r3, [r7, #6]
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f1      	bne.n	800370e <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 800372a:	88bb      	ldrh	r3, [r7, #4]
 800372c:	3b01      	subs	r3, #1
 800372e:	80bb      	strh	r3, [r7, #4]
 8003730:	88bb      	ldrh	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1e8      	bne.n	8003708 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8003736:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800373a:	2b00      	cmp	r3, #0
 800373c:	d102      	bne.n	8003744 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 800373e:	f7ff fc1f 	bl	8002f80 <ST7735_Unselect>
 8003742:	e007      	b.n	8003754 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8003744:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003748:	2b01      	cmp	r3, #1
 800374a:	d103      	bne.n	8003754 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 800374c:	f7ff fc30 	bl	8002fb0 <ST7735_Unselect1>
 8003750:	e000      	b.n	8003754 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003752:	bf00      	nop
	}
}
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}
 800375a:	bf00      	nop
 800375c:	58021800 	.word	0x58021800
 8003760:	2400025c 	.word	0x2400025c

08003764 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af02      	add	r7, sp, #8
 800376a:	4603      	mov	r3, r0
 800376c:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800376e:	88fb      	ldrh	r3, [r7, #6]
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2380      	movs	r3, #128	; 0x80
 8003774:	2280      	movs	r2, #128	; 0x80
 8003776:	2100      	movs	r1, #0
 8003778:	2000      	movs	r0, #0
 800377a:	f7ff fe81 	bl	8003480 <ST7735_FillRectangle>
}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8003786:	b580      	push	{r7, lr}
 8003788:	b084      	sub	sp, #16
 800378a:	af02      	add	r7, sp, #8
 800378c:	4603      	mov	r3, r0
 800378e:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8003790:	88fb      	ldrh	r3, [r7, #6]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2380      	movs	r3, #128	; 0x80
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	2100      	movs	r1, #0
 800379a:	2000      	movs	r0, #0
 800379c:	f7ff fee4 	bl	8003568 <ST7735_FillRectangle1>
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037ae:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <HAL_MspInit+0x30>)
 80037b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037b4:	4a08      	ldr	r2, [pc, #32]	; (80037d8 <HAL_MspInit+0x30>)
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <HAL_MspInit+0x30>)
 80037c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	607b      	str	r3, [r7, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	58024400 	.word	0x58024400

080037dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08e      	sub	sp, #56	; 0x38
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a59      	ldr	r2, [pc, #356]	; (8003960 <HAL_ETH_MspInit+0x184>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	f040 80ab 	bne.w	8003956 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003800:	4b58      	ldr	r3, [pc, #352]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003806:	4a57      	ldr	r2, [pc, #348]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003808:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800380c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003810:	4b54      	ldr	r3, [pc, #336]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003812:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381a:	623b      	str	r3, [r7, #32]
 800381c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800381e:	4b51      	ldr	r3, [pc, #324]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003824:	4a4f      	ldr	r2, [pc, #316]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800382e:	4b4d      	ldr	r3, [pc, #308]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003830:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003838:	61fb      	str	r3, [r7, #28]
 800383a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800383c:	4b49      	ldr	r3, [pc, #292]	; (8003964 <HAL_ETH_MspInit+0x188>)
 800383e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003842:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003848:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800384c:	4b45      	ldr	r3, [pc, #276]	; (8003964 <HAL_ETH_MspInit+0x188>)
 800384e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800385a:	4b42      	ldr	r3, [pc, #264]	; (8003964 <HAL_ETH_MspInit+0x188>)
 800385c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003860:	4a40      	ldr	r2, [pc, #256]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003862:	f043 0304 	orr.w	r3, r3, #4
 8003866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_ETH_MspInit+0x188>)
 800386c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	617b      	str	r3, [r7, #20]
 8003876:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003878:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_ETH_MspInit+0x188>)
 800387a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800387e:	4a39      	ldr	r2, [pc, #228]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003880:	f043 0301 	orr.w	r3, r3, #1
 8003884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003888:	4b36      	ldr	r3, [pc, #216]	; (8003964 <HAL_ETH_MspInit+0x188>)
 800388a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800388e:	f003 0301 	and.w	r3, r3, #1
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003896:	4b33      	ldr	r3, [pc, #204]	; (8003964 <HAL_ETH_MspInit+0x188>)
 8003898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800389c:	4a31      	ldr	r2, [pc, #196]	; (8003964 <HAL_ETH_MspInit+0x188>)
 800389e:	f043 0302 	orr.w	r3, r3, #2
 80038a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038a6:	4b2f      	ldr	r3, [pc, #188]	; (8003964 <HAL_ETH_MspInit+0x188>)
 80038a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80038b4:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_ETH_MspInit+0x188>)
 80038b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ba:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <HAL_ETH_MspInit+0x188>)
 80038bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038c4:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_ETH_MspInit+0x188>)
 80038c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ce:	60bb      	str	r3, [r7, #8]
 80038d0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80038d2:	2332      	movs	r3, #50	; 0x32
 80038d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d6:	2302      	movs	r3, #2
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038de:	2300      	movs	r3, #0
 80038e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80038e2:	230b      	movs	r3, #11
 80038e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80038ea:	4619      	mov	r1, r3
 80038ec:	481e      	ldr	r0, [pc, #120]	; (8003968 <HAL_ETH_MspInit+0x18c>)
 80038ee:	f003 fae5 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80038f2:	2386      	movs	r3, #134	; 0x86
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f6:	2302      	movs	r3, #2
 80038f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038fe:	2300      	movs	r3, #0
 8003900:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003902:	230b      	movs	r3, #11
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800390a:	4619      	mov	r1, r3
 800390c:	4817      	ldr	r0, [pc, #92]	; (800396c <HAL_ETH_MspInit+0x190>)
 800390e:	f003 fad5 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003912:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003918:	2302      	movs	r3, #2
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800391c:	2300      	movs	r3, #0
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003920:	2300      	movs	r3, #0
 8003922:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003924:	230b      	movs	r3, #11
 8003926:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800392c:	4619      	mov	r1, r3
 800392e:	4810      	ldr	r0, [pc, #64]	; (8003970 <HAL_ETH_MspInit+0x194>)
 8003930:	f003 fac4 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003934:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800393a:	2302      	movs	r3, #2
 800393c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393e:	2300      	movs	r3, #0
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003942:	2300      	movs	r3, #0
 8003944:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003946:	230b      	movs	r3, #11
 8003948:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800394a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800394e:	4619      	mov	r1, r3
 8003950:	4808      	ldr	r0, [pc, #32]	; (8003974 <HAL_ETH_MspInit+0x198>)
 8003952:	f003 fab3 	bl	8006ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003956:	bf00      	nop
 8003958:	3738      	adds	r7, #56	; 0x38
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40028000 	.word	0x40028000
 8003964:	58024400 	.word	0x58024400
 8003968:	58020800 	.word	0x58020800
 800396c:	58020000 	.word	0x58020000
 8003970:	58020400 	.word	0x58020400
 8003974:	58021800 	.word	0x58021800

08003978 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08a      	sub	sp, #40	; 0x28
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]
 8003988:	605a      	str	r2, [r3, #4]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	60da      	str	r2, [r3, #12]
 800398e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a2a      	ldr	r2, [pc, #168]	; (8003a40 <HAL_SPI_MspInit+0xc8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d14d      	bne.n	8003a36 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800399a:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 800399c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039a0:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 80039a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 80039ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80039b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039b4:	613b      	str	r3, [r7, #16]
 80039b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 80039ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039be:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 80039c0:	f043 0302 	orr.w	r3, r3, #2
 80039c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039c8:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 80039ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	60fb      	str	r3, [r7, #12]
 80039d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 80039d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039dc:	4a19      	ldr	r2, [pc, #100]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <HAL_SPI_MspInit+0xcc>)
 80039e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80039f4:	2304      	movs	r3, #4
 80039f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80039fc:	2302      	movs	r3, #2
 80039fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a00:	2300      	movs	r3, #0
 8003a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003a04:	2307      	movs	r3, #7
 8003a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	480e      	ldr	r0, [pc, #56]	; (8003a48 <HAL_SPI_MspInit+0xd0>)
 8003a10:	f003 fa54 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003a14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a22:	2300      	movs	r3, #0
 8003a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a26:	2306      	movs	r3, #6
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2a:	f107 0314 	add.w	r3, r7, #20
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4806      	ldr	r0, [pc, #24]	; (8003a4c <HAL_SPI_MspInit+0xd4>)
 8003a32:	f003 fa43 	bl	8006ebc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003a36:	bf00      	nop
 8003a38:	3728      	adds	r7, #40	; 0x28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40003c00 	.word	0x40003c00
 8003a44:	58024400 	.word	0x58024400
 8003a48:	58020400 	.word	0x58020400
 8003a4c:	58020800 	.word	0x58020800

08003a50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0e      	ldr	r2, [pc, #56]	; (8003a98 <HAL_TIM_Base_MspInit+0x48>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d116      	bne.n	8003a90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <HAL_TIM_Base_MspInit+0x4c>)
 8003a64:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a68:	4a0c      	ldr	r2, [pc, #48]	; (8003a9c <HAL_TIM_Base_MspInit+0x4c>)
 8003a6a:	f043 0320 	orr.w	r3, r3, #32
 8003a6e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003a72:	4b0a      	ldr	r3, [pc, #40]	; (8003a9c <HAL_TIM_Base_MspInit+0x4c>)
 8003a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003a78:	f003 0320 	and.w	r3, r3, #32
 8003a7c:	60fb      	str	r3, [r7, #12]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2100      	movs	r1, #0
 8003a84:	2037      	movs	r0, #55	; 0x37
 8003a86:	f000 fb9a 	bl	80041be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a8a:	2037      	movs	r0, #55	; 0x37
 8003a8c:	f000 fbb1 	bl	80041f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003a90:	bf00      	nop
 8003a92:	3710      	adds	r7, #16
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40001400 	.word	0x40001400
 8003a9c:	58024400 	.word	0x58024400

08003aa0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b0b8      	sub	sp, #224	; 0xe0
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003ab8:	f107 0310 	add.w	r3, r7, #16
 8003abc:	22bc      	movs	r2, #188	; 0xbc
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f009 f88d 	bl	800cbe0 <memset>
  if(huart->Instance==USART3)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a57      	ldr	r2, [pc, #348]	; (8003c28 <HAL_UART_MspInit+0x188>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	f040 80a6 	bne.w	8003c1e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003adc:	f107 0310 	add.w	r3, r7, #16
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 fd81 	bl	80085e8 <HAL_RCCEx_PeriphCLKConfig>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003aec:	f7ff fa36 	bl	8002f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003af0:	4b4e      	ldr	r3, [pc, #312]	; (8003c2c <HAL_UART_MspInit+0x18c>)
 8003af2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003af6:	4a4d      	ldr	r2, [pc, #308]	; (8003c2c <HAL_UART_MspInit+0x18c>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b00:	4b4a      	ldr	r3, [pc, #296]	; (8003c2c <HAL_UART_MspInit+0x18c>)
 8003b02:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0a:	60fb      	str	r3, [r7, #12]
 8003b0c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b0e:	4b47      	ldr	r3, [pc, #284]	; (8003c2c <HAL_UART_MspInit+0x18c>)
 8003b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b14:	4a45      	ldr	r2, [pc, #276]	; (8003c2c <HAL_UART_MspInit+0x18c>)
 8003b16:	f043 0308 	orr.w	r3, r3, #8
 8003b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b1e:	4b43      	ldr	r3, [pc, #268]	; (8003c2c <HAL_UART_MspInit+0x18c>)
 8003b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	60bb      	str	r3, [r7, #8]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003b2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b34:	2302      	movs	r3, #2
 8003b36:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b46:	2307      	movs	r3, #7
 8003b48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b4c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003b50:	4619      	mov	r1, r3
 8003b52:	4837      	ldr	r0, [pc, #220]	; (8003c30 <HAL_UART_MspInit+0x190>)
 8003b54:	f003 f9b2 	bl	8006ebc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003b58:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b5a:	4a37      	ldr	r2, [pc, #220]	; (8003c38 <HAL_UART_MspInit+0x198>)
 8003b5c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003b5e:	4b35      	ldr	r3, [pc, #212]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b60:	222d      	movs	r2, #45	; 0x2d
 8003b62:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003b64:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003b6a:	4b32      	ldr	r3, [pc, #200]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003b70:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b76:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003b78:	4b2e      	ldr	r3, [pc, #184]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003b7e:	4b2d      	ldr	r3, [pc, #180]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003b84:	4b2b      	ldr	r3, [pc, #172]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003b8c:	4b29      	ldr	r3, [pc, #164]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b8e:	2200      	movs	r2, #0
 8003b90:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b92:	4b28      	ldr	r3, [pc, #160]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003b98:	4826      	ldr	r0, [pc, #152]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003b9a:	f000 fb45 	bl	8004228 <HAL_DMA_Init>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003ba4:	f7ff f9da 	bl	8002f5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003bac:	67da      	str	r2, [r3, #124]	; 0x7c
 8003bae:	4a21      	ldr	r2, [pc, #132]	; (8003c34 <HAL_UART_MspInit+0x194>)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8003bb4:	4b21      	ldr	r3, [pc, #132]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bb6:	4a22      	ldr	r2, [pc, #136]	; (8003c40 <HAL_UART_MspInit+0x1a0>)
 8003bb8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003bba:	4b20      	ldr	r3, [pc, #128]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bbc:	222e      	movs	r2, #46	; 0x2e
 8003bbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003bc0:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bc2:	2240      	movs	r2, #64	; 0x40
 8003bc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bc6:	4b1d      	ldr	r3, [pc, #116]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bd2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003bd4:	4b19      	ldr	r3, [pc, #100]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bda:	4b18      	ldr	r3, [pc, #96]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003be0:	4b16      	ldr	r3, [pc, #88]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003be6:	4b15      	ldr	r3, [pc, #84]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003bec:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003bf2:	4812      	ldr	r0, [pc, #72]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003bf4:	f000 fb18 	bl	8004228 <HAL_DMA_Init>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003bfe:	f7ff f9ad 	bl	8002f5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a0d      	ldr	r2, [pc, #52]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003c06:	679a      	str	r2, [r3, #120]	; 0x78
 8003c08:	4a0c      	ldr	r2, [pc, #48]	; (8003c3c <HAL_UART_MspInit+0x19c>)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2100      	movs	r1, #0
 8003c12:	2027      	movs	r0, #39	; 0x27
 8003c14:	f000 fad3 	bl	80041be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c18:	2027      	movs	r0, #39	; 0x27
 8003c1a:	f000 faea 	bl	80041f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c1e:	bf00      	nop
 8003c20:	37e0      	adds	r7, #224	; 0xe0
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40004800 	.word	0x40004800
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	58020c00 	.word	0x58020c00
 8003c34:	240003c0 	.word	0x240003c0
 8003c38:	40020028 	.word	0x40020028
 8003c3c:	24000438 	.word	0x24000438
 8003c40:	40020070 	.word	0x40020070

08003c44 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b08a      	sub	sp, #40	; 0x28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c4c:	f107 0314 	add.w	r3, r7, #20
 8003c50:	2200      	movs	r2, #0
 8003c52:	601a      	str	r2, [r3, #0]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	609a      	str	r2, [r3, #8]
 8003c58:	60da      	str	r2, [r3, #12]
 8003c5a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a22      	ldr	r2, [pc, #136]	; (8003cec <HAL_PCD_MspInit+0xa8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d13d      	bne.n	8003ce2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003c66:	f003 fcf5 	bl	8007654 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c6a:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_PCD_MspInit+0xac>)
 8003c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c70:	4a1f      	ldr	r2, [pc, #124]	; (8003cf0 <HAL_PCD_MspInit+0xac>)
 8003c72:	f043 0301 	orr.w	r3, r3, #1
 8003c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c7a:	4b1d      	ldr	r3, [pc, #116]	; (8003cf0 <HAL_PCD_MspInit+0xac>)
 8003c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c80:	f003 0301 	and.w	r3, r3, #1
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003c88:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8e:	2302      	movs	r3, #2
 8003c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c96:	2300      	movs	r3, #0
 8003c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003c9a:	230a      	movs	r3, #10
 8003c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c9e:	f107 0314 	add.w	r3, r7, #20
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4813      	ldr	r0, [pc, #76]	; (8003cf4 <HAL_PCD_MspInit+0xb0>)
 8003ca6:	f003 f909 	bl	8006ebc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cb8:	f107 0314 	add.w	r3, r7, #20
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	480d      	ldr	r0, [pc, #52]	; (8003cf4 <HAL_PCD_MspInit+0xb0>)
 8003cc0:	f003 f8fc 	bl	8006ebc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <HAL_PCD_MspInit+0xac>)
 8003cc6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cca:	4a09      	ldr	r2, [pc, #36]	; (8003cf0 <HAL_PCD_MspInit+0xac>)
 8003ccc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cd0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_PCD_MspInit+0xac>)
 8003cd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003cda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003ce2:	bf00      	nop
 8003ce4:	3728      	adds	r7, #40	; 0x28
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	40080000 	.word	0x40080000
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	58020000 	.word	0x58020000

08003cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003cfc:	e7fe      	b.n	8003cfc <NMI_Handler+0x4>

08003cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d02:	e7fe      	b.n	8003d02 <HardFault_Handler+0x4>

08003d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d08:	e7fe      	b.n	8003d08 <MemManage_Handler+0x4>

08003d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d0a:	b480      	push	{r7}
 8003d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d0e:	e7fe      	b.n	8003d0e <BusFault_Handler+0x4>

08003d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d14:	e7fe      	b.n	8003d14 <UsageFault_Handler+0x4>

08003d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d16:	b480      	push	{r7}
 8003d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d1a:	bf00      	nop
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d24:	b480      	push	{r7}
 8003d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d28:	bf00      	nop
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr

08003d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d32:	b480      	push	{r7}
 8003d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d36:	bf00      	nop
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d44:	f000 f8fc 	bl	8003f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d48:	bf00      	nop
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003d50:	4802      	ldr	r0, [pc, #8]	; (8003d5c <DMA1_Stream1_IRQHandler+0x10>)
 8003d52:	f001 fb29 	bl	80053a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003d56:	bf00      	nop
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	240003c0 	.word	0x240003c0

08003d60 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003d64:	4802      	ldr	r0, [pc, #8]	; (8003d70 <DMA1_Stream4_IRQHandler+0x10>)
 8003d66:	f001 fb1f 	bl	80053a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003d6a:	bf00      	nop
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	bf00      	nop
 8003d70:	24000438 	.word	0x24000438

08003d74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d78:	4802      	ldr	r0, [pc, #8]	; (8003d84 <USART3_IRQHandler+0x10>)
 8003d7a:	f006 ff59 	bl	800ac30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d7e:	bf00      	nop
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	24000330 	.word	0x24000330

08003d88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003d8c:	4802      	ldr	r0, [pc, #8]	; (8003d98 <TIM7_IRQHandler+0x10>)
 8003d8e:	f006 fc72 	bl	800a676 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003d92:	bf00      	nop
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	240002e4 	.word	0x240002e4

08003d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b086      	sub	sp, #24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003da4:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <_sbrk+0x5c>)
 8003da6:	4b15      	ldr	r3, [pc, #84]	; (8003dfc <_sbrk+0x60>)
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003db0:	4b13      	ldr	r3, [pc, #76]	; (8003e00 <_sbrk+0x64>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003db8:	4b11      	ldr	r3, [pc, #68]	; (8003e00 <_sbrk+0x64>)
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <_sbrk+0x68>)
 8003dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003dbe:	4b10      	ldr	r3, [pc, #64]	; (8003e00 <_sbrk+0x64>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d207      	bcs.n	8003ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003dcc:	f008 fede 	bl	800cb8c <__errno>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	220c      	movs	r2, #12
 8003dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e009      	b.n	8003df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <_sbrk+0x64>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <_sbrk+0x64>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4413      	add	r3, r2
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <_sbrk+0x64>)
 8003dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003dee:	68fb      	ldr	r3, [r7, #12]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	24080000 	.word	0x24080000
 8003dfc:	00000400 	.word	0x00000400
 8003e00:	24000ea8 	.word	0x24000ea8
 8003e04:	24000ec0 	.word	0x24000ec0

08003e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e0c:	f7fe fc0e 	bl	800262c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e10:	480c      	ldr	r0, [pc, #48]	; (8003e44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e12:	490d      	ldr	r1, [pc, #52]	; (8003e48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e14:	4a0d      	ldr	r2, [pc, #52]	; (8003e4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e18:	e002      	b.n	8003e20 <LoopCopyDataInit>

08003e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e1e:	3304      	adds	r3, #4

08003e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e24:	d3f9      	bcc.n	8003e1a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e26:	4a0a      	ldr	r2, [pc, #40]	; (8003e50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e28:	4c0a      	ldr	r4, [pc, #40]	; (8003e54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e2c:	e001      	b.n	8003e32 <LoopFillZerobss>

08003e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e30:	3204      	adds	r2, #4

08003e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e34:	d3fb      	bcc.n	8003e2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e36:	f008 feaf 	bl	800cb98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e3a:	f7fe fc8d 	bl	8002758 <main>
  bx  lr
 8003e3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e40:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003e44:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e48:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8003e4c:	0800ec08 	.word	0x0800ec08
  ldr r2, =_sbss
 8003e50:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8003e54:	24000ec0 	.word	0x24000ec0

08003e58 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e58:	e7fe      	b.n	8003e58 <ADC3_IRQHandler>
	...

08003e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e62:	2003      	movs	r0, #3
 8003e64:	f000 f9a0 	bl	80041a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003e68:	f004 f9e8 	bl	800823c <HAL_RCC_GetSysClockFreq>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	4b15      	ldr	r3, [pc, #84]	; (8003ec4 <HAL_Init+0x68>)
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	0a1b      	lsrs	r3, r3, #8
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	4913      	ldr	r1, [pc, #76]	; (8003ec8 <HAL_Init+0x6c>)
 8003e7a:	5ccb      	ldrb	r3, [r1, r3]
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	fa22 f303 	lsr.w	r3, r2, r3
 8003e84:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e86:	4b0f      	ldr	r3, [pc, #60]	; (8003ec4 <HAL_Init+0x68>)
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	4a0e      	ldr	r2, [pc, #56]	; (8003ec8 <HAL_Init+0x6c>)
 8003e90:	5cd3      	ldrb	r3, [r2, r3]
 8003e92:	f003 031f 	and.w	r3, r3, #31
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9c:	4a0b      	ldr	r2, [pc, #44]	; (8003ecc <HAL_Init+0x70>)
 8003e9e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003ea0:	4a0b      	ldr	r2, [pc, #44]	; (8003ed0 <HAL_Init+0x74>)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f000 f814 	bl	8003ed4 <HAL_InitTick>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e002      	b.n	8003ebc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003eb6:	f7ff fc77 	bl	80037a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	0800d644 	.word	0x0800d644
 8003ecc:	24000008 	.word	0x24000008
 8003ed0:	24000004 	.word	0x24000004

08003ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003edc:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <HAL_InitTick+0x60>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e021      	b.n	8003f2c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003ee8:	4b13      	ldr	r3, [pc, #76]	; (8003f38 <HAL_InitTick+0x64>)
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <HAL_InitTick+0x60>)
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 f985 	bl	800420e <HAL_SYSTICK_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d001      	beq.n	8003f0e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e00e      	b.n	8003f2c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2b0f      	cmp	r3, #15
 8003f12:	d80a      	bhi.n	8003f2a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f14:	2200      	movs	r2, #0
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	f04f 30ff 	mov.w	r0, #4294967295
 8003f1c:	f000 f94f 	bl	80041be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f20:	4a06      	ldr	r2, [pc, #24]	; (8003f3c <HAL_InitTick+0x68>)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
 8003f28:	e000      	b.n	8003f2c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3708      	adds	r7, #8
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	24000020 	.word	0x24000020
 8003f38:	24000004 	.word	0x24000004
 8003f3c:	2400001c 	.word	0x2400001c

08003f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f44:	4b06      	ldr	r3, [pc, #24]	; (8003f60 <HAL_IncTick+0x20>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4b06      	ldr	r3, [pc, #24]	; (8003f64 <HAL_IncTick+0x24>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4413      	add	r3, r2
 8003f50:	4a04      	ldr	r2, [pc, #16]	; (8003f64 <HAL_IncTick+0x24>)
 8003f52:	6013      	str	r3, [r2, #0]
}
 8003f54:	bf00      	nop
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	24000020 	.word	0x24000020
 8003f64:	24000eac 	.word	0x24000eac

08003f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_GetTick+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	24000eac 	.word	0x24000eac

08003f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f88:	f7ff ffee 	bl	8003f68 <HAL_GetTick>
 8003f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d005      	beq.n	8003fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <HAL_Delay+0x44>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003fa6:	bf00      	nop
 8003fa8:	f7ff ffde 	bl	8003f68 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d8f7      	bhi.n	8003fa8 <HAL_Delay+0x28>
  {
  }
}
 8003fb8:	bf00      	nop
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	24000020 	.word	0x24000020

08003fc8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003fcc:	4b03      	ldr	r3, [pc, #12]	; (8003fdc <HAL_GetREVID+0x14>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	5c001000 	.word	0x5c001000

08003fe0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003ff0:	4904      	ldr	r1, [pc, #16]	; (8004004 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	604b      	str	r3, [r1, #4]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	58000400 	.word	0x58000400

08004008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004008:	b480      	push	{r7}
 800400a:	b085      	sub	sp, #20
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004018:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <__NVIC_SetPriorityGrouping+0x40>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800401e:	68ba      	ldr	r2, [r7, #8]
 8004020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004024:	4013      	ands	r3, r2
 8004026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004030:	4b06      	ldr	r3, [pc, #24]	; (800404c <__NVIC_SetPriorityGrouping+0x44>)
 8004032:	4313      	orrs	r3, r2
 8004034:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004036:	4a04      	ldr	r2, [pc, #16]	; (8004048 <__NVIC_SetPriorityGrouping+0x40>)
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	60d3      	str	r3, [r2, #12]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	e000ed00 	.word	0xe000ed00
 800404c:	05fa0000 	.word	0x05fa0000

08004050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004054:	4b04      	ldr	r3, [pc, #16]	; (8004068 <__NVIC_GetPriorityGrouping+0x18>)
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	f003 0307 	and.w	r3, r3, #7
}
 800405e:	4618      	mov	r0, r3
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr
 8004068:	e000ed00 	.word	0xe000ed00

0800406c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406c:	b480      	push	{r7}
 800406e:	b083      	sub	sp, #12
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004076:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800407a:	2b00      	cmp	r3, #0
 800407c:	db0b      	blt.n	8004096 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800407e:	88fb      	ldrh	r3, [r7, #6]
 8004080:	f003 021f 	and.w	r2, r3, #31
 8004084:	4907      	ldr	r1, [pc, #28]	; (80040a4 <__NVIC_EnableIRQ+0x38>)
 8004086:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2001      	movs	r0, #1
 800408e:	fa00 f202 	lsl.w	r2, r0, r2
 8004092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004096:	bf00      	nop
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	e000e100 	.word	0xe000e100

080040a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	4603      	mov	r3, r0
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	db0a      	blt.n	80040d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	490c      	ldr	r1, [pc, #48]	; (80040f4 <__NVIC_SetPriority+0x4c>)
 80040c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c6:	0112      	lsls	r2, r2, #4
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	440b      	add	r3, r1
 80040cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040d0:	e00a      	b.n	80040e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	b2da      	uxtb	r2, r3
 80040d6:	4908      	ldr	r1, [pc, #32]	; (80040f8 <__NVIC_SetPriority+0x50>)
 80040d8:	88fb      	ldrh	r3, [r7, #6]
 80040da:	f003 030f 	and.w	r3, r3, #15
 80040de:	3b04      	subs	r3, #4
 80040e0:	0112      	lsls	r2, r2, #4
 80040e2:	b2d2      	uxtb	r2, r2
 80040e4:	440b      	add	r3, r1
 80040e6:	761a      	strb	r2, [r3, #24]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	e000e100 	.word	0xe000e100
 80040f8:	e000ed00 	.word	0xe000ed00

080040fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b089      	sub	sp, #36	; 0x24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f003 0307 	and.w	r3, r3, #7
 800410e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	f1c3 0307 	rsb	r3, r3, #7
 8004116:	2b04      	cmp	r3, #4
 8004118:	bf28      	it	cs
 800411a:	2304      	movcs	r3, #4
 800411c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3304      	adds	r3, #4
 8004122:	2b06      	cmp	r3, #6
 8004124:	d902      	bls.n	800412c <NVIC_EncodePriority+0x30>
 8004126:	69fb      	ldr	r3, [r7, #28]
 8004128:	3b03      	subs	r3, #3
 800412a:	e000      	b.n	800412e <NVIC_EncodePriority+0x32>
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004130:	f04f 32ff 	mov.w	r2, #4294967295
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43da      	mvns	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	401a      	ands	r2, r3
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004144:	f04f 31ff 	mov.w	r1, #4294967295
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	fa01 f303 	lsl.w	r3, r1, r3
 800414e:	43d9      	mvns	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004154:	4313      	orrs	r3, r2
         );
}
 8004156:	4618      	mov	r0, r3
 8004158:	3724      	adds	r7, #36	; 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
	...

08004164 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	3b01      	subs	r3, #1
 8004170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004174:	d301      	bcc.n	800417a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004176:	2301      	movs	r3, #1
 8004178:	e00f      	b.n	800419a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800417a:	4a0a      	ldr	r2, [pc, #40]	; (80041a4 <SysTick_Config+0x40>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	3b01      	subs	r3, #1
 8004180:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004182:	210f      	movs	r1, #15
 8004184:	f04f 30ff 	mov.w	r0, #4294967295
 8004188:	f7ff ff8e 	bl	80040a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800418c:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <SysTick_Config+0x40>)
 800418e:	2200      	movs	r2, #0
 8004190:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004192:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <SysTick_Config+0x40>)
 8004194:	2207      	movs	r2, #7
 8004196:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	e000e010 	.word	0xe000e010

080041a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff29 	bl	8004008 <__NVIC_SetPriorityGrouping>
}
 80041b6:	bf00      	nop
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}

080041be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041be:	b580      	push	{r7, lr}
 80041c0:	b086      	sub	sp, #24
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	4603      	mov	r3, r0
 80041c6:	60b9      	str	r1, [r7, #8]
 80041c8:	607a      	str	r2, [r7, #4]
 80041ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041cc:	f7ff ff40 	bl	8004050 <__NVIC_GetPriorityGrouping>
 80041d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	68b9      	ldr	r1, [r7, #8]
 80041d6:	6978      	ldr	r0, [r7, #20]
 80041d8:	f7ff ff90 	bl	80040fc <NVIC_EncodePriority>
 80041dc:	4602      	mov	r2, r0
 80041de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80041e2:	4611      	mov	r1, r2
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff5f 	bl	80040a8 <__NVIC_SetPriority>
}
 80041ea:	bf00      	nop
 80041ec:	3718      	adds	r7, #24
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f2:	b580      	push	{r7, lr}
 80041f4:	b082      	sub	sp, #8
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	4603      	mov	r3, r0
 80041fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff33 	bl	800406c <__NVIC_EnableIRQ>
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b082      	sub	sp, #8
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f7ff ffa4 	bl	8004164 <SysTick_Config>
 800421c:	4603      	mov	r3, r0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3708      	adds	r7, #8
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
	...

08004228 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004230:	f7ff fe9a 	bl	8003f68 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e316      	b.n	800486e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a66      	ldr	r2, [pc, #408]	; (80043e0 <HAL_DMA_Init+0x1b8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d04a      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a65      	ldr	r2, [pc, #404]	; (80043e4 <HAL_DMA_Init+0x1bc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d045      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a63      	ldr	r2, [pc, #396]	; (80043e8 <HAL_DMA_Init+0x1c0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d040      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a62      	ldr	r2, [pc, #392]	; (80043ec <HAL_DMA_Init+0x1c4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d03b      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a60      	ldr	r2, [pc, #384]	; (80043f0 <HAL_DMA_Init+0x1c8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d036      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a5f      	ldr	r2, [pc, #380]	; (80043f4 <HAL_DMA_Init+0x1cc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d031      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a5d      	ldr	r2, [pc, #372]	; (80043f8 <HAL_DMA_Init+0x1d0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d02c      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a5c      	ldr	r2, [pc, #368]	; (80043fc <HAL_DMA_Init+0x1d4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d027      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a5a      	ldr	r2, [pc, #360]	; (8004400 <HAL_DMA_Init+0x1d8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d022      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a59      	ldr	r2, [pc, #356]	; (8004404 <HAL_DMA_Init+0x1dc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d01d      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a57      	ldr	r2, [pc, #348]	; (8004408 <HAL_DMA_Init+0x1e0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d018      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a56      	ldr	r2, [pc, #344]	; (800440c <HAL_DMA_Init+0x1e4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d013      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a54      	ldr	r2, [pc, #336]	; (8004410 <HAL_DMA_Init+0x1e8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d00e      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a53      	ldr	r2, [pc, #332]	; (8004414 <HAL_DMA_Init+0x1ec>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d009      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a51      	ldr	r2, [pc, #324]	; (8004418 <HAL_DMA_Init+0x1f0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d004      	beq.n	80042e0 <HAL_DMA_Init+0xb8>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a50      	ldr	r2, [pc, #320]	; (800441c <HAL_DMA_Init+0x1f4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d101      	bne.n	80042e4 <HAL_DMA_Init+0xbc>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_DMA_Init+0xbe>
 80042e4:	2300      	movs	r3, #0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 813b 	beq.w	8004562 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a37      	ldr	r2, [pc, #220]	; (80043e0 <HAL_DMA_Init+0x1b8>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d04a      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a36      	ldr	r2, [pc, #216]	; (80043e4 <HAL_DMA_Init+0x1bc>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d045      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a34      	ldr	r2, [pc, #208]	; (80043e8 <HAL_DMA_Init+0x1c0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d040      	beq.n	800439c <HAL_DMA_Init+0x174>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a33      	ldr	r2, [pc, #204]	; (80043ec <HAL_DMA_Init+0x1c4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d03b      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a31      	ldr	r2, [pc, #196]	; (80043f0 <HAL_DMA_Init+0x1c8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d036      	beq.n	800439c <HAL_DMA_Init+0x174>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a30      	ldr	r2, [pc, #192]	; (80043f4 <HAL_DMA_Init+0x1cc>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d031      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a2e      	ldr	r2, [pc, #184]	; (80043f8 <HAL_DMA_Init+0x1d0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d02c      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a2d      	ldr	r2, [pc, #180]	; (80043fc <HAL_DMA_Init+0x1d4>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d027      	beq.n	800439c <HAL_DMA_Init+0x174>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a2b      	ldr	r2, [pc, #172]	; (8004400 <HAL_DMA_Init+0x1d8>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a2a      	ldr	r2, [pc, #168]	; (8004404 <HAL_DMA_Init+0x1dc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01d      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <HAL_DMA_Init+0x1e0>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_DMA_Init+0x174>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a27      	ldr	r2, [pc, #156]	; (800440c <HAL_DMA_Init+0x1e4>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a25      	ldr	r2, [pc, #148]	; (8004410 <HAL_DMA_Init+0x1e8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_DMA_Init+0x174>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a24      	ldr	r2, [pc, #144]	; (8004414 <HAL_DMA_Init+0x1ec>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a22      	ldr	r2, [pc, #136]	; (8004418 <HAL_DMA_Init+0x1f0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_DMA_Init+0x174>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a21      	ldr	r2, [pc, #132]	; (800441c <HAL_DMA_Init+0x1f4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d108      	bne.n	80043ae <HAL_DMA_Init+0x186>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f022 0201 	bic.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e007      	b.n	80043be <HAL_DMA_Init+0x196>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043be:	e02f      	b.n	8004420 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80043c0:	f7ff fdd2 	bl	8003f68 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d928      	bls.n	8004420 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2220      	movs	r2, #32
 80043d2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2203      	movs	r2, #3
 80043d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e246      	b.n	800486e <HAL_DMA_Init+0x646>
 80043e0:	40020010 	.word	0x40020010
 80043e4:	40020028 	.word	0x40020028
 80043e8:	40020040 	.word	0x40020040
 80043ec:	40020058 	.word	0x40020058
 80043f0:	40020070 	.word	0x40020070
 80043f4:	40020088 	.word	0x40020088
 80043f8:	400200a0 	.word	0x400200a0
 80043fc:	400200b8 	.word	0x400200b8
 8004400:	40020410 	.word	0x40020410
 8004404:	40020428 	.word	0x40020428
 8004408:	40020440 	.word	0x40020440
 800440c:	40020458 	.word	0x40020458
 8004410:	40020470 	.word	0x40020470
 8004414:	40020488 	.word	0x40020488
 8004418:	400204a0 	.word	0x400204a0
 800441c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1c8      	bne.n	80043c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004436:	697a      	ldr	r2, [r7, #20]
 8004438:	4b83      	ldr	r3, [pc, #524]	; (8004648 <HAL_DMA_Init+0x420>)
 800443a:	4013      	ands	r3, r2
 800443c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004446:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004452:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800445e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a1b      	ldr	r3, [r3, #32]
 8004464:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	4313      	orrs	r3, r2
 800446a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004470:	2b04      	cmp	r3, #4
 8004472:	d107      	bne.n	8004484 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	4313      	orrs	r3, r2
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	4313      	orrs	r3, r2
 8004482:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004484:	4b71      	ldr	r3, [pc, #452]	; (800464c <HAL_DMA_Init+0x424>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	4b71      	ldr	r3, [pc, #452]	; (8004650 <HAL_DMA_Init+0x428>)
 800448a:	4013      	ands	r3, r2
 800448c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004490:	d328      	bcc.n	80044e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	2b28      	cmp	r3, #40	; 0x28
 8004498:	d903      	bls.n	80044a2 <HAL_DMA_Init+0x27a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	2b2e      	cmp	r3, #46	; 0x2e
 80044a0:	d917      	bls.n	80044d2 <HAL_DMA_Init+0x2aa>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	2b3e      	cmp	r3, #62	; 0x3e
 80044a8:	d903      	bls.n	80044b2 <HAL_DMA_Init+0x28a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b42      	cmp	r3, #66	; 0x42
 80044b0:	d90f      	bls.n	80044d2 <HAL_DMA_Init+0x2aa>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b46      	cmp	r3, #70	; 0x46
 80044b8:	d903      	bls.n	80044c2 <HAL_DMA_Init+0x29a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b48      	cmp	r3, #72	; 0x48
 80044c0:	d907      	bls.n	80044d2 <HAL_DMA_Init+0x2aa>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b4e      	cmp	r3, #78	; 0x4e
 80044c8:	d905      	bls.n	80044d6 <HAL_DMA_Init+0x2ae>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2b52      	cmp	r3, #82	; 0x52
 80044d0:	d801      	bhi.n	80044d6 <HAL_DMA_Init+0x2ae>
 80044d2:	2301      	movs	r3, #1
 80044d4:	e000      	b.n	80044d8 <HAL_DMA_Init+0x2b0>
 80044d6:	2300      	movs	r3, #0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4313      	orrs	r3, r2
 8004504:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	2b04      	cmp	r3, #4
 800450c:	d117      	bne.n	800453e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	697a      	ldr	r2, [r7, #20]
 8004514:	4313      	orrs	r3, r2
 8004516:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00e      	beq.n	800453e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f001 ff1d 	bl	8006360 <DMA_CheckFifoParam>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d008      	beq.n	800453e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2240      	movs	r2, #64	; 0x40
 8004530:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e197      	b.n	800486e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f001 fe58 	bl	80061fc <DMA_CalcBaseAndBitshift>
 800454c:	4603      	mov	r3, r0
 800454e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004554:	f003 031f 	and.w	r3, r3, #31
 8004558:	223f      	movs	r2, #63	; 0x3f
 800455a:	409a      	lsls	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	609a      	str	r2, [r3, #8]
 8004560:	e0cd      	b.n	80046fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a3b      	ldr	r2, [pc, #236]	; (8004654 <HAL_DMA_Init+0x42c>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d022      	beq.n	80045b2 <HAL_DMA_Init+0x38a>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a39      	ldr	r2, [pc, #228]	; (8004658 <HAL_DMA_Init+0x430>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d01d      	beq.n	80045b2 <HAL_DMA_Init+0x38a>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a38      	ldr	r2, [pc, #224]	; (800465c <HAL_DMA_Init+0x434>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d018      	beq.n	80045b2 <HAL_DMA_Init+0x38a>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a36      	ldr	r2, [pc, #216]	; (8004660 <HAL_DMA_Init+0x438>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d013      	beq.n	80045b2 <HAL_DMA_Init+0x38a>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a35      	ldr	r2, [pc, #212]	; (8004664 <HAL_DMA_Init+0x43c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00e      	beq.n	80045b2 <HAL_DMA_Init+0x38a>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a33      	ldr	r2, [pc, #204]	; (8004668 <HAL_DMA_Init+0x440>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d009      	beq.n	80045b2 <HAL_DMA_Init+0x38a>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a32      	ldr	r2, [pc, #200]	; (800466c <HAL_DMA_Init+0x444>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d004      	beq.n	80045b2 <HAL_DMA_Init+0x38a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a30      	ldr	r2, [pc, #192]	; (8004670 <HAL_DMA_Init+0x448>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d101      	bne.n	80045b6 <HAL_DMA_Init+0x38e>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_DMA_Init+0x390>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	f000 8097 	beq.w	80046ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a24      	ldr	r2, [pc, #144]	; (8004654 <HAL_DMA_Init+0x42c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d021      	beq.n	800460c <HAL_DMA_Init+0x3e4>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a22      	ldr	r2, [pc, #136]	; (8004658 <HAL_DMA_Init+0x430>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01c      	beq.n	800460c <HAL_DMA_Init+0x3e4>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a21      	ldr	r2, [pc, #132]	; (800465c <HAL_DMA_Init+0x434>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d017      	beq.n	800460c <HAL_DMA_Init+0x3e4>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1f      	ldr	r2, [pc, #124]	; (8004660 <HAL_DMA_Init+0x438>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d012      	beq.n	800460c <HAL_DMA_Init+0x3e4>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a1e      	ldr	r2, [pc, #120]	; (8004664 <HAL_DMA_Init+0x43c>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00d      	beq.n	800460c <HAL_DMA_Init+0x3e4>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <HAL_DMA_Init+0x440>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d008      	beq.n	800460c <HAL_DMA_Init+0x3e4>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1b      	ldr	r2, [pc, #108]	; (800466c <HAL_DMA_Init+0x444>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d003      	beq.n	800460c <HAL_DMA_Init+0x3e4>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a19      	ldr	r2, [pc, #100]	; (8004670 <HAL_DMA_Init+0x448>)
 800460a:	4293      	cmp	r3, r2
 800460c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4b12      	ldr	r3, [pc, #72]	; (8004674 <HAL_DMA_Init+0x44c>)
 800462a:	4013      	ands	r3, r2
 800462c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b40      	cmp	r3, #64	; 0x40
 8004634:	d020      	beq.n	8004678 <HAL_DMA_Init+0x450>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	2b80      	cmp	r3, #128	; 0x80
 800463c:	d102      	bne.n	8004644 <HAL_DMA_Init+0x41c>
 800463e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004642:	e01a      	b.n	800467a <HAL_DMA_Init+0x452>
 8004644:	2300      	movs	r3, #0
 8004646:	e018      	b.n	800467a <HAL_DMA_Init+0x452>
 8004648:	fe10803f 	.word	0xfe10803f
 800464c:	5c001000 	.word	0x5c001000
 8004650:	ffff0000 	.word	0xffff0000
 8004654:	58025408 	.word	0x58025408
 8004658:	5802541c 	.word	0x5802541c
 800465c:	58025430 	.word	0x58025430
 8004660:	58025444 	.word	0x58025444
 8004664:	58025458 	.word	0x58025458
 8004668:	5802546c 	.word	0x5802546c
 800466c:	58025480 	.word	0x58025480
 8004670:	58025494 	.word	0x58025494
 8004674:	fffe000f 	.word	0xfffe000f
 8004678:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004680:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004688:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004690:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	4b6e      	ldr	r3, [pc, #440]	; (8004878 <HAL_DMA_Init+0x650>)
 80046c0:	4413      	add	r3, r2
 80046c2:	4a6e      	ldr	r2, [pc, #440]	; (800487c <HAL_DMA_Init+0x654>)
 80046c4:	fba2 2303 	umull	r2, r3, r2, r3
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	009a      	lsls	r2, r3, #2
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f001 fd93 	bl	80061fc <DMA_CalcBaseAndBitshift>
 80046d6:	4603      	mov	r3, r0
 80046d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046de:	f003 031f 	and.w	r3, r3, #31
 80046e2:	2201      	movs	r2, #1
 80046e4:	409a      	lsls	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	605a      	str	r2, [r3, #4]
 80046ea:	e008      	b.n	80046fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2240      	movs	r2, #64	; 0x40
 80046f0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2203      	movs	r2, #3
 80046f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e0b7      	b.n	800486e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a5f      	ldr	r2, [pc, #380]	; (8004880 <HAL_DMA_Init+0x658>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d072      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a5d      	ldr	r2, [pc, #372]	; (8004884 <HAL_DMA_Init+0x65c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d06d      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a5c      	ldr	r2, [pc, #368]	; (8004888 <HAL_DMA_Init+0x660>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d068      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a5a      	ldr	r2, [pc, #360]	; (800488c <HAL_DMA_Init+0x664>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d063      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a59      	ldr	r2, [pc, #356]	; (8004890 <HAL_DMA_Init+0x668>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d05e      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a57      	ldr	r2, [pc, #348]	; (8004894 <HAL_DMA_Init+0x66c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d059      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a56      	ldr	r2, [pc, #344]	; (8004898 <HAL_DMA_Init+0x670>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d054      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a54      	ldr	r2, [pc, #336]	; (800489c <HAL_DMA_Init+0x674>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d04f      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a53      	ldr	r2, [pc, #332]	; (80048a0 <HAL_DMA_Init+0x678>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d04a      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a51      	ldr	r2, [pc, #324]	; (80048a4 <HAL_DMA_Init+0x67c>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d045      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a50      	ldr	r2, [pc, #320]	; (80048a8 <HAL_DMA_Init+0x680>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d040      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a4e      	ldr	r2, [pc, #312]	; (80048ac <HAL_DMA_Init+0x684>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d03b      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a4d      	ldr	r2, [pc, #308]	; (80048b0 <HAL_DMA_Init+0x688>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d036      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a4b      	ldr	r2, [pc, #300]	; (80048b4 <HAL_DMA_Init+0x68c>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d031      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a4a      	ldr	r2, [pc, #296]	; (80048b8 <HAL_DMA_Init+0x690>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d02c      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a48      	ldr	r2, [pc, #288]	; (80048bc <HAL_DMA_Init+0x694>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d027      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a47      	ldr	r2, [pc, #284]	; (80048c0 <HAL_DMA_Init+0x698>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a45      	ldr	r2, [pc, #276]	; (80048c4 <HAL_DMA_Init+0x69c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01d      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a44      	ldr	r2, [pc, #272]	; (80048c8 <HAL_DMA_Init+0x6a0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a42      	ldr	r2, [pc, #264]	; (80048cc <HAL_DMA_Init+0x6a4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a41      	ldr	r2, [pc, #260]	; (80048d0 <HAL_DMA_Init+0x6a8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a3f      	ldr	r2, [pc, #252]	; (80048d4 <HAL_DMA_Init+0x6ac>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a3e      	ldr	r2, [pc, #248]	; (80048d8 <HAL_DMA_Init+0x6b0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_DMA_Init+0x5c6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a3c      	ldr	r2, [pc, #240]	; (80048dc <HAL_DMA_Init+0x6b4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d101      	bne.n	80047f2 <HAL_DMA_Init+0x5ca>
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <HAL_DMA_Init+0x5cc>
 80047f2:	2300      	movs	r3, #0
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d032      	beq.n	800485e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f001 fe2d 	bl	8006458 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b80      	cmp	r3, #128	; 0x80
 8004804:	d102      	bne.n	800480c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	b2d2      	uxtb	r2, r2
 8004816:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004820:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d010      	beq.n	800484c <HAL_DMA_Init+0x624>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b08      	cmp	r3, #8
 8004830:	d80c      	bhi.n	800484c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 feaa 	bl	800658c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	e008      	b.n	800485e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	a7fdabf8 	.word	0xa7fdabf8
 800487c:	cccccccd 	.word	0xcccccccd
 8004880:	40020010 	.word	0x40020010
 8004884:	40020028 	.word	0x40020028
 8004888:	40020040 	.word	0x40020040
 800488c:	40020058 	.word	0x40020058
 8004890:	40020070 	.word	0x40020070
 8004894:	40020088 	.word	0x40020088
 8004898:	400200a0 	.word	0x400200a0
 800489c:	400200b8 	.word	0x400200b8
 80048a0:	40020410 	.word	0x40020410
 80048a4:	40020428 	.word	0x40020428
 80048a8:	40020440 	.word	0x40020440
 80048ac:	40020458 	.word	0x40020458
 80048b0:	40020470 	.word	0x40020470
 80048b4:	40020488 	.word	0x40020488
 80048b8:	400204a0 	.word	0x400204a0
 80048bc:	400204b8 	.word	0x400204b8
 80048c0:	58025408 	.word	0x58025408
 80048c4:	5802541c 	.word	0x5802541c
 80048c8:	58025430 	.word	0x58025430
 80048cc:	58025444 	.word	0x58025444
 80048d0:	58025458 	.word	0x58025458
 80048d4:	5802546c 	.word	0x5802546c
 80048d8:	58025480 	.word	0x58025480
 80048dc:	58025494 	.word	0x58025494

080048e0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80048e8:	f7ff fb3e 	bl	8003f68 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e2dc      	b.n	8004eb2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b02      	cmp	r3, #2
 8004902:	d008      	beq.n	8004916 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2280      	movs	r2, #128	; 0x80
 8004908:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e2cd      	b.n	8004eb2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a76      	ldr	r2, [pc, #472]	; (8004af4 <HAL_DMA_Abort+0x214>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d04a      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a74      	ldr	r2, [pc, #464]	; (8004af8 <HAL_DMA_Abort+0x218>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d045      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a73      	ldr	r2, [pc, #460]	; (8004afc <HAL_DMA_Abort+0x21c>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d040      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a71      	ldr	r2, [pc, #452]	; (8004b00 <HAL_DMA_Abort+0x220>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d03b      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a70      	ldr	r2, [pc, #448]	; (8004b04 <HAL_DMA_Abort+0x224>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d036      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a6e      	ldr	r2, [pc, #440]	; (8004b08 <HAL_DMA_Abort+0x228>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d031      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6d      	ldr	r2, [pc, #436]	; (8004b0c <HAL_DMA_Abort+0x22c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d02c      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a6b      	ldr	r2, [pc, #428]	; (8004b10 <HAL_DMA_Abort+0x230>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d027      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a6a      	ldr	r2, [pc, #424]	; (8004b14 <HAL_DMA_Abort+0x234>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d022      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a68      	ldr	r2, [pc, #416]	; (8004b18 <HAL_DMA_Abort+0x238>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d01d      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a67      	ldr	r2, [pc, #412]	; (8004b1c <HAL_DMA_Abort+0x23c>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d018      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a65      	ldr	r2, [pc, #404]	; (8004b20 <HAL_DMA_Abort+0x240>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d013      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a64      	ldr	r2, [pc, #400]	; (8004b24 <HAL_DMA_Abort+0x244>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00e      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a62      	ldr	r2, [pc, #392]	; (8004b28 <HAL_DMA_Abort+0x248>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d009      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a61      	ldr	r2, [pc, #388]	; (8004b2c <HAL_DMA_Abort+0x24c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d004      	beq.n	80049b6 <HAL_DMA_Abort+0xd6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5f      	ldr	r2, [pc, #380]	; (8004b30 <HAL_DMA_Abort+0x250>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d101      	bne.n	80049ba <HAL_DMA_Abort+0xda>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e000      	b.n	80049bc <HAL_DMA_Abort+0xdc>
 80049ba:	2300      	movs	r3, #0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d013      	beq.n	80049e8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 021e 	bic.w	r2, r2, #30
 80049ce:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	695a      	ldr	r2, [r3, #20]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049de:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	617b      	str	r3, [r7, #20]
 80049e6:	e00a      	b.n	80049fe <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 020e 	bic.w	r2, r2, #14
 80049f6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <HAL_DMA_Abort+0x214>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d072      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a3a      	ldr	r2, [pc, #232]	; (8004af8 <HAL_DMA_Abort+0x218>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d06d      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a39      	ldr	r2, [pc, #228]	; (8004afc <HAL_DMA_Abort+0x21c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d068      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a37      	ldr	r2, [pc, #220]	; (8004b00 <HAL_DMA_Abort+0x220>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d063      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a36      	ldr	r2, [pc, #216]	; (8004b04 <HAL_DMA_Abort+0x224>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d05e      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a34      	ldr	r2, [pc, #208]	; (8004b08 <HAL_DMA_Abort+0x228>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d059      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a33      	ldr	r2, [pc, #204]	; (8004b0c <HAL_DMA_Abort+0x22c>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d054      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a31      	ldr	r2, [pc, #196]	; (8004b10 <HAL_DMA_Abort+0x230>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d04f      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a30      	ldr	r2, [pc, #192]	; (8004b14 <HAL_DMA_Abort+0x234>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d04a      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a2e      	ldr	r2, [pc, #184]	; (8004b18 <HAL_DMA_Abort+0x238>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d045      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2d      	ldr	r2, [pc, #180]	; (8004b1c <HAL_DMA_Abort+0x23c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d040      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a2b      	ldr	r2, [pc, #172]	; (8004b20 <HAL_DMA_Abort+0x240>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d03b      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	; (8004b24 <HAL_DMA_Abort+0x244>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d036      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a28      	ldr	r2, [pc, #160]	; (8004b28 <HAL_DMA_Abort+0x248>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d031      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a27      	ldr	r2, [pc, #156]	; (8004b2c <HAL_DMA_Abort+0x24c>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d02c      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a25      	ldr	r2, [pc, #148]	; (8004b30 <HAL_DMA_Abort+0x250>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d027      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a24      	ldr	r2, [pc, #144]	; (8004b34 <HAL_DMA_Abort+0x254>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d022      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a22      	ldr	r2, [pc, #136]	; (8004b38 <HAL_DMA_Abort+0x258>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d01d      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_DMA_Abort+0x25c>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d018      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <HAL_DMA_Abort+0x260>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d013      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1e      	ldr	r2, [pc, #120]	; (8004b44 <HAL_DMA_Abort+0x264>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d00e      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_DMA_Abort+0x268>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d009      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1b      	ldr	r2, [pc, #108]	; (8004b4c <HAL_DMA_Abort+0x26c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d004      	beq.n	8004aee <HAL_DMA_Abort+0x20e>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <HAL_DMA_Abort+0x270>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d132      	bne.n	8004b54 <HAL_DMA_Abort+0x274>
 8004aee:	2301      	movs	r3, #1
 8004af0:	e031      	b.n	8004b56 <HAL_DMA_Abort+0x276>
 8004af2:	bf00      	nop
 8004af4:	40020010 	.word	0x40020010
 8004af8:	40020028 	.word	0x40020028
 8004afc:	40020040 	.word	0x40020040
 8004b00:	40020058 	.word	0x40020058
 8004b04:	40020070 	.word	0x40020070
 8004b08:	40020088 	.word	0x40020088
 8004b0c:	400200a0 	.word	0x400200a0
 8004b10:	400200b8 	.word	0x400200b8
 8004b14:	40020410 	.word	0x40020410
 8004b18:	40020428 	.word	0x40020428
 8004b1c:	40020440 	.word	0x40020440
 8004b20:	40020458 	.word	0x40020458
 8004b24:	40020470 	.word	0x40020470
 8004b28:	40020488 	.word	0x40020488
 8004b2c:	400204a0 	.word	0x400204a0
 8004b30:	400204b8 	.word	0x400204b8
 8004b34:	58025408 	.word	0x58025408
 8004b38:	5802541c 	.word	0x5802541c
 8004b3c:	58025430 	.word	0x58025430
 8004b40:	58025444 	.word	0x58025444
 8004b44:	58025458 	.word	0x58025458
 8004b48:	5802546c 	.word	0x5802546c
 8004b4c:	58025480 	.word	0x58025480
 8004b50:	58025494 	.word	0x58025494
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d007      	beq.n	8004b6a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b68:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a6d      	ldr	r2, [pc, #436]	; (8004d24 <HAL_DMA_Abort+0x444>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d04a      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a6b      	ldr	r2, [pc, #428]	; (8004d28 <HAL_DMA_Abort+0x448>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d045      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a6a      	ldr	r2, [pc, #424]	; (8004d2c <HAL_DMA_Abort+0x44c>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d040      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a68      	ldr	r2, [pc, #416]	; (8004d30 <HAL_DMA_Abort+0x450>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d03b      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a67      	ldr	r2, [pc, #412]	; (8004d34 <HAL_DMA_Abort+0x454>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d036      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a65      	ldr	r2, [pc, #404]	; (8004d38 <HAL_DMA_Abort+0x458>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d031      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a64      	ldr	r2, [pc, #400]	; (8004d3c <HAL_DMA_Abort+0x45c>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d02c      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a62      	ldr	r2, [pc, #392]	; (8004d40 <HAL_DMA_Abort+0x460>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d027      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a61      	ldr	r2, [pc, #388]	; (8004d44 <HAL_DMA_Abort+0x464>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a5f      	ldr	r2, [pc, #380]	; (8004d48 <HAL_DMA_Abort+0x468>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <HAL_DMA_Abort+0x46c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a5c      	ldr	r2, [pc, #368]	; (8004d50 <HAL_DMA_Abort+0x470>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a5b      	ldr	r2, [pc, #364]	; (8004d54 <HAL_DMA_Abort+0x474>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a59      	ldr	r2, [pc, #356]	; (8004d58 <HAL_DMA_Abort+0x478>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_DMA_Abort+0x47c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <HAL_DMA_Abort+0x32a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a56      	ldr	r2, [pc, #344]	; (8004d60 <HAL_DMA_Abort+0x480>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d108      	bne.n	8004c1c <HAL_DMA_Abort+0x33c>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e007      	b.n	8004c2c <HAL_DMA_Abort+0x34c>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0201 	bic.w	r2, r2, #1
 8004c2a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c2c:	e013      	b.n	8004c56 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c2e:	f7ff f99b 	bl	8003f68 <HAL_GetTick>
 8004c32:	4602      	mov	r2, r0
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	d90c      	bls.n	8004c56 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2203      	movs	r2, #3
 8004c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e12d      	b.n	8004eb2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1e5      	bne.n	8004c2e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a2f      	ldr	r2, [pc, #188]	; (8004d24 <HAL_DMA_Abort+0x444>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d04a      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a2d      	ldr	r2, [pc, #180]	; (8004d28 <HAL_DMA_Abort+0x448>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d045      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <HAL_DMA_Abort+0x44c>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d040      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a2a      	ldr	r2, [pc, #168]	; (8004d30 <HAL_DMA_Abort+0x450>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d03b      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a29      	ldr	r2, [pc, #164]	; (8004d34 <HAL_DMA_Abort+0x454>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d036      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a27      	ldr	r2, [pc, #156]	; (8004d38 <HAL_DMA_Abort+0x458>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d031      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a26      	ldr	r2, [pc, #152]	; (8004d3c <HAL_DMA_Abort+0x45c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d02c      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a24      	ldr	r2, [pc, #144]	; (8004d40 <HAL_DMA_Abort+0x460>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d027      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <HAL_DMA_Abort+0x464>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d022      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a21      	ldr	r2, [pc, #132]	; (8004d48 <HAL_DMA_Abort+0x468>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d01d      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a20      	ldr	r2, [pc, #128]	; (8004d4c <HAL_DMA_Abort+0x46c>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d018      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1e      	ldr	r2, [pc, #120]	; (8004d50 <HAL_DMA_Abort+0x470>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d013      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <HAL_DMA_Abort+0x474>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d00e      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a1b      	ldr	r2, [pc, #108]	; (8004d58 <HAL_DMA_Abort+0x478>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d009      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <HAL_DMA_Abort+0x47c>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d004      	beq.n	8004d02 <HAL_DMA_Abort+0x422>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a18      	ldr	r2, [pc, #96]	; (8004d60 <HAL_DMA_Abort+0x480>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d101      	bne.n	8004d06 <HAL_DMA_Abort+0x426>
 8004d02:	2301      	movs	r3, #1
 8004d04:	e000      	b.n	8004d08 <HAL_DMA_Abort+0x428>
 8004d06:	2300      	movs	r3, #0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d02b      	beq.n	8004d64 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	223f      	movs	r2, #63	; 0x3f
 8004d1c:	409a      	lsls	r2, r3
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	609a      	str	r2, [r3, #8]
 8004d22:	e02a      	b.n	8004d7a <HAL_DMA_Abort+0x49a>
 8004d24:	40020010 	.word	0x40020010
 8004d28:	40020028 	.word	0x40020028
 8004d2c:	40020040 	.word	0x40020040
 8004d30:	40020058 	.word	0x40020058
 8004d34:	40020070 	.word	0x40020070
 8004d38:	40020088 	.word	0x40020088
 8004d3c:	400200a0 	.word	0x400200a0
 8004d40:	400200b8 	.word	0x400200b8
 8004d44:	40020410 	.word	0x40020410
 8004d48:	40020428 	.word	0x40020428
 8004d4c:	40020440 	.word	0x40020440
 8004d50:	40020458 	.word	0x40020458
 8004d54:	40020470 	.word	0x40020470
 8004d58:	40020488 	.word	0x40020488
 8004d5c:	400204a0 	.word	0x400204a0
 8004d60:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d68:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	2201      	movs	r2, #1
 8004d74:	409a      	lsls	r2, r3
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a4f      	ldr	r2, [pc, #316]	; (8004ebc <HAL_DMA_Abort+0x5dc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d072      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a4d      	ldr	r2, [pc, #308]	; (8004ec0 <HAL_DMA_Abort+0x5e0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d06d      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a4c      	ldr	r2, [pc, #304]	; (8004ec4 <HAL_DMA_Abort+0x5e4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d068      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a4a      	ldr	r2, [pc, #296]	; (8004ec8 <HAL_DMA_Abort+0x5e8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d063      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a49      	ldr	r2, [pc, #292]	; (8004ecc <HAL_DMA_Abort+0x5ec>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d05e      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a47      	ldr	r2, [pc, #284]	; (8004ed0 <HAL_DMA_Abort+0x5f0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d059      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a46      	ldr	r2, [pc, #280]	; (8004ed4 <HAL_DMA_Abort+0x5f4>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d054      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a44      	ldr	r2, [pc, #272]	; (8004ed8 <HAL_DMA_Abort+0x5f8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d04f      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a43      	ldr	r2, [pc, #268]	; (8004edc <HAL_DMA_Abort+0x5fc>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d04a      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a41      	ldr	r2, [pc, #260]	; (8004ee0 <HAL_DMA_Abort+0x600>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d045      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a40      	ldr	r2, [pc, #256]	; (8004ee4 <HAL_DMA_Abort+0x604>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d040      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a3e      	ldr	r2, [pc, #248]	; (8004ee8 <HAL_DMA_Abort+0x608>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d03b      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a3d      	ldr	r2, [pc, #244]	; (8004eec <HAL_DMA_Abort+0x60c>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d036      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a3b      	ldr	r2, [pc, #236]	; (8004ef0 <HAL_DMA_Abort+0x610>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d031      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a3a      	ldr	r2, [pc, #232]	; (8004ef4 <HAL_DMA_Abort+0x614>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d02c      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a38      	ldr	r2, [pc, #224]	; (8004ef8 <HAL_DMA_Abort+0x618>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d027      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a37      	ldr	r2, [pc, #220]	; (8004efc <HAL_DMA_Abort+0x61c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d022      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a35      	ldr	r2, [pc, #212]	; (8004f00 <HAL_DMA_Abort+0x620>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d01d      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a34      	ldr	r2, [pc, #208]	; (8004f04 <HAL_DMA_Abort+0x624>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d018      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a32      	ldr	r2, [pc, #200]	; (8004f08 <HAL_DMA_Abort+0x628>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d013      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a31      	ldr	r2, [pc, #196]	; (8004f0c <HAL_DMA_Abort+0x62c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d00e      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a2f      	ldr	r2, [pc, #188]	; (8004f10 <HAL_DMA_Abort+0x630>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d009      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a2e      	ldr	r2, [pc, #184]	; (8004f14 <HAL_DMA_Abort+0x634>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d004      	beq.n	8004e6a <HAL_DMA_Abort+0x58a>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a2c      	ldr	r2, [pc, #176]	; (8004f18 <HAL_DMA_Abort+0x638>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d101      	bne.n	8004e6e <HAL_DMA_Abort+0x58e>
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e000      	b.n	8004e70 <HAL_DMA_Abort+0x590>
 8004e6e:	2300      	movs	r3, #0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d015      	beq.n	8004ea0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004e7c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00c      	beq.n	8004ea0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e94:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e9e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40020010 	.word	0x40020010
 8004ec0:	40020028 	.word	0x40020028
 8004ec4:	40020040 	.word	0x40020040
 8004ec8:	40020058 	.word	0x40020058
 8004ecc:	40020070 	.word	0x40020070
 8004ed0:	40020088 	.word	0x40020088
 8004ed4:	400200a0 	.word	0x400200a0
 8004ed8:	400200b8 	.word	0x400200b8
 8004edc:	40020410 	.word	0x40020410
 8004ee0:	40020428 	.word	0x40020428
 8004ee4:	40020440 	.word	0x40020440
 8004ee8:	40020458 	.word	0x40020458
 8004eec:	40020470 	.word	0x40020470
 8004ef0:	40020488 	.word	0x40020488
 8004ef4:	400204a0 	.word	0x400204a0
 8004ef8:	400204b8 	.word	0x400204b8
 8004efc:	58025408 	.word	0x58025408
 8004f00:	5802541c 	.word	0x5802541c
 8004f04:	58025430 	.word	0x58025430
 8004f08:	58025444 	.word	0x58025444
 8004f0c:	58025458 	.word	0x58025458
 8004f10:	5802546c 	.word	0x5802546c
 8004f14:	58025480 	.word	0x58025480
 8004f18:	58025494 	.word	0x58025494

08004f1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e237      	b.n	800539e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d004      	beq.n	8004f44 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2280      	movs	r2, #128	; 0x80
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e22c      	b.n	800539e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5c      	ldr	r2, [pc, #368]	; (80050bc <HAL_DMA_Abort_IT+0x1a0>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d04a      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a5b      	ldr	r2, [pc, #364]	; (80050c0 <HAL_DMA_Abort_IT+0x1a4>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d045      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a59      	ldr	r2, [pc, #356]	; (80050c4 <HAL_DMA_Abort_IT+0x1a8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d040      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a58      	ldr	r2, [pc, #352]	; (80050c8 <HAL_DMA_Abort_IT+0x1ac>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d03b      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a56      	ldr	r2, [pc, #344]	; (80050cc <HAL_DMA_Abort_IT+0x1b0>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d036      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a55      	ldr	r2, [pc, #340]	; (80050d0 <HAL_DMA_Abort_IT+0x1b4>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d031      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a53      	ldr	r2, [pc, #332]	; (80050d4 <HAL_DMA_Abort_IT+0x1b8>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d02c      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a52      	ldr	r2, [pc, #328]	; (80050d8 <HAL_DMA_Abort_IT+0x1bc>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d027      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a50      	ldr	r2, [pc, #320]	; (80050dc <HAL_DMA_Abort_IT+0x1c0>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d022      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a4f      	ldr	r2, [pc, #316]	; (80050e0 <HAL_DMA_Abort_IT+0x1c4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d01d      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a4d      	ldr	r2, [pc, #308]	; (80050e4 <HAL_DMA_Abort_IT+0x1c8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d018      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a4c      	ldr	r2, [pc, #304]	; (80050e8 <HAL_DMA_Abort_IT+0x1cc>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a4a      	ldr	r2, [pc, #296]	; (80050ec <HAL_DMA_Abort_IT+0x1d0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00e      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a49      	ldr	r2, [pc, #292]	; (80050f0 <HAL_DMA_Abort_IT+0x1d4>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d009      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a47      	ldr	r2, [pc, #284]	; (80050f4 <HAL_DMA_Abort_IT+0x1d8>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d004      	beq.n	8004fe4 <HAL_DMA_Abort_IT+0xc8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a46      	ldr	r2, [pc, #280]	; (80050f8 <HAL_DMA_Abort_IT+0x1dc>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d101      	bne.n	8004fe8 <HAL_DMA_Abort_IT+0xcc>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <HAL_DMA_Abort_IT+0xce>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8086 	beq.w	80050fc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2204      	movs	r2, #4
 8004ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2f      	ldr	r2, [pc, #188]	; (80050bc <HAL_DMA_Abort_IT+0x1a0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d04a      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2e      	ldr	r2, [pc, #184]	; (80050c0 <HAL_DMA_Abort_IT+0x1a4>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d045      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2c      	ldr	r2, [pc, #176]	; (80050c4 <HAL_DMA_Abort_IT+0x1a8>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d040      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a2b      	ldr	r2, [pc, #172]	; (80050c8 <HAL_DMA_Abort_IT+0x1ac>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d03b      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a29      	ldr	r2, [pc, #164]	; (80050cc <HAL_DMA_Abort_IT+0x1b0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d036      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a28      	ldr	r2, [pc, #160]	; (80050d0 <HAL_DMA_Abort_IT+0x1b4>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d031      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a26      	ldr	r2, [pc, #152]	; (80050d4 <HAL_DMA_Abort_IT+0x1b8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d02c      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a25      	ldr	r2, [pc, #148]	; (80050d8 <HAL_DMA_Abort_IT+0x1bc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d027      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a23      	ldr	r2, [pc, #140]	; (80050dc <HAL_DMA_Abort_IT+0x1c0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d022      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a22      	ldr	r2, [pc, #136]	; (80050e0 <HAL_DMA_Abort_IT+0x1c4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d01d      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <HAL_DMA_Abort_IT+0x1c8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d018      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1f      	ldr	r2, [pc, #124]	; (80050e8 <HAL_DMA_Abort_IT+0x1cc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d013      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a1d      	ldr	r2, [pc, #116]	; (80050ec <HAL_DMA_Abort_IT+0x1d0>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d00e      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a1c      	ldr	r2, [pc, #112]	; (80050f0 <HAL_DMA_Abort_IT+0x1d4>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d009      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1a      	ldr	r2, [pc, #104]	; (80050f4 <HAL_DMA_Abort_IT+0x1d8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d004      	beq.n	8005098 <HAL_DMA_Abort_IT+0x17c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_DMA_Abort_IT+0x1dc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d108      	bne.n	80050aa <HAL_DMA_Abort_IT+0x18e>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	e178      	b.n	800539c <HAL_DMA_Abort_IT+0x480>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	601a      	str	r2, [r3, #0]
 80050ba:	e16f      	b.n	800539c <HAL_DMA_Abort_IT+0x480>
 80050bc:	40020010 	.word	0x40020010
 80050c0:	40020028 	.word	0x40020028
 80050c4:	40020040 	.word	0x40020040
 80050c8:	40020058 	.word	0x40020058
 80050cc:	40020070 	.word	0x40020070
 80050d0:	40020088 	.word	0x40020088
 80050d4:	400200a0 	.word	0x400200a0
 80050d8:	400200b8 	.word	0x400200b8
 80050dc:	40020410 	.word	0x40020410
 80050e0:	40020428 	.word	0x40020428
 80050e4:	40020440 	.word	0x40020440
 80050e8:	40020458 	.word	0x40020458
 80050ec:	40020470 	.word	0x40020470
 80050f0:	40020488 	.word	0x40020488
 80050f4:	400204a0 	.word	0x400204a0
 80050f8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f022 020e 	bic.w	r2, r2, #14
 800510a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a6c      	ldr	r2, [pc, #432]	; (80052c4 <HAL_DMA_Abort_IT+0x3a8>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d04a      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a6b      	ldr	r2, [pc, #428]	; (80052c8 <HAL_DMA_Abort_IT+0x3ac>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d045      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a69      	ldr	r2, [pc, #420]	; (80052cc <HAL_DMA_Abort_IT+0x3b0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d040      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a68      	ldr	r2, [pc, #416]	; (80052d0 <HAL_DMA_Abort_IT+0x3b4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d03b      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a66      	ldr	r2, [pc, #408]	; (80052d4 <HAL_DMA_Abort_IT+0x3b8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d036      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a65      	ldr	r2, [pc, #404]	; (80052d8 <HAL_DMA_Abort_IT+0x3bc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d031      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a63      	ldr	r2, [pc, #396]	; (80052dc <HAL_DMA_Abort_IT+0x3c0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d02c      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a62      	ldr	r2, [pc, #392]	; (80052e0 <HAL_DMA_Abort_IT+0x3c4>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d027      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a60      	ldr	r2, [pc, #384]	; (80052e4 <HAL_DMA_Abort_IT+0x3c8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d022      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a5f      	ldr	r2, [pc, #380]	; (80052e8 <HAL_DMA_Abort_IT+0x3cc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d01d      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a5d      	ldr	r2, [pc, #372]	; (80052ec <HAL_DMA_Abort_IT+0x3d0>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d018      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a5c      	ldr	r2, [pc, #368]	; (80052f0 <HAL_DMA_Abort_IT+0x3d4>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a5a      	ldr	r2, [pc, #360]	; (80052f4 <HAL_DMA_Abort_IT+0x3d8>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d00e      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a59      	ldr	r2, [pc, #356]	; (80052f8 <HAL_DMA_Abort_IT+0x3dc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d009      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a57      	ldr	r2, [pc, #348]	; (80052fc <HAL_DMA_Abort_IT+0x3e0>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d004      	beq.n	80051ac <HAL_DMA_Abort_IT+0x290>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a56      	ldr	r2, [pc, #344]	; (8005300 <HAL_DMA_Abort_IT+0x3e4>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <HAL_DMA_Abort_IT+0x2a2>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f022 0201 	bic.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
 80051bc:	e007      	b.n	80051ce <HAL_DMA_Abort_IT+0x2b2>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 0201 	bic.w	r2, r2, #1
 80051cc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a3c      	ldr	r2, [pc, #240]	; (80052c4 <HAL_DMA_Abort_IT+0x3a8>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d072      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a3a      	ldr	r2, [pc, #232]	; (80052c8 <HAL_DMA_Abort_IT+0x3ac>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d06d      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a39      	ldr	r2, [pc, #228]	; (80052cc <HAL_DMA_Abort_IT+0x3b0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d068      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a37      	ldr	r2, [pc, #220]	; (80052d0 <HAL_DMA_Abort_IT+0x3b4>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d063      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a36      	ldr	r2, [pc, #216]	; (80052d4 <HAL_DMA_Abort_IT+0x3b8>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d05e      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a34      	ldr	r2, [pc, #208]	; (80052d8 <HAL_DMA_Abort_IT+0x3bc>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d059      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a33      	ldr	r2, [pc, #204]	; (80052dc <HAL_DMA_Abort_IT+0x3c0>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d054      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a31      	ldr	r2, [pc, #196]	; (80052e0 <HAL_DMA_Abort_IT+0x3c4>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d04f      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <HAL_DMA_Abort_IT+0x3c8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d04a      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a2e      	ldr	r2, [pc, #184]	; (80052e8 <HAL_DMA_Abort_IT+0x3cc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d045      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2d      	ldr	r2, [pc, #180]	; (80052ec <HAL_DMA_Abort_IT+0x3d0>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d040      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a2b      	ldr	r2, [pc, #172]	; (80052f0 <HAL_DMA_Abort_IT+0x3d4>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d03b      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a2a      	ldr	r2, [pc, #168]	; (80052f4 <HAL_DMA_Abort_IT+0x3d8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d036      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a28      	ldr	r2, [pc, #160]	; (80052f8 <HAL_DMA_Abort_IT+0x3dc>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d031      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a27      	ldr	r2, [pc, #156]	; (80052fc <HAL_DMA_Abort_IT+0x3e0>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d02c      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a25      	ldr	r2, [pc, #148]	; (8005300 <HAL_DMA_Abort_IT+0x3e4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d027      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a24      	ldr	r2, [pc, #144]	; (8005304 <HAL_DMA_Abort_IT+0x3e8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d022      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a22      	ldr	r2, [pc, #136]	; (8005308 <HAL_DMA_Abort_IT+0x3ec>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d01d      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a21      	ldr	r2, [pc, #132]	; (800530c <HAL_DMA_Abort_IT+0x3f0>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d018      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a1f      	ldr	r2, [pc, #124]	; (8005310 <HAL_DMA_Abort_IT+0x3f4>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a1e      	ldr	r2, [pc, #120]	; (8005314 <HAL_DMA_Abort_IT+0x3f8>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d00e      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a1c      	ldr	r2, [pc, #112]	; (8005318 <HAL_DMA_Abort_IT+0x3fc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d009      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <HAL_DMA_Abort_IT+0x400>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d004      	beq.n	80052be <HAL_DMA_Abort_IT+0x3a2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a19      	ldr	r2, [pc, #100]	; (8005320 <HAL_DMA_Abort_IT+0x404>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d132      	bne.n	8005324 <HAL_DMA_Abort_IT+0x408>
 80052be:	2301      	movs	r3, #1
 80052c0:	e031      	b.n	8005326 <HAL_DMA_Abort_IT+0x40a>
 80052c2:	bf00      	nop
 80052c4:	40020010 	.word	0x40020010
 80052c8:	40020028 	.word	0x40020028
 80052cc:	40020040 	.word	0x40020040
 80052d0:	40020058 	.word	0x40020058
 80052d4:	40020070 	.word	0x40020070
 80052d8:	40020088 	.word	0x40020088
 80052dc:	400200a0 	.word	0x400200a0
 80052e0:	400200b8 	.word	0x400200b8
 80052e4:	40020410 	.word	0x40020410
 80052e8:	40020428 	.word	0x40020428
 80052ec:	40020440 	.word	0x40020440
 80052f0:	40020458 	.word	0x40020458
 80052f4:	40020470 	.word	0x40020470
 80052f8:	40020488 	.word	0x40020488
 80052fc:	400204a0 	.word	0x400204a0
 8005300:	400204b8 	.word	0x400204b8
 8005304:	58025408 	.word	0x58025408
 8005308:	5802541c 	.word	0x5802541c
 800530c:	58025430 	.word	0x58025430
 8005310:	58025444 	.word	0x58025444
 8005314:	58025458 	.word	0x58025458
 8005318:	5802546c 	.word	0x5802546c
 800531c:	58025480 	.word	0x58025480
 8005320:	58025494 	.word	0x58025494
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d028      	beq.n	800537c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005334:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005338:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800533e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005344:	f003 031f 	and.w	r3, r3, #31
 8005348:	2201      	movs	r2, #1
 800534a:	409a      	lsls	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005358:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00c      	beq.n	800537c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800536c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005370:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800537a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005390:	2b00      	cmp	r3, #0
 8005392:	d003      	beq.n	800539c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop

080053a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b08a      	sub	sp, #40	; 0x28
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80053b4:	4b67      	ldr	r3, [pc, #412]	; (8005554 <HAL_DMA_IRQHandler+0x1ac>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a67      	ldr	r2, [pc, #412]	; (8005558 <HAL_DMA_IRQHandler+0x1b0>)
 80053ba:	fba2 2303 	umull	r2, r3, r2, r3
 80053be:	0a9b      	lsrs	r3, r3, #10
 80053c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a5f      	ldr	r2, [pc, #380]	; (800555c <HAL_DMA_IRQHandler+0x1b4>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d04a      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a5d      	ldr	r2, [pc, #372]	; (8005560 <HAL_DMA_IRQHandler+0x1b8>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d045      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a5c      	ldr	r2, [pc, #368]	; (8005564 <HAL_DMA_IRQHandler+0x1bc>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d040      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a5a      	ldr	r2, [pc, #360]	; (8005568 <HAL_DMA_IRQHandler+0x1c0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d03b      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a59      	ldr	r2, [pc, #356]	; (800556c <HAL_DMA_IRQHandler+0x1c4>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d036      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a57      	ldr	r2, [pc, #348]	; (8005570 <HAL_DMA_IRQHandler+0x1c8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d031      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a56      	ldr	r2, [pc, #344]	; (8005574 <HAL_DMA_IRQHandler+0x1cc>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d02c      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a54      	ldr	r2, [pc, #336]	; (8005578 <HAL_DMA_IRQHandler+0x1d0>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d027      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a53      	ldr	r2, [pc, #332]	; (800557c <HAL_DMA_IRQHandler+0x1d4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d022      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a51      	ldr	r2, [pc, #324]	; (8005580 <HAL_DMA_IRQHandler+0x1d8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d01d      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a50      	ldr	r2, [pc, #320]	; (8005584 <HAL_DMA_IRQHandler+0x1dc>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d018      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a4e      	ldr	r2, [pc, #312]	; (8005588 <HAL_DMA_IRQHandler+0x1e0>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d013      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a4d      	ldr	r2, [pc, #308]	; (800558c <HAL_DMA_IRQHandler+0x1e4>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00e      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a4b      	ldr	r2, [pc, #300]	; (8005590 <HAL_DMA_IRQHandler+0x1e8>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d009      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a4a      	ldr	r2, [pc, #296]	; (8005594 <HAL_DMA_IRQHandler+0x1ec>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d004      	beq.n	800547a <HAL_DMA_IRQHandler+0xd2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a48      	ldr	r2, [pc, #288]	; (8005598 <HAL_DMA_IRQHandler+0x1f0>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d101      	bne.n	800547e <HAL_DMA_IRQHandler+0xd6>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <HAL_DMA_IRQHandler+0xd8>
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 842b 	beq.w	8005cdc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800548a:	f003 031f 	and.w	r3, r3, #31
 800548e:	2208      	movs	r2, #8
 8005490:	409a      	lsls	r2, r3
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	4013      	ands	r3, r2
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80a2 	beq.w	80055e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a2e      	ldr	r2, [pc, #184]	; (800555c <HAL_DMA_IRQHandler+0x1b4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d04a      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a2d      	ldr	r2, [pc, #180]	; (8005560 <HAL_DMA_IRQHandler+0x1b8>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d045      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a2b      	ldr	r2, [pc, #172]	; (8005564 <HAL_DMA_IRQHandler+0x1bc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d040      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a2a      	ldr	r2, [pc, #168]	; (8005568 <HAL_DMA_IRQHandler+0x1c0>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d03b      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a28      	ldr	r2, [pc, #160]	; (800556c <HAL_DMA_IRQHandler+0x1c4>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d036      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a27      	ldr	r2, [pc, #156]	; (8005570 <HAL_DMA_IRQHandler+0x1c8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d031      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a25      	ldr	r2, [pc, #148]	; (8005574 <HAL_DMA_IRQHandler+0x1cc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d02c      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a24      	ldr	r2, [pc, #144]	; (8005578 <HAL_DMA_IRQHandler+0x1d0>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d027      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a22      	ldr	r2, [pc, #136]	; (800557c <HAL_DMA_IRQHandler+0x1d4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d022      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a21      	ldr	r2, [pc, #132]	; (8005580 <HAL_DMA_IRQHandler+0x1d8>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d01d      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a1f      	ldr	r2, [pc, #124]	; (8005584 <HAL_DMA_IRQHandler+0x1dc>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d018      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <HAL_DMA_IRQHandler+0x1e0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d013      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a1c      	ldr	r2, [pc, #112]	; (800558c <HAL_DMA_IRQHandler+0x1e4>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00e      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a1b      	ldr	r2, [pc, #108]	; (8005590 <HAL_DMA_IRQHandler+0x1e8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d009      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a19      	ldr	r2, [pc, #100]	; (8005594 <HAL_DMA_IRQHandler+0x1ec>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d004      	beq.n	800553c <HAL_DMA_IRQHandler+0x194>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a18      	ldr	r2, [pc, #96]	; (8005598 <HAL_DMA_IRQHandler+0x1f0>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d12f      	bne.n	800559c <HAL_DMA_IRQHandler+0x1f4>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0304 	and.w	r3, r3, #4
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf14      	ite	ne
 800554a:	2301      	movne	r3, #1
 800554c:	2300      	moveq	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	e02e      	b.n	80055b0 <HAL_DMA_IRQHandler+0x208>
 8005552:	bf00      	nop
 8005554:	24000004 	.word	0x24000004
 8005558:	1b4e81b5 	.word	0x1b4e81b5
 800555c:	40020010 	.word	0x40020010
 8005560:	40020028 	.word	0x40020028
 8005564:	40020040 	.word	0x40020040
 8005568:	40020058 	.word	0x40020058
 800556c:	40020070 	.word	0x40020070
 8005570:	40020088 	.word	0x40020088
 8005574:	400200a0 	.word	0x400200a0
 8005578:	400200b8 	.word	0x400200b8
 800557c:	40020410 	.word	0x40020410
 8005580:	40020428 	.word	0x40020428
 8005584:	40020440 	.word	0x40020440
 8005588:	40020458 	.word	0x40020458
 800558c:	40020470 	.word	0x40020470
 8005590:	40020488 	.word	0x40020488
 8005594:	400204a0 	.word	0x400204a0
 8005598:	400204b8 	.word	0x400204b8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf14      	ite	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	2300      	moveq	r3, #0
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d015      	beq.n	80055e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 0204 	bic.w	r2, r2, #4
 80055c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c8:	f003 031f 	and.w	r3, r3, #31
 80055cc:	2208      	movs	r2, #8
 80055ce:	409a      	lsls	r2, r3
 80055d0:	6a3b      	ldr	r3, [r7, #32]
 80055d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d8:	f043 0201 	orr.w	r2, r3, #1
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	69ba      	ldr	r2, [r7, #24]
 80055ea:	fa22 f303 	lsr.w	r3, r2, r3
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d06e      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a69      	ldr	r2, [pc, #420]	; (80057a0 <HAL_DMA_IRQHandler+0x3f8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d04a      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a67      	ldr	r2, [pc, #412]	; (80057a4 <HAL_DMA_IRQHandler+0x3fc>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d045      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a66      	ldr	r2, [pc, #408]	; (80057a8 <HAL_DMA_IRQHandler+0x400>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d040      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a64      	ldr	r2, [pc, #400]	; (80057ac <HAL_DMA_IRQHandler+0x404>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d03b      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a63      	ldr	r2, [pc, #396]	; (80057b0 <HAL_DMA_IRQHandler+0x408>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d036      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a61      	ldr	r2, [pc, #388]	; (80057b4 <HAL_DMA_IRQHandler+0x40c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d031      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a60      	ldr	r2, [pc, #384]	; (80057b8 <HAL_DMA_IRQHandler+0x410>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d02c      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a5e      	ldr	r2, [pc, #376]	; (80057bc <HAL_DMA_IRQHandler+0x414>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d027      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a5d      	ldr	r2, [pc, #372]	; (80057c0 <HAL_DMA_IRQHandler+0x418>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d022      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a5b      	ldr	r2, [pc, #364]	; (80057c4 <HAL_DMA_IRQHandler+0x41c>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d01d      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a5a      	ldr	r2, [pc, #360]	; (80057c8 <HAL_DMA_IRQHandler+0x420>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d018      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a58      	ldr	r2, [pc, #352]	; (80057cc <HAL_DMA_IRQHandler+0x424>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d013      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a57      	ldr	r2, [pc, #348]	; (80057d0 <HAL_DMA_IRQHandler+0x428>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d00e      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a55      	ldr	r2, [pc, #340]	; (80057d4 <HAL_DMA_IRQHandler+0x42c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d009      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a54      	ldr	r2, [pc, #336]	; (80057d8 <HAL_DMA_IRQHandler+0x430>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d004      	beq.n	8005696 <HAL_DMA_IRQHandler+0x2ee>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a52      	ldr	r2, [pc, #328]	; (80057dc <HAL_DMA_IRQHandler+0x434>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d10a      	bne.n	80056ac <HAL_DMA_IRQHandler+0x304>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	695b      	ldr	r3, [r3, #20]
 800569c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	bf14      	ite	ne
 80056a4:	2301      	movne	r3, #1
 80056a6:	2300      	moveq	r3, #0
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	e003      	b.n	80056b4 <HAL_DMA_IRQHandler+0x30c>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2300      	movs	r3, #0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00d      	beq.n	80056d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056bc:	f003 031f 	and.w	r3, r3, #31
 80056c0:	2201      	movs	r2, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056cc:	f043 0202 	orr.w	r2, r3, #2
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d8:	f003 031f 	and.w	r3, r3, #31
 80056dc:	2204      	movs	r2, #4
 80056de:	409a      	lsls	r2, r3
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	f000 808f 	beq.w	8005808 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <HAL_DMA_IRQHandler+0x3f8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2a      	ldr	r2, [pc, #168]	; (80057a4 <HAL_DMA_IRQHandler+0x3fc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a29      	ldr	r2, [pc, #164]	; (80057a8 <HAL_DMA_IRQHandler+0x400>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a27      	ldr	r2, [pc, #156]	; (80057ac <HAL_DMA_IRQHandler+0x404>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a26      	ldr	r2, [pc, #152]	; (80057b0 <HAL_DMA_IRQHandler+0x408>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a24      	ldr	r2, [pc, #144]	; (80057b4 <HAL_DMA_IRQHandler+0x40c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a23      	ldr	r2, [pc, #140]	; (80057b8 <HAL_DMA_IRQHandler+0x410>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a21      	ldr	r2, [pc, #132]	; (80057bc <HAL_DMA_IRQHandler+0x414>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <HAL_DMA_IRQHandler+0x418>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a1e      	ldr	r2, [pc, #120]	; (80057c4 <HAL_DMA_IRQHandler+0x41c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a1d      	ldr	r2, [pc, #116]	; (80057c8 <HAL_DMA_IRQHandler+0x420>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1b      	ldr	r2, [pc, #108]	; (80057cc <HAL_DMA_IRQHandler+0x424>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1a      	ldr	r2, [pc, #104]	; (80057d0 <HAL_DMA_IRQHandler+0x428>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a18      	ldr	r2, [pc, #96]	; (80057d4 <HAL_DMA_IRQHandler+0x42c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a17      	ldr	r2, [pc, #92]	; (80057d8 <HAL_DMA_IRQHandler+0x430>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_IRQHandler+0x3e2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a15      	ldr	r2, [pc, #84]	; (80057dc <HAL_DMA_IRQHandler+0x434>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d12a      	bne.n	80057e0 <HAL_DMA_IRQHandler+0x438>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0302 	and.w	r3, r3, #2
 8005794:	2b00      	cmp	r3, #0
 8005796:	bf14      	ite	ne
 8005798:	2301      	movne	r3, #1
 800579a:	2300      	moveq	r3, #0
 800579c:	b2db      	uxtb	r3, r3
 800579e:	e023      	b.n	80057e8 <HAL_DMA_IRQHandler+0x440>
 80057a0:	40020010 	.word	0x40020010
 80057a4:	40020028 	.word	0x40020028
 80057a8:	40020040 	.word	0x40020040
 80057ac:	40020058 	.word	0x40020058
 80057b0:	40020070 	.word	0x40020070
 80057b4:	40020088 	.word	0x40020088
 80057b8:	400200a0 	.word	0x400200a0
 80057bc:	400200b8 	.word	0x400200b8
 80057c0:	40020410 	.word	0x40020410
 80057c4:	40020428 	.word	0x40020428
 80057c8:	40020440 	.word	0x40020440
 80057cc:	40020458 	.word	0x40020458
 80057d0:	40020470 	.word	0x40020470
 80057d4:	40020488 	.word	0x40020488
 80057d8:	400204a0 	.word	0x400204a0
 80057dc:	400204b8 	.word	0x400204b8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	2204      	movs	r2, #4
 80057f6:	409a      	lsls	r2, r3
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	f043 0204 	orr.w	r2, r3, #4
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2210      	movs	r2, #16
 8005812:	409a      	lsls	r2, r3
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 80a6 	beq.w	800596a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a85      	ldr	r2, [pc, #532]	; (8005a38 <HAL_DMA_IRQHandler+0x690>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d04a      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a83      	ldr	r2, [pc, #524]	; (8005a3c <HAL_DMA_IRQHandler+0x694>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d045      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a82      	ldr	r2, [pc, #520]	; (8005a40 <HAL_DMA_IRQHandler+0x698>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d040      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a80      	ldr	r2, [pc, #512]	; (8005a44 <HAL_DMA_IRQHandler+0x69c>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d03b      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a7f      	ldr	r2, [pc, #508]	; (8005a48 <HAL_DMA_IRQHandler+0x6a0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d036      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a7d      	ldr	r2, [pc, #500]	; (8005a4c <HAL_DMA_IRQHandler+0x6a4>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d031      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a7c      	ldr	r2, [pc, #496]	; (8005a50 <HAL_DMA_IRQHandler+0x6a8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d02c      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a7a      	ldr	r2, [pc, #488]	; (8005a54 <HAL_DMA_IRQHandler+0x6ac>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d027      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a79      	ldr	r2, [pc, #484]	; (8005a58 <HAL_DMA_IRQHandler+0x6b0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d022      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a77      	ldr	r2, [pc, #476]	; (8005a5c <HAL_DMA_IRQHandler+0x6b4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01d      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a76      	ldr	r2, [pc, #472]	; (8005a60 <HAL_DMA_IRQHandler+0x6b8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d018      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a74      	ldr	r2, [pc, #464]	; (8005a64 <HAL_DMA_IRQHandler+0x6bc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a73      	ldr	r2, [pc, #460]	; (8005a68 <HAL_DMA_IRQHandler+0x6c0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a71      	ldr	r2, [pc, #452]	; (8005a6c <HAL_DMA_IRQHandler+0x6c4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a70      	ldr	r2, [pc, #448]	; (8005a70 <HAL_DMA_IRQHandler+0x6c8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_DMA_IRQHandler+0x516>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a6e      	ldr	r2, [pc, #440]	; (8005a74 <HAL_DMA_IRQHandler+0x6cc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d10a      	bne.n	80058d4 <HAL_DMA_IRQHandler+0x52c>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	e009      	b.n	80058e8 <HAL_DMA_IRQHandler+0x540>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0304 	and.w	r3, r3, #4
 80058de:	2b00      	cmp	r3, #0
 80058e0:	bf14      	ite	ne
 80058e2:	2301      	movne	r3, #1
 80058e4:	2300      	moveq	r3, #0
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d03e      	beq.n	800596a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2210      	movs	r2, #16
 80058f6:	409a      	lsls	r2, r3
 80058f8:	6a3b      	ldr	r3, [r7, #32]
 80058fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d018      	beq.n	800593c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d108      	bne.n	800592a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d024      	beq.n	800596a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	4798      	blx	r3
 8005928:	e01f      	b.n	800596a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01b      	beq.n	800596a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
 800593a:	e016      	b.n	800596a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d107      	bne.n	800595a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0208 	bic.w	r2, r2, #8
 8005958:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2220      	movs	r2, #32
 8005974:	409a      	lsls	r2, r3
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8110 	beq.w	8005ba0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a2c      	ldr	r2, [pc, #176]	; (8005a38 <HAL_DMA_IRQHandler+0x690>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d04a      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a2b      	ldr	r2, [pc, #172]	; (8005a3c <HAL_DMA_IRQHandler+0x694>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d045      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a29      	ldr	r2, [pc, #164]	; (8005a40 <HAL_DMA_IRQHandler+0x698>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d040      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a28      	ldr	r2, [pc, #160]	; (8005a44 <HAL_DMA_IRQHandler+0x69c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d03b      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a26      	ldr	r2, [pc, #152]	; (8005a48 <HAL_DMA_IRQHandler+0x6a0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d036      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a25      	ldr	r2, [pc, #148]	; (8005a4c <HAL_DMA_IRQHandler+0x6a4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d031      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a23      	ldr	r2, [pc, #140]	; (8005a50 <HAL_DMA_IRQHandler+0x6a8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d02c      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <HAL_DMA_IRQHandler+0x6ac>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d027      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <HAL_DMA_IRQHandler+0x6b0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d022      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a1f      	ldr	r2, [pc, #124]	; (8005a5c <HAL_DMA_IRQHandler+0x6b4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d01d      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_DMA_IRQHandler+0x6b8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d018      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4a1c      	ldr	r2, [pc, #112]	; (8005a64 <HAL_DMA_IRQHandler+0x6bc>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d013      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1a      	ldr	r2, [pc, #104]	; (8005a68 <HAL_DMA_IRQHandler+0x6c0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d00e      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a19      	ldr	r2, [pc, #100]	; (8005a6c <HAL_DMA_IRQHandler+0x6c4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d009      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a17      	ldr	r2, [pc, #92]	; (8005a70 <HAL_DMA_IRQHandler+0x6c8>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d004      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x678>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a16      	ldr	r2, [pc, #88]	; (8005a74 <HAL_DMA_IRQHandler+0x6cc>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d12b      	bne.n	8005a78 <HAL_DMA_IRQHandler+0x6d0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0310 	and.w	r3, r3, #16
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf14      	ite	ne
 8005a2e:	2301      	movne	r3, #1
 8005a30:	2300      	moveq	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	e02a      	b.n	8005a8c <HAL_DMA_IRQHandler+0x6e4>
 8005a36:	bf00      	nop
 8005a38:	40020010 	.word	0x40020010
 8005a3c:	40020028 	.word	0x40020028
 8005a40:	40020040 	.word	0x40020040
 8005a44:	40020058 	.word	0x40020058
 8005a48:	40020070 	.word	0x40020070
 8005a4c:	40020088 	.word	0x40020088
 8005a50:	400200a0 	.word	0x400200a0
 8005a54:	400200b8 	.word	0x400200b8
 8005a58:	40020410 	.word	0x40020410
 8005a5c:	40020428 	.word	0x40020428
 8005a60:	40020440 	.word	0x40020440
 8005a64:	40020458 	.word	0x40020458
 8005a68:	40020470 	.word	0x40020470
 8005a6c:	40020488 	.word	0x40020488
 8005a70:	400204a0 	.word	0x400204a0
 8005a74:	400204b8 	.word	0x400204b8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0302 	and.w	r3, r3, #2
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bf14      	ite	ne
 8005a86:	2301      	movne	r3, #1
 8005a88:	2300      	moveq	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8087 	beq.w	8005ba0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a96:	f003 031f 	and.w	r3, r3, #31
 8005a9a:	2220      	movs	r2, #32
 8005a9c:	409a      	lsls	r2, r3
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d139      	bne.n	8005b22 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f022 0216 	bic.w	r2, r2, #22
 8005abc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005acc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d103      	bne.n	8005ade <HAL_DMA_IRQHandler+0x736>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f022 0208 	bic.w	r2, r2, #8
 8005aec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005af2:	f003 031f 	and.w	r3, r3, #31
 8005af6:	223f      	movs	r2, #63	; 0x3f
 8005af8:	409a      	lsls	r2, r3
 8005afa:	6a3b      	ldr	r3, [r7, #32]
 8005afc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 834a 	beq.w	80061ac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
          }
          return;
 8005b20:	e344      	b.n	80061ac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d018      	beq.n	8005b62 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d108      	bne.n	8005b50 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d02c      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	4798      	blx	r3
 8005b4e:	e027      	b.n	8005ba0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d023      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	4798      	blx	r3
 8005b60:	e01e      	b.n	8005ba0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10f      	bne.n	8005b90 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0210 	bic.w	r2, r2, #16
 8005b7e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d003      	beq.n	8005ba0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	f000 8306 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bae:	f003 0301 	and.w	r3, r3, #1
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 8088 	beq.w	8005cc8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a7a      	ldr	r2, [pc, #488]	; (8005db0 <HAL_DMA_IRQHandler+0xa08>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d04a      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a79      	ldr	r2, [pc, #484]	; (8005db4 <HAL_DMA_IRQHandler+0xa0c>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d045      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a77      	ldr	r2, [pc, #476]	; (8005db8 <HAL_DMA_IRQHandler+0xa10>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d040      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a76      	ldr	r2, [pc, #472]	; (8005dbc <HAL_DMA_IRQHandler+0xa14>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d03b      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a74      	ldr	r2, [pc, #464]	; (8005dc0 <HAL_DMA_IRQHandler+0xa18>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d036      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a73      	ldr	r2, [pc, #460]	; (8005dc4 <HAL_DMA_IRQHandler+0xa1c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d031      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a71      	ldr	r2, [pc, #452]	; (8005dc8 <HAL_DMA_IRQHandler+0xa20>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d02c      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a70      	ldr	r2, [pc, #448]	; (8005dcc <HAL_DMA_IRQHandler+0xa24>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d027      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a6e      	ldr	r2, [pc, #440]	; (8005dd0 <HAL_DMA_IRQHandler+0xa28>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d022      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a6d      	ldr	r2, [pc, #436]	; (8005dd4 <HAL_DMA_IRQHandler+0xa2c>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d01d      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a6b      	ldr	r2, [pc, #428]	; (8005dd8 <HAL_DMA_IRQHandler+0xa30>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d018      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a6a      	ldr	r2, [pc, #424]	; (8005ddc <HAL_DMA_IRQHandler+0xa34>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d013      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a68      	ldr	r2, [pc, #416]	; (8005de0 <HAL_DMA_IRQHandler+0xa38>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d00e      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a67      	ldr	r2, [pc, #412]	; (8005de4 <HAL_DMA_IRQHandler+0xa3c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d009      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a65      	ldr	r2, [pc, #404]	; (8005de8 <HAL_DMA_IRQHandler+0xa40>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d004      	beq.n	8005c60 <HAL_DMA_IRQHandler+0x8b8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a64      	ldr	r2, [pc, #400]	; (8005dec <HAL_DMA_IRQHandler+0xa44>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d108      	bne.n	8005c72 <HAL_DMA_IRQHandler+0x8ca>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0201 	bic.w	r2, r2, #1
 8005c6e:	601a      	str	r2, [r3, #0]
 8005c70:	e007      	b.n	8005c82 <HAL_DMA_IRQHandler+0x8da>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0201 	bic.w	r2, r2, #1
 8005c80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	3301      	adds	r3, #1
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d307      	bcc.n	8005c9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1f2      	bne.n	8005c82 <HAL_DMA_IRQHandler+0x8da>
 8005c9c:	e000      	b.n	8005ca0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c9e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d004      	beq.n	8005cb8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2203      	movs	r2, #3
 8005cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005cb6:	e003      	b.n	8005cc0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 8272 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
 8005cda:	e26c      	b.n	80061b6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a43      	ldr	r2, [pc, #268]	; (8005df0 <HAL_DMA_IRQHandler+0xa48>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d022      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x984>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a42      	ldr	r2, [pc, #264]	; (8005df4 <HAL_DMA_IRQHandler+0xa4c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d01d      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x984>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a40      	ldr	r2, [pc, #256]	; (8005df8 <HAL_DMA_IRQHandler+0xa50>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d018      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x984>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a3f      	ldr	r2, [pc, #252]	; (8005dfc <HAL_DMA_IRQHandler+0xa54>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d013      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x984>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a3d      	ldr	r2, [pc, #244]	; (8005e00 <HAL_DMA_IRQHandler+0xa58>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d00e      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x984>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a3c      	ldr	r2, [pc, #240]	; (8005e04 <HAL_DMA_IRQHandler+0xa5c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d009      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x984>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a3a      	ldr	r2, [pc, #232]	; (8005e08 <HAL_DMA_IRQHandler+0xa60>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d004      	beq.n	8005d2c <HAL_DMA_IRQHandler+0x984>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a39      	ldr	r2, [pc, #228]	; (8005e0c <HAL_DMA_IRQHandler+0xa64>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d101      	bne.n	8005d30 <HAL_DMA_IRQHandler+0x988>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e000      	b.n	8005d32 <HAL_DMA_IRQHandler+0x98a>
 8005d30:	2300      	movs	r3, #0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 823f 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d44:	f003 031f 	and.w	r3, r3, #31
 8005d48:	2204      	movs	r2, #4
 8005d4a:	409a      	lsls	r2, r3
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 80cd 	beq.w	8005ef0 <HAL_DMA_IRQHandler+0xb48>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 80c7 	beq.w	8005ef0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d66:	f003 031f 	and.w	r3, r3, #31
 8005d6a:	2204      	movs	r2, #4
 8005d6c:	409a      	lsls	r2, r3
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d049      	beq.n	8005e10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8210 	beq.w	80061b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d94:	6878      	ldr	r0, [r7, #4]
 8005d96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d98:	e20a      	b.n	80061b0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8206 	beq.w	80061b0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005dac:	e200      	b.n	80061b0 <HAL_DMA_IRQHandler+0xe08>
 8005dae:	bf00      	nop
 8005db0:	40020010 	.word	0x40020010
 8005db4:	40020028 	.word	0x40020028
 8005db8:	40020040 	.word	0x40020040
 8005dbc:	40020058 	.word	0x40020058
 8005dc0:	40020070 	.word	0x40020070
 8005dc4:	40020088 	.word	0x40020088
 8005dc8:	400200a0 	.word	0x400200a0
 8005dcc:	400200b8 	.word	0x400200b8
 8005dd0:	40020410 	.word	0x40020410
 8005dd4:	40020428 	.word	0x40020428
 8005dd8:	40020440 	.word	0x40020440
 8005ddc:	40020458 	.word	0x40020458
 8005de0:	40020470 	.word	0x40020470
 8005de4:	40020488 	.word	0x40020488
 8005de8:	400204a0 	.word	0x400204a0
 8005dec:	400204b8 	.word	0x400204b8
 8005df0:	58025408 	.word	0x58025408
 8005df4:	5802541c 	.word	0x5802541c
 8005df8:	58025430 	.word	0x58025430
 8005dfc:	58025444 	.word	0x58025444
 8005e00:	58025458 	.word	0x58025458
 8005e04:	5802546c 	.word	0x5802546c
 8005e08:	58025480 	.word	0x58025480
 8005e0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d160      	bne.n	8005edc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a7f      	ldr	r2, [pc, #508]	; (800601c <HAL_DMA_IRQHandler+0xc74>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d04a      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a7d      	ldr	r2, [pc, #500]	; (8006020 <HAL_DMA_IRQHandler+0xc78>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d045      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a7c      	ldr	r2, [pc, #496]	; (8006024 <HAL_DMA_IRQHandler+0xc7c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d040      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a7a      	ldr	r2, [pc, #488]	; (8006028 <HAL_DMA_IRQHandler+0xc80>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d03b      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a79      	ldr	r2, [pc, #484]	; (800602c <HAL_DMA_IRQHandler+0xc84>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d036      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a77      	ldr	r2, [pc, #476]	; (8006030 <HAL_DMA_IRQHandler+0xc88>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d031      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a76      	ldr	r2, [pc, #472]	; (8006034 <HAL_DMA_IRQHandler+0xc8c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d02c      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a74      	ldr	r2, [pc, #464]	; (8006038 <HAL_DMA_IRQHandler+0xc90>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d027      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a73      	ldr	r2, [pc, #460]	; (800603c <HAL_DMA_IRQHandler+0xc94>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a71      	ldr	r2, [pc, #452]	; (8006040 <HAL_DMA_IRQHandler+0xc98>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a70      	ldr	r2, [pc, #448]	; (8006044 <HAL_DMA_IRQHandler+0xc9c>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a6e      	ldr	r2, [pc, #440]	; (8006048 <HAL_DMA_IRQHandler+0xca0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a6d      	ldr	r2, [pc, #436]	; (800604c <HAL_DMA_IRQHandler+0xca4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a6b      	ldr	r2, [pc, #428]	; (8006050 <HAL_DMA_IRQHandler+0xca8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a6a      	ldr	r2, [pc, #424]	; (8006054 <HAL_DMA_IRQHandler+0xcac>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_IRQHandler+0xb12>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a68      	ldr	r2, [pc, #416]	; (8006058 <HAL_DMA_IRQHandler+0xcb0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d108      	bne.n	8005ecc <HAL_DMA_IRQHandler+0xb24>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f022 0208 	bic.w	r2, r2, #8
 8005ec8:	601a      	str	r2, [r3, #0]
 8005eca:	e007      	b.n	8005edc <HAL_DMA_IRQHandler+0xb34>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f022 0204 	bic.w	r2, r2, #4
 8005eda:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f000 8165 	beq.w	80061b0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eee:	e15f      	b.n	80061b0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	f003 031f 	and.w	r3, r3, #31
 8005ef8:	2202      	movs	r2, #2
 8005efa:	409a      	lsls	r2, r3
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4013      	ands	r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 80c5 	beq.w	8006090 <HAL_DMA_IRQHandler+0xce8>
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80bf 	beq.w	8006090 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f16:	f003 031f 	and.w	r3, r3, #31
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d018      	beq.n	8005f5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 813a 	beq.w	80061b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f48:	e134      	b.n	80061b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8130 	beq.w	80061b4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f5c:	e12a      	b.n	80061b4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 8089 	bne.w	800607c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a2b      	ldr	r2, [pc, #172]	; (800601c <HAL_DMA_IRQHandler+0xc74>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d04a      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a29      	ldr	r2, [pc, #164]	; (8006020 <HAL_DMA_IRQHandler+0xc78>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d045      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a28      	ldr	r2, [pc, #160]	; (8006024 <HAL_DMA_IRQHandler+0xc7c>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d040      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a26      	ldr	r2, [pc, #152]	; (8006028 <HAL_DMA_IRQHandler+0xc80>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d03b      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	4a25      	ldr	r2, [pc, #148]	; (800602c <HAL_DMA_IRQHandler+0xc84>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d036      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a23      	ldr	r2, [pc, #140]	; (8006030 <HAL_DMA_IRQHandler+0xc88>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d031      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a22      	ldr	r2, [pc, #136]	; (8006034 <HAL_DMA_IRQHandler+0xc8c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d02c      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a20      	ldr	r2, [pc, #128]	; (8006038 <HAL_DMA_IRQHandler+0xc90>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d027      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_DMA_IRQHandler+0xc94>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d022      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	; (8006040 <HAL_DMA_IRQHandler+0xc98>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d01d      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <HAL_DMA_IRQHandler+0xc9c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d018      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	; (8006048 <HAL_DMA_IRQHandler+0xca0>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d013      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_DMA_IRQHandler+0xca4>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d00e      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a17      	ldr	r2, [pc, #92]	; (8006050 <HAL_DMA_IRQHandler+0xca8>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d009      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a16      	ldr	r2, [pc, #88]	; (8006054 <HAL_DMA_IRQHandler+0xcac>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d004      	beq.n	800600a <HAL_DMA_IRQHandler+0xc62>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a14      	ldr	r2, [pc, #80]	; (8006058 <HAL_DMA_IRQHandler+0xcb0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d128      	bne.n	800605c <HAL_DMA_IRQHandler+0xcb4>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0214 	bic.w	r2, r2, #20
 8006018:	601a      	str	r2, [r3, #0]
 800601a:	e027      	b.n	800606c <HAL_DMA_IRQHandler+0xcc4>
 800601c:	40020010 	.word	0x40020010
 8006020:	40020028 	.word	0x40020028
 8006024:	40020040 	.word	0x40020040
 8006028:	40020058 	.word	0x40020058
 800602c:	40020070 	.word	0x40020070
 8006030:	40020088 	.word	0x40020088
 8006034:	400200a0 	.word	0x400200a0
 8006038:	400200b8 	.word	0x400200b8
 800603c:	40020410 	.word	0x40020410
 8006040:	40020428 	.word	0x40020428
 8006044:	40020440 	.word	0x40020440
 8006048:	40020458 	.word	0x40020458
 800604c:	40020470 	.word	0x40020470
 8006050:	40020488 	.word	0x40020488
 8006054:	400204a0 	.word	0x400204a0
 8006058:	400204b8 	.word	0x400204b8
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 020a 	bic.w	r2, r2, #10
 800606a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8097 	beq.w	80061b4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800608e:	e091      	b.n	80061b4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006094:	f003 031f 	and.w	r3, r3, #31
 8006098:	2208      	movs	r2, #8
 800609a:	409a      	lsls	r2, r3
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	4013      	ands	r3, r2
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 8088 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe0e>
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f003 0308 	and.w	r3, r3, #8
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 8082 	beq.w	80061b6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a41      	ldr	r2, [pc, #260]	; (80061bc <HAL_DMA_IRQHandler+0xe14>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d04a      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a3f      	ldr	r2, [pc, #252]	; (80061c0 <HAL_DMA_IRQHandler+0xe18>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d045      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a3e      	ldr	r2, [pc, #248]	; (80061c4 <HAL_DMA_IRQHandler+0xe1c>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d040      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a3c      	ldr	r2, [pc, #240]	; (80061c8 <HAL_DMA_IRQHandler+0xe20>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d03b      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a3b      	ldr	r2, [pc, #236]	; (80061cc <HAL_DMA_IRQHandler+0xe24>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d036      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a39      	ldr	r2, [pc, #228]	; (80061d0 <HAL_DMA_IRQHandler+0xe28>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d031      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a38      	ldr	r2, [pc, #224]	; (80061d4 <HAL_DMA_IRQHandler+0xe2c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d02c      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a36      	ldr	r2, [pc, #216]	; (80061d8 <HAL_DMA_IRQHandler+0xe30>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d027      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a35      	ldr	r2, [pc, #212]	; (80061dc <HAL_DMA_IRQHandler+0xe34>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d022      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a33      	ldr	r2, [pc, #204]	; (80061e0 <HAL_DMA_IRQHandler+0xe38>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d01d      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a32      	ldr	r2, [pc, #200]	; (80061e4 <HAL_DMA_IRQHandler+0xe3c>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d018      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a30      	ldr	r2, [pc, #192]	; (80061e8 <HAL_DMA_IRQHandler+0xe40>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2f      	ldr	r2, [pc, #188]	; (80061ec <HAL_DMA_IRQHandler+0xe44>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2d      	ldr	r2, [pc, #180]	; (80061f0 <HAL_DMA_IRQHandler+0xe48>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a2c      	ldr	r2, [pc, #176]	; (80061f4 <HAL_DMA_IRQHandler+0xe4c>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_DMA_IRQHandler+0xdaa>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a2a      	ldr	r2, [pc, #168]	; (80061f8 <HAL_DMA_IRQHandler+0xe50>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d108      	bne.n	8006164 <HAL_DMA_IRQHandler+0xdbc>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681a      	ldr	r2, [r3, #0]
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 021c 	bic.w	r2, r2, #28
 8006160:	601a      	str	r2, [r3, #0]
 8006162:	e007      	b.n	8006174 <HAL_DMA_IRQHandler+0xdcc>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 020e 	bic.w	r2, r2, #14
 8006172:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006178:	f003 031f 	and.w	r3, r3, #31
 800617c:	2201      	movs	r2, #1
 800617e:	409a      	lsls	r2, r3
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
 80061aa:	e004      	b.n	80061b6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80061ac:	bf00      	nop
 80061ae:	e002      	b.n	80061b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b0:	bf00      	nop
 80061b2:	e000      	b.n	80061b6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061b4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80061b6:	3728      	adds	r7, #40	; 0x28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}
 80061bc:	40020010 	.word	0x40020010
 80061c0:	40020028 	.word	0x40020028
 80061c4:	40020040 	.word	0x40020040
 80061c8:	40020058 	.word	0x40020058
 80061cc:	40020070 	.word	0x40020070
 80061d0:	40020088 	.word	0x40020088
 80061d4:	400200a0 	.word	0x400200a0
 80061d8:	400200b8 	.word	0x400200b8
 80061dc:	40020410 	.word	0x40020410
 80061e0:	40020428 	.word	0x40020428
 80061e4:	40020440 	.word	0x40020440
 80061e8:	40020458 	.word	0x40020458
 80061ec:	40020470 	.word	0x40020470
 80061f0:	40020488 	.word	0x40020488
 80061f4:	400204a0 	.word	0x400204a0
 80061f8:	400204b8 	.word	0x400204b8

080061fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a42      	ldr	r2, [pc, #264]	; (8006314 <DMA_CalcBaseAndBitshift+0x118>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d04a      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a41      	ldr	r2, [pc, #260]	; (8006318 <DMA_CalcBaseAndBitshift+0x11c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d045      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a3f      	ldr	r2, [pc, #252]	; (800631c <DMA_CalcBaseAndBitshift+0x120>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d040      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a3e      	ldr	r2, [pc, #248]	; (8006320 <DMA_CalcBaseAndBitshift+0x124>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d03b      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a3c      	ldr	r2, [pc, #240]	; (8006324 <DMA_CalcBaseAndBitshift+0x128>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d036      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a3b      	ldr	r2, [pc, #236]	; (8006328 <DMA_CalcBaseAndBitshift+0x12c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d031      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a39      	ldr	r2, [pc, #228]	; (800632c <DMA_CalcBaseAndBitshift+0x130>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d02c      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a38      	ldr	r2, [pc, #224]	; (8006330 <DMA_CalcBaseAndBitshift+0x134>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d027      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a36      	ldr	r2, [pc, #216]	; (8006334 <DMA_CalcBaseAndBitshift+0x138>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d022      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a35      	ldr	r2, [pc, #212]	; (8006338 <DMA_CalcBaseAndBitshift+0x13c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d01d      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a33      	ldr	r2, [pc, #204]	; (800633c <DMA_CalcBaseAndBitshift+0x140>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d018      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a32      	ldr	r2, [pc, #200]	; (8006340 <DMA_CalcBaseAndBitshift+0x144>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d013      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a30      	ldr	r2, [pc, #192]	; (8006344 <DMA_CalcBaseAndBitshift+0x148>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00e      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a2f      	ldr	r2, [pc, #188]	; (8006348 <DMA_CalcBaseAndBitshift+0x14c>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d009      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2d      	ldr	r2, [pc, #180]	; (800634c <DMA_CalcBaseAndBitshift+0x150>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <DMA_CalcBaseAndBitshift+0xa8>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <DMA_CalcBaseAndBitshift+0x154>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <DMA_CalcBaseAndBitshift+0xac>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <DMA_CalcBaseAndBitshift+0xae>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d024      	beq.n	80062f8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	3b10      	subs	r3, #16
 80062b6:	4a27      	ldr	r2, [pc, #156]	; (8006354 <DMA_CalcBaseAndBitshift+0x158>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	091b      	lsrs	r3, r3, #4
 80062be:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	4a24      	ldr	r2, [pc, #144]	; (8006358 <DMA_CalcBaseAndBitshift+0x15c>)
 80062c8:	5cd3      	ldrb	r3, [r2, r3]
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b03      	cmp	r3, #3
 80062d4:	d908      	bls.n	80062e8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	4b1f      	ldr	r3, [pc, #124]	; (800635c <DMA_CalcBaseAndBitshift+0x160>)
 80062de:	4013      	ands	r3, r2
 80062e0:	1d1a      	adds	r2, r3, #4
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	659a      	str	r2, [r3, #88]	; 0x58
 80062e6:	e00d      	b.n	8006304 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	4b1b      	ldr	r3, [pc, #108]	; (800635c <DMA_CalcBaseAndBitshift+0x160>)
 80062f0:	4013      	ands	r3, r2
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	6593      	str	r3, [r2, #88]	; 0x58
 80062f6:	e005      	b.n	8006304 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	40020010 	.word	0x40020010
 8006318:	40020028 	.word	0x40020028
 800631c:	40020040 	.word	0x40020040
 8006320:	40020058 	.word	0x40020058
 8006324:	40020070 	.word	0x40020070
 8006328:	40020088 	.word	0x40020088
 800632c:	400200a0 	.word	0x400200a0
 8006330:	400200b8 	.word	0x400200b8
 8006334:	40020410 	.word	0x40020410
 8006338:	40020428 	.word	0x40020428
 800633c:	40020440 	.word	0x40020440
 8006340:	40020458 	.word	0x40020458
 8006344:	40020470 	.word	0x40020470
 8006348:	40020488 	.word	0x40020488
 800634c:	400204a0 	.word	0x400204a0
 8006350:	400204b8 	.word	0x400204b8
 8006354:	aaaaaaab 	.word	0xaaaaaaab
 8006358:	0800eb94 	.word	0x0800eb94
 800635c:	fffffc00 	.word	0xfffffc00

08006360 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006368:	2300      	movs	r3, #0
 800636a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	699b      	ldr	r3, [r3, #24]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d120      	bne.n	80063b6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	2b03      	cmp	r3, #3
 800637a:	d858      	bhi.n	800642e <DMA_CheckFifoParam+0xce>
 800637c:	a201      	add	r2, pc, #4	; (adr r2, 8006384 <DMA_CheckFifoParam+0x24>)
 800637e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006382:	bf00      	nop
 8006384:	08006395 	.word	0x08006395
 8006388:	080063a7 	.word	0x080063a7
 800638c:	08006395 	.word	0x08006395
 8006390:	0800642f 	.word	0x0800642f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d048      	beq.n	8006432 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063a4:	e045      	b.n	8006432 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063ae:	d142      	bne.n	8006436 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063b4:	e03f      	b.n	8006436 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063be:	d123      	bne.n	8006408 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d838      	bhi.n	800643a <DMA_CheckFifoParam+0xda>
 80063c8:	a201      	add	r2, pc, #4	; (adr r2, 80063d0 <DMA_CheckFifoParam+0x70>)
 80063ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ce:	bf00      	nop
 80063d0:	080063e1 	.word	0x080063e1
 80063d4:	080063e7 	.word	0x080063e7
 80063d8:	080063e1 	.word	0x080063e1
 80063dc:	080063f9 	.word	0x080063f9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
        break;
 80063e4:	e030      	b.n	8006448 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d025      	beq.n	800643e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80063f6:	e022      	b.n	800643e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006400:	d11f      	bne.n	8006442 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006406:	e01c      	b.n	8006442 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	2b02      	cmp	r3, #2
 800640e:	d902      	bls.n	8006416 <DMA_CheckFifoParam+0xb6>
 8006410:	2b03      	cmp	r3, #3
 8006412:	d003      	beq.n	800641c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006414:	e018      	b.n	8006448 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
        break;
 800641a:	e015      	b.n	8006448 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00e      	beq.n	8006446 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	73fb      	strb	r3, [r7, #15]
    break;
 800642c:	e00b      	b.n	8006446 <DMA_CheckFifoParam+0xe6>
        break;
 800642e:	bf00      	nop
 8006430:	e00a      	b.n	8006448 <DMA_CheckFifoParam+0xe8>
        break;
 8006432:	bf00      	nop
 8006434:	e008      	b.n	8006448 <DMA_CheckFifoParam+0xe8>
        break;
 8006436:	bf00      	nop
 8006438:	e006      	b.n	8006448 <DMA_CheckFifoParam+0xe8>
        break;
 800643a:	bf00      	nop
 800643c:	e004      	b.n	8006448 <DMA_CheckFifoParam+0xe8>
        break;
 800643e:	bf00      	nop
 8006440:	e002      	b.n	8006448 <DMA_CheckFifoParam+0xe8>
        break;
 8006442:	bf00      	nop
 8006444:	e000      	b.n	8006448 <DMA_CheckFifoParam+0xe8>
    break;
 8006446:	bf00      	nop
    }
  }

  return status;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3714      	adds	r7, #20
 800644e:	46bd      	mov	sp, r7
 8006450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006454:	4770      	bx	lr
 8006456:	bf00      	nop

08006458 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006458:	b480      	push	{r7}
 800645a:	b085      	sub	sp, #20
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a38      	ldr	r2, [pc, #224]	; (800654c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a36      	ldr	r2, [pc, #216]	; (8006550 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a35      	ldr	r2, [pc, #212]	; (8006554 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a33      	ldr	r2, [pc, #204]	; (8006558 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a32      	ldr	r2, [pc, #200]	; (800655c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a30      	ldr	r2, [pc, #192]	; (8006560 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a2f      	ldr	r2, [pc, #188]	; (8006564 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a2d      	ldr	r2, [pc, #180]	; (8006568 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d101      	bne.n	80064ba <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80064b6:	2301      	movs	r3, #1
 80064b8:	e000      	b.n	80064bc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80064ba:	2300      	movs	r3, #0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d01a      	beq.n	80064f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	3b08      	subs	r3, #8
 80064c8:	4a28      	ldr	r2, [pc, #160]	; (800656c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	091b      	lsrs	r3, r3, #4
 80064d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4b26      	ldr	r3, [pc, #152]	; (8006570 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	461a      	mov	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a24      	ldr	r2, [pc, #144]	; (8006574 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80064e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 031f 	and.w	r3, r3, #31
 80064ec:	2201      	movs	r2, #1
 80064ee:	409a      	lsls	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80064f4:	e024      	b.n	8006540 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	3b10      	subs	r3, #16
 80064fe:	4a1e      	ldr	r2, [pc, #120]	; (8006578 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006500:	fba2 2303 	umull	r2, r3, r2, r3
 8006504:	091b      	lsrs	r3, r3, #4
 8006506:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	4a1c      	ldr	r2, [pc, #112]	; (800657c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d806      	bhi.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	4a1b      	ldr	r2, [pc, #108]	; (8006580 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d902      	bls.n	800651e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3308      	adds	r3, #8
 800651c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4b18      	ldr	r3, [pc, #96]	; (8006584 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	461a      	mov	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a16      	ldr	r2, [pc, #88]	; (8006588 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006530:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	2201      	movs	r2, #1
 800653a:	409a      	lsls	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006540:	bf00      	nop
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr
 800654c:	58025408 	.word	0x58025408
 8006550:	5802541c 	.word	0x5802541c
 8006554:	58025430 	.word	0x58025430
 8006558:	58025444 	.word	0x58025444
 800655c:	58025458 	.word	0x58025458
 8006560:	5802546c 	.word	0x5802546c
 8006564:	58025480 	.word	0x58025480
 8006568:	58025494 	.word	0x58025494
 800656c:	cccccccd 	.word	0xcccccccd
 8006570:	16009600 	.word	0x16009600
 8006574:	58025880 	.word	0x58025880
 8006578:	aaaaaaab 	.word	0xaaaaaaab
 800657c:	400204b8 	.word	0x400204b8
 8006580:	4002040f 	.word	0x4002040f
 8006584:	10008200 	.word	0x10008200
 8006588:	40020880 	.word	0x40020880

0800658c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	b2db      	uxtb	r3, r3
 800659a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d04a      	beq.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	d847      	bhi.n	8006638 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a25      	ldr	r2, [pc, #148]	; (8006644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d022      	beq.n	80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a24      	ldr	r2, [pc, #144]	; (8006648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d01d      	beq.n	80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d018      	beq.n	80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a21      	ldr	r2, [pc, #132]	; (8006650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d013      	beq.n	80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1f      	ldr	r2, [pc, #124]	; (8006654 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00e      	beq.n	80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d009      	beq.n	80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a1c      	ldr	r2, [pc, #112]	; (800665c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d004      	beq.n	80065f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a1b      	ldr	r2, [pc, #108]	; (8006660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d101      	bne.n	80065fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e000      	b.n	80065fe <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80065fc:	2300      	movs	r3, #0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4b17      	ldr	r3, [pc, #92]	; (8006664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006606:	4413      	add	r3, r2
 8006608:	009b      	lsls	r3, r3, #2
 800660a:	461a      	mov	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4a15      	ldr	r2, [pc, #84]	; (8006668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006614:	671a      	str	r2, [r3, #112]	; 0x70
 8006616:	e009      	b.n	800662c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4b14      	ldr	r3, [pc, #80]	; (800666c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	461a      	mov	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a11      	ldr	r2, [pc, #68]	; (8006670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800662a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	3b01      	subs	r3, #1
 8006630:	2201      	movs	r2, #1
 8006632:	409a      	lsls	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006638:	bf00      	nop
 800663a:	3714      	adds	r7, #20
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	58025408 	.word	0x58025408
 8006648:	5802541c 	.word	0x5802541c
 800664c:	58025430 	.word	0x58025430
 8006650:	58025444 	.word	0x58025444
 8006654:	58025458 	.word	0x58025458
 8006658:	5802546c 	.word	0x5802546c
 800665c:	58025480 	.word	0x58025480
 8006660:	58025494 	.word	0x58025494
 8006664:	1600963f 	.word	0x1600963f
 8006668:	58025940 	.word	0x58025940
 800666c:	1000823f 	.word	0x1000823f
 8006670:	40020940 	.word	0x40020940

08006674 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e0cf      	b.n	8006826 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668c:	2b00      	cmp	r3, #0
 800668e:	d106      	bne.n	800669e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2223      	movs	r2, #35	; 0x23
 8006694:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fd f89f 	bl	80037dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800669e:	4b64      	ldr	r3, [pc, #400]	; (8006830 <HAL_ETH_Init+0x1bc>)
 80066a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066a4:	4a62      	ldr	r2, [pc, #392]	; (8006830 <HAL_ETH_Init+0x1bc>)
 80066a6:	f043 0302 	orr.w	r3, r3, #2
 80066aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80066ae:	4b60      	ldr	r3, [pc, #384]	; (8006830 <HAL_ETH_Init+0x1bc>)
 80066b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066b4:	f003 0302 	and.w	r3, r3, #2
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7a1b      	ldrb	r3, [r3, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d103      	bne.n	80066cc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80066c4:	2000      	movs	r0, #0
 80066c6:	f7fd fc8b 	bl	8003fe0 <HAL_SYSCFG_ETHInterfaceSelect>
 80066ca:	e003      	b.n	80066d4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80066cc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80066d0:	f7fd fc86 	bl	8003fe0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80066d4:	4b57      	ldr	r3, [pc, #348]	; (8006834 <HAL_ETH_Init+0x1c0>)
 80066d6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	6812      	ldr	r2, [r2, #0]
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80066f0:	f7fd fc3a 	bl	8003f68 <HAL_GetTick>
 80066f4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80066f6:	e011      	b.n	800671c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80066f8:	f7fd fc36 	bl	8003f68 <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006706:	d909      	bls.n	800671c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2204      	movs	r2, #4
 800670c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	22e0      	movs	r2, #224	; 0xe0
 8006714:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e084      	b.n	8006826 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d1e4      	bne.n	80066f8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f886 	bl	8006840 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006734:	f001 fefc 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 8006738:	4603      	mov	r3, r0
 800673a:	4a3f      	ldr	r2, [pc, #252]	; (8006838 <HAL_ETH_Init+0x1c4>)
 800673c:	fba2 2303 	umull	r2, r3, r2, r3
 8006740:	0c9a      	lsrs	r2, r3, #18
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3a01      	subs	r2, #1
 8006748:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fa71 	bl	8006c34 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800675a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800675e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006762:	687a      	ldr	r2, [r7, #4]
 8006764:	6812      	ldr	r2, [r2, #0]
 8006766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800676a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800676e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	695b      	ldr	r3, [r3, #20]
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2201      	movs	r2, #1
 8006782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	22e0      	movs	r2, #224	; 0xe0
 800678a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e049      	b.n	8006826 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800679a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800679e:	4b27      	ldr	r3, [pc, #156]	; (800683c <HAL_ETH_Init+0x1c8>)
 80067a0:	4013      	ands	r3, r2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	6952      	ldr	r2, [r2, #20]
 80067a6:	0051      	lsls	r1, r2, #1
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6812      	ldr	r2, [r2, #0]
 80067ac:	430b      	orrs	r3, r1
 80067ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067b2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fad9 	bl	8006d6e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 fb1f 	bl	8006e00 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	3305      	adds	r3, #5
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	021a      	lsls	r2, r3, #8
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	3304      	adds	r3, #4
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	4619      	mov	r1, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	3303      	adds	r3, #3
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	061a      	lsls	r2, r3, #24
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	3302      	adds	r3, #2
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	041b      	lsls	r3, r3, #16
 80067f4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	3301      	adds	r3, #1
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006800:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800680e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006810:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2210      	movs	r2, #16
 8006820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3710      	adds	r7, #16
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
 800682e:	bf00      	nop
 8006830:	58024400 	.word	0x58024400
 8006834:	58000400 	.word	0x58000400
 8006838:	431bde83 	.word	0x431bde83
 800683c:	ffff8001 	.word	0xffff8001

08006840 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006850:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006858:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800685a:	f001 fe69 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 800685e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	4a1e      	ldr	r2, [pc, #120]	; (80068dc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d908      	bls.n	800687a <HAL_ETH_SetMDIOClockRange+0x3a>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	4a1d      	ldr	r2, [pc, #116]	; (80068e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d804      	bhi.n	800687a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	e027      	b.n	80068ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	4a18      	ldr	r2, [pc, #96]	; (80068e0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d908      	bls.n	8006894 <HAL_ETH_SetMDIOClockRange+0x54>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	4a17      	ldr	r2, [pc, #92]	; (80068e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d204      	bcs.n	8006894 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e01a      	b.n	80068ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4a13      	ldr	r2, [pc, #76]	; (80068e4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d303      	bcc.n	80068a4 <HAL_ETH_SetMDIOClockRange+0x64>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4a12      	ldr	r2, [pc, #72]	; (80068e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d911      	bls.n	80068c8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4a10      	ldr	r2, [pc, #64]	; (80068e8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d908      	bls.n	80068be <HAL_ETH_SetMDIOClockRange+0x7e>
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	4a0f      	ldr	r2, [pc, #60]	; (80068ec <HAL_ETH_SetMDIOClockRange+0xac>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d804      	bhi.n	80068be <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068ba:	60fb      	str	r3, [r7, #12]
 80068bc:	e005      	b.n	80068ca <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e000      	b.n	80068ca <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80068c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80068d4:	bf00      	nop
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	01312cff 	.word	0x01312cff
 80068e0:	02160ebf 	.word	0x02160ebf
 80068e4:	03938700 	.word	0x03938700
 80068e8:	05f5e0ff 	.word	0x05f5e0ff
 80068ec:	08f0d17f 	.word	0x08f0d17f

080068f0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006902:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	791b      	ldrb	r3, [r3, #4]
 8006908:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800690a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	7b1b      	ldrb	r3, [r3, #12]
 8006910:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006912:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	7b5b      	ldrb	r3, [r3, #13]
 8006918:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800691a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	7b9b      	ldrb	r3, [r3, #14]
 8006920:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006922:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	7bdb      	ldrb	r3, [r3, #15]
 8006928:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800692a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800692c:	683a      	ldr	r2, [r7, #0]
 800692e:	7c12      	ldrb	r2, [r2, #16]
 8006930:	2a00      	cmp	r2, #0
 8006932:	d102      	bne.n	800693a <ETH_SetMACConfig+0x4a>
 8006934:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006938:	e000      	b.n	800693c <ETH_SetMACConfig+0x4c>
 800693a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800693c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	7c52      	ldrb	r2, [r2, #17]
 8006942:	2a00      	cmp	r2, #0
 8006944:	d102      	bne.n	800694c <ETH_SetMACConfig+0x5c>
 8006946:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800694a:	e000      	b.n	800694e <ETH_SetMACConfig+0x5e>
 800694c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800694e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	7c9b      	ldrb	r3, [r3, #18]
 8006954:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006956:	431a      	orrs	r2, r3
               macconf->Speed |
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800695c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006962:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	7f1b      	ldrb	r3, [r3, #28]
 8006968:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800696a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	7f5b      	ldrb	r3, [r3, #29]
 8006970:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006972:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006974:	683a      	ldr	r2, [r7, #0]
 8006976:	7f92      	ldrb	r2, [r2, #30]
 8006978:	2a00      	cmp	r2, #0
 800697a:	d102      	bne.n	8006982 <ETH_SetMACConfig+0x92>
 800697c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006980:	e000      	b.n	8006984 <ETH_SetMACConfig+0x94>
 8006982:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006984:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	7fdb      	ldrb	r3, [r3, #31]
 800698a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800698c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006994:	2a00      	cmp	r2, #0
 8006996:	d102      	bne.n	800699e <ETH_SetMACConfig+0xae>
 8006998:	f44f 7280 	mov.w	r2, #256	; 0x100
 800699c:	e000      	b.n	80069a0 <ETH_SetMACConfig+0xb0>
 800699e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80069a0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80069a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069ae:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80069b0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80069b6:	4313      	orrs	r3, r2
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	4b56      	ldr	r3, [pc, #344]	; (8006b1c <ETH_SetMACConfig+0x22c>)
 80069c2:	4013      	ands	r3, r2
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	6812      	ldr	r2, [r2, #0]
 80069c8:	68f9      	ldr	r1, [r7, #12]
 80069ca:	430b      	orrs	r3, r1
 80069cc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069da:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80069dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80069e4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80069e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80069ee:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80069f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80069f2:	683a      	ldr	r2, [r7, #0]
 80069f4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80069f8:	2a00      	cmp	r2, #0
 80069fa:	d102      	bne.n	8006a02 <ETH_SetMACConfig+0x112>
 80069fc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a00:	e000      	b.n	8006a04 <ETH_SetMACConfig+0x114>
 8006a02:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006a04:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	4b42      	ldr	r3, [pc, #264]	; (8006b20 <ETH_SetMACConfig+0x230>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	6812      	ldr	r2, [r2, #0]
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	430b      	orrs	r3, r1
 8006a20:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a28:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68da      	ldr	r2, [r3, #12]
 8006a38:	4b3a      	ldr	r3, [pc, #232]	; (8006b24 <ETH_SetMACConfig+0x234>)
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	6812      	ldr	r2, [r2, #0]
 8006a40:	68f9      	ldr	r1, [r7, #12]
 8006a42:	430b      	orrs	r3, r1
 8006a44:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006a4c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006a52:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006a5a:	2a00      	cmp	r2, #0
 8006a5c:	d101      	bne.n	8006a62 <ETH_SetMACConfig+0x172>
 8006a5e:	2280      	movs	r2, #128	; 0x80
 8006a60:	e000      	b.n	8006a64 <ETH_SetMACConfig+0x174>
 8006a62:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006a64:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006a76:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6812      	ldr	r2, [r2, #0]
 8006a80:	68f9      	ldr	r1, [r7, #12]
 8006a82:	430b      	orrs	r3, r1
 8006a84:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006a8c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006a94:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006a96:	4313      	orrs	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aa2:	f023 0103 	bic.w	r1, r3, #3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68fa      	ldr	r2, [r7, #12]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006aba:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	430a      	orrs	r2, r1
 8006ac8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006ad0:	683a      	ldr	r2, [r7, #0]
 8006ad2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006ad6:	2a00      	cmp	r2, #0
 8006ad8:	d101      	bne.n	8006ade <ETH_SetMACConfig+0x1ee>
 8006ada:	2240      	movs	r2, #64	; 0x40
 8006adc:	e000      	b.n	8006ae0 <ETH_SetMACConfig+0x1f0>
 8006ade:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006ae0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006ae8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006aea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006af2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006af4:	4313      	orrs	r3, r2
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006b00:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	430a      	orrs	r2, r1
 8006b0c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	00048083 	.word	0x00048083
 8006b20:	c0f88000 	.word	0xc0f88000
 8006b24:	fffffef0 	.word	0xfffffef0

08006b28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	4b38      	ldr	r3, [pc, #224]	; (8006c20 <ETH_SetDMAConfig+0xf8>)
 8006b3e:	4013      	ands	r3, r2
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	6811      	ldr	r1, [r2, #0]
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	6812      	ldr	r2, [r2, #0]
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b4e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	791b      	ldrb	r3, [r3, #4]
 8006b54:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006b5a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	7b1b      	ldrb	r3, [r3, #12]
 8006b60:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	4b2c      	ldr	r3, [pc, #176]	; (8006c24 <ETH_SetDMAConfig+0xfc>)
 8006b72:	4013      	ands	r3, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	68f9      	ldr	r1, [r7, #12]
 8006b7a:	430b      	orrs	r3, r1
 8006b7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006b80:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	7b5b      	ldrb	r3, [r3, #13]
 8006b86:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006b98:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006b9c:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <ETH_SetDMAConfig+0x100>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	6812      	ldr	r2, [r2, #0]
 8006ba4:	68f9      	ldr	r1, [r7, #12]
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006bac:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	7d1b      	ldrb	r3, [r3, #20]
 8006bb8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006bba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	7f5b      	ldrb	r3, [r3, #29]
 8006bc0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bce:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006bd2:	4b16      	ldr	r3, [pc, #88]	; (8006c2c <ETH_SetDMAConfig+0x104>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	68f9      	ldr	r1, [r7, #12]
 8006bdc:	430b      	orrs	r3, r1
 8006bde:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006be2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	7f1b      	ldrb	r3, [r3, #28]
 8006bea:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bfc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <ETH_SetDMAConfig+0x108>)
 8006c02:	4013      	ands	r3, r2
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	6812      	ldr	r2, [r2, #0]
 8006c08:	68f9      	ldr	r1, [r7, #12]
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c10:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	ffff87fd 	.word	0xffff87fd
 8006c24:	ffff2ffe 	.word	0xffff2ffe
 8006c28:	fffec000 	.word	0xfffec000
 8006c2c:	ffc0efef 	.word	0xffc0efef
 8006c30:	7fc0ffff 	.word	0x7fc0ffff

08006c34 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b0a4      	sub	sp, #144	; 0x90
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006c42:	2300      	movs	r3, #0
 8006c44:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006c52:	2301      	movs	r3, #1
 8006c54:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006c64:	2300      	movs	r3, #0
 8006c66:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006c70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c74:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006c76:	2300      	movs	r3, #0
 8006c78:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006c80:	2300      	movs	r3, #0
 8006c82:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006c86:	2300      	movs	r3, #0
 8006c88:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006c8c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006c90:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006c92:	2300      	movs	r3, #0
 8006c94:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006ccc:	2320      	movs	r3, #32
 8006cce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006cde:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006ce4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ce8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006cea:	2300      	movs	r3, #0
 8006cec:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006cf0:	2302      	movs	r3, #2
 8006cf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006d02:	2300      	movs	r3, #0
 8006d04:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006d18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f7ff fde6 	bl	80068f0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006d24:	2301      	movs	r3, #1
 8006d26:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006d30:	2300      	movs	r3, #0
 8006d32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006d36:	2300      	movs	r3, #0
 8006d38:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006d3e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d42:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006d44:	2300      	movs	r3, #0
 8006d46:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006d48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d4c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006d54:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006d58:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006d5a:	f107 0308 	add.w	r3, r7, #8
 8006d5e:	4619      	mov	r1, r3
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7ff fee1 	bl	8006b28 <ETH_SetDMAConfig>
}
 8006d66:	bf00      	nop
 8006d68:	3790      	adds	r7, #144	; 0x90
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	60fb      	str	r3, [r7, #12]
 8006d7a:	e01d      	b.n	8006db8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	68d9      	ldr	r1, [r3, #12]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4613      	mov	r3, r2
 8006d84:	005b      	lsls	r3, r3, #1
 8006d86:	4413      	add	r3, r2
 8006d88:	00db      	lsls	r3, r3, #3
 8006d8a:	440b      	add	r3, r1
 8006d8c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2200      	movs	r2, #0
 8006d92:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	2200      	movs	r2, #0
 8006d98:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2200      	movs	r2, #0
 8006da4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006da6:	68b9      	ldr	r1, [r7, #8]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	3206      	adds	r2, #6
 8006dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d9de      	bls.n	8006d7c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dcc:	461a      	mov	r2, r3
 8006dce:	2303      	movs	r3, #3
 8006dd0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006de0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006df4:	bf00      	nop
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	e023      	b.n	8006e56 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6919      	ldr	r1, [r3, #16]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4613      	mov	r3, r2
 8006e16:	005b      	lsls	r3, r3, #1
 8006e18:	4413      	add	r3, r2
 8006e1a:	00db      	lsls	r3, r3, #3
 8006e1c:	440b      	add	r3, r1
 8006e1e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	2200      	movs	r2, #0
 8006e24:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2200      	movs	r2, #0
 8006e36:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006e44:	68b9      	ldr	r1, [r7, #8]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68fa      	ldr	r2, [r7, #12]
 8006e4a:	3212      	adds	r2, #18
 8006e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	3301      	adds	r3, #1
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b03      	cmp	r3, #3
 8006e5a:	d9d8      	bls.n	8006e0e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e82:	461a      	mov	r2, r3
 8006e84:	2303      	movs	r3, #3
 8006e86:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691a      	ldr	r2, [r3, #16]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e96:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006eaa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
	...

08006ebc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b089      	sub	sp, #36	; 0x24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006eca:	4b89      	ldr	r3, [pc, #548]	; (80070f0 <HAL_GPIO_Init+0x234>)
 8006ecc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006ece:	e194      	b.n	80071fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	2101      	movs	r1, #1
 8006ed6:	69fb      	ldr	r3, [r7, #28]
 8006ed8:	fa01 f303 	lsl.w	r3, r1, r3
 8006edc:	4013      	ands	r3, r2
 8006ede:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f000 8186 	beq.w	80071f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	f003 0303 	and.w	r3, r3, #3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d005      	beq.n	8006f00 <HAL_GPIO_Init+0x44>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f003 0303 	and.w	r3, r3, #3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d130      	bne.n	8006f62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	005b      	lsls	r3, r3, #1
 8006f0a:	2203      	movs	r2, #3
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	43db      	mvns	r3, r3
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	4013      	ands	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	69ba      	ldr	r2, [r7, #24]
 8006f2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f36:	2201      	movs	r2, #1
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3e:	43db      	mvns	r3, r3
 8006f40:	69ba      	ldr	r2, [r7, #24]
 8006f42:	4013      	ands	r3, r2
 8006f44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	091b      	lsrs	r3, r3, #4
 8006f4c:	f003 0201 	and.w	r2, r3, #1
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	fa02 f303 	lsl.w	r3, r2, r3
 8006f56:	69ba      	ldr	r2, [r7, #24]
 8006f58:	4313      	orrs	r3, r2
 8006f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f003 0303 	and.w	r3, r3, #3
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	d017      	beq.n	8006f9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	005b      	lsls	r3, r3, #1
 8006f78:	2203      	movs	r2, #3
 8006f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f7e:	43db      	mvns	r3, r3
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	4013      	ands	r3, r2
 8006f84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	69fb      	ldr	r3, [r7, #28]
 8006f8c:	005b      	lsls	r3, r3, #1
 8006f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f92:	69ba      	ldr	r2, [r7, #24]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	f003 0303 	and.w	r3, r3, #3
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d123      	bne.n	8006ff2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	08da      	lsrs	r2, r3, #3
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3208      	adds	r2, #8
 8006fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006fb8:	69fb      	ldr	r3, [r7, #28]
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	220f      	movs	r2, #15
 8006fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc6:	43db      	mvns	r3, r3
 8006fc8:	69ba      	ldr	r2, [r7, #24]
 8006fca:	4013      	ands	r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	691a      	ldr	r2, [r3, #16]
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	f003 0307 	and.w	r3, r3, #7
 8006fd8:	009b      	lsls	r3, r3, #2
 8006fda:	fa02 f303 	lsl.w	r3, r2, r3
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006fe4:	69fb      	ldr	r3, [r7, #28]
 8006fe6:	08da      	lsrs	r2, r3, #3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	3208      	adds	r2, #8
 8006fec:	69b9      	ldr	r1, [r7, #24]
 8006fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	005b      	lsls	r3, r3, #1
 8006ffc:	2203      	movs	r2, #3
 8006ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8007002:	43db      	mvns	r3, r3
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	4013      	ands	r3, r2
 8007008:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f003 0203 	and.w	r2, r3, #3
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	fa02 f303 	lsl.w	r3, r2, r3
 800701a:	69ba      	ldr	r2, [r7, #24]
 800701c:	4313      	orrs	r3, r2
 800701e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800702e:	2b00      	cmp	r3, #0
 8007030:	f000 80e0 	beq.w	80071f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007034:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <HAL_GPIO_Init+0x238>)
 8007036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800703a:	4a2e      	ldr	r2, [pc, #184]	; (80070f4 <HAL_GPIO_Init+0x238>)
 800703c:	f043 0302 	orr.w	r3, r3, #2
 8007040:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007044:	4b2b      	ldr	r3, [pc, #172]	; (80070f4 <HAL_GPIO_Init+0x238>)
 8007046:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	60fb      	str	r3, [r7, #12]
 8007050:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007052:	4a29      	ldr	r2, [pc, #164]	; (80070f8 <HAL_GPIO_Init+0x23c>)
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	089b      	lsrs	r3, r3, #2
 8007058:	3302      	adds	r3, #2
 800705a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800705e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	009b      	lsls	r3, r3, #2
 8007068:	220f      	movs	r2, #15
 800706a:	fa02 f303 	lsl.w	r3, r2, r3
 800706e:	43db      	mvns	r3, r3
 8007070:	69ba      	ldr	r2, [r7, #24]
 8007072:	4013      	ands	r3, r2
 8007074:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a20      	ldr	r2, [pc, #128]	; (80070fc <HAL_GPIO_Init+0x240>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d052      	beq.n	8007124 <HAL_GPIO_Init+0x268>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a1f      	ldr	r2, [pc, #124]	; (8007100 <HAL_GPIO_Init+0x244>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d031      	beq.n	80070ea <HAL_GPIO_Init+0x22e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <HAL_GPIO_Init+0x248>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d02b      	beq.n	80070e6 <HAL_GPIO_Init+0x22a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1d      	ldr	r2, [pc, #116]	; (8007108 <HAL_GPIO_Init+0x24c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d025      	beq.n	80070e2 <HAL_GPIO_Init+0x226>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a1c      	ldr	r2, [pc, #112]	; (800710c <HAL_GPIO_Init+0x250>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01f      	beq.n	80070de <HAL_GPIO_Init+0x222>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a1b      	ldr	r2, [pc, #108]	; (8007110 <HAL_GPIO_Init+0x254>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d019      	beq.n	80070da <HAL_GPIO_Init+0x21e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <HAL_GPIO_Init+0x258>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d013      	beq.n	80070d6 <HAL_GPIO_Init+0x21a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a19      	ldr	r2, [pc, #100]	; (8007118 <HAL_GPIO_Init+0x25c>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00d      	beq.n	80070d2 <HAL_GPIO_Init+0x216>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a18      	ldr	r2, [pc, #96]	; (800711c <HAL_GPIO_Init+0x260>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d007      	beq.n	80070ce <HAL_GPIO_Init+0x212>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a17      	ldr	r2, [pc, #92]	; (8007120 <HAL_GPIO_Init+0x264>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d101      	bne.n	80070ca <HAL_GPIO_Init+0x20e>
 80070c6:	2309      	movs	r3, #9
 80070c8:	e02d      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070ca:	230a      	movs	r3, #10
 80070cc:	e02b      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070ce:	2308      	movs	r3, #8
 80070d0:	e029      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070d2:	2307      	movs	r3, #7
 80070d4:	e027      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070d6:	2306      	movs	r3, #6
 80070d8:	e025      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070da:	2305      	movs	r3, #5
 80070dc:	e023      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070de:	2304      	movs	r3, #4
 80070e0:	e021      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070e2:	2303      	movs	r3, #3
 80070e4:	e01f      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070e6:	2302      	movs	r3, #2
 80070e8:	e01d      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070ea:	2301      	movs	r3, #1
 80070ec:	e01b      	b.n	8007126 <HAL_GPIO_Init+0x26a>
 80070ee:	bf00      	nop
 80070f0:	58000080 	.word	0x58000080
 80070f4:	58024400 	.word	0x58024400
 80070f8:	58000400 	.word	0x58000400
 80070fc:	58020000 	.word	0x58020000
 8007100:	58020400 	.word	0x58020400
 8007104:	58020800 	.word	0x58020800
 8007108:	58020c00 	.word	0x58020c00
 800710c:	58021000 	.word	0x58021000
 8007110:	58021400 	.word	0x58021400
 8007114:	58021800 	.word	0x58021800
 8007118:	58021c00 	.word	0x58021c00
 800711c:	58022000 	.word	0x58022000
 8007120:	58022400 	.word	0x58022400
 8007124:	2300      	movs	r3, #0
 8007126:	69fa      	ldr	r2, [r7, #28]
 8007128:	f002 0203 	and.w	r2, r2, #3
 800712c:	0092      	lsls	r2, r2, #2
 800712e:	4093      	lsls	r3, r2
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	4313      	orrs	r3, r2
 8007134:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007136:	4938      	ldr	r1, [pc, #224]	; (8007218 <HAL_GPIO_Init+0x35c>)
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	089b      	lsrs	r3, r3, #2
 800713c:	3302      	adds	r3, #2
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	43db      	mvns	r3, r3
 8007150:	69ba      	ldr	r2, [r7, #24]
 8007152:	4013      	ands	r3, r2
 8007154:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007162:	69ba      	ldr	r2, [r7, #24]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800716a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	43db      	mvns	r3, r3
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	4013      	ands	r3, r2
 8007182:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	43db      	mvns	r3, r3
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	4013      	ands	r3, r2
 80071ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80071c4:	697b      	ldr	r3, [r7, #20]
 80071c6:	69ba      	ldr	r2, [r7, #24]
 80071c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	43db      	mvns	r3, r3
 80071d4:	69ba      	ldr	r2, [r7, #24]
 80071d6:	4013      	ands	r3, r2
 80071d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	693b      	ldr	r3, [r7, #16]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	69ba      	ldr	r2, [r7, #24]
 80071f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	3301      	adds	r3, #1
 80071f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681a      	ldr	r2, [r3, #0]
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	fa22 f303 	lsr.w	r3, r2, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	f47f ae63 	bne.w	8006ed0 <HAL_GPIO_Init+0x14>
  }
}
 800720a:	bf00      	nop
 800720c:	bf00      	nop
 800720e:	3724      	adds	r7, #36	; 0x24
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	58000400 	.word	0x58000400

0800721c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800721c:	b480      	push	{r7}
 800721e:	b085      	sub	sp, #20
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	460b      	mov	r3, r1
 8007226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	691a      	ldr	r2, [r3, #16]
 800722c:	887b      	ldrh	r3, [r7, #2]
 800722e:	4013      	ands	r3, r2
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
 8007238:	e001      	b.n	800723e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800723a:	2300      	movs	r3, #0
 800723c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr

0800724c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800724c:	b480      	push	{r7}
 800724e:	b083      	sub	sp, #12
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	460b      	mov	r3, r1
 8007256:	807b      	strh	r3, [r7, #2]
 8007258:	4613      	mov	r3, r2
 800725a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800725c:	787b      	ldrb	r3, [r7, #1]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007262:	887a      	ldrh	r2, [r7, #2]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007268:	e003      	b.n	8007272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800726a:	887b      	ldrh	r3, [r7, #2]
 800726c:	041a      	lsls	r2, r3, #16
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	619a      	str	r2, [r3, #24]
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800727e:	b480      	push	{r7}
 8007280:	b085      	sub	sp, #20
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007290:	887a      	ldrh	r2, [r7, #2]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4013      	ands	r3, r2
 8007296:	041a      	lsls	r2, r3, #16
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	43d9      	mvns	r1, r3
 800729c:	887b      	ldrh	r3, [r7, #2]
 800729e:	400b      	ands	r3, r1
 80072a0:	431a      	orrs	r2, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	619a      	str	r2, [r3, #24]
}
 80072a6:	bf00      	nop
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
	...

080072b4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80072bc:	4a08      	ldr	r2, [pc, #32]	; (80072e0 <HAL_HSEM_FastTake+0x2c>)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	3320      	adds	r3, #32
 80072c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072c6:	4a07      	ldr	r2, [pc, #28]	; (80072e4 <HAL_HSEM_FastTake+0x30>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d101      	bne.n	80072d0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	e000      	b.n	80072d2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	58026400 	.word	0x58026400
 80072e4:	80000300 	.word	0x80000300

080072e8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80072f2:	4906      	ldr	r1, [pc, #24]	; (800730c <HAL_HSEM_Release+0x24>)
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	58026400 	.word	0x58026400

08007310 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007310:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007312:	b08f      	sub	sp, #60	; 0x3c
 8007314:	af0a      	add	r7, sp, #40	; 0x28
 8007316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e116      	b.n	8007550 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800732e:	b2db      	uxtb	r3, r3
 8007330:	2b00      	cmp	r3, #0
 8007332:	d106      	bne.n	8007342 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fc fc81 	bl	8003c44 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2203      	movs	r2, #3
 8007346:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007352:	2b00      	cmp	r3, #0
 8007354:	d102      	bne.n	800735c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2200      	movs	r2, #0
 800735a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4618      	mov	r0, r3
 8007362:	f005 f977 	bl	800c654 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	603b      	str	r3, [r7, #0]
 800736c:	687e      	ldr	r6, [r7, #4]
 800736e:	466d      	mov	r5, sp
 8007370:	f106 0410 	add.w	r4, r6, #16
 8007374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007376:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800737a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800737c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007380:	e885 0003 	stmia.w	r5, {r0, r1}
 8007384:	1d33      	adds	r3, r6, #4
 8007386:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007388:	6838      	ldr	r0, [r7, #0]
 800738a:	f005 f8f5 	bl	800c578 <USB_CoreInit>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2202      	movs	r2, #2
 8007398:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800739c:	2301      	movs	r3, #1
 800739e:	e0d7      	b.n	8007550 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2100      	movs	r1, #0
 80073a6:	4618      	mov	r0, r3
 80073a8:	f005 f965 	bl	800c676 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073ac:	2300      	movs	r3, #0
 80073ae:	73fb      	strb	r3, [r7, #15]
 80073b0:	e04a      	b.n	8007448 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80073b2:	7bfa      	ldrb	r2, [r7, #15]
 80073b4:	6879      	ldr	r1, [r7, #4]
 80073b6:	4613      	mov	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	4413      	add	r3, r2
 80073bc:	009b      	lsls	r3, r3, #2
 80073be:	440b      	add	r3, r1
 80073c0:	333d      	adds	r3, #61	; 0x3d
 80073c2:	2201      	movs	r2, #1
 80073c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80073c6:	7bfa      	ldrb	r2, [r7, #15]
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	4613      	mov	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	4413      	add	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	440b      	add	r3, r1
 80073d4:	333c      	adds	r3, #60	; 0x3c
 80073d6:	7bfa      	ldrb	r2, [r7, #15]
 80073d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80073da:	7bfa      	ldrb	r2, [r7, #15]
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
 80073de:	b298      	uxth	r0, r3
 80073e0:	6879      	ldr	r1, [r7, #4]
 80073e2:	4613      	mov	r3, r2
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	3344      	adds	r3, #68	; 0x44
 80073ee:	4602      	mov	r2, r0
 80073f0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80073f2:	7bfa      	ldrb	r2, [r7, #15]
 80073f4:	6879      	ldr	r1, [r7, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	00db      	lsls	r3, r3, #3
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	440b      	add	r3, r1
 8007400:	3340      	adds	r3, #64	; 0x40
 8007402:	2200      	movs	r2, #0
 8007404:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007406:	7bfa      	ldrb	r2, [r7, #15]
 8007408:	6879      	ldr	r1, [r7, #4]
 800740a:	4613      	mov	r3, r2
 800740c:	00db      	lsls	r3, r3, #3
 800740e:	4413      	add	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	440b      	add	r3, r1
 8007414:	3348      	adds	r3, #72	; 0x48
 8007416:	2200      	movs	r2, #0
 8007418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800741a:	7bfa      	ldrb	r2, [r7, #15]
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	4613      	mov	r3, r2
 8007420:	00db      	lsls	r3, r3, #3
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	440b      	add	r3, r1
 8007428:	334c      	adds	r3, #76	; 0x4c
 800742a:	2200      	movs	r2, #0
 800742c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800742e:	7bfa      	ldrb	r2, [r7, #15]
 8007430:	6879      	ldr	r1, [r7, #4]
 8007432:	4613      	mov	r3, r2
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	440b      	add	r3, r1
 800743c:	3354      	adds	r3, #84	; 0x54
 800743e:	2200      	movs	r2, #0
 8007440:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	3301      	adds	r3, #1
 8007446:	73fb      	strb	r3, [r7, #15]
 8007448:	7bfa      	ldrb	r2, [r7, #15]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	429a      	cmp	r2, r3
 8007450:	d3af      	bcc.n	80073b2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007452:	2300      	movs	r3, #0
 8007454:	73fb      	strb	r3, [r7, #15]
 8007456:	e044      	b.n	80074e2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007458:	7bfa      	ldrb	r2, [r7, #15]
 800745a:	6879      	ldr	r1, [r7, #4]
 800745c:	4613      	mov	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4413      	add	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	440b      	add	r3, r1
 8007466:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800746a:	2200      	movs	r2, #0
 800746c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800746e:	7bfa      	ldrb	r2, [r7, #15]
 8007470:	6879      	ldr	r1, [r7, #4]
 8007472:	4613      	mov	r3, r2
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007480:	7bfa      	ldrb	r2, [r7, #15]
 8007482:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007484:	7bfa      	ldrb	r2, [r7, #15]
 8007486:	6879      	ldr	r1, [r7, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	00db      	lsls	r3, r3, #3
 800748c:	4413      	add	r3, r2
 800748e:	009b      	lsls	r3, r3, #2
 8007490:	440b      	add	r3, r1
 8007492:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800749a:	7bfa      	ldrb	r2, [r7, #15]
 800749c:	6879      	ldr	r1, [r7, #4]
 800749e:	4613      	mov	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	440b      	add	r3, r1
 80074a8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80074ac:	2200      	movs	r2, #0
 80074ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80074b0:	7bfa      	ldrb	r2, [r7, #15]
 80074b2:	6879      	ldr	r1, [r7, #4]
 80074b4:	4613      	mov	r3, r2
 80074b6:	00db      	lsls	r3, r3, #3
 80074b8:	4413      	add	r3, r2
 80074ba:	009b      	lsls	r3, r3, #2
 80074bc:	440b      	add	r3, r1
 80074be:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80074c6:	7bfa      	ldrb	r2, [r7, #15]
 80074c8:	6879      	ldr	r1, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	00db      	lsls	r3, r3, #3
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	440b      	add	r3, r1
 80074d4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	3301      	adds	r3, #1
 80074e0:	73fb      	strb	r3, [r7, #15]
 80074e2:	7bfa      	ldrb	r2, [r7, #15]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d3b5      	bcc.n	8007458 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	603b      	str	r3, [r7, #0]
 80074f2:	687e      	ldr	r6, [r7, #4]
 80074f4:	466d      	mov	r5, sp
 80074f6:	f106 0410 	add.w	r4, r6, #16
 80074fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007502:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007506:	e885 0003 	stmia.w	r5, {r0, r1}
 800750a:	1d33      	adds	r3, r6, #4
 800750c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800750e:	6838      	ldr	r0, [r7, #0]
 8007510:	f005 f8fe 	bl	800c710 <USB_DevInit>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2202      	movs	r2, #2
 800751e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	e014      	b.n	8007550 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800753a:	2b01      	cmp	r3, #1
 800753c:	d102      	bne.n	8007544 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f80a 	bl	8007558 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4618      	mov	r0, r3
 800754a:	f005 fabc 	bl	800cac6 <USB_DevDisconnect>

  return HAL_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3714      	adds	r7, #20
 8007554:	46bd      	mov	sp, r7
 8007556:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007558 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007558:	b480      	push	{r7}
 800755a:	b085      	sub	sp, #20
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2201      	movs	r2, #1
 800756a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007586:	4b05      	ldr	r3, [pc, #20]	; (800759c <HAL_PCDEx_ActivateLPM+0x44>)
 8007588:	4313      	orrs	r3, r2
 800758a:	68fa      	ldr	r2, [r7, #12]
 800758c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3714      	adds	r7, #20
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	10000003 	.word	0x10000003

080075a0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80075a8:	4b29      	ldr	r3, [pc, #164]	; (8007650 <HAL_PWREx_ConfigSupply+0xb0>)
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	2b06      	cmp	r3, #6
 80075b2:	d00a      	beq.n	80075ca <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80075b4:	4b26      	ldr	r3, [pc, #152]	; (8007650 <HAL_PWREx_ConfigSupply+0xb0>)
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d001      	beq.n	80075c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	e040      	b.n	8007648 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80075c6:	2300      	movs	r3, #0
 80075c8:	e03e      	b.n	8007648 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80075ca:	4b21      	ldr	r3, [pc, #132]	; (8007650 <HAL_PWREx_ConfigSupply+0xb0>)
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80075d2:	491f      	ldr	r1, [pc, #124]	; (8007650 <HAL_PWREx_ConfigSupply+0xb0>)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80075da:	f7fc fcc5 	bl	8003f68 <HAL_GetTick>
 80075de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075e0:	e009      	b.n	80075f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80075e2:	f7fc fcc1 	bl	8003f68 <HAL_GetTick>
 80075e6:	4602      	mov	r2, r0
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	1ad3      	subs	r3, r2, r3
 80075ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075f0:	d901      	bls.n	80075f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e028      	b.n	8007648 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80075f6:	4b16      	ldr	r3, [pc, #88]	; (8007650 <HAL_PWREx_ConfigSupply+0xb0>)
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007602:	d1ee      	bne.n	80075e2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b1e      	cmp	r3, #30
 8007608:	d008      	beq.n	800761c <HAL_PWREx_ConfigSupply+0x7c>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2b2e      	cmp	r3, #46	; 0x2e
 800760e:	d005      	beq.n	800761c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2b1d      	cmp	r3, #29
 8007614:	d002      	beq.n	800761c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b2d      	cmp	r3, #45	; 0x2d
 800761a:	d114      	bne.n	8007646 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800761c:	f7fc fca4 	bl	8003f68 <HAL_GetTick>
 8007620:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007622:	e009      	b.n	8007638 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007624:	f7fc fca0 	bl	8003f68 <HAL_GetTick>
 8007628:	4602      	mov	r2, r0
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	1ad3      	subs	r3, r2, r3
 800762e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007632:	d901      	bls.n	8007638 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e007      	b.n	8007648 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007638:	4b05      	ldr	r3, [pc, #20]	; (8007650 <HAL_PWREx_ConfigSupply+0xb0>)
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007644:	d1ee      	bne.n	8007624 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	58024800 	.word	0x58024800

08007654 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007654:	b480      	push	{r7}
 8007656:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007658:	4b05      	ldr	r3, [pc, #20]	; (8007670 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	4a04      	ldr	r2, [pc, #16]	; (8007670 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800765e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007662:	60d3      	str	r3, [r2, #12]
}
 8007664:	bf00      	nop
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr
 800766e:	bf00      	nop
 8007670:	58024800 	.word	0x58024800

08007674 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b08c      	sub	sp, #48	; 0x30
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d102      	bne.n	8007688 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	f000 bc1d 	b.w	8007ec2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	f000 8087 	beq.w	80077a4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007696:	4b99      	ldr	r3, [pc, #612]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800769e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80076a0:	4b96      	ldr	r3, [pc, #600]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80076a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	2b10      	cmp	r3, #16
 80076aa:	d007      	beq.n	80076bc <HAL_RCC_OscConfig+0x48>
 80076ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ae:	2b18      	cmp	r3, #24
 80076b0:	d110      	bne.n	80076d4 <HAL_RCC_OscConfig+0x60>
 80076b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b4:	f003 0303 	and.w	r3, r3, #3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d10b      	bne.n	80076d4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076bc:	4b8f      	ldr	r3, [pc, #572]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d06c      	beq.n	80077a2 <HAL_RCC_OscConfig+0x12e>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d168      	bne.n	80077a2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80076d0:	2301      	movs	r3, #1
 80076d2:	e3f6      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076dc:	d106      	bne.n	80076ec <HAL_RCC_OscConfig+0x78>
 80076de:	4b87      	ldr	r3, [pc, #540]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4a86      	ldr	r2, [pc, #536]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80076e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076e8:	6013      	str	r3, [r2, #0]
 80076ea:	e02e      	b.n	800774a <HAL_RCC_OscConfig+0xd6>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10c      	bne.n	800770e <HAL_RCC_OscConfig+0x9a>
 80076f4:	4b81      	ldr	r3, [pc, #516]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a80      	ldr	r2, [pc, #512]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80076fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	4b7e      	ldr	r3, [pc, #504]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4a7d      	ldr	r2, [pc, #500]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007706:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	e01d      	b.n	800774a <HAL_RCC_OscConfig+0xd6>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007716:	d10c      	bne.n	8007732 <HAL_RCC_OscConfig+0xbe>
 8007718:	4b78      	ldr	r3, [pc, #480]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4a77      	ldr	r2, [pc, #476]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 800771e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007722:	6013      	str	r3, [r2, #0]
 8007724:	4b75      	ldr	r3, [pc, #468]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a74      	ldr	r2, [pc, #464]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 800772a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772e:	6013      	str	r3, [r2, #0]
 8007730:	e00b      	b.n	800774a <HAL_RCC_OscConfig+0xd6>
 8007732:	4b72      	ldr	r3, [pc, #456]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a71      	ldr	r2, [pc, #452]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007738:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	4b6f      	ldr	r3, [pc, #444]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a6e      	ldr	r2, [pc, #440]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007744:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007748:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d013      	beq.n	800777a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007752:	f7fc fc09 	bl	8003f68 <HAL_GetTick>
 8007756:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007758:	e008      	b.n	800776c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800775a:	f7fc fc05 	bl	8003f68 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b64      	cmp	r3, #100	; 0x64
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e3aa      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800776c:	4b63      	ldr	r3, [pc, #396]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d0f0      	beq.n	800775a <HAL_RCC_OscConfig+0xe6>
 8007778:	e014      	b.n	80077a4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800777a:	f7fc fbf5 	bl	8003f68 <HAL_GetTick>
 800777e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007780:	e008      	b.n	8007794 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007782:	f7fc fbf1 	bl	8003f68 <HAL_GetTick>
 8007786:	4602      	mov	r2, r0
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b64      	cmp	r3, #100	; 0x64
 800778e:	d901      	bls.n	8007794 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007790:	2303      	movs	r3, #3
 8007792:	e396      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007794:	4b59      	ldr	r3, [pc, #356]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1f0      	bne.n	8007782 <HAL_RCC_OscConfig+0x10e>
 80077a0:	e000      	b.n	80077a4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80cb 	beq.w	8007948 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077b2:	4b52      	ldr	r3, [pc, #328]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077ba:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077bc:	4b4f      	ldr	r3, [pc, #316]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80077be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077c0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80077c2:	6a3b      	ldr	r3, [r7, #32]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d007      	beq.n	80077d8 <HAL_RCC_OscConfig+0x164>
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	2b18      	cmp	r3, #24
 80077cc:	d156      	bne.n	800787c <HAL_RCC_OscConfig+0x208>
 80077ce:	69fb      	ldr	r3, [r7, #28]
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d151      	bne.n	800787c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80077d8:	4b48      	ldr	r3, [pc, #288]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0304 	and.w	r3, r3, #4
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d005      	beq.n	80077f0 <HAL_RCC_OscConfig+0x17c>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	e368      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80077f0:	4b42      	ldr	r3, [pc, #264]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f023 0219 	bic.w	r2, r3, #25
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	493f      	ldr	r1, [pc, #252]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007802:	f7fc fbb1 	bl	8003f68 <HAL_GetTick>
 8007806:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007808:	e008      	b.n	800781c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800780a:	f7fc fbad 	bl	8003f68 <HAL_GetTick>
 800780e:	4602      	mov	r2, r0
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	1ad3      	subs	r3, r2, r3
 8007814:	2b02      	cmp	r3, #2
 8007816:	d901      	bls.n	800781c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007818:	2303      	movs	r3, #3
 800781a:	e352      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800781c:	4b37      	ldr	r3, [pc, #220]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d0f0      	beq.n	800780a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007828:	f7fc fbce 	bl	8003fc8 <HAL_GetREVID>
 800782c:	4603      	mov	r3, r0
 800782e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007832:	4293      	cmp	r3, r2
 8007834:	d817      	bhi.n	8007866 <HAL_RCC_OscConfig+0x1f2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	691b      	ldr	r3, [r3, #16]
 800783a:	2b40      	cmp	r3, #64	; 0x40
 800783c:	d108      	bne.n	8007850 <HAL_RCC_OscConfig+0x1dc>
 800783e:	4b2f      	ldr	r3, [pc, #188]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007846:	4a2d      	ldr	r2, [pc, #180]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007848:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800784c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800784e:	e07b      	b.n	8007948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007850:	4b2a      	ldr	r3, [pc, #168]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	691b      	ldr	r3, [r3, #16]
 800785c:	031b      	lsls	r3, r3, #12
 800785e:	4927      	ldr	r1, [pc, #156]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007860:	4313      	orrs	r3, r2
 8007862:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007864:	e070      	b.n	8007948 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007866:	4b25      	ldr	r3, [pc, #148]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	061b      	lsls	r3, r3, #24
 8007874:	4921      	ldr	r1, [pc, #132]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007876:	4313      	orrs	r3, r2
 8007878:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800787a:	e065      	b.n	8007948 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	68db      	ldr	r3, [r3, #12]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d048      	beq.n	8007916 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007884:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f023 0219 	bic.w	r2, r3, #25
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	491a      	ldr	r1, [pc, #104]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 8007892:	4313      	orrs	r3, r2
 8007894:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007896:	f7fc fb67 	bl	8003f68 <HAL_GetTick>
 800789a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800789c:	e008      	b.n	80078b0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800789e:	f7fc fb63 	bl	8003f68 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e308      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078b0:	4b12      	ldr	r3, [pc, #72]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0304 	and.w	r3, r3, #4
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0f0      	beq.n	800789e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078bc:	f7fc fb84 	bl	8003fc8 <HAL_GetREVID>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d81a      	bhi.n	8007900 <HAL_RCC_OscConfig+0x28c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d108      	bne.n	80078e4 <HAL_RCC_OscConfig+0x270>
 80078d2:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80078da:	4a08      	ldr	r2, [pc, #32]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80078dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078e0:	6053      	str	r3, [r2, #4]
 80078e2:	e031      	b.n	8007948 <HAL_RCC_OscConfig+0x2d4>
 80078e4:	4b05      	ldr	r3, [pc, #20]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	031b      	lsls	r3, r3, #12
 80078f2:	4902      	ldr	r1, [pc, #8]	; (80078fc <HAL_RCC_OscConfig+0x288>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	604b      	str	r3, [r1, #4]
 80078f8:	e026      	b.n	8007948 <HAL_RCC_OscConfig+0x2d4>
 80078fa:	bf00      	nop
 80078fc:	58024400 	.word	0x58024400
 8007900:	4b9a      	ldr	r3, [pc, #616]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	691b      	ldr	r3, [r3, #16]
 800790c:	061b      	lsls	r3, r3, #24
 800790e:	4997      	ldr	r1, [pc, #604]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007910:	4313      	orrs	r3, r2
 8007912:	604b      	str	r3, [r1, #4]
 8007914:	e018      	b.n	8007948 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007916:	4b95      	ldr	r3, [pc, #596]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a94      	ldr	r2, [pc, #592]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 800791c:	f023 0301 	bic.w	r3, r3, #1
 8007920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007922:	f7fc fb21 	bl	8003f68 <HAL_GetTick>
 8007926:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800792a:	f7fc fb1d 	bl	8003f68 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e2c2      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800793c:	4b8b      	ldr	r3, [pc, #556]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d1f0      	bne.n	800792a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f003 0310 	and.w	r3, r3, #16
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 80a9 	beq.w	8007aa8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007956:	4b85      	ldr	r3, [pc, #532]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800795e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007960:	4b82      	ldr	r3, [pc, #520]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	2b08      	cmp	r3, #8
 800796a:	d007      	beq.n	800797c <HAL_RCC_OscConfig+0x308>
 800796c:	69bb      	ldr	r3, [r7, #24]
 800796e:	2b18      	cmp	r3, #24
 8007970:	d13a      	bne.n	80079e8 <HAL_RCC_OscConfig+0x374>
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f003 0303 	and.w	r3, r3, #3
 8007978:	2b01      	cmp	r3, #1
 800797a:	d135      	bne.n	80079e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800797c:	4b7b      	ldr	r3, [pc, #492]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007984:	2b00      	cmp	r3, #0
 8007986:	d005      	beq.n	8007994 <HAL_RCC_OscConfig+0x320>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	2b80      	cmp	r3, #128	; 0x80
 800798e:	d001      	beq.n	8007994 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e296      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007994:	f7fc fb18 	bl	8003fc8 <HAL_GetREVID>
 8007998:	4603      	mov	r3, r0
 800799a:	f241 0203 	movw	r2, #4099	; 0x1003
 800799e:	4293      	cmp	r3, r2
 80079a0:	d817      	bhi.n	80079d2 <HAL_RCC_OscConfig+0x35e>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a1b      	ldr	r3, [r3, #32]
 80079a6:	2b20      	cmp	r3, #32
 80079a8:	d108      	bne.n	80079bc <HAL_RCC_OscConfig+0x348>
 80079aa:	4b70      	ldr	r3, [pc, #448]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80079b2:	4a6e      	ldr	r2, [pc, #440]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 80079b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079b8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079ba:	e075      	b.n	8007aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079bc:	4b6b      	ldr	r3, [pc, #428]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	069b      	lsls	r3, r3, #26
 80079ca:	4968      	ldr	r1, [pc, #416]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 80079cc:	4313      	orrs	r3, r2
 80079ce:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079d0:	e06a      	b.n	8007aa8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80079d2:	4b66      	ldr	r3, [pc, #408]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	061b      	lsls	r3, r3, #24
 80079e0:	4962      	ldr	r1, [pc, #392]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80079e6:	e05f      	b.n	8007aa8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	69db      	ldr	r3, [r3, #28]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d042      	beq.n	8007a76 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80079f0:	4b5e      	ldr	r3, [pc, #376]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a5d      	ldr	r2, [pc, #372]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 80079f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079fc:	f7fc fab4 	bl	8003f68 <HAL_GetTick>
 8007a00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a04:	f7fc fab0 	bl	8003f68 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e255      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007a16:	4b55      	ldr	r3, [pc, #340]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0f0      	beq.n	8007a04 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007a22:	f7fc fad1 	bl	8003fc8 <HAL_GetREVID>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f241 0203 	movw	r2, #4099	; 0x1003
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d817      	bhi.n	8007a60 <HAL_RCC_OscConfig+0x3ec>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a1b      	ldr	r3, [r3, #32]
 8007a34:	2b20      	cmp	r3, #32
 8007a36:	d108      	bne.n	8007a4a <HAL_RCC_OscConfig+0x3d6>
 8007a38:	4b4c      	ldr	r3, [pc, #304]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007a40:	4a4a      	ldr	r2, [pc, #296]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007a46:	6053      	str	r3, [r2, #4]
 8007a48:	e02e      	b.n	8007aa8 <HAL_RCC_OscConfig+0x434>
 8007a4a:	4b48      	ldr	r3, [pc, #288]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a1b      	ldr	r3, [r3, #32]
 8007a56:	069b      	lsls	r3, r3, #26
 8007a58:	4944      	ldr	r1, [pc, #272]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	604b      	str	r3, [r1, #4]
 8007a5e:	e023      	b.n	8007aa8 <HAL_RCC_OscConfig+0x434>
 8007a60:	4b42      	ldr	r3, [pc, #264]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a62:	68db      	ldr	r3, [r3, #12]
 8007a64:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	061b      	lsls	r3, r3, #24
 8007a6e:	493f      	ldr	r1, [pc, #252]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60cb      	str	r3, [r1, #12]
 8007a74:	e018      	b.n	8007aa8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007a76:	4b3d      	ldr	r3, [pc, #244]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a3c      	ldr	r2, [pc, #240]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a82:	f7fc fa71 	bl	8003f68 <HAL_GetTick>
 8007a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a88:	e008      	b.n	8007a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007a8a:	f7fc fa6d 	bl	8003f68 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e212      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007a9c:	4b33      	ldr	r3, [pc, #204]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f0      	bne.n	8007a8a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d036      	beq.n	8007b22 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d019      	beq.n	8007af0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007abc:	4b2b      	ldr	r3, [pc, #172]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac0:	4a2a      	ldr	r2, [pc, #168]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007ac2:	f043 0301 	orr.w	r3, r3, #1
 8007ac6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ac8:	f7fc fa4e 	bl	8003f68 <HAL_GetTick>
 8007acc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ace:	e008      	b.n	8007ae2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ad0:	f7fc fa4a 	bl	8003f68 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	1ad3      	subs	r3, r2, r3
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d901      	bls.n	8007ae2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ade:	2303      	movs	r3, #3
 8007ae0:	e1ef      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ae2:	4b22      	ldr	r3, [pc, #136]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ae6:	f003 0302 	and.w	r3, r3, #2
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d0f0      	beq.n	8007ad0 <HAL_RCC_OscConfig+0x45c>
 8007aee:	e018      	b.n	8007b22 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007af0:	4b1e      	ldr	r3, [pc, #120]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007af4:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007af6:	f023 0301 	bic.w	r3, r3, #1
 8007afa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afc:	f7fc fa34 	bl	8003f68 <HAL_GetTick>
 8007b00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b02:	e008      	b.n	8007b16 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b04:	f7fc fa30 	bl	8003f68 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b02      	cmp	r3, #2
 8007b10:	d901      	bls.n	8007b16 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e1d5      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007b16:	4b15      	ldr	r3, [pc, #84]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d1f0      	bne.n	8007b04 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0320 	and.w	r3, r3, #32
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d039      	beq.n	8007ba2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	699b      	ldr	r3, [r3, #24]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d01c      	beq.n	8007b70 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007b36:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a0c      	ldr	r2, [pc, #48]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007b3c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b42:	f7fc fa11 	bl	8003f68 <HAL_GetTick>
 8007b46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b48:	e008      	b.n	8007b5c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b4a:	f7fc fa0d 	bl	8003f68 <HAL_GetTick>
 8007b4e:	4602      	mov	r2, r0
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	1ad3      	subs	r3, r2, r3
 8007b54:	2b02      	cmp	r3, #2
 8007b56:	d901      	bls.n	8007b5c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e1b2      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007b5c:	4b03      	ldr	r3, [pc, #12]	; (8007b6c <HAL_RCC_OscConfig+0x4f8>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d0f0      	beq.n	8007b4a <HAL_RCC_OscConfig+0x4d6>
 8007b68:	e01b      	b.n	8007ba2 <HAL_RCC_OscConfig+0x52e>
 8007b6a:	bf00      	nop
 8007b6c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007b70:	4b9b      	ldr	r3, [pc, #620]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a9a      	ldr	r2, [pc, #616]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b7a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007b7c:	f7fc f9f4 	bl	8003f68 <HAL_GetTick>
 8007b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b82:	e008      	b.n	8007b96 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007b84:	f7fc f9f0 	bl	8003f68 <HAL_GetTick>
 8007b88:	4602      	mov	r2, r0
 8007b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d901      	bls.n	8007b96 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007b92:	2303      	movs	r3, #3
 8007b94:	e195      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007b96:	4b92      	ldr	r3, [pc, #584]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1f0      	bne.n	8007b84 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0304 	and.w	r3, r3, #4
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f000 8081 	beq.w	8007cb2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007bb0:	4b8c      	ldr	r3, [pc, #560]	; (8007de4 <HAL_RCC_OscConfig+0x770>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a8b      	ldr	r2, [pc, #556]	; (8007de4 <HAL_RCC_OscConfig+0x770>)
 8007bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007bbc:	f7fc f9d4 	bl	8003f68 <HAL_GetTick>
 8007bc0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bc2:	e008      	b.n	8007bd6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007bc4:	f7fc f9d0 	bl	8003f68 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	2b64      	cmp	r3, #100	; 0x64
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e175      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007bd6:	4b83      	ldr	r3, [pc, #524]	; (8007de4 <HAL_RCC_OscConfig+0x770>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0f0      	beq.n	8007bc4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	2b01      	cmp	r3, #1
 8007be8:	d106      	bne.n	8007bf8 <HAL_RCC_OscConfig+0x584>
 8007bea:	4b7d      	ldr	r3, [pc, #500]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bee:	4a7c      	ldr	r2, [pc, #496]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	6713      	str	r3, [r2, #112]	; 0x70
 8007bf6:	e02d      	b.n	8007c54 <HAL_RCC_OscConfig+0x5e0>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d10c      	bne.n	8007c1a <HAL_RCC_OscConfig+0x5a6>
 8007c00:	4b77      	ldr	r3, [pc, #476]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c04:	4a76      	ldr	r2, [pc, #472]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8007c0c:	4b74      	ldr	r3, [pc, #464]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c10:	4a73      	ldr	r2, [pc, #460]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c12:	f023 0304 	bic.w	r3, r3, #4
 8007c16:	6713      	str	r3, [r2, #112]	; 0x70
 8007c18:	e01c      	b.n	8007c54 <HAL_RCC_OscConfig+0x5e0>
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	2b05      	cmp	r3, #5
 8007c20:	d10c      	bne.n	8007c3c <HAL_RCC_OscConfig+0x5c8>
 8007c22:	4b6f      	ldr	r3, [pc, #444]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c26:	4a6e      	ldr	r2, [pc, #440]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c28:	f043 0304 	orr.w	r3, r3, #4
 8007c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c2e:	4b6c      	ldr	r3, [pc, #432]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c32:	4a6b      	ldr	r2, [pc, #428]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c34:	f043 0301 	orr.w	r3, r3, #1
 8007c38:	6713      	str	r3, [r2, #112]	; 0x70
 8007c3a:	e00b      	b.n	8007c54 <HAL_RCC_OscConfig+0x5e0>
 8007c3c:	4b68      	ldr	r3, [pc, #416]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c40:	4a67      	ldr	r2, [pc, #412]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c42:	f023 0301 	bic.w	r3, r3, #1
 8007c46:	6713      	str	r3, [r2, #112]	; 0x70
 8007c48:	4b65      	ldr	r3, [pc, #404]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c4c:	4a64      	ldr	r2, [pc, #400]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c4e:	f023 0304 	bic.w	r3, r3, #4
 8007c52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d015      	beq.n	8007c88 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c5c:	f7fc f984 	bl	8003f68 <HAL_GetTick>
 8007c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c62:	e00a      	b.n	8007c7a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c64:	f7fc f980 	bl	8003f68 <HAL_GetTick>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d901      	bls.n	8007c7a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	e123      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007c7a:	4b59      	ldr	r3, [pc, #356]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c7e:	f003 0302 	and.w	r3, r3, #2
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d0ee      	beq.n	8007c64 <HAL_RCC_OscConfig+0x5f0>
 8007c86:	e014      	b.n	8007cb2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c88:	f7fc f96e 	bl	8003f68 <HAL_GetTick>
 8007c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007c8e:	e00a      	b.n	8007ca6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c90:	f7fc f96a 	bl	8003f68 <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d901      	bls.n	8007ca6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e10d      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007ca6:	4b4e      	ldr	r3, [pc, #312]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007caa:	f003 0302 	and.w	r3, r3, #2
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d1ee      	bne.n	8007c90 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	f000 8102 	beq.w	8007ec0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007cbc:	4b48      	ldr	r3, [pc, #288]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cc4:	2b18      	cmp	r3, #24
 8007cc6:	f000 80bd 	beq.w	8007e44 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	f040 809e 	bne.w	8007e10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cd4:	4b42      	ldr	r3, [pc, #264]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a41      	ldr	r2, [pc, #260]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ce0:	f7fc f942 	bl	8003f68 <HAL_GetTick>
 8007ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ce6:	e008      	b.n	8007cfa <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ce8:	f7fc f93e 	bl	8003f68 <HAL_GetTick>
 8007cec:	4602      	mov	r2, r0
 8007cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e0e3      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007cfa:	4b39      	ldr	r3, [pc, #228]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d1f0      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d06:	4b36      	ldr	r3, [pc, #216]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d0a:	4b37      	ldr	r3, [pc, #220]	; (8007de8 <HAL_RCC_OscConfig+0x774>)
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007d16:	0112      	lsls	r2, r2, #4
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	4931      	ldr	r1, [pc, #196]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	628b      	str	r3, [r1, #40]	; 0x28
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d24:	3b01      	subs	r3, #1
 8007d26:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d2e:	3b01      	subs	r3, #1
 8007d30:	025b      	lsls	r3, r3, #9
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	431a      	orrs	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	041b      	lsls	r3, r3, #16
 8007d3e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d42:	431a      	orrs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d48:	3b01      	subs	r3, #1
 8007d4a:	061b      	lsls	r3, r3, #24
 8007d4c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007d50:	4923      	ldr	r1, [pc, #140]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007d56:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d5a:	4a21      	ldr	r2, [pc, #132]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d5c:	f023 0301 	bic.w	r3, r3, #1
 8007d60:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007d62:	4b1f      	ldr	r3, [pc, #124]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d66:	4b21      	ldr	r3, [pc, #132]	; (8007dec <HAL_RCC_OscConfig+0x778>)
 8007d68:	4013      	ands	r3, r2
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007d6e:	00d2      	lsls	r2, r2, #3
 8007d70:	491b      	ldr	r1, [pc, #108]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d72:	4313      	orrs	r3, r2
 8007d74:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007d76:	4b1a      	ldr	r3, [pc, #104]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	f023 020c 	bic.w	r2, r3, #12
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d82:	4917      	ldr	r1, [pc, #92]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d84:	4313      	orrs	r3, r2
 8007d86:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007d88:	4b15      	ldr	r3, [pc, #84]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	f023 0202 	bic.w	r2, r3, #2
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d94:	4912      	ldr	r1, [pc, #72]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007d9a:	4b11      	ldr	r3, [pc, #68]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d9e:	4a10      	ldr	r2, [pc, #64]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007da4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007da6:	4b0e      	ldr	r3, [pc, #56]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007daa:	4a0d      	ldr	r2, [pc, #52]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007db0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007db2:	4b0b      	ldr	r3, [pc, #44]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db6:	4a0a      	ldr	r2, [pc, #40]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007db8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007dbe:	4b08      	ldr	r3, [pc, #32]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	4a07      	ldr	r2, [pc, #28]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007dc4:	f043 0301 	orr.w	r3, r3, #1
 8007dc8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dca:	4b05      	ldr	r3, [pc, #20]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a04      	ldr	r2, [pc, #16]	; (8007de0 <HAL_RCC_OscConfig+0x76c>)
 8007dd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dd6:	f7fc f8c7 	bl	8003f68 <HAL_GetTick>
 8007dda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007ddc:	e011      	b.n	8007e02 <HAL_RCC_OscConfig+0x78e>
 8007dde:	bf00      	nop
 8007de0:	58024400 	.word	0x58024400
 8007de4:	58024800 	.word	0x58024800
 8007de8:	fffffc0c 	.word	0xfffffc0c
 8007dec:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007df0:	f7fc f8ba 	bl	8003f68 <HAL_GetTick>
 8007df4:	4602      	mov	r2, r0
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	1ad3      	subs	r3, r2, r3
 8007dfa:	2b02      	cmp	r3, #2
 8007dfc:	d901      	bls.n	8007e02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007dfe:	2303      	movs	r3, #3
 8007e00:	e05f      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007e02:	4b32      	ldr	r3, [pc, #200]	; (8007ecc <HAL_RCC_OscConfig+0x858>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d0f0      	beq.n	8007df0 <HAL_RCC_OscConfig+0x77c>
 8007e0e:	e057      	b.n	8007ec0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e10:	4b2e      	ldr	r3, [pc, #184]	; (8007ecc <HAL_RCC_OscConfig+0x858>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2d      	ldr	r2, [pc, #180]	; (8007ecc <HAL_RCC_OscConfig+0x858>)
 8007e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1c:	f7fc f8a4 	bl	8003f68 <HAL_GetTick>
 8007e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e22:	e008      	b.n	8007e36 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e24:	f7fc f8a0 	bl	8003f68 <HAL_GetTick>
 8007e28:	4602      	mov	r2, r0
 8007e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2c:	1ad3      	subs	r3, r2, r3
 8007e2e:	2b02      	cmp	r3, #2
 8007e30:	d901      	bls.n	8007e36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e045      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e36:	4b25      	ldr	r3, [pc, #148]	; (8007ecc <HAL_RCC_OscConfig+0x858>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d1f0      	bne.n	8007e24 <HAL_RCC_OscConfig+0x7b0>
 8007e42:	e03d      	b.n	8007ec0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007e44:	4b21      	ldr	r3, [pc, #132]	; (8007ecc <HAL_RCC_OscConfig+0x858>)
 8007e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007e4a:	4b20      	ldr	r3, [pc, #128]	; (8007ecc <HAL_RCC_OscConfig+0x858>)
 8007e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e4e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d031      	beq.n	8007ebc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	f003 0203 	and.w	r2, r3, #3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d12a      	bne.n	8007ebc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	091b      	lsrs	r3, r3, #4
 8007e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d122      	bne.n	8007ebc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e80:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d11a      	bne.n	8007ebc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	0a5b      	lsrs	r3, r3, #9
 8007e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e92:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d111      	bne.n	8007ebc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	0c1b      	lsrs	r3, r3, #16
 8007e9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ea4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d108      	bne.n	8007ebc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	0e1b      	lsrs	r3, r3, #24
 8007eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d001      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e000      	b.n	8007ec2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3730      	adds	r7, #48	; 0x30
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	58024400 	.word	0x58024400

08007ed0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ed0:	b580      	push	{r7, lr}
 8007ed2:	b086      	sub	sp, #24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e19c      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ee4:	4b8a      	ldr	r3, [pc, #552]	; (8008110 <HAL_RCC_ClockConfig+0x240>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	683a      	ldr	r2, [r7, #0]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d910      	bls.n	8007f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ef2:	4b87      	ldr	r3, [pc, #540]	; (8008110 <HAL_RCC_ClockConfig+0x240>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f023 020f 	bic.w	r2, r3, #15
 8007efa:	4985      	ldr	r1, [pc, #532]	; (8008110 <HAL_RCC_ClockConfig+0x240>)
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f02:	4b83      	ldr	r3, [pc, #524]	; (8008110 <HAL_RCC_ClockConfig+0x240>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 030f 	and.w	r3, r3, #15
 8007f0a:	683a      	ldr	r2, [r7, #0]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	d001      	beq.n	8007f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007f10:	2301      	movs	r3, #1
 8007f12:	e184      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d010      	beq.n	8007f42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	4b7b      	ldr	r3, [pc, #492]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d908      	bls.n	8007f42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007f30:	4b78      	ldr	r3, [pc, #480]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f32:	699b      	ldr	r3, [r3, #24]
 8007f34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	691b      	ldr	r3, [r3, #16]
 8007f3c:	4975      	ldr	r1, [pc, #468]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 0308 	and.w	r3, r3, #8
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d010      	beq.n	8007f70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	695a      	ldr	r2, [r3, #20]
 8007f52:	4b70      	ldr	r3, [pc, #448]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f54:	69db      	ldr	r3, [r3, #28]
 8007f56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d908      	bls.n	8007f70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007f5e:	4b6d      	ldr	r3, [pc, #436]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f60:	69db      	ldr	r3, [r3, #28]
 8007f62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	695b      	ldr	r3, [r3, #20]
 8007f6a:	496a      	ldr	r1, [pc, #424]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0310 	and.w	r3, r3, #16
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d010      	beq.n	8007f9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	699a      	ldr	r2, [r3, #24]
 8007f80:	4b64      	ldr	r3, [pc, #400]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f82:	69db      	ldr	r3, [r3, #28]
 8007f84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d908      	bls.n	8007f9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007f8c:	4b61      	ldr	r3, [pc, #388]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	699b      	ldr	r3, [r3, #24]
 8007f98:	495e      	ldr	r1, [pc, #376]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d010      	beq.n	8007fcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	69da      	ldr	r2, [r3, #28]
 8007fae:	4b59      	ldr	r3, [pc, #356]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fb0:	6a1b      	ldr	r3, [r3, #32]
 8007fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d908      	bls.n	8007fcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007fba:	4b56      	ldr	r3, [pc, #344]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	69db      	ldr	r3, [r3, #28]
 8007fc6:	4953      	ldr	r1, [pc, #332]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d010      	beq.n	8007ffa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	4b4d      	ldr	r3, [pc, #308]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	f003 030f 	and.w	r3, r3, #15
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d908      	bls.n	8007ffa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007fe8:	4b4a      	ldr	r3, [pc, #296]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f023 020f 	bic.w	r2, r3, #15
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	4947      	ldr	r1, [pc, #284]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 0301 	and.w	r3, r3, #1
 8008002:	2b00      	cmp	r3, #0
 8008004:	d055      	beq.n	80080b2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008006:	4b43      	ldr	r3, [pc, #268]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	4940      	ldr	r1, [pc, #256]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008014:	4313      	orrs	r3, r2
 8008016:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d107      	bne.n	8008030 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008020:	4b3c      	ldr	r3, [pc, #240]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d121      	bne.n	8008070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0f6      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d107      	bne.n	8008048 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008038:	4b36      	ldr	r3, [pc, #216]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d115      	bne.n	8008070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e0ea      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d107      	bne.n	8008060 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008050:	4b30      	ldr	r3, [pc, #192]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008058:	2b00      	cmp	r3, #0
 800805a:	d109      	bne.n	8008070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800805c:	2301      	movs	r3, #1
 800805e:	e0de      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008060:	4b2c      	ldr	r3, [pc, #176]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0304 	and.w	r3, r3, #4
 8008068:	2b00      	cmp	r3, #0
 800806a:	d101      	bne.n	8008070 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e0d6      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008070:	4b28      	ldr	r3, [pc, #160]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 8008072:	691b      	ldr	r3, [r3, #16]
 8008074:	f023 0207 	bic.w	r2, r3, #7
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	4925      	ldr	r1, [pc, #148]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 800807e:	4313      	orrs	r3, r2
 8008080:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008082:	f7fb ff71 	bl	8003f68 <HAL_GetTick>
 8008086:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008088:	e00a      	b.n	80080a0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800808a:	f7fb ff6d 	bl	8003f68 <HAL_GetTick>
 800808e:	4602      	mov	r2, r0
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	1ad3      	subs	r3, r2, r3
 8008094:	f241 3288 	movw	r2, #5000	; 0x1388
 8008098:	4293      	cmp	r3, r2
 800809a:	d901      	bls.n	80080a0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e0be      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a0:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	685b      	ldr	r3, [r3, #4]
 80080ac:	00db      	lsls	r3, r3, #3
 80080ae:	429a      	cmp	r2, r3
 80080b0:	d1eb      	bne.n	800808a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	f003 0302 	and.w	r3, r3, #2
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d010      	beq.n	80080e0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68da      	ldr	r2, [r3, #12]
 80080c2:	4b14      	ldr	r3, [pc, #80]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 80080c4:	699b      	ldr	r3, [r3, #24]
 80080c6:	f003 030f 	and.w	r3, r3, #15
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d208      	bcs.n	80080e0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080ce:	4b11      	ldr	r3, [pc, #68]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 80080d0:	699b      	ldr	r3, [r3, #24]
 80080d2:	f023 020f 	bic.w	r2, r3, #15
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	490e      	ldr	r1, [pc, #56]	; (8008114 <HAL_RCC_ClockConfig+0x244>)
 80080dc:	4313      	orrs	r3, r2
 80080de:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080e0:	4b0b      	ldr	r3, [pc, #44]	; (8008110 <HAL_RCC_ClockConfig+0x240>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f003 030f 	and.w	r3, r3, #15
 80080e8:	683a      	ldr	r2, [r7, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d214      	bcs.n	8008118 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080ee:	4b08      	ldr	r3, [pc, #32]	; (8008110 <HAL_RCC_ClockConfig+0x240>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f023 020f 	bic.w	r2, r3, #15
 80080f6:	4906      	ldr	r1, [pc, #24]	; (8008110 <HAL_RCC_ClockConfig+0x240>)
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	4313      	orrs	r3, r2
 80080fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80080fe:	4b04      	ldr	r3, [pc, #16]	; (8008110 <HAL_RCC_ClockConfig+0x240>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f003 030f 	and.w	r3, r3, #15
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	429a      	cmp	r2, r3
 800810a:	d005      	beq.n	8008118 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e086      	b.n	800821e <HAL_RCC_ClockConfig+0x34e>
 8008110:	52002000 	.word	0x52002000
 8008114:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b00      	cmp	r3, #0
 8008122:	d010      	beq.n	8008146 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	691a      	ldr	r2, [r3, #16]
 8008128:	4b3f      	ldr	r3, [pc, #252]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 800812a:	699b      	ldr	r3, [r3, #24]
 800812c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008130:	429a      	cmp	r2, r3
 8008132:	d208      	bcs.n	8008146 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008134:	4b3c      	ldr	r3, [pc, #240]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	4939      	ldr	r1, [pc, #228]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008142:	4313      	orrs	r3, r2
 8008144:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0308 	and.w	r3, r3, #8
 800814e:	2b00      	cmp	r3, #0
 8008150:	d010      	beq.n	8008174 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	695a      	ldr	r2, [r3, #20]
 8008156:	4b34      	ldr	r3, [pc, #208]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008158:	69db      	ldr	r3, [r3, #28]
 800815a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800815e:	429a      	cmp	r2, r3
 8008160:	d208      	bcs.n	8008174 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008162:	4b31      	ldr	r3, [pc, #196]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008164:	69db      	ldr	r3, [r3, #28]
 8008166:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	492e      	ldr	r1, [pc, #184]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008170:	4313      	orrs	r3, r2
 8008172:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0310 	and.w	r3, r3, #16
 800817c:	2b00      	cmp	r3, #0
 800817e:	d010      	beq.n	80081a2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	699a      	ldr	r2, [r3, #24]
 8008184:	4b28      	ldr	r3, [pc, #160]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008186:	69db      	ldr	r3, [r3, #28]
 8008188:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800818c:	429a      	cmp	r2, r3
 800818e:	d208      	bcs.n	80081a2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008190:	4b25      	ldr	r3, [pc, #148]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	699b      	ldr	r3, [r3, #24]
 800819c:	4922      	ldr	r1, [pc, #136]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 800819e:	4313      	orrs	r3, r2
 80081a0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0320 	and.w	r3, r3, #32
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d010      	beq.n	80081d0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	69da      	ldr	r2, [r3, #28]
 80081b2:	4b1d      	ldr	r3, [pc, #116]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081b4:	6a1b      	ldr	r3, [r3, #32]
 80081b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d208      	bcs.n	80081d0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80081be:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	4917      	ldr	r1, [pc, #92]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081cc:	4313      	orrs	r3, r2
 80081ce:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80081d0:	f000 f834 	bl	800823c <HAL_RCC_GetSysClockFreq>
 80081d4:	4602      	mov	r2, r0
 80081d6:	4b14      	ldr	r3, [pc, #80]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	0a1b      	lsrs	r3, r3, #8
 80081dc:	f003 030f 	and.w	r3, r3, #15
 80081e0:	4912      	ldr	r1, [pc, #72]	; (800822c <HAL_RCC_ClockConfig+0x35c>)
 80081e2:	5ccb      	ldrb	r3, [r1, r3]
 80081e4:	f003 031f 	and.w	r3, r3, #31
 80081e8:	fa22 f303 	lsr.w	r3, r2, r3
 80081ec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80081ee:	4b0e      	ldr	r3, [pc, #56]	; (8008228 <HAL_RCC_ClockConfig+0x358>)
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	f003 030f 	and.w	r3, r3, #15
 80081f6:	4a0d      	ldr	r2, [pc, #52]	; (800822c <HAL_RCC_ClockConfig+0x35c>)
 80081f8:	5cd3      	ldrb	r3, [r2, r3]
 80081fa:	f003 031f 	and.w	r3, r3, #31
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	fa22 f303 	lsr.w	r3, r2, r3
 8008204:	4a0a      	ldr	r2, [pc, #40]	; (8008230 <HAL_RCC_ClockConfig+0x360>)
 8008206:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008208:	4a0a      	ldr	r2, [pc, #40]	; (8008234 <HAL_RCC_ClockConfig+0x364>)
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800820e:	4b0a      	ldr	r3, [pc, #40]	; (8008238 <HAL_RCC_ClockConfig+0x368>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4618      	mov	r0, r3
 8008214:	f7fb fe5e 	bl	8003ed4 <HAL_InitTick>
 8008218:	4603      	mov	r3, r0
 800821a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800821c:	7bfb      	ldrb	r3, [r7, #15]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3718      	adds	r7, #24
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	58024400 	.word	0x58024400
 800822c:	0800d644 	.word	0x0800d644
 8008230:	24000008 	.word	0x24000008
 8008234:	24000004 	.word	0x24000004
 8008238:	2400001c 	.word	0x2400001c

0800823c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800823c:	b480      	push	{r7}
 800823e:	b089      	sub	sp, #36	; 0x24
 8008240:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008242:	4bb3      	ldr	r3, [pc, #716]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008244:	691b      	ldr	r3, [r3, #16]
 8008246:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800824a:	2b18      	cmp	r3, #24
 800824c:	f200 8155 	bhi.w	80084fa <HAL_RCC_GetSysClockFreq+0x2be>
 8008250:	a201      	add	r2, pc, #4	; (adr r2, 8008258 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008256:	bf00      	nop
 8008258:	080082bd 	.word	0x080082bd
 800825c:	080084fb 	.word	0x080084fb
 8008260:	080084fb 	.word	0x080084fb
 8008264:	080084fb 	.word	0x080084fb
 8008268:	080084fb 	.word	0x080084fb
 800826c:	080084fb 	.word	0x080084fb
 8008270:	080084fb 	.word	0x080084fb
 8008274:	080084fb 	.word	0x080084fb
 8008278:	080082e3 	.word	0x080082e3
 800827c:	080084fb 	.word	0x080084fb
 8008280:	080084fb 	.word	0x080084fb
 8008284:	080084fb 	.word	0x080084fb
 8008288:	080084fb 	.word	0x080084fb
 800828c:	080084fb 	.word	0x080084fb
 8008290:	080084fb 	.word	0x080084fb
 8008294:	080084fb 	.word	0x080084fb
 8008298:	080082e9 	.word	0x080082e9
 800829c:	080084fb 	.word	0x080084fb
 80082a0:	080084fb 	.word	0x080084fb
 80082a4:	080084fb 	.word	0x080084fb
 80082a8:	080084fb 	.word	0x080084fb
 80082ac:	080084fb 	.word	0x080084fb
 80082b0:	080084fb 	.word	0x080084fb
 80082b4:	080084fb 	.word	0x080084fb
 80082b8:	080082ef 	.word	0x080082ef
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082bc:	4b94      	ldr	r3, [pc, #592]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f003 0320 	and.w	r3, r3, #32
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d009      	beq.n	80082dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80082c8:	4b91      	ldr	r3, [pc, #580]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	08db      	lsrs	r3, r3, #3
 80082ce:	f003 0303 	and.w	r3, r3, #3
 80082d2:	4a90      	ldr	r2, [pc, #576]	; (8008514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082d4:	fa22 f303 	lsr.w	r3, r2, r3
 80082d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80082da:	e111      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80082dc:	4b8d      	ldr	r3, [pc, #564]	; (8008514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80082de:	61bb      	str	r3, [r7, #24]
    break;
 80082e0:	e10e      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80082e2:	4b8d      	ldr	r3, [pc, #564]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80082e4:	61bb      	str	r3, [r7, #24]
    break;
 80082e6:	e10b      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80082e8:	4b8c      	ldr	r3, [pc, #560]	; (800851c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80082ea:	61bb      	str	r3, [r7, #24]
    break;
 80082ec:	e108      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082ee:	4b88      	ldr	r3, [pc, #544]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f2:	f003 0303 	and.w	r3, r3, #3
 80082f6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80082f8:	4b85      	ldr	r3, [pc, #532]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80082fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082fc:	091b      	lsrs	r3, r3, #4
 80082fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008302:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008304:	4b82      	ldr	r3, [pc, #520]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008308:	f003 0301 	and.w	r3, r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800830e:	4b80      	ldr	r3, [pc, #512]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008312:	08db      	lsrs	r3, r3, #3
 8008314:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008318:	68fa      	ldr	r2, [r7, #12]
 800831a:	fb02 f303 	mul.w	r3, r2, r3
 800831e:	ee07 3a90 	vmov	s15, r3
 8008322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008326:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	2b00      	cmp	r3, #0
 800832e:	f000 80e1 	beq.w	80084f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b02      	cmp	r3, #2
 8008336:	f000 8083 	beq.w	8008440 <HAL_RCC_GetSysClockFreq+0x204>
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b02      	cmp	r3, #2
 800833e:	f200 80a1 	bhi.w	8008484 <HAL_RCC_GetSysClockFreq+0x248>
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_RCC_GetSysClockFreq+0x114>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	2b01      	cmp	r3, #1
 800834c:	d056      	beq.n	80083fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800834e:	e099      	b.n	8008484 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008350:	4b6f      	ldr	r3, [pc, #444]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f003 0320 	and.w	r3, r3, #32
 8008358:	2b00      	cmp	r3, #0
 800835a:	d02d      	beq.n	80083b8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800835c:	4b6c      	ldr	r3, [pc, #432]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	08db      	lsrs	r3, r3, #3
 8008362:	f003 0303 	and.w	r3, r3, #3
 8008366:	4a6b      	ldr	r2, [pc, #428]	; (8008514 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008368:	fa22 f303 	lsr.w	r3, r2, r3
 800836c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	ee07 3a90 	vmov	s15, r3
 8008374:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b62      	ldr	r3, [pc, #392]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a02 	vldr	s12, [r7, #8]
 800839a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80083b6:	e087      	b.n	80084c8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008524 <HAL_RCC_GetSysClockFreq+0x2e8>
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b51      	ldr	r3, [pc, #324]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a02 	vldr	s12, [r7, #8]
 80083de:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fa:	e065      	b.n	80084c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008528 <HAL_RCC_GetSysClockFreq+0x2ec>
 800840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840e:	4b40      	ldr	r3, [pc, #256]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008422:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800843e:	e043      	b.n	80084c8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008440:	693b      	ldr	r3, [r7, #16]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800852c <HAL_RCC_GetSysClockFreq+0x2f0>
 800844e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008452:	4b2f      	ldr	r3, [pc, #188]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008456:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008462:	ed97 6a02 	vldr	s12, [r7, #8]
 8008466:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 800846a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008472:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008476:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008482:	e021      	b.n	80084c8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	ee07 3a90 	vmov	s15, r3
 800848a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008528 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008496:	4b1e      	ldr	r3, [pc, #120]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800849a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80084aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008520 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80084c8:	4b11      	ldr	r3, [pc, #68]	; (8008510 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084cc:	0a5b      	lsrs	r3, r3, #9
 80084ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084d2:	3301      	adds	r3, #1
 80084d4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80084e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ec:	ee17 3a90 	vmov	r3, s15
 80084f0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80084f2:	e005      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80084f4:	2300      	movs	r3, #0
 80084f6:	61bb      	str	r3, [r7, #24]
    break;
 80084f8:	e002      	b.n	8008500 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80084fa:	4b07      	ldr	r3, [pc, #28]	; (8008518 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80084fc:	61bb      	str	r3, [r7, #24]
    break;
 80084fe:	bf00      	nop
  }

  return sysclockfreq;
 8008500:	69bb      	ldr	r3, [r7, #24]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3724      	adds	r7, #36	; 0x24
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop
 8008510:	58024400 	.word	0x58024400
 8008514:	03d09000 	.word	0x03d09000
 8008518:	003d0900 	.word	0x003d0900
 800851c:	007a1200 	.word	0x007a1200
 8008520:	46000000 	.word	0x46000000
 8008524:	4c742400 	.word	0x4c742400
 8008528:	4a742400 	.word	0x4a742400
 800852c:	4af42400 	.word	0x4af42400

08008530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008536:	f7ff fe81 	bl	800823c <HAL_RCC_GetSysClockFreq>
 800853a:	4602      	mov	r2, r0
 800853c:	4b10      	ldr	r3, [pc, #64]	; (8008580 <HAL_RCC_GetHCLKFreq+0x50>)
 800853e:	699b      	ldr	r3, [r3, #24]
 8008540:	0a1b      	lsrs	r3, r3, #8
 8008542:	f003 030f 	and.w	r3, r3, #15
 8008546:	490f      	ldr	r1, [pc, #60]	; (8008584 <HAL_RCC_GetHCLKFreq+0x54>)
 8008548:	5ccb      	ldrb	r3, [r1, r3]
 800854a:	f003 031f 	and.w	r3, r3, #31
 800854e:	fa22 f303 	lsr.w	r3, r2, r3
 8008552:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008554:	4b0a      	ldr	r3, [pc, #40]	; (8008580 <HAL_RCC_GetHCLKFreq+0x50>)
 8008556:	699b      	ldr	r3, [r3, #24]
 8008558:	f003 030f 	and.w	r3, r3, #15
 800855c:	4a09      	ldr	r2, [pc, #36]	; (8008584 <HAL_RCC_GetHCLKFreq+0x54>)
 800855e:	5cd3      	ldrb	r3, [r2, r3]
 8008560:	f003 031f 	and.w	r3, r3, #31
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	fa22 f303 	lsr.w	r3, r2, r3
 800856a:	4a07      	ldr	r2, [pc, #28]	; (8008588 <HAL_RCC_GetHCLKFreq+0x58>)
 800856c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800856e:	4a07      	ldr	r2, [pc, #28]	; (800858c <HAL_RCC_GetHCLKFreq+0x5c>)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008574:	4b04      	ldr	r3, [pc, #16]	; (8008588 <HAL_RCC_GetHCLKFreq+0x58>)
 8008576:	681b      	ldr	r3, [r3, #0]
}
 8008578:	4618      	mov	r0, r3
 800857a:	3708      	adds	r7, #8
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	58024400 	.word	0x58024400
 8008584:	0800d644 	.word	0x0800d644
 8008588:	24000008 	.word	0x24000008
 800858c:	24000004 	.word	0x24000004

08008590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008594:	f7ff ffcc 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 8008598:	4602      	mov	r2, r0
 800859a:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800859c:	69db      	ldr	r3, [r3, #28]
 800859e:	091b      	lsrs	r3, r3, #4
 80085a0:	f003 0307 	and.w	r3, r3, #7
 80085a4:	4904      	ldr	r1, [pc, #16]	; (80085b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80085a6:	5ccb      	ldrb	r3, [r1, r3]
 80085a8:	f003 031f 	and.w	r3, r3, #31
 80085ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80085b0:	4618      	mov	r0, r3
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	58024400 	.word	0x58024400
 80085b8:	0800d644 	.word	0x0800d644

080085bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80085c0:	f7ff ffb6 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b06      	ldr	r3, [pc, #24]	; (80085e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	4904      	ldr	r1, [pc, #16]	; (80085e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80085d2:	5ccb      	ldrb	r3, [r1, r3]
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80085dc:	4618      	mov	r0, r3
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	58024400 	.word	0x58024400
 80085e4:	0800d644 	.word	0x0800d644

080085e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b086      	sub	sp, #24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80085f0:	2300      	movs	r3, #0
 80085f2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80085f4:	2300      	movs	r3, #0
 80085f6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008600:	2b00      	cmp	r3, #0
 8008602:	d03f      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800860c:	d02a      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800860e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008612:	d824      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008618:	d018      	beq.n	800864c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800861a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800861e:	d81e      	bhi.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008628:	d007      	beq.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800862a:	e018      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800862c:	4ba3      	ldr	r3, [pc, #652]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	4aa2      	ldr	r2, [pc, #648]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008632:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008636:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008638:	e015      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3304      	adds	r3, #4
 800863e:	2102      	movs	r1, #2
 8008640:	4618      	mov	r0, r3
 8008642:	f001 f9d5 	bl	80099f0 <RCCEx_PLL2_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800864a:	e00c      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	3324      	adds	r3, #36	; 0x24
 8008650:	2102      	movs	r1, #2
 8008652:	4618      	mov	r0, r3
 8008654:	f001 fa7e 	bl	8009b54 <RCCEx_PLL3_Config>
 8008658:	4603      	mov	r3, r0
 800865a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800865c:	e003      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	75fb      	strb	r3, [r7, #23]
      break;
 8008662:	e000      	b.n	8008666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008666:	7dfb      	ldrb	r3, [r7, #23]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d109      	bne.n	8008680 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800866c:	4b93      	ldr	r3, [pc, #588]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800866e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008678:	4990      	ldr	r1, [pc, #576]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800867a:	4313      	orrs	r3, r2
 800867c:	650b      	str	r3, [r1, #80]	; 0x50
 800867e:	e001      	b.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008680:	7dfb      	ldrb	r3, [r7, #23]
 8008682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800868c:	2b00      	cmp	r3, #0
 800868e:	d03d      	beq.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008694:	2b04      	cmp	r3, #4
 8008696:	d826      	bhi.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086b5 	.word	0x080086b5
 80086a4:	080086c3 	.word	0x080086c3
 80086a8:	080086d5 	.word	0x080086d5
 80086ac:	080086ed 	.word	0x080086ed
 80086b0:	080086ed 	.word	0x080086ed
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086b4:	4b81      	ldr	r3, [pc, #516]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086b8:	4a80      	ldr	r2, [pc, #512]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086c0:	e015      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	3304      	adds	r3, #4
 80086c6:	2100      	movs	r1, #0
 80086c8:	4618      	mov	r0, r3
 80086ca:	f001 f991 	bl	80099f0 <RCCEx_PLL2_Config>
 80086ce:	4603      	mov	r3, r0
 80086d0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086d2:	e00c      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	3324      	adds	r3, #36	; 0x24
 80086d8:	2100      	movs	r1, #0
 80086da:	4618      	mov	r0, r3
 80086dc:	f001 fa3a 	bl	8009b54 <RCCEx_PLL3_Config>
 80086e0:	4603      	mov	r3, r0
 80086e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80086e4:	e003      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	75fb      	strb	r3, [r7, #23]
      break;
 80086ea:	e000      	b.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80086ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086ee:	7dfb      	ldrb	r3, [r7, #23]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d109      	bne.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80086f4:	4b71      	ldr	r3, [pc, #452]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80086f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086f8:	f023 0207 	bic.w	r2, r3, #7
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008700:	496e      	ldr	r1, [pc, #440]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008702:	4313      	orrs	r3, r2
 8008704:	650b      	str	r3, [r1, #80]	; 0x50
 8008706:	e001      	b.n	800870c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008708:	7dfb      	ldrb	r3, [r7, #23]
 800870a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008714:	2b00      	cmp	r3, #0
 8008716:	d042      	beq.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800871c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008720:	d02b      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008726:	d825      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008728:	2bc0      	cmp	r3, #192	; 0xc0
 800872a:	d028      	beq.n	800877e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800872c:	2bc0      	cmp	r3, #192	; 0xc0
 800872e:	d821      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008730:	2b80      	cmp	r3, #128	; 0x80
 8008732:	d016      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008734:	2b80      	cmp	r3, #128	; 0x80
 8008736:	d81d      	bhi.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008738:	2b00      	cmp	r3, #0
 800873a:	d002      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800873c:	2b40      	cmp	r3, #64	; 0x40
 800873e:	d007      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008740:	e018      	b.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008742:	4b5e      	ldr	r3, [pc, #376]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008746:	4a5d      	ldr	r2, [pc, #372]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800874c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800874e:	e017      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3304      	adds	r3, #4
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f94a 	bl	80099f0 <RCCEx_PLL2_Config>
 800875c:	4603      	mov	r3, r0
 800875e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008760:	e00e      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3324      	adds	r3, #36	; 0x24
 8008766:	2100      	movs	r1, #0
 8008768:	4618      	mov	r0, r3
 800876a:	f001 f9f3 	bl	8009b54 <RCCEx_PLL3_Config>
 800876e:	4603      	mov	r3, r0
 8008770:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008772:	e005      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	75fb      	strb	r3, [r7, #23]
      break;
 8008778:	e002      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800877a:	bf00      	nop
 800877c:	e000      	b.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800877e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d109      	bne.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008786:	4b4d      	ldr	r3, [pc, #308]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800878a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008792:	494a      	ldr	r1, [pc, #296]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008794:	4313      	orrs	r3, r2
 8008796:	650b      	str	r3, [r1, #80]	; 0x50
 8008798:	e001      	b.n	800879e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d049      	beq.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80087b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087b4:	d030      	beq.n	8008818 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80087b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80087ba:	d82a      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80087bc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80087c0:	d02c      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80087c2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80087c6:	d824      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80087c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087cc:	d018      	beq.n	8008800 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80087ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087d2:	d81e      	bhi.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d003      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80087d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087dc:	d007      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0x206>
 80087de:	e018      	b.n	8008812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e0:	4b36      	ldr	r3, [pc, #216]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e4:	4a35      	ldr	r2, [pc, #212]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087ec:	e017      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	3304      	adds	r3, #4
 80087f2:	2100      	movs	r1, #0
 80087f4:	4618      	mov	r0, r3
 80087f6:	f001 f8fb 	bl	80099f0 <RCCEx_PLL2_Config>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80087fe:	e00e      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	3324      	adds	r3, #36	; 0x24
 8008804:	2100      	movs	r1, #0
 8008806:	4618      	mov	r0, r3
 8008808:	f001 f9a4 	bl	8009b54 <RCCEx_PLL3_Config>
 800880c:	4603      	mov	r3, r0
 800880e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008810:	e005      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008812:	2301      	movs	r3, #1
 8008814:	75fb      	strb	r3, [r7, #23]
      break;
 8008816:	e002      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008818:	bf00      	nop
 800881a:	e000      	b.n	800881e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800881c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800881e:	7dfb      	ldrb	r3, [r7, #23]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d10a      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008824:	4b25      	ldr	r3, [pc, #148]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008828:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008832:	4922      	ldr	r1, [pc, #136]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008834:	4313      	orrs	r3, r2
 8008836:	658b      	str	r3, [r1, #88]	; 0x58
 8008838:	e001      	b.n	800883e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883a:	7dfb      	ldrb	r3, [r7, #23]
 800883c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008846:	2b00      	cmp	r3, #0
 8008848:	d04b      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008850:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008854:	d030      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008856:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800885a:	d82a      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800885c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008860:	d02e      	beq.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008862:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008866:	d824      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008868:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800886c:	d018      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800886e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008872:	d81e      	bhi.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800887c:	d007      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800887e:	e018      	b.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008880:	4b0e      	ldr	r3, [pc, #56]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a0d      	ldr	r2, [pc, #52]	; (80088bc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800888a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800888c:	e019      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	3304      	adds	r3, #4
 8008892:	2100      	movs	r1, #0
 8008894:	4618      	mov	r0, r3
 8008896:	f001 f8ab 	bl	80099f0 <RCCEx_PLL2_Config>
 800889a:	4603      	mov	r3, r0
 800889c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800889e:	e010      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3324      	adds	r3, #36	; 0x24
 80088a4:	2100      	movs	r1, #0
 80088a6:	4618      	mov	r0, r3
 80088a8:	f001 f954 	bl	8009b54 <RCCEx_PLL3_Config>
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80088b0:	e007      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	75fb      	strb	r3, [r7, #23]
      break;
 80088b6:	e004      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80088b8:	bf00      	nop
 80088ba:	e002      	b.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80088bc:	58024400 	.word	0x58024400
      break;
 80088c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10a      	bne.n	80088de <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80088c8:	4b99      	ldr	r3, [pc, #612]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088cc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80088d6:	4996      	ldr	r1, [pc, #600]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	658b      	str	r3, [r1, #88]	; 0x58
 80088dc:	e001      	b.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d032      	beq.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088f2:	2b30      	cmp	r3, #48	; 0x30
 80088f4:	d01c      	beq.n	8008930 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80088f6:	2b30      	cmp	r3, #48	; 0x30
 80088f8:	d817      	bhi.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d00c      	beq.n	8008918 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80088fe:	2b20      	cmp	r3, #32
 8008900:	d813      	bhi.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008902:	2b00      	cmp	r3, #0
 8008904:	d016      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008906:	2b10      	cmp	r3, #16
 8008908:	d10f      	bne.n	800892a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800890a:	4b89      	ldr	r3, [pc, #548]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800890c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890e:	4a88      	ldr	r2, [pc, #544]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008914:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008916:	e00e      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	3304      	adds	r3, #4
 800891c:	2102      	movs	r1, #2
 800891e:	4618      	mov	r0, r3
 8008920:	f001 f866 	bl	80099f0 <RCCEx_PLL2_Config>
 8008924:	4603      	mov	r3, r0
 8008926:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008928:	e005      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	75fb      	strb	r3, [r7, #23]
      break;
 800892e:	e002      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008930:	bf00      	nop
 8008932:	e000      	b.n	8008936 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008936:	7dfb      	ldrb	r3, [r7, #23]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d109      	bne.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800893c:	4b7c      	ldr	r3, [pc, #496]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800893e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008940:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008948:	4979      	ldr	r1, [pc, #484]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800894a:	4313      	orrs	r3, r2
 800894c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800894e:	e001      	b.n	8008954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008950:	7dfb      	ldrb	r3, [r7, #23]
 8008952:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d047      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008964:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008968:	d030      	beq.n	80089cc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800896a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800896e:	d82a      	bhi.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008970:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008974:	d02c      	beq.n	80089d0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800897a:	d824      	bhi.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800897c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008980:	d018      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008986:	d81e      	bhi.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008988:	2b00      	cmp	r3, #0
 800898a:	d003      	beq.n	8008994 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800898c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008990:	d007      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008992:	e018      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008994:	4b66      	ldr	r3, [pc, #408]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	4a65      	ldr	r2, [pc, #404]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800899a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800899e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80089a0:	e017      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	3304      	adds	r3, #4
 80089a6:	2100      	movs	r1, #0
 80089a8:	4618      	mov	r0, r3
 80089aa:	f001 f821 	bl	80099f0 <RCCEx_PLL2_Config>
 80089ae:	4603      	mov	r3, r0
 80089b0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80089b2:	e00e      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	3324      	adds	r3, #36	; 0x24
 80089b8:	2100      	movs	r1, #0
 80089ba:	4618      	mov	r0, r3
 80089bc:	f001 f8ca 	bl	8009b54 <RCCEx_PLL3_Config>
 80089c0:	4603      	mov	r3, r0
 80089c2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80089c4:	e005      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ca:	e002      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80089cc:	bf00      	nop
 80089ce:	e000      	b.n	80089d2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80089d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d109      	bne.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80089d8:	4b55      	ldr	r3, [pc, #340]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089dc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e4:	4952      	ldr	r1, [pc, #328]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089e6:	4313      	orrs	r3, r2
 80089e8:	650b      	str	r3, [r1, #80]	; 0x50
 80089ea:	e001      	b.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d049      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a04:	d02e      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008a06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a0a:	d828      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a10:	d02a      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008a12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008a16:	d822      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a1c:	d026      	beq.n	8008a6c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008a1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008a22:	d81c      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a28:	d010      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008a2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008a2e:	d816      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d01d      	beq.n	8008a70 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a38:	d111      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	2101      	movs	r1, #1
 8008a40:	4618      	mov	r0, r3
 8008a42:	f000 ffd5 	bl	80099f0 <RCCEx_PLL2_Config>
 8008a46:	4603      	mov	r3, r0
 8008a48:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008a4a:	e012      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3324      	adds	r3, #36	; 0x24
 8008a50:	2101      	movs	r1, #1
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 f87e 	bl	8009b54 <RCCEx_PLL3_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008a5c:	e009      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	75fb      	strb	r3, [r7, #23]
      break;
 8008a62:	e006      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008a64:	bf00      	nop
 8008a66:	e004      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008a68:	bf00      	nop
 8008a6a:	e002      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008a6c:	bf00      	nop
 8008a6e:	e000      	b.n	8008a72 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a72:	7dfb      	ldrb	r3, [r7, #23]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d109      	bne.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008a78:	4b2d      	ldr	r3, [pc, #180]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a7c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a84:	492a      	ldr	r1, [pc, #168]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a86:	4313      	orrs	r3, r2
 8008a88:	650b      	str	r3, [r1, #80]	; 0x50
 8008a8a:	e001      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a8c:	7dfb      	ldrb	r3, [r7, #23]
 8008a8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d04d      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aa6:	d02e      	beq.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008aac:	d828      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab2:	d02a      	beq.n	8008b0a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab8:	d822      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008aba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008abe:	d026      	beq.n	8008b0e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008ac4:	d81c      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008aca:	d010      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008acc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ad0:	d816      	bhi.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d01d      	beq.n	8008b12 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008ad6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ada:	d111      	bne.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 ff84 	bl	80099f0 <RCCEx_PLL2_Config>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008aec:	e012      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	3324      	adds	r3, #36	; 0x24
 8008af2:	2101      	movs	r1, #1
 8008af4:	4618      	mov	r0, r3
 8008af6:	f001 f82d 	bl	8009b54 <RCCEx_PLL3_Config>
 8008afa:	4603      	mov	r3, r0
 8008afc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008afe:	e009      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	75fb      	strb	r3, [r7, #23]
      break;
 8008b04:	e006      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b06:	bf00      	nop
 8008b08:	e004      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b0a:	bf00      	nop
 8008b0c:	e002      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b0e:	bf00      	nop
 8008b10:	e000      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008b12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10c      	bne.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008b1a:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b1e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008b28:	4901      	ldr	r1, [pc, #4]	; (8008b30 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	658b      	str	r3, [r1, #88]	; 0x58
 8008b2e:	e003      	b.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008b30:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
 8008b36:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d02f      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b4c:	d00e      	beq.n	8008b6c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008b4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b52:	d814      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d015      	beq.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b5c:	d10f      	bne.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b5e:	4baf      	ldr	r3, [pc, #700]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b62:	4aae      	ldr	r2, [pc, #696]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008b6a:	e00c      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
 8008b70:	2101      	movs	r1, #1
 8008b72:	4618      	mov	r0, r3
 8008b74:	f000 ff3c 	bl	80099f0 <RCCEx_PLL2_Config>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008b7c:	e003      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	75fb      	strb	r3, [r7, #23]
      break;
 8008b82:	e000      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b86:	7dfb      	ldrb	r3, [r7, #23]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d109      	bne.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b8c:	4ba3      	ldr	r3, [pc, #652]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b98:	49a0      	ldr	r1, [pc, #640]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	650b      	str	r3, [r1, #80]	; 0x50
 8008b9e:	e001      	b.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ba0:	7dfb      	ldrb	r3, [r7, #23]
 8008ba2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d032      	beq.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bb4:	2b03      	cmp	r3, #3
 8008bb6:	d81b      	bhi.n	8008bf0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008bb8:	a201      	add	r2, pc, #4	; (adr r2, 8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bbe:	bf00      	nop
 8008bc0:	08008bf7 	.word	0x08008bf7
 8008bc4:	08008bd1 	.word	0x08008bd1
 8008bc8:	08008bdf 	.word	0x08008bdf
 8008bcc:	08008bf7 	.word	0x08008bf7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd0:	4b92      	ldr	r3, [pc, #584]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd4:	4a91      	ldr	r2, [pc, #580]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008bdc:	e00c      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	3304      	adds	r3, #4
 8008be2:	2102      	movs	r1, #2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 ff03 	bl	80099f0 <RCCEx_PLL2_Config>
 8008bea:	4603      	mov	r3, r0
 8008bec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008bee:	e003      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	75fb      	strb	r3, [r7, #23]
      break;
 8008bf4:	e000      	b.n	8008bf8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008bf8:	7dfb      	ldrb	r3, [r7, #23]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d109      	bne.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008bfe:	4b87      	ldr	r3, [pc, #540]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c02:	f023 0203 	bic.w	r2, r3, #3
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c0a:	4984      	ldr	r1, [pc, #528]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c0c:	4313      	orrs	r3, r2
 8008c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008c10:	e001      	b.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c12:	7dfb      	ldrb	r3, [r7, #23]
 8008c14:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8086 	beq.w	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c24:	4b7e      	ldr	r3, [pc, #504]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a7d      	ldr	r2, [pc, #500]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008c30:	f7fb f99a 	bl	8003f68 <HAL_GetTick>
 8008c34:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c36:	e009      	b.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c38:	f7fb f996 	bl	8003f68 <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	2b64      	cmp	r3, #100	; 0x64
 8008c44:	d902      	bls.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	75fb      	strb	r3, [r7, #23]
        break;
 8008c4a:	e005      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008c4c:	4b74      	ldr	r3, [pc, #464]	; (8008e20 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d0ef      	beq.n	8008c38 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008c58:	7dfb      	ldrb	r3, [r7, #23]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d166      	bne.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008c5e:	4b6f      	ldr	r3, [pc, #444]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c60:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008c68:	4053      	eors	r3, r2
 8008c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d013      	beq.n	8008c9a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c72:	4b6a      	ldr	r3, [pc, #424]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c7a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008c7c:	4b67      	ldr	r3, [pc, #412]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c80:	4a66      	ldr	r2, [pc, #408]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c86:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008c88:	4b64      	ldr	r3, [pc, #400]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8c:	4a63      	ldr	r2, [pc, #396]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c92:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008c94:	4a61      	ldr	r2, [pc, #388]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008ca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca4:	d115      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca6:	f7fb f95f 	bl	8003f68 <HAL_GetTick>
 8008caa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cac:	e00b      	b.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cae:	f7fb f95b 	bl	8003f68 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d902      	bls.n	8008cc6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	75fb      	strb	r3, [r7, #23]
            break;
 8008cc4:	e005      	b.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008cc6:	4b55      	ldr	r3, [pc, #340]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	f003 0302 	and.w	r3, r3, #2
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0ed      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008cd2:	7dfb      	ldrb	r3, [r7, #23]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d126      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008ce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ce6:	d10d      	bne.n	8008d04 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008ce8:	4b4c      	ldr	r3, [pc, #304]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008cf6:	0919      	lsrs	r1, r3, #4
 8008cf8:	4b4a      	ldr	r3, [pc, #296]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008cfa:	400b      	ands	r3, r1
 8008cfc:	4947      	ldr	r1, [pc, #284]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	610b      	str	r3, [r1, #16]
 8008d02:	e005      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008d04:	4b45      	ldr	r3, [pc, #276]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d06:	691b      	ldr	r3, [r3, #16]
 8008d08:	4a44      	ldr	r2, [pc, #272]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d0a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008d0e:	6113      	str	r3, [r2, #16]
 8008d10:	4b42      	ldr	r3, [pc, #264]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008d1e:	493f      	ldr	r1, [pc, #252]	; (8008e1c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	670b      	str	r3, [r1, #112]	; 0x70
 8008d24:	e004      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008d26:	7dfb      	ldrb	r3, [r7, #23]
 8008d28:	75bb      	strb	r3, [r7, #22]
 8008d2a:	e001      	b.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 8085 	beq.w	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008d42:	2b28      	cmp	r3, #40	; 0x28
 8008d44:	d866      	bhi.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008d46:	a201      	add	r2, pc, #4	; (adr r2, 8008d4c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d4c:	08008e29 	.word	0x08008e29
 8008d50:	08008e15 	.word	0x08008e15
 8008d54:	08008e15 	.word	0x08008e15
 8008d58:	08008e15 	.word	0x08008e15
 8008d5c:	08008e15 	.word	0x08008e15
 8008d60:	08008e15 	.word	0x08008e15
 8008d64:	08008e15 	.word	0x08008e15
 8008d68:	08008e15 	.word	0x08008e15
 8008d6c:	08008df1 	.word	0x08008df1
 8008d70:	08008e15 	.word	0x08008e15
 8008d74:	08008e15 	.word	0x08008e15
 8008d78:	08008e15 	.word	0x08008e15
 8008d7c:	08008e15 	.word	0x08008e15
 8008d80:	08008e15 	.word	0x08008e15
 8008d84:	08008e15 	.word	0x08008e15
 8008d88:	08008e15 	.word	0x08008e15
 8008d8c:	08008e03 	.word	0x08008e03
 8008d90:	08008e15 	.word	0x08008e15
 8008d94:	08008e15 	.word	0x08008e15
 8008d98:	08008e15 	.word	0x08008e15
 8008d9c:	08008e15 	.word	0x08008e15
 8008da0:	08008e15 	.word	0x08008e15
 8008da4:	08008e15 	.word	0x08008e15
 8008da8:	08008e15 	.word	0x08008e15
 8008dac:	08008e29 	.word	0x08008e29
 8008db0:	08008e15 	.word	0x08008e15
 8008db4:	08008e15 	.word	0x08008e15
 8008db8:	08008e15 	.word	0x08008e15
 8008dbc:	08008e15 	.word	0x08008e15
 8008dc0:	08008e15 	.word	0x08008e15
 8008dc4:	08008e15 	.word	0x08008e15
 8008dc8:	08008e15 	.word	0x08008e15
 8008dcc:	08008e29 	.word	0x08008e29
 8008dd0:	08008e15 	.word	0x08008e15
 8008dd4:	08008e15 	.word	0x08008e15
 8008dd8:	08008e15 	.word	0x08008e15
 8008ddc:	08008e15 	.word	0x08008e15
 8008de0:	08008e15 	.word	0x08008e15
 8008de4:	08008e15 	.word	0x08008e15
 8008de8:	08008e15 	.word	0x08008e15
 8008dec:	08008e29 	.word	0x08008e29
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	3304      	adds	r3, #4
 8008df4:	2101      	movs	r1, #1
 8008df6:	4618      	mov	r0, r3
 8008df8:	f000 fdfa 	bl	80099f0 <RCCEx_PLL2_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008e00:	e013      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	3324      	adds	r3, #36	; 0x24
 8008e06:	2101      	movs	r1, #1
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f000 fea3 	bl	8009b54 <RCCEx_PLL3_Config>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008e12:	e00a      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	75fb      	strb	r3, [r7, #23]
      break;
 8008e18:	e007      	b.n	8008e2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008e1a:	bf00      	nop
 8008e1c:	58024400 	.word	0x58024400
 8008e20:	58024800 	.word	0x58024800
 8008e24:	00ffffcf 	.word	0x00ffffcf
      break;
 8008e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e2a:	7dfb      	ldrb	r3, [r7, #23]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d109      	bne.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008e30:	4b96      	ldr	r3, [pc, #600]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e34:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e3c:	4993      	ldr	r1, [pc, #588]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008e3e:	4313      	orrs	r3, r2
 8008e40:	654b      	str	r3, [r1, #84]	; 0x54
 8008e42:	e001      	b.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e44:	7dfb      	ldrb	r3, [r7, #23]
 8008e46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f003 0302 	and.w	r3, r3, #2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d038      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e58:	2b05      	cmp	r3, #5
 8008e5a:	d821      	bhi.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008e5c:	a201      	add	r2, pc, #4	; (adr r2, 8008e64 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008ea7 	.word	0x08008ea7
 8008e68:	08008e7d 	.word	0x08008e7d
 8008e6c:	08008e8f 	.word	0x08008e8f
 8008e70:	08008ea7 	.word	0x08008ea7
 8008e74:	08008ea7 	.word	0x08008ea7
 8008e78:	08008ea7 	.word	0x08008ea7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	3304      	adds	r3, #4
 8008e80:	2101      	movs	r1, #1
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 fdb4 	bl	80099f0 <RCCEx_PLL2_Config>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008e8c:	e00c      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	3324      	adds	r3, #36	; 0x24
 8008e92:	2101      	movs	r1, #1
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fe5d 	bl	8009b54 <RCCEx_PLL3_Config>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008e9e:	e003      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ea4:	e000      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008ea6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d109      	bne.n	8008ec2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008eae:	4b77      	ldr	r3, [pc, #476]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008eb2:	f023 0207 	bic.w	r2, r3, #7
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eba:	4974      	ldr	r1, [pc, #464]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	654b      	str	r3, [r1, #84]	; 0x54
 8008ec0:	e001      	b.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec2:	7dfb      	ldrb	r3, [r7, #23]
 8008ec4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0304 	and.w	r3, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d03a      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed8:	2b05      	cmp	r3, #5
 8008eda:	d821      	bhi.n	8008f20 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008edc:	a201      	add	r2, pc, #4	; (adr r2, 8008ee4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee2:	bf00      	nop
 8008ee4:	08008f27 	.word	0x08008f27
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f0f 	.word	0x08008f0f
 8008ef0:	08008f27 	.word	0x08008f27
 8008ef4:	08008f27 	.word	0x08008f27
 8008ef8:	08008f27 	.word	0x08008f27
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	3304      	adds	r3, #4
 8008f00:	2101      	movs	r1, #1
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 fd74 	bl	80099f0 <RCCEx_PLL2_Config>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008f0c:	e00c      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	3324      	adds	r3, #36	; 0x24
 8008f12:	2101      	movs	r1, #1
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 fe1d 	bl	8009b54 <RCCEx_PLL3_Config>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008f1e:	e003      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	75fb      	strb	r3, [r7, #23]
      break;
 8008f24:	e000      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8008f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f28:	7dfb      	ldrb	r3, [r7, #23]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10a      	bne.n	8008f44 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f2e:	4b57      	ldr	r3, [pc, #348]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f32:	f023 0207 	bic.w	r2, r3, #7
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3c:	4953      	ldr	r1, [pc, #332]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	658b      	str	r3, [r1, #88]	; 0x58
 8008f42:	e001      	b.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0320 	and.w	r3, r3, #32
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d04b      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f5e:	d02e      	beq.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8008f60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f64:	d828      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f6a:	d02a      	beq.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f70:	d822      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008f72:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f76:	d026      	beq.n	8008fc6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8008f78:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008f7c:	d81c      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008f7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f82:	d010      	beq.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8008f84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f88:	d816      	bhi.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d01d      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8008f8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f92:	d111      	bne.n	8008fb8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	3304      	adds	r3, #4
 8008f98:	2100      	movs	r1, #0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f000 fd28 	bl	80099f0 <RCCEx_PLL2_Config>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008fa4:	e012      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	3324      	adds	r3, #36	; 0x24
 8008faa:	2102      	movs	r1, #2
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fdd1 	bl	8009b54 <RCCEx_PLL3_Config>
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008fb6:	e009      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fb8:	2301      	movs	r3, #1
 8008fba:	75fb      	strb	r3, [r7, #23]
      break;
 8008fbc:	e006      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008fbe:	bf00      	nop
 8008fc0:	e004      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008fc2:	bf00      	nop
 8008fc4:	e002      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008fc6:	bf00      	nop
 8008fc8:	e000      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008fca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fcc:	7dfb      	ldrb	r3, [r7, #23]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10a      	bne.n	8008fe8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008fd2:	4b2e      	ldr	r3, [pc, #184]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fd6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fe0:	492a      	ldr	r1, [pc, #168]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	654b      	str	r3, [r1, #84]	; 0x54
 8008fe6:	e001      	b.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fe8:	7dfb      	ldrb	r3, [r7, #23]
 8008fea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d04d      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ffe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009002:	d02e      	beq.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009004:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009008:	d828      	bhi.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800900a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900e:	d02a      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009014:	d822      	bhi.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009016:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800901a:	d026      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800901c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009020:	d81c      	bhi.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009026:	d010      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8009028:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800902c:	d816      	bhi.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800902e:	2b00      	cmp	r3, #0
 8009030:	d01d      	beq.n	800906e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009036:	d111      	bne.n	800905c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	3304      	adds	r3, #4
 800903c:	2100      	movs	r1, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f000 fcd6 	bl	80099f0 <RCCEx_PLL2_Config>
 8009044:	4603      	mov	r3, r0
 8009046:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009048:	e012      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	3324      	adds	r3, #36	; 0x24
 800904e:	2102      	movs	r1, #2
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fd7f 	bl	8009b54 <RCCEx_PLL3_Config>
 8009056:	4603      	mov	r3, r0
 8009058:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800905a:	e009      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800905c:	2301      	movs	r3, #1
 800905e:	75fb      	strb	r3, [r7, #23]
      break;
 8009060:	e006      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009062:	bf00      	nop
 8009064:	e004      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009066:	bf00      	nop
 8009068:	e002      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800906a:	bf00      	nop
 800906c:	e000      	b.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800906e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009070:	7dfb      	ldrb	r3, [r7, #23]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10c      	bne.n	8009090 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009076:	4b05      	ldr	r3, [pc, #20]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800907a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009084:	4901      	ldr	r1, [pc, #4]	; (800908c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009086:	4313      	orrs	r3, r2
 8009088:	658b      	str	r3, [r1, #88]	; 0x58
 800908a:	e003      	b.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800908c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
 8009092:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909c:	2b00      	cmp	r3, #0
 800909e:	d04b      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80090a6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090aa:	d02e      	beq.n	800910a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80090ac:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80090b0:	d828      	bhi.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80090b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090b6:	d02a      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80090b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090bc:	d822      	bhi.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80090be:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80090c2:	d026      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80090c4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80090c8:	d81c      	bhi.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80090ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090ce:	d010      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80090d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090d4:	d816      	bhi.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d01d      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80090da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090de:	d111      	bne.n	8009104 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	3304      	adds	r3, #4
 80090e4:	2100      	movs	r1, #0
 80090e6:	4618      	mov	r0, r3
 80090e8:	f000 fc82 	bl	80099f0 <RCCEx_PLL2_Config>
 80090ec:	4603      	mov	r3, r0
 80090ee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80090f0:	e012      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	3324      	adds	r3, #36	; 0x24
 80090f6:	2102      	movs	r1, #2
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 fd2b 	bl	8009b54 <RCCEx_PLL3_Config>
 80090fe:	4603      	mov	r3, r0
 8009100:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009102:	e009      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	75fb      	strb	r3, [r7, #23]
      break;
 8009108:	e006      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800910a:	bf00      	nop
 800910c:	e004      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800910e:	bf00      	nop
 8009110:	e002      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009112:	bf00      	nop
 8009114:	e000      	b.n	8009118 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009116:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009118:	7dfb      	ldrb	r3, [r7, #23]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d10a      	bne.n	8009134 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800911e:	4b9d      	ldr	r3, [pc, #628]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009122:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800912c:	4999      	ldr	r1, [pc, #612]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800912e:	4313      	orrs	r3, r2
 8009130:	658b      	str	r3, [r1, #88]	; 0x58
 8009132:	e001      	b.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009134:	7dfb      	ldrb	r3, [r7, #23]
 8009136:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f003 0308 	and.w	r3, r3, #8
 8009140:	2b00      	cmp	r3, #0
 8009142:	d01a      	beq.n	800917a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800914a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800914e:	d10a      	bne.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3324      	adds	r3, #36	; 0x24
 8009154:	2102      	movs	r1, #2
 8009156:	4618      	mov	r0, r3
 8009158:	f000 fcfc 	bl	8009b54 <RCCEx_PLL3_Config>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009162:	2301      	movs	r3, #1
 8009164:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009166:	4b8b      	ldr	r3, [pc, #556]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800916a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009174:	4987      	ldr	r1, [pc, #540]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009176:	4313      	orrs	r3, r2
 8009178:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0310 	and.w	r3, r3, #16
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01a      	beq.n	80091bc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800918c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009190:	d10a      	bne.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	3324      	adds	r3, #36	; 0x24
 8009196:	2102      	movs	r1, #2
 8009198:	4618      	mov	r0, r3
 800919a:	f000 fcdb 	bl	8009b54 <RCCEx_PLL3_Config>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d001      	beq.n	80091a8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80091a8:	4b7a      	ldr	r3, [pc, #488]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80091b6:	4977      	ldr	r1, [pc, #476]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d034      	beq.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80091ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091d2:	d01d      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80091d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091d8:	d817      	bhi.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d003      	beq.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80091de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e2:	d009      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80091e4:	e011      	b.n	800920a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	3304      	adds	r3, #4
 80091ea:	2100      	movs	r1, #0
 80091ec:	4618      	mov	r0, r3
 80091ee:	f000 fbff 	bl	80099f0 <RCCEx_PLL2_Config>
 80091f2:	4603      	mov	r3, r0
 80091f4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80091f6:	e00c      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	3324      	adds	r3, #36	; 0x24
 80091fc:	2102      	movs	r1, #2
 80091fe:	4618      	mov	r0, r3
 8009200:	f000 fca8 	bl	8009b54 <RCCEx_PLL3_Config>
 8009204:	4603      	mov	r3, r0
 8009206:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8009208:	e003      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800920a:	2301      	movs	r3, #1
 800920c:	75fb      	strb	r3, [r7, #23]
      break;
 800920e:	e000      	b.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009210:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009212:	7dfb      	ldrb	r3, [r7, #23]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d10a      	bne.n	800922e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009218:	4b5e      	ldr	r3, [pc, #376]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800921a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800921c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009226:	495b      	ldr	r1, [pc, #364]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009228:	4313      	orrs	r3, r2
 800922a:	658b      	str	r3, [r1, #88]	; 0x58
 800922c:	e001      	b.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800922e:	7dfb      	ldrb	r3, [r7, #23]
 8009230:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d033      	beq.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009244:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009248:	d01c      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800924a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800924e:	d816      	bhi.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009254:	d003      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8009256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800925a:	d007      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800925c:	e00f      	b.n	800927e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800925e:	4b4d      	ldr	r3, [pc, #308]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	4a4c      	ldr	r2, [pc, #304]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009268:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800926a:	e00c      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	3324      	adds	r3, #36	; 0x24
 8009270:	2101      	movs	r1, #1
 8009272:	4618      	mov	r0, r3
 8009274:	f000 fc6e 	bl	8009b54 <RCCEx_PLL3_Config>
 8009278:	4603      	mov	r3, r0
 800927a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800927c:	e003      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800927e:	2301      	movs	r3, #1
 8009280:	75fb      	strb	r3, [r7, #23]
      break;
 8009282:	e000      	b.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8009284:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009286:	7dfb      	ldrb	r3, [r7, #23]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800928c:	4b41      	ldr	r3, [pc, #260]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800928e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800929a:	493e      	ldr	r1, [pc, #248]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800929c:	4313      	orrs	r3, r2
 800929e:	654b      	str	r3, [r1, #84]	; 0x54
 80092a0:	e001      	b.n	80092a6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d029      	beq.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80092ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092be:	d007      	beq.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80092c0:	e00f      	b.n	80092e2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092c2:	4b34      	ldr	r3, [pc, #208]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092c6:	4a33      	ldr	r2, [pc, #204]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80092ce:	e00b      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	3304      	adds	r3, #4
 80092d4:	2102      	movs	r1, #2
 80092d6:	4618      	mov	r0, r3
 80092d8:	f000 fb8a 	bl	80099f0 <RCCEx_PLL2_Config>
 80092dc:	4603      	mov	r3, r0
 80092de:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80092e0:	e002      	b.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	75fb      	strb	r3, [r7, #23]
      break;
 80092e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092e8:	7dfb      	ldrb	r3, [r7, #23]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d109      	bne.n	8009302 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80092ee:	4b29      	ldr	r3, [pc, #164]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092fa:	4926      	ldr	r1, [pc, #152]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092fc:	4313      	orrs	r3, r2
 80092fe:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009300:	e001      	b.n	8009306 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009302:	7dfb      	ldrb	r3, [r7, #23]
 8009304:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	3324      	adds	r3, #36	; 0x24
 8009316:	2102      	movs	r1, #2
 8009318:	4618      	mov	r0, r3
 800931a:	f000 fc1b 	bl	8009b54 <RCCEx_PLL3_Config>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009330:	2b00      	cmp	r3, #0
 8009332:	d033      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800933c:	d017      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800933e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009342:	d811      	bhi.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009348:	d013      	beq.n	8009372 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800934a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800934e:	d80b      	bhi.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009350:	2b00      	cmp	r3, #0
 8009352:	d010      	beq.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009354:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009358:	d106      	bne.n	8009368 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800935a:	4b0e      	ldr	r3, [pc, #56]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800935c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800935e:	4a0d      	ldr	r2, [pc, #52]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009364:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009366:	e007      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	75fb      	strb	r3, [r7, #23]
      break;
 800936c:	e004      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800936e:	bf00      	nop
 8009370:	e002      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009372:	bf00      	nop
 8009374:	e000      	b.n	8009378 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8009376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009378:	7dfb      	ldrb	r3, [r7, #23]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10c      	bne.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800937e:	4b05      	ldr	r3, [pc, #20]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800938a:	4902      	ldr	r1, [pc, #8]	; (8009394 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800938c:	4313      	orrs	r3, r2
 800938e:	654b      	str	r3, [r1, #84]	; 0x54
 8009390:	e004      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8009392:	bf00      	nop
 8009394:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d008      	beq.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80093a8:	4b31      	ldr	r3, [pc, #196]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b4:	492e      	ldr	r1, [pc, #184]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093b6:	4313      	orrs	r3, r2
 80093b8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d009      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80093c6:	4b2a      	ldr	r3, [pc, #168]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80093d4:	4926      	ldr	r1, [pc, #152]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093d6:	4313      	orrs	r3, r2
 80093d8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d008      	beq.n	80093f8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80093e6:	4b22      	ldr	r3, [pc, #136]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093f2:	491f      	ldr	r1, [pc, #124]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80093f4:	4313      	orrs	r3, r2
 80093f6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00d      	beq.n	8009420 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009404:	4b1a      	ldr	r3, [pc, #104]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009406:	691b      	ldr	r3, [r3, #16]
 8009408:	4a19      	ldr	r2, [pc, #100]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800940a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800940e:	6113      	str	r3, [r2, #16]
 8009410:	4b17      	ldr	r3, [pc, #92]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009412:	691a      	ldr	r2, [r3, #16]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800941a:	4915      	ldr	r1, [pc, #84]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800941c:	4313      	orrs	r3, r2
 800941e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2b00      	cmp	r3, #0
 8009426:	da08      	bge.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009428:	4b11      	ldr	r3, [pc, #68]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800942a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800942c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009434:	490e      	ldr	r1, [pc, #56]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009436:	4313      	orrs	r3, r2
 8009438:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d009      	beq.n	800945a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009446:	4b0a      	ldr	r3, [pc, #40]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800944a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009454:	4906      	ldr	r1, [pc, #24]	; (8009470 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009456:	4313      	orrs	r3, r2
 8009458:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800945a:	7dbb      	ldrb	r3, [r7, #22]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d101      	bne.n	8009464 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009460:	2300      	movs	r3, #0
 8009462:	e000      	b.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009464:	2301      	movs	r3, #1
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	58024400 	.word	0x58024400

08009474 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009478:	f7ff f85a 	bl	8008530 <HAL_RCC_GetHCLKFreq>
 800947c:	4602      	mov	r2, r0
 800947e:	4b06      	ldr	r3, [pc, #24]	; (8009498 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009480:	6a1b      	ldr	r3, [r3, #32]
 8009482:	091b      	lsrs	r3, r3, #4
 8009484:	f003 0307 	and.w	r3, r3, #7
 8009488:	4904      	ldr	r1, [pc, #16]	; (800949c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800948a:	5ccb      	ldrb	r3, [r1, r3]
 800948c:	f003 031f 	and.w	r3, r3, #31
 8009490:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009494:	4618      	mov	r0, r3
 8009496:	bd80      	pop	{r7, pc}
 8009498:	58024400 	.word	0x58024400
 800949c:	0800d644 	.word	0x0800d644

080094a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b089      	sub	sp, #36	; 0x24
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094a8:	4ba1      	ldr	r3, [pc, #644]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ac:	f003 0303 	and.w	r3, r3, #3
 80094b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80094b2:	4b9f      	ldr	r3, [pc, #636]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b6:	0b1b      	lsrs	r3, r3, #12
 80094b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80094bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80094be:	4b9c      	ldr	r3, [pc, #624]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c2:	091b      	lsrs	r3, r3, #4
 80094c4:	f003 0301 	and.w	r3, r3, #1
 80094c8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80094ca:	4b99      	ldr	r3, [pc, #612]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ce:	08db      	lsrs	r3, r3, #3
 80094d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094d4:	693a      	ldr	r2, [r7, #16]
 80094d6:	fb02 f303 	mul.w	r3, r2, r3
 80094da:	ee07 3a90 	vmov	s15, r3
 80094de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8111 	beq.w	8009710 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	2b02      	cmp	r3, #2
 80094f2:	f000 8083 	beq.w	80095fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80094f6:	69bb      	ldr	r3, [r7, #24]
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	f200 80a1 	bhi.w	8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80094fe:	69bb      	ldr	r3, [r7, #24]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d003      	beq.n	800950c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009504:	69bb      	ldr	r3, [r7, #24]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d056      	beq.n	80095b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800950a:	e099      	b.n	8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800950c:	4b88      	ldr	r3, [pc, #544]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f003 0320 	and.w	r3, r3, #32
 8009514:	2b00      	cmp	r3, #0
 8009516:	d02d      	beq.n	8009574 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009518:	4b85      	ldr	r3, [pc, #532]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	08db      	lsrs	r3, r3, #3
 800951e:	f003 0303 	and.w	r3, r3, #3
 8009522:	4a84      	ldr	r2, [pc, #528]	; (8009734 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009524:	fa22 f303 	lsr.w	r3, r2, r3
 8009528:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	ee07 3a90 	vmov	s15, r3
 8009530:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	ee07 3a90 	vmov	s15, r3
 800953a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800953e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009542:	4b7b      	ldr	r3, [pc, #492]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800954a:	ee07 3a90 	vmov	s15, r3
 800954e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009552:	ed97 6a03 	vldr	s12, [r7, #12]
 8009556:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800955a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800955e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800956a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800956e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009572:	e087      	b.n	8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	ee07 3a90 	vmov	s15, r3
 800957a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800957e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800973c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009586:	4b6a      	ldr	r3, [pc, #424]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800958a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800958e:	ee07 3a90 	vmov	s15, r3
 8009592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009596:	ed97 6a03 	vldr	s12, [r7, #12]
 800959a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800959e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095b6:	e065      	b.n	8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	ee07 3a90 	vmov	s15, r3
 80095be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80095c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ca:	4b59      	ldr	r3, [pc, #356]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d2:	ee07 3a90 	vmov	s15, r3
 80095d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095da:	ed97 6a03 	vldr	s12, [r7, #12]
 80095de:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80095e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80095fa:	e043      	b.n	8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	ee07 3a90 	vmov	s15, r3
 8009602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009606:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009744 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800960a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800960e:	4b48      	ldr	r3, [pc, #288]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009616:	ee07 3a90 	vmov	s15, r3
 800961a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800961e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009622:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800962e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800963e:	e021      	b.n	8009684 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	ee07 3a90 	vmov	s15, r3
 8009646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009740 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800964e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009652:	4b37      	ldr	r3, [pc, #220]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965a:	ee07 3a90 	vmov	s15, r3
 800965e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009662:	ed97 6a03 	vldr	s12, [r7, #12]
 8009666:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009738 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800966a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800966e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009672:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800967e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009682:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009684:	4b2a      	ldr	r3, [pc, #168]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009688:	0a5b      	lsrs	r3, r3, #9
 800968a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800969a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800969e:	edd7 6a07 	vldr	s13, [r7, #28]
 80096a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096aa:	ee17 2a90 	vmov	r2, s15
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80096b2:	4b1f      	ldr	r3, [pc, #124]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	0c1b      	lsrs	r3, r3, #16
 80096b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096bc:	ee07 3a90 	vmov	s15, r3
 80096c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80096d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096d8:	ee17 2a90 	vmov	r2, s15
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80096e0:	4b13      	ldr	r3, [pc, #76]	; (8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096e4:	0e1b      	lsrs	r3, r3, #24
 80096e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80096f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80096fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80096fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009706:	ee17 2a90 	vmov	r2, s15
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800970e:	e008      	b.n	8009722 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	609a      	str	r2, [r3, #8]
}
 8009722:	bf00      	nop
 8009724:	3724      	adds	r7, #36	; 0x24
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	58024400 	.word	0x58024400
 8009734:	03d09000 	.word	0x03d09000
 8009738:	46000000 	.word	0x46000000
 800973c:	4c742400 	.word	0x4c742400
 8009740:	4a742400 	.word	0x4a742400
 8009744:	4af42400 	.word	0x4af42400

08009748 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009748:	b480      	push	{r7}
 800974a:	b089      	sub	sp, #36	; 0x24
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009750:	4ba1      	ldr	r3, [pc, #644]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009752:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009754:	f003 0303 	and.w	r3, r3, #3
 8009758:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800975a:	4b9f      	ldr	r3, [pc, #636]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800975c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800975e:	0d1b      	lsrs	r3, r3, #20
 8009760:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009764:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009766:	4b9c      	ldr	r3, [pc, #624]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976a:	0a1b      	lsrs	r3, r3, #8
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009772:	4b99      	ldr	r3, [pc, #612]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009776:	08db      	lsrs	r3, r3, #3
 8009778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800977c:	693a      	ldr	r2, [r7, #16]
 800977e:	fb02 f303 	mul.w	r3, r2, r3
 8009782:	ee07 3a90 	vmov	s15, r3
 8009786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 8111 	beq.w	80099b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	2b02      	cmp	r3, #2
 800979a:	f000 8083 	beq.w	80098a4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800979e:	69bb      	ldr	r3, [r7, #24]
 80097a0:	2b02      	cmp	r3, #2
 80097a2:	f200 80a1 	bhi.w	80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d003      	beq.n	80097b4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d056      	beq.n	8009860 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80097b2:	e099      	b.n	80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80097b4:	4b88      	ldr	r3, [pc, #544]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f003 0320 	and.w	r3, r3, #32
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d02d      	beq.n	800981c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80097c0:	4b85      	ldr	r3, [pc, #532]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	08db      	lsrs	r3, r3, #3
 80097c6:	f003 0303 	and.w	r3, r3, #3
 80097ca:	4a84      	ldr	r2, [pc, #528]	; (80099dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80097cc:	fa22 f303 	lsr.w	r3, r2, r3
 80097d0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	ee07 3a90 	vmov	s15, r3
 80097d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097dc:	697b      	ldr	r3, [r7, #20]
 80097de:	ee07 3a90 	vmov	s15, r3
 80097e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ea:	4b7b      	ldr	r3, [pc, #492]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80097ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097f2:	ee07 3a90 	vmov	s15, r3
 80097f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80097fe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800980a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800980e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009816:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800981a:	e087      	b.n	800992c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800981c:	697b      	ldr	r3, [r7, #20]
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009826:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80099e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800982a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800982e:	4b6a      	ldr	r3, [pc, #424]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009836:	ee07 3a90 	vmov	s15, r3
 800983a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800983e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009842:	eddf 5a67 	vldr	s11, [pc, #412]	; 80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800984a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800984e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800985a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800985e:	e065      	b.n	800992c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	ee07 3a90 	vmov	s15, r3
 8009866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800986a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80099e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800986e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009872:	4b59      	ldr	r3, [pc, #356]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800987a:	ee07 3a90 	vmov	s15, r3
 800987e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009882:	ed97 6a03 	vldr	s12, [r7, #12]
 8009886:	eddf 5a56 	vldr	s11, [pc, #344]	; 80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800988a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800988e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800989a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800989e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098a2:	e043      	b.n	800992c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	ee07 3a90 	vmov	s15, r3
 80098aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098ae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80099ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80098b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098b6:	4b48      	ldr	r3, [pc, #288]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098be:	ee07 3a90 	vmov	s15, r3
 80098c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80098c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80098ca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80098ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80098d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80098d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80098da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80098de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80098e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80098e6:	e021      	b.n	800992c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	ee07 3a90 	vmov	s15, r3
 80098ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80099e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80098f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80098fa:	4b37      	ldr	r3, [pc, #220]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009902:	ee07 3a90 	vmov	s15, r3
 8009906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800990a:	ed97 6a03 	vldr	s12, [r7, #12]
 800990e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80099e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800991a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800991e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009926:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800992a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800992c:	4b2a      	ldr	r3, [pc, #168]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800992e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009930:	0a5b      	lsrs	r3, r3, #9
 8009932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009936:	ee07 3a90 	vmov	s15, r3
 800993a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800993e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009942:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009946:	edd7 6a07 	vldr	s13, [r7, #28]
 800994a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800994e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009952:	ee17 2a90 	vmov	r2, s15
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800995a:	4b1f      	ldr	r3, [pc, #124]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	0c1b      	lsrs	r3, r3, #16
 8009960:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009964:	ee07 3a90 	vmov	s15, r3
 8009968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800996c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009970:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009974:	edd7 6a07 	vldr	s13, [r7, #28]
 8009978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800997c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009980:	ee17 2a90 	vmov	r2, s15
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009988:	4b13      	ldr	r3, [pc, #76]	; (80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800998a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800998c:	0e1b      	lsrs	r3, r3, #24
 800998e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800999e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80099a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80099a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80099aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80099ae:	ee17 2a90 	vmov	r2, s15
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80099b6:	e008      	b.n	80099ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2200      	movs	r2, #0
 80099c8:	609a      	str	r2, [r3, #8]
}
 80099ca:	bf00      	nop
 80099cc:	3724      	adds	r7, #36	; 0x24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr
 80099d6:	bf00      	nop
 80099d8:	58024400 	.word	0x58024400
 80099dc:	03d09000 	.word	0x03d09000
 80099e0:	46000000 	.word	0x46000000
 80099e4:	4c742400 	.word	0x4c742400
 80099e8:	4a742400 	.word	0x4a742400
 80099ec:	4af42400 	.word	0x4af42400

080099f0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b084      	sub	sp, #16
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80099fe:	4b53      	ldr	r3, [pc, #332]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a02:	f003 0303 	and.w	r3, r3, #3
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	d101      	bne.n	8009a0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e099      	b.n	8009b42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009a0e:	4b4f      	ldr	r3, [pc, #316]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a4e      	ldr	r2, [pc, #312]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a14:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a1a:	f7fa faa5 	bl	8003f68 <HAL_GetTick>
 8009a1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a20:	e008      	b.n	8009a34 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009a22:	f7fa faa1 	bl	8003f68 <HAL_GetTick>
 8009a26:	4602      	mov	r2, r0
 8009a28:	68bb      	ldr	r3, [r7, #8]
 8009a2a:	1ad3      	subs	r3, r2, r3
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d901      	bls.n	8009a34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009a30:	2303      	movs	r3, #3
 8009a32:	e086      	b.n	8009b42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009a34:	4b45      	ldr	r3, [pc, #276]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1f0      	bne.n	8009a22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009a40:	4b42      	ldr	r3, [pc, #264]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a44:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	031b      	lsls	r3, r3, #12
 8009a4e:	493f      	ldr	r1, [pc, #252]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	628b      	str	r3, [r1, #40]	; 0x28
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	689b      	ldr	r3, [r3, #8]
 8009a62:	3b01      	subs	r3, #1
 8009a64:	025b      	lsls	r3, r3, #9
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	431a      	orrs	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	68db      	ldr	r3, [r3, #12]
 8009a6e:	3b01      	subs	r3, #1
 8009a70:	041b      	lsls	r3, r3, #16
 8009a72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	061b      	lsls	r3, r3, #24
 8009a80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009a84:	4931      	ldr	r1, [pc, #196]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a86:	4313      	orrs	r3, r2
 8009a88:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009a8a:	4b30      	ldr	r3, [pc, #192]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	695b      	ldr	r3, [r3, #20]
 8009a96:	492d      	ldr	r1, [pc, #180]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009a9c:	4b2b      	ldr	r3, [pc, #172]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa0:	f023 0220 	bic.w	r2, r3, #32
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	699b      	ldr	r3, [r3, #24]
 8009aa8:	4928      	ldr	r1, [pc, #160]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009aae:	4b27      	ldr	r3, [pc, #156]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab2:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ab4:	f023 0310 	bic.w	r3, r3, #16
 8009ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009aba:	4b24      	ldr	r3, [pc, #144]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009abc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009abe:	4b24      	ldr	r3, [pc, #144]	; (8009b50 <RCCEx_PLL2_Config+0x160>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	687a      	ldr	r2, [r7, #4]
 8009ac4:	69d2      	ldr	r2, [r2, #28]
 8009ac6:	00d2      	lsls	r2, r2, #3
 8009ac8:	4920      	ldr	r1, [pc, #128]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009ace:	4b1f      	ldr	r3, [pc, #124]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad2:	4a1e      	ldr	r2, [pc, #120]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ad4:	f043 0310 	orr.w	r3, r3, #16
 8009ad8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d106      	bne.n	8009aee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009ae0:	4b1a      	ldr	r3, [pc, #104]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae4:	4a19      	ldr	r2, [pc, #100]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009ae6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009aea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009aec:	e00f      	b.n	8009b0e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	d106      	bne.n	8009b02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009af4:	4b15      	ldr	r3, [pc, #84]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009af8:	4a14      	ldr	r2, [pc, #80]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009afe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009b00:	e005      	b.n	8009b0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009b02:	4b12      	ldr	r3, [pc, #72]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b06:	4a11      	ldr	r2, [pc, #68]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009b0e:	4b0f      	ldr	r3, [pc, #60]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a0e      	ldr	r2, [pc, #56]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b1a:	f7fa fa25 	bl	8003f68 <HAL_GetTick>
 8009b1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b20:	e008      	b.n	8009b34 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b22:	f7fa fa21 	bl	8003f68 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e006      	b.n	8009b42 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009b34:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <RCCEx_PLL2_Config+0x15c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0f0      	beq.n	8009b22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	58024400 	.word	0x58024400
 8009b50:	ffff0007 	.word	0xffff0007

08009b54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b62:	4b53      	ldr	r3, [pc, #332]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	2b03      	cmp	r3, #3
 8009b6c:	d101      	bne.n	8009b72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009b6e:	2301      	movs	r3, #1
 8009b70:	e099      	b.n	8009ca6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009b72:	4b4f      	ldr	r3, [pc, #316]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	4a4e      	ldr	r2, [pc, #312]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b7e:	f7fa f9f3 	bl	8003f68 <HAL_GetTick>
 8009b82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b84:	e008      	b.n	8009b98 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009b86:	f7fa f9ef 	bl	8003f68 <HAL_GetTick>
 8009b8a:	4602      	mov	r2, r0
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	1ad3      	subs	r3, r2, r3
 8009b90:	2b02      	cmp	r3, #2
 8009b92:	d901      	bls.n	8009b98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b94:	2303      	movs	r3, #3
 8009b96:	e086      	b.n	8009ca6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009b98:	4b45      	ldr	r3, [pc, #276]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1f0      	bne.n	8009b86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009ba4:	4b42      	ldr	r3, [pc, #264]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ba8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	051b      	lsls	r3, r3, #20
 8009bb2:	493f      	ldr	r1, [pc, #252]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	628b      	str	r3, [r1, #40]	; 0x28
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	689b      	ldr	r3, [r3, #8]
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	025b      	lsls	r3, r3, #9
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	68db      	ldr	r3, [r3, #12]
 8009bd2:	3b01      	subs	r3, #1
 8009bd4:	041b      	lsls	r3, r3, #16
 8009bd6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009bda:	431a      	orrs	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	3b01      	subs	r3, #1
 8009be2:	061b      	lsls	r3, r3, #24
 8009be4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009be8:	4931      	ldr	r1, [pc, #196]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009bee:	4b30      	ldr	r3, [pc, #192]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	492d      	ldr	r1, [pc, #180]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009c00:	4b2b      	ldr	r3, [pc, #172]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c04:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	699b      	ldr	r3, [r3, #24]
 8009c0c:	4928      	ldr	r1, [pc, #160]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c0e:	4313      	orrs	r3, r2
 8009c10:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009c12:	4b27      	ldr	r3, [pc, #156]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c16:	4a26      	ldr	r2, [pc, #152]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009c1e:	4b24      	ldr	r3, [pc, #144]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c22:	4b24      	ldr	r3, [pc, #144]	; (8009cb4 <RCCEx_PLL3_Config+0x160>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	69d2      	ldr	r2, [r2, #28]
 8009c2a:	00d2      	lsls	r2, r2, #3
 8009c2c:	4920      	ldr	r1, [pc, #128]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009c32:	4b1f      	ldr	r3, [pc, #124]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c36:	4a1e      	ldr	r2, [pc, #120]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009c44:	4b1a      	ldr	r3, [pc, #104]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c48:	4a19      	ldr	r2, [pc, #100]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c4a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009c4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c50:	e00f      	b.n	8009c72 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d106      	bne.n	8009c66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009c58:	4b15      	ldr	r3, [pc, #84]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c5c:	4a14      	ldr	r2, [pc, #80]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c5e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009c62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c64:	e005      	b.n	8009c72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009c66:	4b12      	ldr	r3, [pc, #72]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6a:	4a11      	ldr	r2, [pc, #68]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c6c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009c70:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009c72:	4b0f      	ldr	r3, [pc, #60]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a0e      	ldr	r2, [pc, #56]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c7e:	f7fa f973 	bl	8003f68 <HAL_GetTick>
 8009c82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c84:	e008      	b.n	8009c98 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009c86:	f7fa f96f 	bl	8003f68 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d901      	bls.n	8009c98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c94:	2303      	movs	r3, #3
 8009c96:	e006      	b.n	8009ca6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009c98:	4b05      	ldr	r3, [pc, #20]	; (8009cb0 <RCCEx_PLL3_Config+0x15c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d0f0      	beq.n	8009c86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	58024400 	.word	0x58024400
 8009cb4:	ffff0007 	.word	0xffff0007

08009cb8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d101      	bne.n	8009cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e0f1      	b.n	8009eae <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a78      	ldr	r2, [pc, #480]	; (8009eb8 <HAL_SPI_Init+0x200>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d00f      	beq.n	8009cfa <HAL_SPI_Init+0x42>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	4a77      	ldr	r2, [pc, #476]	; (8009ebc <HAL_SPI_Init+0x204>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d00a      	beq.n	8009cfa <HAL_SPI_Init+0x42>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a75      	ldr	r2, [pc, #468]	; (8009ec0 <HAL_SPI_Init+0x208>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d005      	beq.n	8009cfa <HAL_SPI_Init+0x42>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b0f      	cmp	r3, #15
 8009cf4:	d901      	bls.n	8009cfa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	e0d9      	b.n	8009eae <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f000 fba2 	bl	800a444 <SPI_GetPacketSize>
 8009d00:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a6c      	ldr	r2, [pc, #432]	; (8009eb8 <HAL_SPI_Init+0x200>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d00c      	beq.n	8009d26 <HAL_SPI_Init+0x6e>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a6a      	ldr	r2, [pc, #424]	; (8009ebc <HAL_SPI_Init+0x204>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d007      	beq.n	8009d26 <HAL_SPI_Init+0x6e>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a69      	ldr	r2, [pc, #420]	; (8009ec0 <HAL_SPI_Init+0x208>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d002      	beq.n	8009d26 <HAL_SPI_Init+0x6e>
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2b08      	cmp	r3, #8
 8009d24:	d811      	bhi.n	8009d4a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009d2a:	4a63      	ldr	r2, [pc, #396]	; (8009eb8 <HAL_SPI_Init+0x200>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d009      	beq.n	8009d44 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	4a61      	ldr	r2, [pc, #388]	; (8009ebc <HAL_SPI_Init+0x204>)
 8009d36:	4293      	cmp	r3, r2
 8009d38:	d004      	beq.n	8009d44 <HAL_SPI_Init+0x8c>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4a60      	ldr	r2, [pc, #384]	; (8009ec0 <HAL_SPI_Init+0x208>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d104      	bne.n	8009d4e <HAL_SPI_Init+0x96>
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	2b10      	cmp	r3, #16
 8009d48:	d901      	bls.n	8009d4e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e0af      	b.n	8009eae <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f7f9 fe08 	bl	8003978 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2202      	movs	r2, #2
 8009d6c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 0201 	bic.w	r2, r2, #1
 8009d7e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009d8a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009d94:	d119      	bne.n	8009dca <HAL_SPI_Init+0x112>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	685b      	ldr	r3, [r3, #4]
 8009d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d9e:	d103      	bne.n	8009da8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d008      	beq.n	8009dba <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d10c      	bne.n	8009dca <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009db4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009db8:	d107      	bne.n	8009dca <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009dc8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	69da      	ldr	r2, [r3, #28]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dd2:	431a      	orrs	r2, r3
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	431a      	orrs	r2, r3
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ddc:	ea42 0103 	orr.w	r1, r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	68da      	ldr	r2, [r3, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	430a      	orrs	r2, r1
 8009dea:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df4:	431a      	orrs	r2, r3
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dfa:	431a      	orrs	r2, r3
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	431a      	orrs	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	431a      	orrs	r2, r3
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	695b      	ldr	r3, [r3, #20]
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e1e:	431a      	orrs	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	689b      	ldr	r3, [r3, #8]
 8009e24:	431a      	orrs	r2, r3
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2a:	ea42 0103 	orr.w	r1, r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d113      	bne.n	8009e6a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e54:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009e68:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f022 0201 	bic.w	r2, r2, #1
 8009e78:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d00a      	beq.n	8009e9c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	430a      	orrs	r2, r1
 8009e9a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3710      	adds	r7, #16
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
 8009eb6:	bf00      	nop
 8009eb8:	40013000 	.word	0x40013000
 8009ebc:	40003800 	.word	0x40003800
 8009ec0:	40003c00 	.word	0x40003c00

08009ec4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08a      	sub	sp, #40	; 0x28
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	603b      	str	r3, [r7, #0]
 8009ed0:	4613      	mov	r3, r2
 8009ed2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	3320      	adds	r3, #32
 8009eda:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009edc:	2300      	movs	r3, #0
 8009ede:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d101      	bne.n	8009eee <HAL_SPI_Transmit+0x2a>
 8009eea:	2302      	movs	r3, #2
 8009eec:	e1d7      	b.n	800a29e <HAL_SPI_Transmit+0x3da>
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	2201      	movs	r2, #1
 8009ef2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009ef6:	f7fa f837 	bl	8003f68 <HAL_GetTick>
 8009efa:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009f02:	b2db      	uxtb	r3, r3
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d007      	beq.n	8009f18 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009f08:	2302      	movs	r3, #2
 8009f0a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009f14:	7efb      	ldrb	r3, [r7, #27]
 8009f16:	e1c2      	b.n	800a29e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d002      	beq.n	8009f24 <HAL_SPI_Transmit+0x60>
 8009f1e:	88fb      	ldrh	r3, [r7, #6]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d107      	bne.n	8009f34 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009f30:	7efb      	ldrb	r3, [r7, #27]
 8009f32:	e1b4      	b.n	800a29e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2203      	movs	r2, #3
 8009f38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	68ba      	ldr	r2, [r7, #8]
 8009f48:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	88fa      	ldrh	r2, [r7, #6]
 8009f4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	88fa      	ldrh	r2, [r7, #6]
 8009f56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	2200      	movs	r2, #0
 8009f64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2200      	movs	r2, #0
 8009f74:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8009f84:	d107      	bne.n	8009f96 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f94:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	4b96      	ldr	r3, [pc, #600]	; (800a1f8 <HAL_SPI_Transmit+0x334>)
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	88f9      	ldrh	r1, [r7, #6]
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	6812      	ldr	r2, [r2, #0]
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	f042 0201 	orr.w	r2, r2, #1
 8009fb8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fc2:	d107      	bne.n	8009fd4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fd2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	2b0f      	cmp	r3, #15
 8009fda:	d947      	bls.n	800a06c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009fdc:	e03f      	b.n	800a05e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	695b      	ldr	r3, [r3, #20]
 8009fe4:	f003 0302 	and.w	r3, r3, #2
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d114      	bne.n	800a016 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	6812      	ldr	r2, [r2, #0]
 8009ff6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ffc:	1d1a      	adds	r2, r3, #4
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a008:	b29b      	uxth	r3, r3
 800a00a:	3b01      	subs	r3, #1
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a014:	e023      	b.n	800a05e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a016:	f7f9 ffa7 	bl	8003f68 <HAL_GetTick>
 800a01a:	4602      	mov	r2, r0
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	683a      	ldr	r2, [r7, #0]
 800a022:	429a      	cmp	r2, r3
 800a024:	d803      	bhi.n	800a02e <HAL_SPI_Transmit+0x16a>
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a02c:	d102      	bne.n	800a034 <HAL_SPI_Transmit+0x170>
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d114      	bne.n	800a05e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a034:	68f8      	ldr	r0, [r7, #12]
 800a036:	f000 f937 	bl	800a2a8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a048:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e11f      	b.n	800a29e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a064:	b29b      	uxth	r3, r3
 800a066:	2b00      	cmp	r3, #0
 800a068:	d1b9      	bne.n	8009fde <HAL_SPI_Transmit+0x11a>
 800a06a:	e0f2      	b.n	800a252 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	2b07      	cmp	r3, #7
 800a072:	f240 80e7 	bls.w	800a244 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a076:	e05d      	b.n	800a134 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	695b      	ldr	r3, [r3, #20]
 800a07e:	f003 0302 	and.w	r3, r3, #2
 800a082:	2b02      	cmp	r3, #2
 800a084:	d132      	bne.n	800a0ec <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d918      	bls.n	800a0c4 <HAL_SPI_Transmit+0x200>
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d014      	beq.n	800a0c4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6812      	ldr	r2, [r2, #0]
 800a0a4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0aa:	1d1a      	adds	r2, r3, #4
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	3b02      	subs	r3, #2
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a0c2:	e037      	b.n	800a134 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0c8:	881a      	ldrh	r2, [r3, #0]
 800a0ca:	69fb      	ldr	r3, [r7, #28]
 800a0cc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0d2:	1c9a      	adds	r2, r3, #2
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a0ea:	e023      	b.n	800a134 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a0ec:	f7f9 ff3c 	bl	8003f68 <HAL_GetTick>
 800a0f0:	4602      	mov	r2, r0
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	1ad3      	subs	r3, r2, r3
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	429a      	cmp	r2, r3
 800a0fa:	d803      	bhi.n	800a104 <HAL_SPI_Transmit+0x240>
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a102:	d102      	bne.n	800a10a <HAL_SPI_Transmit+0x246>
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d114      	bne.n	800a134 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a10a:	68f8      	ldr	r0, [r7, #12]
 800a10c:	f000 f8cc 	bl	800a2a8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2200      	movs	r2, #0
 800a114:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a11e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2201      	movs	r2, #1
 800a12c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a130:	2303      	movs	r3, #3
 800a132:	e0b4      	b.n	800a29e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d19b      	bne.n	800a078 <HAL_SPI_Transmit+0x1b4>
 800a140:	e087      	b.n	800a252 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	695b      	ldr	r3, [r3, #20]
 800a148:	f003 0302 	and.w	r3, r3, #2
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d155      	bne.n	800a1fc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a156:	b29b      	uxth	r3, r3
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d918      	bls.n	800a18e <HAL_SPI_Transmit+0x2ca>
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a160:	2b40      	cmp	r3, #64	; 0x40
 800a162:	d914      	bls.n	800a18e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6812      	ldr	r2, [r2, #0]
 800a16e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a174:	1d1a      	adds	r2, r3, #4
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a180:	b29b      	uxth	r3, r3
 800a182:	3b04      	subs	r3, #4
 800a184:	b29a      	uxth	r2, r3
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a18c:	e05a      	b.n	800a244 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a194:	b29b      	uxth	r3, r3
 800a196:	2b01      	cmp	r3, #1
 800a198:	d917      	bls.n	800a1ca <HAL_SPI_Transmit+0x306>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d013      	beq.n	800a1ca <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1a6:	881a      	ldrh	r2, [r3, #0]
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b0:	1c9a      	adds	r2, r3, #2
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	3b02      	subs	r3, #2
 800a1c0:	b29a      	uxth	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a1c8:	e03c      	b.n	800a244 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3320      	adds	r3, #32
 800a1d4:	7812      	ldrb	r2, [r2, #0]
 800a1d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	3b01      	subs	r3, #1
 800a1ec:	b29a      	uxth	r2, r3
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a1f4:	e026      	b.n	800a244 <HAL_SPI_Transmit+0x380>
 800a1f6:	bf00      	nop
 800a1f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a1fc:	f7f9 feb4 	bl	8003f68 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	429a      	cmp	r2, r3
 800a20a:	d803      	bhi.n	800a214 <HAL_SPI_Transmit+0x350>
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a212:	d102      	bne.n	800a21a <HAL_SPI_Transmit+0x356>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d114      	bne.n	800a244 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 f844 	bl	800a2a8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2200      	movs	r2, #0
 800a224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a22e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	e02c      	b.n	800a29e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a24a:	b29b      	uxth	r3, r3
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f47f af78 	bne.w	800a142 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2200      	movs	r2, #0
 800a25a:	2108      	movs	r1, #8
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f000 f8c3 	bl	800a3e8 <SPI_WaitOnFlagUntilTimeout>
 800a262:	4603      	mov	r3, r0
 800a264:	2b00      	cmp	r3, #0
 800a266:	d007      	beq.n	800a278 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a26e:	f043 0220 	orr.w	r2, r3, #32
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a278:	68f8      	ldr	r0, [r7, #12]
 800a27a:	f000 f815 	bl	800a2a8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a294:	2b00      	cmp	r3, #0
 800a296:	d001      	beq.n	800a29c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a298:	2301      	movs	r3, #1
 800a29a:	e000      	b.n	800a29e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a29c:	7efb      	ldrb	r3, [r7, #27]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3720      	adds	r7, #32
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop

0800a2a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699a      	ldr	r2, [r3, #24]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f042 0208 	orr.w	r2, r2, #8
 800a2c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699a      	ldr	r2, [r3, #24]
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f042 0210 	orr.w	r2, r2, #16
 800a2d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	681a      	ldr	r2, [r3, #0]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	f022 0201 	bic.w	r2, r2, #1
 800a2e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	6919      	ldr	r1, [r3, #16]
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	4b3c      	ldr	r3, [pc, #240]	; (800a3e4 <SPI_CloseTransfer+0x13c>)
 800a2f4:	400b      	ands	r3, r1
 800a2f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	689a      	ldr	r2, [r3, #8]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a306:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b04      	cmp	r3, #4
 800a312:	d014      	beq.n	800a33e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f003 0320 	and.w	r3, r3, #32
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00f      	beq.n	800a33e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a324:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	699a      	ldr	r2, [r3, #24]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f042 0220 	orr.w	r2, r2, #32
 800a33c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b03      	cmp	r3, #3
 800a348:	d014      	beq.n	800a374 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a350:	2b00      	cmp	r3, #0
 800a352:	d00f      	beq.n	800a374 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a35a:	f043 0204 	orr.w	r2, r3, #4
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	699a      	ldr	r2, [r3, #24]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a372:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d00f      	beq.n	800a39e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a384:	f043 0201 	orr.w	r2, r3, #1
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	699a      	ldr	r2, [r3, #24]
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a39c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d00f      	beq.n	800a3c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3ae:	f043 0208 	orr.w	r2, r3, #8
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	699a      	ldr	r2, [r3, #24]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a3d8:	bf00      	nop
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr
 800a3e4:	fffffc90 	.word	0xfffffc90

0800a3e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b084      	sub	sp, #16
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	603b      	str	r3, [r7, #0]
 800a3f4:	4613      	mov	r3, r2
 800a3f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a3f8:	e010      	b.n	800a41c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3fa:	f7f9 fdb5 	bl	8003f68 <HAL_GetTick>
 800a3fe:	4602      	mov	r2, r0
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	1ad3      	subs	r3, r2, r3
 800a404:	69ba      	ldr	r2, [r7, #24]
 800a406:	429a      	cmp	r2, r3
 800a408:	d803      	bhi.n	800a412 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a40a:	69bb      	ldr	r3, [r7, #24]
 800a40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a410:	d102      	bne.n	800a418 <SPI_WaitOnFlagUntilTimeout+0x30>
 800a412:	69bb      	ldr	r3, [r7, #24]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d101      	bne.n	800a41c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e00f      	b.n	800a43c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	695a      	ldr	r2, [r3, #20]
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	4013      	ands	r3, r2
 800a426:	68ba      	ldr	r2, [r7, #8]
 800a428:	429a      	cmp	r2, r3
 800a42a:	bf0c      	ite	eq
 800a42c:	2301      	moveq	r3, #1
 800a42e:	2300      	movne	r3, #0
 800a430:	b2db      	uxtb	r3, r3
 800a432:	461a      	mov	r2, r3
 800a434:	79fb      	ldrb	r3, [r7, #7]
 800a436:	429a      	cmp	r2, r3
 800a438:	d0df      	beq.n	800a3fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a444:	b480      	push	{r7}
 800a446:	b085      	sub	sp, #20
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a450:	095b      	lsrs	r3, r3, #5
 800a452:	3301      	adds	r3, #1
 800a454:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	3301      	adds	r3, #1
 800a45c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	3307      	adds	r3, #7
 800a462:	08db      	lsrs	r3, r3, #3
 800a464:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	68fa      	ldr	r2, [r7, #12]
 800a46a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3714      	adds	r7, #20
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d101      	bne.n	800a48c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e049      	b.n	800a520 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a492:	b2db      	uxtb	r3, r3
 800a494:	2b00      	cmp	r3, #0
 800a496:	d106      	bne.n	800a4a6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2200      	movs	r2, #0
 800a49c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7f9 fad5 	bl	8003a50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2202      	movs	r2, #2
 800a4aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	3304      	adds	r3, #4
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	4610      	mov	r0, r2
 800a4ba:	f000 fa23 	bl	800a904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2201      	movs	r2, #1
 800a4ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2201      	movs	r2, #1
 800a4da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a51e:	2300      	movs	r3, #0
}
 800a520:	4618      	mov	r0, r3
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b01      	cmp	r3, #1
 800a53a:	d001      	beq.n	800a540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e054      	b.n	800a5ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	68da      	ldr	r2, [r3, #12]
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f042 0201 	orr.w	r2, r2, #1
 800a556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a26      	ldr	r2, [pc, #152]	; (800a5f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d022      	beq.n	800a5a8 <HAL_TIM_Base_Start_IT+0x80>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a56a:	d01d      	beq.n	800a5a8 <HAL_TIM_Base_Start_IT+0x80>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a22      	ldr	r2, [pc, #136]	; (800a5fc <HAL_TIM_Base_Start_IT+0xd4>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d018      	beq.n	800a5a8 <HAL_TIM_Base_Start_IT+0x80>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a21      	ldr	r2, [pc, #132]	; (800a600 <HAL_TIM_Base_Start_IT+0xd8>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d013      	beq.n	800a5a8 <HAL_TIM_Base_Start_IT+0x80>
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a1f      	ldr	r2, [pc, #124]	; (800a604 <HAL_TIM_Base_Start_IT+0xdc>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d00e      	beq.n	800a5a8 <HAL_TIM_Base_Start_IT+0x80>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a1e      	ldr	r2, [pc, #120]	; (800a608 <HAL_TIM_Base_Start_IT+0xe0>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d009      	beq.n	800a5a8 <HAL_TIM_Base_Start_IT+0x80>
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	4a1c      	ldr	r2, [pc, #112]	; (800a60c <HAL_TIM_Base_Start_IT+0xe4>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d004      	beq.n	800a5a8 <HAL_TIM_Base_Start_IT+0x80>
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a1b      	ldr	r2, [pc, #108]	; (800a610 <HAL_TIM_Base_Start_IT+0xe8>)
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	d115      	bne.n	800a5d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	689a      	ldr	r2, [r3, #8]
 800a5ae:	4b19      	ldr	r3, [pc, #100]	; (800a614 <HAL_TIM_Base_Start_IT+0xec>)
 800a5b0:	4013      	ands	r3, r2
 800a5b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	2b06      	cmp	r3, #6
 800a5b8:	d015      	beq.n	800a5e6 <HAL_TIM_Base_Start_IT+0xbe>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5c0:	d011      	beq.n	800a5e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f042 0201 	orr.w	r2, r2, #1
 800a5d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5d2:	e008      	b.n	800a5e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	f042 0201 	orr.w	r2, r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	e000      	b.n	800a5e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	40010000 	.word	0x40010000
 800a5fc:	40000400 	.word	0x40000400
 800a600:	40000800 	.word	0x40000800
 800a604:	40000c00 	.word	0x40000c00
 800a608:	40010400 	.word	0x40010400
 800a60c:	40001800 	.word	0x40001800
 800a610:	40014000 	.word	0x40014000
 800a614:	00010007 	.word	0x00010007

0800a618 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a618:	b480      	push	{r7}
 800a61a:	b083      	sub	sp, #12
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	68da      	ldr	r2, [r3, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0201 	bic.w	r2, r2, #1
 800a62e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	6a1a      	ldr	r2, [r3, #32]
 800a636:	f241 1311 	movw	r3, #4369	; 0x1111
 800a63a:	4013      	ands	r3, r2
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d10f      	bne.n	800a660 <HAL_TIM_Base_Stop_IT+0x48>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	6a1a      	ldr	r2, [r3, #32]
 800a646:	f240 4344 	movw	r3, #1092	; 0x444
 800a64a:	4013      	ands	r3, r2
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d107      	bne.n	800a660 <HAL_TIM_Base_Stop_IT+0x48>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 0201 	bic.w	r2, r2, #1
 800a65e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2201      	movs	r2, #1
 800a664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a676:	b580      	push	{r7, lr}
 800a678:	b082      	sub	sp, #8
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	691b      	ldr	r3, [r3, #16]
 800a684:	f003 0302 	and.w	r3, r3, #2
 800a688:	2b02      	cmp	r3, #2
 800a68a:	d122      	bne.n	800a6d2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	f003 0302 	and.w	r3, r3, #2
 800a696:	2b02      	cmp	r3, #2
 800a698:	d11b      	bne.n	800a6d2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f06f 0202 	mvn.w	r2, #2
 800a6a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	699b      	ldr	r3, [r3, #24]
 800a6b0:	f003 0303 	and.w	r3, r3, #3
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d003      	beq.n	800a6c0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 f905 	bl	800a8c8 <HAL_TIM_IC_CaptureCallback>
 800a6be:	e005      	b.n	800a6cc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f000 f8f7 	bl	800a8b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f908 	bl	800a8dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	f003 0304 	and.w	r3, r3, #4
 800a6dc:	2b04      	cmp	r3, #4
 800a6de:	d122      	bne.n	800a726 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	f003 0304 	and.w	r3, r3, #4
 800a6ea:	2b04      	cmp	r3, #4
 800a6ec:	d11b      	bne.n	800a726 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f06f 0204 	mvn.w	r2, #4
 800a6f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2202      	movs	r2, #2
 800a6fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d003      	beq.n	800a714 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 f8db 	bl	800a8c8 <HAL_TIM_IC_CaptureCallback>
 800a712:	e005      	b.n	800a720 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 f8cd 	bl	800a8b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f8de 	bl	800a8dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	691b      	ldr	r3, [r3, #16]
 800a72c:	f003 0308 	and.w	r3, r3, #8
 800a730:	2b08      	cmp	r3, #8
 800a732:	d122      	bne.n	800a77a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	f003 0308 	and.w	r3, r3, #8
 800a73e:	2b08      	cmp	r3, #8
 800a740:	d11b      	bne.n	800a77a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f06f 0208 	mvn.w	r2, #8
 800a74a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2204      	movs	r2, #4
 800a750:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	69db      	ldr	r3, [r3, #28]
 800a758:	f003 0303 	and.w	r3, r3, #3
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d003      	beq.n	800a768 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f8b1 	bl	800a8c8 <HAL_TIM_IC_CaptureCallback>
 800a766:	e005      	b.n	800a774 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f8a3 	bl	800a8b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f8b4 	bl	800a8dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2200      	movs	r2, #0
 800a778:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	f003 0310 	and.w	r3, r3, #16
 800a784:	2b10      	cmp	r3, #16
 800a786:	d122      	bne.n	800a7ce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68db      	ldr	r3, [r3, #12]
 800a78e:	f003 0310 	and.w	r3, r3, #16
 800a792:	2b10      	cmp	r3, #16
 800a794:	d11b      	bne.n	800a7ce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f06f 0210 	mvn.w	r2, #16
 800a79e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2208      	movs	r2, #8
 800a7a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	69db      	ldr	r3, [r3, #28]
 800a7ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d003      	beq.n	800a7bc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 f887 	bl	800a8c8 <HAL_TIM_IC_CaptureCallback>
 800a7ba:	e005      	b.n	800a7c8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f000 f879 	bl	800a8b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f88a 	bl	800a8dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	f003 0301 	and.w	r3, r3, #1
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d10e      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	f003 0301 	and.w	r3, r3, #1
 800a7e6:	2b01      	cmp	r3, #1
 800a7e8:	d107      	bne.n	800a7fa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f06f 0201 	mvn.w	r2, #1
 800a7f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f7f8 fb95 	bl	8002f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	691b      	ldr	r3, [r3, #16]
 800a800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a804:	2b80      	cmp	r3, #128	; 0x80
 800a806:	d10e      	bne.n	800a826 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a812:	2b80      	cmp	r3, #128	; 0x80
 800a814:	d107      	bne.n	800a826 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a81e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 f9a1 	bl	800ab68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a834:	d10e      	bne.n	800a854 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a840:	2b80      	cmp	r3, #128	; 0x80
 800a842:	d107      	bne.n	800a854 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a84c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f994 	bl	800ab7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	691b      	ldr	r3, [r3, #16]
 800a85a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a85e:	2b40      	cmp	r3, #64	; 0x40
 800a860:	d10e      	bne.n	800a880 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	68db      	ldr	r3, [r3, #12]
 800a868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a86c:	2b40      	cmp	r3, #64	; 0x40
 800a86e:	d107      	bne.n	800a880 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a878:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f838 	bl	800a8f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	f003 0320 	and.w	r3, r3, #32
 800a88a:	2b20      	cmp	r3, #32
 800a88c:	d10e      	bne.n	800a8ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f003 0320 	and.w	r3, r3, #32
 800a898:	2b20      	cmp	r3, #32
 800a89a:	d107      	bne.n	800a8ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f06f 0220 	mvn.w	r2, #32
 800a8a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a8a6:	6878      	ldr	r0, [r7, #4]
 800a8a8:	f000 f954 	bl	800ab54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a8ac:	bf00      	nop
 800a8ae:	3708      	adds	r7, #8
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	bd80      	pop	{r7, pc}

0800a8b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b083      	sub	sp, #12
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8bc:	bf00      	nop
 800a8be:	370c      	adds	r7, #12
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr

0800a8c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
 800a90c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	4a40      	ldr	r2, [pc, #256]	; (800aa18 <TIM_Base_SetConfig+0x114>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d013      	beq.n	800a944 <TIM_Base_SetConfig+0x40>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a922:	d00f      	beq.n	800a944 <TIM_Base_SetConfig+0x40>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	4a3d      	ldr	r2, [pc, #244]	; (800aa1c <TIM_Base_SetConfig+0x118>)
 800a928:	4293      	cmp	r3, r2
 800a92a:	d00b      	beq.n	800a944 <TIM_Base_SetConfig+0x40>
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	4a3c      	ldr	r2, [pc, #240]	; (800aa20 <TIM_Base_SetConfig+0x11c>)
 800a930:	4293      	cmp	r3, r2
 800a932:	d007      	beq.n	800a944 <TIM_Base_SetConfig+0x40>
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	4a3b      	ldr	r2, [pc, #236]	; (800aa24 <TIM_Base_SetConfig+0x120>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d003      	beq.n	800a944 <TIM_Base_SetConfig+0x40>
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a3a      	ldr	r2, [pc, #232]	; (800aa28 <TIM_Base_SetConfig+0x124>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d108      	bne.n	800a956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a94a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	4313      	orrs	r3, r2
 800a954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	4a2f      	ldr	r2, [pc, #188]	; (800aa18 <TIM_Base_SetConfig+0x114>)
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d01f      	beq.n	800a99e <TIM_Base_SetConfig+0x9a>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a964:	d01b      	beq.n	800a99e <TIM_Base_SetConfig+0x9a>
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	4a2c      	ldr	r2, [pc, #176]	; (800aa1c <TIM_Base_SetConfig+0x118>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d017      	beq.n	800a99e <TIM_Base_SetConfig+0x9a>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	4a2b      	ldr	r2, [pc, #172]	; (800aa20 <TIM_Base_SetConfig+0x11c>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d013      	beq.n	800a99e <TIM_Base_SetConfig+0x9a>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	4a2a      	ldr	r2, [pc, #168]	; (800aa24 <TIM_Base_SetConfig+0x120>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d00f      	beq.n	800a99e <TIM_Base_SetConfig+0x9a>
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	4a29      	ldr	r2, [pc, #164]	; (800aa28 <TIM_Base_SetConfig+0x124>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d00b      	beq.n	800a99e <TIM_Base_SetConfig+0x9a>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	4a28      	ldr	r2, [pc, #160]	; (800aa2c <TIM_Base_SetConfig+0x128>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d007      	beq.n	800a99e <TIM_Base_SetConfig+0x9a>
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	4a27      	ldr	r2, [pc, #156]	; (800aa30 <TIM_Base_SetConfig+0x12c>)
 800a992:	4293      	cmp	r3, r2
 800a994:	d003      	beq.n	800a99e <TIM_Base_SetConfig+0x9a>
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	4a26      	ldr	r2, [pc, #152]	; (800aa34 <TIM_Base_SetConfig+0x130>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d108      	bne.n	800a9b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	695b      	ldr	r3, [r3, #20]
 800a9ba:	4313      	orrs	r3, r2
 800a9bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	689a      	ldr	r2, [r3, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	681a      	ldr	r2, [r3, #0]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a10      	ldr	r2, [pc, #64]	; (800aa18 <TIM_Base_SetConfig+0x114>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d00f      	beq.n	800a9fc <TIM_Base_SetConfig+0xf8>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	4a12      	ldr	r2, [pc, #72]	; (800aa28 <TIM_Base_SetConfig+0x124>)
 800a9e0:	4293      	cmp	r3, r2
 800a9e2:	d00b      	beq.n	800a9fc <TIM_Base_SetConfig+0xf8>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	4a11      	ldr	r2, [pc, #68]	; (800aa2c <TIM_Base_SetConfig+0x128>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d007      	beq.n	800a9fc <TIM_Base_SetConfig+0xf8>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	4a10      	ldr	r2, [pc, #64]	; (800aa30 <TIM_Base_SetConfig+0x12c>)
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d003      	beq.n	800a9fc <TIM_Base_SetConfig+0xf8>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	4a0f      	ldr	r2, [pc, #60]	; (800aa34 <TIM_Base_SetConfig+0x130>)
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d103      	bne.n	800aa04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	691a      	ldr	r2, [r3, #16]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2201      	movs	r2, #1
 800aa08:	615a      	str	r2, [r3, #20]
}
 800aa0a:	bf00      	nop
 800aa0c:	3714      	adds	r7, #20
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	40010000 	.word	0x40010000
 800aa1c:	40000400 	.word	0x40000400
 800aa20:	40000800 	.word	0x40000800
 800aa24:	40000c00 	.word	0x40000c00
 800aa28:	40010400 	.word	0x40010400
 800aa2c:	40014000 	.word	0x40014000
 800aa30:	40014400 	.word	0x40014400
 800aa34:	40014800 	.word	0x40014800

0800aa38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e06d      	b.n	800ab2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a30      	ldr	r2, [pc, #192]	; (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d004      	beq.n	800aa84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a2f      	ldr	r2, [pc, #188]	; (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d108      	bne.n	800aa96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	685b      	ldr	r3, [r3, #4]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a20      	ldr	r2, [pc, #128]	; (800ab38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d022      	beq.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aac2:	d01d      	beq.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a1d      	ldr	r2, [pc, #116]	; (800ab40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d018      	beq.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a1c      	ldr	r2, [pc, #112]	; (800ab44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d013      	beq.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a1a      	ldr	r2, [pc, #104]	; (800ab48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d00e      	beq.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a15      	ldr	r2, [pc, #84]	; (800ab3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d009      	beq.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a16      	ldr	r2, [pc, #88]	; (800ab4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d004      	beq.n	800ab00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a15      	ldr	r2, [pc, #84]	; (800ab50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d10c      	bne.n	800ab1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ab06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	68ba      	ldr	r2, [r7, #8]
 800ab0e:	4313      	orrs	r3, r2
 800ab10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	2201      	movs	r2, #1
 800ab1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2200      	movs	r2, #0
 800ab26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr
 800ab38:	40010000 	.word	0x40010000
 800ab3c:	40010400 	.word	0x40010400
 800ab40:	40000400 	.word	0x40000400
 800ab44:	40000800 	.word	0x40000800
 800ab48:	40000c00 	.word	0x40000c00
 800ab4c:	40001800 	.word	0x40001800
 800ab50:	40014000 	.word	0x40014000

0800ab54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b083      	sub	sp, #12
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ab5c:	bf00      	nop
 800ab5e:	370c      	adds	r7, #12
 800ab60:	46bd      	mov	sp, r7
 800ab62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab66:	4770      	bx	lr

0800ab68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ab70:	bf00      	nop
 800ab72:	370c      	adds	r7, #12
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr

0800ab7c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ab84:	bf00      	nop
 800ab86:	370c      	adds	r7, #12
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d101      	bne.n	800aba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e042      	b.n	800ac28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d106      	bne.n	800abba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2200      	movs	r2, #0
 800abb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f7f8 ff73 	bl	8003aa0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2224      	movs	r2, #36	; 0x24
 800abbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f022 0201 	bic.w	r2, r2, #1
 800abd0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 fbea 	bl	800b3ac <UART_SetConfig>
 800abd8:	4603      	mov	r3, r0
 800abda:	2b01      	cmp	r3, #1
 800abdc:	d101      	bne.n	800abe2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e022      	b.n	800ac28 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d002      	beq.n	800abf0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f001 f946 	bl	800be7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800abfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	689a      	ldr	r2, [r3, #8]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	f042 0201 	orr.w	r2, r2, #1
 800ac1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f001 f9cd 	bl	800bfc0 <UART_CheckIdleState>
 800ac26:	4603      	mov	r3, r0
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3708      	adds	r7, #8
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b0ba      	sub	sp, #232	; 0xe8
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ac56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ac5a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ac5e:	4013      	ands	r3, r2
 800ac60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ac64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d11b      	bne.n	800aca4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ac6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac70:	f003 0320 	and.w	r3, r3, #32
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d015      	beq.n	800aca4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ac78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ac7c:	f003 0320 	and.w	r3, r3, #32
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d105      	bne.n	800ac90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ac84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ac88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d009      	beq.n	800aca4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f000 835a 	beq.w	800b34e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	4798      	blx	r3
      }
      return;
 800aca2:	e354      	b.n	800b34e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800aca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 811f 	beq.w	800aeec <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800acae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800acb2:	4b8b      	ldr	r3, [pc, #556]	; (800aee0 <HAL_UART_IRQHandler+0x2b0>)
 800acb4:	4013      	ands	r3, r2
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800acba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800acbe:	4b89      	ldr	r3, [pc, #548]	; (800aee4 <HAL_UART_IRQHandler+0x2b4>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8112 	beq.w	800aeec <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800acc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800accc:	f003 0301 	and.w	r3, r3, #1
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d011      	beq.n	800acf8 <HAL_UART_IRQHandler+0xc8>
 800acd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d00b      	beq.n	800acf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	2201      	movs	r2, #1
 800ace6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acee:	f043 0201 	orr.w	r2, r3, #1
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800acf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acfc:	f003 0302 	and.w	r3, r3, #2
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d011      	beq.n	800ad28 <HAL_UART_IRQHandler+0xf8>
 800ad04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2202      	movs	r2, #2
 800ad16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad1e:	f043 0204 	orr.w	r2, r3, #4
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ad28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad2c:	f003 0304 	and.w	r3, r3, #4
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d011      	beq.n	800ad58 <HAL_UART_IRQHandler+0x128>
 800ad34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00b      	beq.n	800ad58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2204      	movs	r2, #4
 800ad46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad4e:	f043 0202 	orr.w	r2, r3, #2
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ad58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad5c:	f003 0308 	and.w	r3, r3, #8
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d017      	beq.n	800ad94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad68:	f003 0320 	and.w	r3, r3, #32
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d105      	bne.n	800ad7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ad70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ad74:	4b5a      	ldr	r3, [pc, #360]	; (800aee0 <HAL_UART_IRQHandler+0x2b0>)
 800ad76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00b      	beq.n	800ad94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	2208      	movs	r2, #8
 800ad82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad8a:	f043 0208 	orr.w	r2, r3, #8
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ad94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d012      	beq.n	800adc6 <HAL_UART_IRQHandler+0x196>
 800ada0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ada4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00c      	beq.n	800adc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800adb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adbc:	f043 0220 	orr.w	r2, r3, #32
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f000 82c0 	beq.w	800b352 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800add2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800add6:	f003 0320 	and.w	r3, r3, #32
 800adda:	2b00      	cmp	r3, #0
 800addc:	d013      	beq.n	800ae06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d105      	bne.n	800adf6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d007      	beq.n	800ae06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d003      	beq.n	800ae06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	689b      	ldr	r3, [r3, #8]
 800ae16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1a:	2b40      	cmp	r3, #64	; 0x40
 800ae1c:	d005      	beq.n	800ae2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ae1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d04f      	beq.n	800aeca <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f001 f9dc 	bl	800c1e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3a:	2b40      	cmp	r3, #64	; 0x40
 800ae3c:	d141      	bne.n	800aec2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	3308      	adds	r3, #8
 800ae44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae4c:	e853 3f00 	ldrex	r3, [r3]
 800ae50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	3308      	adds	r3, #8
 800ae66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae7a:	e841 2300 	strex	r3, r2, [r1]
 800ae7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1d9      	bne.n	800ae3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d013      	beq.n	800aeba <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae96:	4a14      	ldr	r2, [pc, #80]	; (800aee8 <HAL_UART_IRQHandler+0x2b8>)
 800ae98:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fa f83c 	bl	8004f1c <HAL_DMA_Abort_IT>
 800aea4:	4603      	mov	r3, r0
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d017      	beq.n	800aeda <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aeae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeb0:	687a      	ldr	r2, [r7, #4]
 800aeb2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800aeb4:	4610      	mov	r0, r2
 800aeb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeb8:	e00f      	b.n	800aeda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 fa60 	bl	800b380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec0:	e00b      	b.n	800aeda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f000 fa5c 	bl	800b380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aec8:	e007      	b.n	800aeda <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 fa58 	bl	800b380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800aed8:	e23b      	b.n	800b352 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeda:	bf00      	nop
    return;
 800aedc:	e239      	b.n	800b352 <HAL_UART_IRQHandler+0x722>
 800aede:	bf00      	nop
 800aee0:	10000001 	.word	0x10000001
 800aee4:	04000120 	.word	0x04000120
 800aee8:	0800c2b5 	.word	0x0800c2b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	f040 81ce 	bne.w	800b292 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800aef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aefa:	f003 0310 	and.w	r3, r3, #16
 800aefe:	2b00      	cmp	r3, #0
 800af00:	f000 81c7 	beq.w	800b292 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800af04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af08:	f003 0310 	and.w	r3, r3, #16
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	f000 81c0 	beq.w	800b292 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2210      	movs	r2, #16
 800af18:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af24:	2b40      	cmp	r3, #64	; 0x40
 800af26:	f040 813b 	bne.w	800b1a0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	4a8b      	ldr	r2, [pc, #556]	; (800b160 <HAL_UART_IRQHandler+0x530>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d059      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a89      	ldr	r2, [pc, #548]	; (800b164 <HAL_UART_IRQHandler+0x534>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d053      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	4a87      	ldr	r2, [pc, #540]	; (800b168 <HAL_UART_IRQHandler+0x538>)
 800af4a:	4293      	cmp	r3, r2
 800af4c:	d04d      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a85      	ldr	r2, [pc, #532]	; (800b16c <HAL_UART_IRQHandler+0x53c>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d047      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a83      	ldr	r2, [pc, #524]	; (800b170 <HAL_UART_IRQHandler+0x540>)
 800af62:	4293      	cmp	r3, r2
 800af64:	d041      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	4a81      	ldr	r2, [pc, #516]	; (800b174 <HAL_UART_IRQHandler+0x544>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d03b      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	4a7f      	ldr	r2, [pc, #508]	; (800b178 <HAL_UART_IRQHandler+0x548>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	d035      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a7d      	ldr	r2, [pc, #500]	; (800b17c <HAL_UART_IRQHandler+0x54c>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d02f      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a7b      	ldr	r2, [pc, #492]	; (800b180 <HAL_UART_IRQHandler+0x550>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d029      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	4a79      	ldr	r2, [pc, #484]	; (800b184 <HAL_UART_IRQHandler+0x554>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d023      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	4a77      	ldr	r2, [pc, #476]	; (800b188 <HAL_UART_IRQHandler+0x558>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d01d      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a75      	ldr	r2, [pc, #468]	; (800b18c <HAL_UART_IRQHandler+0x55c>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d017      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	4a73      	ldr	r2, [pc, #460]	; (800b190 <HAL_UART_IRQHandler+0x560>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d011      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	4a71      	ldr	r2, [pc, #452]	; (800b194 <HAL_UART_IRQHandler+0x564>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d00b      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a6f      	ldr	r2, [pc, #444]	; (800b198 <HAL_UART_IRQHandler+0x568>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d005      	beq.n	800afea <HAL_UART_IRQHandler+0x3ba>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a6d      	ldr	r2, [pc, #436]	; (800b19c <HAL_UART_IRQHandler+0x56c>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d105      	bne.n	800aff6 <HAL_UART_IRQHandler+0x3c6>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	b29b      	uxth	r3, r3
 800aff4:	e004      	b.n	800b000 <HAL_UART_IRQHandler+0x3d0>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	b29b      	uxth	r3, r3
 800b000:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b004:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b008:	2b00      	cmp	r3, #0
 800b00a:	f000 81a4 	beq.w	800b356 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b014:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b018:	429a      	cmp	r2, r3
 800b01a:	f080 819c 	bcs.w	800b356 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b024:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b02c:	69db      	ldr	r3, [r3, #28]
 800b02e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b032:	f000 8086 	beq.w	800b142 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b042:	e853 3f00 	ldrex	r3, [r3]
 800b046:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b04a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b04e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b052:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	461a      	mov	r2, r3
 800b05c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b060:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b064:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b068:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b06c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b070:	e841 2300 	strex	r3, r2, [r1]
 800b074:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b078:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1da      	bne.n	800b036 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	3308      	adds	r3, #8
 800b086:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b08a:	e853 3f00 	ldrex	r3, [r3]
 800b08e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b092:	f023 0301 	bic.w	r3, r3, #1
 800b096:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	3308      	adds	r3, #8
 800b0a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b0a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b0a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b0ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b0b0:	e841 2300 	strex	r3, r2, [r1]
 800b0b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1e1      	bne.n	800b080 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	3308      	adds	r3, #8
 800b0c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b0c6:	e853 3f00 	ldrex	r3, [r3]
 800b0ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b0cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b0d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	3308      	adds	r3, #8
 800b0dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b0e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b0e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b0e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b0e8:	e841 2300 	strex	r3, r2, [r1]
 800b0ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b0ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	d1e3      	bne.n	800b0bc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2220      	movs	r2, #32
 800b0f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	2200      	movs	r2, #0
 800b100:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b10a:	e853 3f00 	ldrex	r3, [r3]
 800b10e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b110:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b112:	f023 0310 	bic.w	r3, r3, #16
 800b116:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	461a      	mov	r2, r3
 800b120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b124:	65bb      	str	r3, [r7, #88]	; 0x58
 800b126:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b128:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b12a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b12c:	e841 2300 	strex	r3, r2, [r1]
 800b130:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b134:	2b00      	cmp	r3, #0
 800b136:	d1e4      	bne.n	800b102 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b13c:	4618      	mov	r0, r3
 800b13e:	f7f9 fbcf 	bl	80048e0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b14e:	b29b      	uxth	r3, r3
 800b150:	1ad3      	subs	r3, r2, r3
 800b152:	b29b      	uxth	r3, r3
 800b154:	4619      	mov	r1, r3
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f000 f91c 	bl	800b394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b15c:	e0fb      	b.n	800b356 <HAL_UART_IRQHandler+0x726>
 800b15e:	bf00      	nop
 800b160:	40020010 	.word	0x40020010
 800b164:	40020028 	.word	0x40020028
 800b168:	40020040 	.word	0x40020040
 800b16c:	40020058 	.word	0x40020058
 800b170:	40020070 	.word	0x40020070
 800b174:	40020088 	.word	0x40020088
 800b178:	400200a0 	.word	0x400200a0
 800b17c:	400200b8 	.word	0x400200b8
 800b180:	40020410 	.word	0x40020410
 800b184:	40020428 	.word	0x40020428
 800b188:	40020440 	.word	0x40020440
 800b18c:	40020458 	.word	0x40020458
 800b190:	40020470 	.word	0x40020470
 800b194:	40020488 	.word	0x40020488
 800b198:	400204a0 	.word	0x400204a0
 800b19c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	1ad3      	subs	r3, r2, r3
 800b1b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f000 80cc 	beq.w	800b35a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b1c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f000 80c7 	beq.w	800b35a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d4:	e853 3f00 	ldrex	r3, [r3]
 800b1d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1e0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b1ee:	647b      	str	r3, [r7, #68]	; 0x44
 800b1f0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b1f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b1f6:	e841 2300 	strex	r3, r2, [r1]
 800b1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b1fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d1e4      	bne.n	800b1cc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	3308      	adds	r3, #8
 800b208:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	e853 3f00 	ldrex	r3, [r3]
 800b210:	623b      	str	r3, [r7, #32]
   return(result);
 800b212:	6a3a      	ldr	r2, [r7, #32]
 800b214:	4b54      	ldr	r3, [pc, #336]	; (800b368 <HAL_UART_IRQHandler+0x738>)
 800b216:	4013      	ands	r3, r2
 800b218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	3308      	adds	r3, #8
 800b222:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b226:	633a      	str	r2, [r7, #48]	; 0x30
 800b228:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b22a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b22c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b22e:	e841 2300 	strex	r3, r2, [r1]
 800b232:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b236:	2b00      	cmp	r3, #0
 800b238:	d1e3      	bne.n	800b202 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	2220      	movs	r2, #32
 800b23e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	2200      	movs	r2, #0
 800b246:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2200      	movs	r2, #0
 800b24c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	e853 3f00 	ldrex	r3, [r3]
 800b25a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f023 0310 	bic.w	r3, r3, #16
 800b262:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	461a      	mov	r2, r3
 800b26c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b270:	61fb      	str	r3, [r7, #28]
 800b272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b274:	69b9      	ldr	r1, [r7, #24]
 800b276:	69fa      	ldr	r2, [r7, #28]
 800b278:	e841 2300 	strex	r3, r2, [r1]
 800b27c:	617b      	str	r3, [r7, #20]
   return(result);
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	2b00      	cmp	r3, #0
 800b282:	d1e4      	bne.n	800b24e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b284:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f882 	bl	800b394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b290:	e063      	b.n	800b35a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d00e      	beq.n	800b2bc <HAL_UART_IRQHandler+0x68c>
 800b29e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d008      	beq.n	800b2bc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b2b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f001 f83e 	bl	800c336 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b2ba:	e051      	b.n	800b360 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d014      	beq.n	800b2f2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b2cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d105      	bne.n	800b2e0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b2d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b2d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d008      	beq.n	800b2f2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d03a      	beq.n	800b35e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	4798      	blx	r3
    }
    return;
 800b2f0:	e035      	b.n	800b35e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b2f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b2f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d009      	beq.n	800b312 <HAL_UART_IRQHandler+0x6e2>
 800b2fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 ffe8 	bl	800c2e0 <UART_EndTransmit_IT>
    return;
 800b310:	e026      	b.n	800b360 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b316:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d009      	beq.n	800b332 <HAL_UART_IRQHandler+0x702>
 800b31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b322:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 f817 	bl	800c35e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b330:	e016      	b.n	800b360 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b332:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b336:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d010      	beq.n	800b360 <HAL_UART_IRQHandler+0x730>
 800b33e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b342:	2b00      	cmp	r3, #0
 800b344:	da0c      	bge.n	800b360 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f000 ffff 	bl	800c34a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b34c:	e008      	b.n	800b360 <HAL_UART_IRQHandler+0x730>
      return;
 800b34e:	bf00      	nop
 800b350:	e006      	b.n	800b360 <HAL_UART_IRQHandler+0x730>
    return;
 800b352:	bf00      	nop
 800b354:	e004      	b.n	800b360 <HAL_UART_IRQHandler+0x730>
      return;
 800b356:	bf00      	nop
 800b358:	e002      	b.n	800b360 <HAL_UART_IRQHandler+0x730>
      return;
 800b35a:	bf00      	nop
 800b35c:	e000      	b.n	800b360 <HAL_UART_IRQHandler+0x730>
    return;
 800b35e:	bf00      	nop
  }
}
 800b360:	37e8      	adds	r7, #232	; 0xe8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	effffffe 	.word	0xeffffffe

0800b36c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b083      	sub	sp, #12
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr

0800b380 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b380:	b480      	push	{r7}
 800b382:	b083      	sub	sp, #12
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b3a0:	bf00      	nop
 800b3a2:	370c      	adds	r7, #12
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3b0:	b092      	sub	sp, #72	; 0x48
 800b3b2:	af00      	add	r7, sp, #0
 800b3b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	689a      	ldr	r2, [r3, #8]
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	691b      	ldr	r3, [r3, #16]
 800b3c4:	431a      	orrs	r2, r3
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	4bbe      	ldr	r3, [pc, #760]	; (800b6d4 <UART_SetConfig+0x328>)
 800b3dc:	4013      	ands	r3, r2
 800b3de:	697a      	ldr	r2, [r7, #20]
 800b3e0:	6812      	ldr	r2, [r2, #0]
 800b3e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	68da      	ldr	r2, [r3, #12]
 800b3f6:	697b      	ldr	r3, [r7, #20]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	430a      	orrs	r2, r1
 800b3fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b3fe:	697b      	ldr	r3, [r7, #20]
 800b400:	699b      	ldr	r3, [r3, #24]
 800b402:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	4ab3      	ldr	r2, [pc, #716]	; (800b6d8 <UART_SetConfig+0x32c>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d004      	beq.n	800b418 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	6a1b      	ldr	r3, [r3, #32]
 800b412:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b414:	4313      	orrs	r3, r2
 800b416:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	689a      	ldr	r2, [r3, #8]
 800b41e:	4baf      	ldr	r3, [pc, #700]	; (800b6dc <UART_SetConfig+0x330>)
 800b420:	4013      	ands	r3, r2
 800b422:	697a      	ldr	r2, [r7, #20]
 800b424:	6812      	ldr	r2, [r2, #0]
 800b426:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b428:	430b      	orrs	r3, r1
 800b42a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b432:	f023 010f 	bic.w	r1, r3, #15
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b442:	697b      	ldr	r3, [r7, #20]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	4aa6      	ldr	r2, [pc, #664]	; (800b6e0 <UART_SetConfig+0x334>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d177      	bne.n	800b53c <UART_SetConfig+0x190>
 800b44c:	4ba5      	ldr	r3, [pc, #660]	; (800b6e4 <UART_SetConfig+0x338>)
 800b44e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b450:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b454:	2b28      	cmp	r3, #40	; 0x28
 800b456:	d86d      	bhi.n	800b534 <UART_SetConfig+0x188>
 800b458:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <UART_SetConfig+0xb4>)
 800b45a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b45e:	bf00      	nop
 800b460:	0800b505 	.word	0x0800b505
 800b464:	0800b535 	.word	0x0800b535
 800b468:	0800b535 	.word	0x0800b535
 800b46c:	0800b535 	.word	0x0800b535
 800b470:	0800b535 	.word	0x0800b535
 800b474:	0800b535 	.word	0x0800b535
 800b478:	0800b535 	.word	0x0800b535
 800b47c:	0800b535 	.word	0x0800b535
 800b480:	0800b50d 	.word	0x0800b50d
 800b484:	0800b535 	.word	0x0800b535
 800b488:	0800b535 	.word	0x0800b535
 800b48c:	0800b535 	.word	0x0800b535
 800b490:	0800b535 	.word	0x0800b535
 800b494:	0800b535 	.word	0x0800b535
 800b498:	0800b535 	.word	0x0800b535
 800b49c:	0800b535 	.word	0x0800b535
 800b4a0:	0800b515 	.word	0x0800b515
 800b4a4:	0800b535 	.word	0x0800b535
 800b4a8:	0800b535 	.word	0x0800b535
 800b4ac:	0800b535 	.word	0x0800b535
 800b4b0:	0800b535 	.word	0x0800b535
 800b4b4:	0800b535 	.word	0x0800b535
 800b4b8:	0800b535 	.word	0x0800b535
 800b4bc:	0800b535 	.word	0x0800b535
 800b4c0:	0800b51d 	.word	0x0800b51d
 800b4c4:	0800b535 	.word	0x0800b535
 800b4c8:	0800b535 	.word	0x0800b535
 800b4cc:	0800b535 	.word	0x0800b535
 800b4d0:	0800b535 	.word	0x0800b535
 800b4d4:	0800b535 	.word	0x0800b535
 800b4d8:	0800b535 	.word	0x0800b535
 800b4dc:	0800b535 	.word	0x0800b535
 800b4e0:	0800b525 	.word	0x0800b525
 800b4e4:	0800b535 	.word	0x0800b535
 800b4e8:	0800b535 	.word	0x0800b535
 800b4ec:	0800b535 	.word	0x0800b535
 800b4f0:	0800b535 	.word	0x0800b535
 800b4f4:	0800b535 	.word	0x0800b535
 800b4f8:	0800b535 	.word	0x0800b535
 800b4fc:	0800b535 	.word	0x0800b535
 800b500:	0800b52d 	.word	0x0800b52d
 800b504:	2301      	movs	r3, #1
 800b506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b50a:	e222      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b50c:	2304      	movs	r3, #4
 800b50e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b512:	e21e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b514:	2308      	movs	r3, #8
 800b516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b51a:	e21a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b51c:	2310      	movs	r3, #16
 800b51e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b522:	e216      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b524:	2320      	movs	r3, #32
 800b526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b52a:	e212      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b52c:	2340      	movs	r3, #64	; 0x40
 800b52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b532:	e20e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b534:	2380      	movs	r3, #128	; 0x80
 800b536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b53a:	e20a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a69      	ldr	r2, [pc, #420]	; (800b6e8 <UART_SetConfig+0x33c>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d130      	bne.n	800b5a8 <UART_SetConfig+0x1fc>
 800b546:	4b67      	ldr	r3, [pc, #412]	; (800b6e4 <UART_SetConfig+0x338>)
 800b548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b54a:	f003 0307 	and.w	r3, r3, #7
 800b54e:	2b05      	cmp	r3, #5
 800b550:	d826      	bhi.n	800b5a0 <UART_SetConfig+0x1f4>
 800b552:	a201      	add	r2, pc, #4	; (adr r2, 800b558 <UART_SetConfig+0x1ac>)
 800b554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b558:	0800b571 	.word	0x0800b571
 800b55c:	0800b579 	.word	0x0800b579
 800b560:	0800b581 	.word	0x0800b581
 800b564:	0800b589 	.word	0x0800b589
 800b568:	0800b591 	.word	0x0800b591
 800b56c:	0800b599 	.word	0x0800b599
 800b570:	2300      	movs	r3, #0
 800b572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b576:	e1ec      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b578:	2304      	movs	r3, #4
 800b57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b57e:	e1e8      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b580:	2308      	movs	r3, #8
 800b582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b586:	e1e4      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b588:	2310      	movs	r3, #16
 800b58a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b58e:	e1e0      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b590:	2320      	movs	r3, #32
 800b592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b596:	e1dc      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b598:	2340      	movs	r3, #64	; 0x40
 800b59a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b59e:	e1d8      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5a0:	2380      	movs	r3, #128	; 0x80
 800b5a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5a6:	e1d4      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a4f      	ldr	r2, [pc, #316]	; (800b6ec <UART_SetConfig+0x340>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d130      	bne.n	800b614 <UART_SetConfig+0x268>
 800b5b2:	4b4c      	ldr	r3, [pc, #304]	; (800b6e4 <UART_SetConfig+0x338>)
 800b5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5b6:	f003 0307 	and.w	r3, r3, #7
 800b5ba:	2b05      	cmp	r3, #5
 800b5bc:	d826      	bhi.n	800b60c <UART_SetConfig+0x260>
 800b5be:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <UART_SetConfig+0x218>)
 800b5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c4:	0800b5dd 	.word	0x0800b5dd
 800b5c8:	0800b5e5 	.word	0x0800b5e5
 800b5cc:	0800b5ed 	.word	0x0800b5ed
 800b5d0:	0800b5f5 	.word	0x0800b5f5
 800b5d4:	0800b5fd 	.word	0x0800b5fd
 800b5d8:	0800b605 	.word	0x0800b605
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5e2:	e1b6      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5e4:	2304      	movs	r3, #4
 800b5e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5ea:	e1b2      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5ec:	2308      	movs	r3, #8
 800b5ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5f2:	e1ae      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b5fa:	e1aa      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b5fc:	2320      	movs	r3, #32
 800b5fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b602:	e1a6      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b604:	2340      	movs	r3, #64	; 0x40
 800b606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b60a:	e1a2      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b60c:	2380      	movs	r3, #128	; 0x80
 800b60e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b612:	e19e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b614:	697b      	ldr	r3, [r7, #20]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a35      	ldr	r2, [pc, #212]	; (800b6f0 <UART_SetConfig+0x344>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d130      	bne.n	800b680 <UART_SetConfig+0x2d4>
 800b61e:	4b31      	ldr	r3, [pc, #196]	; (800b6e4 <UART_SetConfig+0x338>)
 800b620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b622:	f003 0307 	and.w	r3, r3, #7
 800b626:	2b05      	cmp	r3, #5
 800b628:	d826      	bhi.n	800b678 <UART_SetConfig+0x2cc>
 800b62a:	a201      	add	r2, pc, #4	; (adr r2, 800b630 <UART_SetConfig+0x284>)
 800b62c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b630:	0800b649 	.word	0x0800b649
 800b634:	0800b651 	.word	0x0800b651
 800b638:	0800b659 	.word	0x0800b659
 800b63c:	0800b661 	.word	0x0800b661
 800b640:	0800b669 	.word	0x0800b669
 800b644:	0800b671 	.word	0x0800b671
 800b648:	2300      	movs	r3, #0
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b64e:	e180      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b650:	2304      	movs	r3, #4
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b656:	e17c      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b658:	2308      	movs	r3, #8
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65e:	e178      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b660:	2310      	movs	r3, #16
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b666:	e174      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b668:	2320      	movs	r3, #32
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66e:	e170      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b670:	2340      	movs	r3, #64	; 0x40
 800b672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b676:	e16c      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b678:	2380      	movs	r3, #128	; 0x80
 800b67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b67e:	e168      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a1b      	ldr	r2, [pc, #108]	; (800b6f4 <UART_SetConfig+0x348>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d142      	bne.n	800b710 <UART_SetConfig+0x364>
 800b68a:	4b16      	ldr	r3, [pc, #88]	; (800b6e4 <UART_SetConfig+0x338>)
 800b68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b68e:	f003 0307 	and.w	r3, r3, #7
 800b692:	2b05      	cmp	r3, #5
 800b694:	d838      	bhi.n	800b708 <UART_SetConfig+0x35c>
 800b696:	a201      	add	r2, pc, #4	; (adr r2, 800b69c <UART_SetConfig+0x2f0>)
 800b698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b69c:	0800b6b5 	.word	0x0800b6b5
 800b6a0:	0800b6bd 	.word	0x0800b6bd
 800b6a4:	0800b6c5 	.word	0x0800b6c5
 800b6a8:	0800b6cd 	.word	0x0800b6cd
 800b6ac:	0800b6f9 	.word	0x0800b6f9
 800b6b0:	0800b701 	.word	0x0800b701
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ba:	e14a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b6bc:	2304      	movs	r3, #4
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c2:	e146      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b6c4:	2308      	movs	r3, #8
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ca:	e142      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b6cc:	2310      	movs	r3, #16
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d2:	e13e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b6d4:	cfff69f3 	.word	0xcfff69f3
 800b6d8:	58000c00 	.word	0x58000c00
 800b6dc:	11fff4ff 	.word	0x11fff4ff
 800b6e0:	40011000 	.word	0x40011000
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	40004400 	.word	0x40004400
 800b6ec:	40004800 	.word	0x40004800
 800b6f0:	40004c00 	.word	0x40004c00
 800b6f4:	40005000 	.word	0x40005000
 800b6f8:	2320      	movs	r3, #32
 800b6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6fe:	e128      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b700:	2340      	movs	r3, #64	; 0x40
 800b702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b706:	e124      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b708:	2380      	movs	r3, #128	; 0x80
 800b70a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b70e:	e120      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b710:	697b      	ldr	r3, [r7, #20]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	4acb      	ldr	r2, [pc, #812]	; (800ba44 <UART_SetConfig+0x698>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d176      	bne.n	800b808 <UART_SetConfig+0x45c>
 800b71a:	4bcb      	ldr	r3, [pc, #812]	; (800ba48 <UART_SetConfig+0x69c>)
 800b71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b722:	2b28      	cmp	r3, #40	; 0x28
 800b724:	d86c      	bhi.n	800b800 <UART_SetConfig+0x454>
 800b726:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <UART_SetConfig+0x380>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b7d1 	.word	0x0800b7d1
 800b730:	0800b801 	.word	0x0800b801
 800b734:	0800b801 	.word	0x0800b801
 800b738:	0800b801 	.word	0x0800b801
 800b73c:	0800b801 	.word	0x0800b801
 800b740:	0800b801 	.word	0x0800b801
 800b744:	0800b801 	.word	0x0800b801
 800b748:	0800b801 	.word	0x0800b801
 800b74c:	0800b7d9 	.word	0x0800b7d9
 800b750:	0800b801 	.word	0x0800b801
 800b754:	0800b801 	.word	0x0800b801
 800b758:	0800b801 	.word	0x0800b801
 800b75c:	0800b801 	.word	0x0800b801
 800b760:	0800b801 	.word	0x0800b801
 800b764:	0800b801 	.word	0x0800b801
 800b768:	0800b801 	.word	0x0800b801
 800b76c:	0800b7e1 	.word	0x0800b7e1
 800b770:	0800b801 	.word	0x0800b801
 800b774:	0800b801 	.word	0x0800b801
 800b778:	0800b801 	.word	0x0800b801
 800b77c:	0800b801 	.word	0x0800b801
 800b780:	0800b801 	.word	0x0800b801
 800b784:	0800b801 	.word	0x0800b801
 800b788:	0800b801 	.word	0x0800b801
 800b78c:	0800b7e9 	.word	0x0800b7e9
 800b790:	0800b801 	.word	0x0800b801
 800b794:	0800b801 	.word	0x0800b801
 800b798:	0800b801 	.word	0x0800b801
 800b79c:	0800b801 	.word	0x0800b801
 800b7a0:	0800b801 	.word	0x0800b801
 800b7a4:	0800b801 	.word	0x0800b801
 800b7a8:	0800b801 	.word	0x0800b801
 800b7ac:	0800b7f1 	.word	0x0800b7f1
 800b7b0:	0800b801 	.word	0x0800b801
 800b7b4:	0800b801 	.word	0x0800b801
 800b7b8:	0800b801 	.word	0x0800b801
 800b7bc:	0800b801 	.word	0x0800b801
 800b7c0:	0800b801 	.word	0x0800b801
 800b7c4:	0800b801 	.word	0x0800b801
 800b7c8:	0800b801 	.word	0x0800b801
 800b7cc:	0800b7f9 	.word	0x0800b7f9
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7d6:	e0bc      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7d8:	2304      	movs	r3, #4
 800b7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7de:	e0b8      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7e0:	2308      	movs	r3, #8
 800b7e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7e6:	e0b4      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7e8:	2310      	movs	r3, #16
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ee:	e0b0      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7f0:	2320      	movs	r3, #32
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7f6:	e0ac      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b7f8:	2340      	movs	r3, #64	; 0x40
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7fe:	e0a8      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b800:	2380      	movs	r3, #128	; 0x80
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b806:	e0a4      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	4a8f      	ldr	r2, [pc, #572]	; (800ba4c <UART_SetConfig+0x6a0>)
 800b80e:	4293      	cmp	r3, r2
 800b810:	d130      	bne.n	800b874 <UART_SetConfig+0x4c8>
 800b812:	4b8d      	ldr	r3, [pc, #564]	; (800ba48 <UART_SetConfig+0x69c>)
 800b814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b816:	f003 0307 	and.w	r3, r3, #7
 800b81a:	2b05      	cmp	r3, #5
 800b81c:	d826      	bhi.n	800b86c <UART_SetConfig+0x4c0>
 800b81e:	a201      	add	r2, pc, #4	; (adr r2, 800b824 <UART_SetConfig+0x478>)
 800b820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b824:	0800b83d 	.word	0x0800b83d
 800b828:	0800b845 	.word	0x0800b845
 800b82c:	0800b84d 	.word	0x0800b84d
 800b830:	0800b855 	.word	0x0800b855
 800b834:	0800b85d 	.word	0x0800b85d
 800b838:	0800b865 	.word	0x0800b865
 800b83c:	2300      	movs	r3, #0
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b842:	e086      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b844:	2304      	movs	r3, #4
 800b846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b84a:	e082      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b84c:	2308      	movs	r3, #8
 800b84e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b852:	e07e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b854:	2310      	movs	r3, #16
 800b856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b85a:	e07a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b85c:	2320      	movs	r3, #32
 800b85e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b862:	e076      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b864:	2340      	movs	r3, #64	; 0x40
 800b866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b86a:	e072      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b86c:	2380      	movs	r3, #128	; 0x80
 800b86e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b872:	e06e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b874:	697b      	ldr	r3, [r7, #20]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a75      	ldr	r2, [pc, #468]	; (800ba50 <UART_SetConfig+0x6a4>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d130      	bne.n	800b8e0 <UART_SetConfig+0x534>
 800b87e:	4b72      	ldr	r3, [pc, #456]	; (800ba48 <UART_SetConfig+0x69c>)
 800b880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	2b05      	cmp	r3, #5
 800b888:	d826      	bhi.n	800b8d8 <UART_SetConfig+0x52c>
 800b88a:	a201      	add	r2, pc, #4	; (adr r2, 800b890 <UART_SetConfig+0x4e4>)
 800b88c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b890:	0800b8a9 	.word	0x0800b8a9
 800b894:	0800b8b1 	.word	0x0800b8b1
 800b898:	0800b8b9 	.word	0x0800b8b9
 800b89c:	0800b8c1 	.word	0x0800b8c1
 800b8a0:	0800b8c9 	.word	0x0800b8c9
 800b8a4:	0800b8d1 	.word	0x0800b8d1
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ae:	e050      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8b0:	2304      	movs	r3, #4
 800b8b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8b6:	e04c      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8b8:	2308      	movs	r3, #8
 800b8ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8be:	e048      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8c0:	2310      	movs	r3, #16
 800b8c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8c6:	e044      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8c8:	2320      	movs	r3, #32
 800b8ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ce:	e040      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8d0:	2340      	movs	r3, #64	; 0x40
 800b8d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8d6:	e03c      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8d8:	2380      	movs	r3, #128	; 0x80
 800b8da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8de:	e038      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a5b      	ldr	r2, [pc, #364]	; (800ba54 <UART_SetConfig+0x6a8>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d130      	bne.n	800b94c <UART_SetConfig+0x5a0>
 800b8ea:	4b57      	ldr	r3, [pc, #348]	; (800ba48 <UART_SetConfig+0x69c>)
 800b8ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8ee:	f003 0307 	and.w	r3, r3, #7
 800b8f2:	2b05      	cmp	r3, #5
 800b8f4:	d826      	bhi.n	800b944 <UART_SetConfig+0x598>
 800b8f6:	a201      	add	r2, pc, #4	; (adr r2, 800b8fc <UART_SetConfig+0x550>)
 800b8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8fc:	0800b915 	.word	0x0800b915
 800b900:	0800b91d 	.word	0x0800b91d
 800b904:	0800b925 	.word	0x0800b925
 800b908:	0800b92d 	.word	0x0800b92d
 800b90c:	0800b935 	.word	0x0800b935
 800b910:	0800b93d 	.word	0x0800b93d
 800b914:	2302      	movs	r3, #2
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91a:	e01a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b91c:	2304      	movs	r3, #4
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b922:	e016      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b924:	2308      	movs	r3, #8
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92a:	e012      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b92c:	2310      	movs	r3, #16
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b932:	e00e      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b934:	2320      	movs	r3, #32
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b93a:	e00a      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b93c:	2340      	movs	r3, #64	; 0x40
 800b93e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b942:	e006      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b944:	2380      	movs	r3, #128	; 0x80
 800b946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b94a:	e002      	b.n	800b952 <UART_SetConfig+0x5a6>
 800b94c:	2380      	movs	r3, #128	; 0x80
 800b94e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4a3f      	ldr	r2, [pc, #252]	; (800ba54 <UART_SetConfig+0x6a8>)
 800b958:	4293      	cmp	r3, r2
 800b95a:	f040 80f8 	bne.w	800bb4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b95e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800b962:	2b20      	cmp	r3, #32
 800b964:	dc46      	bgt.n	800b9f4 <UART_SetConfig+0x648>
 800b966:	2b02      	cmp	r3, #2
 800b968:	f2c0 8082 	blt.w	800ba70 <UART_SetConfig+0x6c4>
 800b96c:	3b02      	subs	r3, #2
 800b96e:	2b1e      	cmp	r3, #30
 800b970:	d87e      	bhi.n	800ba70 <UART_SetConfig+0x6c4>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <UART_SetConfig+0x5cc>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b9fb 	.word	0x0800b9fb
 800b97c:	0800ba71 	.word	0x0800ba71
 800b980:	0800ba03 	.word	0x0800ba03
 800b984:	0800ba71 	.word	0x0800ba71
 800b988:	0800ba71 	.word	0x0800ba71
 800b98c:	0800ba71 	.word	0x0800ba71
 800b990:	0800ba13 	.word	0x0800ba13
 800b994:	0800ba71 	.word	0x0800ba71
 800b998:	0800ba71 	.word	0x0800ba71
 800b99c:	0800ba71 	.word	0x0800ba71
 800b9a0:	0800ba71 	.word	0x0800ba71
 800b9a4:	0800ba71 	.word	0x0800ba71
 800b9a8:	0800ba71 	.word	0x0800ba71
 800b9ac:	0800ba71 	.word	0x0800ba71
 800b9b0:	0800ba23 	.word	0x0800ba23
 800b9b4:	0800ba71 	.word	0x0800ba71
 800b9b8:	0800ba71 	.word	0x0800ba71
 800b9bc:	0800ba71 	.word	0x0800ba71
 800b9c0:	0800ba71 	.word	0x0800ba71
 800b9c4:	0800ba71 	.word	0x0800ba71
 800b9c8:	0800ba71 	.word	0x0800ba71
 800b9cc:	0800ba71 	.word	0x0800ba71
 800b9d0:	0800ba71 	.word	0x0800ba71
 800b9d4:	0800ba71 	.word	0x0800ba71
 800b9d8:	0800ba71 	.word	0x0800ba71
 800b9dc:	0800ba71 	.word	0x0800ba71
 800b9e0:	0800ba71 	.word	0x0800ba71
 800b9e4:	0800ba71 	.word	0x0800ba71
 800b9e8:	0800ba71 	.word	0x0800ba71
 800b9ec:	0800ba71 	.word	0x0800ba71
 800b9f0:	0800ba63 	.word	0x0800ba63
 800b9f4:	2b40      	cmp	r3, #64	; 0x40
 800b9f6:	d037      	beq.n	800ba68 <UART_SetConfig+0x6bc>
 800b9f8:	e03a      	b.n	800ba70 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b9fa:	f7fd fd3b 	bl	8009474 <HAL_RCCEx_GetD3PCLK1Freq>
 800b9fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba00:	e03c      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fd fd4a 	bl	80094a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ba0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba10:	e034      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba12:	f107 0318 	add.w	r3, r7, #24
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fd fe96 	bl	8009748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba20:	e02c      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba22:	4b09      	ldr	r3, [pc, #36]	; (800ba48 <UART_SetConfig+0x69c>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 0320 	and.w	r3, r3, #32
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d016      	beq.n	800ba5c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ba2e:	4b06      	ldr	r3, [pc, #24]	; (800ba48 <UART_SetConfig+0x69c>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	08db      	lsrs	r3, r3, #3
 800ba34:	f003 0303 	and.w	r3, r3, #3
 800ba38:	4a07      	ldr	r2, [pc, #28]	; (800ba58 <UART_SetConfig+0x6ac>)
 800ba3a:	fa22 f303 	lsr.w	r3, r2, r3
 800ba3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ba40:	e01c      	b.n	800ba7c <UART_SetConfig+0x6d0>
 800ba42:	bf00      	nop
 800ba44:	40011400 	.word	0x40011400
 800ba48:	58024400 	.word	0x58024400
 800ba4c:	40007800 	.word	0x40007800
 800ba50:	40007c00 	.word	0x40007c00
 800ba54:	58000c00 	.word	0x58000c00
 800ba58:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800ba5c:	4b9d      	ldr	r3, [pc, #628]	; (800bcd4 <UART_SetConfig+0x928>)
 800ba5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba60:	e00c      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ba62:	4b9d      	ldr	r3, [pc, #628]	; (800bcd8 <UART_SetConfig+0x92c>)
 800ba64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba66:	e009      	b.n	800ba7c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ba68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ba6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba6e:	e005      	b.n	800ba7c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800ba70:	2300      	movs	r3, #0
 800ba72:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ba74:	2301      	movs	r3, #1
 800ba76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ba7a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ba7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	f000 81de 	beq.w	800be40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ba84:	697b      	ldr	r3, [r7, #20]
 800ba86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba88:	4a94      	ldr	r2, [pc, #592]	; (800bcdc <UART_SetConfig+0x930>)
 800ba8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba96:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	005b      	lsls	r3, r3, #1
 800baa0:	4413      	add	r3, r2
 800baa2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d305      	bcc.n	800bab4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800baae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d903      	bls.n	800babc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800baba:	e1c1      	b.n	800be40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800babc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800babe:	2200      	movs	r2, #0
 800bac0:	60bb      	str	r3, [r7, #8]
 800bac2:	60fa      	str	r2, [r7, #12]
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bac8:	4a84      	ldr	r2, [pc, #528]	; (800bcdc <UART_SetConfig+0x930>)
 800baca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bace:	b29b      	uxth	r3, r3
 800bad0:	2200      	movs	r2, #0
 800bad2:	603b      	str	r3, [r7, #0]
 800bad4:	607a      	str	r2, [r7, #4]
 800bad6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bada:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bade:	f7f4 fc4f 	bl	8000380 <__aeabi_uldivmod>
 800bae2:	4602      	mov	r2, r0
 800bae4:	460b      	mov	r3, r1
 800bae6:	4610      	mov	r0, r2
 800bae8:	4619      	mov	r1, r3
 800baea:	f04f 0200 	mov.w	r2, #0
 800baee:	f04f 0300 	mov.w	r3, #0
 800baf2:	020b      	lsls	r3, r1, #8
 800baf4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800baf8:	0202      	lsls	r2, r0, #8
 800bafa:	6979      	ldr	r1, [r7, #20]
 800bafc:	6849      	ldr	r1, [r1, #4]
 800bafe:	0849      	lsrs	r1, r1, #1
 800bb00:	2000      	movs	r0, #0
 800bb02:	460c      	mov	r4, r1
 800bb04:	4605      	mov	r5, r0
 800bb06:	eb12 0804 	adds.w	r8, r2, r4
 800bb0a:	eb43 0905 	adc.w	r9, r3, r5
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	2200      	movs	r2, #0
 800bb14:	469a      	mov	sl, r3
 800bb16:	4693      	mov	fp, r2
 800bb18:	4652      	mov	r2, sl
 800bb1a:	465b      	mov	r3, fp
 800bb1c:	4640      	mov	r0, r8
 800bb1e:	4649      	mov	r1, r9
 800bb20:	f7f4 fc2e 	bl	8000380 <__aeabi_uldivmod>
 800bb24:	4602      	mov	r2, r0
 800bb26:	460b      	mov	r3, r1
 800bb28:	4613      	mov	r3, r2
 800bb2a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb32:	d308      	bcc.n	800bb46 <UART_SetConfig+0x79a>
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bb3a:	d204      	bcs.n	800bb46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb42:	60da      	str	r2, [r3, #12]
 800bb44:	e17c      	b.n	800be40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bb4c:	e178      	b.n	800be40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bb4e:	697b      	ldr	r3, [r7, #20]
 800bb50:	69db      	ldr	r3, [r3, #28]
 800bb52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb56:	f040 80c5 	bne.w	800bce4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bb5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bb5e:	2b20      	cmp	r3, #32
 800bb60:	dc48      	bgt.n	800bbf4 <UART_SetConfig+0x848>
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	db7b      	blt.n	800bc5e <UART_SetConfig+0x8b2>
 800bb66:	2b20      	cmp	r3, #32
 800bb68:	d879      	bhi.n	800bc5e <UART_SetConfig+0x8b2>
 800bb6a:	a201      	add	r2, pc, #4	; (adr r2, 800bb70 <UART_SetConfig+0x7c4>)
 800bb6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb70:	0800bbfb 	.word	0x0800bbfb
 800bb74:	0800bc03 	.word	0x0800bc03
 800bb78:	0800bc5f 	.word	0x0800bc5f
 800bb7c:	0800bc5f 	.word	0x0800bc5f
 800bb80:	0800bc0b 	.word	0x0800bc0b
 800bb84:	0800bc5f 	.word	0x0800bc5f
 800bb88:	0800bc5f 	.word	0x0800bc5f
 800bb8c:	0800bc5f 	.word	0x0800bc5f
 800bb90:	0800bc1b 	.word	0x0800bc1b
 800bb94:	0800bc5f 	.word	0x0800bc5f
 800bb98:	0800bc5f 	.word	0x0800bc5f
 800bb9c:	0800bc5f 	.word	0x0800bc5f
 800bba0:	0800bc5f 	.word	0x0800bc5f
 800bba4:	0800bc5f 	.word	0x0800bc5f
 800bba8:	0800bc5f 	.word	0x0800bc5f
 800bbac:	0800bc5f 	.word	0x0800bc5f
 800bbb0:	0800bc2b 	.word	0x0800bc2b
 800bbb4:	0800bc5f 	.word	0x0800bc5f
 800bbb8:	0800bc5f 	.word	0x0800bc5f
 800bbbc:	0800bc5f 	.word	0x0800bc5f
 800bbc0:	0800bc5f 	.word	0x0800bc5f
 800bbc4:	0800bc5f 	.word	0x0800bc5f
 800bbc8:	0800bc5f 	.word	0x0800bc5f
 800bbcc:	0800bc5f 	.word	0x0800bc5f
 800bbd0:	0800bc5f 	.word	0x0800bc5f
 800bbd4:	0800bc5f 	.word	0x0800bc5f
 800bbd8:	0800bc5f 	.word	0x0800bc5f
 800bbdc:	0800bc5f 	.word	0x0800bc5f
 800bbe0:	0800bc5f 	.word	0x0800bc5f
 800bbe4:	0800bc5f 	.word	0x0800bc5f
 800bbe8:	0800bc5f 	.word	0x0800bc5f
 800bbec:	0800bc5f 	.word	0x0800bc5f
 800bbf0:	0800bc51 	.word	0x0800bc51
 800bbf4:	2b40      	cmp	r3, #64	; 0x40
 800bbf6:	d02e      	beq.n	800bc56 <UART_SetConfig+0x8aa>
 800bbf8:	e031      	b.n	800bc5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bbfa:	f7fc fcc9 	bl	8008590 <HAL_RCC_GetPCLK1Freq>
 800bbfe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc00:	e033      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bc02:	f7fc fcdb 	bl	80085bc <HAL_RCC_GetPCLK2Freq>
 800bc06:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bc08:	e02f      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fd fc46 	bl	80094a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc18:	e027      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc1a:	f107 0318 	add.w	r3, r7, #24
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f7fd fd92 	bl	8009748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc28:	e01f      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc2a:	4b2d      	ldr	r3, [pc, #180]	; (800bce0 <UART_SetConfig+0x934>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f003 0320 	and.w	r3, r3, #32
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d009      	beq.n	800bc4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bc36:	4b2a      	ldr	r3, [pc, #168]	; (800bce0 <UART_SetConfig+0x934>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	08db      	lsrs	r3, r3, #3
 800bc3c:	f003 0303 	and.w	r3, r3, #3
 800bc40:	4a24      	ldr	r2, [pc, #144]	; (800bcd4 <UART_SetConfig+0x928>)
 800bc42:	fa22 f303 	lsr.w	r3, r2, r3
 800bc46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bc48:	e00f      	b.n	800bc6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bc4a:	4b22      	ldr	r3, [pc, #136]	; (800bcd4 <UART_SetConfig+0x928>)
 800bc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc4e:	e00c      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bc50:	4b21      	ldr	r3, [pc, #132]	; (800bcd8 <UART_SetConfig+0x92c>)
 800bc52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc54:	e009      	b.n	800bc6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bc56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc5c:	e005      	b.n	800bc6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bc68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bc6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	f000 80e7 	beq.w	800be40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc72:	697b      	ldr	r3, [r7, #20]
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	4a19      	ldr	r2, [pc, #100]	; (800bcdc <UART_SetConfig+0x930>)
 800bc78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc7c:	461a      	mov	r2, r3
 800bc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc80:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc84:	005a      	lsls	r2, r3, #1
 800bc86:	697b      	ldr	r3, [r7, #20]
 800bc88:	685b      	ldr	r3, [r3, #4]
 800bc8a:	085b      	lsrs	r3, r3, #1
 800bc8c:	441a      	add	r2, r3
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc9a:	2b0f      	cmp	r3, #15
 800bc9c:	d916      	bls.n	800bccc <UART_SetConfig+0x920>
 800bc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bca4:	d212      	bcs.n	800bccc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	f023 030f 	bic.w	r3, r3, #15
 800bcae:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcb2:	085b      	lsrs	r3, r3, #1
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	f003 0307 	and.w	r3, r3, #7
 800bcba:	b29a      	uxth	r2, r3
 800bcbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bcc8:	60da      	str	r2, [r3, #12]
 800bcca:	e0b9      	b.n	800be40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bccc:	2301      	movs	r3, #1
 800bcce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bcd2:	e0b5      	b.n	800be40 <UART_SetConfig+0xa94>
 800bcd4:	03d09000 	.word	0x03d09000
 800bcd8:	003d0900 	.word	0x003d0900
 800bcdc:	0800eb9c 	.word	0x0800eb9c
 800bce0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800bce4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bce8:	2b20      	cmp	r3, #32
 800bcea:	dc49      	bgt.n	800bd80 <UART_SetConfig+0x9d4>
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	db7c      	blt.n	800bdea <UART_SetConfig+0xa3e>
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	d87a      	bhi.n	800bdea <UART_SetConfig+0xa3e>
 800bcf4:	a201      	add	r2, pc, #4	; (adr r2, 800bcfc <UART_SetConfig+0x950>)
 800bcf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcfa:	bf00      	nop
 800bcfc:	0800bd87 	.word	0x0800bd87
 800bd00:	0800bd8f 	.word	0x0800bd8f
 800bd04:	0800bdeb 	.word	0x0800bdeb
 800bd08:	0800bdeb 	.word	0x0800bdeb
 800bd0c:	0800bd97 	.word	0x0800bd97
 800bd10:	0800bdeb 	.word	0x0800bdeb
 800bd14:	0800bdeb 	.word	0x0800bdeb
 800bd18:	0800bdeb 	.word	0x0800bdeb
 800bd1c:	0800bda7 	.word	0x0800bda7
 800bd20:	0800bdeb 	.word	0x0800bdeb
 800bd24:	0800bdeb 	.word	0x0800bdeb
 800bd28:	0800bdeb 	.word	0x0800bdeb
 800bd2c:	0800bdeb 	.word	0x0800bdeb
 800bd30:	0800bdeb 	.word	0x0800bdeb
 800bd34:	0800bdeb 	.word	0x0800bdeb
 800bd38:	0800bdeb 	.word	0x0800bdeb
 800bd3c:	0800bdb7 	.word	0x0800bdb7
 800bd40:	0800bdeb 	.word	0x0800bdeb
 800bd44:	0800bdeb 	.word	0x0800bdeb
 800bd48:	0800bdeb 	.word	0x0800bdeb
 800bd4c:	0800bdeb 	.word	0x0800bdeb
 800bd50:	0800bdeb 	.word	0x0800bdeb
 800bd54:	0800bdeb 	.word	0x0800bdeb
 800bd58:	0800bdeb 	.word	0x0800bdeb
 800bd5c:	0800bdeb 	.word	0x0800bdeb
 800bd60:	0800bdeb 	.word	0x0800bdeb
 800bd64:	0800bdeb 	.word	0x0800bdeb
 800bd68:	0800bdeb 	.word	0x0800bdeb
 800bd6c:	0800bdeb 	.word	0x0800bdeb
 800bd70:	0800bdeb 	.word	0x0800bdeb
 800bd74:	0800bdeb 	.word	0x0800bdeb
 800bd78:	0800bdeb 	.word	0x0800bdeb
 800bd7c:	0800bddd 	.word	0x0800bddd
 800bd80:	2b40      	cmp	r3, #64	; 0x40
 800bd82:	d02e      	beq.n	800bde2 <UART_SetConfig+0xa36>
 800bd84:	e031      	b.n	800bdea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd86:	f7fc fc03 	bl	8008590 <HAL_RCC_GetPCLK1Freq>
 800bd8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd8c:	e033      	b.n	800bdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd8e:	f7fc fc15 	bl	80085bc <HAL_RCC_GetPCLK2Freq>
 800bd92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd94:	e02f      	b.n	800bdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	f7fd fb80 	bl	80094a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bda4:	e027      	b.n	800bdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bda6:	f107 0318 	add.w	r3, r7, #24
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7fd fccc 	bl	8009748 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdb4:	e01f      	b.n	800bdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdb6:	4b2d      	ldr	r3, [pc, #180]	; (800be6c <UART_SetConfig+0xac0>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f003 0320 	and.w	r3, r3, #32
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d009      	beq.n	800bdd6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdc2:	4b2a      	ldr	r3, [pc, #168]	; (800be6c <UART_SetConfig+0xac0>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	08db      	lsrs	r3, r3, #3
 800bdc8:	f003 0303 	and.w	r3, r3, #3
 800bdcc:	4a28      	ldr	r2, [pc, #160]	; (800be70 <UART_SetConfig+0xac4>)
 800bdce:	fa22 f303 	lsr.w	r3, r2, r3
 800bdd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdd4:	e00f      	b.n	800bdf6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bdd6:	4b26      	ldr	r3, [pc, #152]	; (800be70 <UART_SetConfig+0xac4>)
 800bdd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdda:	e00c      	b.n	800bdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bddc:	4b25      	ldr	r3, [pc, #148]	; (800be74 <UART_SetConfig+0xac8>)
 800bdde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde0:	e009      	b.n	800bdf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bde2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde8:	e005      	b.n	800bdf6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bdea:	2300      	movs	r3, #0
 800bdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bdee:	2301      	movs	r3, #1
 800bdf0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bdf4:	bf00      	nop
    }

    if (pclk != 0U)
 800bdf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d021      	beq.n	800be40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be00:	4a1d      	ldr	r2, [pc, #116]	; (800be78 <UART_SetConfig+0xacc>)
 800be02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be06:	461a      	mov	r2, r3
 800be08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be0a:	fbb3 f2f2 	udiv	r2, r3, r2
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	685b      	ldr	r3, [r3, #4]
 800be12:	085b      	lsrs	r3, r3, #1
 800be14:	441a      	add	r2, r3
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	685b      	ldr	r3, [r3, #4]
 800be1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be1e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be22:	2b0f      	cmp	r3, #15
 800be24:	d909      	bls.n	800be3a <UART_SetConfig+0xa8e>
 800be26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be2c:	d205      	bcs.n	800be3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be30:	b29a      	uxth	r2, r3
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	60da      	str	r2, [r3, #12]
 800be38:	e002      	b.n	800be40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800be3a:	2301      	movs	r3, #1
 800be3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	2201      	movs	r2, #1
 800be44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2200      	movs	r2, #0
 800be54:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	2200      	movs	r2, #0
 800be5a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800be5c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800be60:	4618      	mov	r0, r3
 800be62:	3748      	adds	r7, #72	; 0x48
 800be64:	46bd      	mov	sp, r7
 800be66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be6a:	bf00      	nop
 800be6c:	58024400 	.word	0x58024400
 800be70:	03d09000 	.word	0x03d09000
 800be74:	003d0900 	.word	0x003d0900
 800be78:	0800eb9c 	.word	0x0800eb9c

0800be7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be7c:	b480      	push	{r7}
 800be7e:	b083      	sub	sp, #12
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d00a      	beq.n	800bea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beaa:	f003 0302 	and.w	r3, r3, #2
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d00a      	beq.n	800bec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	430a      	orrs	r2, r1
 800bec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800becc:	f003 0304 	and.w	r3, r3, #4
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d00a      	beq.n	800beea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	430a      	orrs	r2, r1
 800bee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beee:	f003 0308 	and.w	r3, r3, #8
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d00a      	beq.n	800bf0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf10:	f003 0310 	and.w	r3, r3, #16
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d00a      	beq.n	800bf2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	430a      	orrs	r2, r1
 800bf2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf32:	f003 0320 	and.w	r3, r3, #32
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d00a      	beq.n	800bf50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	430a      	orrs	r2, r1
 800bf4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d01a      	beq.n	800bf92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	430a      	orrs	r2, r1
 800bf70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf7a:	d10a      	bne.n	800bf92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	430a      	orrs	r2, r1
 800bf90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00a      	beq.n	800bfb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	685b      	ldr	r3, [r3, #4]
 800bfa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	430a      	orrs	r2, r1
 800bfb2:	605a      	str	r2, [r3, #4]
  }
}
 800bfb4:	bf00      	nop
 800bfb6:	370c      	adds	r7, #12
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbe:	4770      	bx	lr

0800bfc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfd0:	f7f7 ffca 	bl	8003f68 <HAL_GetTick>
 800bfd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f003 0308 	and.w	r3, r3, #8
 800bfe0:	2b08      	cmp	r3, #8
 800bfe2:	d10e      	bne.n	800c002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfe8:	9300      	str	r3, [sp, #0]
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f82f 	bl	800c056 <UART_WaitOnFlagUntilTimeout>
 800bff8:	4603      	mov	r3, r0
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d001      	beq.n	800c002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bffe:	2303      	movs	r3, #3
 800c000:	e025      	b.n	800c04e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 0304 	and.w	r3, r3, #4
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	d10e      	bne.n	800c02e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c010:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2200      	movs	r2, #0
 800c01a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f819 	bl	800c056 <UART_WaitOnFlagUntilTimeout>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	d001      	beq.n	800c02e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c02a:	2303      	movs	r3, #3
 800c02c:	e00f      	b.n	800c04e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2220      	movs	r2, #32
 800c032:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2220      	movs	r2, #32
 800c03a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2200      	movs	r2, #0
 800c042:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}

0800c056 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c056:	b580      	push	{r7, lr}
 800c058:	b09c      	sub	sp, #112	; 0x70
 800c05a:	af00      	add	r7, sp, #0
 800c05c:	60f8      	str	r0, [r7, #12]
 800c05e:	60b9      	str	r1, [r7, #8]
 800c060:	603b      	str	r3, [r7, #0]
 800c062:	4613      	mov	r3, r2
 800c064:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c066:	e0a9      	b.n	800c1bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c068:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c06a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06e:	f000 80a5 	beq.w	800c1bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c072:	f7f7 ff79 	bl	8003f68 <HAL_GetTick>
 800c076:	4602      	mov	r2, r0
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	1ad3      	subs	r3, r2, r3
 800c07c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c07e:	429a      	cmp	r2, r3
 800c080:	d302      	bcc.n	800c088 <UART_WaitOnFlagUntilTimeout+0x32>
 800c082:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c084:	2b00      	cmp	r3, #0
 800c086:	d140      	bne.n	800c10a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c098:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c09c:	667b      	str	r3, [r7, #100]	; 0x64
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	461a      	mov	r2, r3
 800c0a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c0a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c0ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c0b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e6      	bne.n	800c088 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	3308      	adds	r3, #8
 800c0c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0c4:	e853 3f00 	ldrex	r3, [r3]
 800c0c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0cc:	f023 0301 	bic.w	r3, r3, #1
 800c0d0:	663b      	str	r3, [r7, #96]	; 0x60
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	3308      	adds	r3, #8
 800c0d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c0da:	64ba      	str	r2, [r7, #72]	; 0x48
 800c0dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0e2:	e841 2300 	strex	r3, r2, [r1]
 800c0e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c0e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1e5      	bne.n	800c0ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	2220      	movs	r2, #32
 800c0f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	2220      	movs	r2, #32
 800c0fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c106:	2303      	movs	r3, #3
 800c108:	e069      	b.n	800c1de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 0304 	and.w	r3, r3, #4
 800c114:	2b00      	cmp	r3, #0
 800c116:	d051      	beq.n	800c1bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	69db      	ldr	r3, [r3, #28]
 800c11e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c122:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c126:	d149      	bne.n	800c1bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c130:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13a:	e853 3f00 	ldrex	r3, [r3]
 800c13e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c146:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	461a      	mov	r2, r3
 800c14e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c150:	637b      	str	r3, [r7, #52]	; 0x34
 800c152:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c154:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c156:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c158:	e841 2300 	strex	r3, r2, [r1]
 800c15c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c160:	2b00      	cmp	r3, #0
 800c162:	d1e6      	bne.n	800c132 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	3308      	adds	r3, #8
 800c16a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	e853 3f00 	ldrex	r3, [r3]
 800c172:	613b      	str	r3, [r7, #16]
   return(result);
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	f023 0301 	bic.w	r3, r3, #1
 800c17a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3308      	adds	r3, #8
 800c182:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c184:	623a      	str	r2, [r7, #32]
 800c186:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c188:	69f9      	ldr	r1, [r7, #28]
 800c18a:	6a3a      	ldr	r2, [r7, #32]
 800c18c:	e841 2300 	strex	r3, r2, [r1]
 800c190:	61bb      	str	r3, [r7, #24]
   return(result);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1e5      	bne.n	800c164 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2220      	movs	r2, #32
 800c19c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	2220      	movs	r2, #32
 800c1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	2220      	movs	r2, #32
 800c1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c1b8:	2303      	movs	r3, #3
 800c1ba:	e010      	b.n	800c1de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	69da      	ldr	r2, [r3, #28]
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	4013      	ands	r3, r2
 800c1c6:	68ba      	ldr	r2, [r7, #8]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	bf0c      	ite	eq
 800c1cc:	2301      	moveq	r3, #1
 800c1ce:	2300      	movne	r3, #0
 800c1d0:	b2db      	uxtb	r3, r3
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	79fb      	ldrb	r3, [r7, #7]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	f43f af46 	beq.w	800c068 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3770      	adds	r7, #112	; 0x70
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}
	...

0800c1e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b095      	sub	sp, #84	; 0x54
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	681b      	ldr	r3, [r3, #0]
 800c1f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f8:	e853 3f00 	ldrex	r3, [r3]
 800c1fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c204:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	461a      	mov	r2, r3
 800c20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c20e:	643b      	str	r3, [r7, #64]	; 0x40
 800c210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c216:	e841 2300 	strex	r3, r2, [r1]
 800c21a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1e6      	bne.n	800c1f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	3308      	adds	r3, #8
 800c228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c22a:	6a3b      	ldr	r3, [r7, #32]
 800c22c:	e853 3f00 	ldrex	r3, [r3]
 800c230:	61fb      	str	r3, [r7, #28]
   return(result);
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	4b1e      	ldr	r3, [pc, #120]	; (800c2b0 <UART_EndRxTransfer+0xc8>)
 800c236:	4013      	ands	r3, r2
 800c238:	64bb      	str	r3, [r7, #72]	; 0x48
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	3308      	adds	r3, #8
 800c240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c242:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c24a:	e841 2300 	strex	r3, r2, [r1]
 800c24e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c252:	2b00      	cmp	r3, #0
 800c254:	d1e5      	bne.n	800c222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c25a:	2b01      	cmp	r3, #1
 800c25c:	d118      	bne.n	800c290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	e853 3f00 	ldrex	r3, [r3]
 800c26a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	f023 0310 	bic.w	r3, r3, #16
 800c272:	647b      	str	r3, [r7, #68]	; 0x44
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	461a      	mov	r2, r3
 800c27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c27c:	61bb      	str	r3, [r7, #24]
 800c27e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c280:	6979      	ldr	r1, [r7, #20]
 800c282:	69ba      	ldr	r2, [r7, #24]
 800c284:	e841 2300 	strex	r3, r2, [r1]
 800c288:	613b      	str	r3, [r7, #16]
   return(result);
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d1e6      	bne.n	800c25e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	2220      	movs	r2, #32
 800c294:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2200      	movs	r2, #0
 800c29c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c2a4:	bf00      	nop
 800c2a6:	3754      	adds	r7, #84	; 0x54
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr
 800c2b0:	effffffe 	.word	0xeffffffe

0800c2b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f7ff f854 	bl	800b380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c2d8:	bf00      	nop
 800c2da:	3710      	adds	r7, #16
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}

0800c2e0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c2e0:	b580      	push	{r7, lr}
 800c2e2:	b088      	sub	sp, #32
 800c2e4:	af00      	add	r7, sp, #0
 800c2e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	e853 3f00 	ldrex	r3, [r3]
 800c2f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2fc:	61fb      	str	r3, [r7, #28]
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	461a      	mov	r2, r3
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	61bb      	str	r3, [r7, #24]
 800c308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c30a:	6979      	ldr	r1, [r7, #20]
 800c30c:	69ba      	ldr	r2, [r7, #24]
 800c30e:	e841 2300 	strex	r3, r2, [r1]
 800c312:	613b      	str	r3, [r7, #16]
   return(result);
 800c314:	693b      	ldr	r3, [r7, #16]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d1e6      	bne.n	800c2e8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2220      	movs	r2, #32
 800c31e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	2200      	movs	r2, #0
 800c326:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c328:	6878      	ldr	r0, [r7, #4]
 800c32a:	f7ff f81f 	bl	800b36c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c32e:	bf00      	nop
 800c330:	3720      	adds	r7, #32
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c336:	b480      	push	{r7}
 800c338:	b083      	sub	sp, #12
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c33e:	bf00      	nop
 800c340:	370c      	adds	r7, #12
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b083      	sub	sp, #12
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c352:	bf00      	nop
 800c354:	370c      	adds	r7, #12
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr

0800c35e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c35e:	b480      	push	{r7}
 800c360:	b083      	sub	sp, #12
 800c362:	af00      	add	r7, sp, #0
 800c364:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c366:	bf00      	nop
 800c368:	370c      	adds	r7, #12
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr

0800c372 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c372:	b480      	push	{r7}
 800c374:	b085      	sub	sp, #20
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c380:	2b01      	cmp	r3, #1
 800c382:	d101      	bne.n	800c388 <HAL_UARTEx_DisableFifoMode+0x16>
 800c384:	2302      	movs	r3, #2
 800c386:	e027      	b.n	800c3d8 <HAL_UARTEx_DisableFifoMode+0x66>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2201      	movs	r2, #1
 800c38c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	2224      	movs	r2, #36	; 0x24
 800c394:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	f022 0201 	bic.w	r2, r2, #1
 800c3ae:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c3b6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	68fa      	ldr	r2, [r7, #12]
 800c3c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2220      	movs	r2, #32
 800c3ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d101      	bne.n	800c3fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c3f8:	2302      	movs	r3, #2
 800c3fa:	e02d      	b.n	800c458 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2201      	movs	r2, #1
 800c400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2224      	movs	r2, #36	; 0x24
 800c408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f022 0201 	bic.w	r2, r2, #1
 800c422:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	430a      	orrs	r2, r1
 800c436:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c438:	6878      	ldr	r0, [r7, #4]
 800c43a:	f000 f84f 	bl	800c4dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2220      	movs	r2, #32
 800c44a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c456:	2300      	movs	r3, #0
}
 800c458:	4618      	mov	r0, r3
 800c45a:	3710      	adds	r7, #16
 800c45c:	46bd      	mov	sp, r7
 800c45e:	bd80      	pop	{r7, pc}

0800c460 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
 800c468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c470:	2b01      	cmp	r3, #1
 800c472:	d101      	bne.n	800c478 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c474:	2302      	movs	r3, #2
 800c476:	e02d      	b.n	800c4d4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	2201      	movs	r2, #1
 800c47c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2224      	movs	r2, #36	; 0x24
 800c484:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f022 0201 	bic.w	r2, r2, #1
 800c49e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f000 f811 	bl	800c4dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	68fa      	ldr	r2, [r7, #12]
 800c4c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2220      	movs	r2, #32
 800c4c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d108      	bne.n	800c4fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c4fc:	e031      	b.n	800c562 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c4fe:	2310      	movs	r3, #16
 800c500:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c502:	2310      	movs	r3, #16
 800c504:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	0e5b      	lsrs	r3, r3, #25
 800c50e:	b2db      	uxtb	r3, r3
 800c510:	f003 0307 	and.w	r3, r3, #7
 800c514:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	0f5b      	lsrs	r3, r3, #29
 800c51e:	b2db      	uxtb	r3, r3
 800c520:	f003 0307 	and.w	r3, r3, #7
 800c524:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c526:	7bbb      	ldrb	r3, [r7, #14]
 800c528:	7b3a      	ldrb	r2, [r7, #12]
 800c52a:	4911      	ldr	r1, [pc, #68]	; (800c570 <UARTEx_SetNbDataToProcess+0x94>)
 800c52c:	5c8a      	ldrb	r2, [r1, r2]
 800c52e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c532:	7b3a      	ldrb	r2, [r7, #12]
 800c534:	490f      	ldr	r1, [pc, #60]	; (800c574 <UARTEx_SetNbDataToProcess+0x98>)
 800c536:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c538:	fb93 f3f2 	sdiv	r3, r3, r2
 800c53c:	b29a      	uxth	r2, r3
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c544:	7bfb      	ldrb	r3, [r7, #15]
 800c546:	7b7a      	ldrb	r2, [r7, #13]
 800c548:	4909      	ldr	r1, [pc, #36]	; (800c570 <UARTEx_SetNbDataToProcess+0x94>)
 800c54a:	5c8a      	ldrb	r2, [r1, r2]
 800c54c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c550:	7b7a      	ldrb	r2, [r7, #13]
 800c552:	4908      	ldr	r1, [pc, #32]	; (800c574 <UARTEx_SetNbDataToProcess+0x98>)
 800c554:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c556:	fb93 f3f2 	sdiv	r3, r3, r2
 800c55a:	b29a      	uxth	r2, r3
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c562:	bf00      	nop
 800c564:	3714      	adds	r7, #20
 800c566:	46bd      	mov	sp, r7
 800c568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56c:	4770      	bx	lr
 800c56e:	bf00      	nop
 800c570:	0800ebb4 	.word	0x0800ebb4
 800c574:	0800ebbc 	.word	0x0800ebbc

0800c578 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c578:	b084      	sub	sp, #16
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b084      	sub	sp, #16
 800c57e:	af00      	add	r7, sp, #0
 800c580:	6078      	str	r0, [r7, #4]
 800c582:	f107 001c 	add.w	r0, r7, #28
 800c586:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c58a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c58c:	2b01      	cmp	r3, #1
 800c58e:	d120      	bne.n	800c5d2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c594:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	68da      	ldr	r2, [r3, #12]
 800c5a0:	4b2a      	ldr	r3, [pc, #168]	; (800c64c <USB_CoreInit+0xd4>)
 800c5a2:	4013      	ands	r3, r2
 800c5a4:	687a      	ldr	r2, [r7, #4]
 800c5a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68db      	ldr	r3, [r3, #12]
 800c5ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c5b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d105      	bne.n	800c5c6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 faac 	bl	800cb24 <USB_CoreReset>
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	73fb      	strb	r3, [r7, #15]
 800c5d0:	e01a      	b.n	800c608 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	68db      	ldr	r3, [r3, #12]
 800c5d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 faa0 	bl	800cb24 <USB_CoreReset>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c5e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d106      	bne.n	800c5fc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	639a      	str	r2, [r3, #56]	; 0x38
 800c5fa:	e005      	b.n	800c608 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d116      	bne.n	800c63c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c612:	b29a      	uxth	r2, r3
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c61c:	4b0c      	ldr	r3, [pc, #48]	; (800c650 <USB_CoreInit+0xd8>)
 800c61e:	4313      	orrs	r3, r2
 800c620:	687a      	ldr	r2, [r7, #4]
 800c622:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	689b      	ldr	r3, [r3, #8]
 800c628:	f043 0206 	orr.w	r2, r3, #6
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	f043 0220 	orr.w	r2, r3, #32
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c648:	b004      	add	sp, #16
 800c64a:	4770      	bx	lr
 800c64c:	ffbdffbf 	.word	0xffbdffbf
 800c650:	03ee0000 	.word	0x03ee0000

0800c654 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c654:	b480      	push	{r7}
 800c656:	b083      	sub	sp, #12
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	689b      	ldr	r3, [r3, #8]
 800c660:	f023 0201 	bic.w	r2, r3, #1
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c668:	2300      	movs	r3, #0
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	370c      	adds	r7, #12
 800c66e:	46bd      	mov	sp, r7
 800c670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c674:	4770      	bx	lr

0800c676 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c682:	2300      	movs	r3, #0
 800c684:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	68db      	ldr	r3, [r3, #12]
 800c68a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c692:	78fb      	ldrb	r3, [r7, #3]
 800c694:	2b01      	cmp	r3, #1
 800c696:	d115      	bne.n	800c6c4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c6a4:	2001      	movs	r0, #1
 800c6a6:	f7f7 fc6b 	bl	8003f80 <HAL_Delay>
      ms++;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fa29 	bl	800cb08 <USB_GetMode>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d01e      	beq.n	800c6fa <USB_SetCurrentMode+0x84>
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	2b31      	cmp	r3, #49	; 0x31
 800c6c0:	d9f0      	bls.n	800c6a4 <USB_SetCurrentMode+0x2e>
 800c6c2:	e01a      	b.n	800c6fa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c6c4:	78fb      	ldrb	r3, [r7, #3]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d115      	bne.n	800c6f6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c6d6:	2001      	movs	r0, #1
 800c6d8:	f7f7 fc52 	bl	8003f80 <HAL_Delay>
      ms++;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fa10 	bl	800cb08 <USB_GetMode>
 800c6e8:	4603      	mov	r3, r0
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d005      	beq.n	800c6fa <USB_SetCurrentMode+0x84>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2b31      	cmp	r3, #49	; 0x31
 800c6f2:	d9f0      	bls.n	800c6d6 <USB_SetCurrentMode+0x60>
 800c6f4:	e001      	b.n	800c6fa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	e005      	b.n	800c706 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2b32      	cmp	r3, #50	; 0x32
 800c6fe:	d101      	bne.n	800c704 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	e000      	b.n	800c706 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c704:	2300      	movs	r3, #0
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
	...

0800c710 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c710:	b084      	sub	sp, #16
 800c712:	b580      	push	{r7, lr}
 800c714:	b086      	sub	sp, #24
 800c716:	af00      	add	r7, sp, #0
 800c718:	6078      	str	r0, [r7, #4]
 800c71a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c71e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c722:	2300      	movs	r3, #0
 800c724:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c72a:	2300      	movs	r3, #0
 800c72c:	613b      	str	r3, [r7, #16]
 800c72e:	e009      	b.n	800c744 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	3340      	adds	r3, #64	; 0x40
 800c736:	009b      	lsls	r3, r3, #2
 800c738:	4413      	add	r3, r2
 800c73a:	2200      	movs	r2, #0
 800c73c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c73e:	693b      	ldr	r3, [r7, #16]
 800c740:	3301      	adds	r3, #1
 800c742:	613b      	str	r3, [r7, #16]
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	2b0e      	cmp	r3, #14
 800c748:	d9f2      	bls.n	800c730 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c74a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d11c      	bne.n	800c78a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c756:	685b      	ldr	r3, [r3, #4]
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c75e:	f043 0302 	orr.w	r3, r3, #2
 800c762:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c768:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	601a      	str	r2, [r3, #0]
 800c788:	e005      	b.n	800c796 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c78e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c79c:	461a      	mov	r2, r3
 800c79e:	2300      	movs	r3, #0
 800c7a0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	680b      	ldr	r3, [r1, #0]
 800c7b4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7b8:	2b01      	cmp	r3, #1
 800c7ba:	d10c      	bne.n	800c7d6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d104      	bne.n	800c7cc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c7c2:	2100      	movs	r1, #0
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f000 f965 	bl	800ca94 <USB_SetDevSpeed>
 800c7ca:	e008      	b.n	800c7de <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c7cc:	2101      	movs	r1, #1
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f960 	bl	800ca94 <USB_SetDevSpeed>
 800c7d4:	e003      	b.n	800c7de <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c7d6:	2103      	movs	r1, #3
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f95b 	bl	800ca94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c7de:	2110      	movs	r1, #16
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f8f3 	bl	800c9cc <USB_FlushTxFifo>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d001      	beq.n	800c7f0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c7f0:	6878      	ldr	r0, [r7, #4]
 800c7f2:	f000 f91f 	bl	800ca34 <USB_FlushRxFifo>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d001      	beq.n	800c800 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c7fc:	2301      	movs	r3, #1
 800c7fe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c806:	461a      	mov	r2, r3
 800c808:	2300      	movs	r3, #0
 800c80a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c812:	461a      	mov	r2, r3
 800c814:	2300      	movs	r3, #0
 800c816:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c81e:	461a      	mov	r2, r3
 800c820:	2300      	movs	r3, #0
 800c822:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c824:	2300      	movs	r3, #0
 800c826:	613b      	str	r3, [r7, #16]
 800c828:	e043      	b.n	800c8b2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	015a      	lsls	r2, r3, #5
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	4413      	add	r3, r2
 800c832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c83c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c840:	d118      	bne.n	800c874 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10a      	bne.n	800c85e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c848:	693b      	ldr	r3, [r7, #16]
 800c84a:	015a      	lsls	r2, r3, #5
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	4413      	add	r3, r2
 800c850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c854:	461a      	mov	r2, r3
 800c856:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	e013      	b.n	800c886 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	015a      	lsls	r2, r3, #5
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	4413      	add	r3, r2
 800c866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c86a:	461a      	mov	r2, r3
 800c86c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c870:	6013      	str	r3, [r2, #0]
 800c872:	e008      	b.n	800c886 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c874:	693b      	ldr	r3, [r7, #16]
 800c876:	015a      	lsls	r2, r3, #5
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	4413      	add	r3, r2
 800c87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c880:	461a      	mov	r2, r3
 800c882:	2300      	movs	r3, #0
 800c884:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	015a      	lsls	r2, r3, #5
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	4413      	add	r3, r2
 800c88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c892:	461a      	mov	r2, r3
 800c894:	2300      	movs	r3, #0
 800c896:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	015a      	lsls	r2, r3, #5
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	4413      	add	r3, r2
 800c8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c8aa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8ac:	693b      	ldr	r3, [r7, #16]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	613b      	str	r3, [r7, #16]
 800c8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d3b7      	bcc.n	800c82a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	613b      	str	r3, [r7, #16]
 800c8be:	e043      	b.n	800c948 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	015a      	lsls	r2, r3, #5
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8d6:	d118      	bne.n	800c90a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10a      	bne.n	800c8f4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	015a      	lsls	r2, r3, #5
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	4413      	add	r3, r2
 800c8e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c8f0:	6013      	str	r3, [r2, #0]
 800c8f2:	e013      	b.n	800c91c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	015a      	lsls	r2, r3, #5
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	4413      	add	r3, r2
 800c8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c900:	461a      	mov	r2, r3
 800c902:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c906:	6013      	str	r3, [r2, #0]
 800c908:	e008      	b.n	800c91c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	015a      	lsls	r2, r3, #5
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	4413      	add	r3, r2
 800c912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c916:	461a      	mov	r2, r3
 800c918:	2300      	movs	r3, #0
 800c91a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	015a      	lsls	r2, r3, #5
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	4413      	add	r3, r2
 800c924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c928:	461a      	mov	r2, r3
 800c92a:	2300      	movs	r3, #0
 800c92c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	015a      	lsls	r2, r3, #5
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	4413      	add	r3, r2
 800c936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c93a:	461a      	mov	r2, r3
 800c93c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c940:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	3301      	adds	r3, #1
 800c946:	613b      	str	r3, [r7, #16]
 800c948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94a:	693a      	ldr	r2, [r7, #16]
 800c94c:	429a      	cmp	r2, r3
 800c94e:	d3b7      	bcc.n	800c8c0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c956:	691b      	ldr	r3, [r3, #16]
 800c958:	68fa      	ldr	r2, [r7, #12]
 800c95a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c95e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c962:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c970:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	2b00      	cmp	r3, #0
 800c976:	d105      	bne.n	800c984 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	f043 0210 	orr.w	r2, r3, #16
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	699a      	ldr	r2, [r3, #24]
 800c988:	4b0e      	ldr	r3, [pc, #56]	; (800c9c4 <USB_DevInit+0x2b4>)
 800c98a:	4313      	orrs	r3, r2
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c992:	2b00      	cmp	r3, #0
 800c994:	d005      	beq.n	800c9a2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	f043 0208 	orr.w	r2, r3, #8
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9a4:	2b01      	cmp	r3, #1
 800c9a6:	d105      	bne.n	800c9b4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	699a      	ldr	r2, [r3, #24]
 800c9ac:	4b06      	ldr	r3, [pc, #24]	; (800c9c8 <USB_DevInit+0x2b8>)
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	687a      	ldr	r2, [r7, #4]
 800c9b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c9c0:	b004      	add	sp, #16
 800c9c2:	4770      	bx	lr
 800c9c4:	803c3800 	.word	0x803c3800
 800c9c8:	40000004 	.word	0x40000004

0800c9cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4a13      	ldr	r2, [pc, #76]	; (800ca30 <USB_FlushTxFifo+0x64>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d901      	bls.n	800c9ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	e01b      	b.n	800ca24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	daf2      	bge.n	800c9da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	019b      	lsls	r3, r3, #6
 800c9fc:	f043 0220 	orr.w	r2, r3, #32
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	3301      	adds	r3, #1
 800ca08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	4a08      	ldr	r2, [pc, #32]	; (800ca30 <USB_FlushTxFifo+0x64>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d901      	bls.n	800ca16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ca12:	2303      	movs	r3, #3
 800ca14:	e006      	b.n	800ca24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	f003 0320 	and.w	r3, r3, #32
 800ca1e:	2b20      	cmp	r3, #32
 800ca20:	d0f0      	beq.n	800ca04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr
 800ca30:	00030d40 	.word	0x00030d40

0800ca34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ca34:	b480      	push	{r7}
 800ca36:	b085      	sub	sp, #20
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3301      	adds	r3, #1
 800ca44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	4a11      	ldr	r2, [pc, #68]	; (800ca90 <USB_FlushRxFifo+0x5c>)
 800ca4a:	4293      	cmp	r3, r2
 800ca4c:	d901      	bls.n	800ca52 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	e018      	b.n	800ca84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	691b      	ldr	r3, [r3, #16]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	daf2      	bge.n	800ca40 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2210      	movs	r2, #16
 800ca62:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3301      	adds	r3, #1
 800ca68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	4a08      	ldr	r2, [pc, #32]	; (800ca90 <USB_FlushRxFifo+0x5c>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d901      	bls.n	800ca76 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ca72:	2303      	movs	r3, #3
 800ca74:	e006      	b.n	800ca84 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	691b      	ldr	r3, [r3, #16]
 800ca7a:	f003 0310 	and.w	r3, r3, #16
 800ca7e:	2b10      	cmp	r3, #16
 800ca80:	d0f0      	beq.n	800ca64 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ca82:	2300      	movs	r3, #0
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3714      	adds	r7, #20
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr
 800ca90:	00030d40 	.word	0x00030d40

0800ca94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b085      	sub	sp, #20
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
 800ca9c:	460b      	mov	r3, r1
 800ca9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	78fb      	ldrb	r3, [r7, #3]
 800caae:	68f9      	ldr	r1, [r7, #12]
 800cab0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cab4:	4313      	orrs	r3, r2
 800cab6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr

0800cac6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cac6:	b480      	push	{r7}
 800cac8:	b085      	sub	sp, #20
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	68fa      	ldr	r2, [r7, #12]
 800cadc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cae0:	f023 0303 	bic.w	r3, r3, #3
 800cae4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800caec:	685b      	ldr	r3, [r3, #4]
 800caee:	68fa      	ldr	r2, [r7, #12]
 800caf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800caf4:	f043 0302 	orr.w	r3, r3, #2
 800caf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cafa:	2300      	movs	r3, #0
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3714      	adds	r7, #20
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	f003 0301 	and.w	r3, r3, #1
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	3301      	adds	r3, #1
 800cb34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	4a13      	ldr	r2, [pc, #76]	; (800cb88 <USB_CoreReset+0x64>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d901      	bls.n	800cb42 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cb3e:	2303      	movs	r3, #3
 800cb40:	e01b      	b.n	800cb7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	691b      	ldr	r3, [r3, #16]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	daf2      	bge.n	800cb30 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	691b      	ldr	r3, [r3, #16]
 800cb52:	f043 0201 	orr.w	r2, r3, #1
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	4a09      	ldr	r2, [pc, #36]	; (800cb88 <USB_CoreReset+0x64>)
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d901      	bls.n	800cb6c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	e006      	b.n	800cb7a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	691b      	ldr	r3, [r3, #16]
 800cb70:	f003 0301 	and.w	r3, r3, #1
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d0f0      	beq.n	800cb5a <USB_CoreReset+0x36>

  return HAL_OK;
 800cb78:	2300      	movs	r3, #0
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3714      	adds	r7, #20
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb84:	4770      	bx	lr
 800cb86:	bf00      	nop
 800cb88:	00030d40 	.word	0x00030d40

0800cb8c <__errno>:
 800cb8c:	4b01      	ldr	r3, [pc, #4]	; (800cb94 <__errno+0x8>)
 800cb8e:	6818      	ldr	r0, [r3, #0]
 800cb90:	4770      	bx	lr
 800cb92:	bf00      	nop
 800cb94:	24000024 	.word	0x24000024

0800cb98 <__libc_init_array>:
 800cb98:	b570      	push	{r4, r5, r6, lr}
 800cb9a:	4d0d      	ldr	r5, [pc, #52]	; (800cbd0 <__libc_init_array+0x38>)
 800cb9c:	4c0d      	ldr	r4, [pc, #52]	; (800cbd4 <__libc_init_array+0x3c>)
 800cb9e:	1b64      	subs	r4, r4, r5
 800cba0:	10a4      	asrs	r4, r4, #2
 800cba2:	2600      	movs	r6, #0
 800cba4:	42a6      	cmp	r6, r4
 800cba6:	d109      	bne.n	800cbbc <__libc_init_array+0x24>
 800cba8:	4d0b      	ldr	r5, [pc, #44]	; (800cbd8 <__libc_init_array+0x40>)
 800cbaa:	4c0c      	ldr	r4, [pc, #48]	; (800cbdc <__libc_init_array+0x44>)
 800cbac:	f000 fc8e 	bl	800d4cc <_init>
 800cbb0:	1b64      	subs	r4, r4, r5
 800cbb2:	10a4      	asrs	r4, r4, #2
 800cbb4:	2600      	movs	r6, #0
 800cbb6:	42a6      	cmp	r6, r4
 800cbb8:	d105      	bne.n	800cbc6 <__libc_init_array+0x2e>
 800cbba:	bd70      	pop	{r4, r5, r6, pc}
 800cbbc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbc0:	4798      	blx	r3
 800cbc2:	3601      	adds	r6, #1
 800cbc4:	e7ee      	b.n	800cba4 <__libc_init_array+0xc>
 800cbc6:	f855 3b04 	ldr.w	r3, [r5], #4
 800cbca:	4798      	blx	r3
 800cbcc:	3601      	adds	r6, #1
 800cbce:	e7f2      	b.n	800cbb6 <__libc_init_array+0x1e>
 800cbd0:	0800ec00 	.word	0x0800ec00
 800cbd4:	0800ec00 	.word	0x0800ec00
 800cbd8:	0800ec00 	.word	0x0800ec00
 800cbdc:	0800ec04 	.word	0x0800ec04

0800cbe0 <memset>:
 800cbe0:	4402      	add	r2, r0
 800cbe2:	4603      	mov	r3, r0
 800cbe4:	4293      	cmp	r3, r2
 800cbe6:	d100      	bne.n	800cbea <memset+0xa>
 800cbe8:	4770      	bx	lr
 800cbea:	f803 1b01 	strb.w	r1, [r3], #1
 800cbee:	e7f9      	b.n	800cbe4 <memset+0x4>

0800cbf0 <_free_r>:
 800cbf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbf2:	2900      	cmp	r1, #0
 800cbf4:	d044      	beq.n	800cc80 <_free_r+0x90>
 800cbf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbfa:	9001      	str	r0, [sp, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f1a1 0404 	sub.w	r4, r1, #4
 800cc02:	bfb8      	it	lt
 800cc04:	18e4      	addlt	r4, r4, r3
 800cc06:	f000 f903 	bl	800ce10 <__malloc_lock>
 800cc0a:	4a1e      	ldr	r2, [pc, #120]	; (800cc84 <_free_r+0x94>)
 800cc0c:	9801      	ldr	r0, [sp, #4]
 800cc0e:	6813      	ldr	r3, [r2, #0]
 800cc10:	b933      	cbnz	r3, 800cc20 <_free_r+0x30>
 800cc12:	6063      	str	r3, [r4, #4]
 800cc14:	6014      	str	r4, [r2, #0]
 800cc16:	b003      	add	sp, #12
 800cc18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc1c:	f000 b8fe 	b.w	800ce1c <__malloc_unlock>
 800cc20:	42a3      	cmp	r3, r4
 800cc22:	d908      	bls.n	800cc36 <_free_r+0x46>
 800cc24:	6825      	ldr	r5, [r4, #0]
 800cc26:	1961      	adds	r1, r4, r5
 800cc28:	428b      	cmp	r3, r1
 800cc2a:	bf01      	itttt	eq
 800cc2c:	6819      	ldreq	r1, [r3, #0]
 800cc2e:	685b      	ldreq	r3, [r3, #4]
 800cc30:	1949      	addeq	r1, r1, r5
 800cc32:	6021      	streq	r1, [r4, #0]
 800cc34:	e7ed      	b.n	800cc12 <_free_r+0x22>
 800cc36:	461a      	mov	r2, r3
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	b10b      	cbz	r3, 800cc40 <_free_r+0x50>
 800cc3c:	42a3      	cmp	r3, r4
 800cc3e:	d9fa      	bls.n	800cc36 <_free_r+0x46>
 800cc40:	6811      	ldr	r1, [r2, #0]
 800cc42:	1855      	adds	r5, r2, r1
 800cc44:	42a5      	cmp	r5, r4
 800cc46:	d10b      	bne.n	800cc60 <_free_r+0x70>
 800cc48:	6824      	ldr	r4, [r4, #0]
 800cc4a:	4421      	add	r1, r4
 800cc4c:	1854      	adds	r4, r2, r1
 800cc4e:	42a3      	cmp	r3, r4
 800cc50:	6011      	str	r1, [r2, #0]
 800cc52:	d1e0      	bne.n	800cc16 <_free_r+0x26>
 800cc54:	681c      	ldr	r4, [r3, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	6053      	str	r3, [r2, #4]
 800cc5a:	4421      	add	r1, r4
 800cc5c:	6011      	str	r1, [r2, #0]
 800cc5e:	e7da      	b.n	800cc16 <_free_r+0x26>
 800cc60:	d902      	bls.n	800cc68 <_free_r+0x78>
 800cc62:	230c      	movs	r3, #12
 800cc64:	6003      	str	r3, [r0, #0]
 800cc66:	e7d6      	b.n	800cc16 <_free_r+0x26>
 800cc68:	6825      	ldr	r5, [r4, #0]
 800cc6a:	1961      	adds	r1, r4, r5
 800cc6c:	428b      	cmp	r3, r1
 800cc6e:	bf04      	itt	eq
 800cc70:	6819      	ldreq	r1, [r3, #0]
 800cc72:	685b      	ldreq	r3, [r3, #4]
 800cc74:	6063      	str	r3, [r4, #4]
 800cc76:	bf04      	itt	eq
 800cc78:	1949      	addeq	r1, r1, r5
 800cc7a:	6021      	streq	r1, [r4, #0]
 800cc7c:	6054      	str	r4, [r2, #4]
 800cc7e:	e7ca      	b.n	800cc16 <_free_r+0x26>
 800cc80:	b003      	add	sp, #12
 800cc82:	bd30      	pop	{r4, r5, pc}
 800cc84:	24000eb0 	.word	0x24000eb0

0800cc88 <sbrk_aligned>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	4e0e      	ldr	r6, [pc, #56]	; (800ccc4 <sbrk_aligned+0x3c>)
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	6831      	ldr	r1, [r6, #0]
 800cc90:	4605      	mov	r5, r0
 800cc92:	b911      	cbnz	r1, 800cc9a <sbrk_aligned+0x12>
 800cc94:	f000 f88c 	bl	800cdb0 <_sbrk_r>
 800cc98:	6030      	str	r0, [r6, #0]
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	f000 f887 	bl	800cdb0 <_sbrk_r>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d00a      	beq.n	800ccbc <sbrk_aligned+0x34>
 800cca6:	1cc4      	adds	r4, r0, #3
 800cca8:	f024 0403 	bic.w	r4, r4, #3
 800ccac:	42a0      	cmp	r0, r4
 800ccae:	d007      	beq.n	800ccc0 <sbrk_aligned+0x38>
 800ccb0:	1a21      	subs	r1, r4, r0
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f000 f87c 	bl	800cdb0 <_sbrk_r>
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d101      	bne.n	800ccc0 <sbrk_aligned+0x38>
 800ccbc:	f04f 34ff 	mov.w	r4, #4294967295
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	24000eb4 	.word	0x24000eb4

0800ccc8 <_malloc_r>:
 800ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cccc:	1ccd      	adds	r5, r1, #3
 800ccce:	f025 0503 	bic.w	r5, r5, #3
 800ccd2:	3508      	adds	r5, #8
 800ccd4:	2d0c      	cmp	r5, #12
 800ccd6:	bf38      	it	cc
 800ccd8:	250c      	movcc	r5, #12
 800ccda:	2d00      	cmp	r5, #0
 800ccdc:	4607      	mov	r7, r0
 800ccde:	db01      	blt.n	800cce4 <_malloc_r+0x1c>
 800cce0:	42a9      	cmp	r1, r5
 800cce2:	d905      	bls.n	800ccf0 <_malloc_r+0x28>
 800cce4:	230c      	movs	r3, #12
 800cce6:	603b      	str	r3, [r7, #0]
 800cce8:	2600      	movs	r6, #0
 800ccea:	4630      	mov	r0, r6
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf0:	4e2e      	ldr	r6, [pc, #184]	; (800cdac <_malloc_r+0xe4>)
 800ccf2:	f000 f88d 	bl	800ce10 <__malloc_lock>
 800ccf6:	6833      	ldr	r3, [r6, #0]
 800ccf8:	461c      	mov	r4, r3
 800ccfa:	bb34      	cbnz	r4, 800cd4a <_malloc_r+0x82>
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f7ff ffc2 	bl	800cc88 <sbrk_aligned>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	4604      	mov	r4, r0
 800cd08:	d14d      	bne.n	800cda6 <_malloc_r+0xde>
 800cd0a:	6834      	ldr	r4, [r6, #0]
 800cd0c:	4626      	mov	r6, r4
 800cd0e:	2e00      	cmp	r6, #0
 800cd10:	d140      	bne.n	800cd94 <_malloc_r+0xcc>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	4631      	mov	r1, r6
 800cd16:	4638      	mov	r0, r7
 800cd18:	eb04 0803 	add.w	r8, r4, r3
 800cd1c:	f000 f848 	bl	800cdb0 <_sbrk_r>
 800cd20:	4580      	cmp	r8, r0
 800cd22:	d13a      	bne.n	800cd9a <_malloc_r+0xd2>
 800cd24:	6821      	ldr	r1, [r4, #0]
 800cd26:	3503      	adds	r5, #3
 800cd28:	1a6d      	subs	r5, r5, r1
 800cd2a:	f025 0503 	bic.w	r5, r5, #3
 800cd2e:	3508      	adds	r5, #8
 800cd30:	2d0c      	cmp	r5, #12
 800cd32:	bf38      	it	cc
 800cd34:	250c      	movcc	r5, #12
 800cd36:	4629      	mov	r1, r5
 800cd38:	4638      	mov	r0, r7
 800cd3a:	f7ff ffa5 	bl	800cc88 <sbrk_aligned>
 800cd3e:	3001      	adds	r0, #1
 800cd40:	d02b      	beq.n	800cd9a <_malloc_r+0xd2>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	442b      	add	r3, r5
 800cd46:	6023      	str	r3, [r4, #0]
 800cd48:	e00e      	b.n	800cd68 <_malloc_r+0xa0>
 800cd4a:	6822      	ldr	r2, [r4, #0]
 800cd4c:	1b52      	subs	r2, r2, r5
 800cd4e:	d41e      	bmi.n	800cd8e <_malloc_r+0xc6>
 800cd50:	2a0b      	cmp	r2, #11
 800cd52:	d916      	bls.n	800cd82 <_malloc_r+0xba>
 800cd54:	1961      	adds	r1, r4, r5
 800cd56:	42a3      	cmp	r3, r4
 800cd58:	6025      	str	r5, [r4, #0]
 800cd5a:	bf18      	it	ne
 800cd5c:	6059      	strne	r1, [r3, #4]
 800cd5e:	6863      	ldr	r3, [r4, #4]
 800cd60:	bf08      	it	eq
 800cd62:	6031      	streq	r1, [r6, #0]
 800cd64:	5162      	str	r2, [r4, r5]
 800cd66:	604b      	str	r3, [r1, #4]
 800cd68:	4638      	mov	r0, r7
 800cd6a:	f104 060b 	add.w	r6, r4, #11
 800cd6e:	f000 f855 	bl	800ce1c <__malloc_unlock>
 800cd72:	f026 0607 	bic.w	r6, r6, #7
 800cd76:	1d23      	adds	r3, r4, #4
 800cd78:	1af2      	subs	r2, r6, r3
 800cd7a:	d0b6      	beq.n	800ccea <_malloc_r+0x22>
 800cd7c:	1b9b      	subs	r3, r3, r6
 800cd7e:	50a3      	str	r3, [r4, r2]
 800cd80:	e7b3      	b.n	800ccea <_malloc_r+0x22>
 800cd82:	6862      	ldr	r2, [r4, #4]
 800cd84:	42a3      	cmp	r3, r4
 800cd86:	bf0c      	ite	eq
 800cd88:	6032      	streq	r2, [r6, #0]
 800cd8a:	605a      	strne	r2, [r3, #4]
 800cd8c:	e7ec      	b.n	800cd68 <_malloc_r+0xa0>
 800cd8e:	4623      	mov	r3, r4
 800cd90:	6864      	ldr	r4, [r4, #4]
 800cd92:	e7b2      	b.n	800ccfa <_malloc_r+0x32>
 800cd94:	4634      	mov	r4, r6
 800cd96:	6876      	ldr	r6, [r6, #4]
 800cd98:	e7b9      	b.n	800cd0e <_malloc_r+0x46>
 800cd9a:	230c      	movs	r3, #12
 800cd9c:	603b      	str	r3, [r7, #0]
 800cd9e:	4638      	mov	r0, r7
 800cda0:	f000 f83c 	bl	800ce1c <__malloc_unlock>
 800cda4:	e7a1      	b.n	800ccea <_malloc_r+0x22>
 800cda6:	6025      	str	r5, [r4, #0]
 800cda8:	e7de      	b.n	800cd68 <_malloc_r+0xa0>
 800cdaa:	bf00      	nop
 800cdac:	24000eb0 	.word	0x24000eb0

0800cdb0 <_sbrk_r>:
 800cdb0:	b538      	push	{r3, r4, r5, lr}
 800cdb2:	4d06      	ldr	r5, [pc, #24]	; (800cdcc <_sbrk_r+0x1c>)
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	4608      	mov	r0, r1
 800cdba:	602b      	str	r3, [r5, #0]
 800cdbc:	f7f6 ffee 	bl	8003d9c <_sbrk>
 800cdc0:	1c43      	adds	r3, r0, #1
 800cdc2:	d102      	bne.n	800cdca <_sbrk_r+0x1a>
 800cdc4:	682b      	ldr	r3, [r5, #0]
 800cdc6:	b103      	cbz	r3, 800cdca <_sbrk_r+0x1a>
 800cdc8:	6023      	str	r3, [r4, #0]
 800cdca:	bd38      	pop	{r3, r4, r5, pc}
 800cdcc:	24000eb8 	.word	0x24000eb8

0800cdd0 <siprintf>:
 800cdd0:	b40e      	push	{r1, r2, r3}
 800cdd2:	b500      	push	{lr}
 800cdd4:	b09c      	sub	sp, #112	; 0x70
 800cdd6:	ab1d      	add	r3, sp, #116	; 0x74
 800cdd8:	9002      	str	r0, [sp, #8]
 800cdda:	9006      	str	r0, [sp, #24]
 800cddc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cde0:	4809      	ldr	r0, [pc, #36]	; (800ce08 <siprintf+0x38>)
 800cde2:	9107      	str	r1, [sp, #28]
 800cde4:	9104      	str	r1, [sp, #16]
 800cde6:	4909      	ldr	r1, [pc, #36]	; (800ce0c <siprintf+0x3c>)
 800cde8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdec:	9105      	str	r1, [sp, #20]
 800cdee:	6800      	ldr	r0, [r0, #0]
 800cdf0:	9301      	str	r3, [sp, #4]
 800cdf2:	a902      	add	r1, sp, #8
 800cdf4:	f000 f874 	bl	800cee0 <_svfiprintf_r>
 800cdf8:	9b02      	ldr	r3, [sp, #8]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	701a      	strb	r2, [r3, #0]
 800cdfe:	b01c      	add	sp, #112	; 0x70
 800ce00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce04:	b003      	add	sp, #12
 800ce06:	4770      	bx	lr
 800ce08:	24000024 	.word	0x24000024
 800ce0c:	ffff0208 	.word	0xffff0208

0800ce10 <__malloc_lock>:
 800ce10:	4801      	ldr	r0, [pc, #4]	; (800ce18 <__malloc_lock+0x8>)
 800ce12:	f000 baf9 	b.w	800d408 <__retarget_lock_acquire_recursive>
 800ce16:	bf00      	nop
 800ce18:	24000ebc 	.word	0x24000ebc

0800ce1c <__malloc_unlock>:
 800ce1c:	4801      	ldr	r0, [pc, #4]	; (800ce24 <__malloc_unlock+0x8>)
 800ce1e:	f000 baf4 	b.w	800d40a <__retarget_lock_release_recursive>
 800ce22:	bf00      	nop
 800ce24:	24000ebc 	.word	0x24000ebc

0800ce28 <__ssputs_r>:
 800ce28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce2c:	688e      	ldr	r6, [r1, #8]
 800ce2e:	429e      	cmp	r6, r3
 800ce30:	4682      	mov	sl, r0
 800ce32:	460c      	mov	r4, r1
 800ce34:	4690      	mov	r8, r2
 800ce36:	461f      	mov	r7, r3
 800ce38:	d838      	bhi.n	800ceac <__ssputs_r+0x84>
 800ce3a:	898a      	ldrh	r2, [r1, #12]
 800ce3c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce40:	d032      	beq.n	800cea8 <__ssputs_r+0x80>
 800ce42:	6825      	ldr	r5, [r4, #0]
 800ce44:	6909      	ldr	r1, [r1, #16]
 800ce46:	eba5 0901 	sub.w	r9, r5, r1
 800ce4a:	6965      	ldr	r5, [r4, #20]
 800ce4c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce54:	3301      	adds	r3, #1
 800ce56:	444b      	add	r3, r9
 800ce58:	106d      	asrs	r5, r5, #1
 800ce5a:	429d      	cmp	r5, r3
 800ce5c:	bf38      	it	cc
 800ce5e:	461d      	movcc	r5, r3
 800ce60:	0553      	lsls	r3, r2, #21
 800ce62:	d531      	bpl.n	800cec8 <__ssputs_r+0xa0>
 800ce64:	4629      	mov	r1, r5
 800ce66:	f7ff ff2f 	bl	800ccc8 <_malloc_r>
 800ce6a:	4606      	mov	r6, r0
 800ce6c:	b950      	cbnz	r0, 800ce84 <__ssputs_r+0x5c>
 800ce6e:	230c      	movs	r3, #12
 800ce70:	f8ca 3000 	str.w	r3, [sl]
 800ce74:	89a3      	ldrh	r3, [r4, #12]
 800ce76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce7a:	81a3      	strh	r3, [r4, #12]
 800ce7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ce80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce84:	6921      	ldr	r1, [r4, #16]
 800ce86:	464a      	mov	r2, r9
 800ce88:	f000 fac0 	bl	800d40c <memcpy>
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce96:	81a3      	strh	r3, [r4, #12]
 800ce98:	6126      	str	r6, [r4, #16]
 800ce9a:	6165      	str	r5, [r4, #20]
 800ce9c:	444e      	add	r6, r9
 800ce9e:	eba5 0509 	sub.w	r5, r5, r9
 800cea2:	6026      	str	r6, [r4, #0]
 800cea4:	60a5      	str	r5, [r4, #8]
 800cea6:	463e      	mov	r6, r7
 800cea8:	42be      	cmp	r6, r7
 800ceaa:	d900      	bls.n	800ceae <__ssputs_r+0x86>
 800ceac:	463e      	mov	r6, r7
 800ceae:	6820      	ldr	r0, [r4, #0]
 800ceb0:	4632      	mov	r2, r6
 800ceb2:	4641      	mov	r1, r8
 800ceb4:	f000 fab8 	bl	800d428 <memmove>
 800ceb8:	68a3      	ldr	r3, [r4, #8]
 800ceba:	1b9b      	subs	r3, r3, r6
 800cebc:	60a3      	str	r3, [r4, #8]
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	4433      	add	r3, r6
 800cec2:	6023      	str	r3, [r4, #0]
 800cec4:	2000      	movs	r0, #0
 800cec6:	e7db      	b.n	800ce80 <__ssputs_r+0x58>
 800cec8:	462a      	mov	r2, r5
 800ceca:	f000 fac7 	bl	800d45c <_realloc_r>
 800cece:	4606      	mov	r6, r0
 800ced0:	2800      	cmp	r0, #0
 800ced2:	d1e1      	bne.n	800ce98 <__ssputs_r+0x70>
 800ced4:	6921      	ldr	r1, [r4, #16]
 800ced6:	4650      	mov	r0, sl
 800ced8:	f7ff fe8a 	bl	800cbf0 <_free_r>
 800cedc:	e7c7      	b.n	800ce6e <__ssputs_r+0x46>
	...

0800cee0 <_svfiprintf_r>:
 800cee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee4:	4698      	mov	r8, r3
 800cee6:	898b      	ldrh	r3, [r1, #12]
 800cee8:	061b      	lsls	r3, r3, #24
 800ceea:	b09d      	sub	sp, #116	; 0x74
 800ceec:	4607      	mov	r7, r0
 800ceee:	460d      	mov	r5, r1
 800cef0:	4614      	mov	r4, r2
 800cef2:	d50e      	bpl.n	800cf12 <_svfiprintf_r+0x32>
 800cef4:	690b      	ldr	r3, [r1, #16]
 800cef6:	b963      	cbnz	r3, 800cf12 <_svfiprintf_r+0x32>
 800cef8:	2140      	movs	r1, #64	; 0x40
 800cefa:	f7ff fee5 	bl	800ccc8 <_malloc_r>
 800cefe:	6028      	str	r0, [r5, #0]
 800cf00:	6128      	str	r0, [r5, #16]
 800cf02:	b920      	cbnz	r0, 800cf0e <_svfiprintf_r+0x2e>
 800cf04:	230c      	movs	r3, #12
 800cf06:	603b      	str	r3, [r7, #0]
 800cf08:	f04f 30ff 	mov.w	r0, #4294967295
 800cf0c:	e0d1      	b.n	800d0b2 <_svfiprintf_r+0x1d2>
 800cf0e:	2340      	movs	r3, #64	; 0x40
 800cf10:	616b      	str	r3, [r5, #20]
 800cf12:	2300      	movs	r3, #0
 800cf14:	9309      	str	r3, [sp, #36]	; 0x24
 800cf16:	2320      	movs	r3, #32
 800cf18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf1c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf20:	2330      	movs	r3, #48	; 0x30
 800cf22:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d0cc <_svfiprintf_r+0x1ec>
 800cf26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf2a:	f04f 0901 	mov.w	r9, #1
 800cf2e:	4623      	mov	r3, r4
 800cf30:	469a      	mov	sl, r3
 800cf32:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf36:	b10a      	cbz	r2, 800cf3c <_svfiprintf_r+0x5c>
 800cf38:	2a25      	cmp	r2, #37	; 0x25
 800cf3a:	d1f9      	bne.n	800cf30 <_svfiprintf_r+0x50>
 800cf3c:	ebba 0b04 	subs.w	fp, sl, r4
 800cf40:	d00b      	beq.n	800cf5a <_svfiprintf_r+0x7a>
 800cf42:	465b      	mov	r3, fp
 800cf44:	4622      	mov	r2, r4
 800cf46:	4629      	mov	r1, r5
 800cf48:	4638      	mov	r0, r7
 800cf4a:	f7ff ff6d 	bl	800ce28 <__ssputs_r>
 800cf4e:	3001      	adds	r0, #1
 800cf50:	f000 80aa 	beq.w	800d0a8 <_svfiprintf_r+0x1c8>
 800cf54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf56:	445a      	add	r2, fp
 800cf58:	9209      	str	r2, [sp, #36]	; 0x24
 800cf5a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80a2 	beq.w	800d0a8 <_svfiprintf_r+0x1c8>
 800cf64:	2300      	movs	r3, #0
 800cf66:	f04f 32ff 	mov.w	r2, #4294967295
 800cf6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf6e:	f10a 0a01 	add.w	sl, sl, #1
 800cf72:	9304      	str	r3, [sp, #16]
 800cf74:	9307      	str	r3, [sp, #28]
 800cf76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf7a:	931a      	str	r3, [sp, #104]	; 0x68
 800cf7c:	4654      	mov	r4, sl
 800cf7e:	2205      	movs	r2, #5
 800cf80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf84:	4851      	ldr	r0, [pc, #324]	; (800d0cc <_svfiprintf_r+0x1ec>)
 800cf86:	f7f3 f9ab 	bl	80002e0 <memchr>
 800cf8a:	9a04      	ldr	r2, [sp, #16]
 800cf8c:	b9d8      	cbnz	r0, 800cfc6 <_svfiprintf_r+0xe6>
 800cf8e:	06d0      	lsls	r0, r2, #27
 800cf90:	bf44      	itt	mi
 800cf92:	2320      	movmi	r3, #32
 800cf94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf98:	0711      	lsls	r1, r2, #28
 800cf9a:	bf44      	itt	mi
 800cf9c:	232b      	movmi	r3, #43	; 0x2b
 800cf9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa6:	2b2a      	cmp	r3, #42	; 0x2a
 800cfa8:	d015      	beq.n	800cfd6 <_svfiprintf_r+0xf6>
 800cfaa:	9a07      	ldr	r2, [sp, #28]
 800cfac:	4654      	mov	r4, sl
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f04f 0c0a 	mov.w	ip, #10
 800cfb4:	4621      	mov	r1, r4
 800cfb6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfba:	3b30      	subs	r3, #48	; 0x30
 800cfbc:	2b09      	cmp	r3, #9
 800cfbe:	d94e      	bls.n	800d05e <_svfiprintf_r+0x17e>
 800cfc0:	b1b0      	cbz	r0, 800cff0 <_svfiprintf_r+0x110>
 800cfc2:	9207      	str	r2, [sp, #28]
 800cfc4:	e014      	b.n	800cff0 <_svfiprintf_r+0x110>
 800cfc6:	eba0 0308 	sub.w	r3, r0, r8
 800cfca:	fa09 f303 	lsl.w	r3, r9, r3
 800cfce:	4313      	orrs	r3, r2
 800cfd0:	9304      	str	r3, [sp, #16]
 800cfd2:	46a2      	mov	sl, r4
 800cfd4:	e7d2      	b.n	800cf7c <_svfiprintf_r+0x9c>
 800cfd6:	9b03      	ldr	r3, [sp, #12]
 800cfd8:	1d19      	adds	r1, r3, #4
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	9103      	str	r1, [sp, #12]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfbb      	ittet	lt
 800cfe2:	425b      	neglt	r3, r3
 800cfe4:	f042 0202 	orrlt.w	r2, r2, #2
 800cfe8:	9307      	strge	r3, [sp, #28]
 800cfea:	9307      	strlt	r3, [sp, #28]
 800cfec:	bfb8      	it	lt
 800cfee:	9204      	strlt	r2, [sp, #16]
 800cff0:	7823      	ldrb	r3, [r4, #0]
 800cff2:	2b2e      	cmp	r3, #46	; 0x2e
 800cff4:	d10c      	bne.n	800d010 <_svfiprintf_r+0x130>
 800cff6:	7863      	ldrb	r3, [r4, #1]
 800cff8:	2b2a      	cmp	r3, #42	; 0x2a
 800cffa:	d135      	bne.n	800d068 <_svfiprintf_r+0x188>
 800cffc:	9b03      	ldr	r3, [sp, #12]
 800cffe:	1d1a      	adds	r2, r3, #4
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	9203      	str	r2, [sp, #12]
 800d004:	2b00      	cmp	r3, #0
 800d006:	bfb8      	it	lt
 800d008:	f04f 33ff 	movlt.w	r3, #4294967295
 800d00c:	3402      	adds	r4, #2
 800d00e:	9305      	str	r3, [sp, #20]
 800d010:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d0dc <_svfiprintf_r+0x1fc>
 800d014:	7821      	ldrb	r1, [r4, #0]
 800d016:	2203      	movs	r2, #3
 800d018:	4650      	mov	r0, sl
 800d01a:	f7f3 f961 	bl	80002e0 <memchr>
 800d01e:	b140      	cbz	r0, 800d032 <_svfiprintf_r+0x152>
 800d020:	2340      	movs	r3, #64	; 0x40
 800d022:	eba0 000a 	sub.w	r0, r0, sl
 800d026:	fa03 f000 	lsl.w	r0, r3, r0
 800d02a:	9b04      	ldr	r3, [sp, #16]
 800d02c:	4303      	orrs	r3, r0
 800d02e:	3401      	adds	r4, #1
 800d030:	9304      	str	r3, [sp, #16]
 800d032:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d036:	4826      	ldr	r0, [pc, #152]	; (800d0d0 <_svfiprintf_r+0x1f0>)
 800d038:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d03c:	2206      	movs	r2, #6
 800d03e:	f7f3 f94f 	bl	80002e0 <memchr>
 800d042:	2800      	cmp	r0, #0
 800d044:	d038      	beq.n	800d0b8 <_svfiprintf_r+0x1d8>
 800d046:	4b23      	ldr	r3, [pc, #140]	; (800d0d4 <_svfiprintf_r+0x1f4>)
 800d048:	bb1b      	cbnz	r3, 800d092 <_svfiprintf_r+0x1b2>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	3307      	adds	r3, #7
 800d04e:	f023 0307 	bic.w	r3, r3, #7
 800d052:	3308      	adds	r3, #8
 800d054:	9303      	str	r3, [sp, #12]
 800d056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d058:	4433      	add	r3, r6
 800d05a:	9309      	str	r3, [sp, #36]	; 0x24
 800d05c:	e767      	b.n	800cf2e <_svfiprintf_r+0x4e>
 800d05e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d062:	460c      	mov	r4, r1
 800d064:	2001      	movs	r0, #1
 800d066:	e7a5      	b.n	800cfb4 <_svfiprintf_r+0xd4>
 800d068:	2300      	movs	r3, #0
 800d06a:	3401      	adds	r4, #1
 800d06c:	9305      	str	r3, [sp, #20]
 800d06e:	4619      	mov	r1, r3
 800d070:	f04f 0c0a 	mov.w	ip, #10
 800d074:	4620      	mov	r0, r4
 800d076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d07a:	3a30      	subs	r2, #48	; 0x30
 800d07c:	2a09      	cmp	r2, #9
 800d07e:	d903      	bls.n	800d088 <_svfiprintf_r+0x1a8>
 800d080:	2b00      	cmp	r3, #0
 800d082:	d0c5      	beq.n	800d010 <_svfiprintf_r+0x130>
 800d084:	9105      	str	r1, [sp, #20]
 800d086:	e7c3      	b.n	800d010 <_svfiprintf_r+0x130>
 800d088:	fb0c 2101 	mla	r1, ip, r1, r2
 800d08c:	4604      	mov	r4, r0
 800d08e:	2301      	movs	r3, #1
 800d090:	e7f0      	b.n	800d074 <_svfiprintf_r+0x194>
 800d092:	ab03      	add	r3, sp, #12
 800d094:	9300      	str	r3, [sp, #0]
 800d096:	462a      	mov	r2, r5
 800d098:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <_svfiprintf_r+0x1f8>)
 800d09a:	a904      	add	r1, sp, #16
 800d09c:	4638      	mov	r0, r7
 800d09e:	f3af 8000 	nop.w
 800d0a2:	1c42      	adds	r2, r0, #1
 800d0a4:	4606      	mov	r6, r0
 800d0a6:	d1d6      	bne.n	800d056 <_svfiprintf_r+0x176>
 800d0a8:	89ab      	ldrh	r3, [r5, #12]
 800d0aa:	065b      	lsls	r3, r3, #25
 800d0ac:	f53f af2c 	bmi.w	800cf08 <_svfiprintf_r+0x28>
 800d0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0b2:	b01d      	add	sp, #116	; 0x74
 800d0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0b8:	ab03      	add	r3, sp, #12
 800d0ba:	9300      	str	r3, [sp, #0]
 800d0bc:	462a      	mov	r2, r5
 800d0be:	4b06      	ldr	r3, [pc, #24]	; (800d0d8 <_svfiprintf_r+0x1f8>)
 800d0c0:	a904      	add	r1, sp, #16
 800d0c2:	4638      	mov	r0, r7
 800d0c4:	f000 f87a 	bl	800d1bc <_printf_i>
 800d0c8:	e7eb      	b.n	800d0a2 <_svfiprintf_r+0x1c2>
 800d0ca:	bf00      	nop
 800d0cc:	0800ebc4 	.word	0x0800ebc4
 800d0d0:	0800ebce 	.word	0x0800ebce
 800d0d4:	00000000 	.word	0x00000000
 800d0d8:	0800ce29 	.word	0x0800ce29
 800d0dc:	0800ebca 	.word	0x0800ebca

0800d0e0 <_printf_common>:
 800d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	4616      	mov	r6, r2
 800d0e6:	4699      	mov	r9, r3
 800d0e8:	688a      	ldr	r2, [r1, #8]
 800d0ea:	690b      	ldr	r3, [r1, #16]
 800d0ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	bfb8      	it	lt
 800d0f4:	4613      	movlt	r3, r2
 800d0f6:	6033      	str	r3, [r6, #0]
 800d0f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	460c      	mov	r4, r1
 800d100:	b10a      	cbz	r2, 800d106 <_printf_common+0x26>
 800d102:	3301      	adds	r3, #1
 800d104:	6033      	str	r3, [r6, #0]
 800d106:	6823      	ldr	r3, [r4, #0]
 800d108:	0699      	lsls	r1, r3, #26
 800d10a:	bf42      	ittt	mi
 800d10c:	6833      	ldrmi	r3, [r6, #0]
 800d10e:	3302      	addmi	r3, #2
 800d110:	6033      	strmi	r3, [r6, #0]
 800d112:	6825      	ldr	r5, [r4, #0]
 800d114:	f015 0506 	ands.w	r5, r5, #6
 800d118:	d106      	bne.n	800d128 <_printf_common+0x48>
 800d11a:	f104 0a19 	add.w	sl, r4, #25
 800d11e:	68e3      	ldr	r3, [r4, #12]
 800d120:	6832      	ldr	r2, [r6, #0]
 800d122:	1a9b      	subs	r3, r3, r2
 800d124:	42ab      	cmp	r3, r5
 800d126:	dc26      	bgt.n	800d176 <_printf_common+0x96>
 800d128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d12c:	1e13      	subs	r3, r2, #0
 800d12e:	6822      	ldr	r2, [r4, #0]
 800d130:	bf18      	it	ne
 800d132:	2301      	movne	r3, #1
 800d134:	0692      	lsls	r2, r2, #26
 800d136:	d42b      	bmi.n	800d190 <_printf_common+0xb0>
 800d138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d13c:	4649      	mov	r1, r9
 800d13e:	4638      	mov	r0, r7
 800d140:	47c0      	blx	r8
 800d142:	3001      	adds	r0, #1
 800d144:	d01e      	beq.n	800d184 <_printf_common+0xa4>
 800d146:	6823      	ldr	r3, [r4, #0]
 800d148:	68e5      	ldr	r5, [r4, #12]
 800d14a:	6832      	ldr	r2, [r6, #0]
 800d14c:	f003 0306 	and.w	r3, r3, #6
 800d150:	2b04      	cmp	r3, #4
 800d152:	bf08      	it	eq
 800d154:	1aad      	subeq	r5, r5, r2
 800d156:	68a3      	ldr	r3, [r4, #8]
 800d158:	6922      	ldr	r2, [r4, #16]
 800d15a:	bf0c      	ite	eq
 800d15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d160:	2500      	movne	r5, #0
 800d162:	4293      	cmp	r3, r2
 800d164:	bfc4      	itt	gt
 800d166:	1a9b      	subgt	r3, r3, r2
 800d168:	18ed      	addgt	r5, r5, r3
 800d16a:	2600      	movs	r6, #0
 800d16c:	341a      	adds	r4, #26
 800d16e:	42b5      	cmp	r5, r6
 800d170:	d11a      	bne.n	800d1a8 <_printf_common+0xc8>
 800d172:	2000      	movs	r0, #0
 800d174:	e008      	b.n	800d188 <_printf_common+0xa8>
 800d176:	2301      	movs	r3, #1
 800d178:	4652      	mov	r2, sl
 800d17a:	4649      	mov	r1, r9
 800d17c:	4638      	mov	r0, r7
 800d17e:	47c0      	blx	r8
 800d180:	3001      	adds	r0, #1
 800d182:	d103      	bne.n	800d18c <_printf_common+0xac>
 800d184:	f04f 30ff 	mov.w	r0, #4294967295
 800d188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d18c:	3501      	adds	r5, #1
 800d18e:	e7c6      	b.n	800d11e <_printf_common+0x3e>
 800d190:	18e1      	adds	r1, r4, r3
 800d192:	1c5a      	adds	r2, r3, #1
 800d194:	2030      	movs	r0, #48	; 0x30
 800d196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d19a:	4422      	add	r2, r4
 800d19c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1a4:	3302      	adds	r3, #2
 800d1a6:	e7c7      	b.n	800d138 <_printf_common+0x58>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	4622      	mov	r2, r4
 800d1ac:	4649      	mov	r1, r9
 800d1ae:	4638      	mov	r0, r7
 800d1b0:	47c0      	blx	r8
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	d0e6      	beq.n	800d184 <_printf_common+0xa4>
 800d1b6:	3601      	adds	r6, #1
 800d1b8:	e7d9      	b.n	800d16e <_printf_common+0x8e>
	...

0800d1bc <_printf_i>:
 800d1bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c0:	7e0f      	ldrb	r7, [r1, #24]
 800d1c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d1c4:	2f78      	cmp	r7, #120	; 0x78
 800d1c6:	4691      	mov	r9, r2
 800d1c8:	4680      	mov	r8, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	469a      	mov	sl, r3
 800d1ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d1d2:	d807      	bhi.n	800d1e4 <_printf_i+0x28>
 800d1d4:	2f62      	cmp	r7, #98	; 0x62
 800d1d6:	d80a      	bhi.n	800d1ee <_printf_i+0x32>
 800d1d8:	2f00      	cmp	r7, #0
 800d1da:	f000 80d8 	beq.w	800d38e <_printf_i+0x1d2>
 800d1de:	2f58      	cmp	r7, #88	; 0x58
 800d1e0:	f000 80a3 	beq.w	800d32a <_printf_i+0x16e>
 800d1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d1e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d1ec:	e03a      	b.n	800d264 <_printf_i+0xa8>
 800d1ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d1f2:	2b15      	cmp	r3, #21
 800d1f4:	d8f6      	bhi.n	800d1e4 <_printf_i+0x28>
 800d1f6:	a101      	add	r1, pc, #4	; (adr r1, 800d1fc <_printf_i+0x40>)
 800d1f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d1fc:	0800d255 	.word	0x0800d255
 800d200:	0800d269 	.word	0x0800d269
 800d204:	0800d1e5 	.word	0x0800d1e5
 800d208:	0800d1e5 	.word	0x0800d1e5
 800d20c:	0800d1e5 	.word	0x0800d1e5
 800d210:	0800d1e5 	.word	0x0800d1e5
 800d214:	0800d269 	.word	0x0800d269
 800d218:	0800d1e5 	.word	0x0800d1e5
 800d21c:	0800d1e5 	.word	0x0800d1e5
 800d220:	0800d1e5 	.word	0x0800d1e5
 800d224:	0800d1e5 	.word	0x0800d1e5
 800d228:	0800d375 	.word	0x0800d375
 800d22c:	0800d299 	.word	0x0800d299
 800d230:	0800d357 	.word	0x0800d357
 800d234:	0800d1e5 	.word	0x0800d1e5
 800d238:	0800d1e5 	.word	0x0800d1e5
 800d23c:	0800d397 	.word	0x0800d397
 800d240:	0800d1e5 	.word	0x0800d1e5
 800d244:	0800d299 	.word	0x0800d299
 800d248:	0800d1e5 	.word	0x0800d1e5
 800d24c:	0800d1e5 	.word	0x0800d1e5
 800d250:	0800d35f 	.word	0x0800d35f
 800d254:	682b      	ldr	r3, [r5, #0]
 800d256:	1d1a      	adds	r2, r3, #4
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	602a      	str	r2, [r5, #0]
 800d25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d264:	2301      	movs	r3, #1
 800d266:	e0a3      	b.n	800d3b0 <_printf_i+0x1f4>
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	6829      	ldr	r1, [r5, #0]
 800d26c:	0606      	lsls	r6, r0, #24
 800d26e:	f101 0304 	add.w	r3, r1, #4
 800d272:	d50a      	bpl.n	800d28a <_printf_i+0xce>
 800d274:	680e      	ldr	r6, [r1, #0]
 800d276:	602b      	str	r3, [r5, #0]
 800d278:	2e00      	cmp	r6, #0
 800d27a:	da03      	bge.n	800d284 <_printf_i+0xc8>
 800d27c:	232d      	movs	r3, #45	; 0x2d
 800d27e:	4276      	negs	r6, r6
 800d280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d284:	485e      	ldr	r0, [pc, #376]	; (800d400 <_printf_i+0x244>)
 800d286:	230a      	movs	r3, #10
 800d288:	e019      	b.n	800d2be <_printf_i+0x102>
 800d28a:	680e      	ldr	r6, [r1, #0]
 800d28c:	602b      	str	r3, [r5, #0]
 800d28e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d292:	bf18      	it	ne
 800d294:	b236      	sxthne	r6, r6
 800d296:	e7ef      	b.n	800d278 <_printf_i+0xbc>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	6820      	ldr	r0, [r4, #0]
 800d29c:	1d19      	adds	r1, r3, #4
 800d29e:	6029      	str	r1, [r5, #0]
 800d2a0:	0601      	lsls	r1, r0, #24
 800d2a2:	d501      	bpl.n	800d2a8 <_printf_i+0xec>
 800d2a4:	681e      	ldr	r6, [r3, #0]
 800d2a6:	e002      	b.n	800d2ae <_printf_i+0xf2>
 800d2a8:	0646      	lsls	r6, r0, #25
 800d2aa:	d5fb      	bpl.n	800d2a4 <_printf_i+0xe8>
 800d2ac:	881e      	ldrh	r6, [r3, #0]
 800d2ae:	4854      	ldr	r0, [pc, #336]	; (800d400 <_printf_i+0x244>)
 800d2b0:	2f6f      	cmp	r7, #111	; 0x6f
 800d2b2:	bf0c      	ite	eq
 800d2b4:	2308      	moveq	r3, #8
 800d2b6:	230a      	movne	r3, #10
 800d2b8:	2100      	movs	r1, #0
 800d2ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d2be:	6865      	ldr	r5, [r4, #4]
 800d2c0:	60a5      	str	r5, [r4, #8]
 800d2c2:	2d00      	cmp	r5, #0
 800d2c4:	bfa2      	ittt	ge
 800d2c6:	6821      	ldrge	r1, [r4, #0]
 800d2c8:	f021 0104 	bicge.w	r1, r1, #4
 800d2cc:	6021      	strge	r1, [r4, #0]
 800d2ce:	b90e      	cbnz	r6, 800d2d4 <_printf_i+0x118>
 800d2d0:	2d00      	cmp	r5, #0
 800d2d2:	d04d      	beq.n	800d370 <_printf_i+0x1b4>
 800d2d4:	4615      	mov	r5, r2
 800d2d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d2da:	fb03 6711 	mls	r7, r3, r1, r6
 800d2de:	5dc7      	ldrb	r7, [r0, r7]
 800d2e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d2e4:	4637      	mov	r7, r6
 800d2e6:	42bb      	cmp	r3, r7
 800d2e8:	460e      	mov	r6, r1
 800d2ea:	d9f4      	bls.n	800d2d6 <_printf_i+0x11a>
 800d2ec:	2b08      	cmp	r3, #8
 800d2ee:	d10b      	bne.n	800d308 <_printf_i+0x14c>
 800d2f0:	6823      	ldr	r3, [r4, #0]
 800d2f2:	07de      	lsls	r6, r3, #31
 800d2f4:	d508      	bpl.n	800d308 <_printf_i+0x14c>
 800d2f6:	6923      	ldr	r3, [r4, #16]
 800d2f8:	6861      	ldr	r1, [r4, #4]
 800d2fa:	4299      	cmp	r1, r3
 800d2fc:	bfde      	ittt	le
 800d2fe:	2330      	movle	r3, #48	; 0x30
 800d300:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d304:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d308:	1b52      	subs	r2, r2, r5
 800d30a:	6122      	str	r2, [r4, #16]
 800d30c:	f8cd a000 	str.w	sl, [sp]
 800d310:	464b      	mov	r3, r9
 800d312:	aa03      	add	r2, sp, #12
 800d314:	4621      	mov	r1, r4
 800d316:	4640      	mov	r0, r8
 800d318:	f7ff fee2 	bl	800d0e0 <_printf_common>
 800d31c:	3001      	adds	r0, #1
 800d31e:	d14c      	bne.n	800d3ba <_printf_i+0x1fe>
 800d320:	f04f 30ff 	mov.w	r0, #4294967295
 800d324:	b004      	add	sp, #16
 800d326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d32a:	4835      	ldr	r0, [pc, #212]	; (800d400 <_printf_i+0x244>)
 800d32c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d330:	6829      	ldr	r1, [r5, #0]
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	f851 6b04 	ldr.w	r6, [r1], #4
 800d338:	6029      	str	r1, [r5, #0]
 800d33a:	061d      	lsls	r5, r3, #24
 800d33c:	d514      	bpl.n	800d368 <_printf_i+0x1ac>
 800d33e:	07df      	lsls	r7, r3, #31
 800d340:	bf44      	itt	mi
 800d342:	f043 0320 	orrmi.w	r3, r3, #32
 800d346:	6023      	strmi	r3, [r4, #0]
 800d348:	b91e      	cbnz	r6, 800d352 <_printf_i+0x196>
 800d34a:	6823      	ldr	r3, [r4, #0]
 800d34c:	f023 0320 	bic.w	r3, r3, #32
 800d350:	6023      	str	r3, [r4, #0]
 800d352:	2310      	movs	r3, #16
 800d354:	e7b0      	b.n	800d2b8 <_printf_i+0xfc>
 800d356:	6823      	ldr	r3, [r4, #0]
 800d358:	f043 0320 	orr.w	r3, r3, #32
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	2378      	movs	r3, #120	; 0x78
 800d360:	4828      	ldr	r0, [pc, #160]	; (800d404 <_printf_i+0x248>)
 800d362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d366:	e7e3      	b.n	800d330 <_printf_i+0x174>
 800d368:	0659      	lsls	r1, r3, #25
 800d36a:	bf48      	it	mi
 800d36c:	b2b6      	uxthmi	r6, r6
 800d36e:	e7e6      	b.n	800d33e <_printf_i+0x182>
 800d370:	4615      	mov	r5, r2
 800d372:	e7bb      	b.n	800d2ec <_printf_i+0x130>
 800d374:	682b      	ldr	r3, [r5, #0]
 800d376:	6826      	ldr	r6, [r4, #0]
 800d378:	6961      	ldr	r1, [r4, #20]
 800d37a:	1d18      	adds	r0, r3, #4
 800d37c:	6028      	str	r0, [r5, #0]
 800d37e:	0635      	lsls	r5, r6, #24
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	d501      	bpl.n	800d388 <_printf_i+0x1cc>
 800d384:	6019      	str	r1, [r3, #0]
 800d386:	e002      	b.n	800d38e <_printf_i+0x1d2>
 800d388:	0670      	lsls	r0, r6, #25
 800d38a:	d5fb      	bpl.n	800d384 <_printf_i+0x1c8>
 800d38c:	8019      	strh	r1, [r3, #0]
 800d38e:	2300      	movs	r3, #0
 800d390:	6123      	str	r3, [r4, #16]
 800d392:	4615      	mov	r5, r2
 800d394:	e7ba      	b.n	800d30c <_printf_i+0x150>
 800d396:	682b      	ldr	r3, [r5, #0]
 800d398:	1d1a      	adds	r2, r3, #4
 800d39a:	602a      	str	r2, [r5, #0]
 800d39c:	681d      	ldr	r5, [r3, #0]
 800d39e:	6862      	ldr	r2, [r4, #4]
 800d3a0:	2100      	movs	r1, #0
 800d3a2:	4628      	mov	r0, r5
 800d3a4:	f7f2 ff9c 	bl	80002e0 <memchr>
 800d3a8:	b108      	cbz	r0, 800d3ae <_printf_i+0x1f2>
 800d3aa:	1b40      	subs	r0, r0, r5
 800d3ac:	6060      	str	r0, [r4, #4]
 800d3ae:	6863      	ldr	r3, [r4, #4]
 800d3b0:	6123      	str	r3, [r4, #16]
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3b8:	e7a8      	b.n	800d30c <_printf_i+0x150>
 800d3ba:	6923      	ldr	r3, [r4, #16]
 800d3bc:	462a      	mov	r2, r5
 800d3be:	4649      	mov	r1, r9
 800d3c0:	4640      	mov	r0, r8
 800d3c2:	47d0      	blx	sl
 800d3c4:	3001      	adds	r0, #1
 800d3c6:	d0ab      	beq.n	800d320 <_printf_i+0x164>
 800d3c8:	6823      	ldr	r3, [r4, #0]
 800d3ca:	079b      	lsls	r3, r3, #30
 800d3cc:	d413      	bmi.n	800d3f6 <_printf_i+0x23a>
 800d3ce:	68e0      	ldr	r0, [r4, #12]
 800d3d0:	9b03      	ldr	r3, [sp, #12]
 800d3d2:	4298      	cmp	r0, r3
 800d3d4:	bfb8      	it	lt
 800d3d6:	4618      	movlt	r0, r3
 800d3d8:	e7a4      	b.n	800d324 <_printf_i+0x168>
 800d3da:	2301      	movs	r3, #1
 800d3dc:	4632      	mov	r2, r6
 800d3de:	4649      	mov	r1, r9
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	47d0      	blx	sl
 800d3e4:	3001      	adds	r0, #1
 800d3e6:	d09b      	beq.n	800d320 <_printf_i+0x164>
 800d3e8:	3501      	adds	r5, #1
 800d3ea:	68e3      	ldr	r3, [r4, #12]
 800d3ec:	9903      	ldr	r1, [sp, #12]
 800d3ee:	1a5b      	subs	r3, r3, r1
 800d3f0:	42ab      	cmp	r3, r5
 800d3f2:	dcf2      	bgt.n	800d3da <_printf_i+0x21e>
 800d3f4:	e7eb      	b.n	800d3ce <_printf_i+0x212>
 800d3f6:	2500      	movs	r5, #0
 800d3f8:	f104 0619 	add.w	r6, r4, #25
 800d3fc:	e7f5      	b.n	800d3ea <_printf_i+0x22e>
 800d3fe:	bf00      	nop
 800d400:	0800ebd5 	.word	0x0800ebd5
 800d404:	0800ebe6 	.word	0x0800ebe6

0800d408 <__retarget_lock_acquire_recursive>:
 800d408:	4770      	bx	lr

0800d40a <__retarget_lock_release_recursive>:
 800d40a:	4770      	bx	lr

0800d40c <memcpy>:
 800d40c:	440a      	add	r2, r1
 800d40e:	4291      	cmp	r1, r2
 800d410:	f100 33ff 	add.w	r3, r0, #4294967295
 800d414:	d100      	bne.n	800d418 <memcpy+0xc>
 800d416:	4770      	bx	lr
 800d418:	b510      	push	{r4, lr}
 800d41a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d41e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d422:	4291      	cmp	r1, r2
 800d424:	d1f9      	bne.n	800d41a <memcpy+0xe>
 800d426:	bd10      	pop	{r4, pc}

0800d428 <memmove>:
 800d428:	4288      	cmp	r0, r1
 800d42a:	b510      	push	{r4, lr}
 800d42c:	eb01 0402 	add.w	r4, r1, r2
 800d430:	d902      	bls.n	800d438 <memmove+0x10>
 800d432:	4284      	cmp	r4, r0
 800d434:	4623      	mov	r3, r4
 800d436:	d807      	bhi.n	800d448 <memmove+0x20>
 800d438:	1e43      	subs	r3, r0, #1
 800d43a:	42a1      	cmp	r1, r4
 800d43c:	d008      	beq.n	800d450 <memmove+0x28>
 800d43e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d442:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d446:	e7f8      	b.n	800d43a <memmove+0x12>
 800d448:	4402      	add	r2, r0
 800d44a:	4601      	mov	r1, r0
 800d44c:	428a      	cmp	r2, r1
 800d44e:	d100      	bne.n	800d452 <memmove+0x2a>
 800d450:	bd10      	pop	{r4, pc}
 800d452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d45a:	e7f7      	b.n	800d44c <memmove+0x24>

0800d45c <_realloc_r>:
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	4680      	mov	r8, r0
 800d462:	4614      	mov	r4, r2
 800d464:	460e      	mov	r6, r1
 800d466:	b921      	cbnz	r1, 800d472 <_realloc_r+0x16>
 800d468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d46c:	4611      	mov	r1, r2
 800d46e:	f7ff bc2b 	b.w	800ccc8 <_malloc_r>
 800d472:	b92a      	cbnz	r2, 800d480 <_realloc_r+0x24>
 800d474:	f7ff fbbc 	bl	800cbf0 <_free_r>
 800d478:	4625      	mov	r5, r4
 800d47a:	4628      	mov	r0, r5
 800d47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d480:	f000 f81b 	bl	800d4ba <_malloc_usable_size_r>
 800d484:	4284      	cmp	r4, r0
 800d486:	4607      	mov	r7, r0
 800d488:	d802      	bhi.n	800d490 <_realloc_r+0x34>
 800d48a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d48e:	d812      	bhi.n	800d4b6 <_realloc_r+0x5a>
 800d490:	4621      	mov	r1, r4
 800d492:	4640      	mov	r0, r8
 800d494:	f7ff fc18 	bl	800ccc8 <_malloc_r>
 800d498:	4605      	mov	r5, r0
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d0ed      	beq.n	800d47a <_realloc_r+0x1e>
 800d49e:	42bc      	cmp	r4, r7
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	bf28      	it	cs
 800d4a6:	463a      	movcs	r2, r7
 800d4a8:	f7ff ffb0 	bl	800d40c <memcpy>
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	f7ff fb9e 	bl	800cbf0 <_free_r>
 800d4b4:	e7e1      	b.n	800d47a <_realloc_r+0x1e>
 800d4b6:	4635      	mov	r5, r6
 800d4b8:	e7df      	b.n	800d47a <_realloc_r+0x1e>

0800d4ba <_malloc_usable_size_r>:
 800d4ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4be:	1f18      	subs	r0, r3, #4
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	bfbc      	itt	lt
 800d4c4:	580b      	ldrlt	r3, [r1, r0]
 800d4c6:	18c0      	addlt	r0, r0, r3
 800d4c8:	4770      	bx	lr
	...

0800d4cc <_init>:
 800d4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4ce:	bf00      	nop
 800d4d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4d2:	bc08      	pop	{r3}
 800d4d4:	469e      	mov	lr, r3
 800d4d6:	4770      	bx	lr

0800d4d8 <_fini>:
 800d4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4da:	bf00      	nop
 800d4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d4de:	bc08      	pop	{r3}
 800d4e0:	469e      	mov	lr, r3
 800d4e2:	4770      	bx	lr
