
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b82c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0800bacc  0800bacc  0001bacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d168  0800d168  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800d168  0800d168  0001d168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d170  0800d170  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d170  0800d170  0001d170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d174  0800d174  0001d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800d178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800d1fc  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800d25c  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b78  24000144  0800d2bc  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000cbc  0800d2bc  00020cbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f7dd  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036d4  00000000  00000000  0003f94f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  00043028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012f8  00000000  00000000  00044470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c555  00000000  00000000  00045768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bb9e  00000000  00000000  00081cbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187203  00000000  00000000  0009d85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00224a5e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000059a4  00000000  00000000  00224ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bab4 	.word	0x0800bab4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800bab4 	.word	0x0800bab4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->actionPositon = src->actionPositon;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr

080006da <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 80006da:	b580      	push	{r7, lr}
 80006dc:	b088      	sub	sp, #32
 80006de:	af00      	add	r7, sp, #0
 80006e0:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3314      	adds	r3, #20
 80006f2:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 80006f4:	2300      	movs	r3, #0
 80006f6:	76fb      	strb	r3, [r7, #27]
 80006f8:	e00b      	b.n	8000712 <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	69f9      	ldr	r1, [r7, #28]
 8000700:	4618      	mov	r0, r3
 8000702:	f7ff ffbf 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	330c      	adds	r3, #12
 800070a:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800070c:	7efb      	ldrb	r3, [r7, #27]
 800070e:	3301      	adds	r3, #1
 8000710:	76fb      	strb	r3, [r7, #27]
 8000712:	7efb      	ldrb	r3, [r7, #27]
 8000714:	2b03      	cmp	r3, #3
 8000716:	d9f0      	bls.n	80006fa <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000718:	bf00      	nop
 800071a:	bf00      	nop
 800071c:	3720      	adds	r7, #32
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000722:	b580      	push	{r7, lr}
 8000724:	b088      	sub	sp, #32
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800072a:	f107 030c 	add.w	r3, r7, #12
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800073c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800073e:	2300      	movs	r3, #0
 8000740:	76fb      	strb	r3, [r7, #27]
 8000742:	e00b      	b.n	800075c <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000744:	f107 030c 	add.w	r3, r7, #12
 8000748:	69f9      	ldr	r1, [r7, #28]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff ff9a 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	330c      	adds	r3, #12
 8000754:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000756:	7efb      	ldrb	r3, [r7, #27]
 8000758:	3301      	adds	r3, #1
 800075a:	76fb      	strb	r3, [r7, #27]
 800075c:	7efb      	ldrb	r3, [r7, #27]
 800075e:	2b05      	cmp	r3, #5
 8000760:	d9f0      	bls.n	8000744 <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 8000762:	bf00      	nop
 8000764:	bf00      	nop
 8000766:	3720      	adds	r7, #32
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800077a:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8000782:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800078a:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000792:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000794:	2306      	movs	r3, #6
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	e00c      	b.n	80007b4 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800079a:	6939      	ldr	r1, [r7, #16]
 800079c:	6978      	ldr	r0, [r7, #20]
 800079e:	f7ff ff71 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	3b0c      	subs	r3, #12
 80007a6:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	3b0c      	subs	r3, #12
 80007ac:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	3b01      	subs	r3, #1
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	dcef      	bgt.n	800079a <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	3304      	adds	r3, #4
 80007d2:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	3304      	adds	r3, #4
 80007d8:	613b      	str	r3, [r7, #16]

	ptrPlayer1 = &state_game->player[0];
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	3304      	adds	r3, #4
 80007de:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80007e6:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80007ee:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 80007f0:	7bfb      	ldrb	r3, [r7, #15]
 80007f2:	2b02      	cmp	r3, #2
 80007f4:	f000 820b 	beq.w	8000c0e <GAME_PLAY_Management+0x44a>
 80007f8:	2b02      	cmp	r3, #2
 80007fa:	f300 8238 	bgt.w	8000c6e <GAME_PLAY_Management+0x4aa>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <GAME_PLAY_Management+0x46>
 8000802:	2b01      	cmp	r3, #1
 8000804:	f000 81d3 	beq.w	8000bae <GAME_PLAY_Management+0x3ea>
	            state_game->F_flag = 0;
	        }
	        GAME_PLAY_Phase_Management(RFIDmain,state_game);
	        break;
	}
}
 8000808:	e231      	b.n	8000c6e <GAME_PLAY_Management+0x4aa>
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800080a:	4baa      	ldr	r3, [pc, #680]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 800080c:	2200      	movs	r2, #0
 800080e:	9202      	str	r2, [sp, #8]
 8000810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000814:	9201      	str	r2, [sp, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	9200      	str	r2, [sp, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4aa6      	ldr	r2, [pc, #664]	; (8000ab8 <GAME_PLAY_Management+0x2f4>)
 800081e:	2105      	movs	r1, #5
 8000820:	2005      	movs	r0, #5
 8000822:	f001 fcd2 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000826:	4ba3      	ldr	r3, [pc, #652]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000828:	2200      	movs	r2, #0
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	9200      	str	r2, [sp, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4aa0      	ldr	r2, [pc, #640]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 800083a:	210f      	movs	r1, #15
 800083c:	2000      	movs	r0, #0
 800083e:	f001 fcc4 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000842:	4b9f      	ldr	r3, [pc, #636]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000844:	2200      	movs	r2, #0
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	9200      	str	r2, [sp, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a9b      	ldr	r2, [pc, #620]	; (8000ac4 <GAME_PLAY_Management+0x300>)
 8000856:	2123      	movs	r1, #35	; 0x23
 8000858:	2008      	movs	r0, #8
 800085a:	f001 fcb6 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800085e:	4b98      	ldr	r3, [pc, #608]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000860:	2200      	movs	r2, #0
 8000862:	9202      	str	r2, [sp, #8]
 8000864:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000868:	9201      	str	r2, [sp, #4]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	9200      	str	r2, [sp, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a95      	ldr	r2, [pc, #596]	; (8000ac8 <GAME_PLAY_Management+0x304>)
 8000872:	213c      	movs	r1, #60	; 0x3c
 8000874:	2019      	movs	r0, #25
 8000876:	f001 fca8 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800087a:	4b8e      	ldr	r3, [pc, #568]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 800087c:	2200      	movs	r2, #0
 800087e:	9202      	str	r2, [sp, #8]
 8000880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a8b      	ldr	r2, [pc, #556]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 800088e:	214b      	movs	r1, #75	; 0x4b
 8000890:	2000      	movs	r0, #0
 8000892:	f001 fc9a 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000896:	4b87      	ldr	r3, [pc, #540]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000898:	2200      	movs	r2, #0
 800089a:	9202      	str	r2, [sp, #8]
 800089c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	9200      	str	r2, [sp, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a88      	ldr	r2, [pc, #544]	; (8000acc <GAME_PLAY_Management+0x308>)
 80008aa:	215a      	movs	r1, #90	; 0x5a
 80008ac:	2000      	movs	r0, #0
 80008ae:	f001 fc8c 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80008b2:	4b80      	ldr	r3, [pc, #512]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	9202      	str	r2, [sp, #8]
 80008b8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a82      	ldr	r2, [pc, #520]	; (8000ad0 <GAME_PLAY_Management+0x30c>)
 80008c6:	215a      	movs	r1, #90	; 0x5a
 80008c8:	205d      	movs	r0, #93	; 0x5d
 80008ca:	f001 fc7e 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008ce:	4b79      	ldr	r3, [pc, #484]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	9200      	str	r2, [sp, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a7c      	ldr	r2, [pc, #496]	; (8000ad4 <GAME_PLAY_Management+0x310>)
 80008e2:	2169      	movs	r1, #105	; 0x69
 80008e4:	2000      	movs	r0, #0
 80008e6:	f001 fc70 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80008ea:	4b72      	ldr	r3, [pc, #456]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	9202      	str	r2, [sp, #8]
 80008f0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008f4:	9201      	str	r2, [sp, #4]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a76      	ldr	r2, [pc, #472]	; (8000ad8 <GAME_PLAY_Management+0x314>)
 80008fe:	2169      	movs	r1, #105	; 0x69
 8000900:	2064      	movs	r0, #100	; 0x64
 8000902:	f001 fc62 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000906:	4b6b      	ldr	r3, [pc, #428]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000908:	2200      	movs	r2, #0
 800090a:	9202      	str	r2, [sp, #8]
 800090c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000910:	9201      	str	r2, [sp, #4]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a70      	ldr	r2, [pc, #448]	; (8000adc <GAME_PLAY_Management+0x318>)
 800091a:	2105      	movs	r1, #5
 800091c:	2005      	movs	r0, #5
 800091e:	f001 fc9e 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000924:	2200      	movs	r2, #0
 8000926:	9202      	str	r2, [sp, #8]
 8000928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a61      	ldr	r2, [pc, #388]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 8000936:	210f      	movs	r1, #15
 8000938:	2000      	movs	r0, #0
 800093a:	f001 fc90 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000940:	2200      	movs	r2, #0
 8000942:	9202      	str	r2, [sp, #8]
 8000944:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000948:	9201      	str	r2, [sp, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	9200      	str	r2, [sp, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a5c      	ldr	r2, [pc, #368]	; (8000ac4 <GAME_PLAY_Management+0x300>)
 8000952:	2123      	movs	r1, #35	; 0x23
 8000954:	2008      	movs	r0, #8
 8000956:	f001 fc82 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800095a:	4b59      	ldr	r3, [pc, #356]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 800095c:	2200      	movs	r2, #0
 800095e:	9202      	str	r2, [sp, #8]
 8000960:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000964:	9201      	str	r2, [sp, #4]
 8000966:	685a      	ldr	r2, [r3, #4]
 8000968:	9200      	str	r2, [sp, #0]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a56      	ldr	r2, [pc, #344]	; (8000ac8 <GAME_PLAY_Management+0x304>)
 800096e:	213c      	movs	r1, #60	; 0x3c
 8000970:	2014      	movs	r0, #20
 8000972:	f001 fc74 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000976:	4b4f      	ldr	r3, [pc, #316]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000978:	2200      	movs	r2, #0
 800097a:	9202      	str	r2, [sp, #8]
 800097c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000980:	9201      	str	r2, [sp, #4]
 8000982:	685a      	ldr	r2, [r3, #4]
 8000984:	9200      	str	r2, [sp, #0]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a4c      	ldr	r2, [pc, #304]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 800098a:	214b      	movs	r1, #75	; 0x4b
 800098c:	2000      	movs	r0, #0
 800098e:	f001 fc66 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000992:	4b48      	ldr	r3, [pc, #288]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000994:	2200      	movs	r2, #0
 8000996:	9202      	str	r2, [sp, #8]
 8000998:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800099c:	9201      	str	r2, [sp, #4]
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	9200      	str	r2, [sp, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a49      	ldr	r2, [pc, #292]	; (8000acc <GAME_PLAY_Management+0x308>)
 80009a6:	215a      	movs	r1, #90	; 0x5a
 80009a8:	2000      	movs	r0, #0
 80009aa:	f001 fc58 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009ae:	4b41      	ldr	r3, [pc, #260]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	9202      	str	r2, [sp, #8]
 80009b4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009b8:	9201      	str	r2, [sp, #4]
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	9200      	str	r2, [sp, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a43      	ldr	r2, [pc, #268]	; (8000ad0 <GAME_PLAY_Management+0x30c>)
 80009c2:	215a      	movs	r1, #90	; 0x5a
 80009c4:	205d      	movs	r0, #93	; 0x5d
 80009c6:	f001 fc4a 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009ca:	4b3a      	ldr	r3, [pc, #232]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	9202      	str	r2, [sp, #8]
 80009d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009d4:	9201      	str	r2, [sp, #4]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	9200      	str	r2, [sp, #0]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a3d      	ldr	r2, [pc, #244]	; (8000ad4 <GAME_PLAY_Management+0x310>)
 80009de:	2169      	movs	r1, #105	; 0x69
 80009e0:	2000      	movs	r0, #0
 80009e2:	f001 fc3c 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009e6:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	9202      	str	r2, [sp, #8]
 80009ec:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009f0:	9201      	str	r2, [sp, #4]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	9200      	str	r2, [sp, #0]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a37      	ldr	r2, [pc, #220]	; (8000ad8 <GAME_PLAY_Management+0x314>)
 80009fa:	2169      	movs	r1, #105	; 0x69
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f001 fc2e 	bl	800225e <ST7735_WriteString1>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000a02:	2108      	movs	r1, #8
 8000a04:	4836      	ldr	r0, [pc, #216]	; (8000ae0 <GAME_PLAY_Management+0x31c>)
 8000a06:	f005 fa87 	bl	8005f18 <HAL_GPIO_ReadPin>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	f040 80c9 	bne.w	8000ba4 <GAME_PLAY_Management+0x3e0>
			ptrPlayer1->life_point = 4000;
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a18:	801a      	strh	r2, [r3, #0]
			ptrPlayer2->life_point = 4000;
 8000a1a:	693b      	ldr	r3, [r7, #16]
 8000a1c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a20:	801a      	strh	r2, [r3, #0]
			ST7735_FillScreen(ST7735_BLACK);
 8000a22:	2000      	movs	r0, #0
 8000a24:	f001 fd4e 	bl	80024c4 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f001 fd5c 	bl	80024e6 <ST7735_FillScreen1>
			ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	9202      	str	r2, [sp, #8]
 8000a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a1d      	ldr	r2, [pc, #116]	; (8000ab8 <GAME_PLAY_Management+0x2f4>)
 8000a42:	2105      	movs	r1, #5
 8000a44:	2005      	movs	r0, #5
 8000a46:	f001 fbc0 	bl	80021ca <ST7735_WriteString>
			ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	9202      	str	r2, [sp, #8]
 8000a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a17      	ldr	r2, [pc, #92]	; (8000abc <GAME_PLAY_Management+0x2f8>)
 8000a5e:	210f      	movs	r1, #15
 8000a60:	2000      	movs	r0, #0
 8000a62:	f001 fbb2 	bl	80021ca <ST7735_WriteString>
			ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	9202      	str	r2, [sp, #8]
 8000a6c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000a70:	9201      	str	r2, [sp, #4]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <GAME_PLAY_Management+0x320>)
 8000a7a:	2123      	movs	r1, #35	; 0x23
 8000a7c:	2019      	movs	r0, #25
 8000a7e:	f001 fba4 	bl	80021ca <ST7735_WriteString>
			ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <GAME_PLAY_Management+0x2fc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	9202      	str	r2, [sp, #8]
 8000a88:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a8c:	9201      	str	r2, [sp, #4]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a14      	ldr	r2, [pc, #80]	; (8000ae8 <GAME_PLAY_Management+0x324>)
 8000a96:	213c      	movs	r1, #60	; 0x3c
 8000a98:	2021      	movs	r0, #33	; 0x21
 8000a9a:	f001 fb96 	bl	80021ca <ST7735_WriteString>
			ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a9e:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <GAME_PLAY_Management+0x2f0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	9202      	str	r2, [sp, #8]
 8000aa4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000aa8:	9201      	str	r2, [sp, #4]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	9200      	str	r2, [sp, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	e01c      	b.n	8000aec <GAME_PLAY_Management+0x328>
 8000ab2:	bf00      	nop
 8000ab4:	24000008 	.word	0x24000008
 8000ab8:	0800bacc 	.word	0x0800bacc
 8000abc:	0800bad8 	.word	0x0800bad8
 8000ac0:	24000010 	.word	0x24000010
 8000ac4:	0800baec 	.word	0x0800baec
 8000ac8:	0800baf8 	.word	0x0800baf8
 8000acc:	0800bb00 	.word	0x0800bb00
 8000ad0:	0800bb10 	.word	0x0800bb10
 8000ad4:	0800bb18 	.word	0x0800bb18
 8000ad8:	0800bb28 	.word	0x0800bb28
 8000adc:	0800bb2c 	.word	0x0800bb2c
 8000ae0:	58020000 	.word	0x58020000
 8000ae4:	0800bb38 	.word	0x0800bb38
 8000ae8:	0800bb40 	.word	0x0800bb40
 8000aec:	4a62      	ldr	r2, [pc, #392]	; (8000c78 <GAME_PLAY_Management+0x4b4>)
 8000aee:	214b      	movs	r1, #75	; 0x4b
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 fb6a 	bl	80021ca <ST7735_WriteString>
			ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000af6:	4b61      	ldr	r3, [pc, #388]	; (8000c7c <GAME_PLAY_Management+0x4b8>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	9202      	str	r2, [sp, #8]
 8000afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b00:	9201      	str	r2, [sp, #4]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	9200      	str	r2, [sp, #0]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a5d      	ldr	r2, [pc, #372]	; (8000c80 <GAME_PLAY_Management+0x4bc>)
 8000b0a:	2105      	movs	r1, #5
 8000b0c:	2005      	movs	r0, #5
 8000b0e:	f001 fba6 	bl	800225e <ST7735_WriteString1>
			ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b12:	4b5a      	ldr	r3, [pc, #360]	; (8000c7c <GAME_PLAY_Management+0x4b8>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a54      	ldr	r2, [pc, #336]	; (8000c78 <GAME_PLAY_Management+0x4b4>)
 8000b26:	210f      	movs	r1, #15
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f001 fb98 	bl	800225e <ST7735_WriteString1>
			ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b2e:	4b55      	ldr	r3, [pc, #340]	; (8000c84 <GAME_PLAY_Management+0x4c0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	9202      	str	r2, [sp, #8]
 8000b34:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	9200      	str	r2, [sp, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a51      	ldr	r2, [pc, #324]	; (8000c88 <GAME_PLAY_Management+0x4c4>)
 8000b42:	2123      	movs	r1, #35	; 0x23
 8000b44:	2019      	movs	r0, #25
 8000b46:	f001 fb8a 	bl	800225e <ST7735_WriteString1>
			ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b4a:	4b4e      	ldr	r3, [pc, #312]	; (8000c84 <GAME_PLAY_Management+0x4c0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	9202      	str	r2, [sp, #8]
 8000b50:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	9200      	str	r2, [sp, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a4b      	ldr	r2, [pc, #300]	; (8000c8c <GAME_PLAY_Management+0x4c8>)
 8000b5e:	213c      	movs	r1, #60	; 0x3c
 8000b60:	2025      	movs	r0, #37	; 0x25
 8000b62:	f001 fb7c 	bl	800225e <ST7735_WriteString1>
			ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b66:	4b45      	ldr	r3, [pc, #276]	; (8000c7c <GAME_PLAY_Management+0x4b8>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	9202      	str	r2, [sp, #8]
 8000b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	9200      	str	r2, [sp, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a3f      	ldr	r2, [pc, #252]	; (8000c78 <GAME_PLAY_Management+0x4b4>)
 8000b7a:	214b      	movs	r1, #75	; 0x4b
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	f001 fb6e 	bl	800225e <ST7735_WriteString1>
			HAL_Delay(3000);
 8000b82:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b86:	f002 f879 	bl	8002c7c <HAL_Delay>
			ST7735_FillScreen(ST7735_BLACK);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f001 fc9a 	bl	80024c4 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000b90:	2000      	movs	r0, #0
 8000b92:	f001 fca8 	bl	80024e6 <ST7735_FillScreen1>
			MainGUI();
 8000b96:	f000 fc97 	bl	80014c8 <MainGUI>
			state_game->player_state = first_player;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000ba2:	e064      	b.n	8000c6e <GAME_PLAY_Management+0x4aa>
			state_game->test = 98;
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	2262      	movs	r2, #98	; 0x62
 8000ba8:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 8000bac:	e05f      	b.n	8000c6e <GAME_PLAY_Management+0x4aa>
	        if (state_game -> F_flag == 0){
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d125      	bne.n	8000c04 <GAME_PLAY_Management+0x440>
	            ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000bb8:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <GAME_PLAY_Management+0x4c0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	9202      	str	r2, [sp, #8]
 8000bbe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000bc2:	9201      	str	r2, [sp, #4]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	9200      	str	r2, [sp, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4a31      	ldr	r2, [pc, #196]	; (8000c90 <GAME_PLAY_Management+0x4cc>)
 8000bcc:	215a      	movs	r1, #90	; 0x5a
 8000bce:	200f      	movs	r0, #15
 8000bd0:	f001 fb45 	bl	800225e <ST7735_WriteString1>
	            HAL_Delay(2000);
 8000bd4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bd8:	f002 f850 	bl	8002c7c <HAL_Delay>
	            ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9300      	str	r3, [sp, #0]
 8000be0:	2326      	movs	r3, #38	; 0x26
 8000be2:	2280      	movs	r2, #128	; 0x80
 8000be4:	215a      	movs	r1, #90	; 0x5a
 8000be6:	2000      	movs	r0, #0
 8000be8:	f001 fbf8 	bl	80023dc <ST7735_FillRectangle1>
	            state_game->F_flag += 1;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
	            state_game->S_flag = 0;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
	        GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000c04:	6839      	ldr	r1, [r7, #0]
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f000 f844 	bl	8000c94 <GAME_PLAY_Phase_Management>
	        break;
 8000c0c:	e02f      	b.n	8000c6e <GAME_PLAY_Management+0x4aa>
	        if (state_game -> S_flag == 0){
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d125      	bne.n	8000c64 <GAME_PLAY_Management+0x4a0>
	            ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <GAME_PLAY_Management+0x4c0>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	9202      	str	r2, [sp, #8]
 8000c1e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c22:	9201      	str	r2, [sp, #4]
 8000c24:	685a      	ldr	r2, [r3, #4]
 8000c26:	9200      	str	r2, [sp, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a19      	ldr	r2, [pc, #100]	; (8000c90 <GAME_PLAY_Management+0x4cc>)
 8000c2c:	215a      	movs	r1, #90	; 0x5a
 8000c2e:	200f      	movs	r0, #15
 8000c30:	f001 facb 	bl	80021ca <ST7735_WriteString>
	            HAL_Delay(2000);
 8000c34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c38:	f002 f820 	bl	8002c7c <HAL_Delay>
	            ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2326      	movs	r3, #38	; 0x26
 8000c42:	2280      	movs	r2, #128	; 0x80
 8000c44:	215a      	movs	r1, #90	; 0x5a
 8000c46:	2000      	movs	r0, #0
 8000c48:	f001 fb54 	bl	80022f4 <ST7735_FillRectangle>
	            state_game->S_flag += 1;
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
	            state_game->F_flag = 0;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
	        GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000c64:	6839      	ldr	r1, [r7, #0]
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f000 f814 	bl	8000c94 <GAME_PLAY_Phase_Management>
	        break;
 8000c6c:	bf00      	nop
}
 8000c6e:	bf00      	nop
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	0800bad8 	.word	0x0800bad8
 8000c7c:	24000008 	.word	0x24000008
 8000c80:	0800bb2c 	.word	0x0800bb2c
 8000c84:	24000010 	.word	0x24000010
 8000c88:	0800bb38 	.word	0x0800bb38
 8000c8c:	0800bb48 	.word	0x0800bb48
 8000c90:	0800bb50 	.word	0x0800bb50

08000c94 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08e      	sub	sp, #56	; 0x38
 8000c98:	af04      	add	r7, sp, #16
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Chain_Phase
	} STATE;
	STATE = state_game->STATE;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 8000ca4:	76fb      	strb	r3, [r7, #27]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8000cac:	76bb      	strb	r3, [r7, #26]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	60fb      	str	r3, [r7, #12]
	Player *ptrPlayerDef = state_game->player;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	60bb      	str	r3, [r7, #8]

	if (state_game->player_state == first_player) {
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d107      	bne.n	8000cd4 <GAME_PLAY_Phase_Management+0x40>
		ptrPlayerAtk = &state_game->player[0];
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	60fb      	str	r3, [r7, #12]
		ptrPlayerDef = &state_game->player[1];
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000cd0:	60bb      	str	r3, [r7, #8]
 8000cd2:	e00b      	b.n	8000cec <GAME_PLAY_Phase_Management+0x58>
	} else if (state_game->player_state == first_player) {
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d106      	bne.n	8000cec <GAME_PLAY_Phase_Management+0x58>
		ptrPlayerAtk = &state_game->player[1];
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000ce4:	60fb      	str	r3, [r7, #12]
		ptrPlayerDef = &state_game->player[0];
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	60bb      	str	r3, [r7, #8]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000cec:	7efb      	ldrb	r3, [r7, #27]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	f200 8357 	bhi.w	80013a2 <GAME_PLAY_Phase_Management+0x70e>
 8000cf4:	a201      	add	r2, pc, #4	; (adr r2, 8000cfc <GAME_PLAY_Phase_Management+0x68>)
 8000cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cfa:	bf00      	nop
 8000cfc:	08000d0d 	.word	0x08000d0d
 8000d00:	08000e31 	.word	0x08000e31
 8000d04:	08001399 	.word	0x08001399
 8000d08:	08001399 	.word	0x08001399
	case Drawn_Phase:
//		ST7735_FillScreen(ST7735_BLACK);
//		ST7735_FillScreen1(ST7735_BLACK);
//		// MAIN display for draw phase state
		sprintf(C_LP2, "%d",ptrPlayerDef -> life_point);
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	881b      	ldrh	r3, [r3, #0]
 8000d10:	461a      	mov	r2, r3
 8000d12:	499b      	ldr	r1, [pc, #620]	; (8000f80 <GAME_PLAY_Phase_Management+0x2ec>)
 8000d14:	489b      	ldr	r0, [pc, #620]	; (8000f84 <GAME_PLAY_Phase_Management+0x2f0>)
 8000d16:	f00a fb4f 	bl	800b3b8 <siprintf>
		ST7735_WriteString( 90, 20, C_LP2, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d1a:	4b9b      	ldr	r3, [pc, #620]	; (8000f88 <GAME_PLAY_Phase_Management+0x2f4>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	9202      	str	r2, [sp, #8]
 8000d20:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d24:	9201      	str	r2, [sp, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
 8000d28:	9200      	str	r2, [sp, #0]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a95      	ldr	r2, [pc, #596]	; (8000f84 <GAME_PLAY_Phase_Management+0x2f0>)
 8000d2e:	2114      	movs	r1, #20
 8000d30:	205a      	movs	r0, #90	; 0x5a
 8000d32:	f001 fa4a 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000d36:	4b94      	ldr	r3, [pc, #592]	; (8000f88 <GAME_PLAY_Phase_Management+0x2f4>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	9202      	str	r2, [sp, #8]
 8000d3c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000d40:	9201      	str	r2, [sp, #4]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	9200      	str	r2, [sp, #0]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a90      	ldr	r2, [pc, #576]	; (8000f8c <GAME_PLAY_Phase_Management+0x2f8>)
 8000d4a:	2123      	movs	r1, #35	; 0x23
 8000d4c:	203c      	movs	r0, #60	; 0x3c
 8000d4e:	f001 fa3c 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d52:	4b8d      	ldr	r3, [pc, #564]	; (8000f88 <GAME_PLAY_Phase_Management+0x2f4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	9202      	str	r2, [sp, #8]
 8000d58:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d5c:	9201      	str	r2, [sp, #4]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	9200      	str	r2, [sp, #0]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a8a      	ldr	r2, [pc, #552]	; (8000f90 <GAME_PLAY_Phase_Management+0x2fc>)
 8000d66:	2132      	movs	r1, #50	; 0x32
 8000d68:	2069      	movs	r0, #105	; 0x69
 8000d6a:	f001 fa2e 	bl	80021ca <ST7735_WriteString>
		ST7735_WriteString(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d6e:	4b86      	ldr	r3, [pc, #536]	; (8000f88 <GAME_PLAY_Phase_Management+0x2f4>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	9202      	str	r2, [sp, #8]
 8000d74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d78:	9201      	str	r2, [sp, #4]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	9200      	str	r2, [sp, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a84      	ldr	r2, [pc, #528]	; (8000f94 <GAME_PLAY_Phase_Management+0x300>)
 8000d82:	215a      	movs	r1, #90	; 0x5a
 8000d84:	2005      	movs	r0, #5
 8000d86:	f001 fa20 	bl	80021ca <ST7735_WriteString>
		sprintf(C_LP1, "%d",ptrPlayerAtk -> life_point);
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	497b      	ldr	r1, [pc, #492]	; (8000f80 <GAME_PLAY_Phase_Management+0x2ec>)
 8000d92:	4881      	ldr	r0, [pc, #516]	; (8000f98 <GAME_PLAY_Phase_Management+0x304>)
 8000d94:	f00a fb10 	bl	800b3b8 <siprintf>
		ST7735_WriteString1( 90, 20, C_LP1, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d98:	4b7b      	ldr	r3, [pc, #492]	; (8000f88 <GAME_PLAY_Phase_Management+0x2f4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	9202      	str	r2, [sp, #8]
 8000d9e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000da2:	9201      	str	r2, [sp, #4]
 8000da4:	685a      	ldr	r2, [r3, #4]
 8000da6:	9200      	str	r2, [sp, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a7b      	ldr	r2, [pc, #492]	; (8000f98 <GAME_PLAY_Phase_Management+0x304>)
 8000dac:	2114      	movs	r1, #20
 8000dae:	205a      	movs	r0, #90	; 0x5a
 8000db0:	f001 fa55 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000db4:	4b74      	ldr	r3, [pc, #464]	; (8000f88 <GAME_PLAY_Phase_Management+0x2f4>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	9202      	str	r2, [sp, #8]
 8000dba:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000dbe:	9201      	str	r2, [sp, #4]
 8000dc0:	685a      	ldr	r2, [r3, #4]
 8000dc2:	9200      	str	r2, [sp, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a71      	ldr	r2, [pc, #452]	; (8000f8c <GAME_PLAY_Phase_Management+0x2f8>)
 8000dc8:	2123      	movs	r1, #35	; 0x23
 8000dca:	203c      	movs	r0, #60	; 0x3c
 8000dcc:	f001 fa47 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000dd0:	4b6d      	ldr	r3, [pc, #436]	; (8000f88 <GAME_PLAY_Phase_Management+0x2f4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	9202      	str	r2, [sp, #8]
 8000dd6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000dda:	9201      	str	r2, [sp, #4]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	9200      	str	r2, [sp, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a6b      	ldr	r2, [pc, #428]	; (8000f90 <GAME_PLAY_Phase_Management+0x2fc>)
 8000de4:	2132      	movs	r1, #50	; 0x32
 8000de6:	2069      	movs	r0, #105	; 0x69
 8000de8:	f001 fa39 	bl	800225e <ST7735_WriteString1>
		ST7735_WriteString1(5, 90, "Draw a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000dec:	4b66      	ldr	r3, [pc, #408]	; (8000f88 <GAME_PLAY_Phase_Management+0x2f4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	9202      	str	r2, [sp, #8]
 8000df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000df6:	9201      	str	r2, [sp, #4]
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	9200      	str	r2, [sp, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a67      	ldr	r2, [pc, #412]	; (8000f9c <GAME_PLAY_Phase_Management+0x308>)
 8000e00:	215a      	movs	r1, #90	; 0x5a
 8000e02:	2005      	movs	r0, #5
 8000e04:	f001 fa2b 	bl	800225e <ST7735_WriteString1>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000e08:	2101      	movs	r1, #1
 8000e0a:	4865      	ldr	r0, [pc, #404]	; (8000fa0 <GAME_PLAY_Phase_Management+0x30c>)
 8000e0c:	f005 f884 	bl	8005f18 <HAL_GPIO_ReadPin>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	f040 82c2 	bne.w	800139c <GAME_PLAY_Phase_Management+0x708>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000e2e:	e2b5      	b.n	800139c <GAME_PLAY_Phase_Management+0x708>
	case Main_Phase:

		switch (MAIN)
 8000e30:	7ebb      	ldrb	r3, [r7, #26]
 8000e32:	2b06      	cmp	r3, #6
 8000e34:	f200 82b4 	bhi.w	80013a0 <GAME_PLAY_Phase_Management+0x70c>
 8000e38:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <GAME_PLAY_Phase_Management+0x1ac>)
 8000e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e3e:	bf00      	nop
 8000e40:	08000e5d 	.word	0x08000e5d
 8000e44:	08000e87 	.word	0x08000e87
 8000e48:	08000fad 	.word	0x08000fad
 8000e4c:	08001161 	.word	0x08001161
 8000e50:	08001311 	.word	0x08001311
 8000e54:	080012c1 	.word	0x080012c1
 8000e58:	08001253 	.word	0x08001253
		{
		case await:
			if (state_game->action == 0)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d106      	bne.n	8000e72 <GAME_PLAY_Phase_Management+0x1de>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	461a      	mov	r2, r3
 8000e68:	6839      	ldr	r1, [r7, #0]
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f000 faa0 	bl	80013b0 <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000e70:	e284      	b.n	800137c <GAME_PLAY_Phase_Management+0x6e8>
			else if (state_game->action == 1)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	f040 8280 	bne.w	800137c <GAME_PLAY_Phase_Management+0x6e8>
				state_game->MAIN = select_position;
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2201      	movs	r2, #1
 8000e80:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000e84:	e27a      	b.n	800137c <GAME_PLAY_Phase_Management+0x6e8>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e8c:	617b      	str	r3, [r7, #20]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e94:	627b      	str	r3, [r7, #36]	; 0x24

			if (state_game->action == 1)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d15e      	bne.n	8000f5c <GAME_PLAY_Phase_Management+0x2c8>
			{
				if (state_game->player_state == first_player)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d135      	bne.n	8000f14 <GAME_PLAY_Phase_Management+0x280>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000ea8:	2108      	movs	r1, #8
 8000eaa:	483d      	ldr	r0, [pc, #244]	; (8000fa0 <GAME_PLAY_Phase_Management+0x30c>)
 8000eac:	f005 f834 	bl	8005f18 <HAL_GPIO_ReadPin>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d106      	bne.n	8000ec4 <GAME_PLAY_Phase_Management+0x230>
					{
						ptrYugiohCard_src->cardState = 1;
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2201      	movs	r2, #1
 8000eba:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 8000ec2:	e25d      	b.n	8001380 <GAME_PLAY_Phase_Management+0x6ec>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000ec4:	2102      	movs	r1, #2
 8000ec6:	4837      	ldr	r0, [pc, #220]	; (8000fa4 <GAME_PLAY_Phase_Management+0x310>)
 8000ec8:	f005 f826 	bl	8005f18 <HAL_GPIO_ReadPin>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d106      	bne.n	8000ee0 <GAME_PLAY_Phase_Management+0x24c>
						ptrYugiohCard_src->cardState = 0;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2202      	movs	r2, #2
 8000edc:	701a      	strb	r2, [r3, #0]
			break;
 8000ede:	e24f      	b.n	8001380 <GAME_PLAY_Phase_Management+0x6ec>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000ee0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ee4:	4830      	ldr	r0, [pc, #192]	; (8000fa8 <GAME_PLAY_Phase_Management+0x314>)
 8000ee6:	f005 f817 	bl	8005f18 <HAL_GPIO_ReadPin>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d104      	bne.n	8000efa <GAME_PLAY_Phase_Management+0x266>
						state_game->test = 22;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	2216      	movs	r2, #22
 8000ef4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000ef8:	e242      	b.n	8001380 <GAME_PLAY_Phase_Management+0x6ec>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000efa:	2104      	movs	r1, #4
 8000efc:	4828      	ldr	r0, [pc, #160]	; (8000fa0 <GAME_PLAY_Phase_Management+0x30c>)
 8000efe:	f005 f80b 	bl	8005f18 <HAL_GPIO_ReadPin>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f040 823b 	bne.w	8001380 <GAME_PLAY_Phase_Management+0x6ec>
						state_game->test = 33;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2221      	movs	r2, #33	; 0x21
 8000f0e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000f12:	e235      	b.n	8001380 <GAME_PLAY_Phase_Management+0x6ec>
				else if (state_game->player_state == second_player)
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	f040 8230 	bne.w	8001380 <GAME_PLAY_Phase_Management+0x6ec>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000f20:	2104      	movs	r1, #4
 8000f22:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <GAME_PLAY_Phase_Management+0x30c>)
 8000f24:	f004 fff8 	bl	8005f18 <HAL_GPIO_ReadPin>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d106      	bne.n	8000f3c <GAME_PLAY_Phase_Management+0x2a8>
						ptrYugiohCard_src->cardState = 1;
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2201      	movs	r2, #1
 8000f32:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	2202      	movs	r2, #2
 8000f38:	701a      	strb	r2, [r3, #0]
			break;
 8000f3a:	e221      	b.n	8001380 <GAME_PLAY_Phase_Management+0x6ec>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000f3c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f40:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <GAME_PLAY_Phase_Management+0x314>)
 8000f42:	f004 ffe9 	bl	8005f18 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	f040 8219 	bne.w	8001380 <GAME_PLAY_Phase_Management+0x6ec>
						ptrYugiohCard_src->cardState = 0;
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2200      	movs	r2, #0
 8000f52:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	2202      	movs	r2, #2
 8000f58:	701a      	strb	r2, [r3, #0]
			break;
 8000f5a:	e211      	b.n	8001380 <GAME_PLAY_Phase_Management+0x6ec>
			else if (state_game->action == 2)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	f040 820d 	bne.w	8001380 <GAME_PLAY_Phase_Management+0x6ec>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f68:	6978      	ldr	r0, [r7, #20]
 8000f6a:	f7ff fb8b 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2203      	movs	r2, #3
 8000f72:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2202      	movs	r2, #2
 8000f78:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000f7c:	e200      	b.n	8001380 <GAME_PLAY_Phase_Management+0x6ec>
 8000f7e:	bf00      	nop
 8000f80:	0800bb5c 	.word	0x0800bb5c
 8000f84:	24000164 	.word	0x24000164
 8000f88:	24000008 	.word	0x24000008
 8000f8c:	0800bb60 	.word	0x0800bb60
 8000f90:	0800bb28 	.word	0x0800bb28
 8000f94:	0800bb6c 	.word	0x0800bb6c
 8000f98:	24000160 	.word	0x24000160
 8000f9c:	0800bb7c 	.word	0x0800bb7c
 8000fa0:	58020800 	.word	0x58020800
 8000fa4:	58020400 	.word	0x58020400
 8000fa8:	58021400 	.word	0x58021400
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000fb2:	617b      	str	r3, [r7, #20]

			if (state_game->action == 3)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	f040 81e3 	bne.w	8001384 <GAME_PLAY_Phase_Management+0x6f0>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	785b      	ldrb	r3, [r3, #1]
 8000fc2:	2b03      	cmp	r3, #3
 8000fc4:	d12b      	bne.n	800101e <GAME_PLAY_Phase_Management+0x38a>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	799a      	ldrb	r2, [r3, #6]
 8000fca:	4bb2      	ldr	r3, [pc, #712]	; (8001294 <GAME_PLAY_Phase_Management+0x600>)
 8000fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8000fd0:	0899      	lsrs	r1, r3, #2
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	005b      	lsls	r3, r3, #1
 8000fd6:	440b      	add	r3, r1
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	743b      	strb	r3, [r7, #16]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000fde:	68f9      	ldr	r1, [r7, #12]
 8000fe0:	7c3a      	ldrb	r2, [r7, #16]
 8000fe2:	4613      	mov	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	4413      	add	r3, r2
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	440b      	add	r3, r1
 8000fec:	3304      	adds	r3, #4
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000ff0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff fb46 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fb91 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001006:	6979      	ldr	r1, [r7, #20]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fb3b 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	2200      	movs	r2, #0
 8001018:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 800101c:	e1b2      	b.n	8001384 <GAME_PLAY_Phase_Management+0x6f0>
				else if (ptrYugiohCard_src->cardType == 2)
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d146      	bne.n	80010b4 <GAME_PLAY_Phase_Management+0x420>
					state_game->count_chain = 1;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2201      	movs	r2, #1
 800102a:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->actionPositon == 1){
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	799b      	ldrb	r3, [r3, #6]
 8001030:	2b01      	cmp	r3, #1
 8001032:	d113      	bne.n	800105c <GAME_PLAY_Phase_Management+0x3c8>
						state_game->test = 33;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	2221      	movs	r2, #33	; 0x21
 8001038:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fb6f 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	2204      	movs	r2, #4
 8001048:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
						state_game->MAIN = chaining_main_DEF;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	2206      	movs	r2, #6
 8001056:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800105a:	e193      	b.n	8001384 <GAME_PLAY_Phase_Management+0x6f0>
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	799a      	ldrb	r2, [r3, #6]
 8001060:	4b8c      	ldr	r3, [pc, #560]	; (8001294 <GAME_PLAY_Phase_Management+0x600>)
 8001062:	fba3 1302 	umull	r1, r3, r3, r2
 8001066:	0899      	lsrs	r1, r3, #2
 8001068:	460b      	mov	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	440b      	add	r3, r1
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	747b      	strb	r3, [r7, #17]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	7c7a      	ldrb	r2, [r7, #17]
 8001078:	4613      	mov	r3, r2
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	4413      	add	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	440b      	add	r3, r1
 8001082:	3304      	adds	r3, #4
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001086:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001088:	6978      	ldr	r0, [r7, #20]
 800108a:	f7ff fafb 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fb46 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800109c:	6979      	ldr	r1, [r7, #20]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff faf0 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 80010b2:	e167      	b.n	8001384 <GAME_PLAY_Phase_Management+0x6f0>
				else if (ptrYugiohCard_src->cardType == 1)
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	785b      	ldrb	r3, [r3, #1]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	f040 8163 	bne.w	8001384 <GAME_PLAY_Phase_Management+0x6f0>
					state_game->test = 2;
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	2202      	movs	r2, #2
 80010c2:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
					if (ptrYugiohCard_src->cardLevel < 7)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	78db      	ldrb	r3, [r3, #3]
 80010ca:	2b06      	cmp	r3, #6
 80010cc:	d83c      	bhi.n	8001148 <GAME_PLAY_Phase_Management+0x4b4>
						state_game->test = 1;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	799a      	ldrb	r2, [r3, #6]
 80010da:	4b6e      	ldr	r3, [pc, #440]	; (8001294 <GAME_PLAY_Phase_Management+0x600>)
 80010dc:	fba3 1302 	umull	r1, r3, r3, r2
 80010e0:	0899      	lsrs	r1, r3, #2
 80010e2:	460b      	mov	r3, r1
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	440b      	add	r3, r1
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	74bb      	strb	r3, [r7, #18]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80010ee:	68f9      	ldr	r1, [r7, #12]
 80010f0:	7cba      	ldrb	r2, [r7, #18]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3304      	adds	r3, #4
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001102:	6978      	ldr	r0, [r7, #20]
 8001104:	f7ff fabe 	bl	8000684 <YUGIOH_card_copy>
						ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[idx];
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	7cba      	ldrb	r2, [r7, #18]
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3304      	adds	r3, #4
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800111a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f7ff fab1 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fafc 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001130:	6979      	ldr	r1, [r7, #20]
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff faa6 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001146:	e11d      	b.n	8001384 <GAME_PLAY_Phase_Management+0x6f0>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fae9 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2204      	movs	r2, #4
 8001154:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	2203      	movs	r2, #3
 800115a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800115e:	e111      	b.n	8001384 <GAME_PLAY_Phase_Management+0x6f0>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001166:	617b      	str	r3, [r7, #20]

			if (state_game->action == 4)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b04      	cmp	r3, #4
 800116e:	d106      	bne.n	800117e <GAME_PLAY_Phase_Management+0x4ea>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	461a      	mov	r2, r3
 8001174:	6839      	ldr	r1, [r7, #0]
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f91a 	bl	80013b0 <Player_Reading_Card>
 800117c:	e069      	b.n	8001252 <GAME_PLAY_Phase_Management+0x5be>
			}
			else if (state_game->action == 5)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d106      	bne.n	8001194 <GAME_PLAY_Phase_Management+0x500>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	461a      	mov	r2, r3
 800118a:	6839      	ldr	r1, [r7, #0]
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f90f 	bl	80013b0 <Player_Reading_Card>
 8001192:	e05e      	b.n	8001252 <GAME_PLAY_Phase_Management+0x5be>
			}
			else if (state_game->action == 6)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b06      	cmp	r3, #6
 800119a:	f040 80f5 	bne.w	8001388 <GAME_PLAY_Phase_Management+0x6f4>
			{
				uint8_t monsterflag = 0 ;
 800119e:	2300      	movs	r3, #0
 80011a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	78db      	ldrb	r3, [r3, #3]
 80011b0:	2b04      	cmp	r3, #4
 80011b2:	d804      	bhi.n	80011be <GAME_PLAY_Phase_Management+0x52a>
				{
					monsterflag += 1;
 80011b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011b8:	3301      	adds	r3, #1
 80011ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}
				ptrYugiohCard_dst++;
 80011be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c0:	330c      	adds	r3, #12
 80011c2:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80011c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c6:	78db      	ldrb	r3, [r3, #3]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	d804      	bhi.n	80011d6 <GAME_PLAY_Phase_Management+0x542>
				{
					monsterflag += 1;
 80011cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011d0:	3301      	adds	r3, #1
 80011d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				}

				if (monsterflag == 2)
 80011d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d12b      	bne.n	8001236 <GAME_PLAY_Phase_Management+0x5a2>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	799a      	ldrb	r2, [r3, #6]
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <GAME_PLAY_Phase_Management+0x600>)
 80011e4:	fba3 1302 	umull	r1, r3, r3, r2
 80011e8:	0899      	lsrs	r1, r3, #2
 80011ea:	460b      	mov	r3, r1
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	440b      	add	r3, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	74fb      	strb	r3, [r7, #19]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80011f6:	68f9      	ldr	r1, [r7, #12]
 80011f8:	7cfa      	ldrb	r2, [r7, #19]
 80011fa:	4613      	mov	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	4413      	add	r3, r2
 8001200:	009b      	lsls	r3, r3, #2
 8001202:	440b      	add	r3, r1
 8001204:	3304      	adds	r3, #4
 8001206:	627b      	str	r3, [r7, #36]	; 0x24

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff fa3a 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fa85 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800121e:	6979      	ldr	r1, [r7, #20]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fa2f 	bl	8000684 <YUGIOH_card_copy>



					state_game->action = 0;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8001234:	e00d      	b.n	8001252 <GAME_PLAY_Phase_Management+0x5be>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fa72 	bl	8000722 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800124a:	4619      	mov	r1, r3
 800124c:	4610      	mov	r0, r2
 800124e:	f7ff fa19 	bl	8000684 <YUGIOH_card_copy>

			else

			break;
		case chaining_main_DEF:
			state_game->test = 34;
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2222      	movs	r2, #34	; 0x22
 8001256:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			if(state_game->action == 4)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b04      	cmp	r3, #4
 8001260:	d11c      	bne.n	800129c <GAME_PLAY_Phase_Management+0x608>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	461a      	mov	r2, r3
 8001266:	6839      	ldr	r1, [r7, #0]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f8a1 	bl	80013b0 <Player_Reading_Card>
				state_game->test = 35;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	2223      	movs	r2, #35	; 0x23
 8001272:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 8001276:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <GAME_PLAY_Phase_Management+0x604>)
 800127c:	f004 fe4c 	bl	8005f18 <HAL_GPIO_ReadPin>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	f040 8082 	bne.w	800138c <GAME_PLAY_Phase_Management+0x6f8>
					state_game->MAIN = activate_effect;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2204      	movs	r2, #4
 800128c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
//				ptrYugiohCard_dst++;
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 8001290:	e07c      	b.n	800138c <GAME_PLAY_Phase_Management+0x6f8>
 8001292:	bf00      	nop
 8001294:	aaaaaaab 	.word	0xaaaaaaab
 8001298:	58021400 	.word	0x58021400
			else if ((state_game->action == 5 )){
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b05      	cmp	r3, #5
 80012a2:	d173      	bne.n	800138c <GAME_PLAY_Phase_Management+0x6f8>
				state_game->count_chain += 1;
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	785b      	ldrb	r3, [r3, #1]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_ATK;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2205      	movs	r2, #5
 80012b4:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2204      	movs	r2, #4
 80012bc:	701a      	strb	r2, [r3, #0]
			break;
 80012be:	e065      	b.n	800138c <GAME_PLAY_Phase_Management+0x6f8>
		case chaining_main_ATK:
			if(state_game->action == 4)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d111      	bne.n	80012ec <GAME_PLAY_Phase_Management+0x658>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	461a      	mov	r2, r3
 80012cc:	6839      	ldr	r1, [r7, #0]
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f86e 	bl	80013b0 <Player_Reading_Card>
				if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 80012d4:	2102      	movs	r1, #2
 80012d6:	4835      	ldr	r0, [pc, #212]	; (80013ac <GAME_PLAY_Phase_Management+0x718>)
 80012d8:	f004 fe1e 	bl	8005f18 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d156      	bne.n	8001390 <GAME_PLAY_Phase_Management+0x6fc>
					state_game->MAIN = activate_effect;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2204      	movs	r2, #4
 80012e6:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 80012ea:	e051      	b.n	8001390 <GAME_PLAY_Phase_Management+0x6fc>
			else if ((state_game->action == 5 )){
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	d14d      	bne.n	8001390 <GAME_PLAY_Phase_Management+0x6fc>
				state_game->count_chain += 1;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	785b      	ldrb	r3, [r3, #1]
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_DEF;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2206      	movs	r2, #6
 8001304:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2204      	movs	r2, #4
 800130c:	701a      	strb	r2, [r3, #0]
			break;
 800130e:	e03f      	b.n	8001390 <GAME_PLAY_Phase_Management+0x6fc>
		case activate_effect:
			if(state_game->count_chain%2 == 0){
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	785b      	ldrb	r3, [r3, #1]
 8001314:	f003 0301 	and.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d13a      	bne.n	8001394 <GAME_PLAY_Phase_Management+0x700>
				uint8_t counthing = state_game->count_chain;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	785b      	ldrb	r3, [r3, #1]
 8001322:	767b      	strb	r3, [r7, #25]
				for (int i = 0; i <= counthing; i++) {
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	e023      	b.n	8001372 <GAME_PLAY_Phase_Management+0x6de>
					if(ptrYugiohCard_dst->cardSignature == 11){
 800132a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b0b      	cmp	r3, #11
 8001330:	d109      	bne.n	8001346 <GAME_PLAY_Phase_Management+0x6b2>
						state_game->test = 11;
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	220b      	movs	r2, #11
 8001336:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(&ptrPlayerAtk);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f86c 	bl	800141c <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
 8001344:	e00f      	b.n	8001366 <GAME_PLAY_Phase_Management+0x6d2>
					}
					else if(ptrYugiohCard_dst->cardSignature == 12){
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b0c      	cmp	r3, #12
 800134c:	d10b      	bne.n	8001366 <GAME_PLAY_Phase_Management+0x6d2>
						state_game->test = 12;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	220c      	movs	r2, #12
 8001352:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(&ptrPlayerAtk,&ptrPlayerDef);
 8001356:	f107 0208 	add.w	r2, r7, #8
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f000 f87f 	bl	8001464 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
					}
//					else if()
					ptrYugiohCard_dst++;
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	330c      	adds	r3, #12
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = 0; i <= counthing; i++) {
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	3301      	adds	r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	7e7b      	ldrb	r3, [r7, #25]
 8001374:	69fa      	ldr	r2, [r7, #28]
 8001376:	429a      	cmp	r2, r3
 8001378:	ddd7      	ble.n	800132a <GAME_PLAY_Phase_Management+0x696>
				}
			}
			break;
 800137a:	e00b      	b.n	8001394 <GAME_PLAY_Phase_Management+0x700>
			break;
 800137c:	bf00      	nop
 800137e:	e00f      	b.n	80013a0 <GAME_PLAY_Phase_Management+0x70c>
			break;
 8001380:	bf00      	nop
 8001382:	e00d      	b.n	80013a0 <GAME_PLAY_Phase_Management+0x70c>
			break;
 8001384:	bf00      	nop
 8001386:	e00b      	b.n	80013a0 <GAME_PLAY_Phase_Management+0x70c>
			break;
 8001388:	bf00      	nop
 800138a:	e009      	b.n	80013a0 <GAME_PLAY_Phase_Management+0x70c>
			break;
 800138c:	bf00      	nop
 800138e:	e007      	b.n	80013a0 <GAME_PLAY_Phase_Management+0x70c>
			break;
 8001390:	bf00      	nop
 8001392:	e005      	b.n	80013a0 <GAME_PLAY_Phase_Management+0x70c>
			break;
 8001394:	bf00      	nop
		}
		break;
 8001396:	e003      	b.n	80013a0 <GAME_PLAY_Phase_Management+0x70c>
		case Battle_Phase:
			break;
 8001398:	bf00      	nop
 800139a:	e002      	b.n	80013a2 <GAME_PLAY_Phase_Management+0x70e>
		break;
 800139c:	bf00      	nop
 800139e:	e000      	b.n	80013a2 <GAME_PLAY_Phase_Management+0x70e>
		break;
 80013a0:	bf00      	nop
		case Chain_Phase:
			break;

	}
}
 80013a2:	bf00      	nop
 80013a4:	3728      	adds	r7, #40	; 0x28
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	58020400 	.word	0x58020400

080013b0 <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	60f8      	str	r0, [r7, #12]
 80013b8:	60b9      	str	r1, [r7, #8]
 80013ba:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	3328      	adds	r3, #40	; 0x28
 80013c0:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4613      	mov	r3, r2
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	3328      	adds	r3, #40	; 0x28
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	4413      	add	r3, r2
 80013d6:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	3314      	adds	r3, #20
 80013dc:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80013e4:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	78db      	ldrb	r3, [r3, #3]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d112      	bne.n	8001414 <Player_Reading_Card+0x64>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff f9bc 	bl	800076c <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013f4:	6979      	ldr	r1, [r7, #20]
 80013f6:	69b8      	ldr	r0, [r7, #24]
 80013f8:	f7ff f944 	bl	8000684 <YUGIOH_card_copy>

		RFID_Clear_Card_Bufffer(ptrRFID);
 80013fc:	69f8      	ldr	r0, [r7, #28]
 80013fe:	f7ff f96c 	bl	80006da <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2200      	movs	r2, #0
 8001406:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	701a      	strb	r2, [r3, #0]
	}
}
 8001414:	bf00      	nop
 8001416:	3720      	adds	r7, #32
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 800141c:	b580      	push	{r7, lr}
 800141e:	b088      	sub	sp, #32
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001424:	f107 030c 	add.w	r3, r7, #12
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3328      	adds	r3, #40	; 0x28
 8001434:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001436:	2300      	movs	r3, #0
 8001438:	76fb      	strb	r3, [r7, #27]
 800143a:	e00b      	b.n	8001454 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	69f9      	ldr	r1, [r7, #28]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f91e 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	330c      	adds	r3, #12
 800144c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800144e:	7efb      	ldrb	r3, [r7, #27]
 8001450:	3301      	adds	r3, #1
 8001452:	76fb      	strb	r3, [r7, #27]
 8001454:	7efb      	ldrb	r3, [r7, #27]
 8001456:	2b02      	cmp	r3, #2
 8001458:	d9f0      	bls.n	800143c <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x20>
	}
}
 800145a:	bf00      	nop
 800145c:	bf00      	nop
 800145e:	3720      	adds	r7, #32
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}

08001464 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b088      	sub	sp, #32
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1;
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	3328      	adds	r3, #40	; 0x28
 800147e:	61fb      	str	r3, [r7, #28]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2;
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	3328      	adds	r3, #40	; 0x28
 8001484:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001486:	2300      	movs	r3, #0
 8001488:	75fb      	strb	r3, [r7, #23]
 800148a:	e014      	b.n	80014b6 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x52>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard_player1);
 800148c:	f107 0308 	add.w	r3, r7, #8
 8001490:	69f9      	ldr	r1, [r7, #28]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff f8f6 	bl	8000684 <YUGIOH_card_copy>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard_player2);
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	69b9      	ldr	r1, [r7, #24]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f8f0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard_player1++;
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	330c      	adds	r3, #12
 80014a8:	61fb      	str	r3, [r7, #28]
		ptrYUGIOHCard_player2++;
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	330c      	adds	r3, #12
 80014ae:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80014b0:	7dfb      	ldrb	r3, [r7, #23]
 80014b2:	3301      	adds	r3, #1
 80014b4:	75fb      	strb	r3, [r7, #23]
 80014b6:	7dfb      	ldrb	r3, [r7, #23]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d9e7      	bls.n	800148c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3720      	adds	r7, #32
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
	...

080014c8 <MainGUI>:

void MainGUI(){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af04      	add	r7, sp, #16
    ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80014ce:	4b47      	ldr	r3, [pc, #284]	; (80015ec <MainGUI+0x124>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	9202      	str	r2, [sp, #8]
 80014d4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	9200      	str	r2, [sp, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a43      	ldr	r2, [pc, #268]	; (80015f0 <MainGUI+0x128>)
 80014e2:	2105      	movs	r1, #5
 80014e4:	2005      	movs	r0, #5
 80014e6:	f000 feba 	bl	800225e <ST7735_WriteString1>
    ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <MainGUI+0x124>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	9202      	str	r2, [sp, #8]
 80014f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014f4:	9201      	str	r2, [sp, #4]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	9200      	str	r2, [sp, #0]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a3d      	ldr	r2, [pc, #244]	; (80015f4 <MainGUI+0x12c>)
 80014fe:	2114      	movs	r1, #20
 8001500:	2005      	movs	r0, #5
 8001502:	f000 feac 	bl	800225e <ST7735_WriteString1>
    ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001506:	4b39      	ldr	r3, [pc, #228]	; (80015ec <MainGUI+0x124>)
 8001508:	2200      	movs	r2, #0
 800150a:	9202      	str	r2, [sp, #8]
 800150c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001510:	9201      	str	r2, [sp, #4]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	9200      	str	r2, [sp, #0]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a37      	ldr	r2, [pc, #220]	; (80015f8 <MainGUI+0x130>)
 800151a:	2123      	movs	r1, #35	; 0x23
 800151c:	2005      	movs	r0, #5
 800151e:	f000 fe9e 	bl	800225e <ST7735_WriteString1>
    ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001522:	4b32      	ldr	r3, [pc, #200]	; (80015ec <MainGUI+0x124>)
 8001524:	2200      	movs	r2, #0
 8001526:	9202      	str	r2, [sp, #8]
 8001528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152c:	9201      	str	r2, [sp, #4]
 800152e:	685a      	ldr	r2, [r3, #4]
 8001530:	9200      	str	r2, [sp, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a31      	ldr	r2, [pc, #196]	; (80015fc <MainGUI+0x134>)
 8001536:	2132      	movs	r1, #50	; 0x32
 8001538:	2000      	movs	r0, #0
 800153a:	f000 fe90 	bl	800225e <ST7735_WriteString1>
    ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MainGUI+0x124>)
 8001540:	2200      	movs	r2, #0
 8001542:	9202      	str	r2, [sp, #8]
 8001544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001548:	9201      	str	r2, [sp, #4]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	9200      	str	r2, [sp, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <MainGUI+0x138>)
 8001552:	213c      	movs	r1, #60	; 0x3c
 8001554:	2000      	movs	r0, #0
 8001556:	f000 fe82 	bl	800225e <ST7735_WriteString1>
    ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800155a:	4b24      	ldr	r3, [pc, #144]	; (80015ec <MainGUI+0x124>)
 800155c:	2200      	movs	r2, #0
 800155e:	9202      	str	r2, [sp, #8]
 8001560:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001564:	9201      	str	r2, [sp, #4]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	9200      	str	r2, [sp, #0]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a25      	ldr	r2, [pc, #148]	; (8001604 <MainGUI+0x13c>)
 800156e:	2105      	movs	r1, #5
 8001570:	2005      	movs	r0, #5
 8001572:	f000 fe2a 	bl	80021ca <ST7735_WriteString>
    ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001576:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <MainGUI+0x124>)
 8001578:	2200      	movs	r2, #0
 800157a:	9202      	str	r2, [sp, #8]
 800157c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	9200      	str	r2, [sp, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a1a      	ldr	r2, [pc, #104]	; (80015f4 <MainGUI+0x12c>)
 800158a:	2114      	movs	r1, #20
 800158c:	2005      	movs	r0, #5
 800158e:	f000 fe1c 	bl	80021ca <ST7735_WriteString>
    ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MainGUI+0x124>)
 8001594:	2200      	movs	r2, #0
 8001596:	9202      	str	r2, [sp, #8]
 8001598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800159c:	9201      	str	r2, [sp, #4]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <MainGUI+0x130>)
 80015a6:	2123      	movs	r1, #35	; 0x23
 80015a8:	2005      	movs	r0, #5
 80015aa:	f000 fe0e 	bl	80021ca <ST7735_WriteString>
    ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <MainGUI+0x124>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	9202      	str	r2, [sp, #8]
 80015b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015b8:	9201      	str	r2, [sp, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	9200      	str	r2, [sp, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a0e      	ldr	r2, [pc, #56]	; (80015fc <MainGUI+0x134>)
 80015c2:	2132      	movs	r1, #50	; 0x32
 80015c4:	2000      	movs	r0, #0
 80015c6:	f000 fe00 	bl	80021ca <ST7735_WriteString>
    ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <MainGUI+0x124>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	9202      	str	r2, [sp, #8]
 80015d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015d4:	9201      	str	r2, [sp, #4]
 80015d6:	685a      	ldr	r2, [r3, #4]
 80015d8:	9200      	str	r2, [sp, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a08      	ldr	r2, [pc, #32]	; (8001600 <MainGUI+0x138>)
 80015de:	213c      	movs	r1, #60	; 0x3c
 80015e0:	2000      	movs	r0, #0
 80015e2:	f000 fdf2 	bl	80021ca <ST7735_WriteString>
}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	24000008 	.word	0x24000008
 80015f0:	0800bb2c 	.word	0x0800bb2c
 80015f4:	0800bb88 	.word	0x0800bb88
 80015f8:	0800bb98 	.word	0x0800bb98
 80015fc:	0800bba0 	.word	0x0800bba0
 8001600:	0800bad8 	.word	0x0800bad8
 8001604:	0800bacc 	.word	0x0800bacc

08001608 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800160c:	4b3d      	ldr	r3, [pc, #244]	; (8001704 <SystemInit+0xfc>)
 800160e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001612:	4a3c      	ldr	r2, [pc, #240]	; (8001704 <SystemInit+0xfc>)
 8001614:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001618:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800161c:	4b39      	ldr	r3, [pc, #228]	; (8001704 <SystemInit+0xfc>)
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	4a38      	ldr	r2, [pc, #224]	; (8001704 <SystemInit+0xfc>)
 8001622:	f043 0310 	orr.w	r3, r3, #16
 8001626:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001628:	4b37      	ldr	r3, [pc, #220]	; (8001708 <SystemInit+0x100>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	2b06      	cmp	r3, #6
 8001632:	d807      	bhi.n	8001644 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <SystemInit+0x100>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f023 030f 	bic.w	r3, r3, #15
 800163c:	4a32      	ldr	r2, [pc, #200]	; (8001708 <SystemInit+0x100>)
 800163e:	f043 0307 	orr.w	r3, r3, #7
 8001642:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001644:	4b31      	ldr	r3, [pc, #196]	; (800170c <SystemInit+0x104>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a30      	ldr	r2, [pc, #192]	; (800170c <SystemInit+0x104>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001650:	4b2e      	ldr	r3, [pc, #184]	; (800170c <SystemInit+0x104>)
 8001652:	2200      	movs	r2, #0
 8001654:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <SystemInit+0x104>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	492c      	ldr	r1, [pc, #176]	; (800170c <SystemInit+0x104>)
 800165c:	4b2c      	ldr	r3, [pc, #176]	; (8001710 <SystemInit+0x108>)
 800165e:	4013      	ands	r3, r2
 8001660:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001662:	4b29      	ldr	r3, [pc, #164]	; (8001708 <SystemInit+0x100>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d007      	beq.n	800167e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <SystemInit+0x100>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 030f 	bic.w	r3, r3, #15
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <SystemInit+0x100>)
 8001678:	f043 0307 	orr.w	r3, r3, #7
 800167c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800167e:	4b23      	ldr	r3, [pc, #140]	; (800170c <SystemInit+0x104>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001684:	4b21      	ldr	r3, [pc, #132]	; (800170c <SystemInit+0x104>)
 8001686:	2200      	movs	r2, #0
 8001688:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <SystemInit+0x104>)
 800168c:	2200      	movs	r2, #0
 800168e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001690:	4b1e      	ldr	r3, [pc, #120]	; (800170c <SystemInit+0x104>)
 8001692:	4a20      	ldr	r2, [pc, #128]	; (8001714 <SystemInit+0x10c>)
 8001694:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001696:	4b1d      	ldr	r3, [pc, #116]	; (800170c <SystemInit+0x104>)
 8001698:	4a1f      	ldr	r2, [pc, #124]	; (8001718 <SystemInit+0x110>)
 800169a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800169c:	4b1b      	ldr	r3, [pc, #108]	; (800170c <SystemInit+0x104>)
 800169e:	4a1f      	ldr	r2, [pc, #124]	; (800171c <SystemInit+0x114>)
 80016a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016a2:	4b1a      	ldr	r3, [pc, #104]	; (800170c <SystemInit+0x104>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016a8:	4b18      	ldr	r3, [pc, #96]	; (800170c <SystemInit+0x104>)
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <SystemInit+0x114>)
 80016ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <SystemInit+0x104>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016b4:	4b15      	ldr	r3, [pc, #84]	; (800170c <SystemInit+0x104>)
 80016b6:	4a19      	ldr	r2, [pc, #100]	; (800171c <SystemInit+0x114>)
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016ba:	4b14      	ldr	r3, [pc, #80]	; (800170c <SystemInit+0x104>)
 80016bc:	2200      	movs	r2, #0
 80016be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016c0:	4b12      	ldr	r3, [pc, #72]	; (800170c <SystemInit+0x104>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a11      	ldr	r2, [pc, #68]	; (800170c <SystemInit+0x104>)
 80016c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <SystemInit+0x104>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80016d2:	4b13      	ldr	r3, [pc, #76]	; (8001720 <SystemInit+0x118>)
 80016d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <SystemInit+0x118>)
 80016d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016dc:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <SystemInit+0x11c>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <SystemInit+0x120>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016ea:	d202      	bcs.n	80016f2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <SystemInit+0x124>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80016f2:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <SystemInit+0x128>)
 80016f4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80016f8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00
 8001708:	52002000 	.word	0x52002000
 800170c:	58024400 	.word	0x58024400
 8001710:	eaf6ed7f 	.word	0xeaf6ed7f
 8001714:	02020200 	.word	0x02020200
 8001718:	01ff0000 	.word	0x01ff0000
 800171c:	01010280 	.word	0x01010280
 8001720:	580000c0 	.word	0x580000c0
 8001724:	5c001000 	.word	0x5c001000
 8001728:	ffff0000 	.word	0xffff0000
 800172c:	51008108 	.word	0x51008108
 8001730:	52004000 	.word	0x52004000

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800173a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001740:	bf00      	nop
 8001742:	4b36      	ldr	r3, [pc, #216]	; (800181c <main+0xe8>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <main+0x24>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	1e5a      	subs	r2, r3, #1
 8001752:	607a      	str	r2, [r7, #4]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dcf4      	bgt.n	8001742 <main+0xe>
	if ( timeout < 0 )
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	da01      	bge.n	8001762 <main+0x2e>
	{
		Error_Handler();
 800175e:	f000 fb97 	bl	8001e90 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001762:	f001 f9f9 	bl	8002b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001766:	f000 f861 	bl	800182c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800176a:	f000 f8e3 	bl	8001934 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800176e:	4b2b      	ldr	r3, [pc, #172]	; (800181c <main+0xe8>)
 8001770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001774:	4a29      	ldr	r2, [pc, #164]	; (800181c <main+0xe8>)
 8001776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800177a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <main+0xe8>)
 8001780:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001788:	603b      	str	r3, [r7, #0]
 800178a:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800178c:	2000      	movs	r0, #0
 800178e:	f004 fc0f 	bl	8005fb0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001792:	2100      	movs	r1, #0
 8001794:	2000      	movs	r0, #0
 8001796:	f004 fc25 	bl	8005fe4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800179a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80017a0:	bf00      	nop
 80017a2:	4b1e      	ldr	r3, [pc, #120]	; (800181c <main+0xe8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d104      	bne.n	80017b8 <main+0x84>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	dcf4      	bgt.n	80017a2 <main+0x6e>
	if ( timeout < 0 )
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da01      	bge.n	80017c2 <main+0x8e>
	{
		Error_Handler();
 80017be:	f000 fb67 	bl	8001e90 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017c2:	f000 fa35 	bl	8001c30 <MX_GPIO_Init>
  MX_ETH_Init();
 80017c6:	f000 f8e7 	bl	8001998 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80017ca:	f000 f989 	bl	8001ae0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80017ce:	f000 fa07 	bl	8001be0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017d2:	f000 f9d3 	bl	8001b7c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80017d6:	f000 f92b 	bl	8001a30 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 80017da:	f000 fc61 	bl	80020a0 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 80017de:	2000      	movs	r0, #0
 80017e0:	f000 fe81 	bl	80024e6 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 80017e4:	2000      	movs	r0, #0
 80017e6:	f000 fe6d 	bl	80024c4 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 80017ea:	f001 fa3b 	bl	8002c64 <HAL_GetTick>
 80017ee:	4602      	mov	r2, r0
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <main+0xec>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2bc8      	cmp	r3, #200	; 0xc8
 80017f8:	d9f7      	bls.n	80017ea <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 80017fa:	f001 fa33 	bl	8002c64 <HAL_GetTick>
 80017fe:	4603      	mov	r3, r0
 8001800:	4a07      	ldr	r2, [pc, #28]	; (8001820 <main+0xec>)
 8001802:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001804:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001808:	4806      	ldr	r0, [pc, #24]	; (8001824 <main+0xf0>)
 800180a:	f004 fbb6 	bl	8005f7a <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 800180e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001812:	4905      	ldr	r1, [pc, #20]	; (8001828 <main+0xf4>)
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ffd5 	bl	80007c4 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 800181a:	e7e6      	b.n	80017ea <main+0xb6>
 800181c:	58024400 	.word	0x58024400
 8001820:	24000c98 	.word	0x24000c98
 8001824:	58020400 	.word	0x58020400
 8001828:	24000964 	.word	0x24000964

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b09c      	sub	sp, #112	; 0x70
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001836:	224c      	movs	r2, #76	; 0x4c
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f009 fcc4 	bl	800b1c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	2220      	movs	r2, #32
 8001844:	2100      	movs	r1, #0
 8001846:	4618      	mov	r0, r3
 8001848:	f009 fcbe 	bl	800b1c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800184c:	2004      	movs	r0, #4
 800184e:	f004 fd25 	bl	800629c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b34      	ldr	r3, [pc, #208]	; (8001928 <SystemClock_Config+0xfc>)
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	4a33      	ldr	r2, [pc, #204]	; (8001928 <SystemClock_Config+0xfc>)
 800185c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001860:	6193      	str	r3, [r2, #24]
 8001862:	4b31      	ldr	r3, [pc, #196]	; (8001928 <SystemClock_Config+0xfc>)
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	4b2f      	ldr	r3, [pc, #188]	; (800192c <SystemClock_Config+0x100>)
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	4a2e      	ldr	r2, [pc, #184]	; (800192c <SystemClock_Config+0x100>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001878:	4b2c      	ldr	r3, [pc, #176]	; (800192c <SystemClock_Config+0x100>)
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	603b      	str	r3, [r7, #0]
 8001882:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001884:	bf00      	nop
 8001886:	4b28      	ldr	r3, [pc, #160]	; (8001928 <SystemClock_Config+0xfc>)
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800188e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001892:	d1f8      	bne.n	8001886 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <SystemClock_Config+0x104>)
 8001896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001898:	f023 0303 	bic.w	r3, r3, #3
 800189c:	4a24      	ldr	r2, [pc, #144]	; (8001930 <SystemClock_Config+0x104>)
 800189e:	f043 0302 	orr.w	r3, r3, #2
 80018a2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018a4:	2301      	movs	r3, #1
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ae:	2302      	movs	r3, #2
 80018b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018b2:	2302      	movs	r3, #2
 80018b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018b6:	2301      	movs	r3, #1
 80018b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80018ba:	2378      	movs	r3, #120	; 0x78
 80018bc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80018be:	2302      	movs	r3, #2
 80018c0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018c2:	2302      	movs	r3, #2
 80018c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018c6:	2302      	movs	r3, #2
 80018c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80018ca:	230c      	movs	r3, #12
 80018cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018ce:	2300      	movs	r3, #0
 80018d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018d2:	2300      	movs	r3, #0
 80018d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018da:	4618      	mov	r0, r3
 80018dc:	f004 fd48 	bl	8006370 <HAL_RCC_OscConfig>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80018e6:	f000 fad3 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ea:	233f      	movs	r3, #63	; 0x3f
 80018ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ee:	2303      	movs	r3, #3
 80018f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018f2:	2300      	movs	r3, #0
 80018f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80018f6:	2308      	movs	r3, #8
 80018f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018fa:	2340      	movs	r3, #64	; 0x40
 80018fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018fe:	2340      	movs	r3, #64	; 0x40
 8001900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001906:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001908:	2340      	movs	r3, #64	; 0x40
 800190a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	2104      	movs	r1, #4
 8001910:	4618      	mov	r0, r3
 8001912:	f005 f95b 	bl	8006bcc <HAL_RCC_ClockConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800191c:	f000 fab8 	bl	8001e90 <Error_Handler>
  }
}
 8001920:	bf00      	nop
 8001922:	3770      	adds	r7, #112	; 0x70
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	58024800 	.word	0x58024800
 800192c:	58000400 	.word	0x58000400
 8001930:	58024400 	.word	0x58024400

08001934 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b0b0      	sub	sp, #192	; 0xc0
 8001938:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	22bc      	movs	r2, #188	; 0xbc
 800193e:	2100      	movs	r1, #0
 8001940:	4618      	mov	r0, r3
 8001942:	f009 fc41 	bl	800b1c8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001946:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 800194a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001950:	2318      	movs	r3, #24
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001958:	2304      	movs	r3, #4
 800195a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800195c:	2302      	movs	r3, #2
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001960:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001964:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001966:	2300      	movs	r3, #0
 8001968:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800196a:	2300      	movs	r3, #0
 800196c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800196e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001972:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001974:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001978:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197c:	1d3b      	adds	r3, r7, #4
 800197e:	4618      	mov	r0, r3
 8001980:	f005 fcb0 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800198a:	f000 fa81 	bl	8001e90 <Error_Handler>
  }
}
 800198e:	bf00      	nop
 8001990:	37c0      	adds	r7, #192	; 0xc0
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
	...

08001998 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <MX_ETH_Init+0x80>)
 800199e:	4a1f      	ldr	r2, [pc, #124]	; (8001a1c <MX_ETH_Init+0x84>)
 80019a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80019a2:	4b1f      	ldr	r3, [pc, #124]	; (8001a20 <MX_ETH_Init+0x88>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80019a8:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <MX_ETH_Init+0x88>)
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80019ae:	4b1c      	ldr	r3, [pc, #112]	; (8001a20 <MX_ETH_Init+0x88>)
 80019b0:	22e1      	movs	r2, #225	; 0xe1
 80019b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80019b4:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_ETH_Init+0x88>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80019ba:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_ETH_Init+0x88>)
 80019bc:	2200      	movs	r2, #0
 80019be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_ETH_Init+0x88>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80019c6:	4b14      	ldr	r3, [pc, #80]	; (8001a18 <MX_ETH_Init+0x80>)
 80019c8:	4a15      	ldr	r2, [pc, #84]	; (8001a20 <MX_ETH_Init+0x88>)
 80019ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80019cc:	4b12      	ldr	r3, [pc, #72]	; (8001a18 <MX_ETH_Init+0x80>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80019d2:	4b11      	ldr	r3, [pc, #68]	; (8001a18 <MX_ETH_Init+0x80>)
 80019d4:	4a13      	ldr	r2, [pc, #76]	; (8001a24 <MX_ETH_Init+0x8c>)
 80019d6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80019d8:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <MX_ETH_Init+0x80>)
 80019da:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <MX_ETH_Init+0x90>)
 80019dc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80019de:	4b0e      	ldr	r3, [pc, #56]	; (8001a18 <MX_ETH_Init+0x80>)
 80019e0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019e4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80019e6:	480c      	ldr	r0, [pc, #48]	; (8001a18 <MX_ETH_Init+0x80>)
 80019e8:	f003 fcc2 	bl	8005370 <HAL_ETH_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80019f2:	f000 fa4d 	bl	8001e90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80019f6:	2238      	movs	r2, #56	; 0x38
 80019f8:	2100      	movs	r1, #0
 80019fa:	480c      	ldr	r0, [pc, #48]	; (8001a2c <MX_ETH_Init+0x94>)
 80019fc:	f009 fbe4 	bl	800b1c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_ETH_Init+0x94>)
 8001a02:	2221      	movs	r2, #33	; 0x21
 8001a04:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_ETH_Init+0x94>)
 8001a08:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a0c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_ETH_Init+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	240001a0 	.word	0x240001a0
 8001a1c:	40028000 	.word	0x40028000
 8001a20:	24000c9c 	.word	0x24000c9c
 8001a24:	240000e4 	.word	0x240000e4
 8001a28:	24000084 	.word	0x24000084
 8001a2c:	24000168 	.word	0x24000168

08001a30 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a36:	4a29      	ldr	r2, [pc, #164]	; (8001adc <MX_SPI3_Init+0xac>)
 8001a38:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a3a:	4b27      	ldr	r3, [pc, #156]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a3c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001a40:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001a42:	4b25      	ldr	r3, [pc, #148]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a48:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a4c:	2207      	movs	r2, #7
 8001a4e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a50:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a5e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a62:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a6a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a6c:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a78:	4b17      	ldr	r3, [pc, #92]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001a7e:	4b16      	ldr	r3, [pc, #88]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a84:	4b14      	ldr	r3, [pc, #80]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a8a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a8c:	4b12      	ldr	r3, [pc, #72]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a92:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ab0:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ab6:	4b08      	ldr	r3, [pc, #32]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ac2:	4805      	ldr	r0, [pc, #20]	; (8001ad8 <MX_SPI3_Init+0xa8>)
 8001ac4:	f006 ff76 	bl	80089b4 <HAL_SPI_Init>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001ace:	f000 f9df 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	24000250 	.word	0x24000250
 8001adc:	40003c00 	.word	0x40003c00

08001ae0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <MX_USART3_UART_Init+0x94>)
 8001ae8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001aec:	4a22      	ldr	r2, [pc, #136]	; (8001b78 <MX_USART3_UART_Init+0x98>)
 8001aee:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001af6:	4b1e      	ldr	r3, [pc, #120]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b02:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b04:	220c      	movs	r2, #12
 8001b06:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b08:	4b19      	ldr	r3, [pc, #100]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b26:	4812      	ldr	r0, [pc, #72]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b28:	f007 fb25 	bl	8009176 <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001b32:	f000 f9ad 	bl	8001e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b36:	2100      	movs	r1, #0
 8001b38:	480d      	ldr	r0, [pc, #52]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b3a:	f008 ff47 	bl	800a9cc <HAL_UARTEx_SetTxFifoThreshold>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001b44:	f000 f9a4 	bl	8001e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b48:	2100      	movs	r1, #0
 8001b4a:	4809      	ldr	r0, [pc, #36]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b4c:	f008 ff7c 	bl	800aa48 <HAL_UARTEx_SetRxFifoThreshold>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001b56:	f000 f99b 	bl	8001e90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_USART3_UART_Init+0x90>)
 8001b5c:	f008 fefd 	bl	800a95a <HAL_UARTEx_DisableFifoMode>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d001      	beq.n	8001b6a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001b66:	f000 f993 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	240002d8 	.word	0x240002d8
 8001b74:	40004800 	.word	0x40004800
 8001b78:	0005dc00 	.word	0x0005dc00

08001b7c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b80:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b82:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001b84:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001b86:	4b14      	ldr	r3, [pc, #80]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b88:	2209      	movs	r2, #9
 8001b8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b8e:	2202      	movs	r2, #2
 8001b90:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b92:	4b11      	ldr	r3, [pc, #68]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b98:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001b9a:	2202      	movs	r2, #2
 8001b9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ba4:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001baa:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001bb6:	4b08      	ldr	r3, [pc, #32]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001bc2:	4805      	ldr	r0, [pc, #20]	; (8001bd8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001bc4:	f004 fa22 	bl	800600c <HAL_PCD_Init>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001bce:	f000 f95f 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	24000458 	.word	0x24000458
 8001bdc:	40080000 	.word	0x40080000

08001be0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <MX_DMA_Init+0x4c>)
 8001be8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bec:	4a0f      	ldr	r2, [pc, #60]	; (8001c2c <MX_DMA_Init+0x4c>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <MX_DMA_Init+0x4c>)
 8001bf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	200c      	movs	r0, #12
 8001c0a:	f001 f956 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c0e:	200c      	movs	r0, #12
 8001c10:	f001 f96d 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	200f      	movs	r0, #15
 8001c1a:	f001 f94e 	bl	8002eba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001c1e:	200f      	movs	r0, #15
 8001c20:	f001 f965 	bl	8002eee <HAL_NVIC_EnableIRQ>

}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	58024400 	.word	0x58024400

08001c30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08e      	sub	sp, #56	; 0x38
 8001c34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	605a      	str	r2, [r3, #4]
 8001c40:	609a      	str	r2, [r3, #8]
 8001c42:	60da      	str	r2, [r3, #12]
 8001c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c46:	4b8a      	ldr	r3, [pc, #552]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c4c:	4a88      	ldr	r2, [pc, #544]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c4e:	f043 0304 	orr.w	r3, r3, #4
 8001c52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c56:	4b86      	ldr	r3, [pc, #536]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c5c:	f003 0304 	and.w	r3, r3, #4
 8001c60:	623b      	str	r3, [r7, #32]
 8001c62:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c64:	4b82      	ldr	r3, [pc, #520]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c6a:	4a81      	ldr	r2, [pc, #516]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c74:	4b7e      	ldr	r3, [pc, #504]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c7e:	61fb      	str	r3, [r7, #28]
 8001c80:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c88:	4a79      	ldr	r2, [pc, #484]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c92:	4b77      	ldr	r3, [pc, #476]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca0:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ca6:	4a72      	ldr	r2, [pc, #456]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cb0:	4b6f      	ldr	r3, [pc, #444]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cbe:	4b6c      	ldr	r3, [pc, #432]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc4:	4a6a      	ldr	r2, [pc, #424]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001cc6:	f043 0320 	orr.w	r3, r3, #32
 8001cca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cce:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd4:	f003 0320 	and.w	r3, r3, #32
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cdc:	4b64      	ldr	r3, [pc, #400]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce2:	4a63      	ldr	r2, [pc, #396]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cec:	4b60      	ldr	r3, [pc, #384]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d00:	4a5b      	ldr	r2, [pc, #364]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d0a:	4b59      	ldr	r3, [pc, #356]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d18:	4b55      	ldr	r3, [pc, #340]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1e:	4a54      	ldr	r2, [pc, #336]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001d20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d28:	4b51      	ldr	r3, [pc, #324]	; (8001e70 <MX_GPIO_Init+0x240>)
 8001d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8001d36:	2201      	movs	r2, #1
 8001d38:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001d3c:	484d      	ldr	r0, [pc, #308]	; (8001e74 <MX_GPIO_Init+0x244>)
 8001d3e:	f004 f903 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8001d42:	2200      	movs	r2, #0
 8001d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d48:	484a      	ldr	r0, [pc, #296]	; (8001e74 <MX_GPIO_Init+0x244>)
 8001d4a:	f004 f8fd 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d54:	4848      	ldr	r0, [pc, #288]	; (8001e78 <MX_GPIO_Init+0x248>)
 8001d56:	f004 f8f7 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d60:	4846      	ldr	r0, [pc, #280]	; (8001e7c <MX_GPIO_Init+0x24c>)
 8001d62:	f004 f8f1 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001d66:	2201      	movs	r2, #1
 8001d68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6c:	4844      	ldr	r0, [pc, #272]	; (8001e80 <MX_GPIO_Init+0x250>)
 8001d6e:	f004 f8eb 	bl	8005f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8001d72:	230d      	movs	r3, #13
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d82:	4619      	mov	r1, r3
 8001d84:	483f      	ldr	r0, [pc, #252]	; (8001e84 <MX_GPIO_Init+0x254>)
 8001d86:	f003 ff17 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8001d8a:	2308      	movs	r3, #8
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	483a      	ldr	r0, [pc, #232]	; (8001e88 <MX_GPIO_Init+0x258>)
 8001d9e:	f003 ff0b 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8001da2:	2302      	movs	r3, #2
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da6:	2300      	movs	r3, #0
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	4830      	ldr	r0, [pc, #192]	; (8001e78 <MX_GPIO_Init+0x248>)
 8001db6:	f003 feff 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8001dba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8001dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dcc:	4619      	mov	r1, r3
 8001dce:	482f      	ldr	r0, [pc, #188]	; (8001e8c <MX_GPIO_Init+0x25c>)
 8001dd0:	f003 fef2 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8001dd4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dea:	4619      	mov	r1, r3
 8001dec:	4821      	ldr	r0, [pc, #132]	; (8001e74 <MX_GPIO_Init+0x244>)
 8001dee:	f003 fee3 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001df2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	481b      	ldr	r0, [pc, #108]	; (8001e78 <MX_GPIO_Init+0x248>)
 8001e0c:	f003 fed4 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001e10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e16:	2301      	movs	r3, #1
 8001e18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e26:	4619      	mov	r1, r3
 8001e28:	4814      	ldr	r0, [pc, #80]	; (8001e7c <MX_GPIO_Init+0x24c>)
 8001e2a:	f003 fec5 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001e2e:	2380      	movs	r3, #128	; 0x80
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e40:	4619      	mov	r1, r3
 8001e42:	480f      	ldr	r0, [pc, #60]	; (8001e80 <MX_GPIO_Init+0x250>)
 8001e44:	f003 feb8 	bl	8005bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001e48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4807      	ldr	r0, [pc, #28]	; (8001e80 <MX_GPIO_Init+0x250>)
 8001e62:	f003 fea9 	bl	8005bb8 <HAL_GPIO_Init>

}
 8001e66:	bf00      	nop
 8001e68:	3738      	adds	r7, #56	; 0x38
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	58024400 	.word	0x58024400
 8001e74:	58021000 	.word	0x58021000
 8001e78:	58020400 	.word	0x58020400
 8001e7c:	58020c00 	.word	0x58020c00
 8001e80:	58021800 	.word	0x58021800
 8001e84:	58020800 	.word	0x58020800
 8001e88:	58020000 	.word	0x58020000
 8001e8c:	58021400 	.word	0x58021400

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001e98:	e7fe      	b.n	8001e98 <Error_Handler+0x8>
	...

08001e9c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea6:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <ST7735_Select+0x14>)
 8001ea8:	f004 f84e 	bl	8005f48 <HAL_GPIO_WritePin>
}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	58021000 	.word	0x58021000

08001eb4 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ebe:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <ST7735_Unselect+0x14>)
 8001ec0:	f004 f842 	bl	8005f48 <HAL_GPIO_WritePin>
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	58021000 	.word	0x58021000

08001ecc <ST7735_Select1>:
static void ST7735_Select1() {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ed6:	4802      	ldr	r0, [pc, #8]	; (8001ee0 <ST7735_Select1+0x14>)
 8001ed8:	f004 f836 	bl	8005f48 <HAL_GPIO_WritePin>
}
 8001edc:	bf00      	nop
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	58021000 	.word	0x58021000

08001ee4 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eee:	4802      	ldr	r0, [pc, #8]	; (8001ef8 <ST7735_Unselect1+0x14>)
 8001ef0:	f004 f82a 	bl	8005f48 <HAL_GPIO_WritePin>
}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	58021000 	.word	0x58021000

08001efc <ST7735_Reset>:

static void ST7735_Reset() {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f06:	4807      	ldr	r0, [pc, #28]	; (8001f24 <ST7735_Reset+0x28>)
 8001f08:	f004 f81e 	bl	8005f48 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001f0c:	2005      	movs	r0, #5
 8001f0e:	f000 feb5 	bl	8002c7c <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001f12:	2201      	movs	r2, #1
 8001f14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f18:	4802      	ldr	r0, [pc, #8]	; (8001f24 <ST7735_Reset+0x28>)
 8001f1a:	f004 f815 	bl	8005f48 <HAL_GPIO_WritePin>
}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	58021000 	.word	0x58021000

08001f28 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001f32:	2200      	movs	r2, #0
 8001f34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f38:	4806      	ldr	r0, [pc, #24]	; (8001f54 <ST7735_WriteCommand+0x2c>)
 8001f3a:	f004 f805 	bl	8005f48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001f3e:	1df9      	adds	r1, r7, #7
 8001f40:	f04f 33ff 	mov.w	r3, #4294967295
 8001f44:	2201      	movs	r2, #1
 8001f46:	4804      	ldr	r0, [pc, #16]	; (8001f58 <ST7735_WriteCommand+0x30>)
 8001f48:	f006 fe3a 	bl	8008bc0 <HAL_SPI_Transmit>
}
 8001f4c:	bf00      	nop
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	58021800 	.word	0x58021800
 8001f58:	24000250 	.word	0x24000250

08001f5c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4807      	ldr	r0, [pc, #28]	; (8001f8c <ST7735_WriteData+0x30>)
 8001f6e:	f003 ffeb 	bl	8005f48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4804      	ldr	r0, [pc, #16]	; (8001f90 <ST7735_WriteData+0x34>)
 8001f7e:	f006 fe1f 	bl	8008bc0 <HAL_SPI_Transmit>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	58021800 	.word	0x58021800
 8001f90:	24000250 	.word	0x24000250

08001f94 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	1c5a      	adds	r2, r3, #1
 8001fa0:	607a      	str	r2, [r7, #4]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001fa6:	e034      	b.n	8002012 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	1c5a      	adds	r2, r3, #1
 8001fac:	607a      	str	r2, [r7, #4]
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ffb7 	bl	8001f28 <ST7735_WriteCommand>

        numArgs = *addr++;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001fc4:	7abb      	ldrb	r3, [r7, #10]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fcc:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001fce:	7abb      	ldrb	r3, [r7, #10]
 8001fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fd4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8001fd6:	7abb      	ldrb	r3, [r7, #10]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001fdc:	7abb      	ldrb	r3, [r7, #10]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffbb 	bl	8001f5c <ST7735_WriteData>
            addr += numArgs;
 8001fe6:	7abb      	ldrb	r3, [r7, #10]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001fee:	89bb      	ldrh	r3, [r7, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1c5a      	adds	r2, r3, #1
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001ffe:	89bb      	ldrh	r3, [r7, #12]
 8002000:	2bff      	cmp	r3, #255	; 0xff
 8002002:	d102      	bne.n	800200a <ST7735_ExecuteCommandList+0x76>
 8002004:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002008:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800200a:	89bb      	ldrh	r3, [r7, #12]
 800200c:	4618      	mov	r0, r3
 800200e:	f000 fe35 	bl	8002c7c <HAL_Delay>
    while(numCommands--) {
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	1e5a      	subs	r2, r3, #1
 8002016:	73fa      	strb	r2, [r7, #15]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d1c5      	bne.n	8001fa8 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3710      	adds	r7, #16
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002026:	b590      	push	{r4, r7, lr}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	4604      	mov	r4, r0
 800202e:	4608      	mov	r0, r1
 8002030:	4611      	mov	r1, r2
 8002032:	461a      	mov	r2, r3
 8002034:	4623      	mov	r3, r4
 8002036:	71fb      	strb	r3, [r7, #7]
 8002038:	4603      	mov	r3, r0
 800203a:	71bb      	strb	r3, [r7, #6]
 800203c:	460b      	mov	r3, r1
 800203e:	717b      	strb	r3, [r7, #5]
 8002040:	4613      	mov	r3, r2
 8002042:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002044:	202a      	movs	r0, #42	; 0x2a
 8002046:	f7ff ff6f 	bl	8001f28 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800204a:	2300      	movs	r3, #0
 800204c:	733b      	strb	r3, [r7, #12]
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	3302      	adds	r3, #2
 8002052:	b2db      	uxtb	r3, r3
 8002054:	737b      	strb	r3, [r7, #13]
 8002056:	2300      	movs	r3, #0
 8002058:	73bb      	strb	r3, [r7, #14]
 800205a:	797b      	ldrb	r3, [r7, #5]
 800205c:	3302      	adds	r3, #2
 800205e:	b2db      	uxtb	r3, r3
 8002060:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	2104      	movs	r1, #4
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff ff77 	bl	8001f5c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 800206e:	202b      	movs	r0, #43	; 0x2b
 8002070:	f7ff ff5a 	bl	8001f28 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	3301      	adds	r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 800207c:	793b      	ldrb	r3, [r7, #4]
 800207e:	3301      	adds	r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2104      	movs	r1, #4
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff ff66 	bl	8001f5c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8002090:	202c      	movs	r0, #44	; 0x2c
 8002092:	f7ff ff49 	bl	8001f28 <ST7735_WriteCommand>
}
 8002096:	bf00      	nop
 8002098:	3714      	adds	r7, #20
 800209a:	46bd      	mov	sp, r7
 800209c:	bd90      	pop	{r4, r7, pc}
	...

080020a0 <ST7735_Init>:

void ST7735_Init() {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
    ST7735_Select();
 80020a4:	f7ff fefa 	bl	8001e9c <ST7735_Select>
    ST7735_Select1();
 80020a8:	f7ff ff10 	bl	8001ecc <ST7735_Select1>
    ST7735_Reset();
 80020ac:	f7ff ff26 	bl	8001efc <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80020b0:	4807      	ldr	r0, [pc, #28]	; (80020d0 <ST7735_Init+0x30>)
 80020b2:	f7ff ff6f 	bl	8001f94 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80020b6:	4807      	ldr	r0, [pc, #28]	; (80020d4 <ST7735_Init+0x34>)
 80020b8:	f7ff ff6c 	bl	8001f94 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80020bc:	4806      	ldr	r0, [pc, #24]	; (80020d8 <ST7735_Init+0x38>)
 80020be:	f7ff ff69 	bl	8001f94 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80020c2:	f7ff fef7 	bl	8001eb4 <ST7735_Unselect>
    ST7735_Unselect1();
 80020c6:	f7ff ff0d 	bl	8001ee4 <ST7735_Unselect1>
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	0800d08c 	.word	0x0800d08c
 80020d4:	0800d0c8 	.word	0x0800d0c8
 80020d8:	0800d0d8 	.word	0x0800d0d8

080020dc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80020dc:	b082      	sub	sp, #8
 80020de:	b590      	push	{r4, r7, lr}
 80020e0:	b089      	sub	sp, #36	; 0x24
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	637b      	str	r3, [r7, #52]	; 0x34
 80020e6:	4603      	mov	r3, r0
 80020e8:	80fb      	strh	r3, [r7, #6]
 80020ea:	460b      	mov	r3, r1
 80020ec:	80bb      	strh	r3, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80020f2:	88fb      	ldrh	r3, [r7, #6]
 80020f4:	b2d8      	uxtb	r0, r3
 80020f6:	88bb      	ldrh	r3, [r7, #4]
 80020f8:	b2d9      	uxtb	r1, r3
 80020fa:	88fb      	ldrh	r3, [r7, #6]
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002102:	4413      	add	r3, r2
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3b01      	subs	r3, #1
 8002108:	b2dc      	uxtb	r4, r3
 800210a:	88bb      	ldrh	r3, [r7, #4]
 800210c:	b2da      	uxtb	r2, r3
 800210e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002112:	4413      	add	r3, r2
 8002114:	b2db      	uxtb	r3, r3
 8002116:	3b01      	subs	r3, #1
 8002118:	b2db      	uxtb	r3, r3
 800211a:	4622      	mov	r2, r4
 800211c:	f7ff ff83 	bl	8002026 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002120:	2300      	movs	r3, #0
 8002122:	61fb      	str	r3, [r7, #28]
 8002124:	e043      	b.n	80021ae <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002128:	78fb      	ldrb	r3, [r7, #3]
 800212a:	3b20      	subs	r3, #32
 800212c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002130:	fb01 f303 	mul.w	r3, r1, r3
 8002134:	4619      	mov	r1, r3
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	440b      	add	r3, r1
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4413      	add	r3, r2
 800213e:	881b      	ldrh	r3, [r3, #0]
 8002140:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
 8002146:	e029      	b.n	800219c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00e      	beq.n	8002176 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8002158:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b29b      	uxth	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	743b      	strb	r3, [r7, #16]
 8002162:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002164:	b2db      	uxtb	r3, r3
 8002166:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2102      	movs	r1, #2
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fef4 	bl	8001f5c <ST7735_WriteData>
 8002174:	e00f      	b.n	8002196 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8002176:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	b29b      	uxth	r3, r3
 800217e:	b2db      	uxtb	r3, r3
 8002180:	733b      	strb	r3, [r7, #12]
 8002182:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002186:	b2db      	uxtb	r3, r3
 8002188:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800218a:	f107 030c 	add.w	r3, r7, #12
 800218e:	2102      	movs	r1, #2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fee3 	bl	8001f5c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3301      	adds	r3, #1
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80021a0:	461a      	mov	r2, r3
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d3cf      	bcc.n	8002148 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	3301      	adds	r3, #1
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80021b2:	461a      	mov	r2, r3
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d3b5      	bcc.n	8002126 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80021ba:	bf00      	nop
 80021bc:	bf00      	nop
 80021be:	3724      	adds	r7, #36	; 0x24
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80021c6:	b002      	add	sp, #8
 80021c8:	4770      	bx	lr

080021ca <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80021ca:	b082      	sub	sp, #8
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af04      	add	r7, sp, #16
 80021d2:	603a      	str	r2, [r7, #0]
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
 80021da:	460b      	mov	r3, r1
 80021dc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80021de:	f7ff fe5d 	bl	8001e9c <ST7735_Select>

    while(*str) {
 80021e2:	e02d      	b.n	8002240 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80021e4:	88fb      	ldrh	r3, [r7, #6]
 80021e6:	7d3a      	ldrb	r2, [r7, #20]
 80021e8:	4413      	add	r3, r2
 80021ea:	2b7f      	cmp	r3, #127	; 0x7f
 80021ec:	dd13      	ble.n	8002216 <ST7735_WriteString+0x4c>
            x = 0;
 80021ee:	2300      	movs	r3, #0
 80021f0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80021f2:	7d7b      	ldrb	r3, [r7, #21]
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	88bb      	ldrh	r3, [r7, #4]
 80021f8:	4413      	add	r3, r2
 80021fa:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80021fc:	88bb      	ldrh	r3, [r7, #4]
 80021fe:	7d7a      	ldrb	r2, [r7, #21]
 8002200:	4413      	add	r3, r2
 8002202:	2b7f      	cmp	r3, #127	; 0x7f
 8002204:	dc21      	bgt.n	800224a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b20      	cmp	r3, #32
 800220c:	d103      	bne.n	8002216 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	3301      	adds	r3, #1
 8002212:	603b      	str	r3, [r7, #0]
                continue;
 8002214:	e014      	b.n	8002240 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	781a      	ldrb	r2, [r3, #0]
 800221a:	88b9      	ldrh	r1, [r7, #4]
 800221c:	88f8      	ldrh	r0, [r7, #6]
 800221e:	8c3b      	ldrh	r3, [r7, #32]
 8002220:	9302      	str	r3, [sp, #8]
 8002222:	8bbb      	ldrh	r3, [r7, #28]
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f7ff ff56 	bl	80020dc <ST7735_WriteChar>
        x += font.width;
 8002230:	7d3b      	ldrb	r3, [r7, #20]
 8002232:	b29a      	uxth	r2, r3
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	4413      	add	r3, r2
 8002238:	80fb      	strh	r3, [r7, #6]
        str++;
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	3301      	adds	r3, #1
 800223e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1cd      	bne.n	80021e4 <ST7735_WriteString+0x1a>
 8002248:	e000      	b.n	800224c <ST7735_WriteString+0x82>
                break;
 800224a:	bf00      	nop
    }

    ST7735_Unselect();
 800224c:	f7ff fe32 	bl	8001eb4 <ST7735_Unselect>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800225a:	b002      	add	sp, #8
 800225c:	4770      	bx	lr

0800225e <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800225e:	b082      	sub	sp, #8
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af04      	add	r7, sp, #16
 8002266:	603a      	str	r2, [r7, #0]
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	4603      	mov	r3, r0
 800226c:	80fb      	strh	r3, [r7, #6]
 800226e:	460b      	mov	r3, r1
 8002270:	80bb      	strh	r3, [r7, #4]
    ST7735_Select1();
 8002272:	f7ff fe2b 	bl	8001ecc <ST7735_Select1>

    while(*str) {
 8002276:	e02d      	b.n	80022d4 <ST7735_WriteString1+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	7d3a      	ldrb	r2, [r7, #20]
 800227c:	4413      	add	r3, r2
 800227e:	2b7f      	cmp	r3, #127	; 0x7f
 8002280:	dd13      	ble.n	80022aa <ST7735_WriteString1+0x4c>
            x = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002286:	7d7b      	ldrb	r3, [r7, #21]
 8002288:	b29a      	uxth	r2, r3
 800228a:	88bb      	ldrh	r3, [r7, #4]
 800228c:	4413      	add	r3, r2
 800228e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002290:	88bb      	ldrh	r3, [r7, #4]
 8002292:	7d7a      	ldrb	r2, [r7, #21]
 8002294:	4413      	add	r3, r2
 8002296:	2b7f      	cmp	r3, #127	; 0x7f
 8002298:	dc21      	bgt.n	80022de <ST7735_WriteString1+0x80>
                break;
            }

            if(*str == ' ') {
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d103      	bne.n	80022aa <ST7735_WriteString1+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	3301      	adds	r3, #1
 80022a6:	603b      	str	r3, [r7, #0]
                continue;
 80022a8:	e014      	b.n	80022d4 <ST7735_WriteString1+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	88b9      	ldrh	r1, [r7, #4]
 80022b0:	88f8      	ldrh	r0, [r7, #6]
 80022b2:	8c3b      	ldrh	r3, [r7, #32]
 80022b4:	9302      	str	r3, [sp, #8]
 80022b6:	8bbb      	ldrh	r3, [r7, #28]
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	f7ff ff0c 	bl	80020dc <ST7735_WriteChar>
        x += font.width;
 80022c4:	7d3b      	ldrb	r3, [r7, #20]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	88fb      	ldrh	r3, [r7, #6]
 80022ca:	4413      	add	r3, r2
 80022cc:	80fb      	strh	r3, [r7, #6]
        str++;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	603b      	str	r3, [r7, #0]
    while(*str) {
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1cd      	bne.n	8002278 <ST7735_WriteString1+0x1a>
 80022dc:	e000      	b.n	80022e0 <ST7735_WriteString1+0x82>
                break;
 80022de:	bf00      	nop
    }

    ST7735_Unselect1();
 80022e0:	f7ff fe00 	bl	8001ee4 <ST7735_Unselect1>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022ee:	b002      	add	sp, #8
 80022f0:	4770      	bx	lr
	...

080022f4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4604      	mov	r4, r0
 80022fc:	4608      	mov	r0, r1
 80022fe:	4611      	mov	r1, r2
 8002300:	461a      	mov	r2, r3
 8002302:	4623      	mov	r3, r4
 8002304:	80fb      	strh	r3, [r7, #6]
 8002306:	4603      	mov	r3, r0
 8002308:	80bb      	strh	r3, [r7, #4]
 800230a:	460b      	mov	r3, r1
 800230c:	807b      	strh	r3, [r7, #2]
 800230e:	4613      	mov	r3, r2
 8002310:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	2b7f      	cmp	r3, #127	; 0x7f
 8002316:	d858      	bhi.n	80023ca <ST7735_FillRectangle+0xd6>
 8002318:	88bb      	ldrh	r3, [r7, #4]
 800231a:	2b7f      	cmp	r3, #127	; 0x7f
 800231c:	d855      	bhi.n	80023ca <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	887b      	ldrh	r3, [r7, #2]
 8002322:	4413      	add	r3, r2
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	dd03      	ble.n	8002330 <ST7735_FillRectangle+0x3c>
 8002328:	88fb      	ldrh	r3, [r7, #6]
 800232a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800232e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002330:	88ba      	ldrh	r2, [r7, #4]
 8002332:	883b      	ldrh	r3, [r7, #0]
 8002334:	4413      	add	r3, r2
 8002336:	2b80      	cmp	r3, #128	; 0x80
 8002338:	dd03      	ble.n	8002342 <ST7735_FillRectangle+0x4e>
 800233a:	88bb      	ldrh	r3, [r7, #4]
 800233c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002340:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002342:	f7ff fdab 	bl	8001e9c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2d8      	uxtb	r0, r3
 800234a:	88bb      	ldrh	r3, [r7, #4]
 800234c:	b2d9      	uxtb	r1, r3
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	b2da      	uxtb	r2, r3
 8002352:	887b      	ldrh	r3, [r7, #2]
 8002354:	b2db      	uxtb	r3, r3
 8002356:	4413      	add	r3, r2
 8002358:	b2db      	uxtb	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b2dc      	uxtb	r4, r3
 800235e:	88bb      	ldrh	r3, [r7, #4]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	883b      	ldrh	r3, [r7, #0]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	4413      	add	r3, r2
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3b01      	subs	r3, #1
 800236c:	b2db      	uxtb	r3, r3
 800236e:	4622      	mov	r2, r4
 8002370:	f7ff fe59 	bl	8002026 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002374:	8c3b      	ldrh	r3, [r7, #32]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	b29b      	uxth	r3, r3
 800237a:	b2db      	uxtb	r3, r3
 800237c:	733b      	strb	r3, [r7, #12]
 800237e:	8c3b      	ldrh	r3, [r7, #32]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8002384:	2201      	movs	r2, #1
 8002386:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800238a:	4812      	ldr	r0, [pc, #72]	; (80023d4 <ST7735_FillRectangle+0xe0>)
 800238c:	f003 fddc 	bl	8005f48 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002390:	883b      	ldrh	r3, [r7, #0]
 8002392:	80bb      	strh	r3, [r7, #4]
 8002394:	e013      	b.n	80023be <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8002396:	887b      	ldrh	r3, [r7, #2]
 8002398:	80fb      	strh	r3, [r7, #6]
 800239a:	e00a      	b.n	80023b2 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800239c:	f107 010c 	add.w	r1, r7, #12
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	2202      	movs	r2, #2
 80023a6:	480c      	ldr	r0, [pc, #48]	; (80023d8 <ST7735_FillRectangle+0xe4>)
 80023a8:	f006 fc0a 	bl	8008bc0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	3b01      	subs	r3, #1
 80023b0:	80fb      	strh	r3, [r7, #6]
 80023b2:	88fb      	ldrh	r3, [r7, #6]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f1      	bne.n	800239c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80023b8:	88bb      	ldrh	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	80bb      	strh	r3, [r7, #4]
 80023be:	88bb      	ldrh	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1e8      	bne.n	8002396 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80023c4:	f7ff fd76 	bl	8001eb4 <ST7735_Unselect>
 80023c8:	e000      	b.n	80023cc <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80023ca:	bf00      	nop
}
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	58021800 	.word	0x58021800
 80023d8:	24000250 	.word	0x24000250

080023dc <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4604      	mov	r4, r0
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	80fb      	strh	r3, [r7, #6]
 80023ee:	4603      	mov	r3, r0
 80023f0:	80bb      	strh	r3, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]
 80023f6:	4613      	mov	r3, r2
 80023f8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80023fa:	88fb      	ldrh	r3, [r7, #6]
 80023fc:	2b7f      	cmp	r3, #127	; 0x7f
 80023fe:	d858      	bhi.n	80024b2 <ST7735_FillRectangle1+0xd6>
 8002400:	88bb      	ldrh	r3, [r7, #4]
 8002402:	2b7f      	cmp	r3, #127	; 0x7f
 8002404:	d855      	bhi.n	80024b2 <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002406:	88fa      	ldrh	r2, [r7, #6]
 8002408:	887b      	ldrh	r3, [r7, #2]
 800240a:	4413      	add	r3, r2
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	dd03      	ble.n	8002418 <ST7735_FillRectangle1+0x3c>
 8002410:	88fb      	ldrh	r3, [r7, #6]
 8002412:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002416:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002418:	88ba      	ldrh	r2, [r7, #4]
 800241a:	883b      	ldrh	r3, [r7, #0]
 800241c:	4413      	add	r3, r2
 800241e:	2b80      	cmp	r3, #128	; 0x80
 8002420:	dd03      	ble.n	800242a <ST7735_FillRectangle1+0x4e>
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002428:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 800242a:	f7ff fd4f 	bl	8001ecc <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	b2d8      	uxtb	r0, r3
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	b2d9      	uxtb	r1, r3
 8002436:	88fb      	ldrh	r3, [r7, #6]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	b2db      	uxtb	r3, r3
 800243e:	4413      	add	r3, r2
 8002440:	b2db      	uxtb	r3, r3
 8002442:	3b01      	subs	r3, #1
 8002444:	b2dc      	uxtb	r4, r3
 8002446:	88bb      	ldrh	r3, [r7, #4]
 8002448:	b2da      	uxtb	r2, r3
 800244a:	883b      	ldrh	r3, [r7, #0]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4413      	add	r3, r2
 8002450:	b2db      	uxtb	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b2db      	uxtb	r3, r3
 8002456:	4622      	mov	r2, r4
 8002458:	f7ff fde5 	bl	8002026 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 800245c:	8c3b      	ldrh	r3, [r7, #32]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	b29b      	uxth	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	733b      	strb	r3, [r7, #12]
 8002466:	8c3b      	ldrh	r3, [r7, #32]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800246c:	2201      	movs	r2, #1
 800246e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002472:	4812      	ldr	r0, [pc, #72]	; (80024bc <ST7735_FillRectangle1+0xe0>)
 8002474:	f003 fd68 	bl	8005f48 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002478:	883b      	ldrh	r3, [r7, #0]
 800247a:	80bb      	strh	r3, [r7, #4]
 800247c:	e013      	b.n	80024a6 <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	80fb      	strh	r3, [r7, #6]
 8002482:	e00a      	b.n	800249a <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8002484:	f107 010c 	add.w	r1, r7, #12
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	2202      	movs	r2, #2
 800248e:	480c      	ldr	r0, [pc, #48]	; (80024c0 <ST7735_FillRectangle1+0xe4>)
 8002490:	f006 fb96 	bl	8008bc0 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	3b01      	subs	r3, #1
 8002498:	80fb      	strh	r3, [r7, #6]
 800249a:	88fb      	ldrh	r3, [r7, #6]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1f1      	bne.n	8002484 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80024a0:	88bb      	ldrh	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	80bb      	strh	r3, [r7, #4]
 80024a6:	88bb      	ldrh	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1e8      	bne.n	800247e <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 80024ac:	f7ff fd1a 	bl	8001ee4 <ST7735_Unselect1>
 80024b0:	e000      	b.n	80024b4 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80024b2:	bf00      	nop
}
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	bf00      	nop
 80024bc:	58021800 	.word	0x58021800
 80024c0:	24000250 	.word	0x24000250

080024c4 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af02      	add	r7, sp, #8
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	2380      	movs	r3, #128	; 0x80
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	2100      	movs	r1, #0
 80024d8:	2000      	movs	r0, #0
 80024da:	f7ff ff0b 	bl	80022f4 <ST7735_FillRectangle>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b084      	sub	sp, #16
 80024ea:	af02      	add	r7, sp, #8
 80024ec:	4603      	mov	r3, r0
 80024ee:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80024f0:	88fb      	ldrh	r3, [r7, #6]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	2280      	movs	r2, #128	; 0x80
 80024f8:	2100      	movs	r1, #0
 80024fa:	2000      	movs	r0, #0
 80024fc:	f7ff ff6e 	bl	80023dc <ST7735_FillRectangle1>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_MspInit+0x30>)
 8002510:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002514:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x30>)
 8002516:	f043 0302 	orr.w	r3, r3, #2
 800251a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x30>)
 8002520:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	58024400 	.word	0x58024400

0800253c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b08e      	sub	sp, #56	; 0x38
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	605a      	str	r2, [r3, #4]
 800254e:	609a      	str	r2, [r3, #8]
 8002550:	60da      	str	r2, [r3, #12]
 8002552:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a59      	ldr	r2, [pc, #356]	; (80026c0 <HAL_ETH_MspInit+0x184>)
 800255a:	4293      	cmp	r3, r2
 800255c:	f040 80ab 	bne.w	80026b6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002560:	4b58      	ldr	r3, [pc, #352]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002562:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002566:	4a57      	ldr	r2, [pc, #348]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800256c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002570:	4b54      	ldr	r3, [pc, #336]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002572:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800257a:	623b      	str	r3, [r7, #32]
 800257c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800257e:	4b51      	ldr	r3, [pc, #324]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002584:	4a4f      	ldr	r2, [pc, #316]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800258a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800258e:	4b4d      	ldr	r3, [pc, #308]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002590:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800259c:	4b49      	ldr	r3, [pc, #292]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 800259e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025a2:	4a48      	ldr	r2, [pc, #288]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ac:	4b45      	ldr	r3, [pc, #276]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	4b42      	ldr	r3, [pc, #264]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025c0:	4a40      	ldr	r2, [pc, #256]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025c2:	f043 0304 	orr.w	r3, r3, #4
 80025c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025ca:	4b3e      	ldr	r3, [pc, #248]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025d0:	f003 0304 	and.w	r3, r3, #4
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d8:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025de:	4a39      	ldr	r2, [pc, #228]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80025e8:	4b36      	ldr	r3, [pc, #216]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	613b      	str	r3, [r7, #16]
 80025f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f6:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025fc:	4a31      	ldr	r2, [pc, #196]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 80025fe:	f043 0302 	orr.w	r3, r3, #2
 8002602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002606:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260c:	f003 0302 	and.w	r3, r3, #2
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002614:	4b2b      	ldr	r3, [pc, #172]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002616:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800261a:	4a2a      	ldr	r2, [pc, #168]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 800261c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002620:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002624:	4b27      	ldr	r3, [pc, #156]	; (80026c4 <HAL_ETH_MspInit+0x188>)
 8002626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800262e:	60bb      	str	r3, [r7, #8]
 8002630:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002632:	2332      	movs	r3, #50	; 0x32
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002636:	2302      	movs	r3, #2
 8002638:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263e:	2300      	movs	r3, #0
 8002640:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002642:	230b      	movs	r3, #11
 8002644:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264a:	4619      	mov	r1, r3
 800264c:	481e      	ldr	r0, [pc, #120]	; (80026c8 <HAL_ETH_MspInit+0x18c>)
 800264e:	f003 fab3 	bl	8005bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002652:	2386      	movs	r3, #134	; 0x86
 8002654:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002656:	2302      	movs	r3, #2
 8002658:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265e:	2300      	movs	r3, #0
 8002660:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002662:	230b      	movs	r3, #11
 8002664:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002666:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266a:	4619      	mov	r1, r3
 800266c:	4817      	ldr	r0, [pc, #92]	; (80026cc <HAL_ETH_MspInit+0x190>)
 800266e:	f003 faa3 	bl	8005bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002684:	230b      	movs	r3, #11
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800268c:	4619      	mov	r1, r3
 800268e:	4810      	ldr	r0, [pc, #64]	; (80026d0 <HAL_ETH_MspInit+0x194>)
 8002690:	f003 fa92 	bl	8005bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002694:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80026a6:	230b      	movs	r3, #11
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ae:	4619      	mov	r1, r3
 80026b0:	4808      	ldr	r0, [pc, #32]	; (80026d4 <HAL_ETH_MspInit+0x198>)
 80026b2:	f003 fa81 	bl	8005bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80026b6:	bf00      	nop
 80026b8:	3738      	adds	r7, #56	; 0x38
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	40028000 	.word	0x40028000
 80026c4:	58024400 	.word	0x58024400
 80026c8:	58020800 	.word	0x58020800
 80026cc:	58020000 	.word	0x58020000
 80026d0:	58020400 	.word	0x58020400
 80026d4:	58021800 	.word	0x58021800

080026d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e0:	f107 0314 	add.w	r3, r7, #20
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a2a      	ldr	r2, [pc, #168]	; (80027a0 <HAL_SPI_MspInit+0xc8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d14d      	bne.n	8002796 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026fa:	4b2a      	ldr	r3, [pc, #168]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 80026fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002700:	4a28      	ldr	r2, [pc, #160]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 8002702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002706:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 800270c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002714:	613b      	str	r3, [r7, #16]
 8002716:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002718:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 800271a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271e:	4a21      	ldr	r2, [pc, #132]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 8002720:	f043 0302 	orr.w	r3, r3, #2
 8002724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002728:	4b1e      	ldr	r3, [pc, #120]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 800272a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 8002738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002746:	4b17      	ldr	r3, [pc, #92]	; (80027a4 <HAL_SPI_MspInit+0xcc>)
 8002748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002754:	2304      	movs	r3, #4
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002758:	2302      	movs	r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800275c:	2302      	movs	r3, #2
 800275e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002760:	2300      	movs	r3, #0
 8002762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002764:	2307      	movs	r3, #7
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4619      	mov	r1, r3
 800276e:	480e      	ldr	r0, [pc, #56]	; (80027a8 <HAL_SPI_MspInit+0xd0>)
 8002770:	f003 fa22 	bl	8005bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002774:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277a:	2302      	movs	r3, #2
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800277e:	2302      	movs	r3, #2
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002782:	2300      	movs	r3, #0
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002786:	2306      	movs	r3, #6
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	4806      	ldr	r0, [pc, #24]	; (80027ac <HAL_SPI_MspInit+0xd4>)
 8002792:	f003 fa11 	bl	8005bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002796:	bf00      	nop
 8002798:	3728      	adds	r7, #40	; 0x28
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40003c00 	.word	0x40003c00
 80027a4:	58024400 	.word	0x58024400
 80027a8:	58020400 	.word	0x58020400
 80027ac:	58020800 	.word	0x58020800

080027b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b0b8      	sub	sp, #224	; 0xe0
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027c8:	f107 0310 	add.w	r3, r7, #16
 80027cc:	22bc      	movs	r2, #188	; 0xbc
 80027ce:	2100      	movs	r1, #0
 80027d0:	4618      	mov	r0, r3
 80027d2:	f008 fcf9 	bl	800b1c8 <memset>
  if(huart->Instance==USART3)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a57      	ldr	r2, [pc, #348]	; (8002938 <HAL_UART_MspInit+0x188>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	f040 80a6 	bne.w	800292e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80027e2:	2302      	movs	r3, #2
 80027e4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80027e6:	2300      	movs	r3, #0
 80027e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027ec:	f107 0310 	add.w	r3, r7, #16
 80027f0:	4618      	mov	r0, r3
 80027f2:	f004 fd77 	bl	80072e4 <HAL_RCCEx_PeriphCLKConfig>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80027fc:	f7ff fb48 	bl	8001e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002800:	4b4e      	ldr	r3, [pc, #312]	; (800293c <HAL_UART_MspInit+0x18c>)
 8002802:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002806:	4a4d      	ldr	r2, [pc, #308]	; (800293c <HAL_UART_MspInit+0x18c>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002810:	4b4a      	ldr	r3, [pc, #296]	; (800293c <HAL_UART_MspInit+0x18c>)
 8002812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800281e:	4b47      	ldr	r3, [pc, #284]	; (800293c <HAL_UART_MspInit+0x18c>)
 8002820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002824:	4a45      	ldr	r2, [pc, #276]	; (800293c <HAL_UART_MspInit+0x18c>)
 8002826:	f043 0308 	orr.w	r3, r3, #8
 800282a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800282e:	4b43      	ldr	r3, [pc, #268]	; (800293c <HAL_UART_MspInit+0x18c>)
 8002830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800283c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002844:	2302      	movs	r3, #2
 8002846:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800284a:	2300      	movs	r3, #0
 800284c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002856:	2307      	movs	r3, #7
 8002858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800285c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002860:	4619      	mov	r1, r3
 8002862:	4837      	ldr	r0, [pc, #220]	; (8002940 <HAL_UART_MspInit+0x190>)
 8002864:	f003 f9a8 	bl	8005bb8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_UART_MspInit+0x194>)
 800286a:	4a37      	ldr	r2, [pc, #220]	; (8002948 <HAL_UART_MspInit+0x198>)
 800286c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <HAL_UART_MspInit+0x194>)
 8002870:	222d      	movs	r2, #45	; 0x2d
 8002872:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002874:	4b33      	ldr	r3, [pc, #204]	; (8002944 <HAL_UART_MspInit+0x194>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800287a:	4b32      	ldr	r3, [pc, #200]	; (8002944 <HAL_UART_MspInit+0x194>)
 800287c:	2200      	movs	r2, #0
 800287e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002880:	4b30      	ldr	r3, [pc, #192]	; (8002944 <HAL_UART_MspInit+0x194>)
 8002882:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002886:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002888:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <HAL_UART_MspInit+0x194>)
 800288a:	2200      	movs	r2, #0
 800288c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <HAL_UART_MspInit+0x194>)
 8002890:	2200      	movs	r2, #0
 8002892:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002894:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_UART_MspInit+0x194>)
 8002896:	f44f 7280 	mov.w	r2, #256	; 0x100
 800289a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800289c:	4b29      	ldr	r3, [pc, #164]	; (8002944 <HAL_UART_MspInit+0x194>)
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <HAL_UART_MspInit+0x194>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80028a8:	4826      	ldr	r0, [pc, #152]	; (8002944 <HAL_UART_MspInit+0x194>)
 80028aa:	f000 fb3b 	bl	8002f24 <HAL_DMA_Init>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80028b4:	f7ff faec 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	4a22      	ldr	r2, [pc, #136]	; (8002944 <HAL_UART_MspInit+0x194>)
 80028bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80028be:	4a21      	ldr	r2, [pc, #132]	; (8002944 <HAL_UART_MspInit+0x194>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80028c4:	4b21      	ldr	r3, [pc, #132]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <HAL_UART_MspInit+0x1a0>)
 80028c8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80028ca:	4b20      	ldr	r3, [pc, #128]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028cc:	222e      	movs	r2, #46	; 0x2e
 80028ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028d0:	4b1e      	ldr	r3, [pc, #120]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028d6:	4b1d      	ldr	r3, [pc, #116]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028d8:	2200      	movs	r2, #0
 80028da:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028dc:	4b1b      	ldr	r3, [pc, #108]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028e4:	4b19      	ldr	r3, [pc, #100]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ea:	4b18      	ldr	r3, [pc, #96]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <HAL_UART_MspInit+0x19c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002902:	4812      	ldr	r0, [pc, #72]	; (800294c <HAL_UART_MspInit+0x19c>)
 8002904:	f000 fb0e 	bl	8002f24 <HAL_DMA_Init>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d001      	beq.n	8002912 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800290e:	f7ff fabf 	bl	8001e90 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a0d      	ldr	r2, [pc, #52]	; (800294c <HAL_UART_MspInit+0x19c>)
 8002916:	679a      	str	r2, [r3, #120]	; 0x78
 8002918:	4a0c      	ldr	r2, [pc, #48]	; (800294c <HAL_UART_MspInit+0x19c>)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	2027      	movs	r0, #39	; 0x27
 8002924:	f000 fac9 	bl	8002eba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002928:	2027      	movs	r0, #39	; 0x27
 800292a:	f000 fae0 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800292e:	bf00      	nop
 8002930:	37e0      	adds	r7, #224	; 0xe0
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40004800 	.word	0x40004800
 800293c:	58024400 	.word	0x58024400
 8002940:	58020c00 	.word	0x58020c00
 8002944:	24000368 	.word	0x24000368
 8002948:	40020028 	.word	0x40020028
 800294c:	240003e0 	.word	0x240003e0
 8002950:	40020070 	.word	0x40020070

08002954 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08a      	sub	sp, #40	; 0x28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800295c:	f107 0314 	add.w	r3, r7, #20
 8002960:	2200      	movs	r2, #0
 8002962:	601a      	str	r2, [r3, #0]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	60da      	str	r2, [r3, #12]
 800296a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a22      	ldr	r2, [pc, #136]	; (80029fc <HAL_PCD_MspInit+0xa8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d13d      	bne.n	80029f2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002976:	f003 fceb 	bl	8006350 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	4b21      	ldr	r3, [pc, #132]	; (8002a00 <HAL_PCD_MspInit+0xac>)
 800297c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002980:	4a1f      	ldr	r2, [pc, #124]	; (8002a00 <HAL_PCD_MspInit+0xac>)
 8002982:	f043 0301 	orr.w	r3, r3, #1
 8002986:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <HAL_PCD_MspInit+0xac>)
 800298c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002998:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800299c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80029aa:	230a      	movs	r3, #10
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	4619      	mov	r1, r3
 80029b4:	4813      	ldr	r0, [pc, #76]	; (8002a04 <HAL_PCD_MspInit+0xb0>)
 80029b6:	f003 f8ff 	bl	8005bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80029ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0314 	add.w	r3, r7, #20
 80029cc:	4619      	mov	r1, r3
 80029ce:	480d      	ldr	r0, [pc, #52]	; (8002a04 <HAL_PCD_MspInit+0xb0>)
 80029d0:	f003 f8f2 	bl	8005bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029d4:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <HAL_PCD_MspInit+0xac>)
 80029d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029da:	4a09      	ldr	r2, [pc, #36]	; (8002a00 <HAL_PCD_MspInit+0xac>)
 80029dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80029e0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029e4:	4b06      	ldr	r3, [pc, #24]	; (8002a00 <HAL_PCD_MspInit+0xac>)
 80029e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	3728      	adds	r7, #40	; 0x28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40080000 	.word	0x40080000
 8002a00:	58024400 	.word	0x58024400
 8002a04:	58020000 	.word	0x58020000

08002a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <NMI_Handler+0x4>

08002a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a12:	e7fe      	b.n	8002a12 <HardFault_Handler+0x4>

08002a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <MemManage_Handler+0x4>

08002a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <BusFault_Handler+0x4>

08002a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <UsageFault_Handler+0x4>

08002a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a54:	f000 f8f2 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <DMA1_Stream1_IRQHandler+0x10>)
 8002a62:	f001 fb1f 	bl	80040a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	24000368 	.word	0x24000368

08002a70 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002a74:	4802      	ldr	r0, [pc, #8]	; (8002a80 <DMA1_Stream4_IRQHandler+0x10>)
 8002a76:	f001 fb15 	bl	80040a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	240003e0 	.word	0x240003e0

08002a84 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <USART3_IRQHandler+0x10>)
 8002a8a:	f006 fbc5 	bl	8009218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	240002d8 	.word	0x240002d8

08002a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <_sbrk+0x5c>)
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <_sbrk+0x60>)
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <_sbrk+0x64>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ab4:	4b11      	ldr	r3, [pc, #68]	; (8002afc <_sbrk+0x64>)
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <_sbrk+0x68>)
 8002ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <_sbrk+0x64>)
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d207      	bcs.n	8002ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ac8:	f008 fb54 	bl	800b174 <__errno>
 8002acc:	4603      	mov	r3, r0
 8002ace:	220c      	movs	r2, #12
 8002ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	e009      	b.n	8002aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <_sbrk+0x64>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <_sbrk+0x64>)
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a05      	ldr	r2, [pc, #20]	; (8002afc <_sbrk+0x64>)
 8002ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aea:	68fb      	ldr	r3, [r7, #12]
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3718      	adds	r7, #24
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	24080000 	.word	0x24080000
 8002af8:	00000400 	.word	0x00000400
 8002afc:	24000ca4 	.word	0x24000ca4
 8002b00:	24000cc0 	.word	0x24000cc0

08002b04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b08:	f7fe fd7e 	bl	8001608 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b0c:	480c      	ldr	r0, [pc, #48]	; (8002b40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b0e:	490d      	ldr	r1, [pc, #52]	; (8002b44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b10:	4a0d      	ldr	r2, [pc, #52]	; (8002b48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b14:	e002      	b.n	8002b1c <LoopCopyDataInit>

08002b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1a:	3304      	adds	r3, #4

08002b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b20:	d3f9      	bcc.n	8002b16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b24:	4c0a      	ldr	r4, [pc, #40]	; (8002b50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b28:	e001      	b.n	8002b2e <LoopFillZerobss>

08002b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b2c:	3204      	adds	r2, #4

08002b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b30:	d3fb      	bcc.n	8002b2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b32:	f008 fb25 	bl	800b180 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b36:	f7fe fdfd 	bl	8001734 <main>
  bx  lr
 8002b3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b3c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002b40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002b44:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002b48:	0800d178 	.word	0x0800d178
  ldr r2, =_sbss
 8002b4c:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8002b50:	24000cbc 	.word	0x24000cbc

08002b54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC3_IRQHandler>
	...

08002b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b5e:	2003      	movs	r0, #3
 8002b60:	f000 f9a0 	bl	8002ea4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b64:	f004 f9e8 	bl	8006f38 <HAL_RCC_GetSysClockFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_Init+0x68>)
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	0a1b      	lsrs	r3, r3, #8
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	4913      	ldr	r1, [pc, #76]	; (8002bc4 <HAL_Init+0x6c>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b80:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b82:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <HAL_Init+0x68>)
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <HAL_Init+0x6c>)
 8002b8c:	5cd3      	ldrb	r3, [r2, r3]
 8002b8e:	f003 031f 	and.w	r3, r3, #31
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	fa22 f303 	lsr.w	r3, r2, r3
 8002b98:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_Init+0x70>)
 8002b9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b9c:	4a0b      	ldr	r2, [pc, #44]	; (8002bcc <HAL_Init+0x74>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f000 f814 	bl	8002bd0 <HAL_InitTick>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e002      	b.n	8002bb8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb2:	f7ff fca9 	bl	8002508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	0800bbb4 	.word	0x0800bbb4
 8002bc8:	24000004 	.word	0x24000004
 8002bcc:	24000000 	.word	0x24000000

08002bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002bd8:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <HAL_InitTick+0x60>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e021      	b.n	8002c28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_InitTick+0x64>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b11      	ldr	r3, [pc, #68]	; (8002c30 <HAL_InitTick+0x60>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f985 	bl	8002f0a <HAL_SYSTICK_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00e      	b.n	8002c28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d80a      	bhi.n	8002c26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295
 8002c18:	f000 f94f 	bl	8002eba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c1c:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_InitTick+0x68>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	2400001c 	.word	0x2400001c
 8002c34:	24000000 	.word	0x24000000
 8002c38:	24000018 	.word	0x24000018

08002c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_IncTick+0x20>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_IncTick+0x24>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_IncTick+0x24>)
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	2400001c 	.word	0x2400001c
 8002c60:	24000ca8 	.word	0x24000ca8

08002c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return uwTick;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_GetTick+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	24000ca8 	.word	0x24000ca8

08002c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff ffee 	bl	8002c64 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d005      	beq.n	8002ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_Delay+0x44>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ca2:	bf00      	nop
 8002ca4:	f7ff ffde 	bl	8002c64 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d8f7      	bhi.n	8002ca4 <HAL_Delay+0x28>
  {
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2400001c 	.word	0x2400001c

08002cc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_GetREVID+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	5c001000 	.word	0x5c001000

08002cdc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002cec:	4904      	ldr	r1, [pc, #16]	; (8002d00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	604b      	str	r3, [r1, #4]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	58000400 	.word	0x58000400

08002d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <__NVIC_SetPriorityGrouping+0x40>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d2c:	4b06      	ldr	r3, [pc, #24]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x40>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00
 8002d48:	05fa0000 	.word	0x05fa0000

08002d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db0b      	blt.n	8002d92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4907      	ldr	r1, [pc, #28]	; (8002da0 <__NVIC_EnableIRQ+0x38>)
 8002d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	e000e100 	.word	0xe000e100

08002da4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	4603      	mov	r3, r0
 8002dac:	6039      	str	r1, [r7, #0]
 8002dae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002db0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	db0a      	blt.n	8002dce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	b2da      	uxtb	r2, r3
 8002dbc:	490c      	ldr	r1, [pc, #48]	; (8002df0 <__NVIC_SetPriority+0x4c>)
 8002dbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc2:	0112      	lsls	r2, r2, #4
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dcc:	e00a      	b.n	8002de4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4908      	ldr	r1, [pc, #32]	; (8002df4 <__NVIC_SetPriority+0x50>)
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	f003 030f 	and.w	r3, r3, #15
 8002dda:	3b04      	subs	r3, #4
 8002ddc:	0112      	lsls	r2, r2, #4
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	440b      	add	r3, r1
 8002de2:	761a      	strb	r2, [r3, #24]
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr
 8002df0:	e000e100 	.word	0xe000e100
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b089      	sub	sp, #36	; 0x24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	f1c3 0307 	rsb	r3, r3, #7
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	bf28      	it	cs
 8002e16:	2304      	movcs	r3, #4
 8002e18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d902      	bls.n	8002e28 <NVIC_EncodePriority+0x30>
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	3b03      	subs	r3, #3
 8002e26:	e000      	b.n	8002e2a <NVIC_EncodePriority+0x32>
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	43da      	mvns	r2, r3
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	401a      	ands	r2, r3
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e40:	f04f 31ff 	mov.w	r1, #4294967295
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	fa01 f303 	lsl.w	r3, r1, r3
 8002e4a:	43d9      	mvns	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e50:	4313      	orrs	r3, r2
         );
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3724      	adds	r7, #36	; 0x24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e70:	d301      	bcc.n	8002e76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e72:	2301      	movs	r3, #1
 8002e74:	e00f      	b.n	8002e96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e76:	4a0a      	ldr	r2, [pc, #40]	; (8002ea0 <SysTick_Config+0x40>)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7e:	210f      	movs	r1, #15
 8002e80:	f04f 30ff 	mov.w	r0, #4294967295
 8002e84:	f7ff ff8e 	bl	8002da4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <SysTick_Config+0x40>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8e:	4b04      	ldr	r3, [pc, #16]	; (8002ea0 <SysTick_Config+0x40>)
 8002e90:	2207      	movs	r2, #7
 8002e92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e94:	2300      	movs	r3, #0
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3708      	adds	r7, #8
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000e010 	.word	0xe000e010

08002ea4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f7ff ff29 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b086      	sub	sp, #24
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
 8002ec6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec8:	f7ff ff40 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f7ff ff90 	bl	8002df8 <NVIC_EncodePriority>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff5f 	bl	8002da4 <__NVIC_SetPriority>
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff33 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ffa4 	bl	8002e60 <SysTick_Config>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b086      	sub	sp, #24
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002f2c:	f7ff fe9a 	bl	8002c64 <HAL_GetTick>
 8002f30:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e316      	b.n	800356a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a66      	ldr	r2, [pc, #408]	; (80030dc <HAL_DMA_Init+0x1b8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d04a      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a65      	ldr	r2, [pc, #404]	; (80030e0 <HAL_DMA_Init+0x1bc>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d045      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a63      	ldr	r2, [pc, #396]	; (80030e4 <HAL_DMA_Init+0x1c0>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d040      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a62      	ldr	r2, [pc, #392]	; (80030e8 <HAL_DMA_Init+0x1c4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d03b      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a60      	ldr	r2, [pc, #384]	; (80030ec <HAL_DMA_Init+0x1c8>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d036      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5f      	ldr	r2, [pc, #380]	; (80030f0 <HAL_DMA_Init+0x1cc>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d031      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5d      	ldr	r2, [pc, #372]	; (80030f4 <HAL_DMA_Init+0x1d0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d02c      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5c      	ldr	r2, [pc, #368]	; (80030f8 <HAL_DMA_Init+0x1d4>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d027      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a5a      	ldr	r2, [pc, #360]	; (80030fc <HAL_DMA_Init+0x1d8>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d022      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a59      	ldr	r2, [pc, #356]	; (8003100 <HAL_DMA_Init+0x1dc>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d01d      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a57      	ldr	r2, [pc, #348]	; (8003104 <HAL_DMA_Init+0x1e0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d018      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a56      	ldr	r2, [pc, #344]	; (8003108 <HAL_DMA_Init+0x1e4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a54      	ldr	r2, [pc, #336]	; (800310c <HAL_DMA_Init+0x1e8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a53      	ldr	r2, [pc, #332]	; (8003110 <HAL_DMA_Init+0x1ec>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a51      	ldr	r2, [pc, #324]	; (8003114 <HAL_DMA_Init+0x1f0>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_Init+0xb8>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a50      	ldr	r2, [pc, #320]	; (8003118 <HAL_DMA_Init+0x1f4>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d101      	bne.n	8002fe0 <HAL_DMA_Init+0xbc>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <HAL_DMA_Init+0xbe>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 813b 	beq.w	800325e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a37      	ldr	r2, [pc, #220]	; (80030dc <HAL_DMA_Init+0x1b8>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d04a      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a36      	ldr	r2, [pc, #216]	; (80030e0 <HAL_DMA_Init+0x1bc>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d045      	beq.n	8003098 <HAL_DMA_Init+0x174>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a34      	ldr	r2, [pc, #208]	; (80030e4 <HAL_DMA_Init+0x1c0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d040      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a33      	ldr	r2, [pc, #204]	; (80030e8 <HAL_DMA_Init+0x1c4>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d03b      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a31      	ldr	r2, [pc, #196]	; (80030ec <HAL_DMA_Init+0x1c8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d036      	beq.n	8003098 <HAL_DMA_Init+0x174>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a30      	ldr	r2, [pc, #192]	; (80030f0 <HAL_DMA_Init+0x1cc>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d031      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2e      	ldr	r2, [pc, #184]	; (80030f4 <HAL_DMA_Init+0x1d0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d02c      	beq.n	8003098 <HAL_DMA_Init+0x174>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2d      	ldr	r2, [pc, #180]	; (80030f8 <HAL_DMA_Init+0x1d4>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d027      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2b      	ldr	r2, [pc, #172]	; (80030fc <HAL_DMA_Init+0x1d8>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d022      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2a      	ldr	r2, [pc, #168]	; (8003100 <HAL_DMA_Init+0x1dc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d01d      	beq.n	8003098 <HAL_DMA_Init+0x174>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a28      	ldr	r2, [pc, #160]	; (8003104 <HAL_DMA_Init+0x1e0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d018      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a27      	ldr	r2, [pc, #156]	; (8003108 <HAL_DMA_Init+0x1e4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d013      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a25      	ldr	r2, [pc, #148]	; (800310c <HAL_DMA_Init+0x1e8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d00e      	beq.n	8003098 <HAL_DMA_Init+0x174>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a24      	ldr	r2, [pc, #144]	; (8003110 <HAL_DMA_Init+0x1ec>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d009      	beq.n	8003098 <HAL_DMA_Init+0x174>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a22      	ldr	r2, [pc, #136]	; (8003114 <HAL_DMA_Init+0x1f0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d004      	beq.n	8003098 <HAL_DMA_Init+0x174>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a21      	ldr	r2, [pc, #132]	; (8003118 <HAL_DMA_Init+0x1f4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d108      	bne.n	80030aa <HAL_DMA_Init+0x186>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	e007      	b.n	80030ba <HAL_DMA_Init+0x196>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 0201 	bic.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80030ba:	e02f      	b.n	800311c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030bc:	f7ff fdd2 	bl	8002c64 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b05      	cmp	r3, #5
 80030c8:	d928      	bls.n	800311c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2203      	movs	r2, #3
 80030d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e246      	b.n	800356a <HAL_DMA_Init+0x646>
 80030dc:	40020010 	.word	0x40020010
 80030e0:	40020028 	.word	0x40020028
 80030e4:	40020040 	.word	0x40020040
 80030e8:	40020058 	.word	0x40020058
 80030ec:	40020070 	.word	0x40020070
 80030f0:	40020088 	.word	0x40020088
 80030f4:	400200a0 	.word	0x400200a0
 80030f8:	400200b8 	.word	0x400200b8
 80030fc:	40020410 	.word	0x40020410
 8003100:	40020428 	.word	0x40020428
 8003104:	40020440 	.word	0x40020440
 8003108:	40020458 	.word	0x40020458
 800310c:	40020470 	.word	0x40020470
 8003110:	40020488 	.word	0x40020488
 8003114:	400204a0 	.word	0x400204a0
 8003118:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1c8      	bne.n	80030bc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003132:	697a      	ldr	r2, [r7, #20]
 8003134:	4b83      	ldr	r3, [pc, #524]	; (8003344 <HAL_DMA_Init+0x420>)
 8003136:	4013      	ands	r3, r2
 8003138:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003142:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800314e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800315a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	2b04      	cmp	r3, #4
 800316e:	d107      	bne.n	8003180 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003178:	4313      	orrs	r3, r2
 800317a:	697a      	ldr	r2, [r7, #20]
 800317c:	4313      	orrs	r3, r2
 800317e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003180:	4b71      	ldr	r3, [pc, #452]	; (8003348 <HAL_DMA_Init+0x424>)
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b71      	ldr	r3, [pc, #452]	; (800334c <HAL_DMA_Init+0x428>)
 8003186:	4013      	ands	r3, r2
 8003188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800318c:	d328      	bcc.n	80031e0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	2b28      	cmp	r3, #40	; 0x28
 8003194:	d903      	bls.n	800319e <HAL_DMA_Init+0x27a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b2e      	cmp	r3, #46	; 0x2e
 800319c:	d917      	bls.n	80031ce <HAL_DMA_Init+0x2aa>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2b3e      	cmp	r3, #62	; 0x3e
 80031a4:	d903      	bls.n	80031ae <HAL_DMA_Init+0x28a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	2b42      	cmp	r3, #66	; 0x42
 80031ac:	d90f      	bls.n	80031ce <HAL_DMA_Init+0x2aa>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	2b46      	cmp	r3, #70	; 0x46
 80031b4:	d903      	bls.n	80031be <HAL_DMA_Init+0x29a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	2b48      	cmp	r3, #72	; 0x48
 80031bc:	d907      	bls.n	80031ce <HAL_DMA_Init+0x2aa>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	2b4e      	cmp	r3, #78	; 0x4e
 80031c4:	d905      	bls.n	80031d2 <HAL_DMA_Init+0x2ae>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b52      	cmp	r3, #82	; 0x52
 80031cc:	d801      	bhi.n	80031d2 <HAL_DMA_Init+0x2ae>
 80031ce:	2301      	movs	r3, #1
 80031d0:	e000      	b.n	80031d4 <HAL_DMA_Init+0x2b0>
 80031d2:	2300      	movs	r3, #0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031de:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	f023 0307 	bic.w	r3, r3, #7
 80031f6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	4313      	orrs	r3, r2
 8003200:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003206:	2b04      	cmp	r3, #4
 8003208:	d117      	bne.n	800323a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00e      	beq.n	800323a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f001 ff1d 	bl	800505c <DMA_CheckFifoParam>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2240      	movs	r2, #64	; 0x40
 800322c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e197      	b.n	800356a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f001 fe58 	bl	8004ef8 <DMA_CalcBaseAndBitshift>
 8003248:	4603      	mov	r3, r0
 800324a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	223f      	movs	r2, #63	; 0x3f
 8003256:	409a      	lsls	r2, r3
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	e0cd      	b.n	80033fa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a3b      	ldr	r2, [pc, #236]	; (8003350 <HAL_DMA_Init+0x42c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d022      	beq.n	80032ae <HAL_DMA_Init+0x38a>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a39      	ldr	r2, [pc, #228]	; (8003354 <HAL_DMA_Init+0x430>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01d      	beq.n	80032ae <HAL_DMA_Init+0x38a>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a38      	ldr	r2, [pc, #224]	; (8003358 <HAL_DMA_Init+0x434>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d018      	beq.n	80032ae <HAL_DMA_Init+0x38a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a36      	ldr	r2, [pc, #216]	; (800335c <HAL_DMA_Init+0x438>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_DMA_Init+0x38a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a35      	ldr	r2, [pc, #212]	; (8003360 <HAL_DMA_Init+0x43c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d00e      	beq.n	80032ae <HAL_DMA_Init+0x38a>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a33      	ldr	r2, [pc, #204]	; (8003364 <HAL_DMA_Init+0x440>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d009      	beq.n	80032ae <HAL_DMA_Init+0x38a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a32      	ldr	r2, [pc, #200]	; (8003368 <HAL_DMA_Init+0x444>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d004      	beq.n	80032ae <HAL_DMA_Init+0x38a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a30      	ldr	r2, [pc, #192]	; (800336c <HAL_DMA_Init+0x448>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d101      	bne.n	80032b2 <HAL_DMA_Init+0x38e>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_DMA_Init+0x390>
 80032b2:	2300      	movs	r3, #0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 8097 	beq.w	80033e8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a24      	ldr	r2, [pc, #144]	; (8003350 <HAL_DMA_Init+0x42c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d021      	beq.n	8003308 <HAL_DMA_Init+0x3e4>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a22      	ldr	r2, [pc, #136]	; (8003354 <HAL_DMA_Init+0x430>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d01c      	beq.n	8003308 <HAL_DMA_Init+0x3e4>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a21      	ldr	r2, [pc, #132]	; (8003358 <HAL_DMA_Init+0x434>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d017      	beq.n	8003308 <HAL_DMA_Init+0x3e4>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1f      	ldr	r2, [pc, #124]	; (800335c <HAL_DMA_Init+0x438>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d012      	beq.n	8003308 <HAL_DMA_Init+0x3e4>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1e      	ldr	r2, [pc, #120]	; (8003360 <HAL_DMA_Init+0x43c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d00d      	beq.n	8003308 <HAL_DMA_Init+0x3e4>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <HAL_DMA_Init+0x440>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d008      	beq.n	8003308 <HAL_DMA_Init+0x3e4>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <HAL_DMA_Init+0x444>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d003      	beq.n	8003308 <HAL_DMA_Init+0x3e4>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <HAL_DMA_Init+0x448>)
 8003306:	4293      	cmp	r3, r2
 8003308:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_DMA_Init+0x44c>)
 8003326:	4013      	ands	r3, r2
 8003328:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b40      	cmp	r3, #64	; 0x40
 8003330:	d020      	beq.n	8003374 <HAL_DMA_Init+0x450>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b80      	cmp	r3, #128	; 0x80
 8003338:	d102      	bne.n	8003340 <HAL_DMA_Init+0x41c>
 800333a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800333e:	e01a      	b.n	8003376 <HAL_DMA_Init+0x452>
 8003340:	2300      	movs	r3, #0
 8003342:	e018      	b.n	8003376 <HAL_DMA_Init+0x452>
 8003344:	fe10803f 	.word	0xfe10803f
 8003348:	5c001000 	.word	0x5c001000
 800334c:	ffff0000 	.word	0xffff0000
 8003350:	58025408 	.word	0x58025408
 8003354:	5802541c 	.word	0x5802541c
 8003358:	58025430 	.word	0x58025430
 800335c:	58025444 	.word	0x58025444
 8003360:	58025458 	.word	0x58025458
 8003364:	5802546c 	.word	0x5802546c
 8003368:	58025480 	.word	0x58025480
 800336c:	58025494 	.word	0x58025494
 8003370:	fffe000f 	.word	0xfffe000f
 8003374:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68d2      	ldr	r2, [r2, #12]
 800337a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800337c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003384:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800338c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003394:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800339c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80033a4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	4b6e      	ldr	r3, [pc, #440]	; (8003574 <HAL_DMA_Init+0x650>)
 80033bc:	4413      	add	r3, r2
 80033be:	4a6e      	ldr	r2, [pc, #440]	; (8003578 <HAL_DMA_Init+0x654>)
 80033c0:	fba2 2303 	umull	r2, r3, r2, r3
 80033c4:	091b      	lsrs	r3, r3, #4
 80033c6:	009a      	lsls	r2, r3, #2
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f001 fd93 	bl	8004ef8 <DMA_CalcBaseAndBitshift>
 80033d2:	4603      	mov	r3, r0
 80033d4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033da:	f003 031f 	and.w	r3, r3, #31
 80033de:	2201      	movs	r2, #1
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	e008      	b.n	80033fa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2240      	movs	r2, #64	; 0x40
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2203      	movs	r2, #3
 80033f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e0b7      	b.n	800356a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a5f      	ldr	r2, [pc, #380]	; (800357c <HAL_DMA_Init+0x658>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d072      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a5d      	ldr	r2, [pc, #372]	; (8003580 <HAL_DMA_Init+0x65c>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d06d      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a5c      	ldr	r2, [pc, #368]	; (8003584 <HAL_DMA_Init+0x660>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d068      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5a      	ldr	r2, [pc, #360]	; (8003588 <HAL_DMA_Init+0x664>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d063      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a59      	ldr	r2, [pc, #356]	; (800358c <HAL_DMA_Init+0x668>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d05e      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a57      	ldr	r2, [pc, #348]	; (8003590 <HAL_DMA_Init+0x66c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d059      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a56      	ldr	r2, [pc, #344]	; (8003594 <HAL_DMA_Init+0x670>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d054      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a54      	ldr	r2, [pc, #336]	; (8003598 <HAL_DMA_Init+0x674>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d04f      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a53      	ldr	r2, [pc, #332]	; (800359c <HAL_DMA_Init+0x678>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d04a      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a51      	ldr	r2, [pc, #324]	; (80035a0 <HAL_DMA_Init+0x67c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d045      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a50      	ldr	r2, [pc, #320]	; (80035a4 <HAL_DMA_Init+0x680>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d040      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a4e      	ldr	r2, [pc, #312]	; (80035a8 <HAL_DMA_Init+0x684>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d03b      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4d      	ldr	r2, [pc, #308]	; (80035ac <HAL_DMA_Init+0x688>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d036      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a4b      	ldr	r2, [pc, #300]	; (80035b0 <HAL_DMA_Init+0x68c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d031      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a4a      	ldr	r2, [pc, #296]	; (80035b4 <HAL_DMA_Init+0x690>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d02c      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a48      	ldr	r2, [pc, #288]	; (80035b8 <HAL_DMA_Init+0x694>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d027      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a47      	ldr	r2, [pc, #284]	; (80035bc <HAL_DMA_Init+0x698>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d022      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a45      	ldr	r2, [pc, #276]	; (80035c0 <HAL_DMA_Init+0x69c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01d      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a44      	ldr	r2, [pc, #272]	; (80035c4 <HAL_DMA_Init+0x6a0>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d018      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a42      	ldr	r2, [pc, #264]	; (80035c8 <HAL_DMA_Init+0x6a4>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d013      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a41      	ldr	r2, [pc, #260]	; (80035cc <HAL_DMA_Init+0x6a8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00e      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3f      	ldr	r2, [pc, #252]	; (80035d0 <HAL_DMA_Init+0x6ac>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d009      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a3e      	ldr	r2, [pc, #248]	; (80035d4 <HAL_DMA_Init+0x6b0>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d004      	beq.n	80034ea <HAL_DMA_Init+0x5c6>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3c      	ldr	r2, [pc, #240]	; (80035d8 <HAL_DMA_Init+0x6b4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d101      	bne.n	80034ee <HAL_DMA_Init+0x5ca>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e000      	b.n	80034f0 <HAL_DMA_Init+0x5cc>
 80034ee:	2300      	movs	r3, #0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d032      	beq.n	800355a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f001 fe2d 	bl	8005154 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	2b80      	cmp	r3, #128	; 0x80
 8003500:	d102      	bne.n	8003508 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800351c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <HAL_DMA_Init+0x624>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b08      	cmp	r3, #8
 800352c:	d80c      	bhi.n	8003548 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f001 feaa 	bl	8005288 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	e008      	b.n	800355a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3718      	adds	r7, #24
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	a7fdabf8 	.word	0xa7fdabf8
 8003578:	cccccccd 	.word	0xcccccccd
 800357c:	40020010 	.word	0x40020010
 8003580:	40020028 	.word	0x40020028
 8003584:	40020040 	.word	0x40020040
 8003588:	40020058 	.word	0x40020058
 800358c:	40020070 	.word	0x40020070
 8003590:	40020088 	.word	0x40020088
 8003594:	400200a0 	.word	0x400200a0
 8003598:	400200b8 	.word	0x400200b8
 800359c:	40020410 	.word	0x40020410
 80035a0:	40020428 	.word	0x40020428
 80035a4:	40020440 	.word	0x40020440
 80035a8:	40020458 	.word	0x40020458
 80035ac:	40020470 	.word	0x40020470
 80035b0:	40020488 	.word	0x40020488
 80035b4:	400204a0 	.word	0x400204a0
 80035b8:	400204b8 	.word	0x400204b8
 80035bc:	58025408 	.word	0x58025408
 80035c0:	5802541c 	.word	0x5802541c
 80035c4:	58025430 	.word	0x58025430
 80035c8:	58025444 	.word	0x58025444
 80035cc:	58025458 	.word	0x58025458
 80035d0:	5802546c 	.word	0x5802546c
 80035d4:	58025480 	.word	0x58025480
 80035d8:	58025494 	.word	0x58025494

080035dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80035e4:	f7ff fb3e 	bl	8002c64 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e2dc      	b.n	8003bae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d008      	beq.n	8003612 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2280      	movs	r2, #128	; 0x80
 8003604:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e2cd      	b.n	8003bae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a76      	ldr	r2, [pc, #472]	; (80037f0 <HAL_DMA_Abort+0x214>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d04a      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a74      	ldr	r2, [pc, #464]	; (80037f4 <HAL_DMA_Abort+0x218>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d045      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a73      	ldr	r2, [pc, #460]	; (80037f8 <HAL_DMA_Abort+0x21c>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d040      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a71      	ldr	r2, [pc, #452]	; (80037fc <HAL_DMA_Abort+0x220>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d03b      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a70      	ldr	r2, [pc, #448]	; (8003800 <HAL_DMA_Abort+0x224>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d036      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a6e      	ldr	r2, [pc, #440]	; (8003804 <HAL_DMA_Abort+0x228>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d031      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6d      	ldr	r2, [pc, #436]	; (8003808 <HAL_DMA_Abort+0x22c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d02c      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a6b      	ldr	r2, [pc, #428]	; (800380c <HAL_DMA_Abort+0x230>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d027      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a6a      	ldr	r2, [pc, #424]	; (8003810 <HAL_DMA_Abort+0x234>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a68      	ldr	r2, [pc, #416]	; (8003814 <HAL_DMA_Abort+0x238>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d01d      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a67      	ldr	r2, [pc, #412]	; (8003818 <HAL_DMA_Abort+0x23c>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a65      	ldr	r2, [pc, #404]	; (800381c <HAL_DMA_Abort+0x240>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a64      	ldr	r2, [pc, #400]	; (8003820 <HAL_DMA_Abort+0x244>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a62      	ldr	r2, [pc, #392]	; (8003824 <HAL_DMA_Abort+0x248>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a61      	ldr	r2, [pc, #388]	; (8003828 <HAL_DMA_Abort+0x24c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_DMA_Abort+0xd6>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5f      	ldr	r2, [pc, #380]	; (800382c <HAL_DMA_Abort+0x250>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d101      	bne.n	80036b6 <HAL_DMA_Abort+0xda>
 80036b2:	2301      	movs	r3, #1
 80036b4:	e000      	b.n	80036b8 <HAL_DMA_Abort+0xdc>
 80036b6:	2300      	movs	r3, #0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 021e 	bic.w	r2, r2, #30
 80036ca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036da:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	617b      	str	r3, [r7, #20]
 80036e2:	e00a      	b.n	80036fa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 020e 	bic.w	r2, r2, #14
 80036f2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a3c      	ldr	r2, [pc, #240]	; (80037f0 <HAL_DMA_Abort+0x214>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d072      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a3a      	ldr	r2, [pc, #232]	; (80037f4 <HAL_DMA_Abort+0x218>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d06d      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a39      	ldr	r2, [pc, #228]	; (80037f8 <HAL_DMA_Abort+0x21c>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d068      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a37      	ldr	r2, [pc, #220]	; (80037fc <HAL_DMA_Abort+0x220>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d063      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a36      	ldr	r2, [pc, #216]	; (8003800 <HAL_DMA_Abort+0x224>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d05e      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a34      	ldr	r2, [pc, #208]	; (8003804 <HAL_DMA_Abort+0x228>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d059      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a33      	ldr	r2, [pc, #204]	; (8003808 <HAL_DMA_Abort+0x22c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d054      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a31      	ldr	r2, [pc, #196]	; (800380c <HAL_DMA_Abort+0x230>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d04f      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a30      	ldr	r2, [pc, #192]	; (8003810 <HAL_DMA_Abort+0x234>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d04a      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a2e      	ldr	r2, [pc, #184]	; (8003814 <HAL_DMA_Abort+0x238>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d045      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a2d      	ldr	r2, [pc, #180]	; (8003818 <HAL_DMA_Abort+0x23c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d040      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a2b      	ldr	r2, [pc, #172]	; (800381c <HAL_DMA_Abort+0x240>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d03b      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a2a      	ldr	r2, [pc, #168]	; (8003820 <HAL_DMA_Abort+0x244>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d036      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a28      	ldr	r2, [pc, #160]	; (8003824 <HAL_DMA_Abort+0x248>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d031      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a27      	ldr	r2, [pc, #156]	; (8003828 <HAL_DMA_Abort+0x24c>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d02c      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a25      	ldr	r2, [pc, #148]	; (800382c <HAL_DMA_Abort+0x250>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d027      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a24      	ldr	r2, [pc, #144]	; (8003830 <HAL_DMA_Abort+0x254>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d022      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a22      	ldr	r2, [pc, #136]	; (8003834 <HAL_DMA_Abort+0x258>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d01d      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <HAL_DMA_Abort+0x25c>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d018      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1f      	ldr	r2, [pc, #124]	; (800383c <HAL_DMA_Abort+0x260>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d013      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <HAL_DMA_Abort+0x264>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d00e      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_DMA_Abort+0x268>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d009      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <HAL_DMA_Abort+0x26c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d004      	beq.n	80037ea <HAL_DMA_Abort+0x20e>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_DMA_Abort+0x270>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d132      	bne.n	8003850 <HAL_DMA_Abort+0x274>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e031      	b.n	8003852 <HAL_DMA_Abort+0x276>
 80037ee:	bf00      	nop
 80037f0:	40020010 	.word	0x40020010
 80037f4:	40020028 	.word	0x40020028
 80037f8:	40020040 	.word	0x40020040
 80037fc:	40020058 	.word	0x40020058
 8003800:	40020070 	.word	0x40020070
 8003804:	40020088 	.word	0x40020088
 8003808:	400200a0 	.word	0x400200a0
 800380c:	400200b8 	.word	0x400200b8
 8003810:	40020410 	.word	0x40020410
 8003814:	40020428 	.word	0x40020428
 8003818:	40020440 	.word	0x40020440
 800381c:	40020458 	.word	0x40020458
 8003820:	40020470 	.word	0x40020470
 8003824:	40020488 	.word	0x40020488
 8003828:	400204a0 	.word	0x400204a0
 800382c:	400204b8 	.word	0x400204b8
 8003830:	58025408 	.word	0x58025408
 8003834:	5802541c 	.word	0x5802541c
 8003838:	58025430 	.word	0x58025430
 800383c:	58025444 	.word	0x58025444
 8003840:	58025458 	.word	0x58025458
 8003844:	5802546c 	.word	0x5802546c
 8003848:	58025480 	.word	0x58025480
 800384c:	58025494 	.word	0x58025494
 8003850:	2300      	movs	r3, #0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d007      	beq.n	8003866 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003864:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6d      	ldr	r2, [pc, #436]	; (8003a20 <HAL_DMA_Abort+0x444>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d04a      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a6b      	ldr	r2, [pc, #428]	; (8003a24 <HAL_DMA_Abort+0x448>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d045      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a6a      	ldr	r2, [pc, #424]	; (8003a28 <HAL_DMA_Abort+0x44c>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d040      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a68      	ldr	r2, [pc, #416]	; (8003a2c <HAL_DMA_Abort+0x450>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d03b      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a67      	ldr	r2, [pc, #412]	; (8003a30 <HAL_DMA_Abort+0x454>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d036      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a65      	ldr	r2, [pc, #404]	; (8003a34 <HAL_DMA_Abort+0x458>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d031      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a64      	ldr	r2, [pc, #400]	; (8003a38 <HAL_DMA_Abort+0x45c>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d02c      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a62      	ldr	r2, [pc, #392]	; (8003a3c <HAL_DMA_Abort+0x460>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d027      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a61      	ldr	r2, [pc, #388]	; (8003a40 <HAL_DMA_Abort+0x464>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a5f      	ldr	r2, [pc, #380]	; (8003a44 <HAL_DMA_Abort+0x468>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01d      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5e      	ldr	r2, [pc, #376]	; (8003a48 <HAL_DMA_Abort+0x46c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5c      	ldr	r2, [pc, #368]	; (8003a4c <HAL_DMA_Abort+0x470>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <HAL_DMA_Abort+0x474>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a59      	ldr	r2, [pc, #356]	; (8003a54 <HAL_DMA_Abort+0x478>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a58      	ldr	r2, [pc, #352]	; (8003a58 <HAL_DMA_Abort+0x47c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_DMA_Abort+0x32a>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a56      	ldr	r2, [pc, #344]	; (8003a5c <HAL_DMA_Abort+0x480>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d108      	bne.n	8003918 <HAL_DMA_Abort+0x33c>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	e007      	b.n	8003928 <HAL_DMA_Abort+0x34c>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003928:	e013      	b.n	8003952 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800392a:	f7ff f99b 	bl	8002c64 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b05      	cmp	r3, #5
 8003936:	d90c      	bls.n	8003952 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2203      	movs	r2, #3
 8003942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e12d      	b.n	8003bae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e5      	bne.n	800392a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a2f      	ldr	r2, [pc, #188]	; (8003a20 <HAL_DMA_Abort+0x444>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d04a      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a2d      	ldr	r2, [pc, #180]	; (8003a24 <HAL_DMA_Abort+0x448>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d045      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a2c      	ldr	r2, [pc, #176]	; (8003a28 <HAL_DMA_Abort+0x44c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d040      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a2a      	ldr	r2, [pc, #168]	; (8003a2c <HAL_DMA_Abort+0x450>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d03b      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a29      	ldr	r2, [pc, #164]	; (8003a30 <HAL_DMA_Abort+0x454>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d036      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a27      	ldr	r2, [pc, #156]	; (8003a34 <HAL_DMA_Abort+0x458>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d031      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a26      	ldr	r2, [pc, #152]	; (8003a38 <HAL_DMA_Abort+0x45c>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d02c      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a24      	ldr	r2, [pc, #144]	; (8003a3c <HAL_DMA_Abort+0x460>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d027      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <HAL_DMA_Abort+0x464>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_DMA_Abort+0x468>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01d      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a20      	ldr	r2, [pc, #128]	; (8003a48 <HAL_DMA_Abort+0x46c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d018      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a1e      	ldr	r2, [pc, #120]	; (8003a4c <HAL_DMA_Abort+0x470>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d013      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_DMA_Abort+0x474>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d00e      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <HAL_DMA_Abort+0x478>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d009      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <HAL_DMA_Abort+0x47c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d004      	beq.n	80039fe <HAL_DMA_Abort+0x422>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a18      	ldr	r2, [pc, #96]	; (8003a5c <HAL_DMA_Abort+0x480>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d101      	bne.n	8003a02 <HAL_DMA_Abort+0x426>
 80039fe:	2301      	movs	r3, #1
 8003a00:	e000      	b.n	8003a04 <HAL_DMA_Abort+0x428>
 8003a02:	2300      	movs	r3, #0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d02b      	beq.n	8003a60 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a0c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	f003 031f 	and.w	r3, r3, #31
 8003a16:	223f      	movs	r2, #63	; 0x3f
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	609a      	str	r2, [r3, #8]
 8003a1e:	e02a      	b.n	8003a76 <HAL_DMA_Abort+0x49a>
 8003a20:	40020010 	.word	0x40020010
 8003a24:	40020028 	.word	0x40020028
 8003a28:	40020040 	.word	0x40020040
 8003a2c:	40020058 	.word	0x40020058
 8003a30:	40020070 	.word	0x40020070
 8003a34:	40020088 	.word	0x40020088
 8003a38:	400200a0 	.word	0x400200a0
 8003a3c:	400200b8 	.word	0x400200b8
 8003a40:	40020410 	.word	0x40020410
 8003a44:	40020428 	.word	0x40020428
 8003a48:	40020440 	.word	0x40020440
 8003a4c:	40020458 	.word	0x40020458
 8003a50:	40020470 	.word	0x40020470
 8003a54:	40020488 	.word	0x40020488
 8003a58:	400204a0 	.word	0x400204a0
 8003a5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a64:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6a:	f003 031f 	and.w	r3, r3, #31
 8003a6e:	2201      	movs	r2, #1
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a4f      	ldr	r2, [pc, #316]	; (8003bb8 <HAL_DMA_Abort+0x5dc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d072      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a4d      	ldr	r2, [pc, #308]	; (8003bbc <HAL_DMA_Abort+0x5e0>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d06d      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a4c      	ldr	r2, [pc, #304]	; (8003bc0 <HAL_DMA_Abort+0x5e4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d068      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a4a      	ldr	r2, [pc, #296]	; (8003bc4 <HAL_DMA_Abort+0x5e8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d063      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a49      	ldr	r2, [pc, #292]	; (8003bc8 <HAL_DMA_Abort+0x5ec>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d05e      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a47      	ldr	r2, [pc, #284]	; (8003bcc <HAL_DMA_Abort+0x5f0>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d059      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a46      	ldr	r2, [pc, #280]	; (8003bd0 <HAL_DMA_Abort+0x5f4>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d054      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a44      	ldr	r2, [pc, #272]	; (8003bd4 <HAL_DMA_Abort+0x5f8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d04f      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a43      	ldr	r2, [pc, #268]	; (8003bd8 <HAL_DMA_Abort+0x5fc>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d04a      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a41      	ldr	r2, [pc, #260]	; (8003bdc <HAL_DMA_Abort+0x600>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d045      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a40      	ldr	r2, [pc, #256]	; (8003be0 <HAL_DMA_Abort+0x604>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d040      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a3e      	ldr	r2, [pc, #248]	; (8003be4 <HAL_DMA_Abort+0x608>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d03b      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <HAL_DMA_Abort+0x60c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d036      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a3b      	ldr	r2, [pc, #236]	; (8003bec <HAL_DMA_Abort+0x610>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d031      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a3a      	ldr	r2, [pc, #232]	; (8003bf0 <HAL_DMA_Abort+0x614>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d02c      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a38      	ldr	r2, [pc, #224]	; (8003bf4 <HAL_DMA_Abort+0x618>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d027      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a37      	ldr	r2, [pc, #220]	; (8003bf8 <HAL_DMA_Abort+0x61c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d022      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a35      	ldr	r2, [pc, #212]	; (8003bfc <HAL_DMA_Abort+0x620>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d01d      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a34      	ldr	r2, [pc, #208]	; (8003c00 <HAL_DMA_Abort+0x624>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d018      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a32      	ldr	r2, [pc, #200]	; (8003c04 <HAL_DMA_Abort+0x628>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a31      	ldr	r2, [pc, #196]	; (8003c08 <HAL_DMA_Abort+0x62c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00e      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2f      	ldr	r2, [pc, #188]	; (8003c0c <HAL_DMA_Abort+0x630>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d009      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a2e      	ldr	r2, [pc, #184]	; (8003c10 <HAL_DMA_Abort+0x634>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d004      	beq.n	8003b66 <HAL_DMA_Abort+0x58a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a2c      	ldr	r2, [pc, #176]	; (8003c14 <HAL_DMA_Abort+0x638>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d101      	bne.n	8003b6a <HAL_DMA_Abort+0x58e>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <HAL_DMA_Abort+0x590>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003b78:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00c      	beq.n	8003b9c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b90:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003b9a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3718      	adds	r7, #24
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40020010 	.word	0x40020010
 8003bbc:	40020028 	.word	0x40020028
 8003bc0:	40020040 	.word	0x40020040
 8003bc4:	40020058 	.word	0x40020058
 8003bc8:	40020070 	.word	0x40020070
 8003bcc:	40020088 	.word	0x40020088
 8003bd0:	400200a0 	.word	0x400200a0
 8003bd4:	400200b8 	.word	0x400200b8
 8003bd8:	40020410 	.word	0x40020410
 8003bdc:	40020428 	.word	0x40020428
 8003be0:	40020440 	.word	0x40020440
 8003be4:	40020458 	.word	0x40020458
 8003be8:	40020470 	.word	0x40020470
 8003bec:	40020488 	.word	0x40020488
 8003bf0:	400204a0 	.word	0x400204a0
 8003bf4:	400204b8 	.word	0x400204b8
 8003bf8:	58025408 	.word	0x58025408
 8003bfc:	5802541c 	.word	0x5802541c
 8003c00:	58025430 	.word	0x58025430
 8003c04:	58025444 	.word	0x58025444
 8003c08:	58025458 	.word	0x58025458
 8003c0c:	5802546c 	.word	0x5802546c
 8003c10:	58025480 	.word	0x58025480
 8003c14:	58025494 	.word	0x58025494

08003c18 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d101      	bne.n	8003c2a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e237      	b.n	800409a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d004      	beq.n	8003c40 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2280      	movs	r2, #128	; 0x80
 8003c3a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e22c      	b.n	800409a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a5c      	ldr	r2, [pc, #368]	; (8003db8 <HAL_DMA_Abort_IT+0x1a0>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d04a      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a5b      	ldr	r2, [pc, #364]	; (8003dbc <HAL_DMA_Abort_IT+0x1a4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d045      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a59      	ldr	r2, [pc, #356]	; (8003dc0 <HAL_DMA_Abort_IT+0x1a8>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d040      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_DMA_Abort_IT+0x1ac>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d03b      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a56      	ldr	r2, [pc, #344]	; (8003dc8 <HAL_DMA_Abort_IT+0x1b0>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d036      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a55      	ldr	r2, [pc, #340]	; (8003dcc <HAL_DMA_Abort_IT+0x1b4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d031      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a53      	ldr	r2, [pc, #332]	; (8003dd0 <HAL_DMA_Abort_IT+0x1b8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d02c      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a52      	ldr	r2, [pc, #328]	; (8003dd4 <HAL_DMA_Abort_IT+0x1bc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d027      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a50      	ldr	r2, [pc, #320]	; (8003dd8 <HAL_DMA_Abort_IT+0x1c0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d022      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a4f      	ldr	r2, [pc, #316]	; (8003ddc <HAL_DMA_Abort_IT+0x1c4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d01d      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a4d      	ldr	r2, [pc, #308]	; (8003de0 <HAL_DMA_Abort_IT+0x1c8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d018      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a4c      	ldr	r2, [pc, #304]	; (8003de4 <HAL_DMA_Abort_IT+0x1cc>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d013      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a4a      	ldr	r2, [pc, #296]	; (8003de8 <HAL_DMA_Abort_IT+0x1d0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d00e      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a49      	ldr	r2, [pc, #292]	; (8003dec <HAL_DMA_Abort_IT+0x1d4>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d009      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a47      	ldr	r2, [pc, #284]	; (8003df0 <HAL_DMA_Abort_IT+0x1d8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d004      	beq.n	8003ce0 <HAL_DMA_Abort_IT+0xc8>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a46      	ldr	r2, [pc, #280]	; (8003df4 <HAL_DMA_Abort_IT+0x1dc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_DMA_Abort_IT+0xcc>
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <HAL_DMA_Abort_IT+0xce>
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8086 	beq.w	8003df8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2204      	movs	r2, #4
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a2f      	ldr	r2, [pc, #188]	; (8003db8 <HAL_DMA_Abort_IT+0x1a0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d04a      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a2e      	ldr	r2, [pc, #184]	; (8003dbc <HAL_DMA_Abort_IT+0x1a4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d045      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a2c      	ldr	r2, [pc, #176]	; (8003dc0 <HAL_DMA_Abort_IT+0x1a8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d040      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a2b      	ldr	r2, [pc, #172]	; (8003dc4 <HAL_DMA_Abort_IT+0x1ac>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d03b      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a29      	ldr	r2, [pc, #164]	; (8003dc8 <HAL_DMA_Abort_IT+0x1b0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d036      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <HAL_DMA_Abort_IT+0x1b4>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d031      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a26      	ldr	r2, [pc, #152]	; (8003dd0 <HAL_DMA_Abort_IT+0x1b8>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d02c      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <HAL_DMA_Abort_IT+0x1bc>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d027      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <HAL_DMA_Abort_IT+0x1c0>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d022      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <HAL_DMA_Abort_IT+0x1c4>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d01d      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a20      	ldr	r2, [pc, #128]	; (8003de0 <HAL_DMA_Abort_IT+0x1c8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d018      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <HAL_DMA_Abort_IT+0x1cc>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d013      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_DMA_Abort_IT+0x1d0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00e      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <HAL_DMA_Abort_IT+0x1d4>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d009      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <HAL_DMA_Abort_IT+0x1d8>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d004      	beq.n	8003d94 <HAL_DMA_Abort_IT+0x17c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a19      	ldr	r2, [pc, #100]	; (8003df4 <HAL_DMA_Abort_IT+0x1dc>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d108      	bne.n	8003da6 <HAL_DMA_Abort_IT+0x18e>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0201 	bic.w	r2, r2, #1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e178      	b.n	8004098 <HAL_DMA_Abort_IT+0x480>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 0201 	bic.w	r2, r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	e16f      	b.n	8004098 <HAL_DMA_Abort_IT+0x480>
 8003db8:	40020010 	.word	0x40020010
 8003dbc:	40020028 	.word	0x40020028
 8003dc0:	40020040 	.word	0x40020040
 8003dc4:	40020058 	.word	0x40020058
 8003dc8:	40020070 	.word	0x40020070
 8003dcc:	40020088 	.word	0x40020088
 8003dd0:	400200a0 	.word	0x400200a0
 8003dd4:	400200b8 	.word	0x400200b8
 8003dd8:	40020410 	.word	0x40020410
 8003ddc:	40020428 	.word	0x40020428
 8003de0:	40020440 	.word	0x40020440
 8003de4:	40020458 	.word	0x40020458
 8003de8:	40020470 	.word	0x40020470
 8003dec:	40020488 	.word	0x40020488
 8003df0:	400204a0 	.word	0x400204a0
 8003df4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 020e 	bic.w	r2, r2, #14
 8003e06:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a6c      	ldr	r2, [pc, #432]	; (8003fc0 <HAL_DMA_Abort_IT+0x3a8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d04a      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a6b      	ldr	r2, [pc, #428]	; (8003fc4 <HAL_DMA_Abort_IT+0x3ac>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d045      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a69      	ldr	r2, [pc, #420]	; (8003fc8 <HAL_DMA_Abort_IT+0x3b0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d040      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a68      	ldr	r2, [pc, #416]	; (8003fcc <HAL_DMA_Abort_IT+0x3b4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d03b      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a66      	ldr	r2, [pc, #408]	; (8003fd0 <HAL_DMA_Abort_IT+0x3b8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d036      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a65      	ldr	r2, [pc, #404]	; (8003fd4 <HAL_DMA_Abort_IT+0x3bc>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d031      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a63      	ldr	r2, [pc, #396]	; (8003fd8 <HAL_DMA_Abort_IT+0x3c0>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02c      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a62      	ldr	r2, [pc, #392]	; (8003fdc <HAL_DMA_Abort_IT+0x3c4>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d027      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a60      	ldr	r2, [pc, #384]	; (8003fe0 <HAL_DMA_Abort_IT+0x3c8>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d022      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a5f      	ldr	r2, [pc, #380]	; (8003fe4 <HAL_DMA_Abort_IT+0x3cc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d01d      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a5d      	ldr	r2, [pc, #372]	; (8003fe8 <HAL_DMA_Abort_IT+0x3d0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d018      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a5c      	ldr	r2, [pc, #368]	; (8003fec <HAL_DMA_Abort_IT+0x3d4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d013      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a5a      	ldr	r2, [pc, #360]	; (8003ff0 <HAL_DMA_Abort_IT+0x3d8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a59      	ldr	r2, [pc, #356]	; (8003ff4 <HAL_DMA_Abort_IT+0x3dc>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d009      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <HAL_DMA_Abort_IT+0x3e0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d004      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x290>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a56      	ldr	r2, [pc, #344]	; (8003ffc <HAL_DMA_Abort_IT+0x3e4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d108      	bne.n	8003eba <HAL_DMA_Abort_IT+0x2a2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0201 	bic.w	r2, r2, #1
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	e007      	b.n	8003eca <HAL_DMA_Abort_IT+0x2b2>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f022 0201 	bic.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a3c      	ldr	r2, [pc, #240]	; (8003fc0 <HAL_DMA_Abort_IT+0x3a8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d072      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a3a      	ldr	r2, [pc, #232]	; (8003fc4 <HAL_DMA_Abort_IT+0x3ac>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d06d      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a39      	ldr	r2, [pc, #228]	; (8003fc8 <HAL_DMA_Abort_IT+0x3b0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d068      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a37      	ldr	r2, [pc, #220]	; (8003fcc <HAL_DMA_Abort_IT+0x3b4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d063      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a36      	ldr	r2, [pc, #216]	; (8003fd0 <HAL_DMA_Abort_IT+0x3b8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d05e      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a34      	ldr	r2, [pc, #208]	; (8003fd4 <HAL_DMA_Abort_IT+0x3bc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d059      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a33      	ldr	r2, [pc, #204]	; (8003fd8 <HAL_DMA_Abort_IT+0x3c0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d054      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a31      	ldr	r2, [pc, #196]	; (8003fdc <HAL_DMA_Abort_IT+0x3c4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d04f      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a30      	ldr	r2, [pc, #192]	; (8003fe0 <HAL_DMA_Abort_IT+0x3c8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d04a      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a2e      	ldr	r2, [pc, #184]	; (8003fe4 <HAL_DMA_Abort_IT+0x3cc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d045      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <HAL_DMA_Abort_IT+0x3d0>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d040      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a2b      	ldr	r2, [pc, #172]	; (8003fec <HAL_DMA_Abort_IT+0x3d4>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d03b      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a2a      	ldr	r2, [pc, #168]	; (8003ff0 <HAL_DMA_Abort_IT+0x3d8>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d036      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a28      	ldr	r2, [pc, #160]	; (8003ff4 <HAL_DMA_Abort_IT+0x3dc>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d031      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a27      	ldr	r2, [pc, #156]	; (8003ff8 <HAL_DMA_Abort_IT+0x3e0>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d02c      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <HAL_DMA_Abort_IT+0x3e4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d027      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a24      	ldr	r2, [pc, #144]	; (8004000 <HAL_DMA_Abort_IT+0x3e8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a22      	ldr	r2, [pc, #136]	; (8004004 <HAL_DMA_Abort_IT+0x3ec>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01d      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a21      	ldr	r2, [pc, #132]	; (8004008 <HAL_DMA_Abort_IT+0x3f0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d018      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1f      	ldr	r2, [pc, #124]	; (800400c <HAL_DMA_Abort_IT+0x3f4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d013      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1e      	ldr	r2, [pc, #120]	; (8004010 <HAL_DMA_Abort_IT+0x3f8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d00e      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <HAL_DMA_Abort_IT+0x3fc>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d009      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <HAL_DMA_Abort_IT+0x400>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d004      	beq.n	8003fba <HAL_DMA_Abort_IT+0x3a2>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a19      	ldr	r2, [pc, #100]	; (800401c <HAL_DMA_Abort_IT+0x404>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d132      	bne.n	8004020 <HAL_DMA_Abort_IT+0x408>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e031      	b.n	8004022 <HAL_DMA_Abort_IT+0x40a>
 8003fbe:	bf00      	nop
 8003fc0:	40020010 	.word	0x40020010
 8003fc4:	40020028 	.word	0x40020028
 8003fc8:	40020040 	.word	0x40020040
 8003fcc:	40020058 	.word	0x40020058
 8003fd0:	40020070 	.word	0x40020070
 8003fd4:	40020088 	.word	0x40020088
 8003fd8:	400200a0 	.word	0x400200a0
 8003fdc:	400200b8 	.word	0x400200b8
 8003fe0:	40020410 	.word	0x40020410
 8003fe4:	40020428 	.word	0x40020428
 8003fe8:	40020440 	.word	0x40020440
 8003fec:	40020458 	.word	0x40020458
 8003ff0:	40020470 	.word	0x40020470
 8003ff4:	40020488 	.word	0x40020488
 8003ff8:	400204a0 	.word	0x400204a0
 8003ffc:	400204b8 	.word	0x400204b8
 8004000:	58025408 	.word	0x58025408
 8004004:	5802541c 	.word	0x5802541c
 8004008:	58025430 	.word	0x58025430
 800400c:	58025444 	.word	0x58025444
 8004010:	58025458 	.word	0x58025458
 8004014:	5802546c 	.word	0x5802546c
 8004018:	58025480 	.word	0x58025480
 800401c:	58025494 	.word	0x58025494
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d028      	beq.n	8004078 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004030:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004034:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2201      	movs	r2, #1
 8004046:	409a      	lsls	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004054:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00c      	beq.n	8004078 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800406c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004076:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop

080040a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80040ac:	2300      	movs	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040b0:	4b67      	ldr	r3, [pc, #412]	; (8004250 <HAL_DMA_IRQHandler+0x1ac>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a67      	ldr	r2, [pc, #412]	; (8004254 <HAL_DMA_IRQHandler+0x1b0>)
 80040b6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ba:	0a9b      	lsrs	r3, r3, #10
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80040ca:	6a3b      	ldr	r3, [r7, #32]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a5f      	ldr	r2, [pc, #380]	; (8004258 <HAL_DMA_IRQHandler+0x1b4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d04a      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a5d      	ldr	r2, [pc, #372]	; (800425c <HAL_DMA_IRQHandler+0x1b8>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d045      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a5c      	ldr	r2, [pc, #368]	; (8004260 <HAL_DMA_IRQHandler+0x1bc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d040      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a5a      	ldr	r2, [pc, #360]	; (8004264 <HAL_DMA_IRQHandler+0x1c0>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d03b      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a59      	ldr	r2, [pc, #356]	; (8004268 <HAL_DMA_IRQHandler+0x1c4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d036      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a57      	ldr	r2, [pc, #348]	; (800426c <HAL_DMA_IRQHandler+0x1c8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d031      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a56      	ldr	r2, [pc, #344]	; (8004270 <HAL_DMA_IRQHandler+0x1cc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d02c      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a54      	ldr	r2, [pc, #336]	; (8004274 <HAL_DMA_IRQHandler+0x1d0>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d027      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a53      	ldr	r2, [pc, #332]	; (8004278 <HAL_DMA_IRQHandler+0x1d4>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a51      	ldr	r2, [pc, #324]	; (800427c <HAL_DMA_IRQHandler+0x1d8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d01d      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a50      	ldr	r2, [pc, #320]	; (8004280 <HAL_DMA_IRQHandler+0x1dc>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a4e      	ldr	r2, [pc, #312]	; (8004284 <HAL_DMA_IRQHandler+0x1e0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a4d      	ldr	r2, [pc, #308]	; (8004288 <HAL_DMA_IRQHandler+0x1e4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a4b      	ldr	r2, [pc, #300]	; (800428c <HAL_DMA_IRQHandler+0x1e8>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a4a      	ldr	r2, [pc, #296]	; (8004290 <HAL_DMA_IRQHandler+0x1ec>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_DMA_IRQHandler+0xd2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a48      	ldr	r2, [pc, #288]	; (8004294 <HAL_DMA_IRQHandler+0x1f0>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d101      	bne.n	800417a <HAL_DMA_IRQHandler+0xd6>
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <HAL_DMA_IRQHandler+0xd8>
 800417a:	2300      	movs	r3, #0
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 842b 	beq.w	80049d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004186:	f003 031f 	and.w	r3, r3, #31
 800418a:	2208      	movs	r2, #8
 800418c:	409a      	lsls	r2, r3
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	2b00      	cmp	r3, #0
 8004194:	f000 80a2 	beq.w	80042dc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <HAL_DMA_IRQHandler+0x1b4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d04a      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2d      	ldr	r2, [pc, #180]	; (800425c <HAL_DMA_IRQHandler+0x1b8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d045      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <HAL_DMA_IRQHandler+0x1bc>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d040      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a2a      	ldr	r2, [pc, #168]	; (8004264 <HAL_DMA_IRQHandler+0x1c0>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d03b      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a28      	ldr	r2, [pc, #160]	; (8004268 <HAL_DMA_IRQHandler+0x1c4>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d036      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a27      	ldr	r2, [pc, #156]	; (800426c <HAL_DMA_IRQHandler+0x1c8>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d031      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a25      	ldr	r2, [pc, #148]	; (8004270 <HAL_DMA_IRQHandler+0x1cc>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d02c      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a24      	ldr	r2, [pc, #144]	; (8004274 <HAL_DMA_IRQHandler+0x1d0>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d027      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a22      	ldr	r2, [pc, #136]	; (8004278 <HAL_DMA_IRQHandler+0x1d4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d022      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a21      	ldr	r2, [pc, #132]	; (800427c <HAL_DMA_IRQHandler+0x1d8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d01d      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1f      	ldr	r2, [pc, #124]	; (8004280 <HAL_DMA_IRQHandler+0x1dc>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d018      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1e      	ldr	r2, [pc, #120]	; (8004284 <HAL_DMA_IRQHandler+0x1e0>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d013      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1c      	ldr	r2, [pc, #112]	; (8004288 <HAL_DMA_IRQHandler+0x1e4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00e      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1b      	ldr	r2, [pc, #108]	; (800428c <HAL_DMA_IRQHandler+0x1e8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d009      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a19      	ldr	r2, [pc, #100]	; (8004290 <HAL_DMA_IRQHandler+0x1ec>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d004      	beq.n	8004238 <HAL_DMA_IRQHandler+0x194>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a18      	ldr	r2, [pc, #96]	; (8004294 <HAL_DMA_IRQHandler+0x1f0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d12f      	bne.n	8004298 <HAL_DMA_IRQHandler+0x1f4>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0304 	and.w	r3, r3, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bf14      	ite	ne
 8004246:	2301      	movne	r3, #1
 8004248:	2300      	moveq	r3, #0
 800424a:	b2db      	uxtb	r3, r3
 800424c:	e02e      	b.n	80042ac <HAL_DMA_IRQHandler+0x208>
 800424e:	bf00      	nop
 8004250:	24000000 	.word	0x24000000
 8004254:	1b4e81b5 	.word	0x1b4e81b5
 8004258:	40020010 	.word	0x40020010
 800425c:	40020028 	.word	0x40020028
 8004260:	40020040 	.word	0x40020040
 8004264:	40020058 	.word	0x40020058
 8004268:	40020070 	.word	0x40020070
 800426c:	40020088 	.word	0x40020088
 8004270:	400200a0 	.word	0x400200a0
 8004274:	400200b8 	.word	0x400200b8
 8004278:	40020410 	.word	0x40020410
 800427c:	40020428 	.word	0x40020428
 8004280:	40020440 	.word	0x40020440
 8004284:	40020458 	.word	0x40020458
 8004288:	40020470 	.word	0x40020470
 800428c:	40020488 	.word	0x40020488
 8004290:	400204a0 	.word	0x400204a0
 8004294:	400204b8 	.word	0x400204b8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0308 	and.w	r3, r3, #8
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	bf14      	ite	ne
 80042a6:	2301      	movne	r3, #1
 80042a8:	2300      	moveq	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d015      	beq.n	80042dc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	2208      	movs	r2, #8
 80042ca:	409a      	lsls	r2, r3
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d4:	f043 0201 	orr.w	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e0:	f003 031f 	and.w	r3, r3, #31
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	fa22 f303 	lsr.w	r3, r2, r3
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d06e      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a69      	ldr	r2, [pc, #420]	; (800449c <HAL_DMA_IRQHandler+0x3f8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d04a      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a67      	ldr	r2, [pc, #412]	; (80044a0 <HAL_DMA_IRQHandler+0x3fc>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d045      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a66      	ldr	r2, [pc, #408]	; (80044a4 <HAL_DMA_IRQHandler+0x400>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d040      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a64      	ldr	r2, [pc, #400]	; (80044a8 <HAL_DMA_IRQHandler+0x404>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d03b      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a63      	ldr	r2, [pc, #396]	; (80044ac <HAL_DMA_IRQHandler+0x408>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d036      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a61      	ldr	r2, [pc, #388]	; (80044b0 <HAL_DMA_IRQHandler+0x40c>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d031      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a60      	ldr	r2, [pc, #384]	; (80044b4 <HAL_DMA_IRQHandler+0x410>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d02c      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a5e      	ldr	r2, [pc, #376]	; (80044b8 <HAL_DMA_IRQHandler+0x414>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d027      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a5d      	ldr	r2, [pc, #372]	; (80044bc <HAL_DMA_IRQHandler+0x418>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5b      	ldr	r2, [pc, #364]	; (80044c0 <HAL_DMA_IRQHandler+0x41c>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01d      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5a      	ldr	r2, [pc, #360]	; (80044c4 <HAL_DMA_IRQHandler+0x420>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a58      	ldr	r2, [pc, #352]	; (80044c8 <HAL_DMA_IRQHandler+0x424>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a57      	ldr	r2, [pc, #348]	; (80044cc <HAL_DMA_IRQHandler+0x428>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a55      	ldr	r2, [pc, #340]	; (80044d0 <HAL_DMA_IRQHandler+0x42c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a54      	ldr	r2, [pc, #336]	; (80044d4 <HAL_DMA_IRQHandler+0x430>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_DMA_IRQHandler+0x2ee>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a52      	ldr	r2, [pc, #328]	; (80044d8 <HAL_DMA_IRQHandler+0x434>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d10a      	bne.n	80043a8 <HAL_DMA_IRQHandler+0x304>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800439c:	2b00      	cmp	r3, #0
 800439e:	bf14      	ite	ne
 80043a0:	2301      	movne	r3, #1
 80043a2:	2300      	moveq	r3, #0
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	e003      	b.n	80043b0 <HAL_DMA_IRQHandler+0x30c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00d      	beq.n	80043d0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	2201      	movs	r2, #1
 80043be:	409a      	lsls	r2, r3
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c8:	f043 0202 	orr.w	r2, r3, #2
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	2204      	movs	r2, #4
 80043da:	409a      	lsls	r2, r3
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 808f 	beq.w	8004504 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2c      	ldr	r2, [pc, #176]	; (800449c <HAL_DMA_IRQHandler+0x3f8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d04a      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2a      	ldr	r2, [pc, #168]	; (80044a0 <HAL_DMA_IRQHandler+0x3fc>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d045      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <HAL_DMA_IRQHandler+0x400>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d040      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <HAL_DMA_IRQHandler+0x404>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d03b      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a26      	ldr	r2, [pc, #152]	; (80044ac <HAL_DMA_IRQHandler+0x408>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d036      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a24      	ldr	r2, [pc, #144]	; (80044b0 <HAL_DMA_IRQHandler+0x40c>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d031      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a23      	ldr	r2, [pc, #140]	; (80044b4 <HAL_DMA_IRQHandler+0x410>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d02c      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a21      	ldr	r2, [pc, #132]	; (80044b8 <HAL_DMA_IRQHandler+0x414>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d027      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a20      	ldr	r2, [pc, #128]	; (80044bc <HAL_DMA_IRQHandler+0x418>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d022      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1e      	ldr	r2, [pc, #120]	; (80044c0 <HAL_DMA_IRQHandler+0x41c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01d      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1d      	ldr	r2, [pc, #116]	; (80044c4 <HAL_DMA_IRQHandler+0x420>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d018      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1b      	ldr	r2, [pc, #108]	; (80044c8 <HAL_DMA_IRQHandler+0x424>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d013      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1a      	ldr	r2, [pc, #104]	; (80044cc <HAL_DMA_IRQHandler+0x428>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d00e      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a18      	ldr	r2, [pc, #96]	; (80044d0 <HAL_DMA_IRQHandler+0x42c>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d009      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a17      	ldr	r2, [pc, #92]	; (80044d4 <HAL_DMA_IRQHandler+0x430>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d004      	beq.n	8004486 <HAL_DMA_IRQHandler+0x3e2>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <HAL_DMA_IRQHandler+0x434>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d12a      	bne.n	80044dc <HAL_DMA_IRQHandler+0x438>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf14      	ite	ne
 8004494:	2301      	movne	r3, #1
 8004496:	2300      	moveq	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e023      	b.n	80044e4 <HAL_DMA_IRQHandler+0x440>
 800449c:	40020010 	.word	0x40020010
 80044a0:	40020028 	.word	0x40020028
 80044a4:	40020040 	.word	0x40020040
 80044a8:	40020058 	.word	0x40020058
 80044ac:	40020070 	.word	0x40020070
 80044b0:	40020088 	.word	0x40020088
 80044b4:	400200a0 	.word	0x400200a0
 80044b8:	400200b8 	.word	0x400200b8
 80044bc:	40020410 	.word	0x40020410
 80044c0:	40020428 	.word	0x40020428
 80044c4:	40020440 	.word	0x40020440
 80044c8:	40020458 	.word	0x40020458
 80044cc:	40020470 	.word	0x40020470
 80044d0:	40020488 	.word	0x40020488
 80044d4:	400204a0 	.word	0x400204a0
 80044d8:	400204b8 	.word	0x400204b8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2300      	movs	r3, #0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00d      	beq.n	8004504 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ec:	f003 031f 	and.w	r3, r3, #31
 80044f0:	2204      	movs	r2, #4
 80044f2:	409a      	lsls	r2, r3
 80044f4:	6a3b      	ldr	r3, [r7, #32]
 80044f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	f043 0204 	orr.w	r2, r3, #4
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004508:	f003 031f 	and.w	r3, r3, #31
 800450c:	2210      	movs	r2, #16
 800450e:	409a      	lsls	r2, r3
 8004510:	69bb      	ldr	r3, [r7, #24]
 8004512:	4013      	ands	r3, r2
 8004514:	2b00      	cmp	r3, #0
 8004516:	f000 80a6 	beq.w	8004666 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a85      	ldr	r2, [pc, #532]	; (8004734 <HAL_DMA_IRQHandler+0x690>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d04a      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a83      	ldr	r2, [pc, #524]	; (8004738 <HAL_DMA_IRQHandler+0x694>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d045      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a82      	ldr	r2, [pc, #520]	; (800473c <HAL_DMA_IRQHandler+0x698>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d040      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a80      	ldr	r2, [pc, #512]	; (8004740 <HAL_DMA_IRQHandler+0x69c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d03b      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a7f      	ldr	r2, [pc, #508]	; (8004744 <HAL_DMA_IRQHandler+0x6a0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d036      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a7d      	ldr	r2, [pc, #500]	; (8004748 <HAL_DMA_IRQHandler+0x6a4>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d031      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a7c      	ldr	r2, [pc, #496]	; (800474c <HAL_DMA_IRQHandler+0x6a8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d02c      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a7a      	ldr	r2, [pc, #488]	; (8004750 <HAL_DMA_IRQHandler+0x6ac>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d027      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a79      	ldr	r2, [pc, #484]	; (8004754 <HAL_DMA_IRQHandler+0x6b0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d022      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a77      	ldr	r2, [pc, #476]	; (8004758 <HAL_DMA_IRQHandler+0x6b4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d01d      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a76      	ldr	r2, [pc, #472]	; (800475c <HAL_DMA_IRQHandler+0x6b8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d018      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a74      	ldr	r2, [pc, #464]	; (8004760 <HAL_DMA_IRQHandler+0x6bc>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d013      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a73      	ldr	r2, [pc, #460]	; (8004764 <HAL_DMA_IRQHandler+0x6c0>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00e      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a71      	ldr	r2, [pc, #452]	; (8004768 <HAL_DMA_IRQHandler+0x6c4>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d009      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a70      	ldr	r2, [pc, #448]	; (800476c <HAL_DMA_IRQHandler+0x6c8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d004      	beq.n	80045ba <HAL_DMA_IRQHandler+0x516>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a6e      	ldr	r2, [pc, #440]	; (8004770 <HAL_DMA_IRQHandler+0x6cc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d10a      	bne.n	80045d0 <HAL_DMA_IRQHandler+0x52c>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf14      	ite	ne
 80045c8:	2301      	movne	r3, #1
 80045ca:	2300      	moveq	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	e009      	b.n	80045e4 <HAL_DMA_IRQHandler+0x540>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0304 	and.w	r3, r3, #4
 80045da:	2b00      	cmp	r3, #0
 80045dc:	bf14      	ite	ne
 80045de:	2301      	movne	r3, #1
 80045e0:	2300      	moveq	r3, #0
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d03e      	beq.n	8004666 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ec:	f003 031f 	and.w	r3, r3, #31
 80045f0:	2210      	movs	r2, #16
 80045f2:	409a      	lsls	r2, r3
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d018      	beq.n	8004638 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d108      	bne.n	8004626 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b00      	cmp	r3, #0
 800461a:	d024      	beq.n	8004666 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	4798      	blx	r3
 8004624:	e01f      	b.n	8004666 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462a:	2b00      	cmp	r3, #0
 800462c:	d01b      	beq.n	8004666 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	4798      	blx	r3
 8004636:	e016      	b.n	8004666 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	d107      	bne.n	8004656 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0208 	bic.w	r2, r2, #8
 8004654:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800466a:	f003 031f 	and.w	r3, r3, #31
 800466e:	2220      	movs	r2, #32
 8004670:	409a      	lsls	r2, r3
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 8110 	beq.w	800489c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a2c      	ldr	r2, [pc, #176]	; (8004734 <HAL_DMA_IRQHandler+0x690>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d04a      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a2b      	ldr	r2, [pc, #172]	; (8004738 <HAL_DMA_IRQHandler+0x694>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d045      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a29      	ldr	r2, [pc, #164]	; (800473c <HAL_DMA_IRQHandler+0x698>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d040      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a28      	ldr	r2, [pc, #160]	; (8004740 <HAL_DMA_IRQHandler+0x69c>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d03b      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a26      	ldr	r2, [pc, #152]	; (8004744 <HAL_DMA_IRQHandler+0x6a0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d036      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a25      	ldr	r2, [pc, #148]	; (8004748 <HAL_DMA_IRQHandler+0x6a4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d031      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_DMA_IRQHandler+0x6a8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d02c      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a22      	ldr	r2, [pc, #136]	; (8004750 <HAL_DMA_IRQHandler+0x6ac>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d027      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a20      	ldr	r2, [pc, #128]	; (8004754 <HAL_DMA_IRQHandler+0x6b0>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d022      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1f      	ldr	r2, [pc, #124]	; (8004758 <HAL_DMA_IRQHandler+0x6b4>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d01d      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1d      	ldr	r2, [pc, #116]	; (800475c <HAL_DMA_IRQHandler+0x6b8>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d018      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1c      	ldr	r2, [pc, #112]	; (8004760 <HAL_DMA_IRQHandler+0x6bc>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d013      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1a      	ldr	r2, [pc, #104]	; (8004764 <HAL_DMA_IRQHandler+0x6c0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d00e      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a19      	ldr	r2, [pc, #100]	; (8004768 <HAL_DMA_IRQHandler+0x6c4>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d009      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a17      	ldr	r2, [pc, #92]	; (800476c <HAL_DMA_IRQHandler+0x6c8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <HAL_DMA_IRQHandler+0x678>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a16      	ldr	r2, [pc, #88]	; (8004770 <HAL_DMA_IRQHandler+0x6cc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d12b      	bne.n	8004774 <HAL_DMA_IRQHandler+0x6d0>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	2b00      	cmp	r3, #0
 8004728:	bf14      	ite	ne
 800472a:	2301      	movne	r3, #1
 800472c:	2300      	moveq	r3, #0
 800472e:	b2db      	uxtb	r3, r3
 8004730:	e02a      	b.n	8004788 <HAL_DMA_IRQHandler+0x6e4>
 8004732:	bf00      	nop
 8004734:	40020010 	.word	0x40020010
 8004738:	40020028 	.word	0x40020028
 800473c:	40020040 	.word	0x40020040
 8004740:	40020058 	.word	0x40020058
 8004744:	40020070 	.word	0x40020070
 8004748:	40020088 	.word	0x40020088
 800474c:	400200a0 	.word	0x400200a0
 8004750:	400200b8 	.word	0x400200b8
 8004754:	40020410 	.word	0x40020410
 8004758:	40020428 	.word	0x40020428
 800475c:	40020440 	.word	0x40020440
 8004760:	40020458 	.word	0x40020458
 8004764:	40020470 	.word	0x40020470
 8004768:	40020488 	.word	0x40020488
 800476c:	400204a0 	.word	0x400204a0
 8004770:	400204b8 	.word	0x400204b8
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8087 	beq.w	800489c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004792:	f003 031f 	and.w	r3, r3, #31
 8004796:	2220      	movs	r2, #32
 8004798:	409a      	lsls	r2, r3
 800479a:	6a3b      	ldr	r3, [r7, #32]
 800479c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b04      	cmp	r3, #4
 80047a8:	d139      	bne.n	800481e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0216 	bic.w	r2, r2, #22
 80047b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <HAL_DMA_IRQHandler+0x736>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0208 	bic.w	r2, r2, #8
 80047e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	223f      	movs	r2, #63	; 0x3f
 80047f4:	409a      	lsls	r2, r3
 80047f6:	6a3b      	ldr	r3, [r7, #32]
 80047f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 834a 	beq.w	8004ea8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	4798      	blx	r3
          }
          return;
 800481c:	e344      	b.n	8004ea8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004828:	2b00      	cmp	r3, #0
 800482a:	d018      	beq.n	800485e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	2b00      	cmp	r3, #0
 8004840:	d02c      	beq.n	800489c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	4798      	blx	r3
 800484a:	e027      	b.n	800489c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004850:	2b00      	cmp	r3, #0
 8004852:	d023      	beq.n	800489c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	4798      	blx	r3
 800485c:	e01e      	b.n	800489c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10f      	bne.n	800488c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0210 	bic.w	r2, r2, #16
 800487a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 8306 	beq.w	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f000 8088 	beq.w	80049c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2204      	movs	r2, #4
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a7a      	ldr	r2, [pc, #488]	; (8004aac <HAL_DMA_IRQHandler+0xa08>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d04a      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a79      	ldr	r2, [pc, #484]	; (8004ab0 <HAL_DMA_IRQHandler+0xa0c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d045      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a77      	ldr	r2, [pc, #476]	; (8004ab4 <HAL_DMA_IRQHandler+0xa10>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d040      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a76      	ldr	r2, [pc, #472]	; (8004ab8 <HAL_DMA_IRQHandler+0xa14>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d03b      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a74      	ldr	r2, [pc, #464]	; (8004abc <HAL_DMA_IRQHandler+0xa18>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d036      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a73      	ldr	r2, [pc, #460]	; (8004ac0 <HAL_DMA_IRQHandler+0xa1c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d031      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a71      	ldr	r2, [pc, #452]	; (8004ac4 <HAL_DMA_IRQHandler+0xa20>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d02c      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a70      	ldr	r2, [pc, #448]	; (8004ac8 <HAL_DMA_IRQHandler+0xa24>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d027      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a6e      	ldr	r2, [pc, #440]	; (8004acc <HAL_DMA_IRQHandler+0xa28>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d022      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a6d      	ldr	r2, [pc, #436]	; (8004ad0 <HAL_DMA_IRQHandler+0xa2c>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d01d      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a6b      	ldr	r2, [pc, #428]	; (8004ad4 <HAL_DMA_IRQHandler+0xa30>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d018      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a6a      	ldr	r2, [pc, #424]	; (8004ad8 <HAL_DMA_IRQHandler+0xa34>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d013      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a68      	ldr	r2, [pc, #416]	; (8004adc <HAL_DMA_IRQHandler+0xa38>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00e      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a67      	ldr	r2, [pc, #412]	; (8004ae0 <HAL_DMA_IRQHandler+0xa3c>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a65      	ldr	r2, [pc, #404]	; (8004ae4 <HAL_DMA_IRQHandler+0xa40>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_DMA_IRQHandler+0x8b8>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a64      	ldr	r2, [pc, #400]	; (8004ae8 <HAL_DMA_IRQHandler+0xa44>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d108      	bne.n	800496e <HAL_DMA_IRQHandler+0x8ca>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f022 0201 	bic.w	r2, r2, #1
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	e007      	b.n	800497e <HAL_DMA_IRQHandler+0x8da>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	3301      	adds	r3, #1
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004986:	429a      	cmp	r2, r3
 8004988:	d307      	bcc.n	800499a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0301 	and.w	r3, r3, #1
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1f2      	bne.n	800497e <HAL_DMA_IRQHandler+0x8da>
 8004998:	e000      	b.n	800499c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800499a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2203      	movs	r2, #3
 80049ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80049b2:	e003      	b.n	80049bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f000 8272 	beq.w	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	4798      	blx	r3
 80049d6:	e26c      	b.n	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a43      	ldr	r2, [pc, #268]	; (8004aec <HAL_DMA_IRQHandler+0xa48>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d022      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x984>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a42      	ldr	r2, [pc, #264]	; (8004af0 <HAL_DMA_IRQHandler+0xa4c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d01d      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x984>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a40      	ldr	r2, [pc, #256]	; (8004af4 <HAL_DMA_IRQHandler+0xa50>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d018      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x984>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a3f      	ldr	r2, [pc, #252]	; (8004af8 <HAL_DMA_IRQHandler+0xa54>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d013      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x984>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a3d      	ldr	r2, [pc, #244]	; (8004afc <HAL_DMA_IRQHandler+0xa58>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00e      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x984>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a3c      	ldr	r2, [pc, #240]	; (8004b00 <HAL_DMA_IRQHandler+0xa5c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x984>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a3a      	ldr	r2, [pc, #232]	; (8004b04 <HAL_DMA_IRQHandler+0xa60>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_DMA_IRQHandler+0x984>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a39      	ldr	r2, [pc, #228]	; (8004b08 <HAL_DMA_IRQHandler+0xa64>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d101      	bne.n	8004a2c <HAL_DMA_IRQHandler+0x988>
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <HAL_DMA_IRQHandler+0x98a>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	f000 823f 	beq.w	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	f003 031f 	and.w	r3, r3, #31
 8004a44:	2204      	movs	r2, #4
 8004a46:	409a      	lsls	r2, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4013      	ands	r3, r2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 80cd 	beq.w	8004bec <HAL_DMA_IRQHandler+0xb48>
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80c7 	beq.w	8004bec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a62:	f003 031f 	and.w	r3, r3, #31
 8004a66:	2204      	movs	r2, #4
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d049      	beq.n	8004b0c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d109      	bne.n	8004a96 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 8210 	beq.w	8004eac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a94:	e20a      	b.n	8004eac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	f000 8206 	beq.w	8004eac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004aa8:	e200      	b.n	8004eac <HAL_DMA_IRQHandler+0xe08>
 8004aaa:	bf00      	nop
 8004aac:	40020010 	.word	0x40020010
 8004ab0:	40020028 	.word	0x40020028
 8004ab4:	40020040 	.word	0x40020040
 8004ab8:	40020058 	.word	0x40020058
 8004abc:	40020070 	.word	0x40020070
 8004ac0:	40020088 	.word	0x40020088
 8004ac4:	400200a0 	.word	0x400200a0
 8004ac8:	400200b8 	.word	0x400200b8
 8004acc:	40020410 	.word	0x40020410
 8004ad0:	40020428 	.word	0x40020428
 8004ad4:	40020440 	.word	0x40020440
 8004ad8:	40020458 	.word	0x40020458
 8004adc:	40020470 	.word	0x40020470
 8004ae0:	40020488 	.word	0x40020488
 8004ae4:	400204a0 	.word	0x400204a0
 8004ae8:	400204b8 	.word	0x400204b8
 8004aec:	58025408 	.word	0x58025408
 8004af0:	5802541c 	.word	0x5802541c
 8004af4:	58025430 	.word	0x58025430
 8004af8:	58025444 	.word	0x58025444
 8004afc:	58025458 	.word	0x58025458
 8004b00:	5802546c 	.word	0x5802546c
 8004b04:	58025480 	.word	0x58025480
 8004b08:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	f003 0320 	and.w	r3, r3, #32
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d160      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7f      	ldr	r2, [pc, #508]	; (8004d18 <HAL_DMA_IRQHandler+0xc74>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d04a      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a7d      	ldr	r2, [pc, #500]	; (8004d1c <HAL_DMA_IRQHandler+0xc78>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d045      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a7c      	ldr	r2, [pc, #496]	; (8004d20 <HAL_DMA_IRQHandler+0xc7c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d040      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a7a      	ldr	r2, [pc, #488]	; (8004d24 <HAL_DMA_IRQHandler+0xc80>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d03b      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a79      	ldr	r2, [pc, #484]	; (8004d28 <HAL_DMA_IRQHandler+0xc84>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d036      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a77      	ldr	r2, [pc, #476]	; (8004d2c <HAL_DMA_IRQHandler+0xc88>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d031      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a76      	ldr	r2, [pc, #472]	; (8004d30 <HAL_DMA_IRQHandler+0xc8c>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d02c      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a74      	ldr	r2, [pc, #464]	; (8004d34 <HAL_DMA_IRQHandler+0xc90>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d027      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a73      	ldr	r2, [pc, #460]	; (8004d38 <HAL_DMA_IRQHandler+0xc94>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d022      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a71      	ldr	r2, [pc, #452]	; (8004d3c <HAL_DMA_IRQHandler+0xc98>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d01d      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a70      	ldr	r2, [pc, #448]	; (8004d40 <HAL_DMA_IRQHandler+0xc9c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d018      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a6e      	ldr	r2, [pc, #440]	; (8004d44 <HAL_DMA_IRQHandler+0xca0>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6d      	ldr	r2, [pc, #436]	; (8004d48 <HAL_DMA_IRQHandler+0xca4>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d00e      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a6b      	ldr	r2, [pc, #428]	; (8004d4c <HAL_DMA_IRQHandler+0xca8>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a6a      	ldr	r2, [pc, #424]	; (8004d50 <HAL_DMA_IRQHandler+0xcac>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_DMA_IRQHandler+0xb12>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a68      	ldr	r2, [pc, #416]	; (8004d54 <HAL_DMA_IRQHandler+0xcb0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d108      	bne.n	8004bc8 <HAL_DMA_IRQHandler+0xb24>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0208 	bic.w	r2, r2, #8
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	e007      	b.n	8004bd8 <HAL_DMA_IRQHandler+0xb34>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	f000 8165 	beq.w	8004eac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004bea:	e15f      	b.n	8004eac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bf0:	f003 031f 	and.w	r3, r3, #31
 8004bf4:	2202      	movs	r2, #2
 8004bf6:	409a      	lsls	r2, r3
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80c5 	beq.w	8004d8c <HAL_DMA_IRQHandler+0xce8>
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 80bf 	beq.w	8004d8c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2202      	movs	r2, #2
 8004c18:	409a      	lsls	r2, r3
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d018      	beq.n	8004c5a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 813a 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c44:	e134      	b.n	8004eb0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8130 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c58:	e12a      	b.n	8004eb0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 8089 	bne.w	8004d78 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2b      	ldr	r2, [pc, #172]	; (8004d18 <HAL_DMA_IRQHandler+0xc74>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d04a      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a29      	ldr	r2, [pc, #164]	; (8004d1c <HAL_DMA_IRQHandler+0xc78>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d045      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a28      	ldr	r2, [pc, #160]	; (8004d20 <HAL_DMA_IRQHandler+0xc7c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d040      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a26      	ldr	r2, [pc, #152]	; (8004d24 <HAL_DMA_IRQHandler+0xc80>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d03b      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a25      	ldr	r2, [pc, #148]	; (8004d28 <HAL_DMA_IRQHandler+0xc84>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d036      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a23      	ldr	r2, [pc, #140]	; (8004d2c <HAL_DMA_IRQHandler+0xc88>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d031      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a22      	ldr	r2, [pc, #136]	; (8004d30 <HAL_DMA_IRQHandler+0xc8c>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d02c      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a20      	ldr	r2, [pc, #128]	; (8004d34 <HAL_DMA_IRQHandler+0xc90>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d027      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1f      	ldr	r2, [pc, #124]	; (8004d38 <HAL_DMA_IRQHandler+0xc94>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d022      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a1d      	ldr	r2, [pc, #116]	; (8004d3c <HAL_DMA_IRQHandler+0xc98>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d01d      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a1c      	ldr	r2, [pc, #112]	; (8004d40 <HAL_DMA_IRQHandler+0xc9c>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d018      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a1a      	ldr	r2, [pc, #104]	; (8004d44 <HAL_DMA_IRQHandler+0xca0>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d013      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <HAL_DMA_IRQHandler+0xca4>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d00e      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a17      	ldr	r2, [pc, #92]	; (8004d4c <HAL_DMA_IRQHandler+0xca8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d009      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a16      	ldr	r2, [pc, #88]	; (8004d50 <HAL_DMA_IRQHandler+0xcac>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d004      	beq.n	8004d06 <HAL_DMA_IRQHandler+0xc62>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a14      	ldr	r2, [pc, #80]	; (8004d54 <HAL_DMA_IRQHandler+0xcb0>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d128      	bne.n	8004d58 <HAL_DMA_IRQHandler+0xcb4>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0214 	bic.w	r2, r2, #20
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e027      	b.n	8004d68 <HAL_DMA_IRQHandler+0xcc4>
 8004d18:	40020010 	.word	0x40020010
 8004d1c:	40020028 	.word	0x40020028
 8004d20:	40020040 	.word	0x40020040
 8004d24:	40020058 	.word	0x40020058
 8004d28:	40020070 	.word	0x40020070
 8004d2c:	40020088 	.word	0x40020088
 8004d30:	400200a0 	.word	0x400200a0
 8004d34:	400200b8 	.word	0x400200b8
 8004d38:	40020410 	.word	0x40020410
 8004d3c:	40020428 	.word	0x40020428
 8004d40:	40020440 	.word	0x40020440
 8004d44:	40020458 	.word	0x40020458
 8004d48:	40020470 	.word	0x40020470
 8004d4c:	40020488 	.word	0x40020488
 8004d50:	400204a0 	.word	0x400204a0
 8004d54:	400204b8 	.word	0x400204b8
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 020a 	bic.w	r2, r2, #10
 8004d66:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f000 8097 	beq.w	8004eb0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004d8a:	e091      	b.n	8004eb0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d90:	f003 031f 	and.w	r3, r3, #31
 8004d94:	2208      	movs	r2, #8
 8004d96:	409a      	lsls	r2, r3
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8088 	beq.w	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f003 0308 	and.w	r3, r3, #8
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 8082 	beq.w	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a41      	ldr	r2, [pc, #260]	; (8004eb8 <HAL_DMA_IRQHandler+0xe14>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d04a      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a3f      	ldr	r2, [pc, #252]	; (8004ebc <HAL_DMA_IRQHandler+0xe18>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d045      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a3e      	ldr	r2, [pc, #248]	; (8004ec0 <HAL_DMA_IRQHandler+0xe1c>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d040      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a3c      	ldr	r2, [pc, #240]	; (8004ec4 <HAL_DMA_IRQHandler+0xe20>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d03b      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a3b      	ldr	r2, [pc, #236]	; (8004ec8 <HAL_DMA_IRQHandler+0xe24>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d036      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a39      	ldr	r2, [pc, #228]	; (8004ecc <HAL_DMA_IRQHandler+0xe28>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d031      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a38      	ldr	r2, [pc, #224]	; (8004ed0 <HAL_DMA_IRQHandler+0xe2c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d02c      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a36      	ldr	r2, [pc, #216]	; (8004ed4 <HAL_DMA_IRQHandler+0xe30>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d027      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a35      	ldr	r2, [pc, #212]	; (8004ed8 <HAL_DMA_IRQHandler+0xe34>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d022      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a33      	ldr	r2, [pc, #204]	; (8004edc <HAL_DMA_IRQHandler+0xe38>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d01d      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a32      	ldr	r2, [pc, #200]	; (8004ee0 <HAL_DMA_IRQHandler+0xe3c>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d018      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a30      	ldr	r2, [pc, #192]	; (8004ee4 <HAL_DMA_IRQHandler+0xe40>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d013      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a2f      	ldr	r2, [pc, #188]	; (8004ee8 <HAL_DMA_IRQHandler+0xe44>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d00e      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <HAL_DMA_IRQHandler+0xe48>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d009      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <HAL_DMA_IRQHandler+0xe4c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d004      	beq.n	8004e4e <HAL_DMA_IRQHandler+0xdaa>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a2a      	ldr	r2, [pc, #168]	; (8004ef4 <HAL_DMA_IRQHandler+0xe50>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d108      	bne.n	8004e60 <HAL_DMA_IRQHandler+0xdbc>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 021c 	bic.w	r2, r2, #28
 8004e5c:	601a      	str	r2, [r3, #0]
 8004e5e:	e007      	b.n	8004e70 <HAL_DMA_IRQHandler+0xdcc>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f022 020e 	bic.w	r2, r2, #14
 8004e6e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e74:	f003 031f 	and.w	r3, r3, #31
 8004e78:	2201      	movs	r2, #1
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2201      	movs	r2, #1
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2200      	movs	r2, #0
 8004e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	4798      	blx	r3
 8004ea6:	e004      	b.n	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004ea8:	bf00      	nop
 8004eaa:	e002      	b.n	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eac:	bf00      	nop
 8004eae:	e000      	b.n	8004eb2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eb0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004eb2:	3728      	adds	r7, #40	; 0x28
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40020010 	.word	0x40020010
 8004ebc:	40020028 	.word	0x40020028
 8004ec0:	40020040 	.word	0x40020040
 8004ec4:	40020058 	.word	0x40020058
 8004ec8:	40020070 	.word	0x40020070
 8004ecc:	40020088 	.word	0x40020088
 8004ed0:	400200a0 	.word	0x400200a0
 8004ed4:	400200b8 	.word	0x400200b8
 8004ed8:	40020410 	.word	0x40020410
 8004edc:	40020428 	.word	0x40020428
 8004ee0:	40020440 	.word	0x40020440
 8004ee4:	40020458 	.word	0x40020458
 8004ee8:	40020470 	.word	0x40020470
 8004eec:	40020488 	.word	0x40020488
 8004ef0:	400204a0 	.word	0x400204a0
 8004ef4:	400204b8 	.word	0x400204b8

08004ef8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a42      	ldr	r2, [pc, #264]	; (8005010 <DMA_CalcBaseAndBitshift+0x118>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d04a      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a41      	ldr	r2, [pc, #260]	; (8005014 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d045      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a3f      	ldr	r2, [pc, #252]	; (8005018 <DMA_CalcBaseAndBitshift+0x120>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d040      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a3e      	ldr	r2, [pc, #248]	; (800501c <DMA_CalcBaseAndBitshift+0x124>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d03b      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a3c      	ldr	r2, [pc, #240]	; (8005020 <DMA_CalcBaseAndBitshift+0x128>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d036      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3b      	ldr	r2, [pc, #236]	; (8005024 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d031      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a39      	ldr	r2, [pc, #228]	; (8005028 <DMA_CalcBaseAndBitshift+0x130>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d02c      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a38      	ldr	r2, [pc, #224]	; (800502c <DMA_CalcBaseAndBitshift+0x134>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d027      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a36      	ldr	r2, [pc, #216]	; (8005030 <DMA_CalcBaseAndBitshift+0x138>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d022      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a35      	ldr	r2, [pc, #212]	; (8005034 <DMA_CalcBaseAndBitshift+0x13c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d01d      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a33      	ldr	r2, [pc, #204]	; (8005038 <DMA_CalcBaseAndBitshift+0x140>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d018      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a32      	ldr	r2, [pc, #200]	; (800503c <DMA_CalcBaseAndBitshift+0x144>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d013      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a30      	ldr	r2, [pc, #192]	; (8005040 <DMA_CalcBaseAndBitshift+0x148>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d00e      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <DMA_CalcBaseAndBitshift+0x14c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d009      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a2d      	ldr	r2, [pc, #180]	; (8005048 <DMA_CalcBaseAndBitshift+0x150>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d004      	beq.n	8004fa0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a2c      	ldr	r2, [pc, #176]	; (800504c <DMA_CalcBaseAndBitshift+0x154>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d101      	bne.n	8004fa4 <DMA_CalcBaseAndBitshift+0xac>
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <DMA_CalcBaseAndBitshift+0xae>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d024      	beq.n	8004ff4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	3b10      	subs	r3, #16
 8004fb2:	4a27      	ldr	r2, [pc, #156]	; (8005050 <DMA_CalcBaseAndBitshift+0x158>)
 8004fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb8:	091b      	lsrs	r3, r3, #4
 8004fba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f003 0307 	and.w	r3, r3, #7
 8004fc2:	4a24      	ldr	r2, [pc, #144]	; (8005054 <DMA_CalcBaseAndBitshift+0x15c>)
 8004fc4:	5cd3      	ldrb	r3, [r2, r3]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d908      	bls.n	8004fe4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b1f      	ldr	r3, [pc, #124]	; (8005058 <DMA_CalcBaseAndBitshift+0x160>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	659a      	str	r2, [r3, #88]	; 0x58
 8004fe2:	e00d      	b.n	8005000 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <DMA_CalcBaseAndBitshift+0x160>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ff2:	e005      	b.n	8005000 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40020010 	.word	0x40020010
 8005014:	40020028 	.word	0x40020028
 8005018:	40020040 	.word	0x40020040
 800501c:	40020058 	.word	0x40020058
 8005020:	40020070 	.word	0x40020070
 8005024:	40020088 	.word	0x40020088
 8005028:	400200a0 	.word	0x400200a0
 800502c:	400200b8 	.word	0x400200b8
 8005030:	40020410 	.word	0x40020410
 8005034:	40020428 	.word	0x40020428
 8005038:	40020440 	.word	0x40020440
 800503c:	40020458 	.word	0x40020458
 8005040:	40020470 	.word	0x40020470
 8005044:	40020488 	.word	0x40020488
 8005048:	400204a0 	.word	0x400204a0
 800504c:	400204b8 	.word	0x400204b8
 8005050:	aaaaaaab 	.word	0xaaaaaaab
 8005054:	0800d104 	.word	0x0800d104
 8005058:	fffffc00 	.word	0xfffffc00

0800505c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005064:	2300      	movs	r3, #0
 8005066:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	699b      	ldr	r3, [r3, #24]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d120      	bne.n	80050b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005074:	2b03      	cmp	r3, #3
 8005076:	d858      	bhi.n	800512a <DMA_CheckFifoParam+0xce>
 8005078:	a201      	add	r2, pc, #4	; (adr r2, 8005080 <DMA_CheckFifoParam+0x24>)
 800507a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800507e:	bf00      	nop
 8005080:	08005091 	.word	0x08005091
 8005084:	080050a3 	.word	0x080050a3
 8005088:	08005091 	.word	0x08005091
 800508c:	0800512b 	.word	0x0800512b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d048      	beq.n	800512e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050a0:	e045      	b.n	800512e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050aa:	d142      	bne.n	8005132 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050b0:	e03f      	b.n	8005132 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ba:	d123      	bne.n	8005104 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c0:	2b03      	cmp	r3, #3
 80050c2:	d838      	bhi.n	8005136 <DMA_CheckFifoParam+0xda>
 80050c4:	a201      	add	r2, pc, #4	; (adr r2, 80050cc <DMA_CheckFifoParam+0x70>)
 80050c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ca:	bf00      	nop
 80050cc:	080050dd 	.word	0x080050dd
 80050d0:	080050e3 	.word	0x080050e3
 80050d4:	080050dd 	.word	0x080050dd
 80050d8:	080050f5 	.word	0x080050f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	73fb      	strb	r3, [r7, #15]
        break;
 80050e0:	e030      	b.n	8005144 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d025      	beq.n	800513a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050f2:	e022      	b.n	800513a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050fc:	d11f      	bne.n	800513e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005102:	e01c      	b.n	800513e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005108:	2b02      	cmp	r3, #2
 800510a:	d902      	bls.n	8005112 <DMA_CheckFifoParam+0xb6>
 800510c:	2b03      	cmp	r3, #3
 800510e:	d003      	beq.n	8005118 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005110:	e018      	b.n	8005144 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	73fb      	strb	r3, [r7, #15]
        break;
 8005116:	e015      	b.n	8005144 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d00e      	beq.n	8005142 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
    break;
 8005128:	e00b      	b.n	8005142 <DMA_CheckFifoParam+0xe6>
        break;
 800512a:	bf00      	nop
 800512c:	e00a      	b.n	8005144 <DMA_CheckFifoParam+0xe8>
        break;
 800512e:	bf00      	nop
 8005130:	e008      	b.n	8005144 <DMA_CheckFifoParam+0xe8>
        break;
 8005132:	bf00      	nop
 8005134:	e006      	b.n	8005144 <DMA_CheckFifoParam+0xe8>
        break;
 8005136:	bf00      	nop
 8005138:	e004      	b.n	8005144 <DMA_CheckFifoParam+0xe8>
        break;
 800513a:	bf00      	nop
 800513c:	e002      	b.n	8005144 <DMA_CheckFifoParam+0xe8>
        break;
 800513e:	bf00      	nop
 8005140:	e000      	b.n	8005144 <DMA_CheckFifoParam+0xe8>
    break;
 8005142:	bf00      	nop
    }
  }

  return status;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3714      	adds	r7, #20
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop

08005154 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a38      	ldr	r2, [pc, #224]	; (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d022      	beq.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a36      	ldr	r2, [pc, #216]	; (800524c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01d      	beq.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	4a35      	ldr	r2, [pc, #212]	; (8005250 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800517c:	4293      	cmp	r3, r2
 800517e:	d018      	beq.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	4a33      	ldr	r2, [pc, #204]	; (8005254 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d013      	beq.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a32      	ldr	r2, [pc, #200]	; (8005258 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00e      	beq.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a30      	ldr	r2, [pc, #192]	; (800525c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d009      	beq.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a2f      	ldr	r2, [pc, #188]	; (8005260 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d101      	bne.n	80051b6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d01a      	beq.n	80051f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	3b08      	subs	r3, #8
 80051c4:	4a28      	ldr	r2, [pc, #160]	; (8005268 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	091b      	lsrs	r3, r3, #4
 80051cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4b26      	ldr	r3, [pc, #152]	; (800526c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	461a      	mov	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a24      	ldr	r2, [pc, #144]	; (8005270 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80051e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	f003 031f 	and.w	r3, r3, #31
 80051e8:	2201      	movs	r2, #1
 80051ea:	409a      	lsls	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80051f0:	e024      	b.n	800523c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	3b10      	subs	r3, #16
 80051fa:	4a1e      	ldr	r2, [pc, #120]	; (8005274 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	4a1c      	ldr	r2, [pc, #112]	; (8005278 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d806      	bhi.n	800521a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4a1b      	ldr	r2, [pc, #108]	; (800527c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d902      	bls.n	800521a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	3308      	adds	r3, #8
 8005218:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4b18      	ldr	r3, [pc, #96]	; (8005280 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800521e:	4413      	add	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	461a      	mov	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a16      	ldr	r2, [pc, #88]	; (8005284 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800522c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f003 031f 	and.w	r3, r3, #31
 8005234:	2201      	movs	r2, #1
 8005236:	409a      	lsls	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800523c:	bf00      	nop
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr
 8005248:	58025408 	.word	0x58025408
 800524c:	5802541c 	.word	0x5802541c
 8005250:	58025430 	.word	0x58025430
 8005254:	58025444 	.word	0x58025444
 8005258:	58025458 	.word	0x58025458
 800525c:	5802546c 	.word	0x5802546c
 8005260:	58025480 	.word	0x58025480
 8005264:	58025494 	.word	0x58025494
 8005268:	cccccccd 	.word	0xcccccccd
 800526c:	16009600 	.word	0x16009600
 8005270:	58025880 	.word	0x58025880
 8005274:	aaaaaaab 	.word	0xaaaaaaab
 8005278:	400204b8 	.word	0x400204b8
 800527c:	4002040f 	.word	0x4002040f
 8005280:	10008200 	.word	0x10008200
 8005284:	40020880 	.word	0x40020880

08005288 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005288:	b480      	push	{r7}
 800528a:	b085      	sub	sp, #20
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	b2db      	uxtb	r3, r3
 8005296:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d04a      	beq.n	8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d847      	bhi.n	8005334 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a25      	ldr	r2, [pc, #148]	; (8005340 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d022      	beq.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a24      	ldr	r2, [pc, #144]	; (8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01d      	beq.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a22      	ldr	r2, [pc, #136]	; (8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a21      	ldr	r2, [pc, #132]	; (800534c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a1f      	ldr	r2, [pc, #124]	; (8005350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00e      	beq.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a1e      	ldr	r2, [pc, #120]	; (8005354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a1c      	ldr	r2, [pc, #112]	; (8005358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a1b      	ldr	r2, [pc, #108]	; (800535c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d101      	bne.n	80052f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4b17      	ldr	r3, [pc, #92]	; (8005360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005302:	4413      	add	r3, r2
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	461a      	mov	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a15      	ldr	r2, [pc, #84]	; (8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005310:	671a      	str	r2, [r3, #112]	; 0x70
 8005312:	e009      	b.n	8005328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005314:	68fa      	ldr	r2, [r7, #12]
 8005316:	4b14      	ldr	r3, [pc, #80]	; (8005368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005318:	4413      	add	r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	461a      	mov	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a11      	ldr	r2, [pc, #68]	; (800536c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005326:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3b01      	subs	r3, #1
 800532c:	2201      	movs	r2, #1
 800532e:	409a      	lsls	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005334:	bf00      	nop
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	58025408 	.word	0x58025408
 8005344:	5802541c 	.word	0x5802541c
 8005348:	58025430 	.word	0x58025430
 800534c:	58025444 	.word	0x58025444
 8005350:	58025458 	.word	0x58025458
 8005354:	5802546c 	.word	0x5802546c
 8005358:	58025480 	.word	0x58025480
 800535c:	58025494 	.word	0x58025494
 8005360:	1600963f 	.word	0x1600963f
 8005364:	58025940 	.word	0x58025940
 8005368:	1000823f 	.word	0x1000823f
 800536c:	40020940 	.word	0x40020940

08005370 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e0cf      	b.n	8005522 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005388:	2b00      	cmp	r3, #0
 800538a:	d106      	bne.n	800539a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2223      	movs	r2, #35	; 0x23
 8005390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f7fd f8d1 	bl	800253c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800539a:	4b64      	ldr	r3, [pc, #400]	; (800552c <HAL_ETH_Init+0x1bc>)
 800539c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053a0:	4a62      	ldr	r2, [pc, #392]	; (800552c <HAL_ETH_Init+0x1bc>)
 80053a2:	f043 0302 	orr.w	r3, r3, #2
 80053a6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80053aa:	4b60      	ldr	r3, [pc, #384]	; (800552c <HAL_ETH_Init+0x1bc>)
 80053ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	7a1b      	ldrb	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d103      	bne.n	80053c8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80053c0:	2000      	movs	r0, #0
 80053c2:	f7fd fc8b 	bl	8002cdc <HAL_SYSCFG_ETHInterfaceSelect>
 80053c6:	e003      	b.n	80053d0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80053c8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80053cc:	f7fd fc86 	bl	8002cdc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80053d0:	4b57      	ldr	r3, [pc, #348]	; (8005530 <HAL_ETH_Init+0x1c0>)
 80053d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	6812      	ldr	r2, [r2, #0]
 80053e2:	f043 0301 	orr.w	r3, r3, #1
 80053e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80053ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053ec:	f7fd fc3a 	bl	8002c64 <HAL_GetTick>
 80053f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80053f2:	e011      	b.n	8005418 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80053f4:	f7fd fc36 	bl	8002c64 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005402:	d909      	bls.n	8005418 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2204      	movs	r2, #4
 8005408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	22e0      	movs	r2, #224	; 0xe0
 8005410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e084      	b.n	8005522 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e4      	bne.n	80053f4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f886 	bl	800553c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005430:	f001 fefc 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8005434:	4603      	mov	r3, r0
 8005436:	4a3f      	ldr	r2, [pc, #252]	; (8005534 <HAL_ETH_Init+0x1c4>)
 8005438:	fba2 2303 	umull	r2, r3, r2, r3
 800543c:	0c9a      	lsrs	r2, r3, #18
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3a01      	subs	r2, #1
 8005444:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f000 fa71 	bl	8005930 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005456:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800545a:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005466:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800546a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	22e0      	movs	r2, #224	; 0xe0
 8005486:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e049      	b.n	8005522 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005496:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800549a:	4b27      	ldr	r3, [pc, #156]	; (8005538 <HAL_ETH_Init+0x1c8>)
 800549c:	4013      	ands	r3, r2
 800549e:	687a      	ldr	r2, [r7, #4]
 80054a0:	6952      	ldr	r2, [r2, #20]
 80054a2:	0051      	lsls	r1, r2, #1
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6812      	ldr	r2, [r2, #0]
 80054a8:	430b      	orrs	r3, r1
 80054aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80054ae:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fad9 	bl	8005a6a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fb1f 	bl	8005afc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	3305      	adds	r3, #5
 80054c4:	781b      	ldrb	r3, [r3, #0]
 80054c6:	021a      	lsls	r2, r3, #8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	3304      	adds	r3, #4
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	4619      	mov	r1, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	3303      	adds	r3, #3
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	061a      	lsls	r2, r3, #24
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	3302      	adds	r3, #2
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	041b      	lsls	r3, r3, #16
 80054f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	3301      	adds	r3, #1
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80054fc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800550a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800550c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2210      	movs	r2, #16
 800551c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	58024400 	.word	0x58024400
 8005530:	58000400 	.word	0x58000400
 8005534:	431bde83 	.word	0x431bde83
 8005538:	ffff8001 	.word	0xffff8001

0800553c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800554c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005554:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005556:	f001 fe69 	bl	800722c <HAL_RCC_GetHCLKFreq>
 800555a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d908      	bls.n	8005576 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d804      	bhi.n	8005576 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005572:	60fb      	str	r3, [r7, #12]
 8005574:	e027      	b.n	80055c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a18      	ldr	r2, [pc, #96]	; (80055dc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d908      	bls.n	8005590 <HAL_ETH_SetMDIOClockRange+0x54>
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	4a17      	ldr	r2, [pc, #92]	; (80055e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d204      	bcs.n	8005590 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800558c:	60fb      	str	r3, [r7, #12]
 800558e:	e01a      	b.n	80055c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4a13      	ldr	r2, [pc, #76]	; (80055e0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d303      	bcc.n	80055a0 <HAL_ETH_SetMDIOClockRange+0x64>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4a12      	ldr	r2, [pc, #72]	; (80055e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d911      	bls.n	80055c4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	4a10      	ldr	r2, [pc, #64]	; (80055e4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d908      	bls.n	80055ba <HAL_ETH_SetMDIOClockRange+0x7e>
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a0f      	ldr	r2, [pc, #60]	; (80055e8 <HAL_ETH_SetMDIOClockRange+0xac>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d804      	bhi.n	80055ba <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	e005      	b.n	80055c6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055c0:	60fb      	str	r3, [r7, #12]
 80055c2:	e000      	b.n	80055c6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80055c4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80055d0:	bf00      	nop
 80055d2:	3710      	adds	r7, #16
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	01312cff 	.word	0x01312cff
 80055dc:	02160ebf 	.word	0x02160ebf
 80055e0:	03938700 	.word	0x03938700
 80055e4:	05f5e0ff 	.word	0x05f5e0ff
 80055e8:	08f0d17f 	.word	0x08f0d17f

080055ec <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b085      	sub	sp, #20
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80055fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	791b      	ldrb	r3, [r3, #4]
 8005604:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	7b1b      	ldrb	r3, [r3, #12]
 800560c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800560e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	7b5b      	ldrb	r3, [r3, #13]
 8005614:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	7b9b      	ldrb	r3, [r3, #14]
 800561c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800561e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	7bdb      	ldrb	r3, [r3, #15]
 8005624:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005626:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	7c12      	ldrb	r2, [r2, #16]
 800562c:	2a00      	cmp	r2, #0
 800562e:	d102      	bne.n	8005636 <ETH_SetMACConfig+0x4a>
 8005630:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005634:	e000      	b.n	8005638 <ETH_SetMACConfig+0x4c>
 8005636:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005638:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	7c52      	ldrb	r2, [r2, #17]
 800563e:	2a00      	cmp	r2, #0
 8005640:	d102      	bne.n	8005648 <ETH_SetMACConfig+0x5c>
 8005642:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005646:	e000      	b.n	800564a <ETH_SetMACConfig+0x5e>
 8005648:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800564a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	7c9b      	ldrb	r3, [r3, #18]
 8005650:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005652:	431a      	orrs	r2, r3
               macconf->Speed |
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005658:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800565e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	7f1b      	ldrb	r3, [r3, #28]
 8005664:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	7f5b      	ldrb	r3, [r3, #29]
 800566c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800566e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	7f92      	ldrb	r2, [r2, #30]
 8005674:	2a00      	cmp	r2, #0
 8005676:	d102      	bne.n	800567e <ETH_SetMACConfig+0x92>
 8005678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800567c:	e000      	b.n	8005680 <ETH_SetMACConfig+0x94>
 800567e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005680:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	7fdb      	ldrb	r3, [r3, #31]
 8005686:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005688:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005690:	2a00      	cmp	r2, #0
 8005692:	d102      	bne.n	800569a <ETH_SetMACConfig+0xae>
 8005694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005698:	e000      	b.n	800569c <ETH_SetMACConfig+0xb0>
 800569a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800569c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80056ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	4b56      	ldr	r3, [pc, #344]	; (8005818 <ETH_SetMACConfig+0x22c>)
 80056be:	4013      	ands	r3, r2
 80056c0:	687a      	ldr	r2, [r7, #4]
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	68f9      	ldr	r1, [r7, #12]
 80056c6:	430b      	orrs	r3, r1
 80056c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80056d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80056e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80056e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80056ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80056f4:	2a00      	cmp	r2, #0
 80056f6:	d102      	bne.n	80056fe <ETH_SetMACConfig+0x112>
 80056f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056fc:	e000      	b.n	8005700 <ETH_SetMACConfig+0x114>
 80056fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005700:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	4b42      	ldr	r3, [pc, #264]	; (800581c <ETH_SetMACConfig+0x230>)
 8005712:	4013      	ands	r3, r2
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	6812      	ldr	r2, [r2, #0]
 8005718:	68f9      	ldr	r1, [r7, #12]
 800571a:	430b      	orrs	r3, r1
 800571c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005724:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	4b3a      	ldr	r3, [pc, #232]	; (8005820 <ETH_SetMACConfig+0x234>)
 8005736:	4013      	ands	r3, r2
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6812      	ldr	r2, [r2, #0]
 800573c:	68f9      	ldr	r1, [r7, #12]
 800573e:	430b      	orrs	r3, r1
 8005740:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005748:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800574e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005750:	683a      	ldr	r2, [r7, #0]
 8005752:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005756:	2a00      	cmp	r2, #0
 8005758:	d101      	bne.n	800575e <ETH_SetMACConfig+0x172>
 800575a:	2280      	movs	r2, #128	; 0x80
 800575c:	e000      	b.n	8005760 <ETH_SetMACConfig+0x174>
 800575e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005760:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005766:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005772:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005776:	4013      	ands	r3, r2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	68f9      	ldr	r1, [r7, #12]
 800577e:	430b      	orrs	r3, r1
 8005780:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005788:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005790:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005792:	4313      	orrs	r3, r2
 8005794:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579e:	f023 0103 	bic.w	r1, r3, #3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	430a      	orrs	r2, r1
 80057aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80057b6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	d101      	bne.n	80057da <ETH_SetMACConfig+0x1ee>
 80057d6:	2240      	movs	r2, #64	; 0x40
 80057d8:	e000      	b.n	80057dc <ETH_SetMACConfig+0x1f0>
 80057da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80057dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80057e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80057e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80057ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80057fc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	430a      	orrs	r2, r1
 8005808:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800580c:	bf00      	nop
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	00048083 	.word	0x00048083
 800581c:	c0f88000 	.word	0xc0f88000
 8005820:	fffffef0 	.word	0xfffffef0

08005824 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	4b38      	ldr	r3, [pc, #224]	; (800591c <ETH_SetDMAConfig+0xf8>)
 800583a:	4013      	ands	r3, r2
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	6811      	ldr	r1, [r2, #0]
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6812      	ldr	r2, [r2, #0]
 8005844:	430b      	orrs	r3, r1
 8005846:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800584a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	791b      	ldrb	r3, [r3, #4]
 8005850:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005856:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	7b1b      	ldrb	r3, [r3, #12]
 800585c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800585e:	4313      	orrs	r3, r2
 8005860:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	4b2c      	ldr	r3, [pc, #176]	; (8005920 <ETH_SetDMAConfig+0xfc>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6812      	ldr	r2, [r2, #0]
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	430b      	orrs	r3, r1
 8005878:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800587c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	7b5b      	ldrb	r3, [r3, #13]
 8005882:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005894:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005898:	4b22      	ldr	r3, [pc, #136]	; (8005924 <ETH_SetDMAConfig+0x100>)
 800589a:	4013      	ands	r3, r2
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	430b      	orrs	r3, r1
 80058a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058a8:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	7d1b      	ldrb	r3, [r3, #20]
 80058b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80058b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	7f5b      	ldrb	r3, [r3, #29]
 80058bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80058ce:	4b16      	ldr	r3, [pc, #88]	; (8005928 <ETH_SetDMAConfig+0x104>)
 80058d0:	4013      	ands	r3, r2
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	6812      	ldr	r2, [r2, #0]
 80058d6:	68f9      	ldr	r1, [r7, #12]
 80058d8:	430b      	orrs	r3, r1
 80058da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058de:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	7f1b      	ldrb	r3, [r3, #28]
 80058e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80058ec:	4313      	orrs	r3, r2
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80058fc:	4b0b      	ldr	r3, [pc, #44]	; (800592c <ETH_SetDMAConfig+0x108>)
 80058fe:	4013      	ands	r3, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	68f9      	ldr	r1, [r7, #12]
 8005906:	430b      	orrs	r3, r1
 8005908:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800590c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005910:	bf00      	nop
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	ffff87fd 	.word	0xffff87fd
 8005920:	ffff2ffe 	.word	0xffff2ffe
 8005924:	fffec000 	.word	0xfffec000
 8005928:	ffc0efef 	.word	0xffc0efef
 800592c:	7fc0ffff 	.word	0x7fc0ffff

08005930 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b0a4      	sub	sp, #144	; 0x90
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005938:	2301      	movs	r3, #1
 800593a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800593e:	2300      	movs	r3, #0
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005942:	2300      	movs	r3, #0
 8005944:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005948:	2300      	movs	r3, #0
 800594a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800594e:	2301      	movs	r3, #1
 8005950:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005954:	2301      	movs	r3, #1
 8005956:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005960:	2300      	movs	r3, #0
 8005962:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005966:	2301      	movs	r3, #1
 8005968:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800596c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005970:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005972:	2300      	movs	r3, #0
 8005974:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005978:	2300      	movs	r3, #0
 800597a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800597c:	2300      	movs	r3, #0
 800597e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005982:	2300      	movs	r3, #0
 8005984:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005988:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800598c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800598e:	2300      	movs	r3, #0
 8005990:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005994:	2300      	movs	r3, #0
 8005996:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005998:	2301      	movs	r3, #1
 800599a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800599e:	2300      	movs	r3, #0
 80059a0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80059aa:	2300      	movs	r3, #0
 80059ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80059b2:	2300      	movs	r3, #0
 80059b4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80059bc:	2300      	movs	r3, #0
 80059be:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80059c2:	2301      	movs	r3, #1
 80059c4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80059c8:	2320      	movs	r3, #32
 80059ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80059d4:	2300      	movs	r3, #0
 80059d6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80059da:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80059de:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80059e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80059e4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80059e6:	2300      	movs	r3, #0
 80059e8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80059ec:	2302      	movs	r3, #2
 80059ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005a04:	2301      	movs	r3, #1
 8005a06:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fde6 	bl	80055ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a20:	2301      	movs	r3, #1
 8005a22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005a24:	2301      	movs	r3, #1
 8005a26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005a36:	2300      	movs	r3, #0
 8005a38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005a48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005a50:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005a54:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005a56:	f107 0308 	add.w	r3, r7, #8
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff fee1 	bl	8005824 <ETH_SetDMAConfig>
}
 8005a62:	bf00      	nop
 8005a64:	3790      	adds	r7, #144	; 0x90
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005a6a:	b480      	push	{r7}
 8005a6c:	b085      	sub	sp, #20
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e01d      	b.n	8005ab4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68d9      	ldr	r1, [r3, #12]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	4413      	add	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	440b      	add	r3, r1
 8005a88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	3206      	adds	r2, #6
 8005aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d9de      	bls.n	8005a78 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ac8:	461a      	mov	r2, r3
 8005aca:	2303      	movs	r3, #3
 8005acc:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68da      	ldr	r2, [r3, #12]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005adc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68da      	ldr	r2, [r3, #12]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aec:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005af0:	bf00      	nop
 8005af2:	3714      	adds	r7, #20
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e023      	b.n	8005b52 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6919      	ldr	r1, [r3, #16]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4613      	mov	r3, r2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	4413      	add	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	440b      	add	r3, r1
 8005b1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	2200      	movs	r2, #0
 8005b26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	2200      	movs	r2, #0
 8005b32:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	2200      	movs	r2, #0
 8005b38:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005b40:	68b9      	ldr	r1, [r7, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	3212      	adds	r2, #18
 8005b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b03      	cmp	r3, #3
 8005b56:	d9d8      	bls.n	8005b0a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b7e:	461a      	mov	r2, r3
 8005b80:	2303      	movs	r3, #3
 8005b82:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	691a      	ldr	r2, [r3, #16]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b92:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba6:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
	...

08005bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b089      	sub	sp, #36	; 0x24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005bc6:	4b89      	ldr	r3, [pc, #548]	; (8005dec <HAL_GPIO_Init+0x234>)
 8005bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bca:	e194      	b.n	8005ef6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	2101      	movs	r1, #1
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd8:	4013      	ands	r3, r2
 8005bda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	f000 8186 	beq.w	8005ef0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d005      	beq.n	8005bfc <HAL_GPIO_Init+0x44>
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	f003 0303 	and.w	r3, r3, #3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d130      	bne.n	8005c5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	005b      	lsls	r3, r3, #1
 8005c06:	2203      	movs	r2, #3
 8005c08:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0c:	43db      	mvns	r3, r3
 8005c0e:	69ba      	ldr	r2, [r7, #24]
 8005c10:	4013      	ands	r3, r2
 8005c12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	69fb      	ldr	r3, [r7, #28]
 8005c1a:	005b      	lsls	r3, r3, #1
 8005c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c20:	69ba      	ldr	r2, [r7, #24]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69ba      	ldr	r2, [r7, #24]
 8005c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c32:	2201      	movs	r2, #1
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3a:	43db      	mvns	r3, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	4013      	ands	r3, r2
 8005c40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	091b      	lsrs	r3, r3, #4
 8005c48:	f003 0201 	and.w	r2, r3, #1
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c52:	69ba      	ldr	r2, [r7, #24]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f003 0303 	and.w	r3, r3, #3
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d017      	beq.n	8005c9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	2203      	movs	r2, #3
 8005c76:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7a:	43db      	mvns	r3, r3
 8005c7c:	69ba      	ldr	r2, [r7, #24]
 8005c7e:	4013      	ands	r3, r2
 8005c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689a      	ldr	r2, [r3, #8]
 8005c86:	69fb      	ldr	r3, [r7, #28]
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	d123      	bne.n	8005cee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	08da      	lsrs	r2, r3, #3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	3208      	adds	r2, #8
 8005cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	220f      	movs	r2, #15
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	43db      	mvns	r3, r3
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	4013      	ands	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	691a      	ldr	r2, [r3, #16]
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f003 0307 	and.w	r3, r3, #7
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	08da      	lsrs	r2, r3, #3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	3208      	adds	r2, #8
 8005ce8:	69b9      	ldr	r1, [r7, #24]
 8005cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	2203      	movs	r2, #3
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	43db      	mvns	r3, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4013      	ands	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f003 0203 	and.w	r2, r3, #3
 8005d0e:	69fb      	ldr	r3, [r7, #28]
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	fa02 f303 	lsl.w	r3, r2, r3
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	69ba      	ldr	r2, [r7, #24]
 8005d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80e0 	beq.w	8005ef0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d30:	4b2f      	ldr	r3, [pc, #188]	; (8005df0 <HAL_GPIO_Init+0x238>)
 8005d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d36:	4a2e      	ldr	r2, [pc, #184]	; (8005df0 <HAL_GPIO_Init+0x238>)
 8005d38:	f043 0302 	orr.w	r3, r3, #2
 8005d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005d40:	4b2b      	ldr	r3, [pc, #172]	; (8005df0 <HAL_GPIO_Init+0x238>)
 8005d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d46:	f003 0302 	and.w	r3, r3, #2
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005d4e:	4a29      	ldr	r2, [pc, #164]	; (8005df4 <HAL_GPIO_Init+0x23c>)
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	089b      	lsrs	r3, r3, #2
 8005d54:	3302      	adds	r3, #2
 8005d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f003 0303 	and.w	r3, r3, #3
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	220f      	movs	r2, #15
 8005d66:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6a:	43db      	mvns	r3, r3
 8005d6c:	69ba      	ldr	r2, [r7, #24]
 8005d6e:	4013      	ands	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a20      	ldr	r2, [pc, #128]	; (8005df8 <HAL_GPIO_Init+0x240>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d052      	beq.n	8005e20 <HAL_GPIO_Init+0x268>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <HAL_GPIO_Init+0x244>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d031      	beq.n	8005de6 <HAL_GPIO_Init+0x22e>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a1e      	ldr	r2, [pc, #120]	; (8005e00 <HAL_GPIO_Init+0x248>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d02b      	beq.n	8005de2 <HAL_GPIO_Init+0x22a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a1d      	ldr	r2, [pc, #116]	; (8005e04 <HAL_GPIO_Init+0x24c>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d025      	beq.n	8005dde <HAL_GPIO_Init+0x226>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a1c      	ldr	r2, [pc, #112]	; (8005e08 <HAL_GPIO_Init+0x250>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01f      	beq.n	8005dda <HAL_GPIO_Init+0x222>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a1b      	ldr	r2, [pc, #108]	; (8005e0c <HAL_GPIO_Init+0x254>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d019      	beq.n	8005dd6 <HAL_GPIO_Init+0x21e>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a1a      	ldr	r2, [pc, #104]	; (8005e10 <HAL_GPIO_Init+0x258>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d013      	beq.n	8005dd2 <HAL_GPIO_Init+0x21a>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a19      	ldr	r2, [pc, #100]	; (8005e14 <HAL_GPIO_Init+0x25c>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d00d      	beq.n	8005dce <HAL_GPIO_Init+0x216>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a18      	ldr	r2, [pc, #96]	; (8005e18 <HAL_GPIO_Init+0x260>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d007      	beq.n	8005dca <HAL_GPIO_Init+0x212>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4a17      	ldr	r2, [pc, #92]	; (8005e1c <HAL_GPIO_Init+0x264>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d101      	bne.n	8005dc6 <HAL_GPIO_Init+0x20e>
 8005dc2:	2309      	movs	r3, #9
 8005dc4:	e02d      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005dc6:	230a      	movs	r3, #10
 8005dc8:	e02b      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005dca:	2308      	movs	r3, #8
 8005dcc:	e029      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005dce:	2307      	movs	r3, #7
 8005dd0:	e027      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005dd2:	2306      	movs	r3, #6
 8005dd4:	e025      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005dd6:	2305      	movs	r3, #5
 8005dd8:	e023      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005dda:	2304      	movs	r3, #4
 8005ddc:	e021      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005dde:	2303      	movs	r3, #3
 8005de0:	e01f      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005de2:	2302      	movs	r3, #2
 8005de4:	e01d      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005de6:	2301      	movs	r3, #1
 8005de8:	e01b      	b.n	8005e22 <HAL_GPIO_Init+0x26a>
 8005dea:	bf00      	nop
 8005dec:	58000080 	.word	0x58000080
 8005df0:	58024400 	.word	0x58024400
 8005df4:	58000400 	.word	0x58000400
 8005df8:	58020000 	.word	0x58020000
 8005dfc:	58020400 	.word	0x58020400
 8005e00:	58020800 	.word	0x58020800
 8005e04:	58020c00 	.word	0x58020c00
 8005e08:	58021000 	.word	0x58021000
 8005e0c:	58021400 	.word	0x58021400
 8005e10:	58021800 	.word	0x58021800
 8005e14:	58021c00 	.word	0x58021c00
 8005e18:	58022000 	.word	0x58022000
 8005e1c:	58022400 	.word	0x58022400
 8005e20:	2300      	movs	r3, #0
 8005e22:	69fa      	ldr	r2, [r7, #28]
 8005e24:	f002 0203 	and.w	r2, r2, #3
 8005e28:	0092      	lsls	r2, r2, #2
 8005e2a:	4093      	lsls	r3, r2
 8005e2c:	69ba      	ldr	r2, [r7, #24]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e32:	4938      	ldr	r1, [pc, #224]	; (8005f14 <HAL_GPIO_Init+0x35c>)
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	089b      	lsrs	r3, r3, #2
 8005e38:	3302      	adds	r3, #2
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	43db      	mvns	r3, r3
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	4013      	ands	r3, r2
 8005e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685b      	ldr	r3, [r3, #4]
 8005e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005e5e:	69ba      	ldr	r2, [r7, #24]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005e6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d003      	beq.n	8005e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005e8c:	69ba      	ldr	r2, [r7, #24]
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005e94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	43db      	mvns	r3, r3
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005eb8:	69ba      	ldr	r2, [r7, #24]
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	43db      	mvns	r3, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005ee2:	69ba      	ldr	r2, [r7, #24]
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	69ba      	ldr	r2, [r7, #24]
 8005eee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	fa22 f303 	lsr.w	r3, r2, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f47f ae63 	bne.w	8005bcc <HAL_GPIO_Init+0x14>
  }
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	3724      	adds	r7, #36	; 0x24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	58000400 	.word	0x58000400

08005f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	460b      	mov	r3, r1
 8005f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	691a      	ldr	r2, [r3, #16]
 8005f28:	887b      	ldrh	r3, [r7, #2]
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005f30:	2301      	movs	r3, #1
 8005f32:	73fb      	strb	r3, [r7, #15]
 8005f34:	e001      	b.n	8005f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	807b      	strh	r3, [r7, #2]
 8005f54:	4613      	mov	r3, r2
 8005f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005f58:	787b      	ldrb	r3, [r7, #1]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005f5e:	887a      	ldrh	r2, [r7, #2]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005f64:	e003      	b.n	8005f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005f66:	887b      	ldrh	r3, [r7, #2]
 8005f68:	041a      	lsls	r2, r3, #16
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	619a      	str	r2, [r3, #24]
}
 8005f6e:	bf00      	nop
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b085      	sub	sp, #20
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005f8c:	887a      	ldrh	r2, [r7, #2]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4013      	ands	r3, r2
 8005f92:	041a      	lsls	r2, r3, #16
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	43d9      	mvns	r1, r3
 8005f98:	887b      	ldrh	r3, [r7, #2]
 8005f9a:	400b      	ands	r3, r1
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	619a      	str	r2, [r3, #24]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
	...

08005fb0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005fb8:	4a08      	ldr	r2, [pc, #32]	; (8005fdc <HAL_HSEM_FastTake+0x2c>)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	3320      	adds	r3, #32
 8005fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc2:	4a07      	ldr	r2, [pc, #28]	; (8005fe0 <HAL_HSEM_FastTake+0x30>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d101      	bne.n	8005fcc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	e000      	b.n	8005fce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	58026400 	.word	0x58026400
 8005fe0:	80000300 	.word	0x80000300

08005fe4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005fee:	4906      	ldr	r1, [pc, #24]	; (8006008 <HAL_HSEM_Release+0x24>)
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005ffc:	bf00      	nop
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	58026400 	.word	0x58026400

0800600c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800600c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800600e:	b08f      	sub	sp, #60	; 0x3c
 8006010:	af0a      	add	r7, sp, #40	; 0x28
 8006012:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d101      	bne.n	800601e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e116      	b.n	800624c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d106      	bne.n	800603e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7fc fc8b 	bl	8002954 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2203      	movs	r2, #3
 8006042:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604e:	2b00      	cmp	r3, #0
 8006050:	d102      	bne.n	8006058 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f004 fded 	bl	800ac3c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	603b      	str	r3, [r7, #0]
 8006068:	687e      	ldr	r6, [r7, #4]
 800606a:	466d      	mov	r5, sp
 800606c:	f106 0410 	add.w	r4, r6, #16
 8006070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006074:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006078:	e894 0003 	ldmia.w	r4, {r0, r1}
 800607c:	e885 0003 	stmia.w	r5, {r0, r1}
 8006080:	1d33      	adds	r3, r6, #4
 8006082:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006084:	6838      	ldr	r0, [r7, #0]
 8006086:	f004 fd6b 	bl	800ab60 <USB_CoreInit>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	d005      	beq.n	800609c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e0d7      	b.n	800624c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2100      	movs	r1, #0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f004 fddb 	bl	800ac5e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
 80060ac:	e04a      	b.n	8006144 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80060ae:	7bfa      	ldrb	r2, [r7, #15]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	333d      	adds	r3, #61	; 0x3d
 80060be:	2201      	movs	r2, #1
 80060c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80060c2:	7bfa      	ldrb	r2, [r7, #15]
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	00db      	lsls	r3, r3, #3
 80060ca:	4413      	add	r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	333c      	adds	r3, #60	; 0x3c
 80060d2:	7bfa      	ldrb	r2, [r7, #15]
 80060d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80060d6:	7bfa      	ldrb	r2, [r7, #15]
 80060d8:	7bfb      	ldrb	r3, [r7, #15]
 80060da:	b298      	uxth	r0, r3
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4613      	mov	r3, r2
 80060e0:	00db      	lsls	r3, r3, #3
 80060e2:	4413      	add	r3, r2
 80060e4:	009b      	lsls	r3, r3, #2
 80060e6:	440b      	add	r3, r1
 80060e8:	3344      	adds	r3, #68	; 0x44
 80060ea:	4602      	mov	r2, r0
 80060ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80060ee:	7bfa      	ldrb	r2, [r7, #15]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	3340      	adds	r3, #64	; 0x40
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	6879      	ldr	r1, [r7, #4]
 8006106:	4613      	mov	r3, r2
 8006108:	00db      	lsls	r3, r3, #3
 800610a:	4413      	add	r3, r2
 800610c:	009b      	lsls	r3, r3, #2
 800610e:	440b      	add	r3, r1
 8006110:	3348      	adds	r3, #72	; 0x48
 8006112:	2200      	movs	r2, #0
 8006114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006116:	7bfa      	ldrb	r2, [r7, #15]
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	334c      	adds	r3, #76	; 0x4c
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800612a:	7bfa      	ldrb	r2, [r7, #15]
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	3354      	adds	r3, #84	; 0x54
 800613a:	2200      	movs	r2, #0
 800613c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	3301      	adds	r3, #1
 8006142:	73fb      	strb	r3, [r7, #15]
 8006144:	7bfa      	ldrb	r2, [r7, #15]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	429a      	cmp	r2, r3
 800614c:	d3af      	bcc.n	80060ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
 8006152:	e044      	b.n	80061de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006154:	7bfa      	ldrb	r2, [r7, #15]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	00db      	lsls	r3, r3, #3
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006166:	2200      	movs	r2, #0
 8006168:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800616a:	7bfa      	ldrb	r2, [r7, #15]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800617c:	7bfa      	ldrb	r2, [r7, #15]
 800617e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006180:	7bfa      	ldrb	r2, [r7, #15]
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	00db      	lsls	r3, r3, #3
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006192:	2200      	movs	r2, #0
 8006194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	6879      	ldr	r1, [r7, #4]
 800619a:	4613      	mov	r3, r2
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4413      	add	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	440b      	add	r3, r1
 80061a4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80061ac:	7bfa      	ldrb	r2, [r7, #15]
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4613      	mov	r3, r2
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80061be:	2200      	movs	r2, #0
 80061c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80061c2:	7bfa      	ldrb	r2, [r7, #15]
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	4413      	add	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80061d4:	2200      	movs	r2, #0
 80061d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	3301      	adds	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]
 80061de:	7bfa      	ldrb	r2, [r7, #15]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d3b5      	bcc.n	8006154 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	687e      	ldr	r6, [r7, #4]
 80061f0:	466d      	mov	r5, sp
 80061f2:	f106 0410 	add.w	r4, r6, #16
 80061f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80061fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80061fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006202:	e885 0003 	stmia.w	r5, {r0, r1}
 8006206:	1d33      	adds	r3, r6, #4
 8006208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800620a:	6838      	ldr	r0, [r7, #0]
 800620c:	f004 fd74 	bl	800acf8 <USB_DevInit>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d005      	beq.n	8006222 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2202      	movs	r2, #2
 800621a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800621e:	2301      	movs	r3, #1
 8006220:	e014      	b.n	800624c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2201      	movs	r2, #1
 800622e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006236:	2b01      	cmp	r3, #1
 8006238:	d102      	bne.n	8006240 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f80a 	bl	8006254 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4618      	mov	r0, r3
 8006246:	f004 ff32 	bl	800b0ae <USB_DevDisconnect>

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006254 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2201      	movs	r2, #1
 8006266:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006282:	4b05      	ldr	r3, [pc, #20]	; (8006298 <HAL_PCDEx_ActivateLPM+0x44>)
 8006284:	4313      	orrs	r3, r2
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3714      	adds	r7, #20
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr
 8006298:	10000003 	.word	0x10000003

0800629c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80062a4:	4b29      	ldr	r3, [pc, #164]	; (800634c <HAL_PWREx_ConfigSupply+0xb0>)
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	2b06      	cmp	r3, #6
 80062ae:	d00a      	beq.n	80062c6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80062b0:	4b26      	ldr	r3, [pc, #152]	; (800634c <HAL_PWREx_ConfigSupply+0xb0>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d001      	beq.n	80062c2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e040      	b.n	8006344 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e03e      	b.n	8006344 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80062c6:	4b21      	ldr	r3, [pc, #132]	; (800634c <HAL_PWREx_ConfigSupply+0xb0>)
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80062ce:	491f      	ldr	r1, [pc, #124]	; (800634c <HAL_PWREx_ConfigSupply+0xb0>)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80062d6:	f7fc fcc5 	bl	8002c64 <HAL_GetTick>
 80062da:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062dc:	e009      	b.n	80062f2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80062de:	f7fc fcc1 	bl	8002c64 <HAL_GetTick>
 80062e2:	4602      	mov	r2, r0
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062ec:	d901      	bls.n	80062f2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e028      	b.n	8006344 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80062f2:	4b16      	ldr	r3, [pc, #88]	; (800634c <HAL_PWREx_ConfigSupply+0xb0>)
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80062fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062fe:	d1ee      	bne.n	80062de <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b1e      	cmp	r3, #30
 8006304:	d008      	beq.n	8006318 <HAL_PWREx_ConfigSupply+0x7c>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2b2e      	cmp	r3, #46	; 0x2e
 800630a:	d005      	beq.n	8006318 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2b1d      	cmp	r3, #29
 8006310:	d002      	beq.n	8006318 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b2d      	cmp	r3, #45	; 0x2d
 8006316:	d114      	bne.n	8006342 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006318:	f7fc fca4 	bl	8002c64 <HAL_GetTick>
 800631c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800631e:	e009      	b.n	8006334 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006320:	f7fc fca0 	bl	8002c64 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800632e:	d901      	bls.n	8006334 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e007      	b.n	8006344 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006334:	4b05      	ldr	r3, [pc, #20]	; (800634c <HAL_PWREx_ConfigSupply+0xb0>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006340:	d1ee      	bne.n	8006320 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	58024800 	.word	0x58024800

08006350 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006350:	b480      	push	{r7}
 8006352:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006354:	4b05      	ldr	r3, [pc, #20]	; (800636c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8006356:	68db      	ldr	r3, [r3, #12]
 8006358:	4a04      	ldr	r2, [pc, #16]	; (800636c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800635a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800635e:	60d3      	str	r3, [r2, #12]
}
 8006360:	bf00      	nop
 8006362:	46bd      	mov	sp, r7
 8006364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006368:	4770      	bx	lr
 800636a:	bf00      	nop
 800636c:	58024800 	.word	0x58024800

08006370 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08c      	sub	sp, #48	; 0x30
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d102      	bne.n	8006384 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f000 bc1d 	b.w	8006bbe <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 8087 	beq.w	80064a0 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006392:	4b99      	ldr	r3, [pc, #612]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800639a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800639c:	4b96      	ldr	r3, [pc, #600]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800639e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	2b10      	cmp	r3, #16
 80063a6:	d007      	beq.n	80063b8 <HAL_RCC_OscConfig+0x48>
 80063a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063aa:	2b18      	cmp	r3, #24
 80063ac:	d110      	bne.n	80063d0 <HAL_RCC_OscConfig+0x60>
 80063ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b0:	f003 0303 	and.w	r3, r3, #3
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d10b      	bne.n	80063d0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063b8:	4b8f      	ldr	r3, [pc, #572]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d06c      	beq.n	800649e <HAL_RCC_OscConfig+0x12e>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d168      	bne.n	800649e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e3f6      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063d8:	d106      	bne.n	80063e8 <HAL_RCC_OscConfig+0x78>
 80063da:	4b87      	ldr	r3, [pc, #540]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a86      	ldr	r2, [pc, #536]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80063e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	e02e      	b.n	8006446 <HAL_RCC_OscConfig+0xd6>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10c      	bne.n	800640a <HAL_RCC_OscConfig+0x9a>
 80063f0:	4b81      	ldr	r3, [pc, #516]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a80      	ldr	r2, [pc, #512]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80063f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b7e      	ldr	r3, [pc, #504]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a7d      	ldr	r2, [pc, #500]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006406:	6013      	str	r3, [r2, #0]
 8006408:	e01d      	b.n	8006446 <HAL_RCC_OscConfig+0xd6>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006412:	d10c      	bne.n	800642e <HAL_RCC_OscConfig+0xbe>
 8006414:	4b78      	ldr	r3, [pc, #480]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a77      	ldr	r2, [pc, #476]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800641a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800641e:	6013      	str	r3, [r2, #0]
 8006420:	4b75      	ldr	r3, [pc, #468]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a74      	ldr	r2, [pc, #464]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	e00b      	b.n	8006446 <HAL_RCC_OscConfig+0xd6>
 800642e:	4b72      	ldr	r3, [pc, #456]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a71      	ldr	r2, [pc, #452]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006438:	6013      	str	r3, [r2, #0]
 800643a:	4b6f      	ldr	r3, [pc, #444]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a6e      	ldr	r2, [pc, #440]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006440:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006444:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d013      	beq.n	8006476 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800644e:	f7fc fc09 	bl	8002c64 <HAL_GetTick>
 8006452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006456:	f7fc fc05 	bl	8002c64 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b64      	cmp	r3, #100	; 0x64
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e3aa      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006468:	4b63      	ldr	r3, [pc, #396]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d0f0      	beq.n	8006456 <HAL_RCC_OscConfig+0xe6>
 8006474:	e014      	b.n	80064a0 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006476:	f7fc fbf5 	bl	8002c64 <HAL_GetTick>
 800647a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800647c:	e008      	b.n	8006490 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800647e:	f7fc fbf1 	bl	8002c64 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b64      	cmp	r3, #100	; 0x64
 800648a:	d901      	bls.n	8006490 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e396      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006490:	4b59      	ldr	r3, [pc, #356]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1f0      	bne.n	800647e <HAL_RCC_OscConfig+0x10e>
 800649c:	e000      	b.n	80064a0 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800649e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 80cb 	beq.w	8006644 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064ae:	4b52      	ldr	r3, [pc, #328]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80064b0:	691b      	ldr	r3, [r3, #16]
 80064b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064b6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064b8:	4b4f      	ldr	r3, [pc, #316]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80064ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064bc:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d007      	beq.n	80064d4 <HAL_RCC_OscConfig+0x164>
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	2b18      	cmp	r3, #24
 80064c8:	d156      	bne.n	8006578 <HAL_RCC_OscConfig+0x208>
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f003 0303 	and.w	r3, r3, #3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d151      	bne.n	8006578 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80064d4:	4b48      	ldr	r3, [pc, #288]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_RCC_OscConfig+0x17c>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e368      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80064ec:	4b42      	ldr	r3, [pc, #264]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f023 0219 	bic.w	r2, r3, #25
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	493f      	ldr	r1, [pc, #252]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80064fa:	4313      	orrs	r3, r2
 80064fc:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80064fe:	f7fc fbb1 	bl	8002c64 <HAL_GetTick>
 8006502:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006504:	e008      	b.n	8006518 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006506:	f7fc fbad 	bl	8002c64 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e352      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006518:	4b37      	ldr	r3, [pc, #220]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 0304 	and.w	r3, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f0      	beq.n	8006506 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006524:	f7fc fbce 	bl	8002cc4 <HAL_GetREVID>
 8006528:	4603      	mov	r3, r0
 800652a:	f241 0203 	movw	r2, #4099	; 0x1003
 800652e:	4293      	cmp	r3, r2
 8006530:	d817      	bhi.n	8006562 <HAL_RCC_OscConfig+0x1f2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b40      	cmp	r3, #64	; 0x40
 8006538:	d108      	bne.n	800654c <HAL_RCC_OscConfig+0x1dc>
 800653a:	4b2f      	ldr	r3, [pc, #188]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006542:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006548:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800654a:	e07b      	b.n	8006644 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800654c:	4b2a      	ldr	r3, [pc, #168]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	031b      	lsls	r3, r3, #12
 800655a:	4927      	ldr	r1, [pc, #156]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800655c:	4313      	orrs	r3, r2
 800655e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006560:	e070      	b.n	8006644 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006562:	4b25      	ldr	r3, [pc, #148]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	4921      	ldr	r1, [pc, #132]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006572:	4313      	orrs	r3, r2
 8006574:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006576:	e065      	b.n	8006644 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d048      	beq.n	8006612 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006580:	4b1d      	ldr	r3, [pc, #116]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f023 0219 	bic.w	r2, r3, #25
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	491a      	ldr	r1, [pc, #104]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 800658e:	4313      	orrs	r3, r2
 8006590:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006592:	f7fc fb67 	bl	8002c64 <HAL_GetTick>
 8006596:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006598:	e008      	b.n	80065ac <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800659a:	f7fc fb63 	bl	8002c64 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d901      	bls.n	80065ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80065a8:	2303      	movs	r3, #3
 80065aa:	e308      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f003 0304 	and.w	r3, r3, #4
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d0f0      	beq.n	800659a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065b8:	f7fc fb84 	bl	8002cc4 <HAL_GetREVID>
 80065bc:	4603      	mov	r3, r0
 80065be:	f241 0203 	movw	r2, #4099	; 0x1003
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d81a      	bhi.n	80065fc <HAL_RCC_OscConfig+0x28c>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	691b      	ldr	r3, [r3, #16]
 80065ca:	2b40      	cmp	r3, #64	; 0x40
 80065cc:	d108      	bne.n	80065e0 <HAL_RCC_OscConfig+0x270>
 80065ce:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80065d6:	4a08      	ldr	r2, [pc, #32]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80065d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065dc:	6053      	str	r3, [r2, #4]
 80065de:	e031      	b.n	8006644 <HAL_RCC_OscConfig+0x2d4>
 80065e0:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	031b      	lsls	r3, r3, #12
 80065ee:	4902      	ldr	r1, [pc, #8]	; (80065f8 <HAL_RCC_OscConfig+0x288>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	604b      	str	r3, [r1, #4]
 80065f4:	e026      	b.n	8006644 <HAL_RCC_OscConfig+0x2d4>
 80065f6:	bf00      	nop
 80065f8:	58024400 	.word	0x58024400
 80065fc:	4b9a      	ldr	r3, [pc, #616]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	691b      	ldr	r3, [r3, #16]
 8006608:	061b      	lsls	r3, r3, #24
 800660a:	4997      	ldr	r1, [pc, #604]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800660c:	4313      	orrs	r3, r2
 800660e:	604b      	str	r3, [r1, #4]
 8006610:	e018      	b.n	8006644 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006612:	4b95      	ldr	r3, [pc, #596]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a94      	ldr	r2, [pc, #592]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006618:	f023 0301 	bic.w	r3, r3, #1
 800661c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800661e:	f7fc fb21 	bl	8002c64 <HAL_GetTick>
 8006622:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006624:	e008      	b.n	8006638 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006626:	f7fc fb1d 	bl	8002c64 <HAL_GetTick>
 800662a:	4602      	mov	r2, r0
 800662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662e:	1ad3      	subs	r3, r2, r3
 8006630:	2b02      	cmp	r3, #2
 8006632:	d901      	bls.n	8006638 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006634:	2303      	movs	r3, #3
 8006636:	e2c2      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006638:	4b8b      	ldr	r3, [pc, #556]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1f0      	bne.n	8006626 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0310 	and.w	r3, r3, #16
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80a9 	beq.w	80067a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006652:	4b85      	ldr	r3, [pc, #532]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800665a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800665c:	4b82      	ldr	r3, [pc, #520]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800665e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006660:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b08      	cmp	r3, #8
 8006666:	d007      	beq.n	8006678 <HAL_RCC_OscConfig+0x308>
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	2b18      	cmp	r3, #24
 800666c:	d13a      	bne.n	80066e4 <HAL_RCC_OscConfig+0x374>
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f003 0303 	and.w	r3, r3, #3
 8006674:	2b01      	cmp	r3, #1
 8006676:	d135      	bne.n	80066e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006678:	4b7b      	ldr	r3, [pc, #492]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <HAL_RCC_OscConfig+0x320>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	2b80      	cmp	r3, #128	; 0x80
 800668a:	d001      	beq.n	8006690 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e296      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006690:	f7fc fb18 	bl	8002cc4 <HAL_GetREVID>
 8006694:	4603      	mov	r3, r0
 8006696:	f241 0203 	movw	r2, #4099	; 0x1003
 800669a:	4293      	cmp	r3, r2
 800669c:	d817      	bhi.n	80066ce <HAL_RCC_OscConfig+0x35e>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	2b20      	cmp	r3, #32
 80066a4:	d108      	bne.n	80066b8 <HAL_RCC_OscConfig+0x348>
 80066a6:	4b70      	ldr	r3, [pc, #448]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80066ae:	4a6e      	ldr	r2, [pc, #440]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80066b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80066b4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066b6:	e075      	b.n	80067a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066b8:	4b6b      	ldr	r3, [pc, #428]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	069b      	lsls	r3, r3, #26
 80066c6:	4968      	ldr	r1, [pc, #416]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066cc:	e06a      	b.n	80067a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80066ce:	4b66      	ldr	r3, [pc, #408]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	061b      	lsls	r3, r3, #24
 80066dc:	4962      	ldr	r1, [pc, #392]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80066e2:	e05f      	b.n	80067a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	69db      	ldr	r3, [r3, #28]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d042      	beq.n	8006772 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80066ec:	4b5e      	ldr	r3, [pc, #376]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a5d      	ldr	r2, [pc, #372]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80066f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f8:	f7fc fab4 	bl	8002c64 <HAL_GetTick>
 80066fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006700:	f7fc fab0 	bl	8002c64 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e255      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006712:	4b55      	ldr	r3, [pc, #340]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f0      	beq.n	8006700 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800671e:	f7fc fad1 	bl	8002cc4 <HAL_GetREVID>
 8006722:	4603      	mov	r3, r0
 8006724:	f241 0203 	movw	r2, #4099	; 0x1003
 8006728:	4293      	cmp	r3, r2
 800672a:	d817      	bhi.n	800675c <HAL_RCC_OscConfig+0x3ec>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6a1b      	ldr	r3, [r3, #32]
 8006730:	2b20      	cmp	r3, #32
 8006732:	d108      	bne.n	8006746 <HAL_RCC_OscConfig+0x3d6>
 8006734:	4b4c      	ldr	r3, [pc, #304]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800673c:	4a4a      	ldr	r2, [pc, #296]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800673e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006742:	6053      	str	r3, [r2, #4]
 8006744:	e02e      	b.n	80067a4 <HAL_RCC_OscConfig+0x434>
 8006746:	4b48      	ldr	r3, [pc, #288]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6a1b      	ldr	r3, [r3, #32]
 8006752:	069b      	lsls	r3, r3, #26
 8006754:	4944      	ldr	r1, [pc, #272]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006756:	4313      	orrs	r3, r2
 8006758:	604b      	str	r3, [r1, #4]
 800675a:	e023      	b.n	80067a4 <HAL_RCC_OscConfig+0x434>
 800675c:	4b42      	ldr	r3, [pc, #264]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	061b      	lsls	r3, r3, #24
 800676a:	493f      	ldr	r1, [pc, #252]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800676c:	4313      	orrs	r3, r2
 800676e:	60cb      	str	r3, [r1, #12]
 8006770:	e018      	b.n	80067a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006772:	4b3d      	ldr	r3, [pc, #244]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a3c      	ldr	r2, [pc, #240]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800677c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677e:	f7fc fa71 	bl	8002c64 <HAL_GetTick>
 8006782:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006786:	f7fc fa6d 	bl	8002c64 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e212      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006798:	4b33      	ldr	r3, [pc, #204]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1f0      	bne.n	8006786 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d036      	beq.n	800681e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	695b      	ldr	r3, [r3, #20]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d019      	beq.n	80067ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067b8:	4b2b      	ldr	r3, [pc, #172]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80067ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067bc:	4a2a      	ldr	r2, [pc, #168]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80067be:	f043 0301 	orr.w	r3, r3, #1
 80067c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c4:	f7fc fa4e 	bl	8002c64 <HAL_GetTick>
 80067c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067ca:	e008      	b.n	80067de <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067cc:	f7fc fa4a 	bl	8002c64 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d901      	bls.n	80067de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	e1ef      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80067de:	4b22      	ldr	r3, [pc, #136]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80067e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067e2:	f003 0302 	and.w	r3, r3, #2
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d0f0      	beq.n	80067cc <HAL_RCC_OscConfig+0x45c>
 80067ea:	e018      	b.n	800681e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067ec:	4b1e      	ldr	r3, [pc, #120]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80067ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067f0:	4a1d      	ldr	r2, [pc, #116]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 80067f2:	f023 0301 	bic.w	r3, r3, #1
 80067f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067f8:	f7fc fa34 	bl	8002c64 <HAL_GetTick>
 80067fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80067fe:	e008      	b.n	8006812 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006800:	f7fc fa30 	bl	8002c64 <HAL_GetTick>
 8006804:	4602      	mov	r2, r0
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	2b02      	cmp	r3, #2
 800680c:	d901      	bls.n	8006812 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800680e:	2303      	movs	r3, #3
 8006810:	e1d5      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1f0      	bne.n	8006800 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d039      	beq.n	800689e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	699b      	ldr	r3, [r3, #24]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d01c      	beq.n	800686c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006832:	4b0d      	ldr	r3, [pc, #52]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 8006838:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800683c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800683e:	f7fc fa11 	bl	8002c64 <HAL_GetTick>
 8006842:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006844:	e008      	b.n	8006858 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006846:	f7fc fa0d 	bl	8002c64 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d901      	bls.n	8006858 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e1b2      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006858:	4b03      	ldr	r3, [pc, #12]	; (8006868 <HAL_RCC_OscConfig+0x4f8>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d0f0      	beq.n	8006846 <HAL_RCC_OscConfig+0x4d6>
 8006864:	e01b      	b.n	800689e <HAL_RCC_OscConfig+0x52e>
 8006866:	bf00      	nop
 8006868:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800686c:	4b9b      	ldr	r3, [pc, #620]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a9a      	ldr	r2, [pc, #616]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006876:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006878:	f7fc f9f4 	bl	8002c64 <HAL_GetTick>
 800687c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006880:	f7fc f9f0 	bl	8002c64 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b02      	cmp	r3, #2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e195      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006892:	4b92      	ldr	r3, [pc, #584]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1f0      	bne.n	8006880 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f003 0304 	and.w	r3, r3, #4
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f000 8081 	beq.w	80069ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068ac:	4b8c      	ldr	r3, [pc, #560]	; (8006ae0 <HAL_RCC_OscConfig+0x770>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a8b      	ldr	r2, [pc, #556]	; (8006ae0 <HAL_RCC_OscConfig+0x770>)
 80068b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068b8:	f7fc f9d4 	bl	8002c64 <HAL_GetTick>
 80068bc:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068c0:	f7fc f9d0 	bl	8002c64 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	; 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e175      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068d2:	4b83      	ldr	r3, [pc, #524]	; (8006ae0 <HAL_RCC_OscConfig+0x770>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0f0      	beq.n	80068c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d106      	bne.n	80068f4 <HAL_RCC_OscConfig+0x584>
 80068e6:	4b7d      	ldr	r3, [pc, #500]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	4a7c      	ldr	r2, [pc, #496]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 80068ec:	f043 0301 	orr.w	r3, r3, #1
 80068f0:	6713      	str	r3, [r2, #112]	; 0x70
 80068f2:	e02d      	b.n	8006950 <HAL_RCC_OscConfig+0x5e0>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10c      	bne.n	8006916 <HAL_RCC_OscConfig+0x5a6>
 80068fc:	4b77      	ldr	r3, [pc, #476]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 80068fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006900:	4a76      	ldr	r2, [pc, #472]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006902:	f023 0301 	bic.w	r3, r3, #1
 8006906:	6713      	str	r3, [r2, #112]	; 0x70
 8006908:	4b74      	ldr	r3, [pc, #464]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 800690a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690c:	4a73      	ldr	r2, [pc, #460]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 800690e:	f023 0304 	bic.w	r3, r3, #4
 8006912:	6713      	str	r3, [r2, #112]	; 0x70
 8006914:	e01c      	b.n	8006950 <HAL_RCC_OscConfig+0x5e0>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	2b05      	cmp	r3, #5
 800691c:	d10c      	bne.n	8006938 <HAL_RCC_OscConfig+0x5c8>
 800691e:	4b6f      	ldr	r3, [pc, #444]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006922:	4a6e      	ldr	r2, [pc, #440]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006924:	f043 0304 	orr.w	r3, r3, #4
 8006928:	6713      	str	r3, [r2, #112]	; 0x70
 800692a:	4b6c      	ldr	r3, [pc, #432]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 800692c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692e:	4a6b      	ldr	r2, [pc, #428]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	6713      	str	r3, [r2, #112]	; 0x70
 8006936:	e00b      	b.n	8006950 <HAL_RCC_OscConfig+0x5e0>
 8006938:	4b68      	ldr	r3, [pc, #416]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 800693a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693c:	4a67      	ldr	r2, [pc, #412]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 800693e:	f023 0301 	bic.w	r3, r3, #1
 8006942:	6713      	str	r3, [r2, #112]	; 0x70
 8006944:	4b65      	ldr	r3, [pc, #404]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006948:	4a64      	ldr	r2, [pc, #400]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 800694a:	f023 0304 	bic.w	r3, r3, #4
 800694e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d015      	beq.n	8006984 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006958:	f7fc f984 	bl	8002c64 <HAL_GetTick>
 800695c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800695e:	e00a      	b.n	8006976 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006960:	f7fc f980 	bl	8002c64 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	f241 3288 	movw	r2, #5000	; 0x1388
 800696e:	4293      	cmp	r3, r2
 8006970:	d901      	bls.n	8006976 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e123      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006976:	4b59      	ldr	r3, [pc, #356]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	f003 0302 	and.w	r3, r3, #2
 800697e:	2b00      	cmp	r3, #0
 8006980:	d0ee      	beq.n	8006960 <HAL_RCC_OscConfig+0x5f0>
 8006982:	e014      	b.n	80069ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fc f96e 	bl	8002c64 <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800698a:	e00a      	b.n	80069a2 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800698c:	f7fc f96a 	bl	8002c64 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	f241 3288 	movw	r2, #5000	; 0x1388
 800699a:	4293      	cmp	r3, r2
 800699c:	d901      	bls.n	80069a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800699e:	2303      	movs	r3, #3
 80069a0:	e10d      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069a2:	4b4e      	ldr	r3, [pc, #312]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1ee      	bne.n	800698c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 8102 	beq.w	8006bbc <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069b8:	4b48      	ldr	r3, [pc, #288]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80069c0:	2b18      	cmp	r3, #24
 80069c2:	f000 80bd 	beq.w	8006b40 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	f040 809e 	bne.w	8006b0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069d0:	4b42      	ldr	r3, [pc, #264]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a41      	ldr	r2, [pc, #260]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 80069d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fc f942 	bl	8002c64 <HAL_GetTick>
 80069e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069e4:	f7fc f93e 	bl	8002c64 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e0e3      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80069f6:	4b39      	ldr	r3, [pc, #228]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f0      	bne.n	80069e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a02:	4b36      	ldr	r3, [pc, #216]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a06:	4b37      	ldr	r3, [pc, #220]	; (8006ae4 <HAL_RCC_OscConfig+0x774>)
 8006a08:	4013      	ands	r3, r2
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a12:	0112      	lsls	r2, r2, #4
 8006a14:	430a      	orrs	r2, r1
 8006a16:	4931      	ldr	r1, [pc, #196]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	628b      	str	r3, [r1, #40]	; 0x28
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a20:	3b01      	subs	r3, #1
 8006a22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	025b      	lsls	r3, r3, #9
 8006a2e:	b29b      	uxth	r3, r3
 8006a30:	431a      	orrs	r2, r3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a36:	3b01      	subs	r3, #1
 8006a38:	041b      	lsls	r3, r3, #16
 8006a3a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a44:	3b01      	subs	r3, #1
 8006a46:	061b      	lsls	r3, r3, #24
 8006a48:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a4c:	4923      	ldr	r1, [pc, #140]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006a52:	4b22      	ldr	r3, [pc, #136]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a56:	4a21      	ldr	r2, [pc, #132]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a58:	f023 0301 	bic.w	r3, r3, #1
 8006a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a5e:	4b1f      	ldr	r3, [pc, #124]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a62:	4b21      	ldr	r3, [pc, #132]	; (8006ae8 <HAL_RCC_OscConfig+0x778>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	687a      	ldr	r2, [r7, #4]
 8006a68:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a6a:	00d2      	lsls	r2, r2, #3
 8006a6c:	491b      	ldr	r1, [pc, #108]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006a72:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	f023 020c 	bic.w	r2, r3, #12
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	4917      	ldr	r1, [pc, #92]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006a84:	4b15      	ldr	r3, [pc, #84]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a88:	f023 0202 	bic.w	r2, r3, #2
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a90:	4912      	ldr	r1, [pc, #72]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a92:	4313      	orrs	r3, r2
 8006a94:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006a96:	4b11      	ldr	r3, [pc, #68]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9a:	4a10      	ldr	r2, [pc, #64]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006a9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006aa0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa2:	4b0e      	ldr	r3, [pc, #56]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	4a0d      	ldr	r2, [pc, #52]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006aae:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ab8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006aba:	4b08      	ldr	r3, [pc, #32]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abe:	4a07      	ldr	r2, [pc, #28]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006ac0:	f043 0301 	orr.w	r3, r3, #1
 8006ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a04      	ldr	r2, [pc, #16]	; (8006adc <HAL_RCC_OscConfig+0x76c>)
 8006acc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad2:	f7fc f8c7 	bl	8002c64 <HAL_GetTick>
 8006ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ad8:	e011      	b.n	8006afe <HAL_RCC_OscConfig+0x78e>
 8006ada:	bf00      	nop
 8006adc:	58024400 	.word	0x58024400
 8006ae0:	58024800 	.word	0x58024800
 8006ae4:	fffffc0c 	.word	0xfffffc0c
 8006ae8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006aec:	f7fc f8ba 	bl	8002c64 <HAL_GetTick>
 8006af0:	4602      	mov	r2, r0
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	1ad3      	subs	r3, r2, r3
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d901      	bls.n	8006afe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006afa:	2303      	movs	r3, #3
 8006afc:	e05f      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006afe:	4b32      	ldr	r3, [pc, #200]	; (8006bc8 <HAL_RCC_OscConfig+0x858>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0f0      	beq.n	8006aec <HAL_RCC_OscConfig+0x77c>
 8006b0a:	e057      	b.n	8006bbc <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b0c:	4b2e      	ldr	r3, [pc, #184]	; (8006bc8 <HAL_RCC_OscConfig+0x858>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a2d      	ldr	r2, [pc, #180]	; (8006bc8 <HAL_RCC_OscConfig+0x858>)
 8006b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b18:	f7fc f8a4 	bl	8002c64 <HAL_GetTick>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b20:	f7fc f8a0 	bl	8002c64 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e045      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b32:	4b25      	ldr	r3, [pc, #148]	; (8006bc8 <HAL_RCC_OscConfig+0x858>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1f0      	bne.n	8006b20 <HAL_RCC_OscConfig+0x7b0>
 8006b3e:	e03d      	b.n	8006bbc <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b40:	4b21      	ldr	r3, [pc, #132]	; (8006bc8 <HAL_RCC_OscConfig+0x858>)
 8006b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b46:	4b20      	ldr	r3, [pc, #128]	; (8006bc8 <HAL_RCC_OscConfig+0x858>)
 8006b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d031      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b54:	693b      	ldr	r3, [r7, #16]
 8006b56:	f003 0203 	and.w	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d12a      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	091b      	lsrs	r3, r3, #4
 8006b66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d122      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d11a      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	0a5b      	lsrs	r3, r3, #9
 8006b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b8e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d111      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	0c1b      	lsrs	r3, r3, #16
 8006b98:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d108      	bne.n	8006bb8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	0e1b      	lsrs	r3, r3, #24
 8006baa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e000      	b.n	8006bbe <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3730      	adds	r7, #48	; 0x30
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}
 8006bc6:	bf00      	nop
 8006bc8:	58024400 	.word	0x58024400

08006bcc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e19c      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006be0:	4b8a      	ldr	r3, [pc, #552]	; (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 030f 	and.w	r3, r3, #15
 8006be8:	683a      	ldr	r2, [r7, #0]
 8006bea:	429a      	cmp	r2, r3
 8006bec:	d910      	bls.n	8006c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bee:	4b87      	ldr	r3, [pc, #540]	; (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f023 020f 	bic.w	r2, r3, #15
 8006bf6:	4985      	ldr	r1, [pc, #532]	; (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bfe:	4b83      	ldr	r3, [pc, #524]	; (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f003 030f 	and.w	r3, r3, #15
 8006c06:	683a      	ldr	r2, [r7, #0]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d001      	beq.n	8006c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e184      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d010      	beq.n	8006c3e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	691a      	ldr	r2, [r3, #16]
 8006c20:	4b7b      	ldr	r3, [pc, #492]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d908      	bls.n	8006c3e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c2c:	4b78      	ldr	r3, [pc, #480]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	4975      	ldr	r1, [pc, #468]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d010      	beq.n	8006c6c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	695a      	ldr	r2, [r3, #20]
 8006c4e:	4b70      	ldr	r3, [pc, #448]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c50:	69db      	ldr	r3, [r3, #28]
 8006c52:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d908      	bls.n	8006c6c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c5a:	4b6d      	ldr	r3, [pc, #436]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	496a      	ldr	r1, [pc, #424]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0310 	and.w	r3, r3, #16
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d010      	beq.n	8006c9a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	4b64      	ldr	r3, [pc, #400]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c7e:	69db      	ldr	r3, [r3, #28]
 8006c80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d908      	bls.n	8006c9a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006c88:	4b61      	ldr	r3, [pc, #388]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c8a:	69db      	ldr	r3, [r3, #28]
 8006c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	495e      	ldr	r1, [pc, #376]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006c96:	4313      	orrs	r3, r2
 8006c98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d010      	beq.n	8006cc8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69da      	ldr	r2, [r3, #28]
 8006caa:	4b59      	ldr	r3, [pc, #356]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d908      	bls.n	8006cc8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cb6:	4b56      	ldr	r3, [pc, #344]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	4953      	ldr	r1, [pc, #332]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d010      	beq.n	8006cf6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68da      	ldr	r2, [r3, #12]
 8006cd8:	4b4d      	ldr	r3, [pc, #308]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cda:	699b      	ldr	r3, [r3, #24]
 8006cdc:	f003 030f 	and.w	r3, r3, #15
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d908      	bls.n	8006cf6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ce4:	4b4a      	ldr	r3, [pc, #296]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006ce6:	699b      	ldr	r3, [r3, #24]
 8006ce8:	f023 020f 	bic.w	r2, r3, #15
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	4947      	ldr	r1, [pc, #284]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d055      	beq.n	8006dae <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d02:	4b43      	ldr	r3, [pc, #268]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	4940      	ldr	r1, [pc, #256]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d10:	4313      	orrs	r3, r2
 8006d12:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d107      	bne.n	8006d2c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d1c:	4b3c      	ldr	r3, [pc, #240]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d121      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0f6      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d107      	bne.n	8006d44 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d34:	4b36      	ldr	r3, [pc, #216]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d115      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e0ea      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d4c:	4b30      	ldr	r3, [pc, #192]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d109      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e0de      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d5c:	4b2c      	ldr	r3, [pc, #176]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 0304 	and.w	r3, r3, #4
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e0d6      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006d6c:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d6e:	691b      	ldr	r3, [r3, #16]
 8006d70:	f023 0207 	bic.w	r2, r3, #7
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	4925      	ldr	r1, [pc, #148]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d7e:	f7fb ff71 	bl	8002c64 <HAL_GetTick>
 8006d82:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d84:	e00a      	b.n	8006d9c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d86:	f7fb ff6d 	bl	8002c64 <HAL_GetTick>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d901      	bls.n	8006d9c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e0be      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d9c:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d1eb      	bne.n	8006d86 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d010      	beq.n	8006ddc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	68da      	ldr	r2, [r3, #12]
 8006dbe:	4b14      	ldr	r3, [pc, #80]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d208      	bcs.n	8006ddc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dca:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006dcc:	699b      	ldr	r3, [r3, #24]
 8006dce:	f023 020f 	bic.w	r2, r3, #15
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	68db      	ldr	r3, [r3, #12]
 8006dd6:	490e      	ldr	r1, [pc, #56]	; (8006e10 <HAL_RCC_ClockConfig+0x244>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d214      	bcs.n	8006e14 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dea:	4b08      	ldr	r3, [pc, #32]	; (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f023 020f 	bic.w	r2, r3, #15
 8006df2:	4906      	ldr	r1, [pc, #24]	; (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfa:	4b04      	ldr	r3, [pc, #16]	; (8006e0c <HAL_RCC_ClockConfig+0x240>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d005      	beq.n	8006e14 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e086      	b.n	8006f1a <HAL_RCC_ClockConfig+0x34e>
 8006e0c:	52002000 	.word	0x52002000
 8006e10:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f003 0304 	and.w	r3, r3, #4
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d010      	beq.n	8006e42 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691a      	ldr	r2, [r3, #16]
 8006e24:	4b3f      	ldr	r3, [pc, #252]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e26:	699b      	ldr	r3, [r3, #24]
 8006e28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d208      	bcs.n	8006e42 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e30:	4b3c      	ldr	r3, [pc, #240]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e32:	699b      	ldr	r3, [r3, #24]
 8006e34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	4939      	ldr	r1, [pc, #228]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 0308 	and.w	r3, r3, #8
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d010      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	695a      	ldr	r2, [r3, #20]
 8006e52:	4b34      	ldr	r3, [pc, #208]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e54:	69db      	ldr	r3, [r3, #28]
 8006e56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d208      	bcs.n	8006e70 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e5e:	4b31      	ldr	r3, [pc, #196]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e60:	69db      	ldr	r3, [r3, #28]
 8006e62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	695b      	ldr	r3, [r3, #20]
 8006e6a:	492e      	ldr	r1, [pc, #184]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 0310 	and.w	r3, r3, #16
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d010      	beq.n	8006e9e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	4b28      	ldr	r3, [pc, #160]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e82:	69db      	ldr	r3, [r3, #28]
 8006e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d208      	bcs.n	8006e9e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e8c:	4b25      	ldr	r3, [pc, #148]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	4922      	ldr	r1, [pc, #136]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f003 0320 	and.w	r3, r3, #32
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d010      	beq.n	8006ecc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	69da      	ldr	r2, [r3, #28]
 8006eae:	4b1d      	ldr	r3, [pc, #116]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006eb0:	6a1b      	ldr	r3, [r3, #32]
 8006eb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d208      	bcs.n	8006ecc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006eba:	4b1a      	ldr	r3, [pc, #104]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	4917      	ldr	r1, [pc, #92]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006ecc:	f000 f834 	bl	8006f38 <HAL_RCC_GetSysClockFreq>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4b14      	ldr	r3, [pc, #80]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	0a1b      	lsrs	r3, r3, #8
 8006ed8:	f003 030f 	and.w	r3, r3, #15
 8006edc:	4912      	ldr	r1, [pc, #72]	; (8006f28 <HAL_RCC_ClockConfig+0x35c>)
 8006ede:	5ccb      	ldrb	r3, [r1, r3]
 8006ee0:	f003 031f 	and.w	r3, r3, #31
 8006ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006eea:	4b0e      	ldr	r3, [pc, #56]	; (8006f24 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	699b      	ldr	r3, [r3, #24]
 8006eee:	f003 030f 	and.w	r3, r3, #15
 8006ef2:	4a0d      	ldr	r2, [pc, #52]	; (8006f28 <HAL_RCC_ClockConfig+0x35c>)
 8006ef4:	5cd3      	ldrb	r3, [r2, r3]
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	fa22 f303 	lsr.w	r3, r2, r3
 8006f00:	4a0a      	ldr	r2, [pc, #40]	; (8006f2c <HAL_RCC_ClockConfig+0x360>)
 8006f02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f04:	4a0a      	ldr	r2, [pc, #40]	; (8006f30 <HAL_RCC_ClockConfig+0x364>)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	; (8006f34 <HAL_RCC_ClockConfig+0x368>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fb fe5e 	bl	8002bd0 <HAL_InitTick>
 8006f14:	4603      	mov	r3, r0
 8006f16:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	58024400 	.word	0x58024400
 8006f28:	0800bbb4 	.word	0x0800bbb4
 8006f2c:	24000004 	.word	0x24000004
 8006f30:	24000000 	.word	0x24000000
 8006f34:	24000018 	.word	0x24000018

08006f38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f3e:	4bb3      	ldr	r3, [pc, #716]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f40:	691b      	ldr	r3, [r3, #16]
 8006f42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f46:	2b18      	cmp	r3, #24
 8006f48:	f200 8155 	bhi.w	80071f6 <HAL_RCC_GetSysClockFreq+0x2be>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006fb9 	.word	0x08006fb9
 8006f58:	080071f7 	.word	0x080071f7
 8006f5c:	080071f7 	.word	0x080071f7
 8006f60:	080071f7 	.word	0x080071f7
 8006f64:	080071f7 	.word	0x080071f7
 8006f68:	080071f7 	.word	0x080071f7
 8006f6c:	080071f7 	.word	0x080071f7
 8006f70:	080071f7 	.word	0x080071f7
 8006f74:	08006fdf 	.word	0x08006fdf
 8006f78:	080071f7 	.word	0x080071f7
 8006f7c:	080071f7 	.word	0x080071f7
 8006f80:	080071f7 	.word	0x080071f7
 8006f84:	080071f7 	.word	0x080071f7
 8006f88:	080071f7 	.word	0x080071f7
 8006f8c:	080071f7 	.word	0x080071f7
 8006f90:	080071f7 	.word	0x080071f7
 8006f94:	08006fe5 	.word	0x08006fe5
 8006f98:	080071f7 	.word	0x080071f7
 8006f9c:	080071f7 	.word	0x080071f7
 8006fa0:	080071f7 	.word	0x080071f7
 8006fa4:	080071f7 	.word	0x080071f7
 8006fa8:	080071f7 	.word	0x080071f7
 8006fac:	080071f7 	.word	0x080071f7
 8006fb0:	080071f7 	.word	0x080071f7
 8006fb4:	08006feb 	.word	0x08006feb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb8:	4b94      	ldr	r3, [pc, #592]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d009      	beq.n	8006fd8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006fc4:	4b91      	ldr	r3, [pc, #580]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	08db      	lsrs	r3, r3, #3
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	4a90      	ldr	r2, [pc, #576]	; (8007210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8006fd6:	e111      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006fd8:	4b8d      	ldr	r3, [pc, #564]	; (8007210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fda:	61bb      	str	r3, [r7, #24]
    break;
 8006fdc:	e10e      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006fde:	4b8d      	ldr	r3, [pc, #564]	; (8007214 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006fe0:	61bb      	str	r3, [r7, #24]
    break;
 8006fe2:	e10b      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006fe4:	4b8c      	ldr	r3, [pc, #560]	; (8007218 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006fe6:	61bb      	str	r3, [r7, #24]
    break;
 8006fe8:	e108      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006fea:	4b88      	ldr	r3, [pc, #544]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fee:	f003 0303 	and.w	r3, r3, #3
 8006ff2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006ff4:	4b85      	ldr	r3, [pc, #532]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ffe:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007000:	4b82      	ldr	r3, [pc, #520]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800700a:	4b80      	ldr	r3, [pc, #512]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800700c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700e:	08db      	lsrs	r3, r3, #3
 8007010:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	fb02 f303 	mul.w	r3, r2, r3
 800701a:	ee07 3a90 	vmov	s15, r3
 800701e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007022:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 80e1 	beq.w	80071f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b02      	cmp	r3, #2
 8007032:	f000 8083 	beq.w	800713c <HAL_RCC_GetSysClockFreq+0x204>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b02      	cmp	r3, #2
 800703a:	f200 80a1 	bhi.w	8007180 <HAL_RCC_GetSysClockFreq+0x248>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d003      	beq.n	800704c <HAL_RCC_GetSysClockFreq+0x114>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	2b01      	cmp	r3, #1
 8007048:	d056      	beq.n	80070f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800704a:	e099      	b.n	8007180 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800704c:	4b6f      	ldr	r3, [pc, #444]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 0320 	and.w	r3, r3, #32
 8007054:	2b00      	cmp	r3, #0
 8007056:	d02d      	beq.n	80070b4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007058:	4b6c      	ldr	r3, [pc, #432]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	08db      	lsrs	r3, r3, #3
 800705e:	f003 0303 	and.w	r3, r3, #3
 8007062:	4a6b      	ldr	r2, [pc, #428]	; (8007210 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
 8007068:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	ee07 3a90 	vmov	s15, r3
 8007070:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	ee07 3a90 	vmov	s15, r3
 800707a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800707e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007082:	4b62      	ldr	r3, [pc, #392]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800708a:	ee07 3a90 	vmov	s15, r3
 800708e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007092:	ed97 6a02 	vldr	s12, [r7, #8]
 8007096:	eddf 5a61 	vldr	s11, [pc, #388]	; 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 800709a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800709e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80070b2:	e087      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	ee07 3a90 	vmov	s15, r3
 80070ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007220 <HAL_RCC_GetSysClockFreq+0x2e8>
 80070c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070c6:	4b51      	ldr	r3, [pc, #324]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ce:	ee07 3a90 	vmov	s15, r3
 80070d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80070da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 80070de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f6:	e065      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070f8:	693b      	ldr	r3, [r7, #16]
 80070fa:	ee07 3a90 	vmov	s15, r3
 80070fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007102:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007224 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007106:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800710a:	4b40      	ldr	r3, [pc, #256]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007112:	ee07 3a90 	vmov	s15, r3
 8007116:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800711a:	ed97 6a02 	vldr	s12, [r7, #8]
 800711e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007122:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007126:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800712a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007136:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800713a:	e043      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	ee07 3a90 	vmov	s15, r3
 8007142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007146:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007228 <HAL_RCC_GetSysClockFreq+0x2f0>
 800714a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800714e:	4b2f      	ldr	r3, [pc, #188]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007156:	ee07 3a90 	vmov	s15, r3
 800715a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800715e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007162:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 8007166:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800716a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800716e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007172:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800717e:	e021      	b.n	80071c4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	ee07 3a90 	vmov	s15, r3
 8007186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007224 <HAL_RCC_GetSysClockFreq+0x2ec>
 800718e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007192:	4b1e      	ldr	r3, [pc, #120]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007196:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800719a:	ee07 3a90 	vmov	s15, r3
 800719e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800721c <HAL_RCC_GetSysClockFreq+0x2e4>
 80071aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071c2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80071c4:	4b11      	ldr	r3, [pc, #68]	; (800720c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c8:	0a5b      	lsrs	r3, r3, #9
 80071ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ce:	3301      	adds	r3, #1
 80071d0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	ee07 3a90 	vmov	s15, r3
 80071d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80071dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80071e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e8:	ee17 3a90 	vmov	r3, s15
 80071ec:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80071ee:	e005      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80071f0:	2300      	movs	r3, #0
 80071f2:	61bb      	str	r3, [r7, #24]
    break;
 80071f4:	e002      	b.n	80071fc <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80071f6:	4b07      	ldr	r3, [pc, #28]	; (8007214 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80071f8:	61bb      	str	r3, [r7, #24]
    break;
 80071fa:	bf00      	nop
  }

  return sysclockfreq;
 80071fc:	69bb      	ldr	r3, [r7, #24]
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3724      	adds	r7, #36	; 0x24
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	58024400 	.word	0x58024400
 8007210:	03d09000 	.word	0x03d09000
 8007214:	003d0900 	.word	0x003d0900
 8007218:	007a1200 	.word	0x007a1200
 800721c:	46000000 	.word	0x46000000
 8007220:	4c742400 	.word	0x4c742400
 8007224:	4a742400 	.word	0x4a742400
 8007228:	4af42400 	.word	0x4af42400

0800722c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b082      	sub	sp, #8
 8007230:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007232:	f7ff fe81 	bl	8006f38 <HAL_RCC_GetSysClockFreq>
 8007236:	4602      	mov	r2, r0
 8007238:	4b10      	ldr	r3, [pc, #64]	; (800727c <HAL_RCC_GetHCLKFreq+0x50>)
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	0a1b      	lsrs	r3, r3, #8
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	490f      	ldr	r1, [pc, #60]	; (8007280 <HAL_RCC_GetHCLKFreq+0x54>)
 8007244:	5ccb      	ldrb	r3, [r1, r3]
 8007246:	f003 031f 	and.w	r3, r3, #31
 800724a:	fa22 f303 	lsr.w	r3, r2, r3
 800724e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <HAL_RCC_GetHCLKFreq+0x50>)
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	4a09      	ldr	r2, [pc, #36]	; (8007280 <HAL_RCC_GetHCLKFreq+0x54>)
 800725a:	5cd3      	ldrb	r3, [r2, r3]
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	fa22 f303 	lsr.w	r3, r2, r3
 8007266:	4a07      	ldr	r2, [pc, #28]	; (8007284 <HAL_RCC_GetHCLKFreq+0x58>)
 8007268:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800726a:	4a07      	ldr	r2, [pc, #28]	; (8007288 <HAL_RCC_GetHCLKFreq+0x5c>)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007270:	4b04      	ldr	r3, [pc, #16]	; (8007284 <HAL_RCC_GetHCLKFreq+0x58>)
 8007272:	681b      	ldr	r3, [r3, #0]
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}
 800727c:	58024400 	.word	0x58024400
 8007280:	0800bbb4 	.word	0x0800bbb4
 8007284:	24000004 	.word	0x24000004
 8007288:	24000000 	.word	0x24000000

0800728c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007290:	f7ff ffcc 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8007294:	4602      	mov	r2, r0
 8007296:	4b06      	ldr	r3, [pc, #24]	; (80072b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007298:	69db      	ldr	r3, [r3, #28]
 800729a:	091b      	lsrs	r3, r3, #4
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	4904      	ldr	r1, [pc, #16]	; (80072b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072a2:	5ccb      	ldrb	r3, [r1, r3]
 80072a4:	f003 031f 	and.w	r3, r3, #31
 80072a8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	58024400 	.word	0x58024400
 80072b4:	0800bbb4 	.word	0x0800bbb4

080072b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80072bc:	f7ff ffb6 	bl	800722c <HAL_RCC_GetHCLKFreq>
 80072c0:	4602      	mov	r2, r0
 80072c2:	4b06      	ldr	r3, [pc, #24]	; (80072dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80072c4:	69db      	ldr	r3, [r3, #28]
 80072c6:	0a1b      	lsrs	r3, r3, #8
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	4904      	ldr	r1, [pc, #16]	; (80072e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80072ce:	5ccb      	ldrb	r3, [r1, r3]
 80072d0:	f003 031f 	and.w	r3, r3, #31
 80072d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80072d8:	4618      	mov	r0, r3
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	58024400 	.word	0x58024400
 80072e0:	0800bbb4 	.word	0x0800bbb4

080072e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b086      	sub	sp, #24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072ec:	2300      	movs	r3, #0
 80072ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072f0:	2300      	movs	r3, #0
 80072f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d03f      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007304:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007308:	d02a      	beq.n	8007360 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800730a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800730e:	d824      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007310:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007314:	d018      	beq.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800731a:	d81e      	bhi.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007324:	d007      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007326:	e018      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007328:	4ba3      	ldr	r3, [pc, #652]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800732a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732c:	4aa2      	ldr	r2, [pc, #648]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800732e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007332:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007334:	e015      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3304      	adds	r3, #4
 800733a:	2102      	movs	r1, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f001 f9d5 	bl	80086ec <RCCEx_PLL2_Config>
 8007342:	4603      	mov	r3, r0
 8007344:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007346:	e00c      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	3324      	adds	r3, #36	; 0x24
 800734c:	2102      	movs	r1, #2
 800734e:	4618      	mov	r0, r3
 8007350:	f001 fa7e 	bl	8008850 <RCCEx_PLL3_Config>
 8007354:	4603      	mov	r3, r0
 8007356:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	75fb      	strb	r3, [r7, #23]
      break;
 800735e:	e000      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d109      	bne.n	800737c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007368:	4b93      	ldr	r3, [pc, #588]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800736a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007374:	4990      	ldr	r1, [pc, #576]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007376:	4313      	orrs	r3, r2
 8007378:	650b      	str	r3, [r1, #80]	; 0x50
 800737a:	e001      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800737c:	7dfb      	ldrb	r3, [r7, #23]
 800737e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007388:	2b00      	cmp	r3, #0
 800738a:	d03d      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007390:	2b04      	cmp	r3, #4
 8007392:	d826      	bhi.n	80073e2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	080073b1 	.word	0x080073b1
 80073a0:	080073bf 	.word	0x080073bf
 80073a4:	080073d1 	.word	0x080073d1
 80073a8:	080073e9 	.word	0x080073e9
 80073ac:	080073e9 	.word	0x080073e9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073b0:	4b81      	ldr	r3, [pc, #516]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073b4:	4a80      	ldr	r2, [pc, #512]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073bc:	e015      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	3304      	adds	r3, #4
 80073c2:	2100      	movs	r1, #0
 80073c4:	4618      	mov	r0, r3
 80073c6:	f001 f991 	bl	80086ec <RCCEx_PLL2_Config>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073ce:	e00c      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	3324      	adds	r3, #36	; 0x24
 80073d4:	2100      	movs	r1, #0
 80073d6:	4618      	mov	r0, r3
 80073d8:	f001 fa3a 	bl	8008850 <RCCEx_PLL3_Config>
 80073dc:	4603      	mov	r3, r0
 80073de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80073e0:	e003      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	75fb      	strb	r3, [r7, #23]
      break;
 80073e6:	e000      	b.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80073e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073ea:	7dfb      	ldrb	r3, [r7, #23]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073f0:	4b71      	ldr	r3, [pc, #452]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f4:	f023 0207 	bic.w	r2, r3, #7
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073fc:	496e      	ldr	r1, [pc, #440]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	650b      	str	r3, [r1, #80]	; 0x50
 8007402:	e001      	b.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007404:	7dfb      	ldrb	r3, [r7, #23]
 8007406:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007410:	2b00      	cmp	r3, #0
 8007412:	d042      	beq.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800741c:	d02b      	beq.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800741e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007422:	d825      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007424:	2bc0      	cmp	r3, #192	; 0xc0
 8007426:	d028      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007428:	2bc0      	cmp	r3, #192	; 0xc0
 800742a:	d821      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800742c:	2b80      	cmp	r3, #128	; 0x80
 800742e:	d016      	beq.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007430:	2b80      	cmp	r3, #128	; 0x80
 8007432:	d81d      	bhi.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007434:	2b00      	cmp	r3, #0
 8007436:	d002      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007438:	2b40      	cmp	r3, #64	; 0x40
 800743a:	d007      	beq.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800743c:	e018      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800743e:	4b5e      	ldr	r3, [pc, #376]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007442:	4a5d      	ldr	r2, [pc, #372]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007448:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800744a:	e017      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	2100      	movs	r1, #0
 8007452:	4618      	mov	r0, r3
 8007454:	f001 f94a 	bl	80086ec <RCCEx_PLL2_Config>
 8007458:	4603      	mov	r3, r0
 800745a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800745c:	e00e      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3324      	adds	r3, #36	; 0x24
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f001 f9f3 	bl	8008850 <RCCEx_PLL3_Config>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800746e:	e005      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	75fb      	strb	r3, [r7, #23]
      break;
 8007474:	e002      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8007476:	bf00      	nop
 8007478:	e000      	b.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800747a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800747c:	7dfb      	ldrb	r3, [r7, #23]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d109      	bne.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007482:	4b4d      	ldr	r3, [pc, #308]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007486:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800748e:	494a      	ldr	r1, [pc, #296]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007490:	4313      	orrs	r3, r2
 8007492:	650b      	str	r3, [r1, #80]	; 0x50
 8007494:	e001      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d049      	beq.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074ac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074b0:	d030      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80074b2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074b6:	d82a      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80074b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80074bc:	d02c      	beq.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80074be:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80074c2:	d824      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80074c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074c8:	d018      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x218>
 80074ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074ce:	d81e      	bhi.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80074d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80074d8:	d007      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x206>
 80074da:	e018      	b.n	800750e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80074dc:	4b36      	ldr	r3, [pc, #216]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074e0:	4a35      	ldr	r2, [pc, #212]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80074e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80074e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074e8:	e017      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	3304      	adds	r3, #4
 80074ee:	2100      	movs	r1, #0
 80074f0:	4618      	mov	r0, r3
 80074f2:	f001 f8fb 	bl	80086ec <RCCEx_PLL2_Config>
 80074f6:	4603      	mov	r3, r0
 80074f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80074fa:	e00e      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3324      	adds	r3, #36	; 0x24
 8007500:	2100      	movs	r1, #0
 8007502:	4618      	mov	r0, r3
 8007504:	f001 f9a4 	bl	8008850 <RCCEx_PLL3_Config>
 8007508:	4603      	mov	r3, r0
 800750a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800750c:	e005      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	75fb      	strb	r3, [r7, #23]
      break;
 8007512:	e002      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007514:	bf00      	nop
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007518:	bf00      	nop
    }

    if(ret == HAL_OK)
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10a      	bne.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007520:	4b25      	ldr	r3, [pc, #148]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800752e:	4922      	ldr	r1, [pc, #136]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007530:	4313      	orrs	r3, r2
 8007532:	658b      	str	r3, [r1, #88]	; 0x58
 8007534:	e001      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007536:	7dfb      	ldrb	r3, [r7, #23]
 8007538:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007542:	2b00      	cmp	r3, #0
 8007544:	d04b      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800754c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007550:	d030      	beq.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007552:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007556:	d82a      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007558:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800755c:	d02e      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800755e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007562:	d824      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007564:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007568:	d018      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800756a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800756e:	d81e      	bhi.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007574:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007578:	d007      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800757a:	e018      	b.n	80075ae <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800757e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007580:	4a0d      	ldr	r2, [pc, #52]	; (80075b8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007582:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007586:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007588:	e019      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	3304      	adds	r3, #4
 800758e:	2100      	movs	r1, #0
 8007590:	4618      	mov	r0, r3
 8007592:	f001 f8ab 	bl	80086ec <RCCEx_PLL2_Config>
 8007596:	4603      	mov	r3, r0
 8007598:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800759a:	e010      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	3324      	adds	r3, #36	; 0x24
 80075a0:	2100      	movs	r1, #0
 80075a2:	4618      	mov	r0, r3
 80075a4:	f001 f954 	bl	8008850 <RCCEx_PLL3_Config>
 80075a8:	4603      	mov	r3, r0
 80075aa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075ac:	e007      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]
      break;
 80075b2:	e004      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80075b4:	bf00      	nop
 80075b6:	e002      	b.n	80075be <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80075b8:	58024400 	.word	0x58024400
      break;
 80075bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075be:	7dfb      	ldrb	r3, [r7, #23]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80075c4:	4b99      	ldr	r3, [pc, #612]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80075d2:	4996      	ldr	r1, [pc, #600]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80075d4:	4313      	orrs	r3, r2
 80075d6:	658b      	str	r3, [r1, #88]	; 0x58
 80075d8:	e001      	b.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075da:	7dfb      	ldrb	r3, [r7, #23]
 80075dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d032      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075ee:	2b30      	cmp	r3, #48	; 0x30
 80075f0:	d01c      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80075f2:	2b30      	cmp	r3, #48	; 0x30
 80075f4:	d817      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80075f6:	2b20      	cmp	r3, #32
 80075f8:	d00c      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80075fa:	2b20      	cmp	r3, #32
 80075fc:	d813      	bhi.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d016      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007602:	2b10      	cmp	r3, #16
 8007604:	d10f      	bne.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007606:	4b89      	ldr	r3, [pc, #548]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	4a88      	ldr	r2, [pc, #544]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800760c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007610:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007612:	e00e      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	2102      	movs	r1, #2
 800761a:	4618      	mov	r0, r3
 800761c:	f001 f866 	bl	80086ec <RCCEx_PLL2_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007624:	e005      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	75fb      	strb	r3, [r7, #23]
      break;
 800762a:	e002      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800762c:	bf00      	nop
 800762e:	e000      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d109      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007638:	4b7c      	ldr	r3, [pc, #496]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800763a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007644:	4979      	ldr	r1, [pc, #484]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007646:	4313      	orrs	r3, r2
 8007648:	64cb      	str	r3, [r1, #76]	; 0x4c
 800764a:	e001      	b.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800764c:	7dfb      	ldrb	r3, [r7, #23]
 800764e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d047      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007664:	d030      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007666:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800766a:	d82a      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800766c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007670:	d02c      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007672:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007676:	d824      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007678:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800767c:	d018      	beq.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800767e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007682:	d81e      	bhi.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007684:	2b00      	cmp	r3, #0
 8007686:	d003      	beq.n	8007690 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768c:	d007      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800768e:	e018      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007690:	4b66      	ldr	r3, [pc, #408]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007694:	4a65      	ldr	r2, [pc, #404]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007696:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800769a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800769c:	e017      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	3304      	adds	r3, #4
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 f821 	bl	80086ec <RCCEx_PLL2_Config>
 80076aa:	4603      	mov	r3, r0
 80076ac:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076ae:	e00e      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3324      	adds	r3, #36	; 0x24
 80076b4:	2100      	movs	r1, #0
 80076b6:	4618      	mov	r0, r3
 80076b8:	f001 f8ca 	bl	8008850 <RCCEx_PLL3_Config>
 80076bc:	4603      	mov	r3, r0
 80076be:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076c0:	e005      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	75fb      	strb	r3, [r7, #23]
      break;
 80076c6:	e002      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80076c8:	bf00      	nop
 80076ca:	e000      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80076cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076ce:	7dfb      	ldrb	r3, [r7, #23]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d109      	bne.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80076d4:	4b55      	ldr	r3, [pc, #340]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076e0:	4952      	ldr	r1, [pc, #328]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	650b      	str	r3, [r1, #80]	; 0x50
 80076e6:	e001      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e8:	7dfb      	ldrb	r3, [r7, #23]
 80076ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d049      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007700:	d02e      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007706:	d828      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007708:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800770c:	d02a      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800770e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007712:	d822      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007714:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007718:	d026      	beq.n	8007768 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800771a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800771e:	d81c      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007720:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007724:	d010      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007726:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800772a:	d816      	bhi.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800772c:	2b00      	cmp	r3, #0
 800772e:	d01d      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007734:	d111      	bne.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3304      	adds	r3, #4
 800773a:	2101      	movs	r1, #1
 800773c:	4618      	mov	r0, r3
 800773e:	f000 ffd5 	bl	80086ec <RCCEx_PLL2_Config>
 8007742:	4603      	mov	r3, r0
 8007744:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007746:	e012      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3324      	adds	r3, #36	; 0x24
 800774c:	2101      	movs	r1, #1
 800774e:	4618      	mov	r0, r3
 8007750:	f001 f87e 	bl	8008850 <RCCEx_PLL3_Config>
 8007754:	4603      	mov	r3, r0
 8007756:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007758:	e009      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	75fb      	strb	r3, [r7, #23]
      break;
 800775e:	e006      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007760:	bf00      	nop
 8007762:	e004      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007764:	bf00      	nop
 8007766:	e002      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007768:	bf00      	nop
 800776a:	e000      	b.n	800776e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800776c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800776e:	7dfb      	ldrb	r3, [r7, #23]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d109      	bne.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007774:	4b2d      	ldr	r3, [pc, #180]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007778:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007780:	492a      	ldr	r1, [pc, #168]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007782:	4313      	orrs	r3, r2
 8007784:	650b      	str	r3, [r1, #80]	; 0x50
 8007786:	e001      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d04d      	beq.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800779e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077a2:	d02e      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80077a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077a8:	d828      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077ae:	d02a      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x522>
 80077b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b4:	d822      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80077b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077ba:	d026      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x526>
 80077bc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80077c0:	d81c      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80077c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077c6:	d010      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x506>
 80077c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80077cc:	d816      	bhi.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d01d      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80077d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077d6:	d111      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	3304      	adds	r3, #4
 80077dc:	2101      	movs	r1, #1
 80077de:	4618      	mov	r0, r3
 80077e0:	f000 ff84 	bl	80086ec <RCCEx_PLL2_Config>
 80077e4:	4603      	mov	r3, r0
 80077e6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077e8:	e012      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	3324      	adds	r3, #36	; 0x24
 80077ee:	2101      	movs	r1, #1
 80077f0:	4618      	mov	r0, r3
 80077f2:	f001 f82d 	bl	8008850 <RCCEx_PLL3_Config>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80077fa:	e009      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	75fb      	strb	r3, [r7, #23]
      break;
 8007800:	e006      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007802:	bf00      	nop
 8007804:	e004      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007806:	bf00      	nop
 8007808:	e002      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800780e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007810:	7dfb      	ldrb	r3, [r7, #23]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d10c      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007816:	4b05      	ldr	r3, [pc, #20]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007824:	4901      	ldr	r1, [pc, #4]	; (800782c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007826:	4313      	orrs	r3, r2
 8007828:	658b      	str	r3, [r1, #88]	; 0x58
 800782a:	e003      	b.n	8007834 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800782c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	7dfb      	ldrb	r3, [r7, #23]
 8007832:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d02f      	beq.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007844:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007848:	d00e      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800784a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800784e:	d814      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d015      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007858:	d10f      	bne.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785a:	4baf      	ldr	r3, [pc, #700]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800785c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785e:	4aae      	ldr	r2, [pc, #696]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007864:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007866:	e00c      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3304      	adds	r3, #4
 800786c:	2101      	movs	r1, #1
 800786e:	4618      	mov	r0, r3
 8007870:	f000 ff3c 	bl	80086ec <RCCEx_PLL2_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
      break;
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d109      	bne.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007888:	4ba3      	ldr	r3, [pc, #652]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800788a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800788c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007894:	49a0      	ldr	r1, [pc, #640]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007896:	4313      	orrs	r3, r2
 8007898:	650b      	str	r3, [r1, #80]	; 0x50
 800789a:	e001      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789c:	7dfb      	ldrb	r3, [r7, #23]
 800789e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d032      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078b0:	2b03      	cmp	r3, #3
 80078b2:	d81b      	bhi.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x608>
 80078b4:	a201      	add	r2, pc, #4	; (adr r2, 80078bc <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80078b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ba:	bf00      	nop
 80078bc:	080078f3 	.word	0x080078f3
 80078c0:	080078cd 	.word	0x080078cd
 80078c4:	080078db 	.word	0x080078db
 80078c8:	080078f3 	.word	0x080078f3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078cc:	4b92      	ldr	r3, [pc, #584]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d0:	4a91      	ldr	r2, [pc, #580]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078d8:	e00c      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	3304      	adds	r3, #4
 80078de:	2102      	movs	r1, #2
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 ff03 	bl	80086ec <RCCEx_PLL2_Config>
 80078e6:	4603      	mov	r3, r0
 80078e8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80078ea:	e003      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	75fb      	strb	r3, [r7, #23]
      break;
 80078f0:	e000      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80078f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f4:	7dfb      	ldrb	r3, [r7, #23]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d109      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80078fa:	4b87      	ldr	r3, [pc, #540]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80078fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078fe:	f023 0203 	bic.w	r2, r3, #3
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007906:	4984      	ldr	r1, [pc, #528]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007908:	4313      	orrs	r3, r2
 800790a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800790c:	e001      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 8086 	beq.w	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007920:	4b7e      	ldr	r3, [pc, #504]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a7d      	ldr	r2, [pc, #500]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800792a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800792c:	f7fb f99a 	bl	8002c64 <HAL_GetTick>
 8007930:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007932:	e009      	b.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007934:	f7fb f996 	bl	8002c64 <HAL_GetTick>
 8007938:	4602      	mov	r2, r0
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	2b64      	cmp	r3, #100	; 0x64
 8007940:	d902      	bls.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007942:	2303      	movs	r3, #3
 8007944:	75fb      	strb	r3, [r7, #23]
        break;
 8007946:	e005      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007948:	4b74      	ldr	r3, [pc, #464]	; (8007b1c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007950:	2b00      	cmp	r3, #0
 8007952:	d0ef      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d166      	bne.n	8007a28 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800795a:	4b6f      	ldr	r3, [pc, #444]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800795c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007964:	4053      	eors	r3, r2
 8007966:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800796a:	2b00      	cmp	r3, #0
 800796c:	d013      	beq.n	8007996 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800796e:	4b6a      	ldr	r3, [pc, #424]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007976:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007978:	4b67      	ldr	r3, [pc, #412]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800797a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797c:	4a66      	ldr	r2, [pc, #408]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800797e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007982:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007984:	4b64      	ldr	r3, [pc, #400]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007988:	4a63      	ldr	r2, [pc, #396]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800798a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007990:	4a61      	ldr	r2, [pc, #388]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800799c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a0:	d115      	bne.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079a2:	f7fb f95f 	bl	8002c64 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079a8:	e00b      	b.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079aa:	f7fb f95b 	bl	8002c64 <HAL_GetTick>
 80079ae:	4602      	mov	r2, r0
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	1ad3      	subs	r3, r2, r3
 80079b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d902      	bls.n	80079c2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	75fb      	strb	r3, [r7, #23]
            break;
 80079c0:	e005      	b.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079c2:	4b55      	ldr	r3, [pc, #340]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d0ed      	beq.n	80079aa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d126      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079e2:	d10d      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80079e4:	4b4c      	ldr	r3, [pc, #304]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079e6:	691b      	ldr	r3, [r3, #16]
 80079e8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079f2:	0919      	lsrs	r1, r3, #4
 80079f4:	4b4a      	ldr	r3, [pc, #296]	; (8007b20 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80079f6:	400b      	ands	r3, r1
 80079f8:	4947      	ldr	r1, [pc, #284]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	610b      	str	r3, [r1, #16]
 80079fe:	e005      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007a00:	4b45      	ldr	r3, [pc, #276]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	4a44      	ldr	r2, [pc, #272]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a06:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a0a:	6113      	str	r3, [r2, #16]
 8007a0c:	4b42      	ldr	r3, [pc, #264]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a1a:	493f      	ldr	r1, [pc, #252]	; (8007b18 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	670b      	str	r3, [r1, #112]	; 0x70
 8007a20:	e004      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	75bb      	strb	r3, [r7, #22]
 8007a26:	e001      	b.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a28:	7dfb      	ldrb	r3, [r7, #23]
 8007a2a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0301 	and.w	r3, r3, #1
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 8085 	beq.w	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a3e:	2b28      	cmp	r3, #40	; 0x28
 8007a40:	d866      	bhi.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007a42:	a201      	add	r2, pc, #4	; (adr r2, 8007a48 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a48:	08007b25 	.word	0x08007b25
 8007a4c:	08007b11 	.word	0x08007b11
 8007a50:	08007b11 	.word	0x08007b11
 8007a54:	08007b11 	.word	0x08007b11
 8007a58:	08007b11 	.word	0x08007b11
 8007a5c:	08007b11 	.word	0x08007b11
 8007a60:	08007b11 	.word	0x08007b11
 8007a64:	08007b11 	.word	0x08007b11
 8007a68:	08007aed 	.word	0x08007aed
 8007a6c:	08007b11 	.word	0x08007b11
 8007a70:	08007b11 	.word	0x08007b11
 8007a74:	08007b11 	.word	0x08007b11
 8007a78:	08007b11 	.word	0x08007b11
 8007a7c:	08007b11 	.word	0x08007b11
 8007a80:	08007b11 	.word	0x08007b11
 8007a84:	08007b11 	.word	0x08007b11
 8007a88:	08007aff 	.word	0x08007aff
 8007a8c:	08007b11 	.word	0x08007b11
 8007a90:	08007b11 	.word	0x08007b11
 8007a94:	08007b11 	.word	0x08007b11
 8007a98:	08007b11 	.word	0x08007b11
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b11 	.word	0x08007b11
 8007aa4:	08007b11 	.word	0x08007b11
 8007aa8:	08007b25 	.word	0x08007b25
 8007aac:	08007b11 	.word	0x08007b11
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	08007b11 	.word	0x08007b11
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007b11 	.word	0x08007b11
 8007ac8:	08007b25 	.word	0x08007b25
 8007acc:	08007b11 	.word	0x08007b11
 8007ad0:	08007b11 	.word	0x08007b11
 8007ad4:	08007b11 	.word	0x08007b11
 8007ad8:	08007b11 	.word	0x08007b11
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b11 	.word	0x08007b11
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b25 	.word	0x08007b25
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	3304      	adds	r3, #4
 8007af0:	2101      	movs	r1, #1
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fdfa 	bl	80086ec <RCCEx_PLL2_Config>
 8007af8:	4603      	mov	r3, r0
 8007afa:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007afc:	e013      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3324      	adds	r3, #36	; 0x24
 8007b02:	2101      	movs	r1, #1
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 fea3 	bl	8008850 <RCCEx_PLL3_Config>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b0e:	e00a      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	75fb      	strb	r3, [r7, #23]
      break;
 8007b14:	e007      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007b16:	bf00      	nop
 8007b18:	58024400 	.word	0x58024400
 8007b1c:	58024800 	.word	0x58024800
 8007b20:	00ffffcf 	.word	0x00ffffcf
      break;
 8007b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b26:	7dfb      	ldrb	r3, [r7, #23]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d109      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b2c:	4b96      	ldr	r3, [pc, #600]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b30:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b38:	4993      	ldr	r1, [pc, #588]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	654b      	str	r3, [r1, #84]	; 0x54
 8007b3e:	e001      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b40:	7dfb      	ldrb	r3, [r7, #23]
 8007b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d038      	beq.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b54:	2b05      	cmp	r3, #5
 8007b56:	d821      	bhi.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007b58:	a201      	add	r2, pc, #4	; (adr r2, 8007b60 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5e:	bf00      	nop
 8007b60:	08007ba3 	.word	0x08007ba3
 8007b64:	08007b79 	.word	0x08007b79
 8007b68:	08007b8b 	.word	0x08007b8b
 8007b6c:	08007ba3 	.word	0x08007ba3
 8007b70:	08007ba3 	.word	0x08007ba3
 8007b74:	08007ba3 	.word	0x08007ba3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f000 fdb4 	bl	80086ec <RCCEx_PLL2_Config>
 8007b84:	4603      	mov	r3, r0
 8007b86:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b88:	e00c      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	3324      	adds	r3, #36	; 0x24
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4618      	mov	r0, r3
 8007b92:	f000 fe5d 	bl	8008850 <RCCEx_PLL3_Config>
 8007b96:	4603      	mov	r3, r0
 8007b98:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007b9a:	e003      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	75fb      	strb	r3, [r7, #23]
      break;
 8007ba0:	e000      	b.n	8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007ba2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d109      	bne.n	8007bbe <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007baa:	4b77      	ldr	r3, [pc, #476]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bae:	f023 0207 	bic.w	r2, r3, #7
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bb6:	4974      	ldr	r1, [pc, #464]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	654b      	str	r3, [r1, #84]	; 0x54
 8007bbc:	e001      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bbe:	7dfb      	ldrb	r3, [r7, #23]
 8007bc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03a      	beq.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd4:	2b05      	cmp	r3, #5
 8007bd6:	d821      	bhi.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007c23 	.word	0x08007c23
 8007be4:	08007bf9 	.word	0x08007bf9
 8007be8:	08007c0b 	.word	0x08007c0b
 8007bec:	08007c23 	.word	0x08007c23
 8007bf0:	08007c23 	.word	0x08007c23
 8007bf4:	08007c23 	.word	0x08007c23
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	3304      	adds	r3, #4
 8007bfc:	2101      	movs	r1, #1
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f000 fd74 	bl	80086ec <RCCEx_PLL2_Config>
 8007c04:	4603      	mov	r3, r0
 8007c06:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c08:	e00c      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	3324      	adds	r3, #36	; 0x24
 8007c0e:	2101      	movs	r1, #1
 8007c10:	4618      	mov	r0, r3
 8007c12:	f000 fe1d 	bl	8008850 <RCCEx_PLL3_Config>
 8007c16:	4603      	mov	r3, r0
 8007c18:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c1a:	e003      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	75fb      	strb	r3, [r7, #23]
      break;
 8007c20:	e000      	b.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007c22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c24:	7dfb      	ldrb	r3, [r7, #23]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10a      	bne.n	8007c40 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c2a:	4b57      	ldr	r3, [pc, #348]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c2e:	f023 0207 	bic.w	r2, r3, #7
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c38:	4953      	ldr	r1, [pc, #332]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	658b      	str	r3, [r1, #88]	; 0x58
 8007c3e:	e001      	b.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
 8007c42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f003 0320 	and.w	r3, r3, #32
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d04b      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c5a:	d02e      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c60:	d828      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c66:	d02a      	beq.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c6c:	d822      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c72:	d026      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007c74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c78:	d81c      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c7e:	d010      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c84:	d816      	bhi.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d01d      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c8e:	d111      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	3304      	adds	r3, #4
 8007c94:	2100      	movs	r1, #0
 8007c96:	4618      	mov	r0, r3
 8007c98:	f000 fd28 	bl	80086ec <RCCEx_PLL2_Config>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007ca0:	e012      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	3324      	adds	r3, #36	; 0x24
 8007ca6:	2102      	movs	r1, #2
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 fdd1 	bl	8008850 <RCCEx_PLL3_Config>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cb2:	e009      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb8:	e006      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007cba:	bf00      	nop
 8007cbc:	e004      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007cbe:	bf00      	nop
 8007cc0:	e002      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007cc2:	bf00      	nop
 8007cc4:	e000      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007cc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cc8:	7dfb      	ldrb	r3, [r7, #23]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10a      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cce:	4b2e      	ldr	r3, [pc, #184]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cdc:	492a      	ldr	r1, [pc, #168]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	654b      	str	r3, [r1, #84]	; 0x54
 8007ce2:	e001      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d04d      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cfa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007cfe:	d02e      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007d00:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d04:	d828      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d0a:	d02a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d10:	d822      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d16:	d026      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8007d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d1c:	d81c      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d22:	d010      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d28:	d816      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01d      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d32:	d111      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	2100      	movs	r1, #0
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 fcd6 	bl	80086ec <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d44:	e012      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3324      	adds	r3, #36	; 0x24
 8007d4a:	2102      	movs	r1, #2
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f000 fd7f 	bl	8008850 <RCCEx_PLL3_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d56:	e009      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5c:	e006      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d5e:	bf00      	nop
 8007d60:	e004      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d62:	bf00      	nop
 8007d64:	e002      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d66:	bf00      	nop
 8007d68:	e000      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10c      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d80:	4901      	ldr	r1, [pc, #4]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	658b      	str	r3, [r1, #88]	; 0x58
 8007d86:	e003      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d04b      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007da2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007da6:	d02e      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007da8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007dac:	d828      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007dae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db2:	d02a      	beq.n	8007e0a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007db8:	d822      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007dba:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007dbe:	d026      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007dc0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007dc4:	d81c      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007dc6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dca:	d010      	beq.n	8007dee <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007dcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007dd0:	d816      	bhi.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d01d      	beq.n	8007e12 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8007dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dda:	d111      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	3304      	adds	r3, #4
 8007de0:	2100      	movs	r1, #0
 8007de2:	4618      	mov	r0, r3
 8007de4:	f000 fc82 	bl	80086ec <RCCEx_PLL2_Config>
 8007de8:	4603      	mov	r3, r0
 8007dea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dec:	e012      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	3324      	adds	r3, #36	; 0x24
 8007df2:	2102      	movs	r1, #2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 fd2b 	bl	8008850 <RCCEx_PLL3_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007dfe:	e009      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
      break;
 8007e04:	e006      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e06:	bf00      	nop
 8007e08:	e004      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e0a:	bf00      	nop
 8007e0c:	e002      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e0e:	bf00      	nop
 8007e10:	e000      	b.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007e12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e14:	7dfb      	ldrb	r3, [r7, #23]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d10a      	bne.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e1a:	4b9d      	ldr	r3, [pc, #628]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e28:	4999      	ldr	r1, [pc, #612]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	658b      	str	r3, [r1, #88]	; 0x58
 8007e2e:	e001      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e30:	7dfb      	ldrb	r3, [r7, #23]
 8007e32:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 0308 	and.w	r3, r3, #8
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01a      	beq.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e4a:	d10a      	bne.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3324      	adds	r3, #36	; 0x24
 8007e50:	2102      	movs	r1, #2
 8007e52:	4618      	mov	r0, r3
 8007e54:	f000 fcfc 	bl	8008850 <RCCEx_PLL3_Config>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007e62:	4b8b      	ldr	r3, [pc, #556]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e66:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e70:	4987      	ldr	r1, [pc, #540]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007e72:	4313      	orrs	r3, r2
 8007e74:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f003 0310 	and.w	r3, r3, #16
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d01a      	beq.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e8c:	d10a      	bne.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	3324      	adds	r3, #36	; 0x24
 8007e92:	2102      	movs	r1, #2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f000 fcdb 	bl	8008850 <RCCEx_PLL3_Config>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ea4:	4b7a      	ldr	r3, [pc, #488]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007eb2:	4977      	ldr	r1, [pc, #476]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d034      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007eca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ece:	d01d      	beq.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007ed0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ed4:	d817      	bhi.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d003      	beq.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ede:	d009      	beq.n	8007ef4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007ee0:	e011      	b.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	2100      	movs	r1, #0
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f000 fbff 	bl	80086ec <RCCEx_PLL2_Config>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007ef2:	e00c      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	3324      	adds	r3, #36	; 0x24
 8007ef8:	2102      	movs	r1, #2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fca8 	bl	8008850 <RCCEx_PLL3_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f04:	e003      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f06:	2301      	movs	r3, #1
 8007f08:	75fb      	strb	r3, [r7, #23]
      break;
 8007f0a:	e000      	b.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f0e:	7dfb      	ldrb	r3, [r7, #23]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f14:	4b5e      	ldr	r3, [pc, #376]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f22:	495b      	ldr	r1, [pc, #364]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	658b      	str	r3, [r1, #88]	; 0x58
 8007f28:	e001      	b.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d033      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f44:	d01c      	beq.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8007f46:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f4a:	d816      	bhi.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f50:	d003      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8007f52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f56:	d007      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007f58:	e00f      	b.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f5a:	4b4d      	ldr	r3, [pc, #308]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	4a4c      	ldr	r2, [pc, #304]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f66:	e00c      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	3324      	adds	r3, #36	; 0x24
 8007f6c:	2101      	movs	r1, #1
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f000 fc6e 	bl	8008850 <RCCEx_PLL3_Config>
 8007f74:	4603      	mov	r3, r0
 8007f76:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007f78:	e003      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007f7e:	e000      	b.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007f80:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f88:	4b41      	ldr	r3, [pc, #260]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f96:	493e      	ldr	r1, [pc, #248]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	654b      	str	r3, [r1, #84]	; 0x54
 8007f9c:	e001      	b.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f9e:	7dfb      	ldrb	r3, [r7, #23]
 8007fa0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d029      	beq.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d003      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8007fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fba:	d007      	beq.n	8007fcc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007fbc:	e00f      	b.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fbe:	4b34      	ldr	r3, [pc, #208]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc2:	4a33      	ldr	r2, [pc, #204]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fca:	e00b      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	3304      	adds	r3, #4
 8007fd0:	2102      	movs	r1, #2
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f000 fb8a 	bl	80086ec <RCCEx_PLL2_Config>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007fdc:	e002      	b.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fe2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fe4:	7dfb      	ldrb	r3, [r7, #23]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d109      	bne.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007fea:	4b29      	ldr	r3, [pc, #164]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	4926      	ldr	r1, [pc, #152]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007ff8:	4313      	orrs	r3, r2
 8007ffa:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ffc:	e001      	b.n	8008002 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00a      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	3324      	adds	r3, #36	; 0x24
 8008012:	2102      	movs	r1, #2
 8008014:	4618      	mov	r0, r3
 8008016:	f000 fc1b 	bl	8008850 <RCCEx_PLL3_Config>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d033      	beq.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008034:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008038:	d017      	beq.n	800806a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800803a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800803e:	d811      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008040:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008044:	d013      	beq.n	800806e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008046:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800804a:	d80b      	bhi.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800804c:	2b00      	cmp	r3, #0
 800804e:	d010      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008050:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008054:	d106      	bne.n	8008064 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008056:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805a:	4a0d      	ldr	r2, [pc, #52]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800805c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008060:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008062:	e007      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	75fb      	strb	r3, [r7, #23]
      break;
 8008068:	e004      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800806a:	bf00      	nop
 800806c:	e002      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800806e:	bf00      	nop
 8008070:	e000      	b.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8008072:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d10c      	bne.n	8008094 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800807a:	4b05      	ldr	r3, [pc, #20]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800807c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800807e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008086:	4902      	ldr	r1, [pc, #8]	; (8008090 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008088:	4313      	orrs	r3, r2
 800808a:	654b      	str	r3, [r1, #84]	; 0x54
 800808c:	e004      	b.n	8008098 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800808e:	bf00      	nop
 8008090:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008094:	7dfb      	ldrb	r3, [r7, #23]
 8008096:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d008      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080a4:	4b31      	ldr	r3, [pc, #196]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b0:	492e      	ldr	r1, [pc, #184]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d009      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80080c2:	4b2a      	ldr	r3, [pc, #168]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080c4:	691b      	ldr	r3, [r3, #16]
 80080c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80080d0:	4926      	ldr	r1, [pc, #152]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080d2:	4313      	orrs	r3, r2
 80080d4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80080e2:	4b22      	ldr	r3, [pc, #136]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080ee:	491f      	ldr	r1, [pc, #124]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00d      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008100:	4b1a      	ldr	r3, [pc, #104]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008102:	691b      	ldr	r3, [r3, #16]
 8008104:	4a19      	ldr	r2, [pc, #100]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008106:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800810a:	6113      	str	r3, [r2, #16]
 800810c:	4b17      	ldr	r3, [pc, #92]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008116:	4915      	ldr	r1, [pc, #84]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008118:	4313      	orrs	r3, r2
 800811a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b00      	cmp	r3, #0
 8008122:	da08      	bge.n	8008136 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008124:	4b11      	ldr	r3, [pc, #68]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008128:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008130:	490e      	ldr	r1, [pc, #56]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008132:	4313      	orrs	r3, r2
 8008134:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800813e:	2b00      	cmp	r3, #0
 8008140:	d009      	beq.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008142:	4b0a      	ldr	r3, [pc, #40]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008150:	4906      	ldr	r1, [pc, #24]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008152:	4313      	orrs	r3, r2
 8008154:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008156:	7dbb      	ldrb	r3, [r7, #22]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d101      	bne.n	8008160 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800815c:	2300      	movs	r3, #0
 800815e:	e000      	b.n	8008162 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
}
 8008162:	4618      	mov	r0, r3
 8008164:	3718      	adds	r7, #24
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	58024400 	.word	0x58024400

08008170 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008174:	f7ff f85a 	bl	800722c <HAL_RCC_GetHCLKFreq>
 8008178:	4602      	mov	r2, r0
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800817c:	6a1b      	ldr	r3, [r3, #32]
 800817e:	091b      	lsrs	r3, r3, #4
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	4904      	ldr	r1, [pc, #16]	; (8008198 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008186:	5ccb      	ldrb	r3, [r1, r3]
 8008188:	f003 031f 	and.w	r3, r3, #31
 800818c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008190:	4618      	mov	r0, r3
 8008192:	bd80      	pop	{r7, pc}
 8008194:	58024400 	.word	0x58024400
 8008198:	0800bbb4 	.word	0x0800bbb4

0800819c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800819c:	b480      	push	{r7}
 800819e:	b089      	sub	sp, #36	; 0x24
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081a4:	4ba1      	ldr	r3, [pc, #644]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a8:	f003 0303 	and.w	r3, r3, #3
 80081ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081ae:	4b9f      	ldr	r3, [pc, #636]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b2:	0b1b      	lsrs	r3, r3, #12
 80081b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081ba:	4b9c      	ldr	r3, [pc, #624]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081be:	091b      	lsrs	r3, r3, #4
 80081c0:	f003 0301 	and.w	r3, r3, #1
 80081c4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081c6:	4b99      	ldr	r3, [pc, #612]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	08db      	lsrs	r3, r3, #3
 80081cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081d0:	693a      	ldr	r2, [r7, #16]
 80081d2:	fb02 f303 	mul.w	r3, r2, r3
 80081d6:	ee07 3a90 	vmov	s15, r3
 80081da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 8111 	beq.w	800840c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80081ea:	69bb      	ldr	r3, [r7, #24]
 80081ec:	2b02      	cmp	r3, #2
 80081ee:	f000 8083 	beq.w	80082f8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b02      	cmp	r3, #2
 80081f6:	f200 80a1 	bhi.w	800833c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d003      	beq.n	8008208 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008200:	69bb      	ldr	r3, [r7, #24]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d056      	beq.n	80082b4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008206:	e099      	b.n	800833c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008208:	4b88      	ldr	r3, [pc, #544]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b00      	cmp	r3, #0
 8008212:	d02d      	beq.n	8008270 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008214:	4b85      	ldr	r3, [pc, #532]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	08db      	lsrs	r3, r3, #3
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	4a84      	ldr	r2, [pc, #528]	; (8008430 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008220:	fa22 f303 	lsr.w	r3, r2, r3
 8008224:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	ee07 3a90 	vmov	s15, r3
 800822c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	ee07 3a90 	vmov	s15, r3
 8008236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800823a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800823e:	4b7b      	ldr	r3, [pc, #492]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008246:	ee07 3a90 	vmov	s15, r3
 800824a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800824e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008252:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008256:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800825a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800825e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008262:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800826a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800826e:	e087      	b.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	ee07 3a90 	vmov	s15, r3
 8008276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800827a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008438 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800827e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008282:	4b6a      	ldr	r3, [pc, #424]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008286:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800828a:	ee07 3a90 	vmov	s15, r3
 800828e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008292:	ed97 6a03 	vldr	s12, [r7, #12]
 8008296:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800829a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800829e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082b2:	e065      	b.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	ee07 3a90 	vmov	s15, r3
 80082ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082be:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800843c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082c6:	4b59      	ldr	r3, [pc, #356]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ce:	ee07 3a90 	vmov	s15, r3
 80082d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082da:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082f6:	e043      	b.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	ee07 3a90 	vmov	s15, r3
 80082fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008302:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008440 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008306:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800830a:	4b48      	ldr	r3, [pc, #288]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800830c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008312:	ee07 3a90 	vmov	s15, r3
 8008316:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800831a:	ed97 6a03 	vldr	s12, [r7, #12]
 800831e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008322:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800832a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800832e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008336:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800833a:	e021      	b.n	8008380 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	ee07 3a90 	vmov	s15, r3
 8008342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008346:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800843c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800834a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800834e:	4b37      	ldr	r3, [pc, #220]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008356:	ee07 3a90 	vmov	s15, r3
 800835a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800835e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008362:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008366:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800836a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800836e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008372:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008376:	ee67 7a27 	vmul.f32	s15, s14, s15
 800837a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800837e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008380:	4b2a      	ldr	r3, [pc, #168]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	0a5b      	lsrs	r3, r3, #9
 8008386:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800838a:	ee07 3a90 	vmov	s15, r3
 800838e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008392:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008396:	ee37 7a87 	vadd.f32	s14, s15, s14
 800839a:	edd7 6a07 	vldr	s13, [r7, #28]
 800839e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083a6:	ee17 2a90 	vmov	r2, s15
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083ae:	4b1f      	ldr	r3, [pc, #124]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	0c1b      	lsrs	r3, r3, #16
 80083b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b8:	ee07 3a90 	vmov	s15, r3
 80083bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80083cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083d4:	ee17 2a90 	vmov	r2, s15
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80083dc:	4b13      	ldr	r3, [pc, #76]	; (800842c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e0:	0e1b      	lsrs	r3, r3, #24
 80083e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80083fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008402:	ee17 2a90 	vmov	r2, s15
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800840a:	e008      	b.n	800841e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2200      	movs	r2, #0
 8008416:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	609a      	str	r2, [r3, #8]
}
 800841e:	bf00      	nop
 8008420:	3724      	adds	r7, #36	; 0x24
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	58024400 	.word	0x58024400
 8008430:	03d09000 	.word	0x03d09000
 8008434:	46000000 	.word	0x46000000
 8008438:	4c742400 	.word	0x4c742400
 800843c:	4a742400 	.word	0x4a742400
 8008440:	4af42400 	.word	0x4af42400

08008444 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008444:	b480      	push	{r7}
 8008446:	b089      	sub	sp, #36	; 0x24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800844c:	4ba1      	ldr	r3, [pc, #644]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800844e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008450:	f003 0303 	and.w	r3, r3, #3
 8008454:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008456:	4b9f      	ldr	r3, [pc, #636]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800845a:	0d1b      	lsrs	r3, r3, #20
 800845c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008460:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008462:	4b9c      	ldr	r3, [pc, #624]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008466:	0a1b      	lsrs	r3, r3, #8
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800846e:	4b99      	ldr	r3, [pc, #612]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008472:	08db      	lsrs	r3, r3, #3
 8008474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	fb02 f303 	mul.w	r3, r2, r3
 800847e:	ee07 3a90 	vmov	s15, r3
 8008482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008486:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f000 8111 	beq.w	80086b4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008492:	69bb      	ldr	r3, [r7, #24]
 8008494:	2b02      	cmp	r3, #2
 8008496:	f000 8083 	beq.w	80085a0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	2b02      	cmp	r3, #2
 800849e:	f200 80a1 	bhi.w	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d056      	beq.n	800855c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084ae:	e099      	b.n	80085e4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084b0:	4b88      	ldr	r3, [pc, #544]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f003 0320 	and.w	r3, r3, #32
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d02d      	beq.n	8008518 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084bc:	4b85      	ldr	r3, [pc, #532]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	08db      	lsrs	r3, r3, #3
 80084c2:	f003 0303 	and.w	r3, r3, #3
 80084c6:	4a84      	ldr	r2, [pc, #528]	; (80086d8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084c8:	fa22 f303 	lsr.w	r3, r2, r3
 80084cc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	ee07 3a90 	vmov	s15, r3
 80084d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	ee07 3a90 	vmov	s15, r3
 80084de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084e6:	4b7b      	ldr	r3, [pc, #492]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084fa:	eddf 5a78 	vldr	s11, [pc, #480]	; 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800850a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800850e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008512:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008516:	e087      	b.n	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008518:	697b      	ldr	r3, [r7, #20]
 800851a:	ee07 3a90 	vmov	s15, r3
 800851e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008522:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80086e0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800852a:	4b6a      	ldr	r3, [pc, #424]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800853a:	ed97 6a03 	vldr	s12, [r7, #12]
 800853e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800854a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800854e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008556:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800855a:	e065      	b.n	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	ee07 3a90 	vmov	s15, r3
 8008562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008566:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800856a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800856e:	4b59      	ldr	r3, [pc, #356]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800857e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008582:	eddf 5a56 	vldr	s11, [pc, #344]	; 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800858a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800858e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800859e:	e043      	b.n	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	ee07 3a90 	vmov	s15, r3
 80085a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085aa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80086e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b2:	4b48      	ldr	r3, [pc, #288]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80085c6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085e2:	e021      	b.n	8008628 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	ee07 3a90 	vmov	s15, r3
 80085ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ee:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80086e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80085f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085f6:	4b37      	ldr	r3, [pc, #220]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085fe:	ee07 3a90 	vmov	s15, r3
 8008602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008606:	ed97 6a03 	vldr	s12, [r7, #12]
 800860a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800860e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800861a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800861e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008622:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008626:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008628:	4b2a      	ldr	r3, [pc, #168]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800862a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862c:	0a5b      	lsrs	r3, r3, #9
 800862e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008632:	ee07 3a90 	vmov	s15, r3
 8008636:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800863a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800863e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008642:	edd7 6a07 	vldr	s13, [r7, #28]
 8008646:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800864a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800864e:	ee17 2a90 	vmov	r2, s15
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008656:	4b1f      	ldr	r3, [pc, #124]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865a:	0c1b      	lsrs	r3, r3, #16
 800865c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008660:	ee07 3a90 	vmov	s15, r3
 8008664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008668:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800866c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008670:	edd7 6a07 	vldr	s13, [r7, #28]
 8008674:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800867c:	ee17 2a90 	vmov	r2, s15
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008684:	4b13      	ldr	r3, [pc, #76]	; (80086d4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008688:	0e1b      	lsrs	r3, r3, #24
 800868a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800868e:	ee07 3a90 	vmov	s15, r3
 8008692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008696:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800869a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800869e:	edd7 6a07 	vldr	s13, [r7, #28]
 80086a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086aa:	ee17 2a90 	vmov	r2, s15
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086b2:	e008      	b.n	80086c6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	609a      	str	r2, [r3, #8]
}
 80086c6:	bf00      	nop
 80086c8:	3724      	adds	r7, #36	; 0x24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d0:	4770      	bx	lr
 80086d2:	bf00      	nop
 80086d4:	58024400 	.word	0x58024400
 80086d8:	03d09000 	.word	0x03d09000
 80086dc:	46000000 	.word	0x46000000
 80086e0:	4c742400 	.word	0x4c742400
 80086e4:	4a742400 	.word	0x4a742400
 80086e8:	4af42400 	.word	0x4af42400

080086ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b084      	sub	sp, #16
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086f6:	2300      	movs	r3, #0
 80086f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80086fa:	4b53      	ldr	r3, [pc, #332]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80086fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fe:	f003 0303 	and.w	r3, r3, #3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d101      	bne.n	800870a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e099      	b.n	800883e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800870a:	4b4f      	ldr	r3, [pc, #316]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4a4e      	ldr	r2, [pc, #312]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008710:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008714:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008716:	f7fa faa5 	bl	8002c64 <HAL_GetTick>
 800871a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800871c:	e008      	b.n	8008730 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800871e:	f7fa faa1 	bl	8002c64 <HAL_GetTick>
 8008722:	4602      	mov	r2, r0
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	2b02      	cmp	r3, #2
 800872a:	d901      	bls.n	8008730 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800872c:	2303      	movs	r3, #3
 800872e:	e086      	b.n	800883e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008730:	4b45      	ldr	r3, [pc, #276]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1f0      	bne.n	800871e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800873c:	4b42      	ldr	r3, [pc, #264]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 800873e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008740:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	031b      	lsls	r3, r3, #12
 800874a:	493f      	ldr	r1, [pc, #252]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 800874c:	4313      	orrs	r3, r2
 800874e:	628b      	str	r3, [r1, #40]	; 0x28
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	3b01      	subs	r3, #1
 8008756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	3b01      	subs	r3, #1
 8008760:	025b      	lsls	r3, r3, #9
 8008762:	b29b      	uxth	r3, r3
 8008764:	431a      	orrs	r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	3b01      	subs	r3, #1
 800876c:	041b      	lsls	r3, r3, #16
 800876e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	3b01      	subs	r3, #1
 800877a:	061b      	lsls	r3, r3, #24
 800877c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008780:	4931      	ldr	r1, [pc, #196]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008782:	4313      	orrs	r3, r2
 8008784:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008786:	4b30      	ldr	r3, [pc, #192]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	695b      	ldr	r3, [r3, #20]
 8008792:	492d      	ldr	r1, [pc, #180]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008794:	4313      	orrs	r3, r2
 8008796:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008798:	4b2b      	ldr	r3, [pc, #172]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	f023 0220 	bic.w	r2, r3, #32
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	699b      	ldr	r3, [r3, #24]
 80087a4:	4928      	ldr	r1, [pc, #160]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087a6:	4313      	orrs	r3, r2
 80087a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087aa:	4b27      	ldr	r3, [pc, #156]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ae:	4a26      	ldr	r2, [pc, #152]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087b0:	f023 0310 	bic.w	r3, r3, #16
 80087b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087b6:	4b24      	ldr	r3, [pc, #144]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087ba:	4b24      	ldr	r3, [pc, #144]	; (800884c <RCCEx_PLL2_Config+0x160>)
 80087bc:	4013      	ands	r3, r2
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	69d2      	ldr	r2, [r2, #28]
 80087c2:	00d2      	lsls	r2, r2, #3
 80087c4:	4920      	ldr	r1, [pc, #128]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087ca:	4b1f      	ldr	r3, [pc, #124]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	4a1e      	ldr	r2, [pc, #120]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087d0:	f043 0310 	orr.w	r3, r3, #16
 80087d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d106      	bne.n	80087ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80087dc:	4b1a      	ldr	r3, [pc, #104]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087e0:	4a19      	ldr	r2, [pc, #100]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80087e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087e8:	e00f      	b.n	800880a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d106      	bne.n	80087fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80087f0:	4b15      	ldr	r3, [pc, #84]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f4:	4a14      	ldr	r2, [pc, #80]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 80087f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80087fc:	e005      	b.n	800880a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80087fe:	4b12      	ldr	r3, [pc, #72]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008802:	4a11      	ldr	r2, [pc, #68]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008808:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800880a:	4b0f      	ldr	r3, [pc, #60]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a0e      	ldr	r2, [pc, #56]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008810:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008816:	f7fa fa25 	bl	8002c64 <HAL_GetTick>
 800881a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800881c:	e008      	b.n	8008830 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800881e:	f7fa fa21 	bl	8002c64 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	2b02      	cmp	r3, #2
 800882a:	d901      	bls.n	8008830 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e006      	b.n	800883e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008830:	4b05      	ldr	r3, [pc, #20]	; (8008848 <RCCEx_PLL2_Config+0x15c>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d0f0      	beq.n	800881e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800883c:	7bfb      	ldrb	r3, [r7, #15]
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}
 8008846:	bf00      	nop
 8008848:	58024400 	.word	0x58024400
 800884c:	ffff0007 	.word	0xffff0007

08008850 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800885a:	2300      	movs	r3, #0
 800885c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800885e:	4b53      	ldr	r3, [pc, #332]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008862:	f003 0303 	and.w	r3, r3, #3
 8008866:	2b03      	cmp	r3, #3
 8008868:	d101      	bne.n	800886e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e099      	b.n	80089a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800886e:	4b4f      	ldr	r3, [pc, #316]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a4e      	ldr	r2, [pc, #312]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800887a:	f7fa f9f3 	bl	8002c64 <HAL_GetTick>
 800887e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008880:	e008      	b.n	8008894 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008882:	f7fa f9ef 	bl	8002c64 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	d901      	bls.n	8008894 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e086      	b.n	80089a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008894:	4b45      	ldr	r3, [pc, #276]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1f0      	bne.n	8008882 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088a0:	4b42      	ldr	r3, [pc, #264]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	051b      	lsls	r3, r3, #20
 80088ae:	493f      	ldr	r1, [pc, #252]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	628b      	str	r3, [r1, #40]	; 0x28
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	3b01      	subs	r3, #1
 80088ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	3b01      	subs	r3, #1
 80088c4:	025b      	lsls	r3, r3, #9
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	431a      	orrs	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	3b01      	subs	r3, #1
 80088d0:	041b      	lsls	r3, r3, #16
 80088d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088d6:	431a      	orrs	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	3b01      	subs	r3, #1
 80088de:	061b      	lsls	r3, r3, #24
 80088e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80088e4:	4931      	ldr	r1, [pc, #196]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088e6:	4313      	orrs	r3, r2
 80088e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80088ea:	4b30      	ldr	r3, [pc, #192]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	695b      	ldr	r3, [r3, #20]
 80088f6:	492d      	ldr	r1, [pc, #180]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088f8:	4313      	orrs	r3, r2
 80088fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80088fc:	4b2b      	ldr	r3, [pc, #172]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 80088fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008900:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	4928      	ldr	r1, [pc, #160]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 800890a:	4313      	orrs	r3, r2
 800890c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800890e:	4b27      	ldr	r3, [pc, #156]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008912:	4a26      	ldr	r2, [pc, #152]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008914:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008918:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800891a:	4b24      	ldr	r3, [pc, #144]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 800891c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800891e:	4b24      	ldr	r3, [pc, #144]	; (80089b0 <RCCEx_PLL3_Config+0x160>)
 8008920:	4013      	ands	r3, r2
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	69d2      	ldr	r2, [r2, #28]
 8008926:	00d2      	lsls	r2, r2, #3
 8008928:	4920      	ldr	r1, [pc, #128]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 800892a:	4313      	orrs	r3, r2
 800892c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800892e:	4b1f      	ldr	r3, [pc, #124]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008932:	4a1e      	ldr	r2, [pc, #120]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008938:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d106      	bne.n	800894e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008940:	4b1a      	ldr	r3, [pc, #104]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008944:	4a19      	ldr	r2, [pc, #100]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008946:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800894a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800894c:	e00f      	b.n	800896e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d106      	bne.n	8008962 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008954:	4b15      	ldr	r3, [pc, #84]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	4a14      	ldr	r2, [pc, #80]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 800895a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800895e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008960:	e005      	b.n	800896e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008962:	4b12      	ldr	r3, [pc, #72]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	4a11      	ldr	r2, [pc, #68]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008968:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800896c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800896e:	4b0f      	ldr	r3, [pc, #60]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a0e      	ldr	r2, [pc, #56]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008978:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800897a:	f7fa f973 	bl	8002c64 <HAL_GetTick>
 800897e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008980:	e008      	b.n	8008994 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008982:	f7fa f96f 	bl	8002c64 <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	d901      	bls.n	8008994 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e006      	b.n	80089a2 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008994:	4b05      	ldr	r3, [pc, #20]	; (80089ac <RCCEx_PLL3_Config+0x15c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0f0      	beq.n	8008982 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	58024400 	.word	0x58024400
 80089b0:	ffff0007 	.word	0xffff0007

080089b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e0f1      	b.n	8008baa <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a78      	ldr	r2, [pc, #480]	; (8008bb4 <HAL_SPI_Init+0x200>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d00f      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a77      	ldr	r2, [pc, #476]	; (8008bb8 <HAL_SPI_Init+0x204>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d00a      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a75      	ldr	r2, [pc, #468]	; (8008bbc <HAL_SPI_Init+0x208>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d005      	beq.n	80089f6 <HAL_SPI_Init+0x42>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	2b0f      	cmp	r3, #15
 80089f0:	d901      	bls.n	80089f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e0d9      	b.n	8008baa <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f000 fba2 	bl	8009140 <SPI_GetPacketSize>
 80089fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a6c      	ldr	r2, [pc, #432]	; (8008bb4 <HAL_SPI_Init+0x200>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00c      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a6a      	ldr	r2, [pc, #424]	; (8008bb8 <HAL_SPI_Init+0x204>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d007      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a69      	ldr	r2, [pc, #420]	; (8008bbc <HAL_SPI_Init+0x208>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d002      	beq.n	8008a22 <HAL_SPI_Init+0x6e>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d811      	bhi.n	8008a46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a26:	4a63      	ldr	r2, [pc, #396]	; (8008bb4 <HAL_SPI_Init+0x200>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d009      	beq.n	8008a40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a61      	ldr	r2, [pc, #388]	; (8008bb8 <HAL_SPI_Init+0x204>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d004      	beq.n	8008a40 <HAL_SPI_Init+0x8c>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a60      	ldr	r2, [pc, #384]	; (8008bbc <HAL_SPI_Init+0x208>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d104      	bne.n	8008a4a <HAL_SPI_Init+0x96>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b10      	cmp	r3, #16
 8008a44:	d901      	bls.n	8008a4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e0af      	b.n	8008baa <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d106      	bne.n	8008a64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7f9 fe3a 	bl	80026d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2202      	movs	r2, #2
 8008a68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681a      	ldr	r2, [r3, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f022 0201 	bic.w	r2, r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008a86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008a90:	d119      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008a9a:	d103      	bne.n	8008aa4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d008      	beq.n	8008ab6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10c      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ab4:	d107      	bne.n	8008ac6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ac4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	69da      	ldr	r2, [r3, #28]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ace:	431a      	orrs	r2, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	431a      	orrs	r2, r3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ad8:	ea42 0103 	orr.w	r1, r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68da      	ldr	r2, [r3, #12]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	431a      	orrs	r2, r3
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	431a      	orrs	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	431a      	orrs	r2, r3
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	431a      	orrs	r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	431a      	orrs	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a1b      	ldr	r3, [r3, #32]
 8008b0e:	431a      	orrs	r2, r3
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	431a      	orrs	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b1a:	431a      	orrs	r2, r3
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	431a      	orrs	r2, r3
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b26:	ea42 0103 	orr.w	r1, r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	430a      	orrs	r2, r1
 8008b34:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d113      	bne.n	8008b66 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b50:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b64:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f022 0201 	bic.w	r2, r2, #1
 8008b74:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	430a      	orrs	r2, r1
 8008b96:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
 8008bb2:	bf00      	nop
 8008bb4:	40013000 	.word	0x40013000
 8008bb8:	40003800 	.word	0x40003800
 8008bbc:	40003c00 	.word	0x40003c00

08008bc0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	603b      	str	r3, [r7, #0]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3320      	adds	r3, #32
 8008bd6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008be2:	2b01      	cmp	r3, #1
 8008be4:	d101      	bne.n	8008bea <HAL_SPI_Transmit+0x2a>
 8008be6:	2302      	movs	r3, #2
 8008be8:	e1d7      	b.n	8008f9a <HAL_SPI_Transmit+0x3da>
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	2201      	movs	r2, #1
 8008bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008bf2:	f7fa f837 	bl	8002c64 <HAL_GetTick>
 8008bf6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d007      	beq.n	8008c14 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008c04:	2302      	movs	r3, #2
 8008c06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c10:	7efb      	ldrb	r3, [r7, #27]
 8008c12:	e1c2      	b.n	8008f9a <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <HAL_SPI_Transmit+0x60>
 8008c1a:	88fb      	ldrh	r3, [r7, #6]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d107      	bne.n	8008c30 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c2c:	7efb      	ldrb	r3, [r7, #27]
 8008c2e:	e1b4      	b.n	8008f9a <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2203      	movs	r2, #3
 8008c34:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	68ba      	ldr	r2, [r7, #8]
 8008c44:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	88fa      	ldrh	r2, [r7, #6]
 8008c4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	88fa      	ldrh	r2, [r7, #6]
 8008c52:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008c80:	d107      	bne.n	8008c92 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c90:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	4b96      	ldr	r3, [pc, #600]	; (8008ef4 <HAL_SPI_Transmit+0x334>)
 8008c9a:	4013      	ands	r3, r2
 8008c9c:	88f9      	ldrh	r1, [r7, #6]
 8008c9e:	68fa      	ldr	r2, [r7, #12]
 8008ca0:	6812      	ldr	r2, [r2, #0]
 8008ca2:	430b      	orrs	r3, r1
 8008ca4:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	681a      	ldr	r2, [r3, #0]
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f042 0201 	orr.w	r2, r2, #1
 8008cb4:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cbe:	d107      	bne.n	8008cd0 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b0f      	cmp	r3, #15
 8008cd6:	d947      	bls.n	8008d68 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008cd8:	e03f      	b.n	8008d5a <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	695b      	ldr	r3, [r3, #20]
 8008ce0:	f003 0302 	and.w	r3, r3, #2
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d114      	bne.n	8008d12 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6812      	ldr	r2, [r2, #0]
 8008cf2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cf8:	1d1a      	adds	r2, r3, #4
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d04:	b29b      	uxth	r3, r3
 8008d06:	3b01      	subs	r3, #1
 8008d08:	b29a      	uxth	r2, r3
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008d10:	e023      	b.n	8008d5a <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d12:	f7f9 ffa7 	bl	8002c64 <HAL_GetTick>
 8008d16:	4602      	mov	r2, r0
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	683a      	ldr	r2, [r7, #0]
 8008d1e:	429a      	cmp	r2, r3
 8008d20:	d803      	bhi.n	8008d2a <HAL_SPI_Transmit+0x16a>
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d28:	d102      	bne.n	8008d30 <HAL_SPI_Transmit+0x170>
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d114      	bne.n	8008d5a <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d30:	68f8      	ldr	r0, [r7, #12]
 8008d32:	f000 f937 	bl	8008fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2201      	movs	r2, #1
 8008d52:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e11f      	b.n	8008f9a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1b9      	bne.n	8008cda <HAL_SPI_Transmit+0x11a>
 8008d66:	e0f2      	b.n	8008f4e <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	2b07      	cmp	r3, #7
 8008d6e:	f240 80e7 	bls.w	8008f40 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008d72:	e05d      	b.n	8008e30 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	695b      	ldr	r3, [r3, #20]
 8008d7a:	f003 0302 	and.w	r3, r3, #2
 8008d7e:	2b02      	cmp	r3, #2
 8008d80:	d132      	bne.n	8008de8 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d918      	bls.n	8008dc0 <HAL_SPI_Transmit+0x200>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d014      	beq.n	8008dc0 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6812      	ldr	r2, [r2, #0]
 8008da0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008da6:	1d1a      	adds	r2, r3, #4
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	3b02      	subs	r3, #2
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008dbe:	e037      	b.n	8008e30 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dc4:	881a      	ldrh	r2, [r3, #0]
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dce:	1c9a      	adds	r2, r3, #2
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b01      	subs	r3, #1
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008de6:	e023      	b.n	8008e30 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008de8:	f7f9 ff3c 	bl	8002c64 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	683a      	ldr	r2, [r7, #0]
 8008df4:	429a      	cmp	r2, r3
 8008df6:	d803      	bhi.n	8008e00 <HAL_SPI_Transmit+0x240>
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	d102      	bne.n	8008e06 <HAL_SPI_Transmit+0x246>
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d114      	bne.n	8008e30 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 f8cc 	bl	8008fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e0b4      	b.n	8008f9a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d19b      	bne.n	8008d74 <HAL_SPI_Transmit+0x1b4>
 8008e3c:	e087      	b.n	8008f4e <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695b      	ldr	r3, [r3, #20]
 8008e44:	f003 0302 	and.w	r3, r3, #2
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d155      	bne.n	8008ef8 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	2b03      	cmp	r3, #3
 8008e56:	d918      	bls.n	8008e8a <HAL_SPI_Transmit+0x2ca>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e5c:	2b40      	cmp	r3, #64	; 0x40
 8008e5e:	d914      	bls.n	8008e8a <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e70:	1d1a      	adds	r2, r3, #4
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e7c:	b29b      	uxth	r3, r3
 8008e7e:	3b04      	subs	r3, #4
 8008e80:	b29a      	uxth	r2, r3
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008e88:	e05a      	b.n	8008f40 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	d917      	bls.n	8008ec6 <HAL_SPI_Transmit+0x306>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d013      	beq.n	8008ec6 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ea2:	881a      	ldrh	r2, [r3, #0]
 8008ea4:	69fb      	ldr	r3, [r7, #28]
 8008ea6:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eac:	1c9a      	adds	r2, r3, #2
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b02      	subs	r3, #2
 8008ebc:	b29a      	uxth	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008ec4:	e03c      	b.n	8008f40 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	3320      	adds	r3, #32
 8008ed0:	7812      	ldrb	r2, [r2, #0]
 8008ed2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed8:	1c5a      	adds	r2, r3, #1
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	b29a      	uxth	r2, r3
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008ef0:	e026      	b.n	8008f40 <HAL_SPI_Transmit+0x380>
 8008ef2:	bf00      	nop
 8008ef4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008ef8:	f7f9 feb4 	bl	8002c64 <HAL_GetTick>
 8008efc:	4602      	mov	r2, r0
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	1ad3      	subs	r3, r2, r3
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	d803      	bhi.n	8008f10 <HAL_SPI_Transmit+0x350>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f0e:	d102      	bne.n	8008f16 <HAL_SPI_Transmit+0x356>
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d114      	bne.n	8008f40 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 f844 	bl	8008fa4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e02c      	b.n	8008f9a <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f47f af78 	bne.w	8008e3e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2200      	movs	r2, #0
 8008f56:	2108      	movs	r1, #8
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 f8c3 	bl	80090e4 <SPI_WaitOnFlagUntilTimeout>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d007      	beq.n	8008f74 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f6a:	f043 0220 	orr.w	r2, r3, #32
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 f815 	bl	8008fa4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	e000      	b.n	8008f9a <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008f98:	7efb      	ldrb	r3, [r7, #27]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop

08008fa4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008fa4:	b480      	push	{r7}
 8008fa6:	b085      	sub	sp, #20
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	695b      	ldr	r3, [r3, #20]
 8008fb2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699a      	ldr	r2, [r3, #24]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f042 0208 	orr.w	r2, r2, #8
 8008fc2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f042 0210 	orr.w	r2, r2, #16
 8008fd2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f022 0201 	bic.w	r2, r2, #1
 8008fe2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6919      	ldr	r1, [r3, #16]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	4b3c      	ldr	r3, [pc, #240]	; (80090e0 <SPI_CloseTransfer+0x13c>)
 8008ff0:	400b      	ands	r3, r1
 8008ff2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009002:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800900a:	b2db      	uxtb	r3, r3
 800900c:	2b04      	cmp	r3, #4
 800900e:	d014      	beq.n	800903a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f003 0320 	and.w	r3, r3, #32
 8009016:	2b00      	cmp	r3, #0
 8009018:	d00f      	beq.n	800903a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009020:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	699a      	ldr	r2, [r3, #24]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f042 0220 	orr.w	r2, r2, #32
 8009038:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b03      	cmp	r3, #3
 8009044:	d014      	beq.n	8009070 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00f      	beq.n	8009070 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009056:	f043 0204 	orr.w	r2, r3, #4
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699a      	ldr	r2, [r3, #24]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800906e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009076:	2b00      	cmp	r3, #0
 8009078:	d00f      	beq.n	800909a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009080:	f043 0201 	orr.w	r2, r3, #1
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	699a      	ldr	r2, [r3, #24]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009098:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00f      	beq.n	80090c4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090aa:	f043 0208 	orr.w	r2, r3, #8
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090c2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80090d4:	bf00      	nop
 80090d6:	3714      	adds	r7, #20
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr
 80090e0:	fffffc90 	.word	0xfffffc90

080090e4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b084      	sub	sp, #16
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	603b      	str	r3, [r7, #0]
 80090f0:	4613      	mov	r3, r2
 80090f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80090f4:	e010      	b.n	8009118 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80090f6:	f7f9 fdb5 	bl	8002c64 <HAL_GetTick>
 80090fa:	4602      	mov	r2, r0
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	429a      	cmp	r2, r3
 8009104:	d803      	bhi.n	800910e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009106:	69bb      	ldr	r3, [r7, #24]
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910c:	d102      	bne.n	8009114 <SPI_WaitOnFlagUntilTimeout+0x30>
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e00f      	b.n	8009138 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695a      	ldr	r2, [r3, #20]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	4013      	ands	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	429a      	cmp	r2, r3
 8009126:	bf0c      	ite	eq
 8009128:	2301      	moveq	r3, #1
 800912a:	2300      	movne	r3, #0
 800912c:	b2db      	uxtb	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	429a      	cmp	r2, r3
 8009134:	d0df      	beq.n	80090f6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3710      	adds	r7, #16
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}

08009140 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914c:	095b      	lsrs	r3, r3, #5
 800914e:	3301      	adds	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	3301      	adds	r3, #1
 8009158:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	3307      	adds	r3, #7
 800915e:	08db      	lsrs	r3, r3, #3
 8009160:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	fb02 f303 	mul.w	r3, r2, r3
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b082      	sub	sp, #8
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d101      	bne.n	8009188 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e042      	b.n	800920e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800918e:	2b00      	cmp	r3, #0
 8009190:	d106      	bne.n	80091a0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7f9 fb08 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2224      	movs	r2, #36	; 0x24
 80091a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f022 0201 	bic.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 fbeb 	bl	8009994 <UART_SetConfig>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d101      	bne.n	80091c8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e022      	b.n	800920e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d002      	beq.n	80091d6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f001 f947 	bl	800a464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	685a      	ldr	r2, [r3, #4]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80091e4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	689a      	ldr	r2, [r3, #8]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80091f4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f042 0201 	orr.w	r2, r2, #1
 8009204:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f001 f9ce 	bl	800a5a8 <UART_CheckIdleState>
 800920c:	4603      	mov	r3, r0
}
 800920e:	4618      	mov	r0, r3
 8009210:	3708      	adds	r7, #8
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b0ba      	sub	sp, #232	; 0xe8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	69db      	ldr	r3, [r3, #28]
 8009226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800923e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009242:	f640 030f 	movw	r3, #2063	; 0x80f
 8009246:	4013      	ands	r3, r2
 8009248:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800924c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009250:	2b00      	cmp	r3, #0
 8009252:	d11b      	bne.n	800928c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009254:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009258:	f003 0320 	and.w	r3, r3, #32
 800925c:	2b00      	cmp	r3, #0
 800925e:	d015      	beq.n	800928c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009264:	f003 0320 	and.w	r3, r3, #32
 8009268:	2b00      	cmp	r3, #0
 800926a:	d105      	bne.n	8009278 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800926c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d009      	beq.n	800928c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800927c:	2b00      	cmp	r3, #0
 800927e:	f000 835a 	beq.w	8009936 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	4798      	blx	r3
      }
      return;
 800928a:	e354      	b.n	8009936 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800928c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 811f 	beq.w	80094d4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009296:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800929a:	4b8b      	ldr	r3, [pc, #556]	; (80094c8 <HAL_UART_IRQHandler+0x2b0>)
 800929c:	4013      	ands	r3, r2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d106      	bne.n	80092b0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80092a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80092a6:	4b89      	ldr	r3, [pc, #548]	; (80094cc <HAL_UART_IRQHandler+0x2b4>)
 80092a8:	4013      	ands	r3, r2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8112 	beq.w	80094d4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80092b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092b4:	f003 0301 	and.w	r3, r3, #1
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d011      	beq.n	80092e0 <HAL_UART_IRQHandler+0xc8>
 80092bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2201      	movs	r2, #1
 80092ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092d6:	f043 0201 	orr.w	r2, r3, #1
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d011      	beq.n	8009310 <HAL_UART_IRQHandler+0xf8>
 80092ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80092f0:	f003 0301 	and.w	r3, r3, #1
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d00b      	beq.n	8009310 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2202      	movs	r2, #2
 80092fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009306:	f043 0204 	orr.w	r2, r3, #4
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009314:	f003 0304 	and.w	r3, r3, #4
 8009318:	2b00      	cmp	r3, #0
 800931a:	d011      	beq.n	8009340 <HAL_UART_IRQHandler+0x128>
 800931c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009320:	f003 0301 	and.w	r3, r3, #1
 8009324:	2b00      	cmp	r3, #0
 8009326:	d00b      	beq.n	8009340 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2204      	movs	r2, #4
 800932e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009336:	f043 0202 	orr.w	r2, r3, #2
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009344:	f003 0308 	and.w	r3, r3, #8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d017      	beq.n	800937c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800934c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b00      	cmp	r3, #0
 8009356:	d105      	bne.n	8009364 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009358:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800935c:	4b5a      	ldr	r3, [pc, #360]	; (80094c8 <HAL_UART_IRQHandler+0x2b0>)
 800935e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2208      	movs	r2, #8
 800936a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009372:	f043 0208 	orr.w	r2, r3, #8
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800937c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009380:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009384:	2b00      	cmp	r3, #0
 8009386:	d012      	beq.n	80093ae <HAL_UART_IRQHandler+0x196>
 8009388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800938c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d00c      	beq.n	80093ae <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800939c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093a4:	f043 0220 	orr.w	r2, r3, #32
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	f000 82c0 	beq.w	800993a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80093ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d013      	beq.n	80093ee <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80093c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093ca:	f003 0320 	and.w	r3, r3, #32
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d105      	bne.n	80093de <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80093d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d007      	beq.n	80093ee <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d003      	beq.n	80093ee <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009402:	2b40      	cmp	r3, #64	; 0x40
 8009404:	d005      	beq.n	8009412 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800940a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800940e:	2b00      	cmp	r3, #0
 8009410:	d04f      	beq.n	80094b2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f001 f9dc 	bl	800a7d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	689b      	ldr	r3, [r3, #8]
 800941e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009422:	2b40      	cmp	r3, #64	; 0x40
 8009424:	d141      	bne.n	80094aa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3308      	adds	r3, #8
 800942c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009430:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800943c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009440:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	3308      	adds	r3, #8
 800944e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009452:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800945a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800945e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009462:	e841 2300 	strex	r3, r2, [r1]
 8009466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800946a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1d9      	bne.n	8009426 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009476:	2b00      	cmp	r3, #0
 8009478:	d013      	beq.n	80094a2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800947e:	4a14      	ldr	r2, [pc, #80]	; (80094d0 <HAL_UART_IRQHandler+0x2b8>)
 8009480:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009486:	4618      	mov	r0, r3
 8009488:	f7fa fbc6 	bl	8003c18 <HAL_DMA_Abort_IT>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d017      	beq.n	80094c2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009496:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009498:	687a      	ldr	r2, [r7, #4]
 800949a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800949c:	4610      	mov	r0, r2
 800949e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a0:	e00f      	b.n	80094c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	f000 fa60 	bl	8009968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094a8:	e00b      	b.n	80094c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80094aa:	6878      	ldr	r0, [r7, #4]
 80094ac:	f000 fa5c 	bl	8009968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094b0:	e007      	b.n	80094c2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fa58 	bl	8009968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80094c0:	e23b      	b.n	800993a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c2:	bf00      	nop
    return;
 80094c4:	e239      	b.n	800993a <HAL_UART_IRQHandler+0x722>
 80094c6:	bf00      	nop
 80094c8:	10000001 	.word	0x10000001
 80094cc:	04000120 	.word	0x04000120
 80094d0:	0800a89d 	.word	0x0800a89d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094d8:	2b01      	cmp	r3, #1
 80094da:	f040 81ce 	bne.w	800987a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80094de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094e2:	f003 0310 	and.w	r3, r3, #16
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f000 81c7 	beq.w	800987a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80094ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f0:	f003 0310 	and.w	r3, r3, #16
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 81c0 	beq.w	800987a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	2210      	movs	r2, #16
 8009500:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	689b      	ldr	r3, [r3, #8]
 8009508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950c:	2b40      	cmp	r3, #64	; 0x40
 800950e:	f040 813b 	bne.w	8009788 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a8b      	ldr	r2, [pc, #556]	; (8009748 <HAL_UART_IRQHandler+0x530>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d059      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a89      	ldr	r2, [pc, #548]	; (800974c <HAL_UART_IRQHandler+0x534>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d053      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a87      	ldr	r2, [pc, #540]	; (8009750 <HAL_UART_IRQHandler+0x538>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d04d      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	4a85      	ldr	r2, [pc, #532]	; (8009754 <HAL_UART_IRQHandler+0x53c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d047      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a83      	ldr	r2, [pc, #524]	; (8009758 <HAL_UART_IRQHandler+0x540>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d041      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4a81      	ldr	r2, [pc, #516]	; (800975c <HAL_UART_IRQHandler+0x544>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d03b      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a7f      	ldr	r2, [pc, #508]	; (8009760 <HAL_UART_IRQHandler+0x548>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d035      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a7d      	ldr	r2, [pc, #500]	; (8009764 <HAL_UART_IRQHandler+0x54c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d02f      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a7b      	ldr	r2, [pc, #492]	; (8009768 <HAL_UART_IRQHandler+0x550>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d029      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a79      	ldr	r2, [pc, #484]	; (800976c <HAL_UART_IRQHandler+0x554>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d023      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4a77      	ldr	r2, [pc, #476]	; (8009770 <HAL_UART_IRQHandler+0x558>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d01d      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a75      	ldr	r2, [pc, #468]	; (8009774 <HAL_UART_IRQHandler+0x55c>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d017      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a73      	ldr	r2, [pc, #460]	; (8009778 <HAL_UART_IRQHandler+0x560>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d011      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	4a71      	ldr	r2, [pc, #452]	; (800977c <HAL_UART_IRQHandler+0x564>)
 80095b6:	4293      	cmp	r3, r2
 80095b8:	d00b      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a6f      	ldr	r2, [pc, #444]	; (8009780 <HAL_UART_IRQHandler+0x568>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d005      	beq.n	80095d2 <HAL_UART_IRQHandler+0x3ba>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a6d      	ldr	r2, [pc, #436]	; (8009784 <HAL_UART_IRQHandler+0x56c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d105      	bne.n	80095de <HAL_UART_IRQHandler+0x3c6>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	e004      	b.n	80095e8 <HAL_UART_IRQHandler+0x3d0>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	f000 81a4 	beq.w	800993e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009600:	429a      	cmp	r2, r3
 8009602:	f080 819c 	bcs.w	800993e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800960c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800961a:	f000 8086 	beq.w	800972a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800962a:	e853 3f00 	ldrex	r3, [r3]
 800962e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009632:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009636:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800963a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	461a      	mov	r2, r3
 8009644:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800964c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009650:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009654:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009658:	e841 2300 	strex	r3, r2, [r1]
 800965c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009660:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009664:	2b00      	cmp	r3, #0
 8009666:	d1da      	bne.n	800961e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	3308      	adds	r3, #8
 800966e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009670:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009672:	e853 3f00 	ldrex	r3, [r3]
 8009676:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800967a:	f023 0301 	bic.w	r3, r3, #1
 800967e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800968c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009690:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009692:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009694:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009698:	e841 2300 	strex	r3, r2, [r1]
 800969c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800969e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d1e1      	bne.n	8009668 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3308      	adds	r3, #8
 80096aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096ae:	e853 3f00 	ldrex	r3, [r3]
 80096b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	3308      	adds	r3, #8
 80096c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e3      	bne.n	80096a4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096fa:	f023 0310 	bic.w	r3, r3, #16
 80096fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	461a      	mov	r2, r3
 8009708:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800970c:	65bb      	str	r3, [r7, #88]	; 0x58
 800970e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009710:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009712:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009714:	e841 2300 	strex	r3, r2, [r1]
 8009718:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800971a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800971c:	2b00      	cmp	r3, #0
 800971e:	d1e4      	bne.n	80096ea <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009724:	4618      	mov	r0, r3
 8009726:	f7f9 ff59 	bl	80035dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009736:	b29b      	uxth	r3, r3
 8009738:	1ad3      	subs	r3, r2, r3
 800973a:	b29b      	uxth	r3, r3
 800973c:	4619      	mov	r1, r3
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f91c 	bl	800997c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009744:	e0fb      	b.n	800993e <HAL_UART_IRQHandler+0x726>
 8009746:	bf00      	nop
 8009748:	40020010 	.word	0x40020010
 800974c:	40020028 	.word	0x40020028
 8009750:	40020040 	.word	0x40020040
 8009754:	40020058 	.word	0x40020058
 8009758:	40020070 	.word	0x40020070
 800975c:	40020088 	.word	0x40020088
 8009760:	400200a0 	.word	0x400200a0
 8009764:	400200b8 	.word	0x400200b8
 8009768:	40020410 	.word	0x40020410
 800976c:	40020428 	.word	0x40020428
 8009770:	40020440 	.word	0x40020440
 8009774:	40020458 	.word	0x40020458
 8009778:	40020470 	.word	0x40020470
 800977c:	40020488 	.word	0x40020488
 8009780:	400204a0 	.word	0x400204a0
 8009784:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009794:	b29b      	uxth	r3, r3
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f000 80cc 	beq.w	8009942 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80097aa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80c7 	beq.w	8009942 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	e853 3f00 	ldrex	r3, [r3]
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	461a      	mov	r2, r3
 80097d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097d6:	647b      	str	r3, [r7, #68]	; 0x44
 80097d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097de:	e841 2300 	strex	r3, r2, [r1]
 80097e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1e4      	bne.n	80097b4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3308      	adds	r3, #8
 80097f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	623b      	str	r3, [r7, #32]
   return(result);
 80097fa:	6a3a      	ldr	r2, [r7, #32]
 80097fc:	4b54      	ldr	r3, [pc, #336]	; (8009950 <HAL_UART_IRQHandler+0x738>)
 80097fe:	4013      	ands	r3, r2
 8009800:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3308      	adds	r3, #8
 800980a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800980e:	633a      	str	r2, [r7, #48]	; 0x30
 8009810:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800981c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e3      	bne.n	80097ea <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2220      	movs	r2, #32
 8009826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2200      	movs	r2, #0
 800982e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	e853 3f00 	ldrex	r3, [r3]
 8009842:	60fb      	str	r3, [r7, #12]
   return(result);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0310 	bic.w	r3, r3, #16
 800984a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	461a      	mov	r2, r3
 8009854:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009858:	61fb      	str	r3, [r7, #28]
 800985a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985c:	69b9      	ldr	r1, [r7, #24]
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	e841 2300 	strex	r3, r2, [r1]
 8009864:	617b      	str	r3, [r7, #20]
   return(result);
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d1e4      	bne.n	8009836 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800986c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009870:	4619      	mov	r1, r3
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 f882 	bl	800997c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009878:	e063      	b.n	8009942 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800987a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009882:	2b00      	cmp	r3, #0
 8009884:	d00e      	beq.n	80098a4 <HAL_UART_IRQHandler+0x68c>
 8009886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800988a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d008      	beq.n	80098a4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800989a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f001 f83e 	bl	800a91e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098a2:	e051      	b.n	8009948 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80098a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d014      	beq.n	80098da <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d105      	bne.n	80098c8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d008      	beq.n	80098da <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d03a      	beq.n	8009946 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	4798      	blx	r3
    }
    return;
 80098d8:	e035      	b.n	8009946 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d009      	beq.n	80098fa <HAL_UART_IRQHandler+0x6e2>
 80098e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f000 ffe8 	bl	800a8c8 <UART_EndTransmit_IT>
    return;
 80098f8:	e026      	b.n	8009948 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009902:	2b00      	cmp	r3, #0
 8009904:	d009      	beq.n	800991a <HAL_UART_IRQHandler+0x702>
 8009906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800990a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800990e:	2b00      	cmp	r3, #0
 8009910:	d003      	beq.n	800991a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 f817 	bl	800a946 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009918:	e016      	b.n	8009948 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800991a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800991e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	d010      	beq.n	8009948 <HAL_UART_IRQHandler+0x730>
 8009926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800992a:	2b00      	cmp	r3, #0
 800992c:	da0c      	bge.n	8009948 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 ffff 	bl	800a932 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009934:	e008      	b.n	8009948 <HAL_UART_IRQHandler+0x730>
      return;
 8009936:	bf00      	nop
 8009938:	e006      	b.n	8009948 <HAL_UART_IRQHandler+0x730>
    return;
 800993a:	bf00      	nop
 800993c:	e004      	b.n	8009948 <HAL_UART_IRQHandler+0x730>
      return;
 800993e:	bf00      	nop
 8009940:	e002      	b.n	8009948 <HAL_UART_IRQHandler+0x730>
      return;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <HAL_UART_IRQHandler+0x730>
    return;
 8009946:	bf00      	nop
  }
}
 8009948:	37e8      	adds	r7, #232	; 0xe8
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	effffffe 	.word	0xeffffffe

08009954 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800995c:	bf00      	nop
 800995e:	370c      	adds	r7, #12
 8009960:	46bd      	mov	sp, r7
 8009962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009966:	4770      	bx	lr

08009968 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	460b      	mov	r3, r1
 8009986:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009998:	b092      	sub	sp, #72	; 0x48
 800999a:	af00      	add	r7, sp, #0
 800999c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80099a4:	697b      	ldr	r3, [r7, #20]
 80099a6:	689a      	ldr	r2, [r3, #8]
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	431a      	orrs	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	695b      	ldr	r3, [r3, #20]
 80099b2:	431a      	orrs	r2, r3
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	4313      	orrs	r3, r2
 80099ba:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	4bbe      	ldr	r3, [pc, #760]	; (8009cbc <UART_SetConfig+0x328>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	6812      	ldr	r2, [r2, #0]
 80099ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80099cc:	430b      	orrs	r3, r1
 80099ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099d0:	697b      	ldr	r3, [r7, #20]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	68da      	ldr	r2, [r3, #12]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	430a      	orrs	r2, r1
 80099e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4ab3      	ldr	r2, [pc, #716]	; (8009cc0 <UART_SetConfig+0x32c>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d004      	beq.n	8009a00 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	6a1b      	ldr	r3, [r3, #32]
 80099fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099fc:	4313      	orrs	r3, r2
 80099fe:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689a      	ldr	r2, [r3, #8]
 8009a06:	4baf      	ldr	r3, [pc, #700]	; (8009cc4 <UART_SetConfig+0x330>)
 8009a08:	4013      	ands	r3, r2
 8009a0a:	697a      	ldr	r2, [r7, #20]
 8009a0c:	6812      	ldr	r2, [r2, #0]
 8009a0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a10:	430b      	orrs	r3, r1
 8009a12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a1a:	f023 010f 	bic.w	r1, r3, #15
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	430a      	orrs	r2, r1
 8009a28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4aa6      	ldr	r2, [pc, #664]	; (8009cc8 <UART_SetConfig+0x334>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d177      	bne.n	8009b24 <UART_SetConfig+0x190>
 8009a34:	4ba5      	ldr	r3, [pc, #660]	; (8009ccc <UART_SetConfig+0x338>)
 8009a36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a38:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a3c:	2b28      	cmp	r3, #40	; 0x28
 8009a3e:	d86d      	bhi.n	8009b1c <UART_SetConfig+0x188>
 8009a40:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <UART_SetConfig+0xb4>)
 8009a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a46:	bf00      	nop
 8009a48:	08009aed 	.word	0x08009aed
 8009a4c:	08009b1d 	.word	0x08009b1d
 8009a50:	08009b1d 	.word	0x08009b1d
 8009a54:	08009b1d 	.word	0x08009b1d
 8009a58:	08009b1d 	.word	0x08009b1d
 8009a5c:	08009b1d 	.word	0x08009b1d
 8009a60:	08009b1d 	.word	0x08009b1d
 8009a64:	08009b1d 	.word	0x08009b1d
 8009a68:	08009af5 	.word	0x08009af5
 8009a6c:	08009b1d 	.word	0x08009b1d
 8009a70:	08009b1d 	.word	0x08009b1d
 8009a74:	08009b1d 	.word	0x08009b1d
 8009a78:	08009b1d 	.word	0x08009b1d
 8009a7c:	08009b1d 	.word	0x08009b1d
 8009a80:	08009b1d 	.word	0x08009b1d
 8009a84:	08009b1d 	.word	0x08009b1d
 8009a88:	08009afd 	.word	0x08009afd
 8009a8c:	08009b1d 	.word	0x08009b1d
 8009a90:	08009b1d 	.word	0x08009b1d
 8009a94:	08009b1d 	.word	0x08009b1d
 8009a98:	08009b1d 	.word	0x08009b1d
 8009a9c:	08009b1d 	.word	0x08009b1d
 8009aa0:	08009b1d 	.word	0x08009b1d
 8009aa4:	08009b1d 	.word	0x08009b1d
 8009aa8:	08009b05 	.word	0x08009b05
 8009aac:	08009b1d 	.word	0x08009b1d
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009b1d 	.word	0x08009b1d
 8009ab8:	08009b1d 	.word	0x08009b1d
 8009abc:	08009b1d 	.word	0x08009b1d
 8009ac0:	08009b1d 	.word	0x08009b1d
 8009ac4:	08009b1d 	.word	0x08009b1d
 8009ac8:	08009b0d 	.word	0x08009b0d
 8009acc:	08009b1d 	.word	0x08009b1d
 8009ad0:	08009b1d 	.word	0x08009b1d
 8009ad4:	08009b1d 	.word	0x08009b1d
 8009ad8:	08009b1d 	.word	0x08009b1d
 8009adc:	08009b1d 	.word	0x08009b1d
 8009ae0:	08009b1d 	.word	0x08009b1d
 8009ae4:	08009b1d 	.word	0x08009b1d
 8009ae8:	08009b15 	.word	0x08009b15
 8009aec:	2301      	movs	r3, #1
 8009aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009af2:	e222      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009af4:	2304      	movs	r3, #4
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e21e      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009afc:	2308      	movs	r3, #8
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e21a      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b04:	2310      	movs	r3, #16
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e216      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b0c:	2320      	movs	r3, #32
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e212      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b14:	2340      	movs	r3, #64	; 0x40
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e20e      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b1c:	2380      	movs	r3, #128	; 0x80
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e20a      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a69      	ldr	r2, [pc, #420]	; (8009cd0 <UART_SetConfig+0x33c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d130      	bne.n	8009b90 <UART_SetConfig+0x1fc>
 8009b2e:	4b67      	ldr	r3, [pc, #412]	; (8009ccc <UART_SetConfig+0x338>)
 8009b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b32:	f003 0307 	and.w	r3, r3, #7
 8009b36:	2b05      	cmp	r3, #5
 8009b38:	d826      	bhi.n	8009b88 <UART_SetConfig+0x1f4>
 8009b3a:	a201      	add	r2, pc, #4	; (adr r2, 8009b40 <UART_SetConfig+0x1ac>)
 8009b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b40:	08009b59 	.word	0x08009b59
 8009b44:	08009b61 	.word	0x08009b61
 8009b48:	08009b69 	.word	0x08009b69
 8009b4c:	08009b71 	.word	0x08009b71
 8009b50:	08009b79 	.word	0x08009b79
 8009b54:	08009b81 	.word	0x08009b81
 8009b58:	2300      	movs	r3, #0
 8009b5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b5e:	e1ec      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b60:	2304      	movs	r3, #4
 8009b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b66:	e1e8      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b68:	2308      	movs	r3, #8
 8009b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b6e:	e1e4      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b70:	2310      	movs	r3, #16
 8009b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b76:	e1e0      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b78:	2320      	movs	r3, #32
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e1dc      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b80:	2340      	movs	r3, #64	; 0x40
 8009b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b86:	e1d8      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b88:	2380      	movs	r3, #128	; 0x80
 8009b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b8e:	e1d4      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009b90:	697b      	ldr	r3, [r7, #20]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a4f      	ldr	r2, [pc, #316]	; (8009cd4 <UART_SetConfig+0x340>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d130      	bne.n	8009bfc <UART_SetConfig+0x268>
 8009b9a:	4b4c      	ldr	r3, [pc, #304]	; (8009ccc <UART_SetConfig+0x338>)
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9e:	f003 0307 	and.w	r3, r3, #7
 8009ba2:	2b05      	cmp	r3, #5
 8009ba4:	d826      	bhi.n	8009bf4 <UART_SetConfig+0x260>
 8009ba6:	a201      	add	r2, pc, #4	; (adr r2, 8009bac <UART_SetConfig+0x218>)
 8009ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bac:	08009bc5 	.word	0x08009bc5
 8009bb0:	08009bcd 	.word	0x08009bcd
 8009bb4:	08009bd5 	.word	0x08009bd5
 8009bb8:	08009bdd 	.word	0x08009bdd
 8009bbc:	08009be5 	.word	0x08009be5
 8009bc0:	08009bed 	.word	0x08009bed
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bca:	e1b6      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bd2:	e1b2      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bda:	e1ae      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009bdc:	2310      	movs	r3, #16
 8009bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009be2:	e1aa      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009be4:	2320      	movs	r3, #32
 8009be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bea:	e1a6      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009bec:	2340      	movs	r3, #64	; 0x40
 8009bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bf2:	e1a2      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009bf4:	2380      	movs	r3, #128	; 0x80
 8009bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009bfa:	e19e      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a35      	ldr	r2, [pc, #212]	; (8009cd8 <UART_SetConfig+0x344>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d130      	bne.n	8009c68 <UART_SetConfig+0x2d4>
 8009c06:	4b31      	ldr	r3, [pc, #196]	; (8009ccc <UART_SetConfig+0x338>)
 8009c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c0a:	f003 0307 	and.w	r3, r3, #7
 8009c0e:	2b05      	cmp	r3, #5
 8009c10:	d826      	bhi.n	8009c60 <UART_SetConfig+0x2cc>
 8009c12:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <UART_SetConfig+0x284>)
 8009c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c18:	08009c31 	.word	0x08009c31
 8009c1c:	08009c39 	.word	0x08009c39
 8009c20:	08009c41 	.word	0x08009c41
 8009c24:	08009c49 	.word	0x08009c49
 8009c28:	08009c51 	.word	0x08009c51
 8009c2c:	08009c59 	.word	0x08009c59
 8009c30:	2300      	movs	r3, #0
 8009c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c36:	e180      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009c38:	2304      	movs	r3, #4
 8009c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c3e:	e17c      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009c40:	2308      	movs	r3, #8
 8009c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c46:	e178      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009c48:	2310      	movs	r3, #16
 8009c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c4e:	e174      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009c50:	2320      	movs	r3, #32
 8009c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c56:	e170      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009c58:	2340      	movs	r3, #64	; 0x40
 8009c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c5e:	e16c      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009c60:	2380      	movs	r3, #128	; 0x80
 8009c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009c66:	e168      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009c68:	697b      	ldr	r3, [r7, #20]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a1b      	ldr	r2, [pc, #108]	; (8009cdc <UART_SetConfig+0x348>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d142      	bne.n	8009cf8 <UART_SetConfig+0x364>
 8009c72:	4b16      	ldr	r3, [pc, #88]	; (8009ccc <UART_SetConfig+0x338>)
 8009c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	2b05      	cmp	r3, #5
 8009c7c:	d838      	bhi.n	8009cf0 <UART_SetConfig+0x35c>
 8009c7e:	a201      	add	r2, pc, #4	; (adr r2, 8009c84 <UART_SetConfig+0x2f0>)
 8009c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c84:	08009c9d 	.word	0x08009c9d
 8009c88:	08009ca5 	.word	0x08009ca5
 8009c8c:	08009cad 	.word	0x08009cad
 8009c90:	08009cb5 	.word	0x08009cb5
 8009c94:	08009ce1 	.word	0x08009ce1
 8009c98:	08009ce9 	.word	0x08009ce9
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ca2:	e14a      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009ca4:	2304      	movs	r3, #4
 8009ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009caa:	e146      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009cac:	2308      	movs	r3, #8
 8009cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cb2:	e142      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009cb4:	2310      	movs	r3, #16
 8009cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cba:	e13e      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009cbc:	cfff69f3 	.word	0xcfff69f3
 8009cc0:	58000c00 	.word	0x58000c00
 8009cc4:	11fff4ff 	.word	0x11fff4ff
 8009cc8:	40011000 	.word	0x40011000
 8009ccc:	58024400 	.word	0x58024400
 8009cd0:	40004400 	.word	0x40004400
 8009cd4:	40004800 	.word	0x40004800
 8009cd8:	40004c00 	.word	0x40004c00
 8009cdc:	40005000 	.word	0x40005000
 8009ce0:	2320      	movs	r3, #32
 8009ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ce6:	e128      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009ce8:	2340      	movs	r3, #64	; 0x40
 8009cea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cee:	e124      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009cf0:	2380      	movs	r3, #128	; 0x80
 8009cf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009cf6:	e120      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4acb      	ldr	r2, [pc, #812]	; (800a02c <UART_SetConfig+0x698>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d176      	bne.n	8009df0 <UART_SetConfig+0x45c>
 8009d02:	4bcb      	ldr	r3, [pc, #812]	; (800a030 <UART_SetConfig+0x69c>)
 8009d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d0a:	2b28      	cmp	r3, #40	; 0x28
 8009d0c:	d86c      	bhi.n	8009de8 <UART_SetConfig+0x454>
 8009d0e:	a201      	add	r2, pc, #4	; (adr r2, 8009d14 <UART_SetConfig+0x380>)
 8009d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d14:	08009db9 	.word	0x08009db9
 8009d18:	08009de9 	.word	0x08009de9
 8009d1c:	08009de9 	.word	0x08009de9
 8009d20:	08009de9 	.word	0x08009de9
 8009d24:	08009de9 	.word	0x08009de9
 8009d28:	08009de9 	.word	0x08009de9
 8009d2c:	08009de9 	.word	0x08009de9
 8009d30:	08009de9 	.word	0x08009de9
 8009d34:	08009dc1 	.word	0x08009dc1
 8009d38:	08009de9 	.word	0x08009de9
 8009d3c:	08009de9 	.word	0x08009de9
 8009d40:	08009de9 	.word	0x08009de9
 8009d44:	08009de9 	.word	0x08009de9
 8009d48:	08009de9 	.word	0x08009de9
 8009d4c:	08009de9 	.word	0x08009de9
 8009d50:	08009de9 	.word	0x08009de9
 8009d54:	08009dc9 	.word	0x08009dc9
 8009d58:	08009de9 	.word	0x08009de9
 8009d5c:	08009de9 	.word	0x08009de9
 8009d60:	08009de9 	.word	0x08009de9
 8009d64:	08009de9 	.word	0x08009de9
 8009d68:	08009de9 	.word	0x08009de9
 8009d6c:	08009de9 	.word	0x08009de9
 8009d70:	08009de9 	.word	0x08009de9
 8009d74:	08009dd1 	.word	0x08009dd1
 8009d78:	08009de9 	.word	0x08009de9
 8009d7c:	08009de9 	.word	0x08009de9
 8009d80:	08009de9 	.word	0x08009de9
 8009d84:	08009de9 	.word	0x08009de9
 8009d88:	08009de9 	.word	0x08009de9
 8009d8c:	08009de9 	.word	0x08009de9
 8009d90:	08009de9 	.word	0x08009de9
 8009d94:	08009dd9 	.word	0x08009dd9
 8009d98:	08009de9 	.word	0x08009de9
 8009d9c:	08009de9 	.word	0x08009de9
 8009da0:	08009de9 	.word	0x08009de9
 8009da4:	08009de9 	.word	0x08009de9
 8009da8:	08009de9 	.word	0x08009de9
 8009dac:	08009de9 	.word	0x08009de9
 8009db0:	08009de9 	.word	0x08009de9
 8009db4:	08009de1 	.word	0x08009de1
 8009db8:	2301      	movs	r3, #1
 8009dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dbe:	e0bc      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009dc0:	2304      	movs	r3, #4
 8009dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dc6:	e0b8      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009dc8:	2308      	movs	r3, #8
 8009dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dce:	e0b4      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009dd0:	2310      	movs	r3, #16
 8009dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dd6:	e0b0      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009dd8:	2320      	movs	r3, #32
 8009dda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dde:	e0ac      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009de0:	2340      	movs	r3, #64	; 0x40
 8009de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009de6:	e0a8      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009de8:	2380      	movs	r3, #128	; 0x80
 8009dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009dee:	e0a4      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	4a8f      	ldr	r2, [pc, #572]	; (800a034 <UART_SetConfig+0x6a0>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d130      	bne.n	8009e5c <UART_SetConfig+0x4c8>
 8009dfa:	4b8d      	ldr	r3, [pc, #564]	; (800a030 <UART_SetConfig+0x69c>)
 8009dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dfe:	f003 0307 	and.w	r3, r3, #7
 8009e02:	2b05      	cmp	r3, #5
 8009e04:	d826      	bhi.n	8009e54 <UART_SetConfig+0x4c0>
 8009e06:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <UART_SetConfig+0x478>)
 8009e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0c:	08009e25 	.word	0x08009e25
 8009e10:	08009e2d 	.word	0x08009e2d
 8009e14:	08009e35 	.word	0x08009e35
 8009e18:	08009e3d 	.word	0x08009e3d
 8009e1c:	08009e45 	.word	0x08009e45
 8009e20:	08009e4d 	.word	0x08009e4d
 8009e24:	2300      	movs	r3, #0
 8009e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2a:	e086      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009e2c:	2304      	movs	r3, #4
 8009e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e32:	e082      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009e34:	2308      	movs	r3, #8
 8009e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3a:	e07e      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009e3c:	2310      	movs	r3, #16
 8009e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e42:	e07a      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009e44:	2320      	movs	r3, #32
 8009e46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4a:	e076      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009e4c:	2340      	movs	r3, #64	; 0x40
 8009e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e52:	e072      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009e54:	2380      	movs	r3, #128	; 0x80
 8009e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e5a:	e06e      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a75      	ldr	r2, [pc, #468]	; (800a038 <UART_SetConfig+0x6a4>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d130      	bne.n	8009ec8 <UART_SetConfig+0x534>
 8009e66:	4b72      	ldr	r3, [pc, #456]	; (800a030 <UART_SetConfig+0x69c>)
 8009e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e6a:	f003 0307 	and.w	r3, r3, #7
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	d826      	bhi.n	8009ec0 <UART_SetConfig+0x52c>
 8009e72:	a201      	add	r2, pc, #4	; (adr r2, 8009e78 <UART_SetConfig+0x4e4>)
 8009e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e78:	08009e91 	.word	0x08009e91
 8009e7c:	08009e99 	.word	0x08009e99
 8009e80:	08009ea1 	.word	0x08009ea1
 8009e84:	08009ea9 	.word	0x08009ea9
 8009e88:	08009eb1 	.word	0x08009eb1
 8009e8c:	08009eb9 	.word	0x08009eb9
 8009e90:	2300      	movs	r3, #0
 8009e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e96:	e050      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009e98:	2304      	movs	r3, #4
 8009e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9e:	e04c      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009ea0:	2308      	movs	r3, #8
 8009ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea6:	e048      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009ea8:	2310      	movs	r3, #16
 8009eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eae:	e044      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb6:	e040      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009eb8:	2340      	movs	r3, #64	; 0x40
 8009eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ebe:	e03c      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009ec0:	2380      	movs	r3, #128	; 0x80
 8009ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec6:	e038      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	4a5b      	ldr	r2, [pc, #364]	; (800a03c <UART_SetConfig+0x6a8>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d130      	bne.n	8009f34 <UART_SetConfig+0x5a0>
 8009ed2:	4b57      	ldr	r3, [pc, #348]	; (800a030 <UART_SetConfig+0x69c>)
 8009ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ed6:	f003 0307 	and.w	r3, r3, #7
 8009eda:	2b05      	cmp	r3, #5
 8009edc:	d826      	bhi.n	8009f2c <UART_SetConfig+0x598>
 8009ede:	a201      	add	r2, pc, #4	; (adr r2, 8009ee4 <UART_SetConfig+0x550>)
 8009ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee4:	08009efd 	.word	0x08009efd
 8009ee8:	08009f05 	.word	0x08009f05
 8009eec:	08009f0d 	.word	0x08009f0d
 8009ef0:	08009f15 	.word	0x08009f15
 8009ef4:	08009f1d 	.word	0x08009f1d
 8009ef8:	08009f25 	.word	0x08009f25
 8009efc:	2302      	movs	r3, #2
 8009efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f02:	e01a      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009f04:	2304      	movs	r3, #4
 8009f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0a:	e016      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009f0c:	2308      	movs	r3, #8
 8009f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f12:	e012      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009f14:	2310      	movs	r3, #16
 8009f16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1a:	e00e      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009f1c:	2320      	movs	r3, #32
 8009f1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f22:	e00a      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009f24:	2340      	movs	r3, #64	; 0x40
 8009f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2a:	e006      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009f2c:	2380      	movs	r3, #128	; 0x80
 8009f2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f32:	e002      	b.n	8009f3a <UART_SetConfig+0x5a6>
 8009f34:	2380      	movs	r3, #128	; 0x80
 8009f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a3f      	ldr	r2, [pc, #252]	; (800a03c <UART_SetConfig+0x6a8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	f040 80f8 	bne.w	800a136 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f46:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009f4a:	2b20      	cmp	r3, #32
 8009f4c:	dc46      	bgt.n	8009fdc <UART_SetConfig+0x648>
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	f2c0 8082 	blt.w	800a058 <UART_SetConfig+0x6c4>
 8009f54:	3b02      	subs	r3, #2
 8009f56:	2b1e      	cmp	r3, #30
 8009f58:	d87e      	bhi.n	800a058 <UART_SetConfig+0x6c4>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <UART_SetConfig+0x5cc>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009fe3 	.word	0x08009fe3
 8009f64:	0800a059 	.word	0x0800a059
 8009f68:	08009feb 	.word	0x08009feb
 8009f6c:	0800a059 	.word	0x0800a059
 8009f70:	0800a059 	.word	0x0800a059
 8009f74:	0800a059 	.word	0x0800a059
 8009f78:	08009ffb 	.word	0x08009ffb
 8009f7c:	0800a059 	.word	0x0800a059
 8009f80:	0800a059 	.word	0x0800a059
 8009f84:	0800a059 	.word	0x0800a059
 8009f88:	0800a059 	.word	0x0800a059
 8009f8c:	0800a059 	.word	0x0800a059
 8009f90:	0800a059 	.word	0x0800a059
 8009f94:	0800a059 	.word	0x0800a059
 8009f98:	0800a00b 	.word	0x0800a00b
 8009f9c:	0800a059 	.word	0x0800a059
 8009fa0:	0800a059 	.word	0x0800a059
 8009fa4:	0800a059 	.word	0x0800a059
 8009fa8:	0800a059 	.word	0x0800a059
 8009fac:	0800a059 	.word	0x0800a059
 8009fb0:	0800a059 	.word	0x0800a059
 8009fb4:	0800a059 	.word	0x0800a059
 8009fb8:	0800a059 	.word	0x0800a059
 8009fbc:	0800a059 	.word	0x0800a059
 8009fc0:	0800a059 	.word	0x0800a059
 8009fc4:	0800a059 	.word	0x0800a059
 8009fc8:	0800a059 	.word	0x0800a059
 8009fcc:	0800a059 	.word	0x0800a059
 8009fd0:	0800a059 	.word	0x0800a059
 8009fd4:	0800a059 	.word	0x0800a059
 8009fd8:	0800a04b 	.word	0x0800a04b
 8009fdc:	2b40      	cmp	r3, #64	; 0x40
 8009fde:	d037      	beq.n	800a050 <UART_SetConfig+0x6bc>
 8009fe0:	e03a      	b.n	800a058 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009fe2:	f7fe f8c5 	bl	8008170 <HAL_RCCEx_GetD3PCLK1Freq>
 8009fe6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009fe8:	e03c      	b.n	800a064 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7fe f8d4 	bl	800819c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009ff8:	e034      	b.n	800a064 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ffa:	f107 0318 	add.w	r3, r7, #24
 8009ffe:	4618      	mov	r0, r3
 800a000:	f7fe fa20 	bl	8008444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a008:	e02c      	b.n	800a064 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a00a:	4b09      	ldr	r3, [pc, #36]	; (800a030 <UART_SetConfig+0x69c>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f003 0320 	and.w	r3, r3, #32
 800a012:	2b00      	cmp	r3, #0
 800a014:	d016      	beq.n	800a044 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a016:	4b06      	ldr	r3, [pc, #24]	; (800a030 <UART_SetConfig+0x69c>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	08db      	lsrs	r3, r3, #3
 800a01c:	f003 0303 	and.w	r3, r3, #3
 800a020:	4a07      	ldr	r2, [pc, #28]	; (800a040 <UART_SetConfig+0x6ac>)
 800a022:	fa22 f303 	lsr.w	r3, r2, r3
 800a026:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a028:	e01c      	b.n	800a064 <UART_SetConfig+0x6d0>
 800a02a:	bf00      	nop
 800a02c:	40011400 	.word	0x40011400
 800a030:	58024400 	.word	0x58024400
 800a034:	40007800 	.word	0x40007800
 800a038:	40007c00 	.word	0x40007c00
 800a03c:	58000c00 	.word	0x58000c00
 800a040:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a044:	4b9d      	ldr	r3, [pc, #628]	; (800a2bc <UART_SetConfig+0x928>)
 800a046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a048:	e00c      	b.n	800a064 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a04a:	4b9d      	ldr	r3, [pc, #628]	; (800a2c0 <UART_SetConfig+0x92c>)
 800a04c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a04e:	e009      	b.n	800a064 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a050:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a054:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a056:	e005      	b.n	800a064 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a058:	2300      	movs	r3, #0
 800a05a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a062:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a066:	2b00      	cmp	r3, #0
 800a068:	f000 81de 	beq.w	800a428 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a06c:	697b      	ldr	r3, [r7, #20]
 800a06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a070:	4a94      	ldr	r2, [pc, #592]	; (800a2c4 <UART_SetConfig+0x930>)
 800a072:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a076:	461a      	mov	r2, r3
 800a078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a07a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a07e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	685a      	ldr	r2, [r3, #4]
 800a084:	4613      	mov	r3, r2
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	4413      	add	r3, r2
 800a08a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d305      	bcc.n	800a09c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	685b      	ldr	r3, [r3, #4]
 800a094:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a098:	429a      	cmp	r2, r3
 800a09a:	d903      	bls.n	800a0a4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a09c:	2301      	movs	r3, #1
 800a09e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a0a2:	e1c1      	b.n	800a428 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a0a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	60bb      	str	r3, [r7, #8]
 800a0aa:	60fa      	str	r2, [r7, #12]
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b0:	4a84      	ldr	r2, [pc, #528]	; (800a2c4 <UART_SetConfig+0x930>)
 800a0b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	603b      	str	r3, [r7, #0]
 800a0bc:	607a      	str	r2, [r7, #4]
 800a0be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a0c6:	f7f6 f95b 	bl	8000380 <__aeabi_uldivmod>
 800a0ca:	4602      	mov	r2, r0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	4619      	mov	r1, r3
 800a0d2:	f04f 0200 	mov.w	r2, #0
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	020b      	lsls	r3, r1, #8
 800a0dc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a0e0:	0202      	lsls	r2, r0, #8
 800a0e2:	6979      	ldr	r1, [r7, #20]
 800a0e4:	6849      	ldr	r1, [r1, #4]
 800a0e6:	0849      	lsrs	r1, r1, #1
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	eb12 0804 	adds.w	r8, r2, r4
 800a0f2:	eb43 0905 	adc.w	r9, r3, r5
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	469a      	mov	sl, r3
 800a0fe:	4693      	mov	fp, r2
 800a100:	4652      	mov	r2, sl
 800a102:	465b      	mov	r3, fp
 800a104:	4640      	mov	r0, r8
 800a106:	4649      	mov	r1, r9
 800a108:	f7f6 f93a 	bl	8000380 <__aeabi_uldivmod>
 800a10c:	4602      	mov	r2, r0
 800a10e:	460b      	mov	r3, r1
 800a110:	4613      	mov	r3, r2
 800a112:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a116:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a11a:	d308      	bcc.n	800a12e <UART_SetConfig+0x79a>
 800a11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a11e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a122:	d204      	bcs.n	800a12e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a12a:	60da      	str	r2, [r3, #12]
 800a12c:	e17c      	b.n	800a428 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a134:	e178      	b.n	800a428 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a136:	697b      	ldr	r3, [r7, #20]
 800a138:	69db      	ldr	r3, [r3, #28]
 800a13a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a13e:	f040 80c5 	bne.w	800a2cc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a142:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a146:	2b20      	cmp	r3, #32
 800a148:	dc48      	bgt.n	800a1dc <UART_SetConfig+0x848>
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	db7b      	blt.n	800a246 <UART_SetConfig+0x8b2>
 800a14e:	2b20      	cmp	r3, #32
 800a150:	d879      	bhi.n	800a246 <UART_SetConfig+0x8b2>
 800a152:	a201      	add	r2, pc, #4	; (adr r2, 800a158 <UART_SetConfig+0x7c4>)
 800a154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a158:	0800a1e3 	.word	0x0800a1e3
 800a15c:	0800a1eb 	.word	0x0800a1eb
 800a160:	0800a247 	.word	0x0800a247
 800a164:	0800a247 	.word	0x0800a247
 800a168:	0800a1f3 	.word	0x0800a1f3
 800a16c:	0800a247 	.word	0x0800a247
 800a170:	0800a247 	.word	0x0800a247
 800a174:	0800a247 	.word	0x0800a247
 800a178:	0800a203 	.word	0x0800a203
 800a17c:	0800a247 	.word	0x0800a247
 800a180:	0800a247 	.word	0x0800a247
 800a184:	0800a247 	.word	0x0800a247
 800a188:	0800a247 	.word	0x0800a247
 800a18c:	0800a247 	.word	0x0800a247
 800a190:	0800a247 	.word	0x0800a247
 800a194:	0800a247 	.word	0x0800a247
 800a198:	0800a213 	.word	0x0800a213
 800a19c:	0800a247 	.word	0x0800a247
 800a1a0:	0800a247 	.word	0x0800a247
 800a1a4:	0800a247 	.word	0x0800a247
 800a1a8:	0800a247 	.word	0x0800a247
 800a1ac:	0800a247 	.word	0x0800a247
 800a1b0:	0800a247 	.word	0x0800a247
 800a1b4:	0800a247 	.word	0x0800a247
 800a1b8:	0800a247 	.word	0x0800a247
 800a1bc:	0800a247 	.word	0x0800a247
 800a1c0:	0800a247 	.word	0x0800a247
 800a1c4:	0800a247 	.word	0x0800a247
 800a1c8:	0800a247 	.word	0x0800a247
 800a1cc:	0800a247 	.word	0x0800a247
 800a1d0:	0800a247 	.word	0x0800a247
 800a1d4:	0800a247 	.word	0x0800a247
 800a1d8:	0800a239 	.word	0x0800a239
 800a1dc:	2b40      	cmp	r3, #64	; 0x40
 800a1de:	d02e      	beq.n	800a23e <UART_SetConfig+0x8aa>
 800a1e0:	e031      	b.n	800a246 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1e2:	f7fd f853 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 800a1e6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1e8:	e033      	b.n	800a252 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a1ea:	f7fd f865 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 800a1ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a1f0:	e02f      	b.n	800a252 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7fd ffd0 	bl	800819c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a1fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a200:	e027      	b.n	800a252 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a202:	f107 0318 	add.w	r3, r7, #24
 800a206:	4618      	mov	r0, r3
 800a208:	f7fe f91c 	bl	8008444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a210:	e01f      	b.n	800a252 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a212:	4b2d      	ldr	r3, [pc, #180]	; (800a2c8 <UART_SetConfig+0x934>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0320 	and.w	r3, r3, #32
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d009      	beq.n	800a232 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a21e:	4b2a      	ldr	r3, [pc, #168]	; (800a2c8 <UART_SetConfig+0x934>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	08db      	lsrs	r3, r3, #3
 800a224:	f003 0303 	and.w	r3, r3, #3
 800a228:	4a24      	ldr	r2, [pc, #144]	; (800a2bc <UART_SetConfig+0x928>)
 800a22a:	fa22 f303 	lsr.w	r3, r2, r3
 800a22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a230:	e00f      	b.n	800a252 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a232:	4b22      	ldr	r3, [pc, #136]	; (800a2bc <UART_SetConfig+0x928>)
 800a234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a236:	e00c      	b.n	800a252 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a238:	4b21      	ldr	r3, [pc, #132]	; (800a2c0 <UART_SetConfig+0x92c>)
 800a23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a23c:	e009      	b.n	800a252 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a23e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a244:	e005      	b.n	800a252 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a246:	2300      	movs	r3, #0
 800a248:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a24a:	2301      	movs	r3, #1
 800a24c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a254:	2b00      	cmp	r3, #0
 800a256:	f000 80e7 	beq.w	800a428 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a25e:	4a19      	ldr	r2, [pc, #100]	; (800a2c4 <UART_SetConfig+0x930>)
 800a260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a264:	461a      	mov	r2, r3
 800a266:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a268:	fbb3 f3f2 	udiv	r3, r3, r2
 800a26c:	005a      	lsls	r2, r3, #1
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	085b      	lsrs	r3, r3, #1
 800a274:	441a      	add	r2, r3
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a27e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a282:	2b0f      	cmp	r3, #15
 800a284:	d916      	bls.n	800a2b4 <UART_SetConfig+0x920>
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a28c:	d212      	bcs.n	800a2b4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a290:	b29b      	uxth	r3, r3
 800a292:	f023 030f 	bic.w	r3, r3, #15
 800a296:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a29a:	085b      	lsrs	r3, r3, #1
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	f003 0307 	and.w	r3, r3, #7
 800a2a2:	b29a      	uxth	r2, r3
 800a2a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a2b0:	60da      	str	r2, [r3, #12]
 800a2b2:	e0b9      	b.n	800a428 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a2ba:	e0b5      	b.n	800a428 <UART_SetConfig+0xa94>
 800a2bc:	03d09000 	.word	0x03d09000
 800a2c0:	003d0900 	.word	0x003d0900
 800a2c4:	0800d10c 	.word	0x0800d10c
 800a2c8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a2d0:	2b20      	cmp	r3, #32
 800a2d2:	dc49      	bgt.n	800a368 <UART_SetConfig+0x9d4>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	db7c      	blt.n	800a3d2 <UART_SetConfig+0xa3e>
 800a2d8:	2b20      	cmp	r3, #32
 800a2da:	d87a      	bhi.n	800a3d2 <UART_SetConfig+0xa3e>
 800a2dc:	a201      	add	r2, pc, #4	; (adr r2, 800a2e4 <UART_SetConfig+0x950>)
 800a2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2e2:	bf00      	nop
 800a2e4:	0800a36f 	.word	0x0800a36f
 800a2e8:	0800a377 	.word	0x0800a377
 800a2ec:	0800a3d3 	.word	0x0800a3d3
 800a2f0:	0800a3d3 	.word	0x0800a3d3
 800a2f4:	0800a37f 	.word	0x0800a37f
 800a2f8:	0800a3d3 	.word	0x0800a3d3
 800a2fc:	0800a3d3 	.word	0x0800a3d3
 800a300:	0800a3d3 	.word	0x0800a3d3
 800a304:	0800a38f 	.word	0x0800a38f
 800a308:	0800a3d3 	.word	0x0800a3d3
 800a30c:	0800a3d3 	.word	0x0800a3d3
 800a310:	0800a3d3 	.word	0x0800a3d3
 800a314:	0800a3d3 	.word	0x0800a3d3
 800a318:	0800a3d3 	.word	0x0800a3d3
 800a31c:	0800a3d3 	.word	0x0800a3d3
 800a320:	0800a3d3 	.word	0x0800a3d3
 800a324:	0800a39f 	.word	0x0800a39f
 800a328:	0800a3d3 	.word	0x0800a3d3
 800a32c:	0800a3d3 	.word	0x0800a3d3
 800a330:	0800a3d3 	.word	0x0800a3d3
 800a334:	0800a3d3 	.word	0x0800a3d3
 800a338:	0800a3d3 	.word	0x0800a3d3
 800a33c:	0800a3d3 	.word	0x0800a3d3
 800a340:	0800a3d3 	.word	0x0800a3d3
 800a344:	0800a3d3 	.word	0x0800a3d3
 800a348:	0800a3d3 	.word	0x0800a3d3
 800a34c:	0800a3d3 	.word	0x0800a3d3
 800a350:	0800a3d3 	.word	0x0800a3d3
 800a354:	0800a3d3 	.word	0x0800a3d3
 800a358:	0800a3d3 	.word	0x0800a3d3
 800a35c:	0800a3d3 	.word	0x0800a3d3
 800a360:	0800a3d3 	.word	0x0800a3d3
 800a364:	0800a3c5 	.word	0x0800a3c5
 800a368:	2b40      	cmp	r3, #64	; 0x40
 800a36a:	d02e      	beq.n	800a3ca <UART_SetConfig+0xa36>
 800a36c:	e031      	b.n	800a3d2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a36e:	f7fc ff8d 	bl	800728c <HAL_RCC_GetPCLK1Freq>
 800a372:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a374:	e033      	b.n	800a3de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a376:	f7fc ff9f 	bl	80072b8 <HAL_RCC_GetPCLK2Freq>
 800a37a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a37c:	e02f      	b.n	800a3de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a37e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a382:	4618      	mov	r0, r3
 800a384:	f7fd ff0a 	bl	800819c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38c:	e027      	b.n	800a3de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a38e:	f107 0318 	add.w	r3, r7, #24
 800a392:	4618      	mov	r0, r3
 800a394:	f7fe f856 	bl	8008444 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a39c:	e01f      	b.n	800a3de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a39e:	4b2d      	ldr	r3, [pc, #180]	; (800a454 <UART_SetConfig+0xac0>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f003 0320 	and.w	r3, r3, #32
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d009      	beq.n	800a3be <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3aa:	4b2a      	ldr	r3, [pc, #168]	; (800a454 <UART_SetConfig+0xac0>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	08db      	lsrs	r3, r3, #3
 800a3b0:	f003 0303 	and.w	r3, r3, #3
 800a3b4:	4a28      	ldr	r2, [pc, #160]	; (800a458 <UART_SetConfig+0xac4>)
 800a3b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a3bc:	e00f      	b.n	800a3de <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a3be:	4b26      	ldr	r3, [pc, #152]	; (800a458 <UART_SetConfig+0xac4>)
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c2:	e00c      	b.n	800a3de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a3c4:	4b25      	ldr	r3, [pc, #148]	; (800a45c <UART_SetConfig+0xac8>)
 800a3c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3c8:	e009      	b.n	800a3de <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a3ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a3ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a3d0:	e005      	b.n	800a3de <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a3dc:	bf00      	nop
    }

    if (pclk != 0U)
 800a3de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d021      	beq.n	800a428 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3e4:	697b      	ldr	r3, [r7, #20]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	4a1d      	ldr	r2, [pc, #116]	; (800a460 <UART_SetConfig+0xacc>)
 800a3ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f2:	fbb3 f2f2 	udiv	r2, r3, r2
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	085b      	lsrs	r3, r3, #1
 800a3fc:	441a      	add	r2, r3
 800a3fe:	697b      	ldr	r3, [r7, #20]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	fbb2 f3f3 	udiv	r3, r2, r3
 800a406:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	2b0f      	cmp	r3, #15
 800a40c:	d909      	bls.n	800a422 <UART_SetConfig+0xa8e>
 800a40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a414:	d205      	bcs.n	800a422 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	b29a      	uxth	r2, r3
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	60da      	str	r2, [r3, #12]
 800a420:	e002      	b.n	800a428 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	2201      	movs	r2, #1
 800a42c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	2201      	movs	r2, #1
 800a434:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	2200      	movs	r2, #0
 800a43c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	2200      	movs	r2, #0
 800a442:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a444:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a448:	4618      	mov	r0, r3
 800a44a:	3748      	adds	r7, #72	; 0x48
 800a44c:	46bd      	mov	sp, r7
 800a44e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a452:	bf00      	nop
 800a454:	58024400 	.word	0x58024400
 800a458:	03d09000 	.word	0x03d09000
 800a45c:	003d0900 	.word	0x003d0900
 800a460:	0800d10c 	.word	0x0800d10c

0800a464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d00a      	beq.n	800a48e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a492:	f003 0302 	and.w	r3, r3, #2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d00a      	beq.n	800a4b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	430a      	orrs	r2, r1
 800a4ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b4:	f003 0304 	and.w	r3, r3, #4
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00a      	beq.n	800a4d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4d6:	f003 0308 	and.w	r3, r3, #8
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d00a      	beq.n	800a4f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	430a      	orrs	r2, r1
 800a4f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f8:	f003 0310 	and.w	r3, r3, #16
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00a      	beq.n	800a516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	430a      	orrs	r2, r1
 800a514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51a:	f003 0320 	and.w	r3, r3, #32
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d00a      	beq.n	800a538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	689b      	ldr	r3, [r3, #8]
 800a528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	430a      	orrs	r2, r1
 800a536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a53c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01a      	beq.n	800a57a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	430a      	orrs	r2, r1
 800a558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a55e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a562:	d10a      	bne.n	800a57a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a57e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	430a      	orrs	r2, r1
 800a59a:	605a      	str	r2, [r3, #4]
  }
}
 800a59c:	bf00      	nop
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af02      	add	r7, sp, #8
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a5b8:	f7f8 fb54 	bl	8002c64 <HAL_GetTick>
 800a5bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 0308 	and.w	r3, r3, #8
 800a5c8:	2b08      	cmp	r3, #8
 800a5ca:	d10e      	bne.n	800a5ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5d0:	9300      	str	r3, [sp, #0]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 f82f 	bl	800a63e <UART_WaitOnFlagUntilTimeout>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d001      	beq.n	800a5ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	e025      	b.n	800a636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0304 	and.w	r3, r3, #4
 800a5f4:	2b04      	cmp	r3, #4
 800a5f6:	d10e      	bne.n	800a616 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5fc:	9300      	str	r3, [sp, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2200      	movs	r2, #0
 800a602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 f819 	bl	800a63e <UART_WaitOnFlagUntilTimeout>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a612:	2303      	movs	r3, #3
 800a614:	e00f      	b.n	800a636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2220      	movs	r2, #32
 800a61a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2220      	movs	r2, #32
 800a622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	2200      	movs	r2, #0
 800a62a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	2200      	movs	r2, #0
 800a630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a634:	2300      	movs	r3, #0
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}

0800a63e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a63e:	b580      	push	{r7, lr}
 800a640:	b09c      	sub	sp, #112	; 0x70
 800a642:	af00      	add	r7, sp, #0
 800a644:	60f8      	str	r0, [r7, #12]
 800a646:	60b9      	str	r1, [r7, #8]
 800a648:	603b      	str	r3, [r7, #0]
 800a64a:	4613      	mov	r3, r2
 800a64c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a64e:	e0a9      	b.n	800a7a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a652:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a656:	f000 80a5 	beq.w	800a7a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a65a:	f7f8 fb03 	bl	8002c64 <HAL_GetTick>
 800a65e:	4602      	mov	r2, r0
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	1ad3      	subs	r3, r2, r3
 800a664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a666:	429a      	cmp	r2, r3
 800a668:	d302      	bcc.n	800a670 <UART_WaitOnFlagUntilTimeout+0x32>
 800a66a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d140      	bne.n	800a6f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a678:	e853 3f00 	ldrex	r3, [r3]
 800a67c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a67e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a684:	667b      	str	r3, [r7, #100]	; 0x64
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	461a      	mov	r2, r3
 800a68c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a68e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a690:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a696:	e841 2300 	strex	r3, r2, [r1]
 800a69a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a69c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1e6      	bne.n	800a670 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ac:	e853 3f00 	ldrex	r3, [r3]
 800a6b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6b4:	f023 0301 	bic.w	r3, r3, #1
 800a6b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a6c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a6c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a6c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a6ca:	e841 2300 	strex	r3, r2, [r1]
 800a6ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a6d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d1e5      	bne.n	800a6a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2220      	movs	r2, #32
 800a6da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2220      	movs	r2, #32
 800a6e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a6ee:	2303      	movs	r3, #3
 800a6f0:	e069      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f003 0304 	and.w	r3, r3, #4
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d051      	beq.n	800a7a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	69db      	ldr	r3, [r3, #28]
 800a706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a70e:	d149      	bne.n	800a7a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a718:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a722:	e853 3f00 	ldrex	r3, [r3]
 800a726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a72e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	461a      	mov	r2, r3
 800a736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a738:	637b      	str	r3, [r7, #52]	; 0x34
 800a73a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a740:	e841 2300 	strex	r3, r2, [r1]
 800a744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1e6      	bne.n	800a71a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	3308      	adds	r3, #8
 800a752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	e853 3f00 	ldrex	r3, [r3]
 800a75a:	613b      	str	r3, [r7, #16]
   return(result);
 800a75c:	693b      	ldr	r3, [r7, #16]
 800a75e:	f023 0301 	bic.w	r3, r3, #1
 800a762:	66bb      	str	r3, [r7, #104]	; 0x68
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3308      	adds	r3, #8
 800a76a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a76c:	623a      	str	r2, [r7, #32]
 800a76e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a770:	69f9      	ldr	r1, [r7, #28]
 800a772:	6a3a      	ldr	r2, [r7, #32]
 800a774:	e841 2300 	strex	r3, r2, [r1]
 800a778:	61bb      	str	r3, [r7, #24]
   return(result);
 800a77a:	69bb      	ldr	r3, [r7, #24]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d1e5      	bne.n	800a74c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	2220      	movs	r2, #32
 800a784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2220      	movs	r2, #32
 800a78c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2220      	movs	r2, #32
 800a794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a7a0:	2303      	movs	r3, #3
 800a7a2:	e010      	b.n	800a7c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	69da      	ldr	r2, [r3, #28]
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	4013      	ands	r3, r2
 800a7ae:	68ba      	ldr	r2, [r7, #8]
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	bf0c      	ite	eq
 800a7b4:	2301      	moveq	r3, #1
 800a7b6:	2300      	movne	r3, #0
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	79fb      	ldrb	r3, [r7, #7]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	f43f af46 	beq.w	800a650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3770      	adds	r7, #112	; 0x70
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}
	...

0800a7d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b095      	sub	sp, #84	; 0x54
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7e0:	e853 3f00 	ldrex	r3, [r3]
 800a7e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f6:	643b      	str	r3, [r7, #64]	; 0x40
 800a7f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a7fe:	e841 2300 	strex	r3, r2, [r1]
 800a802:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a806:	2b00      	cmp	r3, #0
 800a808:	d1e6      	bne.n	800a7d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a812:	6a3b      	ldr	r3, [r7, #32]
 800a814:	e853 3f00 	ldrex	r3, [r3]
 800a818:	61fb      	str	r3, [r7, #28]
   return(result);
 800a81a:	69fa      	ldr	r2, [r7, #28]
 800a81c:	4b1e      	ldr	r3, [pc, #120]	; (800a898 <UART_EndRxTransfer+0xc8>)
 800a81e:	4013      	ands	r3, r2
 800a820:	64bb      	str	r3, [r7, #72]	; 0x48
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	3308      	adds	r3, #8
 800a828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a82a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a82c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a82e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a832:	e841 2300 	strex	r3, r2, [r1]
 800a836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d1e5      	bne.n	800a80a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a842:	2b01      	cmp	r3, #1
 800a844:	d118      	bne.n	800a878 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	e853 3f00 	ldrex	r3, [r3]
 800a852:	60bb      	str	r3, [r7, #8]
   return(result);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	f023 0310 	bic.w	r3, r3, #16
 800a85a:	647b      	str	r3, [r7, #68]	; 0x44
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	461a      	mov	r2, r3
 800a862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a864:	61bb      	str	r3, [r7, #24]
 800a866:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a868:	6979      	ldr	r1, [r7, #20]
 800a86a:	69ba      	ldr	r2, [r7, #24]
 800a86c:	e841 2300 	strex	r3, r2, [r1]
 800a870:	613b      	str	r3, [r7, #16]
   return(result);
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d1e6      	bne.n	800a846 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2220      	movs	r2, #32
 800a87c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2200      	movs	r2, #0
 800a884:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a88c:	bf00      	nop
 800a88e:	3754      	adds	r7, #84	; 0x54
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	effffffe 	.word	0xeffffffe

0800a89c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff f854 	bl	8009968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8c0:	bf00      	nop
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	e853 3f00 	ldrex	r3, [r3]
 800a8dc:	60bb      	str	r3, [r7, #8]
   return(result);
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8e4:	61fb      	str	r3, [r7, #28]
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	69fb      	ldr	r3, [r7, #28]
 800a8ee:	61bb      	str	r3, [r7, #24]
 800a8f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f2:	6979      	ldr	r1, [r7, #20]
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1e6      	bne.n	800a8d0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2220      	movs	r2, #32
 800a906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f7ff f81f 	bl	8009954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a916:	bf00      	nop
 800a918:	3720      	adds	r7, #32
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}

0800a91e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a94e:	bf00      	nop
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr

0800a95a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a95a:	b480      	push	{r7}
 800a95c:	b085      	sub	sp, #20
 800a95e:	af00      	add	r7, sp, #0
 800a960:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a968:	2b01      	cmp	r3, #1
 800a96a:	d101      	bne.n	800a970 <HAL_UARTEx_DisableFifoMode+0x16>
 800a96c:	2302      	movs	r3, #2
 800a96e:	e027      	b.n	800a9c0 <HAL_UARTEx_DisableFifoMode+0x66>
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	2201      	movs	r2, #1
 800a974:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2224      	movs	r2, #36	; 0x24
 800a97c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	681a      	ldr	r2, [r3, #0]
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f022 0201 	bic.w	r2, r2, #1
 800a996:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a99e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2220      	movs	r2, #32
 800a9b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9be:	2300      	movs	r3, #0
}
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b084      	sub	sp, #16
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d101      	bne.n	800a9e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a9e0:	2302      	movs	r3, #2
 800a9e2:	e02d      	b.n	800aa40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2224      	movs	r2, #36	; 0x24
 800a9f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f022 0201 	bic.w	r2, r2, #1
 800aa0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	683a      	ldr	r2, [r7, #0]
 800aa1c:	430a      	orrs	r2, r1
 800aa1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f84f 	bl	800aac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	68fa      	ldr	r2, [r7, #12]
 800aa2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2220      	movs	r2, #32
 800aa32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
 800aa50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d101      	bne.n	800aa60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa5c:	2302      	movs	r3, #2
 800aa5e:	e02d      	b.n	800aabc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2224      	movs	r2, #36	; 0x24
 800aa6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	681a      	ldr	r2, [r3, #0]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f022 0201 	bic.w	r2, r2, #1
 800aa86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f000 f811 	bl	800aac4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2220      	movs	r2, #32
 800aaae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2200      	movs	r2, #0
 800aab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aaba:	2300      	movs	r3, #0
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}

0800aac4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aac4:	b480      	push	{r7}
 800aac6:	b085      	sub	sp, #20
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d108      	bne.n	800aae6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2201      	movs	r2, #1
 800aad8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2201      	movs	r2, #1
 800aae0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aae4:	e031      	b.n	800ab4a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aae6:	2310      	movs	r3, #16
 800aae8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aaea:	2310      	movs	r3, #16
 800aaec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	0e5b      	lsrs	r3, r3, #25
 800aaf6:	b2db      	uxtb	r3, r3
 800aaf8:	f003 0307 	and.w	r3, r3, #7
 800aafc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	689b      	ldr	r3, [r3, #8]
 800ab04:	0f5b      	lsrs	r3, r3, #29
 800ab06:	b2db      	uxtb	r3, r3
 800ab08:	f003 0307 	and.w	r3, r3, #7
 800ab0c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab0e:	7bbb      	ldrb	r3, [r7, #14]
 800ab10:	7b3a      	ldrb	r2, [r7, #12]
 800ab12:	4911      	ldr	r1, [pc, #68]	; (800ab58 <UARTEx_SetNbDataToProcess+0x94>)
 800ab14:	5c8a      	ldrb	r2, [r1, r2]
 800ab16:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ab1a:	7b3a      	ldrb	r2, [r7, #12]
 800ab1c:	490f      	ldr	r1, [pc, #60]	; (800ab5c <UARTEx_SetNbDataToProcess+0x98>)
 800ab1e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ab20:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab2c:	7bfb      	ldrb	r3, [r7, #15]
 800ab2e:	7b7a      	ldrb	r2, [r7, #13]
 800ab30:	4909      	ldr	r1, [pc, #36]	; (800ab58 <UARTEx_SetNbDataToProcess+0x94>)
 800ab32:	5c8a      	ldrb	r2, [r1, r2]
 800ab34:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ab38:	7b7a      	ldrb	r2, [r7, #13]
 800ab3a:	4908      	ldr	r1, [pc, #32]	; (800ab5c <UARTEx_SetNbDataToProcess+0x98>)
 800ab3c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ab3e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ab4a:	bf00      	nop
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr
 800ab56:	bf00      	nop
 800ab58:	0800d124 	.word	0x0800d124
 800ab5c:	0800d12c 	.word	0x0800d12c

0800ab60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab60:	b084      	sub	sp, #16
 800ab62:	b580      	push	{r7, lr}
 800ab64:	b084      	sub	sp, #16
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
 800ab6a:	f107 001c 	add.w	r0, r7, #28
 800ab6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab74:	2b01      	cmp	r3, #1
 800ab76:	d120      	bne.n	800abba <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	68da      	ldr	r2, [r3, #12]
 800ab88:	4b2a      	ldr	r3, [pc, #168]	; (800ac34 <USB_CoreInit+0xd4>)
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	687a      	ldr	r2, [r7, #4]
 800ab8e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ab9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d105      	bne.n	800abae <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68db      	ldr	r3, [r3, #12]
 800aba6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 faac 	bl	800b10c <USB_CoreReset>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]
 800abb8:	e01a      	b.n	800abf0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	68db      	ldr	r3, [r3, #12]
 800abbe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800abc6:	6878      	ldr	r0, [r7, #4]
 800abc8:	f000 faa0 	bl	800b10c <USB_CoreReset>
 800abcc:	4603      	mov	r3, r0
 800abce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800abd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d106      	bne.n	800abe4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abda:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	639a      	str	r2, [r3, #56]	; 0x38
 800abe2:	e005      	b.n	800abf0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800abf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d116      	bne.n	800ac24 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abfa:	b29a      	uxth	r2, r3
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac04:	4b0c      	ldr	r3, [pc, #48]	; (800ac38 <USB_CoreInit+0xd8>)
 800ac06:	4313      	orrs	r3, r2
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	689b      	ldr	r3, [r3, #8]
 800ac10:	f043 0206 	orr.w	r2, r3, #6
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f043 0220 	orr.w	r2, r3, #32
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ac30:	b004      	add	sp, #16
 800ac32:	4770      	bx	lr
 800ac34:	ffbdffbf 	.word	0xffbdffbf
 800ac38:	03ee0000 	.word	0x03ee0000

0800ac3c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	f023 0201 	bic.w	r2, r3, #1
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	370c      	adds	r7, #12
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b084      	sub	sp, #16
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	460b      	mov	r3, r1
 800ac68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	68db      	ldr	r3, [r3, #12]
 800ac72:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac7a:	78fb      	ldrb	r3, [r7, #3]
 800ac7c:	2b01      	cmp	r3, #1
 800ac7e:	d115      	bne.n	800acac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	68db      	ldr	r3, [r3, #12]
 800ac84:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	f7f7 fff5 	bl	8002c7c <HAL_Delay>
      ms++;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	3301      	adds	r3, #1
 800ac96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fa29 	bl	800b0f0 <USB_GetMode>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b01      	cmp	r3, #1
 800aca2:	d01e      	beq.n	800ace2 <USB_SetCurrentMode+0x84>
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2b31      	cmp	r3, #49	; 0x31
 800aca8:	d9f0      	bls.n	800ac8c <USB_SetCurrentMode+0x2e>
 800acaa:	e01a      	b.n	800ace2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d115      	bne.n	800acde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	68db      	ldr	r3, [r3, #12]
 800acb6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800acbe:	2001      	movs	r0, #1
 800acc0:	f7f7 ffdc 	bl	8002c7c <HAL_Delay>
      ms++;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800acca:	6878      	ldr	r0, [r7, #4]
 800accc:	f000 fa10 	bl	800b0f0 <USB_GetMode>
 800acd0:	4603      	mov	r3, r0
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d005      	beq.n	800ace2 <USB_SetCurrentMode+0x84>
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b31      	cmp	r3, #49	; 0x31
 800acda:	d9f0      	bls.n	800acbe <USB_SetCurrentMode+0x60>
 800acdc:	e001      	b.n	800ace2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800acde:	2301      	movs	r3, #1
 800ace0:	e005      	b.n	800acee <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b32      	cmp	r3, #50	; 0x32
 800ace6:	d101      	bne.n	800acec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	e000      	b.n	800acee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800acec:	2300      	movs	r3, #0
}
 800acee:	4618      	mov	r0, r3
 800acf0:	3710      	adds	r7, #16
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acf8:	b084      	sub	sp, #16
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b086      	sub	sp, #24
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	6078      	str	r0, [r7, #4]
 800ad02:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ad06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ad12:	2300      	movs	r3, #0
 800ad14:	613b      	str	r3, [r7, #16]
 800ad16:	e009      	b.n	800ad2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	693b      	ldr	r3, [r7, #16]
 800ad1c:	3340      	adds	r3, #64	; 0x40
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ad26:	693b      	ldr	r3, [r7, #16]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	613b      	str	r3, [r7, #16]
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	2b0e      	cmp	r3, #14
 800ad30:	d9f2      	bls.n	800ad18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ad32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d11c      	bne.n	800ad72 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad46:	f043 0302 	orr.w	r3, r3, #2
 800ad4a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad50:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	601a      	str	r2, [r3, #0]
 800ad70:	e005      	b.n	800ad7e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad84:	461a      	mov	r2, r3
 800ad86:	2300      	movs	r3, #0
 800ad88:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad90:	4619      	mov	r1, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad98:	461a      	mov	r2, r3
 800ad9a:	680b      	ldr	r3, [r1, #0]
 800ad9c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ada0:	2b01      	cmp	r3, #1
 800ada2:	d10c      	bne.n	800adbe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ada4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d104      	bne.n	800adb4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800adaa:	2100      	movs	r1, #0
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 f965 	bl	800b07c <USB_SetDevSpeed>
 800adb2:	e008      	b.n	800adc6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800adb4:	2101      	movs	r1, #1
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f960 	bl	800b07c <USB_SetDevSpeed>
 800adbc:	e003      	b.n	800adc6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800adbe:	2103      	movs	r1, #3
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 f95b 	bl	800b07c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800adc6:	2110      	movs	r1, #16
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 f8f3 	bl	800afb4 <USB_FlushTxFifo>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	d001      	beq.n	800add8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f91f 	bl	800b01c <USB_FlushRxFifo>
 800adde:	4603      	mov	r3, r0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d001      	beq.n	800ade8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ade4:	2301      	movs	r3, #1
 800ade6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adee:	461a      	mov	r2, r3
 800adf0:	2300      	movs	r3, #0
 800adf2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adfa:	461a      	mov	r2, r3
 800adfc:	2300      	movs	r3, #0
 800adfe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae06:	461a      	mov	r2, r3
 800ae08:	2300      	movs	r3, #0
 800ae0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	613b      	str	r3, [r7, #16]
 800ae10:	e043      	b.n	800ae9a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae28:	d118      	bne.n	800ae5c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ae2a:	693b      	ldr	r3, [r7, #16]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d10a      	bne.n	800ae46 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	015a      	lsls	r2, r3, #5
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	4413      	add	r3, r2
 800ae38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3c:	461a      	mov	r2, r3
 800ae3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	e013      	b.n	800ae6e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ae46:	693b      	ldr	r3, [r7, #16]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae52:	461a      	mov	r2, r3
 800ae54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	e008      	b.n	800ae6e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	2300      	movs	r3, #0
 800ae7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	015a      	lsls	r2, r3, #5
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	4413      	add	r3, r2
 800ae88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8c:	461a      	mov	r2, r3
 800ae8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	3301      	adds	r3, #1
 800ae98:	613b      	str	r3, [r7, #16]
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	693a      	ldr	r2, [r7, #16]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d3b7      	bcc.n	800ae12 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aea2:	2300      	movs	r3, #0
 800aea4:	613b      	str	r3, [r7, #16]
 800aea6:	e043      	b.n	800af30 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	015a      	lsls	r2, r3, #5
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	4413      	add	r3, r2
 800aeb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aebe:	d118      	bne.n	800aef2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d10a      	bne.n	800aedc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed2:	461a      	mov	r2, r3
 800aed4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aed8:	6013      	str	r3, [r2, #0]
 800aeda:	e013      	b.n	800af04 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aedc:	693b      	ldr	r3, [r7, #16]
 800aede:	015a      	lsls	r2, r3, #5
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	4413      	add	r3, r2
 800aee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aee8:	461a      	mov	r2, r3
 800aeea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	e008      	b.n	800af04 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aef2:	693b      	ldr	r3, [r7, #16]
 800aef4:	015a      	lsls	r2, r3, #5
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	4413      	add	r3, r2
 800aefa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aefe:	461a      	mov	r2, r3
 800af00:	2300      	movs	r3, #0
 800af02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	015a      	lsls	r2, r3, #5
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	4413      	add	r3, r2
 800af0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af10:	461a      	mov	r2, r3
 800af12:	2300      	movs	r3, #0
 800af14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	015a      	lsls	r2, r3, #5
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	4413      	add	r3, r2
 800af1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af22:	461a      	mov	r2, r3
 800af24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800af28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800af2a:	693b      	ldr	r3, [r7, #16]
 800af2c:	3301      	adds	r3, #1
 800af2e:	613b      	str	r3, [r7, #16]
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	693a      	ldr	r2, [r7, #16]
 800af34:	429a      	cmp	r2, r3
 800af36:	d3b7      	bcc.n	800aea8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af3e:	691b      	ldr	r3, [r3, #16]
 800af40:	68fa      	ldr	r2, [r7, #12]
 800af42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800af46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d105      	bne.n	800af6c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	f043 0210 	orr.w	r2, r3, #16
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	699a      	ldr	r2, [r3, #24]
 800af70:	4b0e      	ldr	r3, [pc, #56]	; (800afac <USB_DevInit+0x2b4>)
 800af72:	4313      	orrs	r3, r2
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d005      	beq.n	800af8a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	699b      	ldr	r3, [r3, #24]
 800af82:	f043 0208 	orr.w	r2, r3, #8
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d105      	bne.n	800af9c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	699a      	ldr	r2, [r3, #24]
 800af94:	4b06      	ldr	r3, [pc, #24]	; (800afb0 <USB_DevInit+0x2b8>)
 800af96:	4313      	orrs	r3, r2
 800af98:	687a      	ldr	r2, [r7, #4]
 800af9a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af9e:	4618      	mov	r0, r3
 800afa0:	3718      	adds	r7, #24
 800afa2:	46bd      	mov	sp, r7
 800afa4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afa8:	b004      	add	sp, #16
 800afaa:	4770      	bx	lr
 800afac:	803c3800 	.word	0x803c3800
 800afb0:	40000004 	.word	0x40000004

0800afb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b085      	sub	sp, #20
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
 800afbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800afbe:	2300      	movs	r3, #0
 800afc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	3301      	adds	r3, #1
 800afc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4a13      	ldr	r2, [pc, #76]	; (800b018 <USB_FlushTxFifo+0x64>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d901      	bls.n	800afd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800afd0:	2303      	movs	r3, #3
 800afd2:	e01b      	b.n	800b00c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	691b      	ldr	r3, [r3, #16]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	daf2      	bge.n	800afc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800afdc:	2300      	movs	r3, #0
 800afde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	019b      	lsls	r3, r3, #6
 800afe4:	f043 0220 	orr.w	r2, r3, #32
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3301      	adds	r3, #1
 800aff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4a08      	ldr	r2, [pc, #32]	; (800b018 <USB_FlushTxFifo+0x64>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d901      	bls.n	800affe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e006      	b.n	800b00c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	f003 0320 	and.w	r3, r3, #32
 800b006:	2b20      	cmp	r3, #32
 800b008:	d0f0      	beq.n	800afec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	00030d40 	.word	0x00030d40

0800b01c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b024:	2300      	movs	r3, #0
 800b026:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3301      	adds	r3, #1
 800b02c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	4a11      	ldr	r2, [pc, #68]	; (800b078 <USB_FlushRxFifo+0x5c>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d901      	bls.n	800b03a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b036:	2303      	movs	r3, #3
 800b038:	e018      	b.n	800b06c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	691b      	ldr	r3, [r3, #16]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	daf2      	bge.n	800b028 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b042:	2300      	movs	r3, #0
 800b044:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2210      	movs	r2, #16
 800b04a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	3301      	adds	r3, #1
 800b050:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	4a08      	ldr	r2, [pc, #32]	; (800b078 <USB_FlushRxFifo+0x5c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d901      	bls.n	800b05e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b05a:	2303      	movs	r3, #3
 800b05c:	e006      	b.n	800b06c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	691b      	ldr	r3, [r3, #16]
 800b062:	f003 0310 	and.w	r3, r3, #16
 800b066:	2b10      	cmp	r3, #16
 800b068:	d0f0      	beq.n	800b04c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3714      	adds	r7, #20
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	00030d40 	.word	0x00030d40

0800b07c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b07c:	b480      	push	{r7}
 800b07e:	b085      	sub	sp, #20
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
 800b084:	460b      	mov	r3, r1
 800b086:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b092:	681a      	ldr	r2, [r3, #0]
 800b094:	78fb      	ldrb	r3, [r7, #3]
 800b096:	68f9      	ldr	r1, [r7, #12]
 800b098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b09c:	4313      	orrs	r3, r2
 800b09e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b0a0:	2300      	movs	r3, #0
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3714      	adds	r7, #20
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b0c8:	f023 0303 	bic.w	r3, r3, #3
 800b0cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b0dc:	f043 0302 	orr.w	r3, r3, #2
 800b0e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b0e2:	2300      	movs	r3, #0
}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	3714      	adds	r7, #20
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr

0800b0f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b0f0:	b480      	push	{r7}
 800b0f2:	b083      	sub	sp, #12
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	695b      	ldr	r3, [r3, #20]
 800b0fc:	f003 0301 	and.w	r3, r3, #1
}
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b085      	sub	sp, #20
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b114:	2300      	movs	r3, #0
 800b116:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	3301      	adds	r3, #1
 800b11c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4a13      	ldr	r2, [pc, #76]	; (800b170 <USB_CoreReset+0x64>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d901      	bls.n	800b12a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e01b      	b.n	800b162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	691b      	ldr	r3, [r3, #16]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	daf2      	bge.n	800b118 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b132:	2300      	movs	r3, #0
 800b134:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	691b      	ldr	r3, [r3, #16]
 800b13a:	f043 0201 	orr.w	r2, r3, #1
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	3301      	adds	r3, #1
 800b146:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	4a09      	ldr	r2, [pc, #36]	; (800b170 <USB_CoreReset+0x64>)
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d901      	bls.n	800b154 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b150:	2303      	movs	r3, #3
 800b152:	e006      	b.n	800b162 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	691b      	ldr	r3, [r3, #16]
 800b158:	f003 0301 	and.w	r3, r3, #1
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d0f0      	beq.n	800b142 <USB_CoreReset+0x36>

  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	00030d40 	.word	0x00030d40

0800b174 <__errno>:
 800b174:	4b01      	ldr	r3, [pc, #4]	; (800b17c <__errno+0x8>)
 800b176:	6818      	ldr	r0, [r3, #0]
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop
 800b17c:	24000020 	.word	0x24000020

0800b180 <__libc_init_array>:
 800b180:	b570      	push	{r4, r5, r6, lr}
 800b182:	4d0d      	ldr	r5, [pc, #52]	; (800b1b8 <__libc_init_array+0x38>)
 800b184:	4c0d      	ldr	r4, [pc, #52]	; (800b1bc <__libc_init_array+0x3c>)
 800b186:	1b64      	subs	r4, r4, r5
 800b188:	10a4      	asrs	r4, r4, #2
 800b18a:	2600      	movs	r6, #0
 800b18c:	42a6      	cmp	r6, r4
 800b18e:	d109      	bne.n	800b1a4 <__libc_init_array+0x24>
 800b190:	4d0b      	ldr	r5, [pc, #44]	; (800b1c0 <__libc_init_array+0x40>)
 800b192:	4c0c      	ldr	r4, [pc, #48]	; (800b1c4 <__libc_init_array+0x44>)
 800b194:	f000 fc8e 	bl	800bab4 <_init>
 800b198:	1b64      	subs	r4, r4, r5
 800b19a:	10a4      	asrs	r4, r4, #2
 800b19c:	2600      	movs	r6, #0
 800b19e:	42a6      	cmp	r6, r4
 800b1a0:	d105      	bne.n	800b1ae <__libc_init_array+0x2e>
 800b1a2:	bd70      	pop	{r4, r5, r6, pc}
 800b1a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1a8:	4798      	blx	r3
 800b1aa:	3601      	adds	r6, #1
 800b1ac:	e7ee      	b.n	800b18c <__libc_init_array+0xc>
 800b1ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800b1b2:	4798      	blx	r3
 800b1b4:	3601      	adds	r6, #1
 800b1b6:	e7f2      	b.n	800b19e <__libc_init_array+0x1e>
 800b1b8:	0800d170 	.word	0x0800d170
 800b1bc:	0800d170 	.word	0x0800d170
 800b1c0:	0800d170 	.word	0x0800d170
 800b1c4:	0800d174 	.word	0x0800d174

0800b1c8 <memset>:
 800b1c8:	4402      	add	r2, r0
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d100      	bne.n	800b1d2 <memset+0xa>
 800b1d0:	4770      	bx	lr
 800b1d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b1d6:	e7f9      	b.n	800b1cc <memset+0x4>

0800b1d8 <_free_r>:
 800b1d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1da:	2900      	cmp	r1, #0
 800b1dc:	d044      	beq.n	800b268 <_free_r+0x90>
 800b1de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1e2:	9001      	str	r0, [sp, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1ea:	bfb8      	it	lt
 800b1ec:	18e4      	addlt	r4, r4, r3
 800b1ee:	f000 f903 	bl	800b3f8 <__malloc_lock>
 800b1f2:	4a1e      	ldr	r2, [pc, #120]	; (800b26c <_free_r+0x94>)
 800b1f4:	9801      	ldr	r0, [sp, #4]
 800b1f6:	6813      	ldr	r3, [r2, #0]
 800b1f8:	b933      	cbnz	r3, 800b208 <_free_r+0x30>
 800b1fa:	6063      	str	r3, [r4, #4]
 800b1fc:	6014      	str	r4, [r2, #0]
 800b1fe:	b003      	add	sp, #12
 800b200:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b204:	f000 b8fe 	b.w	800b404 <__malloc_unlock>
 800b208:	42a3      	cmp	r3, r4
 800b20a:	d908      	bls.n	800b21e <_free_r+0x46>
 800b20c:	6825      	ldr	r5, [r4, #0]
 800b20e:	1961      	adds	r1, r4, r5
 800b210:	428b      	cmp	r3, r1
 800b212:	bf01      	itttt	eq
 800b214:	6819      	ldreq	r1, [r3, #0]
 800b216:	685b      	ldreq	r3, [r3, #4]
 800b218:	1949      	addeq	r1, r1, r5
 800b21a:	6021      	streq	r1, [r4, #0]
 800b21c:	e7ed      	b.n	800b1fa <_free_r+0x22>
 800b21e:	461a      	mov	r2, r3
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	b10b      	cbz	r3, 800b228 <_free_r+0x50>
 800b224:	42a3      	cmp	r3, r4
 800b226:	d9fa      	bls.n	800b21e <_free_r+0x46>
 800b228:	6811      	ldr	r1, [r2, #0]
 800b22a:	1855      	adds	r5, r2, r1
 800b22c:	42a5      	cmp	r5, r4
 800b22e:	d10b      	bne.n	800b248 <_free_r+0x70>
 800b230:	6824      	ldr	r4, [r4, #0]
 800b232:	4421      	add	r1, r4
 800b234:	1854      	adds	r4, r2, r1
 800b236:	42a3      	cmp	r3, r4
 800b238:	6011      	str	r1, [r2, #0]
 800b23a:	d1e0      	bne.n	800b1fe <_free_r+0x26>
 800b23c:	681c      	ldr	r4, [r3, #0]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	6053      	str	r3, [r2, #4]
 800b242:	4421      	add	r1, r4
 800b244:	6011      	str	r1, [r2, #0]
 800b246:	e7da      	b.n	800b1fe <_free_r+0x26>
 800b248:	d902      	bls.n	800b250 <_free_r+0x78>
 800b24a:	230c      	movs	r3, #12
 800b24c:	6003      	str	r3, [r0, #0]
 800b24e:	e7d6      	b.n	800b1fe <_free_r+0x26>
 800b250:	6825      	ldr	r5, [r4, #0]
 800b252:	1961      	adds	r1, r4, r5
 800b254:	428b      	cmp	r3, r1
 800b256:	bf04      	itt	eq
 800b258:	6819      	ldreq	r1, [r3, #0]
 800b25a:	685b      	ldreq	r3, [r3, #4]
 800b25c:	6063      	str	r3, [r4, #4]
 800b25e:	bf04      	itt	eq
 800b260:	1949      	addeq	r1, r1, r5
 800b262:	6021      	streq	r1, [r4, #0]
 800b264:	6054      	str	r4, [r2, #4]
 800b266:	e7ca      	b.n	800b1fe <_free_r+0x26>
 800b268:	b003      	add	sp, #12
 800b26a:	bd30      	pop	{r4, r5, pc}
 800b26c:	24000cac 	.word	0x24000cac

0800b270 <sbrk_aligned>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	4e0e      	ldr	r6, [pc, #56]	; (800b2ac <sbrk_aligned+0x3c>)
 800b274:	460c      	mov	r4, r1
 800b276:	6831      	ldr	r1, [r6, #0]
 800b278:	4605      	mov	r5, r0
 800b27a:	b911      	cbnz	r1, 800b282 <sbrk_aligned+0x12>
 800b27c:	f000 f88c 	bl	800b398 <_sbrk_r>
 800b280:	6030      	str	r0, [r6, #0]
 800b282:	4621      	mov	r1, r4
 800b284:	4628      	mov	r0, r5
 800b286:	f000 f887 	bl	800b398 <_sbrk_r>
 800b28a:	1c43      	adds	r3, r0, #1
 800b28c:	d00a      	beq.n	800b2a4 <sbrk_aligned+0x34>
 800b28e:	1cc4      	adds	r4, r0, #3
 800b290:	f024 0403 	bic.w	r4, r4, #3
 800b294:	42a0      	cmp	r0, r4
 800b296:	d007      	beq.n	800b2a8 <sbrk_aligned+0x38>
 800b298:	1a21      	subs	r1, r4, r0
 800b29a:	4628      	mov	r0, r5
 800b29c:	f000 f87c 	bl	800b398 <_sbrk_r>
 800b2a0:	3001      	adds	r0, #1
 800b2a2:	d101      	bne.n	800b2a8 <sbrk_aligned+0x38>
 800b2a4:	f04f 34ff 	mov.w	r4, #4294967295
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	24000cb0 	.word	0x24000cb0

0800b2b0 <_malloc_r>:
 800b2b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b4:	1ccd      	adds	r5, r1, #3
 800b2b6:	f025 0503 	bic.w	r5, r5, #3
 800b2ba:	3508      	adds	r5, #8
 800b2bc:	2d0c      	cmp	r5, #12
 800b2be:	bf38      	it	cc
 800b2c0:	250c      	movcc	r5, #12
 800b2c2:	2d00      	cmp	r5, #0
 800b2c4:	4607      	mov	r7, r0
 800b2c6:	db01      	blt.n	800b2cc <_malloc_r+0x1c>
 800b2c8:	42a9      	cmp	r1, r5
 800b2ca:	d905      	bls.n	800b2d8 <_malloc_r+0x28>
 800b2cc:	230c      	movs	r3, #12
 800b2ce:	603b      	str	r3, [r7, #0]
 800b2d0:	2600      	movs	r6, #0
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2d8:	4e2e      	ldr	r6, [pc, #184]	; (800b394 <_malloc_r+0xe4>)
 800b2da:	f000 f88d 	bl	800b3f8 <__malloc_lock>
 800b2de:	6833      	ldr	r3, [r6, #0]
 800b2e0:	461c      	mov	r4, r3
 800b2e2:	bb34      	cbnz	r4, 800b332 <_malloc_r+0x82>
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4638      	mov	r0, r7
 800b2e8:	f7ff ffc2 	bl	800b270 <sbrk_aligned>
 800b2ec:	1c43      	adds	r3, r0, #1
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	d14d      	bne.n	800b38e <_malloc_r+0xde>
 800b2f2:	6834      	ldr	r4, [r6, #0]
 800b2f4:	4626      	mov	r6, r4
 800b2f6:	2e00      	cmp	r6, #0
 800b2f8:	d140      	bne.n	800b37c <_malloc_r+0xcc>
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4638      	mov	r0, r7
 800b300:	eb04 0803 	add.w	r8, r4, r3
 800b304:	f000 f848 	bl	800b398 <_sbrk_r>
 800b308:	4580      	cmp	r8, r0
 800b30a:	d13a      	bne.n	800b382 <_malloc_r+0xd2>
 800b30c:	6821      	ldr	r1, [r4, #0]
 800b30e:	3503      	adds	r5, #3
 800b310:	1a6d      	subs	r5, r5, r1
 800b312:	f025 0503 	bic.w	r5, r5, #3
 800b316:	3508      	adds	r5, #8
 800b318:	2d0c      	cmp	r5, #12
 800b31a:	bf38      	it	cc
 800b31c:	250c      	movcc	r5, #12
 800b31e:	4629      	mov	r1, r5
 800b320:	4638      	mov	r0, r7
 800b322:	f7ff ffa5 	bl	800b270 <sbrk_aligned>
 800b326:	3001      	adds	r0, #1
 800b328:	d02b      	beq.n	800b382 <_malloc_r+0xd2>
 800b32a:	6823      	ldr	r3, [r4, #0]
 800b32c:	442b      	add	r3, r5
 800b32e:	6023      	str	r3, [r4, #0]
 800b330:	e00e      	b.n	800b350 <_malloc_r+0xa0>
 800b332:	6822      	ldr	r2, [r4, #0]
 800b334:	1b52      	subs	r2, r2, r5
 800b336:	d41e      	bmi.n	800b376 <_malloc_r+0xc6>
 800b338:	2a0b      	cmp	r2, #11
 800b33a:	d916      	bls.n	800b36a <_malloc_r+0xba>
 800b33c:	1961      	adds	r1, r4, r5
 800b33e:	42a3      	cmp	r3, r4
 800b340:	6025      	str	r5, [r4, #0]
 800b342:	bf18      	it	ne
 800b344:	6059      	strne	r1, [r3, #4]
 800b346:	6863      	ldr	r3, [r4, #4]
 800b348:	bf08      	it	eq
 800b34a:	6031      	streq	r1, [r6, #0]
 800b34c:	5162      	str	r2, [r4, r5]
 800b34e:	604b      	str	r3, [r1, #4]
 800b350:	4638      	mov	r0, r7
 800b352:	f104 060b 	add.w	r6, r4, #11
 800b356:	f000 f855 	bl	800b404 <__malloc_unlock>
 800b35a:	f026 0607 	bic.w	r6, r6, #7
 800b35e:	1d23      	adds	r3, r4, #4
 800b360:	1af2      	subs	r2, r6, r3
 800b362:	d0b6      	beq.n	800b2d2 <_malloc_r+0x22>
 800b364:	1b9b      	subs	r3, r3, r6
 800b366:	50a3      	str	r3, [r4, r2]
 800b368:	e7b3      	b.n	800b2d2 <_malloc_r+0x22>
 800b36a:	6862      	ldr	r2, [r4, #4]
 800b36c:	42a3      	cmp	r3, r4
 800b36e:	bf0c      	ite	eq
 800b370:	6032      	streq	r2, [r6, #0]
 800b372:	605a      	strne	r2, [r3, #4]
 800b374:	e7ec      	b.n	800b350 <_malloc_r+0xa0>
 800b376:	4623      	mov	r3, r4
 800b378:	6864      	ldr	r4, [r4, #4]
 800b37a:	e7b2      	b.n	800b2e2 <_malloc_r+0x32>
 800b37c:	4634      	mov	r4, r6
 800b37e:	6876      	ldr	r6, [r6, #4]
 800b380:	e7b9      	b.n	800b2f6 <_malloc_r+0x46>
 800b382:	230c      	movs	r3, #12
 800b384:	603b      	str	r3, [r7, #0]
 800b386:	4638      	mov	r0, r7
 800b388:	f000 f83c 	bl	800b404 <__malloc_unlock>
 800b38c:	e7a1      	b.n	800b2d2 <_malloc_r+0x22>
 800b38e:	6025      	str	r5, [r4, #0]
 800b390:	e7de      	b.n	800b350 <_malloc_r+0xa0>
 800b392:	bf00      	nop
 800b394:	24000cac 	.word	0x24000cac

0800b398 <_sbrk_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4d06      	ldr	r5, [pc, #24]	; (800b3b4 <_sbrk_r+0x1c>)
 800b39c:	2300      	movs	r3, #0
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	f7f7 fb78 	bl	8002a98 <_sbrk>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_sbrk_r+0x1a>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_sbrk_r+0x1a>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	24000cb4 	.word	0x24000cb4

0800b3b8 <siprintf>:
 800b3b8:	b40e      	push	{r1, r2, r3}
 800b3ba:	b500      	push	{lr}
 800b3bc:	b09c      	sub	sp, #112	; 0x70
 800b3be:	ab1d      	add	r3, sp, #116	; 0x74
 800b3c0:	9002      	str	r0, [sp, #8]
 800b3c2:	9006      	str	r0, [sp, #24]
 800b3c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3c8:	4809      	ldr	r0, [pc, #36]	; (800b3f0 <siprintf+0x38>)
 800b3ca:	9107      	str	r1, [sp, #28]
 800b3cc:	9104      	str	r1, [sp, #16]
 800b3ce:	4909      	ldr	r1, [pc, #36]	; (800b3f4 <siprintf+0x3c>)
 800b3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d4:	9105      	str	r1, [sp, #20]
 800b3d6:	6800      	ldr	r0, [r0, #0]
 800b3d8:	9301      	str	r3, [sp, #4]
 800b3da:	a902      	add	r1, sp, #8
 800b3dc:	f000 f874 	bl	800b4c8 <_svfiprintf_r>
 800b3e0:	9b02      	ldr	r3, [sp, #8]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	701a      	strb	r2, [r3, #0]
 800b3e6:	b01c      	add	sp, #112	; 0x70
 800b3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ec:	b003      	add	sp, #12
 800b3ee:	4770      	bx	lr
 800b3f0:	24000020 	.word	0x24000020
 800b3f4:	ffff0208 	.word	0xffff0208

0800b3f8 <__malloc_lock>:
 800b3f8:	4801      	ldr	r0, [pc, #4]	; (800b400 <__malloc_lock+0x8>)
 800b3fa:	f000 baf9 	b.w	800b9f0 <__retarget_lock_acquire_recursive>
 800b3fe:	bf00      	nop
 800b400:	24000cb8 	.word	0x24000cb8

0800b404 <__malloc_unlock>:
 800b404:	4801      	ldr	r0, [pc, #4]	; (800b40c <__malloc_unlock+0x8>)
 800b406:	f000 baf4 	b.w	800b9f2 <__retarget_lock_release_recursive>
 800b40a:	bf00      	nop
 800b40c:	24000cb8 	.word	0x24000cb8

0800b410 <__ssputs_r>:
 800b410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b414:	688e      	ldr	r6, [r1, #8]
 800b416:	429e      	cmp	r6, r3
 800b418:	4682      	mov	sl, r0
 800b41a:	460c      	mov	r4, r1
 800b41c:	4690      	mov	r8, r2
 800b41e:	461f      	mov	r7, r3
 800b420:	d838      	bhi.n	800b494 <__ssputs_r+0x84>
 800b422:	898a      	ldrh	r2, [r1, #12]
 800b424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b428:	d032      	beq.n	800b490 <__ssputs_r+0x80>
 800b42a:	6825      	ldr	r5, [r4, #0]
 800b42c:	6909      	ldr	r1, [r1, #16]
 800b42e:	eba5 0901 	sub.w	r9, r5, r1
 800b432:	6965      	ldr	r5, [r4, #20]
 800b434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b43c:	3301      	adds	r3, #1
 800b43e:	444b      	add	r3, r9
 800b440:	106d      	asrs	r5, r5, #1
 800b442:	429d      	cmp	r5, r3
 800b444:	bf38      	it	cc
 800b446:	461d      	movcc	r5, r3
 800b448:	0553      	lsls	r3, r2, #21
 800b44a:	d531      	bpl.n	800b4b0 <__ssputs_r+0xa0>
 800b44c:	4629      	mov	r1, r5
 800b44e:	f7ff ff2f 	bl	800b2b0 <_malloc_r>
 800b452:	4606      	mov	r6, r0
 800b454:	b950      	cbnz	r0, 800b46c <__ssputs_r+0x5c>
 800b456:	230c      	movs	r3, #12
 800b458:	f8ca 3000 	str.w	r3, [sl]
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	f04f 30ff 	mov.w	r0, #4294967295
 800b468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46c:	6921      	ldr	r1, [r4, #16]
 800b46e:	464a      	mov	r2, r9
 800b470:	f000 fac0 	bl	800b9f4 <memcpy>
 800b474:	89a3      	ldrh	r3, [r4, #12]
 800b476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b47a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b47e:	81a3      	strh	r3, [r4, #12]
 800b480:	6126      	str	r6, [r4, #16]
 800b482:	6165      	str	r5, [r4, #20]
 800b484:	444e      	add	r6, r9
 800b486:	eba5 0509 	sub.w	r5, r5, r9
 800b48a:	6026      	str	r6, [r4, #0]
 800b48c:	60a5      	str	r5, [r4, #8]
 800b48e:	463e      	mov	r6, r7
 800b490:	42be      	cmp	r6, r7
 800b492:	d900      	bls.n	800b496 <__ssputs_r+0x86>
 800b494:	463e      	mov	r6, r7
 800b496:	6820      	ldr	r0, [r4, #0]
 800b498:	4632      	mov	r2, r6
 800b49a:	4641      	mov	r1, r8
 800b49c:	f000 fab8 	bl	800ba10 <memmove>
 800b4a0:	68a3      	ldr	r3, [r4, #8]
 800b4a2:	1b9b      	subs	r3, r3, r6
 800b4a4:	60a3      	str	r3, [r4, #8]
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	4433      	add	r3, r6
 800b4aa:	6023      	str	r3, [r4, #0]
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	e7db      	b.n	800b468 <__ssputs_r+0x58>
 800b4b0:	462a      	mov	r2, r5
 800b4b2:	f000 fac7 	bl	800ba44 <_realloc_r>
 800b4b6:	4606      	mov	r6, r0
 800b4b8:	2800      	cmp	r0, #0
 800b4ba:	d1e1      	bne.n	800b480 <__ssputs_r+0x70>
 800b4bc:	6921      	ldr	r1, [r4, #16]
 800b4be:	4650      	mov	r0, sl
 800b4c0:	f7ff fe8a 	bl	800b1d8 <_free_r>
 800b4c4:	e7c7      	b.n	800b456 <__ssputs_r+0x46>
	...

0800b4c8 <_svfiprintf_r>:
 800b4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4cc:	4698      	mov	r8, r3
 800b4ce:	898b      	ldrh	r3, [r1, #12]
 800b4d0:	061b      	lsls	r3, r3, #24
 800b4d2:	b09d      	sub	sp, #116	; 0x74
 800b4d4:	4607      	mov	r7, r0
 800b4d6:	460d      	mov	r5, r1
 800b4d8:	4614      	mov	r4, r2
 800b4da:	d50e      	bpl.n	800b4fa <_svfiprintf_r+0x32>
 800b4dc:	690b      	ldr	r3, [r1, #16]
 800b4de:	b963      	cbnz	r3, 800b4fa <_svfiprintf_r+0x32>
 800b4e0:	2140      	movs	r1, #64	; 0x40
 800b4e2:	f7ff fee5 	bl	800b2b0 <_malloc_r>
 800b4e6:	6028      	str	r0, [r5, #0]
 800b4e8:	6128      	str	r0, [r5, #16]
 800b4ea:	b920      	cbnz	r0, 800b4f6 <_svfiprintf_r+0x2e>
 800b4ec:	230c      	movs	r3, #12
 800b4ee:	603b      	str	r3, [r7, #0]
 800b4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f4:	e0d1      	b.n	800b69a <_svfiprintf_r+0x1d2>
 800b4f6:	2340      	movs	r3, #64	; 0x40
 800b4f8:	616b      	str	r3, [r5, #20]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4fe:	2320      	movs	r3, #32
 800b500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b504:	f8cd 800c 	str.w	r8, [sp, #12]
 800b508:	2330      	movs	r3, #48	; 0x30
 800b50a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6b4 <_svfiprintf_r+0x1ec>
 800b50e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b512:	f04f 0901 	mov.w	r9, #1
 800b516:	4623      	mov	r3, r4
 800b518:	469a      	mov	sl, r3
 800b51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b51e:	b10a      	cbz	r2, 800b524 <_svfiprintf_r+0x5c>
 800b520:	2a25      	cmp	r2, #37	; 0x25
 800b522:	d1f9      	bne.n	800b518 <_svfiprintf_r+0x50>
 800b524:	ebba 0b04 	subs.w	fp, sl, r4
 800b528:	d00b      	beq.n	800b542 <_svfiprintf_r+0x7a>
 800b52a:	465b      	mov	r3, fp
 800b52c:	4622      	mov	r2, r4
 800b52e:	4629      	mov	r1, r5
 800b530:	4638      	mov	r0, r7
 800b532:	f7ff ff6d 	bl	800b410 <__ssputs_r>
 800b536:	3001      	adds	r0, #1
 800b538:	f000 80aa 	beq.w	800b690 <_svfiprintf_r+0x1c8>
 800b53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b53e:	445a      	add	r2, fp
 800b540:	9209      	str	r2, [sp, #36]	; 0x24
 800b542:	f89a 3000 	ldrb.w	r3, [sl]
 800b546:	2b00      	cmp	r3, #0
 800b548:	f000 80a2 	beq.w	800b690 <_svfiprintf_r+0x1c8>
 800b54c:	2300      	movs	r3, #0
 800b54e:	f04f 32ff 	mov.w	r2, #4294967295
 800b552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b556:	f10a 0a01 	add.w	sl, sl, #1
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	9307      	str	r3, [sp, #28]
 800b55e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b562:	931a      	str	r3, [sp, #104]	; 0x68
 800b564:	4654      	mov	r4, sl
 800b566:	2205      	movs	r2, #5
 800b568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b56c:	4851      	ldr	r0, [pc, #324]	; (800b6b4 <_svfiprintf_r+0x1ec>)
 800b56e:	f7f4 feb7 	bl	80002e0 <memchr>
 800b572:	9a04      	ldr	r2, [sp, #16]
 800b574:	b9d8      	cbnz	r0, 800b5ae <_svfiprintf_r+0xe6>
 800b576:	06d0      	lsls	r0, r2, #27
 800b578:	bf44      	itt	mi
 800b57a:	2320      	movmi	r3, #32
 800b57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b580:	0711      	lsls	r1, r2, #28
 800b582:	bf44      	itt	mi
 800b584:	232b      	movmi	r3, #43	; 0x2b
 800b586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b58a:	f89a 3000 	ldrb.w	r3, [sl]
 800b58e:	2b2a      	cmp	r3, #42	; 0x2a
 800b590:	d015      	beq.n	800b5be <_svfiprintf_r+0xf6>
 800b592:	9a07      	ldr	r2, [sp, #28]
 800b594:	4654      	mov	r4, sl
 800b596:	2000      	movs	r0, #0
 800b598:	f04f 0c0a 	mov.w	ip, #10
 800b59c:	4621      	mov	r1, r4
 800b59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5a2:	3b30      	subs	r3, #48	; 0x30
 800b5a4:	2b09      	cmp	r3, #9
 800b5a6:	d94e      	bls.n	800b646 <_svfiprintf_r+0x17e>
 800b5a8:	b1b0      	cbz	r0, 800b5d8 <_svfiprintf_r+0x110>
 800b5aa:	9207      	str	r2, [sp, #28]
 800b5ac:	e014      	b.n	800b5d8 <_svfiprintf_r+0x110>
 800b5ae:	eba0 0308 	sub.w	r3, r0, r8
 800b5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	9304      	str	r3, [sp, #16]
 800b5ba:	46a2      	mov	sl, r4
 800b5bc:	e7d2      	b.n	800b564 <_svfiprintf_r+0x9c>
 800b5be:	9b03      	ldr	r3, [sp, #12]
 800b5c0:	1d19      	adds	r1, r3, #4
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	9103      	str	r1, [sp, #12]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	bfbb      	ittet	lt
 800b5ca:	425b      	neglt	r3, r3
 800b5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800b5d0:	9307      	strge	r3, [sp, #28]
 800b5d2:	9307      	strlt	r3, [sp, #28]
 800b5d4:	bfb8      	it	lt
 800b5d6:	9204      	strlt	r2, [sp, #16]
 800b5d8:	7823      	ldrb	r3, [r4, #0]
 800b5da:	2b2e      	cmp	r3, #46	; 0x2e
 800b5dc:	d10c      	bne.n	800b5f8 <_svfiprintf_r+0x130>
 800b5de:	7863      	ldrb	r3, [r4, #1]
 800b5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b5e2:	d135      	bne.n	800b650 <_svfiprintf_r+0x188>
 800b5e4:	9b03      	ldr	r3, [sp, #12]
 800b5e6:	1d1a      	adds	r2, r3, #4
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	9203      	str	r2, [sp, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	bfb8      	it	lt
 800b5f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5f4:	3402      	adds	r4, #2
 800b5f6:	9305      	str	r3, [sp, #20]
 800b5f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6c4 <_svfiprintf_r+0x1fc>
 800b5fc:	7821      	ldrb	r1, [r4, #0]
 800b5fe:	2203      	movs	r2, #3
 800b600:	4650      	mov	r0, sl
 800b602:	f7f4 fe6d 	bl	80002e0 <memchr>
 800b606:	b140      	cbz	r0, 800b61a <_svfiprintf_r+0x152>
 800b608:	2340      	movs	r3, #64	; 0x40
 800b60a:	eba0 000a 	sub.w	r0, r0, sl
 800b60e:	fa03 f000 	lsl.w	r0, r3, r0
 800b612:	9b04      	ldr	r3, [sp, #16]
 800b614:	4303      	orrs	r3, r0
 800b616:	3401      	adds	r4, #1
 800b618:	9304      	str	r3, [sp, #16]
 800b61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b61e:	4826      	ldr	r0, [pc, #152]	; (800b6b8 <_svfiprintf_r+0x1f0>)
 800b620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b624:	2206      	movs	r2, #6
 800b626:	f7f4 fe5b 	bl	80002e0 <memchr>
 800b62a:	2800      	cmp	r0, #0
 800b62c:	d038      	beq.n	800b6a0 <_svfiprintf_r+0x1d8>
 800b62e:	4b23      	ldr	r3, [pc, #140]	; (800b6bc <_svfiprintf_r+0x1f4>)
 800b630:	bb1b      	cbnz	r3, 800b67a <_svfiprintf_r+0x1b2>
 800b632:	9b03      	ldr	r3, [sp, #12]
 800b634:	3307      	adds	r3, #7
 800b636:	f023 0307 	bic.w	r3, r3, #7
 800b63a:	3308      	adds	r3, #8
 800b63c:	9303      	str	r3, [sp, #12]
 800b63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b640:	4433      	add	r3, r6
 800b642:	9309      	str	r3, [sp, #36]	; 0x24
 800b644:	e767      	b.n	800b516 <_svfiprintf_r+0x4e>
 800b646:	fb0c 3202 	mla	r2, ip, r2, r3
 800b64a:	460c      	mov	r4, r1
 800b64c:	2001      	movs	r0, #1
 800b64e:	e7a5      	b.n	800b59c <_svfiprintf_r+0xd4>
 800b650:	2300      	movs	r3, #0
 800b652:	3401      	adds	r4, #1
 800b654:	9305      	str	r3, [sp, #20]
 800b656:	4619      	mov	r1, r3
 800b658:	f04f 0c0a 	mov.w	ip, #10
 800b65c:	4620      	mov	r0, r4
 800b65e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b662:	3a30      	subs	r2, #48	; 0x30
 800b664:	2a09      	cmp	r2, #9
 800b666:	d903      	bls.n	800b670 <_svfiprintf_r+0x1a8>
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0c5      	beq.n	800b5f8 <_svfiprintf_r+0x130>
 800b66c:	9105      	str	r1, [sp, #20]
 800b66e:	e7c3      	b.n	800b5f8 <_svfiprintf_r+0x130>
 800b670:	fb0c 2101 	mla	r1, ip, r1, r2
 800b674:	4604      	mov	r4, r0
 800b676:	2301      	movs	r3, #1
 800b678:	e7f0      	b.n	800b65c <_svfiprintf_r+0x194>
 800b67a:	ab03      	add	r3, sp, #12
 800b67c:	9300      	str	r3, [sp, #0]
 800b67e:	462a      	mov	r2, r5
 800b680:	4b0f      	ldr	r3, [pc, #60]	; (800b6c0 <_svfiprintf_r+0x1f8>)
 800b682:	a904      	add	r1, sp, #16
 800b684:	4638      	mov	r0, r7
 800b686:	f3af 8000 	nop.w
 800b68a:	1c42      	adds	r2, r0, #1
 800b68c:	4606      	mov	r6, r0
 800b68e:	d1d6      	bne.n	800b63e <_svfiprintf_r+0x176>
 800b690:	89ab      	ldrh	r3, [r5, #12]
 800b692:	065b      	lsls	r3, r3, #25
 800b694:	f53f af2c 	bmi.w	800b4f0 <_svfiprintf_r+0x28>
 800b698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b69a:	b01d      	add	sp, #116	; 0x74
 800b69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a0:	ab03      	add	r3, sp, #12
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	462a      	mov	r2, r5
 800b6a6:	4b06      	ldr	r3, [pc, #24]	; (800b6c0 <_svfiprintf_r+0x1f8>)
 800b6a8:	a904      	add	r1, sp, #16
 800b6aa:	4638      	mov	r0, r7
 800b6ac:	f000 f87a 	bl	800b7a4 <_printf_i>
 800b6b0:	e7eb      	b.n	800b68a <_svfiprintf_r+0x1c2>
 800b6b2:	bf00      	nop
 800b6b4:	0800d134 	.word	0x0800d134
 800b6b8:	0800d13e 	.word	0x0800d13e
 800b6bc:	00000000 	.word	0x00000000
 800b6c0:	0800b411 	.word	0x0800b411
 800b6c4:	0800d13a 	.word	0x0800d13a

0800b6c8 <_printf_common>:
 800b6c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6cc:	4616      	mov	r6, r2
 800b6ce:	4699      	mov	r9, r3
 800b6d0:	688a      	ldr	r2, [r1, #8]
 800b6d2:	690b      	ldr	r3, [r1, #16]
 800b6d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6d8:	4293      	cmp	r3, r2
 800b6da:	bfb8      	it	lt
 800b6dc:	4613      	movlt	r3, r2
 800b6de:	6033      	str	r3, [r6, #0]
 800b6e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6e4:	4607      	mov	r7, r0
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	b10a      	cbz	r2, 800b6ee <_printf_common+0x26>
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	6033      	str	r3, [r6, #0]
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	0699      	lsls	r1, r3, #26
 800b6f2:	bf42      	ittt	mi
 800b6f4:	6833      	ldrmi	r3, [r6, #0]
 800b6f6:	3302      	addmi	r3, #2
 800b6f8:	6033      	strmi	r3, [r6, #0]
 800b6fa:	6825      	ldr	r5, [r4, #0]
 800b6fc:	f015 0506 	ands.w	r5, r5, #6
 800b700:	d106      	bne.n	800b710 <_printf_common+0x48>
 800b702:	f104 0a19 	add.w	sl, r4, #25
 800b706:	68e3      	ldr	r3, [r4, #12]
 800b708:	6832      	ldr	r2, [r6, #0]
 800b70a:	1a9b      	subs	r3, r3, r2
 800b70c:	42ab      	cmp	r3, r5
 800b70e:	dc26      	bgt.n	800b75e <_printf_common+0x96>
 800b710:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b714:	1e13      	subs	r3, r2, #0
 800b716:	6822      	ldr	r2, [r4, #0]
 800b718:	bf18      	it	ne
 800b71a:	2301      	movne	r3, #1
 800b71c:	0692      	lsls	r2, r2, #26
 800b71e:	d42b      	bmi.n	800b778 <_printf_common+0xb0>
 800b720:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b724:	4649      	mov	r1, r9
 800b726:	4638      	mov	r0, r7
 800b728:	47c0      	blx	r8
 800b72a:	3001      	adds	r0, #1
 800b72c:	d01e      	beq.n	800b76c <_printf_common+0xa4>
 800b72e:	6823      	ldr	r3, [r4, #0]
 800b730:	68e5      	ldr	r5, [r4, #12]
 800b732:	6832      	ldr	r2, [r6, #0]
 800b734:	f003 0306 	and.w	r3, r3, #6
 800b738:	2b04      	cmp	r3, #4
 800b73a:	bf08      	it	eq
 800b73c:	1aad      	subeq	r5, r5, r2
 800b73e:	68a3      	ldr	r3, [r4, #8]
 800b740:	6922      	ldr	r2, [r4, #16]
 800b742:	bf0c      	ite	eq
 800b744:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b748:	2500      	movne	r5, #0
 800b74a:	4293      	cmp	r3, r2
 800b74c:	bfc4      	itt	gt
 800b74e:	1a9b      	subgt	r3, r3, r2
 800b750:	18ed      	addgt	r5, r5, r3
 800b752:	2600      	movs	r6, #0
 800b754:	341a      	adds	r4, #26
 800b756:	42b5      	cmp	r5, r6
 800b758:	d11a      	bne.n	800b790 <_printf_common+0xc8>
 800b75a:	2000      	movs	r0, #0
 800b75c:	e008      	b.n	800b770 <_printf_common+0xa8>
 800b75e:	2301      	movs	r3, #1
 800b760:	4652      	mov	r2, sl
 800b762:	4649      	mov	r1, r9
 800b764:	4638      	mov	r0, r7
 800b766:	47c0      	blx	r8
 800b768:	3001      	adds	r0, #1
 800b76a:	d103      	bne.n	800b774 <_printf_common+0xac>
 800b76c:	f04f 30ff 	mov.w	r0, #4294967295
 800b770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b774:	3501      	adds	r5, #1
 800b776:	e7c6      	b.n	800b706 <_printf_common+0x3e>
 800b778:	18e1      	adds	r1, r4, r3
 800b77a:	1c5a      	adds	r2, r3, #1
 800b77c:	2030      	movs	r0, #48	; 0x30
 800b77e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b782:	4422      	add	r2, r4
 800b784:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b788:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b78c:	3302      	adds	r3, #2
 800b78e:	e7c7      	b.n	800b720 <_printf_common+0x58>
 800b790:	2301      	movs	r3, #1
 800b792:	4622      	mov	r2, r4
 800b794:	4649      	mov	r1, r9
 800b796:	4638      	mov	r0, r7
 800b798:	47c0      	blx	r8
 800b79a:	3001      	adds	r0, #1
 800b79c:	d0e6      	beq.n	800b76c <_printf_common+0xa4>
 800b79e:	3601      	adds	r6, #1
 800b7a0:	e7d9      	b.n	800b756 <_printf_common+0x8e>
	...

0800b7a4 <_printf_i>:
 800b7a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a8:	7e0f      	ldrb	r7, [r1, #24]
 800b7aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7ac:	2f78      	cmp	r7, #120	; 0x78
 800b7ae:	4691      	mov	r9, r2
 800b7b0:	4680      	mov	r8, r0
 800b7b2:	460c      	mov	r4, r1
 800b7b4:	469a      	mov	sl, r3
 800b7b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7ba:	d807      	bhi.n	800b7cc <_printf_i+0x28>
 800b7bc:	2f62      	cmp	r7, #98	; 0x62
 800b7be:	d80a      	bhi.n	800b7d6 <_printf_i+0x32>
 800b7c0:	2f00      	cmp	r7, #0
 800b7c2:	f000 80d8 	beq.w	800b976 <_printf_i+0x1d2>
 800b7c6:	2f58      	cmp	r7, #88	; 0x58
 800b7c8:	f000 80a3 	beq.w	800b912 <_printf_i+0x16e>
 800b7cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7d4:	e03a      	b.n	800b84c <_printf_i+0xa8>
 800b7d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7da:	2b15      	cmp	r3, #21
 800b7dc:	d8f6      	bhi.n	800b7cc <_printf_i+0x28>
 800b7de:	a101      	add	r1, pc, #4	; (adr r1, 800b7e4 <_printf_i+0x40>)
 800b7e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7e4:	0800b83d 	.word	0x0800b83d
 800b7e8:	0800b851 	.word	0x0800b851
 800b7ec:	0800b7cd 	.word	0x0800b7cd
 800b7f0:	0800b7cd 	.word	0x0800b7cd
 800b7f4:	0800b7cd 	.word	0x0800b7cd
 800b7f8:	0800b7cd 	.word	0x0800b7cd
 800b7fc:	0800b851 	.word	0x0800b851
 800b800:	0800b7cd 	.word	0x0800b7cd
 800b804:	0800b7cd 	.word	0x0800b7cd
 800b808:	0800b7cd 	.word	0x0800b7cd
 800b80c:	0800b7cd 	.word	0x0800b7cd
 800b810:	0800b95d 	.word	0x0800b95d
 800b814:	0800b881 	.word	0x0800b881
 800b818:	0800b93f 	.word	0x0800b93f
 800b81c:	0800b7cd 	.word	0x0800b7cd
 800b820:	0800b7cd 	.word	0x0800b7cd
 800b824:	0800b97f 	.word	0x0800b97f
 800b828:	0800b7cd 	.word	0x0800b7cd
 800b82c:	0800b881 	.word	0x0800b881
 800b830:	0800b7cd 	.word	0x0800b7cd
 800b834:	0800b7cd 	.word	0x0800b7cd
 800b838:	0800b947 	.word	0x0800b947
 800b83c:	682b      	ldr	r3, [r5, #0]
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	602a      	str	r2, [r5, #0]
 800b844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b848:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b84c:	2301      	movs	r3, #1
 800b84e:	e0a3      	b.n	800b998 <_printf_i+0x1f4>
 800b850:	6820      	ldr	r0, [r4, #0]
 800b852:	6829      	ldr	r1, [r5, #0]
 800b854:	0606      	lsls	r6, r0, #24
 800b856:	f101 0304 	add.w	r3, r1, #4
 800b85a:	d50a      	bpl.n	800b872 <_printf_i+0xce>
 800b85c:	680e      	ldr	r6, [r1, #0]
 800b85e:	602b      	str	r3, [r5, #0]
 800b860:	2e00      	cmp	r6, #0
 800b862:	da03      	bge.n	800b86c <_printf_i+0xc8>
 800b864:	232d      	movs	r3, #45	; 0x2d
 800b866:	4276      	negs	r6, r6
 800b868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b86c:	485e      	ldr	r0, [pc, #376]	; (800b9e8 <_printf_i+0x244>)
 800b86e:	230a      	movs	r3, #10
 800b870:	e019      	b.n	800b8a6 <_printf_i+0x102>
 800b872:	680e      	ldr	r6, [r1, #0]
 800b874:	602b      	str	r3, [r5, #0]
 800b876:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b87a:	bf18      	it	ne
 800b87c:	b236      	sxthne	r6, r6
 800b87e:	e7ef      	b.n	800b860 <_printf_i+0xbc>
 800b880:	682b      	ldr	r3, [r5, #0]
 800b882:	6820      	ldr	r0, [r4, #0]
 800b884:	1d19      	adds	r1, r3, #4
 800b886:	6029      	str	r1, [r5, #0]
 800b888:	0601      	lsls	r1, r0, #24
 800b88a:	d501      	bpl.n	800b890 <_printf_i+0xec>
 800b88c:	681e      	ldr	r6, [r3, #0]
 800b88e:	e002      	b.n	800b896 <_printf_i+0xf2>
 800b890:	0646      	lsls	r6, r0, #25
 800b892:	d5fb      	bpl.n	800b88c <_printf_i+0xe8>
 800b894:	881e      	ldrh	r6, [r3, #0]
 800b896:	4854      	ldr	r0, [pc, #336]	; (800b9e8 <_printf_i+0x244>)
 800b898:	2f6f      	cmp	r7, #111	; 0x6f
 800b89a:	bf0c      	ite	eq
 800b89c:	2308      	moveq	r3, #8
 800b89e:	230a      	movne	r3, #10
 800b8a0:	2100      	movs	r1, #0
 800b8a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b8a6:	6865      	ldr	r5, [r4, #4]
 800b8a8:	60a5      	str	r5, [r4, #8]
 800b8aa:	2d00      	cmp	r5, #0
 800b8ac:	bfa2      	ittt	ge
 800b8ae:	6821      	ldrge	r1, [r4, #0]
 800b8b0:	f021 0104 	bicge.w	r1, r1, #4
 800b8b4:	6021      	strge	r1, [r4, #0]
 800b8b6:	b90e      	cbnz	r6, 800b8bc <_printf_i+0x118>
 800b8b8:	2d00      	cmp	r5, #0
 800b8ba:	d04d      	beq.n	800b958 <_printf_i+0x1b4>
 800b8bc:	4615      	mov	r5, r2
 800b8be:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8c2:	fb03 6711 	mls	r7, r3, r1, r6
 800b8c6:	5dc7      	ldrb	r7, [r0, r7]
 800b8c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8cc:	4637      	mov	r7, r6
 800b8ce:	42bb      	cmp	r3, r7
 800b8d0:	460e      	mov	r6, r1
 800b8d2:	d9f4      	bls.n	800b8be <_printf_i+0x11a>
 800b8d4:	2b08      	cmp	r3, #8
 800b8d6:	d10b      	bne.n	800b8f0 <_printf_i+0x14c>
 800b8d8:	6823      	ldr	r3, [r4, #0]
 800b8da:	07de      	lsls	r6, r3, #31
 800b8dc:	d508      	bpl.n	800b8f0 <_printf_i+0x14c>
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	6861      	ldr	r1, [r4, #4]
 800b8e2:	4299      	cmp	r1, r3
 800b8e4:	bfde      	ittt	le
 800b8e6:	2330      	movle	r3, #48	; 0x30
 800b8e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8f0:	1b52      	subs	r2, r2, r5
 800b8f2:	6122      	str	r2, [r4, #16]
 800b8f4:	f8cd a000 	str.w	sl, [sp]
 800b8f8:	464b      	mov	r3, r9
 800b8fa:	aa03      	add	r2, sp, #12
 800b8fc:	4621      	mov	r1, r4
 800b8fe:	4640      	mov	r0, r8
 800b900:	f7ff fee2 	bl	800b6c8 <_printf_common>
 800b904:	3001      	adds	r0, #1
 800b906:	d14c      	bne.n	800b9a2 <_printf_i+0x1fe>
 800b908:	f04f 30ff 	mov.w	r0, #4294967295
 800b90c:	b004      	add	sp, #16
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	4835      	ldr	r0, [pc, #212]	; (800b9e8 <_printf_i+0x244>)
 800b914:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b918:	6829      	ldr	r1, [r5, #0]
 800b91a:	6823      	ldr	r3, [r4, #0]
 800b91c:	f851 6b04 	ldr.w	r6, [r1], #4
 800b920:	6029      	str	r1, [r5, #0]
 800b922:	061d      	lsls	r5, r3, #24
 800b924:	d514      	bpl.n	800b950 <_printf_i+0x1ac>
 800b926:	07df      	lsls	r7, r3, #31
 800b928:	bf44      	itt	mi
 800b92a:	f043 0320 	orrmi.w	r3, r3, #32
 800b92e:	6023      	strmi	r3, [r4, #0]
 800b930:	b91e      	cbnz	r6, 800b93a <_printf_i+0x196>
 800b932:	6823      	ldr	r3, [r4, #0]
 800b934:	f023 0320 	bic.w	r3, r3, #32
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	2310      	movs	r3, #16
 800b93c:	e7b0      	b.n	800b8a0 <_printf_i+0xfc>
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	f043 0320 	orr.w	r3, r3, #32
 800b944:	6023      	str	r3, [r4, #0]
 800b946:	2378      	movs	r3, #120	; 0x78
 800b948:	4828      	ldr	r0, [pc, #160]	; (800b9ec <_printf_i+0x248>)
 800b94a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b94e:	e7e3      	b.n	800b918 <_printf_i+0x174>
 800b950:	0659      	lsls	r1, r3, #25
 800b952:	bf48      	it	mi
 800b954:	b2b6      	uxthmi	r6, r6
 800b956:	e7e6      	b.n	800b926 <_printf_i+0x182>
 800b958:	4615      	mov	r5, r2
 800b95a:	e7bb      	b.n	800b8d4 <_printf_i+0x130>
 800b95c:	682b      	ldr	r3, [r5, #0]
 800b95e:	6826      	ldr	r6, [r4, #0]
 800b960:	6961      	ldr	r1, [r4, #20]
 800b962:	1d18      	adds	r0, r3, #4
 800b964:	6028      	str	r0, [r5, #0]
 800b966:	0635      	lsls	r5, r6, #24
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	d501      	bpl.n	800b970 <_printf_i+0x1cc>
 800b96c:	6019      	str	r1, [r3, #0]
 800b96e:	e002      	b.n	800b976 <_printf_i+0x1d2>
 800b970:	0670      	lsls	r0, r6, #25
 800b972:	d5fb      	bpl.n	800b96c <_printf_i+0x1c8>
 800b974:	8019      	strh	r1, [r3, #0]
 800b976:	2300      	movs	r3, #0
 800b978:	6123      	str	r3, [r4, #16]
 800b97a:	4615      	mov	r5, r2
 800b97c:	e7ba      	b.n	800b8f4 <_printf_i+0x150>
 800b97e:	682b      	ldr	r3, [r5, #0]
 800b980:	1d1a      	adds	r2, r3, #4
 800b982:	602a      	str	r2, [r5, #0]
 800b984:	681d      	ldr	r5, [r3, #0]
 800b986:	6862      	ldr	r2, [r4, #4]
 800b988:	2100      	movs	r1, #0
 800b98a:	4628      	mov	r0, r5
 800b98c:	f7f4 fca8 	bl	80002e0 <memchr>
 800b990:	b108      	cbz	r0, 800b996 <_printf_i+0x1f2>
 800b992:	1b40      	subs	r0, r0, r5
 800b994:	6060      	str	r0, [r4, #4]
 800b996:	6863      	ldr	r3, [r4, #4]
 800b998:	6123      	str	r3, [r4, #16]
 800b99a:	2300      	movs	r3, #0
 800b99c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b9a0:	e7a8      	b.n	800b8f4 <_printf_i+0x150>
 800b9a2:	6923      	ldr	r3, [r4, #16]
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	4649      	mov	r1, r9
 800b9a8:	4640      	mov	r0, r8
 800b9aa:	47d0      	blx	sl
 800b9ac:	3001      	adds	r0, #1
 800b9ae:	d0ab      	beq.n	800b908 <_printf_i+0x164>
 800b9b0:	6823      	ldr	r3, [r4, #0]
 800b9b2:	079b      	lsls	r3, r3, #30
 800b9b4:	d413      	bmi.n	800b9de <_printf_i+0x23a>
 800b9b6:	68e0      	ldr	r0, [r4, #12]
 800b9b8:	9b03      	ldr	r3, [sp, #12]
 800b9ba:	4298      	cmp	r0, r3
 800b9bc:	bfb8      	it	lt
 800b9be:	4618      	movlt	r0, r3
 800b9c0:	e7a4      	b.n	800b90c <_printf_i+0x168>
 800b9c2:	2301      	movs	r3, #1
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	4649      	mov	r1, r9
 800b9c8:	4640      	mov	r0, r8
 800b9ca:	47d0      	blx	sl
 800b9cc:	3001      	adds	r0, #1
 800b9ce:	d09b      	beq.n	800b908 <_printf_i+0x164>
 800b9d0:	3501      	adds	r5, #1
 800b9d2:	68e3      	ldr	r3, [r4, #12]
 800b9d4:	9903      	ldr	r1, [sp, #12]
 800b9d6:	1a5b      	subs	r3, r3, r1
 800b9d8:	42ab      	cmp	r3, r5
 800b9da:	dcf2      	bgt.n	800b9c2 <_printf_i+0x21e>
 800b9dc:	e7eb      	b.n	800b9b6 <_printf_i+0x212>
 800b9de:	2500      	movs	r5, #0
 800b9e0:	f104 0619 	add.w	r6, r4, #25
 800b9e4:	e7f5      	b.n	800b9d2 <_printf_i+0x22e>
 800b9e6:	bf00      	nop
 800b9e8:	0800d145 	.word	0x0800d145
 800b9ec:	0800d156 	.word	0x0800d156

0800b9f0 <__retarget_lock_acquire_recursive>:
 800b9f0:	4770      	bx	lr

0800b9f2 <__retarget_lock_release_recursive>:
 800b9f2:	4770      	bx	lr

0800b9f4 <memcpy>:
 800b9f4:	440a      	add	r2, r1
 800b9f6:	4291      	cmp	r1, r2
 800b9f8:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9fc:	d100      	bne.n	800ba00 <memcpy+0xc>
 800b9fe:	4770      	bx	lr
 800ba00:	b510      	push	{r4, lr}
 800ba02:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba06:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba0a:	4291      	cmp	r1, r2
 800ba0c:	d1f9      	bne.n	800ba02 <memcpy+0xe>
 800ba0e:	bd10      	pop	{r4, pc}

0800ba10 <memmove>:
 800ba10:	4288      	cmp	r0, r1
 800ba12:	b510      	push	{r4, lr}
 800ba14:	eb01 0402 	add.w	r4, r1, r2
 800ba18:	d902      	bls.n	800ba20 <memmove+0x10>
 800ba1a:	4284      	cmp	r4, r0
 800ba1c:	4623      	mov	r3, r4
 800ba1e:	d807      	bhi.n	800ba30 <memmove+0x20>
 800ba20:	1e43      	subs	r3, r0, #1
 800ba22:	42a1      	cmp	r1, r4
 800ba24:	d008      	beq.n	800ba38 <memmove+0x28>
 800ba26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba2e:	e7f8      	b.n	800ba22 <memmove+0x12>
 800ba30:	4402      	add	r2, r0
 800ba32:	4601      	mov	r1, r0
 800ba34:	428a      	cmp	r2, r1
 800ba36:	d100      	bne.n	800ba3a <memmove+0x2a>
 800ba38:	bd10      	pop	{r4, pc}
 800ba3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba42:	e7f7      	b.n	800ba34 <memmove+0x24>

0800ba44 <_realloc_r>:
 800ba44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba48:	4680      	mov	r8, r0
 800ba4a:	4614      	mov	r4, r2
 800ba4c:	460e      	mov	r6, r1
 800ba4e:	b921      	cbnz	r1, 800ba5a <_realloc_r+0x16>
 800ba50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba54:	4611      	mov	r1, r2
 800ba56:	f7ff bc2b 	b.w	800b2b0 <_malloc_r>
 800ba5a:	b92a      	cbnz	r2, 800ba68 <_realloc_r+0x24>
 800ba5c:	f7ff fbbc 	bl	800b1d8 <_free_r>
 800ba60:	4625      	mov	r5, r4
 800ba62:	4628      	mov	r0, r5
 800ba64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba68:	f000 f81b 	bl	800baa2 <_malloc_usable_size_r>
 800ba6c:	4284      	cmp	r4, r0
 800ba6e:	4607      	mov	r7, r0
 800ba70:	d802      	bhi.n	800ba78 <_realloc_r+0x34>
 800ba72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ba76:	d812      	bhi.n	800ba9e <_realloc_r+0x5a>
 800ba78:	4621      	mov	r1, r4
 800ba7a:	4640      	mov	r0, r8
 800ba7c:	f7ff fc18 	bl	800b2b0 <_malloc_r>
 800ba80:	4605      	mov	r5, r0
 800ba82:	2800      	cmp	r0, #0
 800ba84:	d0ed      	beq.n	800ba62 <_realloc_r+0x1e>
 800ba86:	42bc      	cmp	r4, r7
 800ba88:	4622      	mov	r2, r4
 800ba8a:	4631      	mov	r1, r6
 800ba8c:	bf28      	it	cs
 800ba8e:	463a      	movcs	r2, r7
 800ba90:	f7ff ffb0 	bl	800b9f4 <memcpy>
 800ba94:	4631      	mov	r1, r6
 800ba96:	4640      	mov	r0, r8
 800ba98:	f7ff fb9e 	bl	800b1d8 <_free_r>
 800ba9c:	e7e1      	b.n	800ba62 <_realloc_r+0x1e>
 800ba9e:	4635      	mov	r5, r6
 800baa0:	e7df      	b.n	800ba62 <_realloc_r+0x1e>

0800baa2 <_malloc_usable_size_r>:
 800baa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800baa6:	1f18      	subs	r0, r3, #4
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	bfbc      	itt	lt
 800baac:	580b      	ldrlt	r3, [r1, r0]
 800baae:	18c0      	addlt	r0, r0, r3
 800bab0:	4770      	bx	lr
	...

0800bab4 <_init>:
 800bab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bab6:	bf00      	nop
 800bab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baba:	bc08      	pop	{r3}
 800babc:	469e      	mov	lr, r3
 800babe:	4770      	bx	lr

0800bac0 <_fini>:
 800bac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bac2:	bf00      	nop
 800bac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bac6:	bc08      	pop	{r3}
 800bac8:	469e      	mov	lr, r3
 800baca:	4770      	bx	lr
