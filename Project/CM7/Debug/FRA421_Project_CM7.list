
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015ec  0800ab58  0800ab58  0001ab58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c144  0800c144  000200e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c144  0800c144  0001c144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c14c  0800c14c  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c14c  0800c14c  0001c14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c150  0800c150  0001c150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  24000000  0800c154  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000020  0800c174  00020020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000080  0800c1d4  00020080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b5c  240000e0  0800c234  000200e0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000c3c  0800c234  00020c3c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f46b  00000000  00000000  0002010e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000035ab  00000000  00000000  0003f579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001418  00000000  00000000  00042b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012d8  00000000  00000000  00043f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c21b  00000000  00000000  00045218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b5a4  00000000  00000000  00081433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186ca2  00000000  00000000  0009c9d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00223679  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005514  00000000  00000000  002236cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e0 	.word	0x240000e0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800ab40 	.word	0x0800ab40

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000e4 	.word	0x240000e4
 80002d4:	0800ab40 	.word	0x0800ab40

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	789a      	ldrb	r2, [r3, #2]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	785a      	ldrb	r2, [r3, #1]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78da      	ldrb	r2, [r3, #3]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791a      	ldrb	r2, [r3, #4]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795a      	ldrb	r2, [r3, #5]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	715a      	strb	r2, [r3, #5]
	dst->actionPositon = src->actionPositon;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	799a      	ldrb	r2, [r3, #6]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	719a      	strb	r2, [r3, #6]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b088      	sub	sp, #32
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3314      	adds	r3, #20
 800064a:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800064c:	2300      	movs	r3, #0
 800064e:	76fb      	strb	r3, [r7, #27]
 8000650:	e00b      	b.n	800066a <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	69f9      	ldr	r1, [r7, #28]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffbf 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	330c      	adds	r3, #12
 8000662:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000664:	7efb      	ldrb	r3, [r7, #27]
 8000666:	3301      	adds	r3, #1
 8000668:	76fb      	strb	r3, [r7, #27]
 800066a:	7efb      	ldrb	r3, [r7, #27]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d9f0      	bls.n	8000652 <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 800067a:	b580      	push	{r7, lr}
 800067c:	b088      	sub	sp, #32
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000694:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000696:	2300      	movs	r3, #0
 8000698:	76fb      	strb	r3, [r7, #27]
 800069a:	e00b      	b.n	80006b4 <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	69f9      	ldr	r1, [r7, #28]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff9a 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	330c      	adds	r3, #12
 80006ac:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80006ae:	7efb      	ldrb	r3, [r7, #27]
 80006b0:	3301      	adds	r3, #1
 80006b2:	76fb      	strb	r3, [r7, #27]
 80006b4:	7efb      	ldrb	r3, [r7, #27]
 80006b6:	2b05      	cmp	r3, #5
 80006b8:	d9f0      	bls.n	800069c <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80006d2:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80006da:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80006e2:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80006ea:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80006ec:	2306      	movs	r3, #6
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e00c      	b.n	800070c <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6978      	ldr	r0, [r7, #20]
 80006f6:	f7ff ff71 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3b0c      	subs	r3, #12
 80006fe:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3b0c      	subs	r3, #12
 8000704:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3b01      	subs	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	dcef      	bgt.n	80006f2 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af04      	add	r7, sp, #16
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	3304      	adds	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3304      	adds	r3, #4
 8000730:	613b      	str	r3, [r7, #16]

	ptrPlayer1 = &state_game->player[0];
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	3304      	adds	r3, #4
 8000736:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800073e:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000746:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b02      	cmp	r3, #2
 800074c:	f000 8122 	beq.w	8000994 <GAME_PLAY_Management+0x278>
 8000750:	2b02      	cmp	r3, #2
 8000752:	f300 8124 	bgt.w	800099e <GAME_PLAY_Management+0x282>
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <GAME_PLAY_Management+0x46>
 800075a:	2b01      	cmp	r3, #1
 800075c:	f000 8116 	beq.w	800098c <GAME_PLAY_Management+0x270>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
	case second_player:
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 8000760:	e11d      	b.n	800099e <GAME_PLAY_Management+0x282>
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000762:	4b91      	ldr	r3, [pc, #580]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 8000764:	2200      	movs	r2, #0
 8000766:	9202      	str	r2, [sp, #8]
 8000768:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800076c:	9201      	str	r2, [sp, #4]
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	9200      	str	r2, [sp, #0]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a8d      	ldr	r2, [pc, #564]	; (80009ac <GAME_PLAY_Management+0x290>)
 8000776:	2105      	movs	r1, #5
 8000778:	2005      	movs	r0, #5
 800077a:	f001 fa16 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800077e:	4b8a      	ldr	r3, [pc, #552]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 8000780:	2200      	movs	r2, #0
 8000782:	9202      	str	r2, [sp, #8]
 8000784:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000788:	9201      	str	r2, [sp, #4]
 800078a:	685a      	ldr	r2, [r3, #4]
 800078c:	9200      	str	r2, [sp, #0]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a87      	ldr	r2, [pc, #540]	; (80009b0 <GAME_PLAY_Management+0x294>)
 8000792:	210f      	movs	r1, #15
 8000794:	2000      	movs	r0, #0
 8000796:	f001 fa08 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800079a:	4b86      	ldr	r3, [pc, #536]	; (80009b4 <GAME_PLAY_Management+0x298>)
 800079c:	2200      	movs	r2, #0
 800079e:	9202      	str	r2, [sp, #8]
 80007a0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80007a4:	9201      	str	r2, [sp, #4]
 80007a6:	685a      	ldr	r2, [r3, #4]
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a82      	ldr	r2, [pc, #520]	; (80009b8 <GAME_PLAY_Management+0x29c>)
 80007ae:	2123      	movs	r1, #35	; 0x23
 80007b0:	2008      	movs	r0, #8
 80007b2:	f001 f9fa 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80007b6:	4b7f      	ldr	r3, [pc, #508]	; (80009b4 <GAME_PLAY_Management+0x298>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	9202      	str	r2, [sp, #8]
 80007bc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	9200      	str	r2, [sp, #0]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a7c      	ldr	r2, [pc, #496]	; (80009bc <GAME_PLAY_Management+0x2a0>)
 80007ca:	213c      	movs	r1, #60	; 0x3c
 80007cc:	2019      	movs	r0, #25
 80007ce:	f001 f9ec 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80007d2:	4b75      	ldr	r3, [pc, #468]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	9202      	str	r2, [sp, #8]
 80007d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007dc:	9201      	str	r2, [sp, #4]
 80007de:	685a      	ldr	r2, [r3, #4]
 80007e0:	9200      	str	r2, [sp, #0]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	4a72      	ldr	r2, [pc, #456]	; (80009b0 <GAME_PLAY_Management+0x294>)
 80007e6:	214b      	movs	r1, #75	; 0x4b
 80007e8:	2000      	movs	r0, #0
 80007ea:	f001 f9de 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80007ee:	4b6e      	ldr	r3, [pc, #440]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	9202      	str	r2, [sp, #8]
 80007f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f8:	9201      	str	r2, [sp, #4]
 80007fa:	685a      	ldr	r2, [r3, #4]
 80007fc:	9200      	str	r2, [sp, #0]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a6f      	ldr	r2, [pc, #444]	; (80009c0 <GAME_PLAY_Management+0x2a4>)
 8000802:	215a      	movs	r1, #90	; 0x5a
 8000804:	2000      	movs	r0, #0
 8000806:	f001 f9d0 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800080a:	4b67      	ldr	r3, [pc, #412]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 800080c:	2200      	movs	r2, #0
 800080e:	9202      	str	r2, [sp, #8]
 8000810:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000814:	9201      	str	r2, [sp, #4]
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	9200      	str	r2, [sp, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a69      	ldr	r2, [pc, #420]	; (80009c4 <GAME_PLAY_Management+0x2a8>)
 800081e:	215a      	movs	r1, #90	; 0x5a
 8000820:	205d      	movs	r0, #93	; 0x5d
 8000822:	f001 f9c2 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000826:	4b60      	ldr	r3, [pc, #384]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 8000828:	2200      	movs	r2, #0
 800082a:	9202      	str	r2, [sp, #8]
 800082c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000830:	9201      	str	r2, [sp, #4]
 8000832:	685a      	ldr	r2, [r3, #4]
 8000834:	9200      	str	r2, [sp, #0]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a63      	ldr	r2, [pc, #396]	; (80009c8 <GAME_PLAY_Management+0x2ac>)
 800083a:	2169      	movs	r1, #105	; 0x69
 800083c:	2000      	movs	r0, #0
 800083e:	f001 f9b4 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000842:	4b59      	ldr	r3, [pc, #356]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 8000844:	2200      	movs	r2, #0
 8000846:	9202      	str	r2, [sp, #8]
 8000848:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800084c:	9201      	str	r2, [sp, #4]
 800084e:	685a      	ldr	r2, [r3, #4]
 8000850:	9200      	str	r2, [sp, #0]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a5d      	ldr	r2, [pc, #372]	; (80009cc <GAME_PLAY_Management+0x2b0>)
 8000856:	2169      	movs	r1, #105	; 0x69
 8000858:	2064      	movs	r0, #100	; 0x64
 800085a:	f001 f9a6 	bl	8001baa <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800085e:	4b52      	ldr	r3, [pc, #328]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 8000860:	2200      	movs	r2, #0
 8000862:	9202      	str	r2, [sp, #8]
 8000864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000868:	9201      	str	r2, [sp, #4]
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	9200      	str	r2, [sp, #0]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a57      	ldr	r2, [pc, #348]	; (80009d0 <GAME_PLAY_Management+0x2b4>)
 8000872:	2105      	movs	r1, #5
 8000874:	2005      	movs	r0, #5
 8000876:	f001 f9e2 	bl	8001c3e <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800087a:	4b4b      	ldr	r3, [pc, #300]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 800087c:	2200      	movs	r2, #0
 800087e:	9202      	str	r2, [sp, #8]
 8000880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000884:	9201      	str	r2, [sp, #4]
 8000886:	685a      	ldr	r2, [r3, #4]
 8000888:	9200      	str	r2, [sp, #0]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a48      	ldr	r2, [pc, #288]	; (80009b0 <GAME_PLAY_Management+0x294>)
 800088e:	210f      	movs	r1, #15
 8000890:	2000      	movs	r0, #0
 8000892:	f001 f9d4 	bl	8001c3e <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000896:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <GAME_PLAY_Management+0x298>)
 8000898:	2200      	movs	r2, #0
 800089a:	9202      	str	r2, [sp, #8]
 800089c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80008a0:	9201      	str	r2, [sp, #4]
 80008a2:	685a      	ldr	r2, [r3, #4]
 80008a4:	9200      	str	r2, [sp, #0]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a43      	ldr	r2, [pc, #268]	; (80009b8 <GAME_PLAY_Management+0x29c>)
 80008aa:	2123      	movs	r1, #35	; 0x23
 80008ac:	2008      	movs	r0, #8
 80008ae:	f001 f9c6 	bl	8001c3e <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80008b2:	4b40      	ldr	r3, [pc, #256]	; (80009b4 <GAME_PLAY_Management+0x298>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	9202      	str	r2, [sp, #8]
 80008b8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008bc:	9201      	str	r2, [sp, #4]
 80008be:	685a      	ldr	r2, [r3, #4]
 80008c0:	9200      	str	r2, [sp, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a3d      	ldr	r2, [pc, #244]	; (80009bc <GAME_PLAY_Management+0x2a0>)
 80008c6:	213c      	movs	r1, #60	; 0x3c
 80008c8:	2014      	movs	r0, #20
 80008ca:	f001 f9b8 	bl	8001c3e <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008ce:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	9200      	str	r2, [sp, #0]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a33      	ldr	r2, [pc, #204]	; (80009b0 <GAME_PLAY_Management+0x294>)
 80008e2:	214b      	movs	r1, #75	; 0x4b
 80008e4:	2000      	movs	r0, #0
 80008e6:	f001 f9aa 	bl	8001c3e <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	9202      	str	r2, [sp, #8]
 80008f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f4:	9201      	str	r2, [sp, #4]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <GAME_PLAY_Management+0x2a4>)
 80008fe:	215a      	movs	r1, #90	; 0x5a
 8000900:	2000      	movs	r0, #0
 8000902:	f001 f99c 	bl	8001c3e <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 8000908:	2200      	movs	r2, #0
 800090a:	9202      	str	r2, [sp, #8]
 800090c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000910:	9201      	str	r2, [sp, #4]
 8000912:	685a      	ldr	r2, [r3, #4]
 8000914:	9200      	str	r2, [sp, #0]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a2a      	ldr	r2, [pc, #168]	; (80009c4 <GAME_PLAY_Management+0x2a8>)
 800091a:	215a      	movs	r1, #90	; 0x5a
 800091c:	205d      	movs	r0, #93	; 0x5d
 800091e:	f001 f98e 	bl	8001c3e <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000922:	4b21      	ldr	r3, [pc, #132]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 8000924:	2200      	movs	r2, #0
 8000926:	9202      	str	r2, [sp, #8]
 8000928:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800092c:	9201      	str	r2, [sp, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	9200      	str	r2, [sp, #0]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a24      	ldr	r2, [pc, #144]	; (80009c8 <GAME_PLAY_Management+0x2ac>)
 8000936:	2169      	movs	r1, #105	; 0x69
 8000938:	2000      	movs	r0, #0
 800093a:	f001 f980 	bl	8001c3e <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <GAME_PLAY_Management+0x28c>)
 8000940:	2200      	movs	r2, #0
 8000942:	9202      	str	r2, [sp, #8]
 8000944:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000948:	9201      	str	r2, [sp, #4]
 800094a:	685a      	ldr	r2, [r3, #4]
 800094c:	9200      	str	r2, [sp, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <GAME_PLAY_Management+0x2b0>)
 8000952:	2169      	movs	r1, #105	; 0x69
 8000954:	2064      	movs	r0, #100	; 0x64
 8000956:	f001 f972 	bl	8001c3e <ST7735_WriteString1>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 800095a:	2108      	movs	r1, #8
 800095c:	481d      	ldr	r0, [pc, #116]	; (80009d4 <GAME_PLAY_Management+0x2b8>)
 800095e:	f004 ff95 	bl	800588c <HAL_GPIO_ReadPin>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10c      	bne.n	8000982 <GAME_PLAY_Management+0x266>
			ptrPlayer1->life_point = 4000;
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800096e:	801a      	strh	r2, [r3, #0]
			ptrPlayer2->life_point = 4000;
 8000970:	693b      	ldr	r3, [r7, #16]
 8000972:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000976:	801a      	strh	r2, [r3, #0]
			state_game->player_state = first_player;
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	2201      	movs	r2, #1
 800097c:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000980:	e00d      	b.n	800099e <GAME_PLAY_Management+0x282>
			state_game->test = 98;
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	2262      	movs	r2, #98	; 0x62
 8000986:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 800098a:	e008      	b.n	800099e <GAME_PLAY_Management+0x282>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 800098c:	6839      	ldr	r1, [r7, #0]
 800098e:	6878      	ldr	r0, [r7, #4]
 8000990:	f000 f822 	bl	80009d8 <GAME_PLAY_Phase_Management>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000994:	6839      	ldr	r1, [r7, #0]
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 f81e 	bl	80009d8 <GAME_PLAY_Phase_Management>
		break;
 800099c:	bf00      	nop
}
 800099e:	bf00      	nop
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	24000008 	.word	0x24000008
 80009ac:	0800ab58 	.word	0x0800ab58
 80009b0:	0800ab64 	.word	0x0800ab64
 80009b4:	24000010 	.word	0x24000010
 80009b8:	0800ab78 	.word	0x0800ab78
 80009bc:	0800ab84 	.word	0x0800ab84
 80009c0:	0800ab8c 	.word	0x0800ab8c
 80009c4:	0800ab9c 	.word	0x0800ab9c
 80009c8:	0800aba4 	.word	0x0800aba4
 80009cc:	0800abb4 	.word	0x0800abb4
 80009d0:	0800abb8 	.word	0x0800abb8
 80009d4:	58020000 	.word	0x58020000

080009d8 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
 80009e0:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Chain_Phase
	} STATE;
	STATE = state_game->STATE;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 80009e8:	77fb      	strb	r3, [r7, #31]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 80009f0:	77bb      	strb	r3, [r7, #30]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	3304      	adds	r3, #4
 80009f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	Player *ptrPlayerDef = state_game->player;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	3304      	adds	r3, #4
 80009fc:	61bb      	str	r3, [r7, #24]

	if (state_game->player_state == first_player) {
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d107      	bne.n	8000a18 <GAME_PLAY_Phase_Management+0x40>
		ptrPlayerAtk = &state_game->player[0];
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	3304      	adds	r3, #4
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		ptrPlayerDef = &state_game->player[1];
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000a14:	61bb      	str	r3, [r7, #24]
 8000a16:	e00b      	b.n	8000a30 <GAME_PLAY_Phase_Management+0x58>
	} else if (state_game->player_state == first_player) {
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d106      	bne.n	8000a30 <GAME_PLAY_Phase_Management+0x58>
		ptrPlayerAtk = &state_game->player[1];
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
		ptrPlayerDef = &state_game->player[0];
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	61bb      	str	r3, [r7, #24]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000a30:	7ffb      	ldrb	r3, [r7, #31]
 8000a32:	2b03      	cmp	r3, #3
 8000a34:	f200 8298 	bhi.w	8000f68 <GAME_PLAY_Phase_Management+0x590>
 8000a38:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <GAME_PLAY_Phase_Management+0x68>)
 8000a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3e:	bf00      	nop
 8000a40:	08000a51 	.word	0x08000a51
 8000a44:	08000a79 	.word	0x08000a79
 8000a48:	08000f5f 	.word	0x08000f5f
 8000a4c:	08000f5f 	.word	0x08000f5f
	case Drawn_Phase:
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000a50:	2101      	movs	r1, #1
 8000a52:	489e      	ldr	r0, [pc, #632]	; (8000ccc <GAME_PLAY_Phase_Management+0x2f4>)
 8000a54:	f004 ff1a 	bl	800588c <HAL_GPIO_ReadPin>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	f040 8281 	bne.w	8000f62 <GAME_PLAY_Phase_Management+0x58a>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	2201      	movs	r2, #1
 8000a64:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000a76:	e274      	b.n	8000f62 <GAME_PLAY_Phase_Management+0x58a>
	case Main_Phase:

		switch (MAIN)
 8000a78:	7fbb      	ldrb	r3, [r7, #30]
 8000a7a:	2b06      	cmp	r3, #6
 8000a7c:	f200 8273 	bhi.w	8000f66 <GAME_PLAY_Phase_Management+0x58e>
 8000a80:	a201      	add	r2, pc, #4	; (adr r2, 8000a88 <GAME_PLAY_Phase_Management+0xb0>)
 8000a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a86:	bf00      	nop
 8000a88:	08000aa5 	.word	0x08000aa5
 8000a8c:	08000acd 	.word	0x08000acd
 8000a90:	08000bcb 	.word	0x08000bcb
 8000a94:	08000d5b 	.word	0x08000d5b
 8000a98:	08000f11 	.word	0x08000f11
 8000a9c:	08000eb1 	.word	0x08000eb1
 8000aa0:	08000e45 	.word	0x08000e45
		{
		case await:
			if (state_game->action == 0)
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d105      	bne.n	8000ab8 <GAME_PLAY_Phase_Management+0xe0>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aae:	6839      	ldr	r1, [r7, #0]
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 fa63 	bl	8000f7c <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000ab6:	e244      	b.n	8000f42 <GAME_PLAY_Phase_Management+0x56a>
			else if (state_game->action == 1)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b01      	cmp	r3, #1
 8000abe:	f040 8240 	bne.w	8000f42 <GAME_PLAY_Phase_Management+0x56a>
				state_game->MAIN = select_position;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000aca:	e23a      	b.n	8000f42 <GAME_PLAY_Phase_Management+0x56a>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ace:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000ad2:	613b      	str	r3, [r7, #16]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8000ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 1)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d15e      	bne.n	8000ba2 <GAME_PLAY_Phase_Management+0x1ca>
			{
				if (state_game->player_state == first_player)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d135      	bne.n	8000b5a <GAME_PLAY_Phase_Management+0x182>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000aee:	2108      	movs	r1, #8
 8000af0:	4876      	ldr	r0, [pc, #472]	; (8000ccc <GAME_PLAY_Phase_Management+0x2f4>)
 8000af2:	f004 fecb 	bl	800588c <HAL_GPIO_ReadPin>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d106      	bne.n	8000b0a <GAME_PLAY_Phase_Management+0x132>
					{
						ptrYugiohCard_src->cardState = 1;
 8000afc:	693b      	ldr	r3, [r7, #16]
 8000afe:	2201      	movs	r2, #1
 8000b00:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2202      	movs	r2, #2
 8000b06:	701a      	strb	r2, [r3, #0]
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 8000b08:	e21d      	b.n	8000f46 <GAME_PLAY_Phase_Management+0x56e>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000b0a:	2102      	movs	r1, #2
 8000b0c:	4870      	ldr	r0, [pc, #448]	; (8000cd0 <GAME_PLAY_Phase_Management+0x2f8>)
 8000b0e:	f004 febd 	bl	800588c <HAL_GPIO_ReadPin>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d106      	bne.n	8000b26 <GAME_PLAY_Phase_Management+0x14e>
						ptrYugiohCard_src->cardState = 0;
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2202      	movs	r2, #2
 8000b22:	701a      	strb	r2, [r3, #0]
			break;
 8000b24:	e20f      	b.n	8000f46 <GAME_PLAY_Phase_Management+0x56e>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000b26:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b2a:	486a      	ldr	r0, [pc, #424]	; (8000cd4 <GAME_PLAY_Phase_Management+0x2fc>)
 8000b2c:	f004 feae 	bl	800588c <HAL_GPIO_ReadPin>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d104      	bne.n	8000b40 <GAME_PLAY_Phase_Management+0x168>
						state_game->test = 22;
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	2216      	movs	r2, #22
 8000b3a:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000b3e:	e202      	b.n	8000f46 <GAME_PLAY_Phase_Management+0x56e>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000b40:	2104      	movs	r1, #4
 8000b42:	4862      	ldr	r0, [pc, #392]	; (8000ccc <GAME_PLAY_Phase_Management+0x2f4>)
 8000b44:	f004 fea2 	bl	800588c <HAL_GPIO_ReadPin>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f040 81fb 	bne.w	8000f46 <GAME_PLAY_Phase_Management+0x56e>
						state_game->test = 33;
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	2221      	movs	r2, #33	; 0x21
 8000b54:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000b58:	e1f5      	b.n	8000f46 <GAME_PLAY_Phase_Management+0x56e>
				else if (state_game->player_state == second_player)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	f040 81f0 	bne.w	8000f46 <GAME_PLAY_Phase_Management+0x56e>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000b66:	2104      	movs	r1, #4
 8000b68:	4858      	ldr	r0, [pc, #352]	; (8000ccc <GAME_PLAY_Phase_Management+0x2f4>)
 8000b6a:	f004 fe8f 	bl	800588c <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d106      	bne.n	8000b82 <GAME_PLAY_Phase_Management+0x1aa>
						ptrYugiohCard_src->cardState = 1;
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	2201      	movs	r2, #1
 8000b78:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	701a      	strb	r2, [r3, #0]
			break;
 8000b80:	e1e1      	b.n	8000f46 <GAME_PLAY_Phase_Management+0x56e>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000b82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b86:	4853      	ldr	r0, [pc, #332]	; (8000cd4 <GAME_PLAY_Phase_Management+0x2fc>)
 8000b88:	f004 fe80 	bl	800588c <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 81d9 	bne.w	8000f46 <GAME_PLAY_Phase_Management+0x56e>
						ptrYugiohCard_src->cardState = 0;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	2200      	movs	r2, #0
 8000b98:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
			break;
 8000ba0:	e1d1      	b.n	8000f46 <GAME_PLAY_Phase_Management+0x56e>
			else if (state_game->action == 2)
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	f040 81cd 	bne.w	8000f46 <GAME_PLAY_Phase_Management+0x56e>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000bae:	6938      	ldr	r0, [r7, #16]
 8000bb0:	f7ff fd14 	bl	80005dc <YUGIOH_card_copy>
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000bb6:	f7ff fd60 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
				state_game->action = 3;
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000bc8:	e1bd      	b.n	8000f46 <GAME_PLAY_Phase_Management+0x56e>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000bd0:	613b      	str	r3, [r7, #16]

			if (state_game->action == 3)
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b03      	cmp	r3, #3
 8000bd8:	f040 81b7 	bne.w	8000f4a <GAME_PLAY_Phase_Management+0x572>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	785b      	ldrb	r3, [r3, #1]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d12a      	bne.n	8000c3a <GAME_PLAY_Phase_Management+0x262>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	799a      	ldrb	r2, [r3, #6]
 8000be8:	4b3b      	ldr	r3, [pc, #236]	; (8000cd8 <GAME_PLAY_Phase_Management+0x300>)
 8000bea:	fba3 1302 	umull	r1, r3, r3, r2
 8000bee:	0899      	lsrs	r1, r3, #2
 8000bf0:	460b      	mov	r3, r1
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	440b      	add	r3, r1
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	733b      	strb	r3, [r7, #12]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000bfc:	7b3a      	ldrb	r2, [r7, #12]
 8000bfe:	4613      	mov	r3, r2
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	4413      	add	r3, r2
 8000c04:	009b      	lsls	r3, r3, #2
 8000c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c08:	4413      	add	r3, r2
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	62bb      	str	r3, [r7, #40]	; 0x28

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000c0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000c10:	6938      	ldr	r0, [r7, #16]
 8000c12:	f7ff fce3 	bl	80005dc <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c18:	f7ff fd2f 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c1e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000c22:	6939      	ldr	r1, [r7, #16]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fcd9 	bl	80005dc <YUGIOH_card_copy>

					state_game->action = 0;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 8000c38:	e187      	b.n	8000f4a <GAME_PLAY_Phase_Management+0x572>
				else if (ptrYugiohCard_src->cardType == 2)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	785b      	ldrb	r3, [r3, #1]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d14c      	bne.n	8000cdc <GAME_PLAY_Phase_Management+0x304>
					state_game->count_chain = 0;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->actionPositon == 1){
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	799b      	ldrb	r3, [r3, #6]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d112      	bne.n	8000c76 <GAME_PLAY_Phase_Management+0x29e>
						state_game->test = 33;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	2221      	movs	r2, #33	; 0x21
 8000c54:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000c58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000c5a:	f7ff fd0e 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2204      	movs	r2, #4
 8000c62:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8000c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c66:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
						state_game->MAIN = chaining_main_DEF;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	2206      	movs	r2, #6
 8000c70:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000c74:	e169      	b.n	8000f4a <GAME_PLAY_Phase_Management+0x572>
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000c76:	693b      	ldr	r3, [r7, #16]
 8000c78:	799a      	ldrb	r2, [r3, #6]
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <GAME_PLAY_Phase_Management+0x300>)
 8000c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c80:	0899      	lsrs	r1, r3, #2
 8000c82:	460b      	mov	r3, r1
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	440b      	add	r3, r1
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	1ad3      	subs	r3, r2, r3
 8000c8c:	737b      	strb	r3, [r7, #13]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000c8e:	7b7a      	ldrb	r2, [r7, #13]
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c9a:	4413      	add	r3, r2
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	62bb      	str	r3, [r7, #40]	; 0x28
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000ca0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ca2:	6938      	ldr	r0, [r7, #16]
 8000ca4:	f7ff fc9a 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000ca8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000caa:	f7ff fce6 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000cb4:	6939      	ldr	r1, [r7, #16]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f7ff fc90 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000cca:	e13e      	b.n	8000f4a <GAME_PLAY_Phase_Management+0x572>
 8000ccc:	58020800 	.word	0x58020800
 8000cd0:	58020400 	.word	0x58020400
 8000cd4:	58021400 	.word	0x58021400
 8000cd8:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	785b      	ldrb	r3, [r3, #1]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	f040 8132 	bne.w	8000f4a <GAME_PLAY_Phase_Management+0x572>
					if (ptrYugiohCard_src->cardLevel < 7)
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	78db      	ldrb	r3, [r3, #3]
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d82a      	bhi.n	8000d44 <GAME_PLAY_Phase_Management+0x36c>
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	799a      	ldrb	r2, [r3, #6]
 8000cf2:	4b9f      	ldr	r3, [pc, #636]	; (8000f70 <GAME_PLAY_Phase_Management+0x598>)
 8000cf4:	fba3 1302 	umull	r1, r3, r3, r2
 8000cf8:	0899      	lsrs	r1, r3, #2
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	440b      	add	r3, r1
 8000d00:	005b      	lsls	r3, r3, #1
 8000d02:	1ad3      	subs	r3, r2, r3
 8000d04:	73bb      	strb	r3, [r7, #14]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000d06:	7bba      	ldrb	r2, [r7, #14]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	005b      	lsls	r3, r3, #1
 8000d0c:	4413      	add	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d12:	4413      	add	r3, r2
 8000d14:	3304      	adds	r3, #4
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000d1a:	6938      	ldr	r0, [r7, #16]
 8000d1c:	f7ff fc5e 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d22:	f7ff fcaa 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d28:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000d2c:	6939      	ldr	r1, [r7, #16]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fc54 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	2200      	movs	r2, #0
 8000d38:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000d42:	e102      	b.n	8000f4a <GAME_PLAY_Phase_Management+0x572>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000d46:	f7ff fc98 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2204      	movs	r2, #4
 8000d4e:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	2203      	movs	r2, #3
 8000d54:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000d58:	e0f7      	b.n	8000f4a <GAME_PLAY_Phase_Management+0x572>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000d60:	613b      	str	r3, [r7, #16]

			if (state_game->action == 4)
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d105      	bne.n	8000d76 <GAME_PLAY_Phase_Management+0x39e>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d6c:	6839      	ldr	r1, [r7, #0]
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 f904 	bl	8000f7c <Player_Reading_Card>
 8000d74:	e066      	b.n	8000e44 <GAME_PLAY_Phase_Management+0x46c>
			}
			else if (state_game->action == 5)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b05      	cmp	r3, #5
 8000d7c:	d105      	bne.n	8000d8a <GAME_PLAY_Phase_Management+0x3b2>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d80:	6839      	ldr	r1, [r7, #0]
 8000d82:	6878      	ldr	r0, [r7, #4]
 8000d84:	f000 f8fa 	bl	8000f7c <Player_Reading_Card>
 8000d88:	e05c      	b.n	8000e44 <GAME_PLAY_Phase_Management+0x46c>
			}
			else if (state_game->action == 6)
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	f040 80dd 	bne.w	8000f4e <GAME_PLAY_Phase_Management+0x576>
			{
				uint8_t monsterflag = 0 ;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000da0:	62bb      	str	r3, [r7, #40]	; 0x28
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da4:	78db      	ldrb	r3, [r3, #3]
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d804      	bhi.n	8000db4 <GAME_PLAY_Phase_Management+0x3dc>
				{
					monsterflag += 1;
 8000daa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dae:	3301      	adds	r3, #1
 8000db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}
				ptrYugiohCard_dst++;
 8000db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db6:	330c      	adds	r3, #12
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbc:	78db      	ldrb	r3, [r3, #3]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d804      	bhi.n	8000dcc <GAME_PLAY_Phase_Management+0x3f4>
				{
					monsterflag += 1;
 8000dc2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				}

				if (monsterflag == 2)
 8000dcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d12a      	bne.n	8000e2a <GAME_PLAY_Phase_Management+0x452>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	799a      	ldrb	r2, [r3, #6]
 8000dd8:	4b65      	ldr	r3, [pc, #404]	; (8000f70 <GAME_PLAY_Phase_Management+0x598>)
 8000dda:	fba3 1302 	umull	r1, r3, r3, r2
 8000dde:	0899      	lsrs	r1, r3, #2
 8000de0:	460b      	mov	r3, r1
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	440b      	add	r3, r1
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	73fb      	strb	r3, [r7, #15]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000dec:	7bfa      	ldrb	r2, [r7, #15]
 8000dee:	4613      	mov	r3, r2
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	4413      	add	r3, r2
 8000df4:	009b      	lsls	r3, r3, #2
 8000df6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000df8:	4413      	add	r3, r2
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000e00:	6938      	ldr	r0, [r7, #16]
 8000e02:	f7ff fbeb 	bl	80005dc <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000e06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e08:	f7ff fc37 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e0e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000e12:	6939      	ldr	r1, [r7, #16]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fbe1 	bl	80005dc <YUGIOH_card_copy>



					state_game->action = 0;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8000e28:	e00c      	b.n	8000e44 <GAME_PLAY_Phase_Management+0x46c>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000e2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000e2c:	f7ff fc25 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 8000e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e32:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8000e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e38:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4610      	mov	r0, r2
 8000e40:	f7ff fbcc 	bl	80005dc <YUGIOH_card_copy>

			else

			break;
		case chaining_main_DEF:
			state_game->test = 34;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2222      	movs	r2, #34	; 0x22
 8000e48:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			if(state_game->action == 4)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b04      	cmp	r3, #4
 8000e52:	d114      	bne.n	8000e7e <GAME_PLAY_Phase_Management+0x4a6>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e56:	6839      	ldr	r1, [r7, #0]
 8000e58:	6878      	ldr	r0, [r7, #4]
 8000e5a:	f000 f88f 	bl	8000f7c <Player_Reading_Card>
				state_game->test = 35;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	2223      	movs	r2, #35	; 0x23
 8000e62:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 8000e66:	2102      	movs	r1, #2
 8000e68:	4842      	ldr	r0, [pc, #264]	; (8000f74 <GAME_PLAY_Phase_Management+0x59c>)
 8000e6a:	f004 fd0f 	bl	800588c <HAL_GPIO_ReadPin>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d16e      	bne.n	8000f52 <GAME_PLAY_Phase_Management+0x57a>
					state_game->MAIN = activate_effect;
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	2204      	movs	r2, #4
 8000e78:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				ptrYugiohCard_dst++;
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 8000e7c:	e069      	b.n	8000f52 <GAME_PLAY_Phase_Management+0x57a>
			else if ((state_game->action == 5 )&& (ptrYugiohCard_dst->cardType == 3)){
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b05      	cmp	r3, #5
 8000e84:	d165      	bne.n	8000f52 <GAME_PLAY_Phase_Management+0x57a>
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	785b      	ldrb	r3, [r3, #1]
 8000e8a:	2b03      	cmp	r3, #3
 8000e8c:	d161      	bne.n	8000f52 <GAME_PLAY_Phase_Management+0x57a>
				ptrYugiohCard_dst++;
 8000e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e90:	330c      	adds	r3, #12
 8000e92:	62bb      	str	r3, [r7, #40]	; 0x28
				state_game->count_chain += 1;
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	785b      	ldrb	r3, [r3, #1]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_ATK;
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2204      	movs	r2, #4
 8000eac:	701a      	strb	r2, [r3, #0]
			break;
 8000eae:	e050      	b.n	8000f52 <GAME_PLAY_Phase_Management+0x57a>
		case chaining_main_ATK:
			ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8000eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
			if(state_game->action == 4)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b04      	cmp	r3, #4
 8000ebe:	d111      	bne.n	8000ee4 <GAME_PLAY_Phase_Management+0x50c>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ec2:	6839      	ldr	r1, [r7, #0]
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f000 f859 	bl	8000f7c <Player_Reading_Card>
				if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 8000eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ece:	482a      	ldr	r0, [pc, #168]	; (8000f78 <GAME_PLAY_Phase_Management+0x5a0>)
 8000ed0:	f004 fcdc 	bl	800588c <HAL_GPIO_ReadPin>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d13d      	bne.n	8000f56 <GAME_PLAY_Phase_Management+0x57e>
					state_game->MAIN = activate_effect;
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	2204      	movs	r2, #4
 8000ede:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			else if ((state_game->action == 5 )&& (ptrYugiohCard_dst->cardType == 3)){
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 8000ee2:	e038      	b.n	8000f56 <GAME_PLAY_Phase_Management+0x57e>
			else if ((state_game->action == 5 )&& (ptrYugiohCard_dst->cardType == 3)){
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b05      	cmp	r3, #5
 8000eea:	d134      	bne.n	8000f56 <GAME_PLAY_Phase_Management+0x57e>
 8000eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000eee:	785b      	ldrb	r3, [r3, #1]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	d130      	bne.n	8000f56 <GAME_PLAY_Phase_Management+0x57e>
				state_game->count_chain += 1;
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	785b      	ldrb	r3, [r3, #1]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_DEF;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2206      	movs	r2, #6
 8000f04:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	701a      	strb	r2, [r3, #0]
			break;
 8000f0e:	e022      	b.n	8000f56 <GAME_PLAY_Phase_Management+0x57e>
		case activate_effect:
			if(state_game->count_chain%2 == 0){
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	785b      	ldrb	r3, [r3, #1]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d11d      	bne.n	8000f5a <GAME_PLAY_Phase_Management+0x582>
				uint8_t counthing = state_game->count_chain;
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	785b      	ldrb	r3, [r3, #1]
 8000f22:	75fb      	strb	r3, [r7, #23]
//				ptrYugiohCard_chain = &ptrPlayerAtk->ChainBuffer;
				state_game->test = 14;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	220e      	movs	r2, #14
 8000f28:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				for (int i = 0; i <= counthing; i++) {
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
 8000f30:	e002      	b.n	8000f38 <GAME_PLAY_Phase_Management+0x560>
 8000f32:	6a3b      	ldr	r3, [r7, #32]
 8000f34:	3301      	adds	r3, #1
 8000f36:	623b      	str	r3, [r7, #32]
 8000f38:	7dfb      	ldrb	r3, [r7, #23]
 8000f3a:	6a3a      	ldr	r2, [r7, #32]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	ddf8      	ble.n	8000f32 <GAME_PLAY_Phase_Management+0x55a>
//						YUGIOH_Clear_Card_Enemy_Player(ptrPlayerAtk);
//					}
//					ptrYugiohCard_chain++;
				}
			}
			break;
 8000f40:	e00b      	b.n	8000f5a <GAME_PLAY_Phase_Management+0x582>
			break;
 8000f42:	bf00      	nop
 8000f44:	e00f      	b.n	8000f66 <GAME_PLAY_Phase_Management+0x58e>
			break;
 8000f46:	bf00      	nop
 8000f48:	e00d      	b.n	8000f66 <GAME_PLAY_Phase_Management+0x58e>
			break;
 8000f4a:	bf00      	nop
 8000f4c:	e00b      	b.n	8000f66 <GAME_PLAY_Phase_Management+0x58e>
			break;
 8000f4e:	bf00      	nop
 8000f50:	e009      	b.n	8000f66 <GAME_PLAY_Phase_Management+0x58e>
			break;
 8000f52:	bf00      	nop
 8000f54:	e007      	b.n	8000f66 <GAME_PLAY_Phase_Management+0x58e>
			break;
 8000f56:	bf00      	nop
 8000f58:	e005      	b.n	8000f66 <GAME_PLAY_Phase_Management+0x58e>
			break;
 8000f5a:	bf00      	nop
		}
		break;
 8000f5c:	e003      	b.n	8000f66 <GAME_PLAY_Phase_Management+0x58e>
		case Battle_Phase:
			break;
 8000f5e:	bf00      	nop
 8000f60:	e002      	b.n	8000f68 <GAME_PLAY_Phase_Management+0x590>
		break;
 8000f62:	bf00      	nop
 8000f64:	e000      	b.n	8000f68 <GAME_PLAY_Phase_Management+0x590>
		break;
 8000f66:	bf00      	nop
		case Chain_Phase:
			break;

	}
}
 8000f68:	bf00      	nop
 8000f6a:	3730      	adds	r7, #48	; 0x30
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	aaaaaaab 	.word	0xaaaaaaab
 8000f74:	58020400 	.word	0x58020400
 8000f78:	58021400 	.word	0x58021400

08000f7c <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3328      	adds	r3, #40	; 0x28
 8000f8c:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	4613      	mov	r3, r2
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	4413      	add	r3, r2
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	3328      	adds	r3, #40	; 0x28
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3314      	adds	r3, #20
 8000fa8:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000fb0:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	78db      	ldrb	r3, [r3, #3]
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d112      	bne.n	8000fe0 <Player_Reading_Card+0x64>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff fb82 	bl	80006c4 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fc0:	6979      	ldr	r1, [r7, #20]
 8000fc2:	69b8      	ldr	r0, [r7, #24]
 8000fc4:	f7ff fb0a 	bl	80005dc <YUGIOH_card_copy>

		RFID_Clear_Card_Bufffer(ptrRFID);
 8000fc8:	69f8      	ldr	r0, [r7, #28]
 8000fca:	f7ff fb32 	bl	8000632 <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	701a      	strb	r2, [r3, #0]
	}
}
 8000fe0:	bf00      	nop
 8000fe2:	3720      	adds	r7, #32
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}

08000fe8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fec:	4b3d      	ldr	r3, [pc, #244]	; (80010e4 <SystemInit+0xfc>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a3c      	ldr	r2, [pc, #240]	; (80010e4 <SystemInit+0xfc>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000ffc:	4b39      	ldr	r3, [pc, #228]	; (80010e4 <SystemInit+0xfc>)
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <SystemInit+0xfc>)
 8001002:	f043 0310 	orr.w	r3, r3, #16
 8001006:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001008:	4b37      	ldr	r3, [pc, #220]	; (80010e8 <SystemInit+0x100>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 030f 	and.w	r3, r3, #15
 8001010:	2b06      	cmp	r3, #6
 8001012:	d807      	bhi.n	8001024 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001014:	4b34      	ldr	r3, [pc, #208]	; (80010e8 <SystemInit+0x100>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f023 030f 	bic.w	r3, r3, #15
 800101c:	4a32      	ldr	r2, [pc, #200]	; (80010e8 <SystemInit+0x100>)
 800101e:	f043 0307 	orr.w	r3, r3, #7
 8001022:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001024:	4b31      	ldr	r3, [pc, #196]	; (80010ec <SystemInit+0x104>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a30      	ldr	r2, [pc, #192]	; (80010ec <SystemInit+0x104>)
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001030:	4b2e      	ldr	r3, [pc, #184]	; (80010ec <SystemInit+0x104>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <SystemInit+0x104>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	492c      	ldr	r1, [pc, #176]	; (80010ec <SystemInit+0x104>)
 800103c:	4b2c      	ldr	r3, [pc, #176]	; (80010f0 <SystemInit+0x108>)
 800103e:	4013      	ands	r3, r2
 8001040:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <SystemInit+0x100>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f003 0308 	and.w	r3, r3, #8
 800104a:	2b00      	cmp	r3, #0
 800104c:	d007      	beq.n	800105e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <SystemInit+0x100>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f023 030f 	bic.w	r3, r3, #15
 8001056:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <SystemInit+0x100>)
 8001058:	f043 0307 	orr.w	r3, r3, #7
 800105c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <SystemInit+0x104>)
 8001060:	2200      	movs	r2, #0
 8001062:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001064:	4b21      	ldr	r3, [pc, #132]	; (80010ec <SystemInit+0x104>)
 8001066:	2200      	movs	r2, #0
 8001068:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800106a:	4b20      	ldr	r3, [pc, #128]	; (80010ec <SystemInit+0x104>)
 800106c:	2200      	movs	r2, #0
 800106e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001070:	4b1e      	ldr	r3, [pc, #120]	; (80010ec <SystemInit+0x104>)
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <SystemInit+0x10c>)
 8001074:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001076:	4b1d      	ldr	r3, [pc, #116]	; (80010ec <SystemInit+0x104>)
 8001078:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <SystemInit+0x110>)
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <SystemInit+0x104>)
 800107e:	4a1f      	ldr	r2, [pc, #124]	; (80010fc <SystemInit+0x114>)
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <SystemInit+0x104>)
 8001084:	2200      	movs	r2, #0
 8001086:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001088:	4b18      	ldr	r3, [pc, #96]	; (80010ec <SystemInit+0x104>)
 800108a:	4a1c      	ldr	r2, [pc, #112]	; (80010fc <SystemInit+0x114>)
 800108c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <SystemInit+0x104>)
 8001090:	2200      	movs	r2, #0
 8001092:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001094:	4b15      	ldr	r3, [pc, #84]	; (80010ec <SystemInit+0x104>)
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <SystemInit+0x114>)
 8001098:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <SystemInit+0x104>)
 800109c:	2200      	movs	r2, #0
 800109e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <SystemInit+0x104>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a11      	ldr	r2, [pc, #68]	; (80010ec <SystemInit+0x104>)
 80010a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <SystemInit+0x104>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <SystemInit+0x118>)
 80010b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <SystemInit+0x118>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80010be:	4b11      	ldr	r3, [pc, #68]	; (8001104 <SystemInit+0x11c>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <SystemInit+0x120>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ca:	d202      	bcs.n	80010d2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80010cc:	4b0f      	ldr	r3, [pc, #60]	; (800110c <SystemInit+0x124>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80010d2:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <SystemInit+0x128>)
 80010d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80010d8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	e000ed00 	.word	0xe000ed00
 80010e8:	52002000 	.word	0x52002000
 80010ec:	58024400 	.word	0x58024400
 80010f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80010f4:	02020200 	.word	0x02020200
 80010f8:	01ff0000 	.word	0x01ff0000
 80010fc:	01010280 	.word	0x01010280
 8001100:	580000c0 	.word	0x580000c0
 8001104:	5c001000 	.word	0x5c001000
 8001108:	ffff0000 	.word	0xffff0000
 800110c:	51008108 	.word	0x51008108
 8001110:	52004000 	.word	0x52004000

08001114 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800111a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001120:	bf00      	nop
 8001122:	4b36      	ldr	r3, [pc, #216]	; (80011fc <main+0xe8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d004      	beq.n	8001138 <main+0x24>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	1e5a      	subs	r2, r3, #1
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	dcf4      	bgt.n	8001122 <main+0xe>
	if ( timeout < 0 )
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	da01      	bge.n	8001142 <main+0x2e>
	{
		Error_Handler();
 800113e:	f000 fb97 	bl	8001870 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001142:	f001 f9c3 	bl	80024cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001146:	f000 f861 	bl	800120c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800114a:	f000 f8e3 	bl	8001314 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <main+0xe8>)
 8001150:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001154:	4a29      	ldr	r2, [pc, #164]	; (80011fc <main+0xe8>)
 8001156:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800115a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <main+0xe8>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001168:	603b      	str	r3, [r7, #0]
 800116a:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 800116c:	2000      	movs	r0, #0
 800116e:	f004 fbd9 	bl	8005924 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001172:	2100      	movs	r1, #0
 8001174:	2000      	movs	r0, #0
 8001176:	f004 fbef 	bl	8005958 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001180:	bf00      	nop
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <main+0xe8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d104      	bne.n	8001198 <main+0x84>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	1e5a      	subs	r2, r3, #1
 8001192:	607a      	str	r2, [r7, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	dcf4      	bgt.n	8001182 <main+0x6e>
	if ( timeout < 0 )
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	da01      	bge.n	80011a2 <main+0x8e>
	{
		Error_Handler();
 800119e:	f000 fb67 	bl	8001870 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a2:	f000 fa35 	bl	8001610 <MX_GPIO_Init>
  MX_ETH_Init();
 80011a6:	f000 f8e7 	bl	8001378 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80011aa:	f000 f989 	bl	80014c0 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80011ae:	f000 fa07 	bl	80015c0 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80011b2:	f000 f9d3 	bl	800155c <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80011b6:	f000 f92b 	bl	8001410 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 80011ba:	f000 fc61 	bl	8001a80 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 fe81 	bl	8001ec6 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 80011c4:	2000      	movs	r0, #0
 80011c6:	f000 fe6d 	bl	8001ea4 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 80011ca:	f001 fa05 	bl	80025d8 <HAL_GetTick>
 80011ce:	4602      	mov	r2, r0
 80011d0:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <main+0xec>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	2bc8      	cmp	r3, #200	; 0xc8
 80011d8:	d9f7      	bls.n	80011ca <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 80011da:	f001 f9fd 	bl	80025d8 <HAL_GetTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a07      	ldr	r2, [pc, #28]	; (8001200 <main+0xec>)
 80011e2:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80011e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <main+0xf0>)
 80011ea:	f004 fb80 	bl	80058ee <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 80011ee:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 80011f2:	4905      	ldr	r1, [pc, #20]	; (8001208 <main+0xf4>)
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fa91 	bl	800071c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 80011fa:	e7e6      	b.n	80011ca <main+0xb6>
 80011fc:	58024400 	.word	0x58024400
 8001200:	24000c2c 	.word	0x24000c2c
 8001204:	58020400 	.word	0x58020400
 8001208:	240008f8 	.word	0x240008f8

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09c      	sub	sp, #112	; 0x70
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001216:	224c      	movs	r2, #76	; 0x4c
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f009 fc88 	bl	800ab30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2220      	movs	r2, #32
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f009 fc82 	bl	800ab30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800122c:	2004      	movs	r0, #4
 800122e:	f004 fcef 	bl	8005c10 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b34      	ldr	r3, [pc, #208]	; (8001308 <SystemClock_Config+0xfc>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4a33      	ldr	r2, [pc, #204]	; (8001308 <SystemClock_Config+0xfc>)
 800123c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	4b31      	ldr	r3, [pc, #196]	; (8001308 <SystemClock_Config+0xfc>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	4b2f      	ldr	r3, [pc, #188]	; (800130c <SystemClock_Config+0x100>)
 800124e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001250:	4a2e      	ldr	r2, [pc, #184]	; (800130c <SystemClock_Config+0x100>)
 8001252:	f043 0301 	orr.w	r3, r3, #1
 8001256:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001258:	4b2c      	ldr	r3, [pc, #176]	; (800130c <SystemClock_Config+0x100>)
 800125a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	603b      	str	r3, [r7, #0]
 8001262:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001264:	bf00      	nop
 8001266:	4b28      	ldr	r3, [pc, #160]	; (8001308 <SystemClock_Config+0xfc>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800126e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001272:	d1f8      	bne.n	8001266 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <SystemClock_Config+0x104>)
 8001276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001278:	f023 0303 	bic.w	r3, r3, #3
 800127c:	4a24      	ldr	r2, [pc, #144]	; (8001310 <SystemClock_Config+0x104>)
 800127e:	f043 0302 	orr.w	r3, r3, #2
 8001282:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001288:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800128c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	2302      	movs	r3, #2
 8001294:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001296:	2301      	movs	r3, #1
 8001298:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800129a:	2378      	movs	r3, #120	; 0x78
 800129c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800129e:	2302      	movs	r3, #2
 80012a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012aa:	230c      	movs	r3, #12
 80012ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012b2:	2300      	movs	r3, #0
 80012b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fd12 	bl	8005ce4 <HAL_RCC_OscConfig>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80012c6:	f000 fad3 	bl	8001870 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ca:	233f      	movs	r3, #63	; 0x3f
 80012cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ce:	2303      	movs	r3, #3
 80012d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80012d6:	2308      	movs	r3, #8
 80012d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012da:	2340      	movs	r3, #64	; 0x40
 80012dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012de:	2340      	movs	r3, #64	; 0x40
 80012e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012e8:	2340      	movs	r3, #64	; 0x40
 80012ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2104      	movs	r1, #4
 80012f0:	4618      	mov	r0, r3
 80012f2:	f005 f925 	bl	8006540 <HAL_RCC_ClockConfig>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80012fc:	f000 fab8 	bl	8001870 <Error_Handler>
  }
}
 8001300:	bf00      	nop
 8001302:	3770      	adds	r7, #112	; 0x70
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	58024800 	.word	0x58024800
 800130c:	58000400 	.word	0x58000400
 8001310:	58024400 	.word	0x58024400

08001314 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0b0      	sub	sp, #192	; 0xc0
 8001318:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	22bc      	movs	r2, #188	; 0xbc
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f009 fc05 	bl	800ab30 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001326:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 800132a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800132c:	2301      	movs	r3, #1
 800132e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001330:	2318      	movs	r3, #24
 8001332:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001334:	2302      	movs	r3, #2
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001338:	2304      	movs	r3, #4
 800133a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800133c:	2302      	movs	r3, #2
 800133e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001340:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001344:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001346:	2300      	movs	r3, #0
 8001348:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 800134e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001352:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001354:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	4618      	mov	r0, r3
 8001360:	f005 fc7a 	bl	8006c58 <HAL_RCCEx_PeriphCLKConfig>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 800136a:	f000 fa81 	bl	8001870 <Error_Handler>
  }
}
 800136e:	bf00      	nop
 8001370:	37c0      	adds	r7, #192	; 0xc0
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800137c:	4b1e      	ldr	r3, [pc, #120]	; (80013f8 <MX_ETH_Init+0x80>)
 800137e:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <MX_ETH_Init+0x84>)
 8001380:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001382:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <MX_ETH_Init+0x88>)
 8001384:	2200      	movs	r2, #0
 8001386:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_ETH_Init+0x88>)
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800138e:	4b1c      	ldr	r3, [pc, #112]	; (8001400 <MX_ETH_Init+0x88>)
 8001390:	22e1      	movs	r2, #225	; 0xe1
 8001392:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001394:	4b1a      	ldr	r3, [pc, #104]	; (8001400 <MX_ETH_Init+0x88>)
 8001396:	2200      	movs	r2, #0
 8001398:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800139a:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_ETH_Init+0x88>)
 800139c:	2200      	movs	r2, #0
 800139e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80013a0:	4b17      	ldr	r3, [pc, #92]	; (8001400 <MX_ETH_Init+0x88>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_ETH_Init+0x80>)
 80013a8:	4a15      	ldr	r2, [pc, #84]	; (8001400 <MX_ETH_Init+0x88>)
 80013aa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_ETH_Init+0x80>)
 80013ae:	2201      	movs	r2, #1
 80013b0:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_ETH_Init+0x80>)
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <MX_ETH_Init+0x8c>)
 80013b6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_ETH_Init+0x80>)
 80013ba:	4a13      	ldr	r2, [pc, #76]	; (8001408 <MX_ETH_Init+0x90>)
 80013bc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_ETH_Init+0x80>)
 80013c0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013c4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_ETH_Init+0x80>)
 80013c8:	f003 fc8c 	bl	8004ce4 <HAL_ETH_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80013d2:	f000 fa4d 	bl	8001870 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80013d6:	2238      	movs	r2, #56	; 0x38
 80013d8:	2100      	movs	r1, #0
 80013da:	480c      	ldr	r0, [pc, #48]	; (800140c <MX_ETH_Init+0x94>)
 80013dc:	f009 fba8 	bl	800ab30 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <MX_ETH_Init+0x94>)
 80013e2:	2221      	movs	r2, #33	; 0x21
 80013e4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013e6:	4b09      	ldr	r3, [pc, #36]	; (800140c <MX_ETH_Init+0x94>)
 80013e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80013ec:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013ee:	4b07      	ldr	r3, [pc, #28]	; (800140c <MX_ETH_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	24000134 	.word	0x24000134
 80013fc:	40028000 	.word	0x40028000
 8001400:	24000c30 	.word	0x24000c30
 8001404:	24000080 	.word	0x24000080
 8001408:	24000020 	.word	0x24000020
 800140c:	240000fc 	.word	0x240000fc

08001410 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001416:	4a29      	ldr	r2, [pc, #164]	; (80014bc <MX_SPI3_Init+0xac>)
 8001418:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800141a:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800141c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001420:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001422:	4b25      	ldr	r3, [pc, #148]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001424:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001428:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800142a:	4b23      	ldr	r3, [pc, #140]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800142c:	2207      	movs	r2, #7
 800142e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001436:	4b20      	ldr	r3, [pc, #128]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001438:	2200      	movs	r2, #0
 800143a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800143c:	4b1e      	ldr	r3, [pc, #120]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800143e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001442:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001444:	4b1c      	ldr	r3, [pc, #112]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001446:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800144a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800144c:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001458:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800145a:	2200      	movs	r2, #0
 800145c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800145e:	4b16      	ldr	r3, [pc, #88]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001460:	2200      	movs	r2, #0
 8001462:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001464:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001466:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800146a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800146e:	2200      	movs	r2, #0
 8001470:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001474:	2200      	movs	r2, #0
 8001476:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800147a:	2200      	movs	r2, #0
 800147c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800147e:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001484:	4b0c      	ldr	r3, [pc, #48]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001486:	2200      	movs	r2, #0
 8001488:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800148c:	2200      	movs	r2, #0
 800148e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001492:	2200      	movs	r2, #0
 8001494:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001496:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <MX_SPI3_Init+0xa8>)
 8001498:	2200      	movs	r2, #0
 800149a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800149c:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <MX_SPI3_Init+0xa8>)
 800149e:	2200      	movs	r2, #0
 80014a0:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_SPI3_Init+0xa8>)
 80014a4:	f006 ff40 	bl	8008328 <HAL_SPI_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 80014ae:	f000 f9df 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	240001e4 	.word	0x240001e4
 80014bc:	40003c00 	.word	0x40003c00

080014c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014c4:	4b22      	ldr	r3, [pc, #136]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <MX_USART3_UART_Init+0x94>)
 80014c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 80014ca:	4b21      	ldr	r3, [pc, #132]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014cc:	4a22      	ldr	r2, [pc, #136]	; (8001558 <MX_USART3_UART_Init+0x98>)
 80014ce:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014d6:	4b1e      	ldr	r3, [pc, #120]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80014dc:	4b1c      	ldr	r3, [pc, #112]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80014e2:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014e4:	220c      	movs	r2, #12
 80014e6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <MX_USART3_UART_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001500:	4b13      	ldr	r3, [pc, #76]	; (8001550 <MX_USART3_UART_Init+0x90>)
 8001502:	2200      	movs	r2, #0
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001506:	4812      	ldr	r0, [pc, #72]	; (8001550 <MX_USART3_UART_Init+0x90>)
 8001508:	f007 faef 	bl	8008aea <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001512:	f000 f9ad 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001516:	2100      	movs	r1, #0
 8001518:	480d      	ldr	r0, [pc, #52]	; (8001550 <MX_USART3_UART_Init+0x90>)
 800151a:	f008 ff11 	bl	800a340 <HAL_UARTEx_SetTxFifoThreshold>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001524:	f000 f9a4 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001528:	2100      	movs	r1, #0
 800152a:	4809      	ldr	r0, [pc, #36]	; (8001550 <MX_USART3_UART_Init+0x90>)
 800152c:	f008 ff46 	bl	800a3bc <HAL_UARTEx_SetRxFifoThreshold>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001536:	f000 f99b 	bl	8001870 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800153a:	4805      	ldr	r0, [pc, #20]	; (8001550 <MX_USART3_UART_Init+0x90>)
 800153c:	f008 fec7 	bl	800a2ce <HAL_UARTEx_DisableFifoMode>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001546:	f000 f993 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2400026c 	.word	0x2400026c
 8001554:	40004800 	.word	0x40004800
 8001558:	0005dc00 	.word	0x0005dc00

0800155c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001562:	4a16      	ldr	r2, [pc, #88]	; (80015bc <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001564:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001568:	2209      	movs	r2, #9
 800156a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800156c:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800156e:	2202      	movs	r2, #2
 8001570:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001572:	4b11      	ldr	r3, [pc, #68]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001574:	2200      	movs	r2, #0
 8001576:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800157a:	2202      	movs	r2, #2
 800157c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800157e:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001580:	2200      	movs	r2, #0
 8001582:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001584:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001586:	2200      	movs	r2, #0
 8001588:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800158a:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800158c:	2200      	movs	r2, #0
 800158e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001590:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001592:	2201      	movs	r2, #1
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001598:	2201      	movs	r2, #1
 800159a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80015a2:	4805      	ldr	r0, [pc, #20]	; (80015b8 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80015a4:	f004 f9ec 	bl	8005980 <HAL_PCD_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80015ae:	f000 f95f 	bl	8001870 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80015b2:	bf00      	nop
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	240003ec 	.word	0x240003ec
 80015bc:	40080000 	.word	0x40080000

080015c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_DMA_Init+0x4c>)
 80015c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015cc:	4a0f      	ldr	r2, [pc, #60]	; (800160c <MX_DMA_Init+0x4c>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <MX_DMA_Init+0x4c>)
 80015d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2100      	movs	r1, #0
 80015e8:	200c      	movs	r0, #12
 80015ea:	f001 f920 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015ee:	200c      	movs	r0, #12
 80015f0:	f001 f937 	bl	8002862 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	200f      	movs	r0, #15
 80015fa:	f001 f918 	bl	800282e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80015fe:	200f      	movs	r0, #15
 8001600:	f001 f92f 	bl	8002862 <HAL_NVIC_EnableIRQ>

}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	58024400 	.word	0x58024400

08001610 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08e      	sub	sp, #56	; 0x38
 8001614:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	605a      	str	r2, [r3, #4]
 8001620:	609a      	str	r2, [r3, #8]
 8001622:	60da      	str	r2, [r3, #12]
 8001624:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001626:	4b8a      	ldr	r3, [pc, #552]	; (8001850 <MX_GPIO_Init+0x240>)
 8001628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800162c:	4a88      	ldr	r2, [pc, #544]	; (8001850 <MX_GPIO_Init+0x240>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001636:	4b86      	ldr	r3, [pc, #536]	; (8001850 <MX_GPIO_Init+0x240>)
 8001638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001644:	4b82      	ldr	r3, [pc, #520]	; (8001850 <MX_GPIO_Init+0x240>)
 8001646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800164a:	4a81      	ldr	r2, [pc, #516]	; (8001850 <MX_GPIO_Init+0x240>)
 800164c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001654:	4b7e      	ldr	r3, [pc, #504]	; (8001850 <MX_GPIO_Init+0x240>)
 8001656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800165e:	61fb      	str	r3, [r7, #28]
 8001660:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b7b      	ldr	r3, [pc, #492]	; (8001850 <MX_GPIO_Init+0x240>)
 8001664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001668:	4a79      	ldr	r2, [pc, #484]	; (8001850 <MX_GPIO_Init+0x240>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001672:	4b77      	ldr	r3, [pc, #476]	; (8001850 <MX_GPIO_Init+0x240>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001680:	4b73      	ldr	r3, [pc, #460]	; (8001850 <MX_GPIO_Init+0x240>)
 8001682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001686:	4a72      	ldr	r2, [pc, #456]	; (8001850 <MX_GPIO_Init+0x240>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001690:	4b6f      	ldr	r3, [pc, #444]	; (8001850 <MX_GPIO_Init+0x240>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800169e:	4b6c      	ldr	r3, [pc, #432]	; (8001850 <MX_GPIO_Init+0x240>)
 80016a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a4:	4a6a      	ldr	r2, [pc, #424]	; (8001850 <MX_GPIO_Init+0x240>)
 80016a6:	f043 0320 	orr.w	r3, r3, #32
 80016aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ae:	4b68      	ldr	r3, [pc, #416]	; (8001850 <MX_GPIO_Init+0x240>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	f003 0320 	and.w	r3, r3, #32
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016bc:	4b64      	ldr	r3, [pc, #400]	; (8001850 <MX_GPIO_Init+0x240>)
 80016be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c2:	4a63      	ldr	r2, [pc, #396]	; (8001850 <MX_GPIO_Init+0x240>)
 80016c4:	f043 0310 	orr.w	r3, r3, #16
 80016c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016cc:	4b60      	ldr	r3, [pc, #384]	; (8001850 <MX_GPIO_Init+0x240>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016da:	4b5d      	ldr	r3, [pc, #372]	; (8001850 <MX_GPIO_Init+0x240>)
 80016dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e0:	4a5b      	ldr	r2, [pc, #364]	; (8001850 <MX_GPIO_Init+0x240>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016ea:	4b59      	ldr	r3, [pc, #356]	; (8001850 <MX_GPIO_Init+0x240>)
 80016ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016f0:	f003 0308 	and.w	r3, r3, #8
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f8:	4b55      	ldr	r3, [pc, #340]	; (8001850 <MX_GPIO_Init+0x240>)
 80016fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016fe:	4a54      	ldr	r2, [pc, #336]	; (8001850 <MX_GPIO_Init+0x240>)
 8001700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001704:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001708:	4b51      	ldr	r3, [pc, #324]	; (8001850 <MX_GPIO_Init+0x240>)
 800170a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800170e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 800171c:	484d      	ldr	r0, [pc, #308]	; (8001854 <MX_GPIO_Init+0x244>)
 800171e:	f004 f8cd 	bl	80058bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001728:	484a      	ldr	r0, [pc, #296]	; (8001854 <MX_GPIO_Init+0x244>)
 800172a:	f004 f8c7 	bl	80058bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800172e:	2200      	movs	r2, #0
 8001730:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001734:	4848      	ldr	r0, [pc, #288]	; (8001858 <MX_GPIO_Init+0x248>)
 8001736:	f004 f8c1 	bl	80058bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001740:	4846      	ldr	r0, [pc, #280]	; (800185c <MX_GPIO_Init+0x24c>)
 8001742:	f004 f8bb 	bl	80058bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8001746:	2201      	movs	r2, #1
 8001748:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800174c:	4844      	ldr	r0, [pc, #272]	; (8001860 <MX_GPIO_Init+0x250>)
 800174e:	f004 f8b5 	bl	80058bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8001752:	230d      	movs	r3, #13
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001756:	2300      	movs	r3, #0
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800175e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001762:	4619      	mov	r1, r3
 8001764:	483f      	ldr	r0, [pc, #252]	; (8001864 <MX_GPIO_Init+0x254>)
 8001766:	f003 fee1 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800176a:	2308      	movs	r3, #8
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800176e:	2300      	movs	r3, #0
 8001770:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177a:	4619      	mov	r1, r3
 800177c:	483a      	ldr	r0, [pc, #232]	; (8001868 <MX_GPIO_Init+0x258>)
 800177e:	f003 fed5 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8001782:	2302      	movs	r3, #2
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	4830      	ldr	r0, [pc, #192]	; (8001858 <MX_GPIO_Init+0x248>)
 8001796:	f003 fec9 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 800179a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	482f      	ldr	r0, [pc, #188]	; (800186c <MX_GPIO_Init+0x25c>)
 80017b0:	f003 febc 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 80017b4:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017ba:	2301      	movs	r3, #1
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c2:	2300      	movs	r3, #0
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ca:	4619      	mov	r1, r3
 80017cc:	4821      	ldr	r0, [pc, #132]	; (8001854 <MX_GPIO_Init+0x244>)
 80017ce:	f003 fead 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80017d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d8:	2301      	movs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017e8:	4619      	mov	r1, r3
 80017ea:	481b      	ldr	r0, [pc, #108]	; (8001858 <MX_GPIO_Init+0x248>)
 80017ec:	f003 fe9e 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80017f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f6:	2301      	movs	r3, #1
 80017f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	4814      	ldr	r0, [pc, #80]	; (800185c <MX_GPIO_Init+0x24c>)
 800180a:	f003 fe8f 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001812:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	4619      	mov	r1, r3
 8001822:	480f      	ldr	r0, [pc, #60]	; (8001860 <MX_GPIO_Init+0x250>)
 8001824:	f003 fe82 	bl	800552c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_GPIO_Init+0x250>)
 8001842:	f003 fe73 	bl	800552c <HAL_GPIO_Init>

}
 8001846:	bf00      	nop
 8001848:	3738      	adds	r7, #56	; 0x38
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	58024400 	.word	0x58024400
 8001854:	58021000 	.word	0x58021000
 8001858:	58020400 	.word	0x58020400
 800185c:	58020c00 	.word	0x58020c00
 8001860:	58021800 	.word	0x58021800
 8001864:	58020800 	.word	0x58020800
 8001868:	58020000 	.word	0x58020000
 800186c:	58021400 	.word	0x58021400

08001870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001874:	b672      	cpsid	i
}
 8001876:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001878:	e7fe      	b.n	8001878 <Error_Handler+0x8>
	...

0800187c <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001880:	2200      	movs	r2, #0
 8001882:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001886:	4802      	ldr	r0, [pc, #8]	; (8001890 <ST7735_Select+0x14>)
 8001888:	f004 f818 	bl	80058bc <HAL_GPIO_WritePin>
}
 800188c:	bf00      	nop
 800188e:	bd80      	pop	{r7, pc}
 8001890:	58021000 	.word	0x58021000

08001894 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8001898:	2201      	movs	r2, #1
 800189a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800189e:	4802      	ldr	r0, [pc, #8]	; (80018a8 <ST7735_Unselect+0x14>)
 80018a0:	f004 f80c 	bl	80058bc <HAL_GPIO_WritePin>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	58021000 	.word	0x58021000

080018ac <ST7735_Select1>:
static void ST7735_Select1() {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80018b0:	2200      	movs	r2, #0
 80018b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018b6:	4802      	ldr	r0, [pc, #8]	; (80018c0 <ST7735_Select1+0x14>)
 80018b8:	f004 f800 	bl	80058bc <HAL_GPIO_WritePin>
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58021000 	.word	0x58021000

080018c4 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ce:	4802      	ldr	r0, [pc, #8]	; (80018d8 <ST7735_Unselect1+0x14>)
 80018d0:	f003 fff4 	bl	80058bc <HAL_GPIO_WritePin>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	58021000 	.word	0x58021000

080018dc <ST7735_Reset>:

static void ST7735_Reset() {
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018e6:	4807      	ldr	r0, [pc, #28]	; (8001904 <ST7735_Reset+0x28>)
 80018e8:	f003 ffe8 	bl	80058bc <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80018ec:	2005      	movs	r0, #5
 80018ee:	f000 fe7f 	bl	80025f0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80018f2:	2201      	movs	r2, #1
 80018f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <ST7735_Reset+0x28>)
 80018fa:	f003 ffdf 	bl	80058bc <HAL_GPIO_WritePin>
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	58021000 	.word	0x58021000

08001908 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001912:	2200      	movs	r2, #0
 8001914:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001918:	4806      	ldr	r0, [pc, #24]	; (8001934 <ST7735_WriteCommand+0x2c>)
 800191a:	f003 ffcf 	bl	80058bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800191e:	1df9      	adds	r1, r7, #7
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	2201      	movs	r2, #1
 8001926:	4804      	ldr	r0, [pc, #16]	; (8001938 <ST7735_WriteCommand+0x30>)
 8001928:	f006 fe04 	bl	8008534 <HAL_SPI_Transmit>
}
 800192c:	bf00      	nop
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	58021800 	.word	0x58021800
 8001938:	240001e4 	.word	0x240001e4

0800193c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	4807      	ldr	r0, [pc, #28]	; (800196c <ST7735_WriteData+0x30>)
 800194e:	f003 ffb5 	bl	80058bc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	b29a      	uxth	r2, r3
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4804      	ldr	r0, [pc, #16]	; (8001970 <ST7735_WriteData+0x34>)
 800195e:	f006 fde9 	bl	8008534 <HAL_SPI_Transmit>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	58021800 	.word	0x58021800
 8001970:	240001e4 	.word	0x240001e4

08001974 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8001986:	e034      	b.n	80019f2 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ffb7 	bl	8001908 <ST7735_WriteCommand>

        numArgs = *addr++;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	1c5a      	adds	r2, r3, #1
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80019a4:	7abb      	ldrb	r3, [r7, #10]
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ac:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80019ae:	7abb      	ldrb	r3, [r7, #10]
 80019b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019b4:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80019b6:	7abb      	ldrb	r3, [r7, #10]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80019bc:	7abb      	ldrb	r3, [r7, #10]
 80019be:	4619      	mov	r1, r3
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ffbb 	bl	800193c <ST7735_WriteData>
            addr += numArgs;
 80019c6:	7abb      	ldrb	r3, [r7, #10]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	4413      	add	r3, r2
 80019cc:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80019ce:	89bb      	ldrh	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00e      	beq.n	80019f2 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80019de:	89bb      	ldrh	r3, [r7, #12]
 80019e0:	2bff      	cmp	r3, #255	; 0xff
 80019e2:	d102      	bne.n	80019ea <ST7735_ExecuteCommandList+0x76>
 80019e4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80019e8:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80019ea:	89bb      	ldrh	r3, [r7, #12]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 fdff 	bl	80025f0 <HAL_Delay>
    while(numCommands--) {
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
 80019f4:	1e5a      	subs	r2, r3, #1
 80019f6:	73fa      	strb	r2, [r7, #15]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1c5      	bne.n	8001988 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8001a06:	b590      	push	{r4, r7, lr}
 8001a08:	b085      	sub	sp, #20
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	4608      	mov	r0, r1
 8001a10:	4611      	mov	r1, r2
 8001a12:	461a      	mov	r2, r3
 8001a14:	4623      	mov	r3, r4
 8001a16:	71fb      	strb	r3, [r7, #7]
 8001a18:	4603      	mov	r3, r0
 8001a1a:	71bb      	strb	r3, [r7, #6]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	717b      	strb	r3, [r7, #5]
 8001a20:	4613      	mov	r3, r2
 8001a22:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001a24:	202a      	movs	r0, #42	; 0x2a
 8001a26:	f7ff ff6f 	bl	8001908 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	733b      	strb	r3, [r7, #12]
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	3302      	adds	r3, #2
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	737b      	strb	r3, [r7, #13]
 8001a36:	2300      	movs	r3, #0
 8001a38:	73bb      	strb	r3, [r7, #14]
 8001a3a:	797b      	ldrb	r3, [r7, #5]
 8001a3c:	3302      	adds	r3, #2
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001a42:	f107 030c 	add.w	r3, r7, #12
 8001a46:	2104      	movs	r1, #4
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff77 	bl	800193c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001a4e:	202b      	movs	r0, #43	; 0x2b
 8001a50:	f7ff ff5a 	bl	8001908 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001a54:	79bb      	ldrb	r3, [r7, #6]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001a5c:	793b      	ldrb	r3, [r7, #4]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001a64:	f107 030c 	add.w	r3, r7, #12
 8001a68:	2104      	movs	r1, #4
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff ff66 	bl	800193c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001a70:	202c      	movs	r0, #44	; 0x2c
 8001a72:	f7ff ff49 	bl	8001908 <ST7735_WriteCommand>
}
 8001a76:	bf00      	nop
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd90      	pop	{r4, r7, pc}
	...

08001a80 <ST7735_Init>:

void ST7735_Init() {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001a84:	f7ff fefa 	bl	800187c <ST7735_Select>
    ST7735_Select1();
 8001a88:	f7ff ff10 	bl	80018ac <ST7735_Select1>
    ST7735_Reset();
 8001a8c:	f7ff ff26 	bl	80018dc <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001a90:	4807      	ldr	r0, [pc, #28]	; (8001ab0 <ST7735_Init+0x30>)
 8001a92:	f7ff ff6f 	bl	8001974 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8001a96:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <ST7735_Init+0x34>)
 8001a98:	f7ff ff6c 	bl	8001974 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001a9c:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <ST7735_Init+0x38>)
 8001a9e:	f7ff ff69 	bl	8001974 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001aa2:	f7ff fef7 	bl	8001894 <ST7735_Unselect>
    ST7735_Unselect1();
 8001aa6:	f7ff ff0d 	bl	80018c4 <ST7735_Unselect1>
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800c09c 	.word	0x0800c09c
 8001ab4:	0800c0d8 	.word	0x0800c0d8
 8001ab8:	0800c0e8 	.word	0x0800c0e8

08001abc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001abc:	b082      	sub	sp, #8
 8001abe:	b590      	push	{r4, r7, lr}
 8001ac0:	b089      	sub	sp, #36	; 0x24
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
 8001aca:	460b      	mov	r3, r1
 8001acc:	80bb      	strh	r3, [r7, #4]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001ad2:	88fb      	ldrh	r3, [r7, #6]
 8001ad4:	b2d8      	uxtb	r0, r3
 8001ad6:	88bb      	ldrh	r3, [r7, #4]
 8001ad8:	b2d9      	uxtb	r1, r3
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	b2dc      	uxtb	r4, r3
 8001aea:	88bb      	ldrh	r3, [r7, #4]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001af2:	4413      	add	r3, r2
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3b01      	subs	r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4622      	mov	r2, r4
 8001afc:	f7ff ff83 	bl	8001a06 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
 8001b04:	e043      	b.n	8001b8e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b08:	78fb      	ldrb	r3, [r7, #3]
 8001b0a:	3b20      	subs	r3, #32
 8001b0c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001b10:	fb01 f303 	mul.w	r3, r1, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	440b      	add	r3, r1
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4413      	add	r3, r2
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
 8001b26:	e029      	b.n	8001b7c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001b28:	697a      	ldr	r2, [r7, #20]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d00e      	beq.n	8001b56 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001b38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	743b      	strb	r3, [r7, #16]
 8001b42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	2102      	movs	r1, #2
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fef4 	bl	800193c <ST7735_WriteData>
 8001b54:	e00f      	b.n	8001b76 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001b56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	733b      	strb	r3, [r7, #12]
 8001b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff fee3 	bl	800193c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001b80:	461a      	mov	r2, r3
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d3cf      	bcc.n	8001b28 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001b92:	461a      	mov	r2, r3
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d3b5      	bcc.n	8001b06 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	3724      	adds	r7, #36	; 0x24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001ba6:	b002      	add	sp, #8
 8001ba8:	4770      	bx	lr

08001baa <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001baa:	b082      	sub	sp, #8
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af04      	add	r7, sp, #16
 8001bb2:	603a      	str	r2, [r7, #0]
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	80fb      	strh	r3, [r7, #6]
 8001bba:	460b      	mov	r3, r1
 8001bbc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8001bbe:	f7ff fe5d 	bl	800187c <ST7735_Select>

    while(*str) {
 8001bc2:	e02d      	b.n	8001c20 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001bc4:	88fb      	ldrh	r3, [r7, #6]
 8001bc6:	7d3a      	ldrb	r2, [r7, #20]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2b7f      	cmp	r3, #127	; 0x7f
 8001bcc:	dd13      	ble.n	8001bf6 <ST7735_WriteString+0x4c>
            x = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001bd2:	7d7b      	ldrb	r3, [r7, #21]
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	4413      	add	r3, r2
 8001bda:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	7d7a      	ldrb	r2, [r7, #21]
 8001be0:	4413      	add	r3, r2
 8001be2:	2b7f      	cmp	r3, #127	; 0x7f
 8001be4:	dc21      	bgt.n	8001c2a <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b20      	cmp	r3, #32
 8001bec:	d103      	bne.n	8001bf6 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	603b      	str	r3, [r7, #0]
                continue;
 8001bf4:	e014      	b.n	8001c20 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	88b9      	ldrh	r1, [r7, #4]
 8001bfc:	88f8      	ldrh	r0, [r7, #6]
 8001bfe:	8c3b      	ldrh	r3, [r7, #32]
 8001c00:	9302      	str	r3, [sp, #8]
 8001c02:	8bbb      	ldrh	r3, [r7, #28]
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	f7ff ff56 	bl	8001abc <ST7735_WriteChar>
        x += font.width;
 8001c10:	7d3b      	ldrb	r3, [r7, #20]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	4413      	add	r3, r2
 8001c18:	80fb      	strh	r3, [r7, #6]
        str++;
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d1cd      	bne.n	8001bc4 <ST7735_WriteString+0x1a>
 8001c28:	e000      	b.n	8001c2c <ST7735_WriteString+0x82>
                break;
 8001c2a:	bf00      	nop
    }

    ST7735_Unselect();
 8001c2c:	f7ff fe32 	bl	8001894 <ST7735_Unselect>
}
 8001c30:	bf00      	nop
 8001c32:	3708      	adds	r7, #8
 8001c34:	46bd      	mov	sp, r7
 8001c36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c3a:	b002      	add	sp, #8
 8001c3c:	4770      	bx	lr

08001c3e <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8001c3e:	b082      	sub	sp, #8
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af04      	add	r7, sp, #16
 8001c46:	603a      	str	r2, [r7, #0]
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	80bb      	strh	r3, [r7, #4]
    ST7735_Select1();
 8001c52:	f7ff fe2b 	bl	80018ac <ST7735_Select1>

    while(*str) {
 8001c56:	e02d      	b.n	8001cb4 <ST7735_WriteString1+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001c58:	88fb      	ldrh	r3, [r7, #6]
 8001c5a:	7d3a      	ldrb	r2, [r7, #20]
 8001c5c:	4413      	add	r3, r2
 8001c5e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c60:	dd13      	ble.n	8001c8a <ST7735_WriteString1+0x4c>
            x = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001c66:	7d7b      	ldrb	r3, [r7, #21]
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	88bb      	ldrh	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001c70:	88bb      	ldrh	r3, [r7, #4]
 8001c72:	7d7a      	ldrb	r2, [r7, #21]
 8001c74:	4413      	add	r3, r2
 8001c76:	2b7f      	cmp	r3, #127	; 0x7f
 8001c78:	dc21      	bgt.n	8001cbe <ST7735_WriteString1+0x80>
                break;
            }

            if(*str == ' ') {
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	2b20      	cmp	r3, #32
 8001c80:	d103      	bne.n	8001c8a <ST7735_WriteString1+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3301      	adds	r3, #1
 8001c86:	603b      	str	r3, [r7, #0]
                continue;
 8001c88:	e014      	b.n	8001cb4 <ST7735_WriteString1+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	88b9      	ldrh	r1, [r7, #4]
 8001c90:	88f8      	ldrh	r0, [r7, #6]
 8001c92:	8c3b      	ldrh	r3, [r7, #32]
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	8bbb      	ldrh	r3, [r7, #28]
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	9300      	str	r3, [sp, #0]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f7ff ff0c 	bl	8001abc <ST7735_WriteChar>
        x += font.width;
 8001ca4:	7d3b      	ldrb	r3, [r7, #20]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	88fb      	ldrh	r3, [r7, #6]
 8001caa:	4413      	add	r3, r2
 8001cac:	80fb      	strh	r3, [r7, #6]
        str++;
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1cd      	bne.n	8001c58 <ST7735_WriteString1+0x1a>
 8001cbc:	e000      	b.n	8001cc0 <ST7735_WriteString1+0x82>
                break;
 8001cbe:	bf00      	nop
    }

    ST7735_Unselect1();
 8001cc0:	f7ff fe00 	bl	80018c4 <ST7735_Unselect1>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cce:	b002      	add	sp, #8
 8001cd0:	4770      	bx	lr
	...

08001cd4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	4604      	mov	r4, r0
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	80fb      	strh	r3, [r7, #6]
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	80bb      	strh	r3, [r7, #4]
 8001cea:	460b      	mov	r3, r1
 8001cec:	807b      	strh	r3, [r7, #2]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
 8001cf4:	2b7f      	cmp	r3, #127	; 0x7f
 8001cf6:	d858      	bhi.n	8001daa <ST7735_FillRectangle+0xd6>
 8001cf8:	88bb      	ldrh	r3, [r7, #4]
 8001cfa:	2b7f      	cmp	r3, #127	; 0x7f
 8001cfc:	d855      	bhi.n	8001daa <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001cfe:	88fa      	ldrh	r2, [r7, #6]
 8001d00:	887b      	ldrh	r3, [r7, #2]
 8001d02:	4413      	add	r3, r2
 8001d04:	2b80      	cmp	r3, #128	; 0x80
 8001d06:	dd03      	ble.n	8001d10 <ST7735_FillRectangle+0x3c>
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d0e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001d10:	88ba      	ldrh	r2, [r7, #4]
 8001d12:	883b      	ldrh	r3, [r7, #0]
 8001d14:	4413      	add	r3, r2
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	dd03      	ble.n	8001d22 <ST7735_FillRectangle+0x4e>
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001d20:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001d22:	f7ff fdab 	bl	800187c <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	b2d8      	uxtb	r0, r3
 8001d2a:	88bb      	ldrh	r3, [r7, #4]
 8001d2c:	b2d9      	uxtb	r1, r3
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	b2da      	uxtb	r2, r3
 8001d32:	887b      	ldrh	r3, [r7, #2]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	3b01      	subs	r3, #1
 8001d3c:	b2dc      	uxtb	r4, r3
 8001d3e:	88bb      	ldrh	r3, [r7, #4]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	883b      	ldrh	r3, [r7, #0]
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	4413      	add	r3, r2
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4622      	mov	r2, r4
 8001d50:	f7ff fe59 	bl	8001a06 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001d54:	8c3b      	ldrh	r3, [r7, #32]
 8001d56:	0a1b      	lsrs	r3, r3, #8
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	733b      	strb	r3, [r7, #12]
 8001d5e:	8c3b      	ldrh	r3, [r7, #32]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001d64:	2201      	movs	r2, #1
 8001d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d6a:	4812      	ldr	r0, [pc, #72]	; (8001db4 <ST7735_FillRectangle+0xe0>)
 8001d6c:	f003 fda6 	bl	80058bc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001d70:	883b      	ldrh	r3, [r7, #0]
 8001d72:	80bb      	strh	r3, [r7, #4]
 8001d74:	e013      	b.n	8001d9e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8001d76:	887b      	ldrh	r3, [r7, #2]
 8001d78:	80fb      	strh	r3, [r7, #6]
 8001d7a:	e00a      	b.n	8001d92 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001d7c:	f107 010c 	add.w	r1, r7, #12
 8001d80:	f04f 33ff 	mov.w	r3, #4294967295
 8001d84:	2202      	movs	r2, #2
 8001d86:	480c      	ldr	r0, [pc, #48]	; (8001db8 <ST7735_FillRectangle+0xe4>)
 8001d88:	f006 fbd4 	bl	8008534 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001d8c:	88fb      	ldrh	r3, [r7, #6]
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	80fb      	strh	r3, [r7, #6]
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f1      	bne.n	8001d7c <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001d98:	88bb      	ldrh	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	80bb      	strh	r3, [r7, #4]
 8001d9e:	88bb      	ldrh	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1e8      	bne.n	8001d76 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8001da4:	f7ff fd76 	bl	8001894 <ST7735_Unselect>
 8001da8:	e000      	b.n	8001dac <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001daa:	bf00      	nop
}
 8001dac:	3714      	adds	r7, #20
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd90      	pop	{r4, r7, pc}
 8001db2:	bf00      	nop
 8001db4:	58021800 	.word	0x58021800
 8001db8:	240001e4 	.word	0x240001e4

08001dbc <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	4608      	mov	r0, r1
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4623      	mov	r3, r4
 8001dcc:	80fb      	strh	r3, [r7, #6]
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80bb      	strh	r3, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	807b      	strh	r3, [r7, #2]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001dda:	88fb      	ldrh	r3, [r7, #6]
 8001ddc:	2b7f      	cmp	r3, #127	; 0x7f
 8001dde:	d858      	bhi.n	8001e92 <ST7735_FillRectangle1+0xd6>
 8001de0:	88bb      	ldrh	r3, [r7, #4]
 8001de2:	2b7f      	cmp	r3, #127	; 0x7f
 8001de4:	d855      	bhi.n	8001e92 <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8001de6:	88fa      	ldrh	r2, [r7, #6]
 8001de8:	887b      	ldrh	r3, [r7, #2]
 8001dea:	4413      	add	r3, r2
 8001dec:	2b80      	cmp	r3, #128	; 0x80
 8001dee:	dd03      	ble.n	8001df8 <ST7735_FillRectangle1+0x3c>
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001df6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8001df8:	88ba      	ldrh	r2, [r7, #4]
 8001dfa:	883b      	ldrh	r3, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	2b80      	cmp	r3, #128	; 0x80
 8001e00:	dd03      	ble.n	8001e0a <ST7735_FillRectangle1+0x4e>
 8001e02:	88bb      	ldrh	r3, [r7, #4]
 8001e04:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001e08:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 8001e0a:	f7ff fd4f 	bl	80018ac <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001e0e:	88fb      	ldrh	r3, [r7, #6]
 8001e10:	b2d8      	uxtb	r0, r3
 8001e12:	88bb      	ldrh	r3, [r7, #4]
 8001e14:	b2d9      	uxtb	r1, r3
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	887b      	ldrh	r3, [r7, #2]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b2dc      	uxtb	r4, r3
 8001e26:	88bb      	ldrh	r3, [r7, #4]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	883b      	ldrh	r3, [r7, #0]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	4413      	add	r3, r2
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	4622      	mov	r2, r4
 8001e38:	f7ff fde5 	bl	8001a06 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001e3c:	8c3b      	ldrh	r3, [r7, #32]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	733b      	strb	r3, [r7, #12]
 8001e46:	8c3b      	ldrh	r3, [r7, #32]
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e52:	4812      	ldr	r0, [pc, #72]	; (8001e9c <ST7735_FillRectangle1+0xe0>)
 8001e54:	f003 fd32 	bl	80058bc <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001e58:	883b      	ldrh	r3, [r7, #0]
 8001e5a:	80bb      	strh	r3, [r7, #4]
 8001e5c:	e013      	b.n	8001e86 <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	80fb      	strh	r3, [r7, #6]
 8001e62:	e00a      	b.n	8001e7a <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001e64:	f107 010c 	add.w	r1, r7, #12
 8001e68:	f04f 33ff 	mov.w	r3, #4294967295
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	480c      	ldr	r0, [pc, #48]	; (8001ea0 <ST7735_FillRectangle1+0xe4>)
 8001e70:	f006 fb60 	bl	8008534 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001e74:	88fb      	ldrh	r3, [r7, #6]
 8001e76:	3b01      	subs	r3, #1
 8001e78:	80fb      	strh	r3, [r7, #6]
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f1      	bne.n	8001e64 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 8001e80:	88bb      	ldrh	r3, [r7, #4]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	80bb      	strh	r3, [r7, #4]
 8001e86:	88bb      	ldrh	r3, [r7, #4]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e8      	bne.n	8001e5e <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 8001e8c:	f7ff fd1a 	bl	80018c4 <ST7735_Unselect1>
 8001e90:	e000      	b.n	8001e94 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001e92:	bf00      	nop
}
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	58021800 	.word	0x58021800
 8001ea0:	240001e4 	.word	0x240001e4

08001ea4 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af02      	add	r7, sp, #8
 8001eaa:	4603      	mov	r3, r0
 8001eac:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2000      	movs	r0, #0
 8001eba:	f7ff ff0b 	bl	8001cd4 <ST7735_FillRectangle>
}
 8001ebe:	bf00      	nop
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af02      	add	r7, sp, #8
 8001ecc:	4603      	mov	r3, r0
 8001ece:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	2280      	movs	r2, #128	; 0x80
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff ff6e 	bl	8001dbc <ST7735_FillRectangle1>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_MspInit+0x30>)
 8001ef0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_MspInit+0x30>)
 8001ef6:	f043 0302 	orr.w	r3, r3, #2
 8001efa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001efe:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_MspInit+0x30>)
 8001f00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	58024400 	.word	0x58024400

08001f1c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08e      	sub	sp, #56	; 0x38
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a59      	ldr	r2, [pc, #356]	; (80020a0 <HAL_ETH_MspInit+0x184>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	f040 80ab 	bne.w	8002096 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001f40:	4b58      	ldr	r3, [pc, #352]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f46:	4a57      	ldr	r2, [pc, #348]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f4c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f50:	4b54      	ldr	r3, [pc, #336]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001f5e:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f60:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f64:	4a4f      	ldr	r2, [pc, #316]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f6e:	4b4d      	ldr	r3, [pc, #308]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001f7c:	4b49      	ldr	r3, [pc, #292]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f7e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f82:	4a48      	ldr	r2, [pc, #288]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f8c:	4b45      	ldr	r3, [pc, #276]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f8e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9a:	4b42      	ldr	r3, [pc, #264]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fa0:	4a40      	ldr	r2, [pc, #256]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001faa:	4b3e      	ldr	r3, [pc, #248]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	617b      	str	r3, [r7, #20]
 8001fb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb8:	4b3a      	ldr	r3, [pc, #232]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbe:	4a39      	ldr	r2, [pc, #228]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc8:	4b36      	ldr	r3, [pc, #216]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001fca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd6:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fdc:	4a31      	ldr	r2, [pc, #196]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001fde:	f043 0302 	orr.w	r3, r3, #2
 8001fe2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe6:	4b2f      	ldr	r3, [pc, #188]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001fe8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ff4:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ffa:	4a2a      	ldr	r2, [pc, #168]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8001ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002000:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_ETH_MspInit+0x188>)
 8002006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800200a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800200e:	60bb      	str	r3, [r7, #8]
 8002010:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002012:	2332      	movs	r3, #50	; 0x32
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002016:	2302      	movs	r3, #2
 8002018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201a:	2300      	movs	r3, #0
 800201c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800201e:	2300      	movs	r3, #0
 8002020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002022:	230b      	movs	r3, #11
 8002024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800202a:	4619      	mov	r1, r3
 800202c:	481e      	ldr	r0, [pc, #120]	; (80020a8 <HAL_ETH_MspInit+0x18c>)
 800202e:	f003 fa7d 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002032:	2386      	movs	r3, #134	; 0x86
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002042:	230b      	movs	r3, #11
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002046:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800204a:	4619      	mov	r1, r3
 800204c:	4817      	ldr	r0, [pc, #92]	; (80020ac <HAL_ETH_MspInit+0x190>)
 800204e:	f003 fa6d 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002052:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002058:	2302      	movs	r3, #2
 800205a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002060:	2300      	movs	r3, #0
 8002062:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002064:	230b      	movs	r3, #11
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800206c:	4619      	mov	r1, r3
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <HAL_ETH_MspInit+0x194>)
 8002070:	f003 fa5c 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002074:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002086:	230b      	movs	r3, #11
 8002088:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	4619      	mov	r1, r3
 8002090:	4808      	ldr	r0, [pc, #32]	; (80020b4 <HAL_ETH_MspInit+0x198>)
 8002092:	f003 fa4b 	bl	800552c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3738      	adds	r7, #56	; 0x38
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40028000 	.word	0x40028000
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58020800 	.word	0x58020800
 80020ac:	58020000 	.word	0x58020000
 80020b0:	58020400 	.word	0x58020400
 80020b4:	58021800 	.word	0x58021800

080020b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
 80020ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2a      	ldr	r2, [pc, #168]	; (8002180 <HAL_SPI_MspInit+0xc8>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d14d      	bne.n	8002176 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80020da:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 80020dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020e0:	4a28      	ldr	r2, [pc, #160]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 80020e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 80020ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	4a21      	ldr	r2, [pc, #132]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 800210a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 8002118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800211c:	4a19      	ldr	r2, [pc, #100]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_SPI_MspInit+0xcc>)
 8002128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002134:	2304      	movs	r3, #4
 8002136:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002138:	2302      	movs	r3, #2
 800213a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800213c:	2302      	movs	r3, #2
 800213e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002140:	2300      	movs	r3, #0
 8002142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002144:	2307      	movs	r3, #7
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002148:	f107 0314 	add.w	r3, r7, #20
 800214c:	4619      	mov	r1, r3
 800214e:	480e      	ldr	r0, [pc, #56]	; (8002188 <HAL_SPI_MspInit+0xd0>)
 8002150:	f003 f9ec 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002154:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002158:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215a:	2302      	movs	r3, #2
 800215c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800215e:	2302      	movs	r3, #2
 8002160:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002162:	2300      	movs	r3, #0
 8002164:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002166:	2306      	movs	r3, #6
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	4806      	ldr	r0, [pc, #24]	; (800218c <HAL_SPI_MspInit+0xd4>)
 8002172:	f003 f9db 	bl	800552c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40003c00 	.word	0x40003c00
 8002184:	58024400 	.word	0x58024400
 8002188:	58020400 	.word	0x58020400
 800218c:	58020800 	.word	0x58020800

08002190 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b8      	sub	sp, #224	; 0xe0
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002198:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	22bc      	movs	r2, #188	; 0xbc
 80021ae:	2100      	movs	r1, #0
 80021b0:	4618      	mov	r0, r3
 80021b2:	f008 fcbd 	bl	800ab30 <memset>
  if(huart->Instance==USART3)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a57      	ldr	r2, [pc, #348]	; (8002318 <HAL_UART_MspInit+0x188>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	f040 80a6 	bne.w	800230e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021c2:	2302      	movs	r3, #2
 80021c4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021cc:	f107 0310 	add.w	r3, r7, #16
 80021d0:	4618      	mov	r0, r3
 80021d2:	f004 fd41 	bl	8006c58 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80021dc:	f7ff fb48 	bl	8001870 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021e0:	4b4e      	ldr	r3, [pc, #312]	; (800231c <HAL_UART_MspInit+0x18c>)
 80021e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021e6:	4a4d      	ldr	r2, [pc, #308]	; (800231c <HAL_UART_MspInit+0x18c>)
 80021e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80021ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80021f0:	4b4a      	ldr	r3, [pc, #296]	; (800231c <HAL_UART_MspInit+0x18c>)
 80021f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80021f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_UART_MspInit+0x18c>)
 8002200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002204:	4a45      	ldr	r2, [pc, #276]	; (800231c <HAL_UART_MspInit+0x18c>)
 8002206:	f043 0308 	orr.w	r3, r3, #8
 800220a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800220e:	4b43      	ldr	r3, [pc, #268]	; (800231c <HAL_UART_MspInit+0x18c>)
 8002210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	60bb      	str	r3, [r7, #8]
 800221a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800221c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002220:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002230:	2300      	movs	r3, #0
 8002232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002236:	2307      	movs	r3, #7
 8002238:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800223c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002240:	4619      	mov	r1, r3
 8002242:	4837      	ldr	r0, [pc, #220]	; (8002320 <HAL_UART_MspInit+0x190>)
 8002244:	f003 f972 	bl	800552c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_UART_MspInit+0x194>)
 800224a:	4a37      	ldr	r2, [pc, #220]	; (8002328 <HAL_UART_MspInit+0x198>)
 800224c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800224e:	4b35      	ldr	r3, [pc, #212]	; (8002324 <HAL_UART_MspInit+0x194>)
 8002250:	222d      	movs	r2, #45	; 0x2d
 8002252:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <HAL_UART_MspInit+0x194>)
 8002256:	2200      	movs	r2, #0
 8002258:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800225a:	4b32      	ldr	r3, [pc, #200]	; (8002324 <HAL_UART_MspInit+0x194>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <HAL_UART_MspInit+0x194>)
 8002262:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002266:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_UART_MspInit+0x194>)
 800226a:	2200      	movs	r2, #0
 800226c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_UART_MspInit+0x194>)
 8002270:	2200      	movs	r2, #0
 8002272:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002274:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <HAL_UART_MspInit+0x194>)
 8002276:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800227c:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_UART_MspInit+0x194>)
 800227e:	2200      	movs	r2, #0
 8002280:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002282:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_UART_MspInit+0x194>)
 8002284:	2200      	movs	r2, #0
 8002286:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002288:	4826      	ldr	r0, [pc, #152]	; (8002324 <HAL_UART_MspInit+0x194>)
 800228a:	f000 fb05 	bl	8002898 <HAL_DMA_Init>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002294:	f7ff faec 	bl	8001870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a22      	ldr	r2, [pc, #136]	; (8002324 <HAL_UART_MspInit+0x194>)
 800229c:	67da      	str	r2, [r3, #124]	; 0x7c
 800229e:	4a21      	ldr	r2, [pc, #132]	; (8002324 <HAL_UART_MspInit+0x194>)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022a6:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_UART_MspInit+0x1a0>)
 80022a8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022ac:	222e      	movs	r2, #46	; 0x2e
 80022ae:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022b0:	4b1e      	ldr	r3, [pc, #120]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022b2:	2240      	movs	r2, #64	; 0x40
 80022b4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80022bc:	4b1b      	ldr	r3, [pc, #108]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80022c4:	4b19      	ldr	r3, [pc, #100]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022d8:	2200      	movs	r2, #0
 80022da:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022de:	2200      	movs	r2, #0
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022e4:	f000 fad8 	bl	8002898 <HAL_DMA_Init>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d001      	beq.n	80022f2 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80022ee:	f7ff fabf 	bl	8001870 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022f6:	679a      	str	r2, [r3, #120]	; 0x78
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <HAL_UART_MspInit+0x19c>)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	2027      	movs	r0, #39	; 0x27
 8002304:	f000 fa93 	bl	800282e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002308:	2027      	movs	r0, #39	; 0x27
 800230a:	f000 faaa 	bl	8002862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	37e0      	adds	r7, #224	; 0xe0
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40004800 	.word	0x40004800
 800231c:	58024400 	.word	0x58024400
 8002320:	58020c00 	.word	0x58020c00
 8002324:	240002fc 	.word	0x240002fc
 8002328:	40020028 	.word	0x40020028
 800232c:	24000374 	.word	0x24000374
 8002330:	40020070 	.word	0x40020070

08002334 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a22      	ldr	r2, [pc, #136]	; (80023dc <HAL_PCD_MspInit+0xa8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d13d      	bne.n	80023d2 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002356:	f003 fcb5 	bl	8005cc4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <HAL_PCD_MspInit+0xac>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002360:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_PCD_MspInit+0xac>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_PCD_MspInit+0xac>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002378:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800237c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002386:	2300      	movs	r3, #0
 8002388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800238a:	230a      	movs	r3, #10
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238e:	f107 0314 	add.w	r3, r7, #20
 8002392:	4619      	mov	r1, r3
 8002394:	4813      	ldr	r0, [pc, #76]	; (80023e4 <HAL_PCD_MspInit+0xb0>)
 8002396:	f003 f8c9 	bl	800552c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800239a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a8:	f107 0314 	add.w	r3, r7, #20
 80023ac:	4619      	mov	r1, r3
 80023ae:	480d      	ldr	r0, [pc, #52]	; (80023e4 <HAL_PCD_MspInit+0xb0>)
 80023b0:	f003 f8bc 	bl	800552c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_PCD_MspInit+0xac>)
 80023b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <HAL_PCD_MspInit+0xac>)
 80023bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80023c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_PCD_MspInit+0xac>)
 80023c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80023d2:	bf00      	nop
 80023d4:	3728      	adds	r7, #40	; 0x28
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40080000 	.word	0x40080000
 80023e0:	58024400 	.word	0x58024400
 80023e4:	58020000 	.word	0x58020000

080023e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ec:	e7fe      	b.n	80023ec <NMI_Handler+0x4>

080023ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ee:	b480      	push	{r7}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f2:	e7fe      	b.n	80023f2 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <MemManage_Handler+0x4>

080023fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <BusFault_Handler+0x4>

08002400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <UsageFault_Handler+0x4>

08002406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr

08002422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002422:	b480      	push	{r7}
 8002424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002426:	bf00      	nop
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002434:	f000 f8bc 	bl	80025b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002440:	4802      	ldr	r0, [pc, #8]	; (800244c <DMA1_Stream1_IRQHandler+0x10>)
 8002442:	f001 fae9 	bl	8003a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002446:	bf00      	nop
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	240002fc 	.word	0x240002fc

08002450 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002454:	4802      	ldr	r0, [pc, #8]	; (8002460 <DMA1_Stream4_IRQHandler+0x10>)
 8002456:	f001 fadf 	bl	8003a18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	24000374 	.word	0x24000374

08002464 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002468:	4802      	ldr	r0, [pc, #8]	; (8002474 <USART3_IRQHandler+0x10>)
 800246a:	f006 fb8f 	bl	8008b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2400026c 	.word	0x2400026c

08002478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80024b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800247c:	f7fe fdb4 	bl	8000fe8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002480:	480c      	ldr	r0, [pc, #48]	; (80024b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002482:	490d      	ldr	r1, [pc, #52]	; (80024b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002484:	4a0d      	ldr	r2, [pc, #52]	; (80024bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002488:	e002      	b.n	8002490 <LoopCopyDataInit>

0800248a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800248a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800248c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800248e:	3304      	adds	r3, #4

08002490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002494:	d3f9      	bcc.n	800248a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002496:	4a0a      	ldr	r2, [pc, #40]	; (80024c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800249a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800249c:	e001      	b.n	80024a2 <LoopFillZerobss>

0800249e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800249e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024a0:	3204      	adds	r2, #4

080024a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024a4:	d3fb      	bcc.n	800249e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024a6:	f008 fb1f 	bl	800aae8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024aa:	f7fe fe33 	bl	8001114 <main>
  bx  lr
 80024ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024b0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024b4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80024b8:	24000020 	.word	0x24000020
  ldr r2, =_sidata
 80024bc:	0800c154 	.word	0x0800c154
  ldr r2, =_sbss
 80024c0:	240000e0 	.word	0x240000e0
  ldr r4, =_ebss
 80024c4:	24000c3c 	.word	0x24000c3c

080024c8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024c8:	e7fe      	b.n	80024c8 <ADC3_IRQHandler>
	...

080024cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d2:	2003      	movs	r0, #3
 80024d4:	f000 f9a0 	bl	8002818 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80024d8:	f004 f9e8 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <HAL_Init+0x68>)
 80024e0:	699b      	ldr	r3, [r3, #24]
 80024e2:	0a1b      	lsrs	r3, r3, #8
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	4913      	ldr	r1, [pc, #76]	; (8002538 <HAL_Init+0x6c>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	f003 031f 	and.w	r3, r3, #31
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
 80024f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024f6:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_Init+0x68>)
 80024f8:	699b      	ldr	r3, [r3, #24]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_Init+0x6c>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	f003 031f 	and.w	r3, r3, #31
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	4a0b      	ldr	r2, [pc, #44]	; (800253c <HAL_Init+0x70>)
 800250e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002510:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_Init+0x74>)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002516:	2000      	movs	r0, #0
 8002518:	f000 f814 	bl	8002544 <HAL_InitTick>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e002      	b.n	800252c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002526:	f7ff fcdf 	bl	8001ee8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	58024400 	.word	0x58024400
 8002538:	0800abc4 	.word	0x0800abc4
 800253c:	24000004 	.word	0x24000004
 8002540:	24000000 	.word	0x24000000

08002544 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800254c:	4b15      	ldr	r3, [pc, #84]	; (80025a4 <HAL_InitTick+0x60>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e021      	b.n	800259c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002558:	4b13      	ldr	r3, [pc, #76]	; (80025a8 <HAL_InitTick+0x64>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <HAL_InitTick+0x60>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	4619      	mov	r1, r3
 8002562:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002566:	fbb3 f3f1 	udiv	r3, r3, r1
 800256a:	fbb2 f3f3 	udiv	r3, r2, r3
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f985 	bl	800287e <HAL_SYSTICK_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e00e      	b.n	800259c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0f      	cmp	r3, #15
 8002582:	d80a      	bhi.n	800259a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002584:	2200      	movs	r2, #0
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	f04f 30ff 	mov.w	r0, #4294967295
 800258c:	f000 f94f 	bl	800282e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002590:	4a06      	ldr	r2, [pc, #24]	; (80025ac <HAL_InitTick+0x68>)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
 8002598:	e000      	b.n	800259c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	2400001c 	.word	0x2400001c
 80025a8:	24000000 	.word	0x24000000
 80025ac:	24000018 	.word	0x24000018

080025b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <HAL_IncTick+0x20>)
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	461a      	mov	r2, r3
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_IncTick+0x24>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <HAL_IncTick+0x24>)
 80025c2:	6013      	str	r3, [r2, #0]
}
 80025c4:	bf00      	nop
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
 80025ce:	bf00      	nop
 80025d0:	2400001c 	.word	0x2400001c
 80025d4:	24000c38 	.word	0x24000c38

080025d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return uwTick;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_GetTick+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	24000c38 	.word	0x24000c38

080025f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff ffee 	bl	80025d8 <HAL_GetTick>
 80025fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d005      	beq.n	8002616 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260a:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <HAL_Delay+0x44>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	4413      	add	r3, r2
 8002614:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002616:	bf00      	nop
 8002618:	f7ff ffde 	bl	80025d8 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	68fa      	ldr	r2, [r7, #12]
 8002624:	429a      	cmp	r2, r3
 8002626:	d8f7      	bhi.n	8002618 <HAL_Delay+0x28>
  {
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	2400001c 	.word	0x2400001c

08002638 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_GetREVID+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	0c1b      	lsrs	r3, r3, #16
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	5c001000 	.word	0x5c001000

08002650 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002660:	4904      	ldr	r1, [pc, #16]	; (8002674 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4313      	orrs	r3, r2
 8002666:	604b      	str	r3, [r1, #4]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	58000400 	.word	0x58000400

08002678 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002688:	4b0b      	ldr	r3, [pc, #44]	; (80026b8 <__NVIC_SetPriorityGrouping+0x40>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002694:	4013      	ands	r3, r2
 8002696:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80026a0:	4b06      	ldr	r3, [pc, #24]	; (80026bc <__NVIC_SetPriorityGrouping+0x44>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <__NVIC_SetPriorityGrouping+0x40>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00
 80026bc:	05fa0000 	.word	0x05fa0000

080026c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c4:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <__NVIC_GetPriorityGrouping+0x18>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	f003 0307 	and.w	r3, r3, #7
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	e000ed00 	.word	0xe000ed00

080026dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80026e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db0b      	blt.n	8002706 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4907      	ldr	r1, [pc, #28]	; (8002714 <__NVIC_EnableIRQ+0x38>)
 80026f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	2001      	movs	r0, #1
 80026fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	e000e100 	.word	0xe000e100

08002718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	6039      	str	r1, [r7, #0]
 8002722:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002724:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002728:	2b00      	cmp	r3, #0
 800272a:	db0a      	blt.n	8002742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	b2da      	uxtb	r2, r3
 8002730:	490c      	ldr	r1, [pc, #48]	; (8002764 <__NVIC_SetPriority+0x4c>)
 8002732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002736:	0112      	lsls	r2, r2, #4
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	440b      	add	r3, r1
 800273c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002740:	e00a      	b.n	8002758 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4908      	ldr	r1, [pc, #32]	; (8002768 <__NVIC_SetPriority+0x50>)
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	3b04      	subs	r3, #4
 8002750:	0112      	lsls	r2, r2, #4
 8002752:	b2d2      	uxtb	r2, r2
 8002754:	440b      	add	r3, r1
 8002756:	761a      	strb	r2, [r3, #24]
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	e000e100 	.word	0xe000e100
 8002768:	e000ed00 	.word	0xe000ed00

0800276c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800276c:	b480      	push	{r7}
 800276e:	b089      	sub	sp, #36	; 0x24
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f1c3 0307 	rsb	r3, r3, #7
 8002786:	2b04      	cmp	r3, #4
 8002788:	bf28      	it	cs
 800278a:	2304      	movcs	r3, #4
 800278c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	3304      	adds	r3, #4
 8002792:	2b06      	cmp	r3, #6
 8002794:	d902      	bls.n	800279c <NVIC_EncodePriority+0x30>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b03      	subs	r3, #3
 800279a:	e000      	b.n	800279e <NVIC_EncodePriority+0x32>
 800279c:	2300      	movs	r3, #0
 800279e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a0:	f04f 32ff 	mov.w	r2, #4294967295
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	43da      	mvns	r2, r3
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	401a      	ands	r2, r3
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b4:	f04f 31ff 	mov.w	r1, #4294967295
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	fa01 f303 	lsl.w	r3, r1, r3
 80027be:	43d9      	mvns	r1, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c4:	4313      	orrs	r3, r2
         );
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3724      	adds	r7, #36	; 0x24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
	...

080027d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3b01      	subs	r3, #1
 80027e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027e4:	d301      	bcc.n	80027ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027e6:	2301      	movs	r3, #1
 80027e8:	e00f      	b.n	800280a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <SysTick_Config+0x40>)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	3b01      	subs	r3, #1
 80027f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027f2:	210f      	movs	r1, #15
 80027f4:	f04f 30ff 	mov.w	r0, #4294967295
 80027f8:	f7ff ff8e 	bl	8002718 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <SysTick_Config+0x40>)
 80027fe:	2200      	movs	r2, #0
 8002800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002802:	4b04      	ldr	r3, [pc, #16]	; (8002814 <SysTick_Config+0x40>)
 8002804:	2207      	movs	r2, #7
 8002806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	e000e010 	.word	0xe000e010

08002818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f7ff ff29 	bl	8002678 <__NVIC_SetPriorityGrouping>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800282e:	b580      	push	{r7, lr}
 8002830:	b086      	sub	sp, #24
 8002832:	af00      	add	r7, sp, #0
 8002834:	4603      	mov	r3, r0
 8002836:	60b9      	str	r1, [r7, #8]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800283c:	f7ff ff40 	bl	80026c0 <__NVIC_GetPriorityGrouping>
 8002840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68b9      	ldr	r1, [r7, #8]
 8002846:	6978      	ldr	r0, [r7, #20]
 8002848:	f7ff ff90 	bl	800276c <NVIC_EncodePriority>
 800284c:	4602      	mov	r2, r0
 800284e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002852:	4611      	mov	r1, r2
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff ff5f 	bl	8002718 <__NVIC_SetPriority>
}
 800285a:	bf00      	nop
 800285c:	3718      	adds	r7, #24
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	4603      	mov	r3, r0
 800286a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800286c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff ff33 	bl	80026dc <__NVIC_EnableIRQ>
}
 8002876:	bf00      	nop
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7ff ffa4 	bl	80027d4 <SysTick_Config>
 800288c:	4603      	mov	r3, r0
}
 800288e:	4618      	mov	r0, r3
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80028a0:	f7ff fe9a 	bl	80025d8 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d101      	bne.n	80028b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e316      	b.n	8002ede <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a66      	ldr	r2, [pc, #408]	; (8002a50 <HAL_DMA_Init+0x1b8>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d04a      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a65      	ldr	r2, [pc, #404]	; (8002a54 <HAL_DMA_Init+0x1bc>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d045      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a63      	ldr	r2, [pc, #396]	; (8002a58 <HAL_DMA_Init+0x1c0>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d040      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a62      	ldr	r2, [pc, #392]	; (8002a5c <HAL_DMA_Init+0x1c4>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d03b      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a60      	ldr	r2, [pc, #384]	; (8002a60 <HAL_DMA_Init+0x1c8>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d036      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a5f      	ldr	r2, [pc, #380]	; (8002a64 <HAL_DMA_Init+0x1cc>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d031      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a5d      	ldr	r2, [pc, #372]	; (8002a68 <HAL_DMA_Init+0x1d0>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02c      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a5c      	ldr	r2, [pc, #368]	; (8002a6c <HAL_DMA_Init+0x1d4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d027      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5a      	ldr	r2, [pc, #360]	; (8002a70 <HAL_DMA_Init+0x1d8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d022      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a59      	ldr	r2, [pc, #356]	; (8002a74 <HAL_DMA_Init+0x1dc>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d01d      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_DMA_Init+0x1e0>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d018      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_DMA_Init+0x1e4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d013      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a54      	ldr	r2, [pc, #336]	; (8002a80 <HAL_DMA_Init+0x1e8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00e      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a53      	ldr	r2, [pc, #332]	; (8002a84 <HAL_DMA_Init+0x1ec>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d009      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_DMA_Init+0x1f0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d004      	beq.n	8002950 <HAL_DMA_Init+0xb8>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_DMA_Init+0x1f4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_DMA_Init+0xbc>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_DMA_Init+0xbe>
 8002954:	2300      	movs	r3, #0
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 813b 	beq.w	8002bd2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a37      	ldr	r2, [pc, #220]	; (8002a50 <HAL_DMA_Init+0x1b8>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d04a      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a36      	ldr	r2, [pc, #216]	; (8002a54 <HAL_DMA_Init+0x1bc>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d045      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a34      	ldr	r2, [pc, #208]	; (8002a58 <HAL_DMA_Init+0x1c0>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d040      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a33      	ldr	r2, [pc, #204]	; (8002a5c <HAL_DMA_Init+0x1c4>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d03b      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a31      	ldr	r2, [pc, #196]	; (8002a60 <HAL_DMA_Init+0x1c8>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d036      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a30      	ldr	r2, [pc, #192]	; (8002a64 <HAL_DMA_Init+0x1cc>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d031      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2e      	ldr	r2, [pc, #184]	; (8002a68 <HAL_DMA_Init+0x1d0>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d02c      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2d      	ldr	r2, [pc, #180]	; (8002a6c <HAL_DMA_Init+0x1d4>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d027      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2b      	ldr	r2, [pc, #172]	; (8002a70 <HAL_DMA_Init+0x1d8>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d022      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a2a      	ldr	r2, [pc, #168]	; (8002a74 <HAL_DMA_Init+0x1dc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d01d      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a28      	ldr	r2, [pc, #160]	; (8002a78 <HAL_DMA_Init+0x1e0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d018      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a27      	ldr	r2, [pc, #156]	; (8002a7c <HAL_DMA_Init+0x1e4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a25      	ldr	r2, [pc, #148]	; (8002a80 <HAL_DMA_Init+0x1e8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00e      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a24      	ldr	r2, [pc, #144]	; (8002a84 <HAL_DMA_Init+0x1ec>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d009      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a22      	ldr	r2, [pc, #136]	; (8002a88 <HAL_DMA_Init+0x1f0>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d004      	beq.n	8002a0c <HAL_DMA_Init+0x174>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <HAL_DMA_Init+0x1f4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d108      	bne.n	8002a1e <HAL_DMA_Init+0x186>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f022 0201 	bic.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e007      	b.n	8002a2e <HAL_DMA_Init+0x196>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a2e:	e02f      	b.n	8002a90 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a30:	f7ff fdd2 	bl	80025d8 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d928      	bls.n	8002a90 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2203      	movs	r2, #3
 8002a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e246      	b.n	8002ede <HAL_DMA_Init+0x646>
 8002a50:	40020010 	.word	0x40020010
 8002a54:	40020028 	.word	0x40020028
 8002a58:	40020040 	.word	0x40020040
 8002a5c:	40020058 	.word	0x40020058
 8002a60:	40020070 	.word	0x40020070
 8002a64:	40020088 	.word	0x40020088
 8002a68:	400200a0 	.word	0x400200a0
 8002a6c:	400200b8 	.word	0x400200b8
 8002a70:	40020410 	.word	0x40020410
 8002a74:	40020428 	.word	0x40020428
 8002a78:	40020440 	.word	0x40020440
 8002a7c:	40020458 	.word	0x40020458
 8002a80:	40020470 	.word	0x40020470
 8002a84:	40020488 	.word	0x40020488
 8002a88:	400204a0 	.word	0x400204a0
 8002a8c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1c8      	bne.n	8002a30 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4b83      	ldr	r3, [pc, #524]	; (8002cb8 <HAL_DMA_Init+0x420>)
 8002aaa:	4013      	ands	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002ab6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ac2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ace:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a1b      	ldr	r3, [r3, #32]
 8002ad4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d107      	bne.n	8002af4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aec:	4313      	orrs	r3, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002af4:	4b71      	ldr	r3, [pc, #452]	; (8002cbc <HAL_DMA_Init+0x424>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4b71      	ldr	r3, [pc, #452]	; (8002cc0 <HAL_DMA_Init+0x428>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b00:	d328      	bcc.n	8002b54 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b28      	cmp	r3, #40	; 0x28
 8002b08:	d903      	bls.n	8002b12 <HAL_DMA_Init+0x27a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b2e      	cmp	r3, #46	; 0x2e
 8002b10:	d917      	bls.n	8002b42 <HAL_DMA_Init+0x2aa>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b3e      	cmp	r3, #62	; 0x3e
 8002b18:	d903      	bls.n	8002b22 <HAL_DMA_Init+0x28a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b42      	cmp	r3, #66	; 0x42
 8002b20:	d90f      	bls.n	8002b42 <HAL_DMA_Init+0x2aa>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	2b46      	cmp	r3, #70	; 0x46
 8002b28:	d903      	bls.n	8002b32 <HAL_DMA_Init+0x29a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	2b48      	cmp	r3, #72	; 0x48
 8002b30:	d907      	bls.n	8002b42 <HAL_DMA_Init+0x2aa>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b4e      	cmp	r3, #78	; 0x4e
 8002b38:	d905      	bls.n	8002b46 <HAL_DMA_Init+0x2ae>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	2b52      	cmp	r3, #82	; 0x52
 8002b40:	d801      	bhi.n	8002b46 <HAL_DMA_Init+0x2ae>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_Init+0x2b0>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b52:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f023 0307 	bic.w	r3, r3, #7
 8002b6a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d117      	bne.n	8002bae <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00e      	beq.n	8002bae <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f001 ff1d 	bl	80049d0 <DMA_CheckFifoParam>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d008      	beq.n	8002bae <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2240      	movs	r2, #64	; 0x40
 8002ba0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e197      	b.n	8002ede <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f001 fe58 	bl	800486c <DMA_CalcBaseAndBitshift>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	f003 031f 	and.w	r3, r3, #31
 8002bc8:	223f      	movs	r2, #63	; 0x3f
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	609a      	str	r2, [r3, #8]
 8002bd0:	e0cd      	b.n	8002d6e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a3b      	ldr	r2, [pc, #236]	; (8002cc4 <HAL_DMA_Init+0x42c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_Init+0x38a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a39      	ldr	r2, [pc, #228]	; (8002cc8 <HAL_DMA_Init+0x430>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d01d      	beq.n	8002c22 <HAL_DMA_Init+0x38a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a38      	ldr	r2, [pc, #224]	; (8002ccc <HAL_DMA_Init+0x434>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d018      	beq.n	8002c22 <HAL_DMA_Init+0x38a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a36      	ldr	r2, [pc, #216]	; (8002cd0 <HAL_DMA_Init+0x438>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d013      	beq.n	8002c22 <HAL_DMA_Init+0x38a>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a35      	ldr	r2, [pc, #212]	; (8002cd4 <HAL_DMA_Init+0x43c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00e      	beq.n	8002c22 <HAL_DMA_Init+0x38a>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a33      	ldr	r2, [pc, #204]	; (8002cd8 <HAL_DMA_Init+0x440>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d009      	beq.n	8002c22 <HAL_DMA_Init+0x38a>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a32      	ldr	r2, [pc, #200]	; (8002cdc <HAL_DMA_Init+0x444>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d004      	beq.n	8002c22 <HAL_DMA_Init+0x38a>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a30      	ldr	r2, [pc, #192]	; (8002ce0 <HAL_DMA_Init+0x448>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d101      	bne.n	8002c26 <HAL_DMA_Init+0x38e>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <HAL_DMA_Init+0x390>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8097 	beq.w	8002d5c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a24      	ldr	r2, [pc, #144]	; (8002cc4 <HAL_DMA_Init+0x42c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d021      	beq.n	8002c7c <HAL_DMA_Init+0x3e4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a22      	ldr	r2, [pc, #136]	; (8002cc8 <HAL_DMA_Init+0x430>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d01c      	beq.n	8002c7c <HAL_DMA_Init+0x3e4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a21      	ldr	r2, [pc, #132]	; (8002ccc <HAL_DMA_Init+0x434>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d017      	beq.n	8002c7c <HAL_DMA_Init+0x3e4>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a1f      	ldr	r2, [pc, #124]	; (8002cd0 <HAL_DMA_Init+0x438>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d012      	beq.n	8002c7c <HAL_DMA_Init+0x3e4>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	; (8002cd4 <HAL_DMA_Init+0x43c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00d      	beq.n	8002c7c <HAL_DMA_Init+0x3e4>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a1c      	ldr	r2, [pc, #112]	; (8002cd8 <HAL_DMA_Init+0x440>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d008      	beq.n	8002c7c <HAL_DMA_Init+0x3e4>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a1b      	ldr	r2, [pc, #108]	; (8002cdc <HAL_DMA_Init+0x444>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d003      	beq.n	8002c7c <HAL_DMA_Init+0x3e4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <HAL_DMA_Init+0x448>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2202      	movs	r2, #2
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	4b12      	ldr	r3, [pc, #72]	; (8002ce4 <HAL_DMA_Init+0x44c>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b40      	cmp	r3, #64	; 0x40
 8002ca4:	d020      	beq.n	8002ce8 <HAL_DMA_Init+0x450>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	2b80      	cmp	r3, #128	; 0x80
 8002cac:	d102      	bne.n	8002cb4 <HAL_DMA_Init+0x41c>
 8002cae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cb2:	e01a      	b.n	8002cea <HAL_DMA_Init+0x452>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	e018      	b.n	8002cea <HAL_DMA_Init+0x452>
 8002cb8:	fe10803f 	.word	0xfe10803f
 8002cbc:	5c001000 	.word	0x5c001000
 8002cc0:	ffff0000 	.word	0xffff0000
 8002cc4:	58025408 	.word	0x58025408
 8002cc8:	5802541c 	.word	0x5802541c
 8002ccc:	58025430 	.word	0x58025430
 8002cd0:	58025444 	.word	0x58025444
 8002cd4:	58025458 	.word	0x58025458
 8002cd8:	5802546c 	.word	0x5802546c
 8002cdc:	58025480 	.word	0x58025480
 8002ce0:	58025494 	.word	0x58025494
 8002ce4:	fffe000f 	.word	0xfffe000f
 8002ce8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002cf0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002cf8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002d00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002d08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002d10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002d18:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b6e      	ldr	r3, [pc, #440]	; (8002ee8 <HAL_DMA_Init+0x650>)
 8002d30:	4413      	add	r3, r2
 8002d32:	4a6e      	ldr	r2, [pc, #440]	; (8002eec <HAL_DMA_Init+0x654>)
 8002d34:	fba2 2303 	umull	r2, r3, r2, r3
 8002d38:	091b      	lsrs	r3, r3, #4
 8002d3a:	009a      	lsls	r2, r3, #2
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f001 fd93 	bl	800486c <DMA_CalcBaseAndBitshift>
 8002d46:	4603      	mov	r3, r0
 8002d48:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2201      	movs	r2, #1
 8002d54:	409a      	lsls	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]
 8002d5a:	e008      	b.n	8002d6e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2240      	movs	r2, #64	; 0x40
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2203      	movs	r2, #3
 8002d66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0b7      	b.n	8002ede <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a5f      	ldr	r2, [pc, #380]	; (8002ef0 <HAL_DMA_Init+0x658>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d072      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a5d      	ldr	r2, [pc, #372]	; (8002ef4 <HAL_DMA_Init+0x65c>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d06d      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a5c      	ldr	r2, [pc, #368]	; (8002ef8 <HAL_DMA_Init+0x660>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d068      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a5a      	ldr	r2, [pc, #360]	; (8002efc <HAL_DMA_Init+0x664>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d063      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a59      	ldr	r2, [pc, #356]	; (8002f00 <HAL_DMA_Init+0x668>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d05e      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a57      	ldr	r2, [pc, #348]	; (8002f04 <HAL_DMA_Init+0x66c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d059      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a56      	ldr	r2, [pc, #344]	; (8002f08 <HAL_DMA_Init+0x670>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d054      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a54      	ldr	r2, [pc, #336]	; (8002f0c <HAL_DMA_Init+0x674>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d04f      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a53      	ldr	r2, [pc, #332]	; (8002f10 <HAL_DMA_Init+0x678>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d04a      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a51      	ldr	r2, [pc, #324]	; (8002f14 <HAL_DMA_Init+0x67c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d045      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a50      	ldr	r2, [pc, #320]	; (8002f18 <HAL_DMA_Init+0x680>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d040      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a4e      	ldr	r2, [pc, #312]	; (8002f1c <HAL_DMA_Init+0x684>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d03b      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a4d      	ldr	r2, [pc, #308]	; (8002f20 <HAL_DMA_Init+0x688>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d036      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a4b      	ldr	r2, [pc, #300]	; (8002f24 <HAL_DMA_Init+0x68c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d031      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a4a      	ldr	r2, [pc, #296]	; (8002f28 <HAL_DMA_Init+0x690>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d02c      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a48      	ldr	r2, [pc, #288]	; (8002f2c <HAL_DMA_Init+0x694>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d027      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a47      	ldr	r2, [pc, #284]	; (8002f30 <HAL_DMA_Init+0x698>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d022      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a45      	ldr	r2, [pc, #276]	; (8002f34 <HAL_DMA_Init+0x69c>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d01d      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a44      	ldr	r2, [pc, #272]	; (8002f38 <HAL_DMA_Init+0x6a0>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d018      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a42      	ldr	r2, [pc, #264]	; (8002f3c <HAL_DMA_Init+0x6a4>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d013      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a41      	ldr	r2, [pc, #260]	; (8002f40 <HAL_DMA_Init+0x6a8>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3f      	ldr	r2, [pc, #252]	; (8002f44 <HAL_DMA_Init+0x6ac>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a3e      	ldr	r2, [pc, #248]	; (8002f48 <HAL_DMA_Init+0x6b0>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_DMA_Init+0x5c6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a3c      	ldr	r2, [pc, #240]	; (8002f4c <HAL_DMA_Init+0x6b4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_DMA_Init+0x5ca>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_DMA_Init+0x5cc>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d032      	beq.n	8002ece <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f001 fe2d 	bl	8004ac8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b80      	cmp	r3, #128	; 0x80
 8002e74:	d102      	bne.n	8002e7c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002e90:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d010      	beq.n	8002ebc <HAL_DMA_Init+0x624>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b08      	cmp	r3, #8
 8002ea0:	d80c      	bhi.n	8002ebc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f001 feaa 	bl	8004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eac:	2200      	movs	r2, #0
 8002eae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	e008      	b.n	8002ece <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	a7fdabf8 	.word	0xa7fdabf8
 8002eec:	cccccccd 	.word	0xcccccccd
 8002ef0:	40020010 	.word	0x40020010
 8002ef4:	40020028 	.word	0x40020028
 8002ef8:	40020040 	.word	0x40020040
 8002efc:	40020058 	.word	0x40020058
 8002f00:	40020070 	.word	0x40020070
 8002f04:	40020088 	.word	0x40020088
 8002f08:	400200a0 	.word	0x400200a0
 8002f0c:	400200b8 	.word	0x400200b8
 8002f10:	40020410 	.word	0x40020410
 8002f14:	40020428 	.word	0x40020428
 8002f18:	40020440 	.word	0x40020440
 8002f1c:	40020458 	.word	0x40020458
 8002f20:	40020470 	.word	0x40020470
 8002f24:	40020488 	.word	0x40020488
 8002f28:	400204a0 	.word	0x400204a0
 8002f2c:	400204b8 	.word	0x400204b8
 8002f30:	58025408 	.word	0x58025408
 8002f34:	5802541c 	.word	0x5802541c
 8002f38:	58025430 	.word	0x58025430
 8002f3c:	58025444 	.word	0x58025444
 8002f40:	58025458 	.word	0x58025458
 8002f44:	5802546c 	.word	0x5802546c
 8002f48:	58025480 	.word	0x58025480
 8002f4c:	58025494 	.word	0x58025494

08002f50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002f58:	f7ff fb3e 	bl	80025d8 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e2dc      	b.n	8003522 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d008      	beq.n	8002f86 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2280      	movs	r2, #128	; 0x80
 8002f78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e2cd      	b.n	8003522 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a76      	ldr	r2, [pc, #472]	; (8003164 <HAL_DMA_Abort+0x214>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d04a      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a74      	ldr	r2, [pc, #464]	; (8003168 <HAL_DMA_Abort+0x218>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d045      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a73      	ldr	r2, [pc, #460]	; (800316c <HAL_DMA_Abort+0x21c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d040      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a71      	ldr	r2, [pc, #452]	; (8003170 <HAL_DMA_Abort+0x220>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d03b      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a70      	ldr	r2, [pc, #448]	; (8003174 <HAL_DMA_Abort+0x224>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d036      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6e      	ldr	r2, [pc, #440]	; (8003178 <HAL_DMA_Abort+0x228>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d031      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a6d      	ldr	r2, [pc, #436]	; (800317c <HAL_DMA_Abort+0x22c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d02c      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a6b      	ldr	r2, [pc, #428]	; (8003180 <HAL_DMA_Abort+0x230>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d027      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a6a      	ldr	r2, [pc, #424]	; (8003184 <HAL_DMA_Abort+0x234>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a68      	ldr	r2, [pc, #416]	; (8003188 <HAL_DMA_Abort+0x238>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d01d      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a67      	ldr	r2, [pc, #412]	; (800318c <HAL_DMA_Abort+0x23c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d018      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a65      	ldr	r2, [pc, #404]	; (8003190 <HAL_DMA_Abort+0x240>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d013      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a64      	ldr	r2, [pc, #400]	; (8003194 <HAL_DMA_Abort+0x244>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00e      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a62      	ldr	r2, [pc, #392]	; (8003198 <HAL_DMA_Abort+0x248>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d009      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a61      	ldr	r2, [pc, #388]	; (800319c <HAL_DMA_Abort+0x24c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d004      	beq.n	8003026 <HAL_DMA_Abort+0xd6>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a5f      	ldr	r2, [pc, #380]	; (80031a0 <HAL_DMA_Abort+0x250>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d101      	bne.n	800302a <HAL_DMA_Abort+0xda>
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <HAL_DMA_Abort+0xdc>
 800302a:	2300      	movs	r3, #0
 800302c:	2b00      	cmp	r3, #0
 800302e:	d013      	beq.n	8003058 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f022 021e 	bic.w	r2, r2, #30
 800303e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800304e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e00a      	b.n	800306e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f022 020e 	bic.w	r2, r2, #14
 8003066:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a3c      	ldr	r2, [pc, #240]	; (8003164 <HAL_DMA_Abort+0x214>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d072      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a3a      	ldr	r2, [pc, #232]	; (8003168 <HAL_DMA_Abort+0x218>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d06d      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a39      	ldr	r2, [pc, #228]	; (800316c <HAL_DMA_Abort+0x21c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d068      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a37      	ldr	r2, [pc, #220]	; (8003170 <HAL_DMA_Abort+0x220>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d063      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a36      	ldr	r2, [pc, #216]	; (8003174 <HAL_DMA_Abort+0x224>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d05e      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a34      	ldr	r2, [pc, #208]	; (8003178 <HAL_DMA_Abort+0x228>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d059      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a33      	ldr	r2, [pc, #204]	; (800317c <HAL_DMA_Abort+0x22c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d054      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a31      	ldr	r2, [pc, #196]	; (8003180 <HAL_DMA_Abort+0x230>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d04f      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a30      	ldr	r2, [pc, #192]	; (8003184 <HAL_DMA_Abort+0x234>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d04a      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2e      	ldr	r2, [pc, #184]	; (8003188 <HAL_DMA_Abort+0x238>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d045      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a2d      	ldr	r2, [pc, #180]	; (800318c <HAL_DMA_Abort+0x23c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d040      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <HAL_DMA_Abort+0x240>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d03b      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <HAL_DMA_Abort+0x244>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d036      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a28      	ldr	r2, [pc, #160]	; (8003198 <HAL_DMA_Abort+0x248>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d031      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a27      	ldr	r2, [pc, #156]	; (800319c <HAL_DMA_Abort+0x24c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d02c      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a25      	ldr	r2, [pc, #148]	; (80031a0 <HAL_DMA_Abort+0x250>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d027      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a24      	ldr	r2, [pc, #144]	; (80031a4 <HAL_DMA_Abort+0x254>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d022      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a22      	ldr	r2, [pc, #136]	; (80031a8 <HAL_DMA_Abort+0x258>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01d      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_DMA_Abort+0x25c>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d018      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <HAL_DMA_Abort+0x260>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_DMA_Abort+0x264>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00e      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1c      	ldr	r2, [pc, #112]	; (80031b8 <HAL_DMA_Abort+0x268>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1b      	ldr	r2, [pc, #108]	; (80031bc <HAL_DMA_Abort+0x26c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_DMA_Abort+0x20e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a19      	ldr	r2, [pc, #100]	; (80031c0 <HAL_DMA_Abort+0x270>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d132      	bne.n	80031c4 <HAL_DMA_Abort+0x274>
 800315e:	2301      	movs	r3, #1
 8003160:	e031      	b.n	80031c6 <HAL_DMA_Abort+0x276>
 8003162:	bf00      	nop
 8003164:	40020010 	.word	0x40020010
 8003168:	40020028 	.word	0x40020028
 800316c:	40020040 	.word	0x40020040
 8003170:	40020058 	.word	0x40020058
 8003174:	40020070 	.word	0x40020070
 8003178:	40020088 	.word	0x40020088
 800317c:	400200a0 	.word	0x400200a0
 8003180:	400200b8 	.word	0x400200b8
 8003184:	40020410 	.word	0x40020410
 8003188:	40020428 	.word	0x40020428
 800318c:	40020440 	.word	0x40020440
 8003190:	40020458 	.word	0x40020458
 8003194:	40020470 	.word	0x40020470
 8003198:	40020488 	.word	0x40020488
 800319c:	400204a0 	.word	0x400204a0
 80031a0:	400204b8 	.word	0x400204b8
 80031a4:	58025408 	.word	0x58025408
 80031a8:	5802541c 	.word	0x5802541c
 80031ac:	58025430 	.word	0x58025430
 80031b0:	58025444 	.word	0x58025444
 80031b4:	58025458 	.word	0x58025458
 80031b8:	5802546c 	.word	0x5802546c
 80031bc:	58025480 	.word	0x58025480
 80031c0:	58025494 	.word	0x58025494
 80031c4:	2300      	movs	r3, #0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d007      	beq.n	80031da <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a6d      	ldr	r2, [pc, #436]	; (8003394 <HAL_DMA_Abort+0x444>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d04a      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a6b      	ldr	r2, [pc, #428]	; (8003398 <HAL_DMA_Abort+0x448>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d045      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a6a      	ldr	r2, [pc, #424]	; (800339c <HAL_DMA_Abort+0x44c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d040      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a68      	ldr	r2, [pc, #416]	; (80033a0 <HAL_DMA_Abort+0x450>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d03b      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a67      	ldr	r2, [pc, #412]	; (80033a4 <HAL_DMA_Abort+0x454>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d036      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a65      	ldr	r2, [pc, #404]	; (80033a8 <HAL_DMA_Abort+0x458>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d031      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a64      	ldr	r2, [pc, #400]	; (80033ac <HAL_DMA_Abort+0x45c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d02c      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a62      	ldr	r2, [pc, #392]	; (80033b0 <HAL_DMA_Abort+0x460>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d027      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a61      	ldr	r2, [pc, #388]	; (80033b4 <HAL_DMA_Abort+0x464>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d022      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a5f      	ldr	r2, [pc, #380]	; (80033b8 <HAL_DMA_Abort+0x468>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d01d      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a5e      	ldr	r2, [pc, #376]	; (80033bc <HAL_DMA_Abort+0x46c>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d018      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a5c      	ldr	r2, [pc, #368]	; (80033c0 <HAL_DMA_Abort+0x470>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_DMA_Abort+0x474>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d00e      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a59      	ldr	r2, [pc, #356]	; (80033c8 <HAL_DMA_Abort+0x478>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d009      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a58      	ldr	r2, [pc, #352]	; (80033cc <HAL_DMA_Abort+0x47c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d004      	beq.n	800327a <HAL_DMA_Abort+0x32a>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <HAL_DMA_Abort+0x480>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d108      	bne.n	800328c <HAL_DMA_Abort+0x33c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	e007      	b.n	800329c <HAL_DMA_Abort+0x34c>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0201 	bic.w	r2, r2, #1
 800329a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800329c:	e013      	b.n	80032c6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800329e:	f7ff f99b 	bl	80025d8 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b05      	cmp	r3, #5
 80032aa:	d90c      	bls.n	80032c6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2220      	movs	r2, #32
 80032b0:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2203      	movs	r2, #3
 80032b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e12d      	b.n	8003522 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1e5      	bne.n	800329e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a2f      	ldr	r2, [pc, #188]	; (8003394 <HAL_DMA_Abort+0x444>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d04a      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a2d      	ldr	r2, [pc, #180]	; (8003398 <HAL_DMA_Abort+0x448>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d045      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a2c      	ldr	r2, [pc, #176]	; (800339c <HAL_DMA_Abort+0x44c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d040      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a2a      	ldr	r2, [pc, #168]	; (80033a0 <HAL_DMA_Abort+0x450>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d03b      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a29      	ldr	r2, [pc, #164]	; (80033a4 <HAL_DMA_Abort+0x454>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d036      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a27      	ldr	r2, [pc, #156]	; (80033a8 <HAL_DMA_Abort+0x458>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d031      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a26      	ldr	r2, [pc, #152]	; (80033ac <HAL_DMA_Abort+0x45c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d02c      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <HAL_DMA_Abort+0x460>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d027      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <HAL_DMA_Abort+0x464>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d022      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a21      	ldr	r2, [pc, #132]	; (80033b8 <HAL_DMA_Abort+0x468>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d01d      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_DMA_Abort+0x46c>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d018      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <HAL_DMA_Abort+0x470>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_DMA_Abort+0x474>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d00e      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1b      	ldr	r2, [pc, #108]	; (80033c8 <HAL_DMA_Abort+0x478>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a1a      	ldr	r2, [pc, #104]	; (80033cc <HAL_DMA_Abort+0x47c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d004      	beq.n	8003372 <HAL_DMA_Abort+0x422>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a18      	ldr	r2, [pc, #96]	; (80033d0 <HAL_DMA_Abort+0x480>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d101      	bne.n	8003376 <HAL_DMA_Abort+0x426>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_DMA_Abort+0x428>
 8003376:	2300      	movs	r3, #0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d02b      	beq.n	80033d4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	223f      	movs	r2, #63	; 0x3f
 800338c:	409a      	lsls	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	e02a      	b.n	80033ea <HAL_DMA_Abort+0x49a>
 8003394:	40020010 	.word	0x40020010
 8003398:	40020028 	.word	0x40020028
 800339c:	40020040 	.word	0x40020040
 80033a0:	40020058 	.word	0x40020058
 80033a4:	40020070 	.word	0x40020070
 80033a8:	40020088 	.word	0x40020088
 80033ac:	400200a0 	.word	0x400200a0
 80033b0:	400200b8 	.word	0x400200b8
 80033b4:	40020410 	.word	0x40020410
 80033b8:	40020428 	.word	0x40020428
 80033bc:	40020440 	.word	0x40020440
 80033c0:	40020458 	.word	0x40020458
 80033c4:	40020470 	.word	0x40020470
 80033c8:	40020488 	.word	0x40020488
 80033cc:	400204a0 	.word	0x400204a0
 80033d0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033d8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	2201      	movs	r2, #1
 80033e4:	409a      	lsls	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a4f      	ldr	r2, [pc, #316]	; (800352c <HAL_DMA_Abort+0x5dc>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d072      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a4d      	ldr	r2, [pc, #308]	; (8003530 <HAL_DMA_Abort+0x5e0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d06d      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a4c      	ldr	r2, [pc, #304]	; (8003534 <HAL_DMA_Abort+0x5e4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d068      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a4a      	ldr	r2, [pc, #296]	; (8003538 <HAL_DMA_Abort+0x5e8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d063      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a49      	ldr	r2, [pc, #292]	; (800353c <HAL_DMA_Abort+0x5ec>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d05e      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a47      	ldr	r2, [pc, #284]	; (8003540 <HAL_DMA_Abort+0x5f0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d059      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a46      	ldr	r2, [pc, #280]	; (8003544 <HAL_DMA_Abort+0x5f4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d054      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a44      	ldr	r2, [pc, #272]	; (8003548 <HAL_DMA_Abort+0x5f8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d04f      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a43      	ldr	r2, [pc, #268]	; (800354c <HAL_DMA_Abort+0x5fc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d04a      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a41      	ldr	r2, [pc, #260]	; (8003550 <HAL_DMA_Abort+0x600>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d045      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a40      	ldr	r2, [pc, #256]	; (8003554 <HAL_DMA_Abort+0x604>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d040      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a3e      	ldr	r2, [pc, #248]	; (8003558 <HAL_DMA_Abort+0x608>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d03b      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a3d      	ldr	r2, [pc, #244]	; (800355c <HAL_DMA_Abort+0x60c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d036      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a3b      	ldr	r2, [pc, #236]	; (8003560 <HAL_DMA_Abort+0x610>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d031      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a3a      	ldr	r2, [pc, #232]	; (8003564 <HAL_DMA_Abort+0x614>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d02c      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a38      	ldr	r2, [pc, #224]	; (8003568 <HAL_DMA_Abort+0x618>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d027      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a37      	ldr	r2, [pc, #220]	; (800356c <HAL_DMA_Abort+0x61c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d022      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a35      	ldr	r2, [pc, #212]	; (8003570 <HAL_DMA_Abort+0x620>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01d      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a34      	ldr	r2, [pc, #208]	; (8003574 <HAL_DMA_Abort+0x624>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d018      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a32      	ldr	r2, [pc, #200]	; (8003578 <HAL_DMA_Abort+0x628>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d013      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a31      	ldr	r2, [pc, #196]	; (800357c <HAL_DMA_Abort+0x62c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d00e      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a2f      	ldr	r2, [pc, #188]	; (8003580 <HAL_DMA_Abort+0x630>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d009      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a2e      	ldr	r2, [pc, #184]	; (8003584 <HAL_DMA_Abort+0x634>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d004      	beq.n	80034da <HAL_DMA_Abort+0x58a>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a2c      	ldr	r2, [pc, #176]	; (8003588 <HAL_DMA_Abort+0x638>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d101      	bne.n	80034de <HAL_DMA_Abort+0x58e>
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_DMA_Abort+0x590>
 80034de:	2300      	movs	r3, #0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80034ec:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00c      	beq.n	8003510 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003504:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800350e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40020010 	.word	0x40020010
 8003530:	40020028 	.word	0x40020028
 8003534:	40020040 	.word	0x40020040
 8003538:	40020058 	.word	0x40020058
 800353c:	40020070 	.word	0x40020070
 8003540:	40020088 	.word	0x40020088
 8003544:	400200a0 	.word	0x400200a0
 8003548:	400200b8 	.word	0x400200b8
 800354c:	40020410 	.word	0x40020410
 8003550:	40020428 	.word	0x40020428
 8003554:	40020440 	.word	0x40020440
 8003558:	40020458 	.word	0x40020458
 800355c:	40020470 	.word	0x40020470
 8003560:	40020488 	.word	0x40020488
 8003564:	400204a0 	.word	0x400204a0
 8003568:	400204b8 	.word	0x400204b8
 800356c:	58025408 	.word	0x58025408
 8003570:	5802541c 	.word	0x5802541c
 8003574:	58025430 	.word	0x58025430
 8003578:	58025444 	.word	0x58025444
 800357c:	58025458 	.word	0x58025458
 8003580:	5802546c 	.word	0x5802546c
 8003584:	58025480 	.word	0x58025480
 8003588:	58025494 	.word	0x58025494

0800358c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e237      	b.n	8003a0e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d004      	beq.n	80035b4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2280      	movs	r2, #128	; 0x80
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e22c      	b.n	8003a0e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5c      	ldr	r2, [pc, #368]	; (800372c <HAL_DMA_Abort_IT+0x1a0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d04a      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <HAL_DMA_Abort_IT+0x1a4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d045      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a59      	ldr	r2, [pc, #356]	; (8003734 <HAL_DMA_Abort_IT+0x1a8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d040      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a58      	ldr	r2, [pc, #352]	; (8003738 <HAL_DMA_Abort_IT+0x1ac>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d03b      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a56      	ldr	r2, [pc, #344]	; (800373c <HAL_DMA_Abort_IT+0x1b0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d036      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a55      	ldr	r2, [pc, #340]	; (8003740 <HAL_DMA_Abort_IT+0x1b4>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d031      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a53      	ldr	r2, [pc, #332]	; (8003744 <HAL_DMA_Abort_IT+0x1b8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02c      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a52      	ldr	r2, [pc, #328]	; (8003748 <HAL_DMA_Abort_IT+0x1bc>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d027      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a50      	ldr	r2, [pc, #320]	; (800374c <HAL_DMA_Abort_IT+0x1c0>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a4f      	ldr	r2, [pc, #316]	; (8003750 <HAL_DMA_Abort_IT+0x1c4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a4d      	ldr	r2, [pc, #308]	; (8003754 <HAL_DMA_Abort_IT+0x1c8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a4c      	ldr	r2, [pc, #304]	; (8003758 <HAL_DMA_Abort_IT+0x1cc>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a4a      	ldr	r2, [pc, #296]	; (800375c <HAL_DMA_Abort_IT+0x1d0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a49      	ldr	r2, [pc, #292]	; (8003760 <HAL_DMA_Abort_IT+0x1d4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a47      	ldr	r2, [pc, #284]	; (8003764 <HAL_DMA_Abort_IT+0x1d8>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_Abort_IT+0xc8>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a46      	ldr	r2, [pc, #280]	; (8003768 <HAL_DMA_Abort_IT+0x1dc>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_DMA_Abort_IT+0xcc>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_DMA_Abort_IT+0xce>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 8086 	beq.w	800376c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2204      	movs	r2, #4
 8003664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a2f      	ldr	r2, [pc, #188]	; (800372c <HAL_DMA_Abort_IT+0x1a0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d04a      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <HAL_DMA_Abort_IT+0x1a4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d045      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a2c      	ldr	r2, [pc, #176]	; (8003734 <HAL_DMA_Abort_IT+0x1a8>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d040      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a2b      	ldr	r2, [pc, #172]	; (8003738 <HAL_DMA_Abort_IT+0x1ac>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d03b      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a29      	ldr	r2, [pc, #164]	; (800373c <HAL_DMA_Abort_IT+0x1b0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d036      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a28      	ldr	r2, [pc, #160]	; (8003740 <HAL_DMA_Abort_IT+0x1b4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a26      	ldr	r2, [pc, #152]	; (8003744 <HAL_DMA_Abort_IT+0x1b8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d02c      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a25      	ldr	r2, [pc, #148]	; (8003748 <HAL_DMA_Abort_IT+0x1bc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d027      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a23      	ldr	r2, [pc, #140]	; (800374c <HAL_DMA_Abort_IT+0x1c0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d022      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a22      	ldr	r2, [pc, #136]	; (8003750 <HAL_DMA_Abort_IT+0x1c4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d01d      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a20      	ldr	r2, [pc, #128]	; (8003754 <HAL_DMA_Abort_IT+0x1c8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d018      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <HAL_DMA_Abort_IT+0x1cc>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d013      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1d      	ldr	r2, [pc, #116]	; (800375c <HAL_DMA_Abort_IT+0x1d0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d00e      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1c      	ldr	r2, [pc, #112]	; (8003760 <HAL_DMA_Abort_IT+0x1d4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d009      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <HAL_DMA_Abort_IT+0x1d8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_DMA_Abort_IT+0x17c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a19      	ldr	r2, [pc, #100]	; (8003768 <HAL_DMA_Abort_IT+0x1dc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d108      	bne.n	800371a <HAL_DMA_Abort_IT+0x18e>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 0201 	bic.w	r2, r2, #1
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e178      	b.n	8003a0c <HAL_DMA_Abort_IT+0x480>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]
 800372a:	e16f      	b.n	8003a0c <HAL_DMA_Abort_IT+0x480>
 800372c:	40020010 	.word	0x40020010
 8003730:	40020028 	.word	0x40020028
 8003734:	40020040 	.word	0x40020040
 8003738:	40020058 	.word	0x40020058
 800373c:	40020070 	.word	0x40020070
 8003740:	40020088 	.word	0x40020088
 8003744:	400200a0 	.word	0x400200a0
 8003748:	400200b8 	.word	0x400200b8
 800374c:	40020410 	.word	0x40020410
 8003750:	40020428 	.word	0x40020428
 8003754:	40020440 	.word	0x40020440
 8003758:	40020458 	.word	0x40020458
 800375c:	40020470 	.word	0x40020470
 8003760:	40020488 	.word	0x40020488
 8003764:	400204a0 	.word	0x400204a0
 8003768:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 020e 	bic.w	r2, r2, #14
 800377a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6c      	ldr	r2, [pc, #432]	; (8003934 <HAL_DMA_Abort_IT+0x3a8>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d04a      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6b      	ldr	r2, [pc, #428]	; (8003938 <HAL_DMA_Abort_IT+0x3ac>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d045      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a69      	ldr	r2, [pc, #420]	; (800393c <HAL_DMA_Abort_IT+0x3b0>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d040      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a68      	ldr	r2, [pc, #416]	; (8003940 <HAL_DMA_Abort_IT+0x3b4>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d03b      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a66      	ldr	r2, [pc, #408]	; (8003944 <HAL_DMA_Abort_IT+0x3b8>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d036      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4a65      	ldr	r2, [pc, #404]	; (8003948 <HAL_DMA_Abort_IT+0x3bc>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d031      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a63      	ldr	r2, [pc, #396]	; (800394c <HAL_DMA_Abort_IT+0x3c0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d02c      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a62      	ldr	r2, [pc, #392]	; (8003950 <HAL_DMA_Abort_IT+0x3c4>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d027      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a60      	ldr	r2, [pc, #384]	; (8003954 <HAL_DMA_Abort_IT+0x3c8>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d022      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a5f      	ldr	r2, [pc, #380]	; (8003958 <HAL_DMA_Abort_IT+0x3cc>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d01d      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a5d      	ldr	r2, [pc, #372]	; (800395c <HAL_DMA_Abort_IT+0x3d0>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d018      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5c      	ldr	r2, [pc, #368]	; (8003960 <HAL_DMA_Abort_IT+0x3d4>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d013      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a5a      	ldr	r2, [pc, #360]	; (8003964 <HAL_DMA_Abort_IT+0x3d8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a59      	ldr	r2, [pc, #356]	; (8003968 <HAL_DMA_Abort_IT+0x3dc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a57      	ldr	r2, [pc, #348]	; (800396c <HAL_DMA_Abort_IT+0x3e0>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_DMA_Abort_IT+0x290>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a56      	ldr	r2, [pc, #344]	; (8003970 <HAL_DMA_Abort_IT+0x3e4>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d108      	bne.n	800382e <HAL_DMA_Abort_IT+0x2a2>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0201 	bic.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	e007      	b.n	800383e <HAL_DMA_Abort_IT+0x2b2>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 0201 	bic.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a3c      	ldr	r2, [pc, #240]	; (8003934 <HAL_DMA_Abort_IT+0x3a8>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d072      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3a      	ldr	r2, [pc, #232]	; (8003938 <HAL_DMA_Abort_IT+0x3ac>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d06d      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a39      	ldr	r2, [pc, #228]	; (800393c <HAL_DMA_Abort_IT+0x3b0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d068      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a37      	ldr	r2, [pc, #220]	; (8003940 <HAL_DMA_Abort_IT+0x3b4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d063      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a36      	ldr	r2, [pc, #216]	; (8003944 <HAL_DMA_Abort_IT+0x3b8>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d05e      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a34      	ldr	r2, [pc, #208]	; (8003948 <HAL_DMA_Abort_IT+0x3bc>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d059      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a33      	ldr	r2, [pc, #204]	; (800394c <HAL_DMA_Abort_IT+0x3c0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d054      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a31      	ldr	r2, [pc, #196]	; (8003950 <HAL_DMA_Abort_IT+0x3c4>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d04f      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a30      	ldr	r2, [pc, #192]	; (8003954 <HAL_DMA_Abort_IT+0x3c8>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d04a      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2e      	ldr	r2, [pc, #184]	; (8003958 <HAL_DMA_Abort_IT+0x3cc>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d045      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2d      	ldr	r2, [pc, #180]	; (800395c <HAL_DMA_Abort_IT+0x3d0>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d040      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2b      	ldr	r2, [pc, #172]	; (8003960 <HAL_DMA_Abort_IT+0x3d4>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d03b      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2a      	ldr	r2, [pc, #168]	; (8003964 <HAL_DMA_Abort_IT+0x3d8>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d036      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a28      	ldr	r2, [pc, #160]	; (8003968 <HAL_DMA_Abort_IT+0x3dc>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d031      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a27      	ldr	r2, [pc, #156]	; (800396c <HAL_DMA_Abort_IT+0x3e0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d02c      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a25      	ldr	r2, [pc, #148]	; (8003970 <HAL_DMA_Abort_IT+0x3e4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d027      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a24      	ldr	r2, [pc, #144]	; (8003974 <HAL_DMA_Abort_IT+0x3e8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d022      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a22      	ldr	r2, [pc, #136]	; (8003978 <HAL_DMA_Abort_IT+0x3ec>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01d      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a21      	ldr	r2, [pc, #132]	; (800397c <HAL_DMA_Abort_IT+0x3f0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d018      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_DMA_Abort_IT+0x3f4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d013      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <HAL_DMA_Abort_IT+0x3f8>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00e      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <HAL_DMA_Abort_IT+0x3fc>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d009      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_DMA_Abort_IT+0x400>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d004      	beq.n	800392e <HAL_DMA_Abort_IT+0x3a2>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a19      	ldr	r2, [pc, #100]	; (8003990 <HAL_DMA_Abort_IT+0x404>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d132      	bne.n	8003994 <HAL_DMA_Abort_IT+0x408>
 800392e:	2301      	movs	r3, #1
 8003930:	e031      	b.n	8003996 <HAL_DMA_Abort_IT+0x40a>
 8003932:	bf00      	nop
 8003934:	40020010 	.word	0x40020010
 8003938:	40020028 	.word	0x40020028
 800393c:	40020040 	.word	0x40020040
 8003940:	40020058 	.word	0x40020058
 8003944:	40020070 	.word	0x40020070
 8003948:	40020088 	.word	0x40020088
 800394c:	400200a0 	.word	0x400200a0
 8003950:	400200b8 	.word	0x400200b8
 8003954:	40020410 	.word	0x40020410
 8003958:	40020428 	.word	0x40020428
 800395c:	40020440 	.word	0x40020440
 8003960:	40020458 	.word	0x40020458
 8003964:	40020470 	.word	0x40020470
 8003968:	40020488 	.word	0x40020488
 800396c:	400204a0 	.word	0x400204a0
 8003970:	400204b8 	.word	0x400204b8
 8003974:	58025408 	.word	0x58025408
 8003978:	5802541c 	.word	0x5802541c
 800397c:	58025430 	.word	0x58025430
 8003980:	58025444 	.word	0x58025444
 8003984:	58025458 	.word	0x58025458
 8003988:	5802546c 	.word	0x5802546c
 800398c:	58025480 	.word	0x58025480
 8003990:	58025494 	.word	0x58025494
 8003994:	2300      	movs	r3, #0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d028      	beq.n	80039ec <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039a8:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ae:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b4:	f003 031f 	and.w	r3, r3, #31
 80039b8:	2201      	movs	r2, #1
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80039c8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00c      	beq.n	80039ec <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80039ea:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop

08003a18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a24:	4b67      	ldr	r3, [pc, #412]	; (8003bc4 <HAL_DMA_IRQHandler+0x1ac>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a67      	ldr	r2, [pc, #412]	; (8003bc8 <HAL_DMA_IRQHandler+0x1b0>)
 8003a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a5f      	ldr	r2, [pc, #380]	; (8003bcc <HAL_DMA_IRQHandler+0x1b4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d04a      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a5d      	ldr	r2, [pc, #372]	; (8003bd0 <HAL_DMA_IRQHandler+0x1b8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d045      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a5c      	ldr	r2, [pc, #368]	; (8003bd4 <HAL_DMA_IRQHandler+0x1bc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d040      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a5a      	ldr	r2, [pc, #360]	; (8003bd8 <HAL_DMA_IRQHandler+0x1c0>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d03b      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a59      	ldr	r2, [pc, #356]	; (8003bdc <HAL_DMA_IRQHandler+0x1c4>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d036      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a57      	ldr	r2, [pc, #348]	; (8003be0 <HAL_DMA_IRQHandler+0x1c8>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d031      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a56      	ldr	r2, [pc, #344]	; (8003be4 <HAL_DMA_IRQHandler+0x1cc>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d02c      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a54      	ldr	r2, [pc, #336]	; (8003be8 <HAL_DMA_IRQHandler+0x1d0>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d027      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a53      	ldr	r2, [pc, #332]	; (8003bec <HAL_DMA_IRQHandler+0x1d4>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d022      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a51      	ldr	r2, [pc, #324]	; (8003bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d01d      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a50      	ldr	r2, [pc, #320]	; (8003bf4 <HAL_DMA_IRQHandler+0x1dc>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d018      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a4e      	ldr	r2, [pc, #312]	; (8003bf8 <HAL_DMA_IRQHandler+0x1e0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d013      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a4d      	ldr	r2, [pc, #308]	; (8003bfc <HAL_DMA_IRQHandler+0x1e4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a4b      	ldr	r2, [pc, #300]	; (8003c00 <HAL_DMA_IRQHandler+0x1e8>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a4a      	ldr	r2, [pc, #296]	; (8003c04 <HAL_DMA_IRQHandler+0x1ec>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_DMA_IRQHandler+0xd2>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a48      	ldr	r2, [pc, #288]	; (8003c08 <HAL_DMA_IRQHandler+0x1f0>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_DMA_IRQHandler+0xd6>
 8003aea:	2301      	movs	r3, #1
 8003aec:	e000      	b.n	8003af0 <HAL_DMA_IRQHandler+0xd8>
 8003aee:	2300      	movs	r3, #0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 842b 	beq.w	800434c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2208      	movs	r2, #8
 8003b00:	409a      	lsls	r2, r3
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	4013      	ands	r3, r2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 80a2 	beq.w	8003c50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a2e      	ldr	r2, [pc, #184]	; (8003bcc <HAL_DMA_IRQHandler+0x1b4>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d04a      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a2d      	ldr	r2, [pc, #180]	; (8003bd0 <HAL_DMA_IRQHandler+0x1b8>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d045      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <HAL_DMA_IRQHandler+0x1bc>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d040      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <HAL_DMA_IRQHandler+0x1c0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d03b      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a28      	ldr	r2, [pc, #160]	; (8003bdc <HAL_DMA_IRQHandler+0x1c4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d036      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a27      	ldr	r2, [pc, #156]	; (8003be0 <HAL_DMA_IRQHandler+0x1c8>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d031      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a25      	ldr	r2, [pc, #148]	; (8003be4 <HAL_DMA_IRQHandler+0x1cc>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02c      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a24      	ldr	r2, [pc, #144]	; (8003be8 <HAL_DMA_IRQHandler+0x1d0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d027      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a22      	ldr	r2, [pc, #136]	; (8003bec <HAL_DMA_IRQHandler+0x1d4>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d022      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	; (8003bf0 <HAL_DMA_IRQHandler+0x1d8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d01d      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1f      	ldr	r2, [pc, #124]	; (8003bf4 <HAL_DMA_IRQHandler+0x1dc>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d018      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1e      	ldr	r2, [pc, #120]	; (8003bf8 <HAL_DMA_IRQHandler+0x1e0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d013      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1c      	ldr	r2, [pc, #112]	; (8003bfc <HAL_DMA_IRQHandler+0x1e4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00e      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1b      	ldr	r2, [pc, #108]	; (8003c00 <HAL_DMA_IRQHandler+0x1e8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a19      	ldr	r2, [pc, #100]	; (8003c04 <HAL_DMA_IRQHandler+0x1ec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d004      	beq.n	8003bac <HAL_DMA_IRQHandler+0x194>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a18      	ldr	r2, [pc, #96]	; (8003c08 <HAL_DMA_IRQHandler+0x1f0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d12f      	bne.n	8003c0c <HAL_DMA_IRQHandler+0x1f4>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	bf14      	ite	ne
 8003bba:	2301      	movne	r3, #1
 8003bbc:	2300      	moveq	r3, #0
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	e02e      	b.n	8003c20 <HAL_DMA_IRQHandler+0x208>
 8003bc2:	bf00      	nop
 8003bc4:	24000000 	.word	0x24000000
 8003bc8:	1b4e81b5 	.word	0x1b4e81b5
 8003bcc:	40020010 	.word	0x40020010
 8003bd0:	40020028 	.word	0x40020028
 8003bd4:	40020040 	.word	0x40020040
 8003bd8:	40020058 	.word	0x40020058
 8003bdc:	40020070 	.word	0x40020070
 8003be0:	40020088 	.word	0x40020088
 8003be4:	400200a0 	.word	0x400200a0
 8003be8:	400200b8 	.word	0x400200b8
 8003bec:	40020410 	.word	0x40020410
 8003bf0:	40020428 	.word	0x40020428
 8003bf4:	40020440 	.word	0x40020440
 8003bf8:	40020458 	.word	0x40020458
 8003bfc:	40020470 	.word	0x40020470
 8003c00:	40020488 	.word	0x40020488
 8003c04:	400204a0 	.word	0x400204a0
 8003c08:	400204b8 	.word	0x400204b8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0308 	and.w	r3, r3, #8
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	bf14      	ite	ne
 8003c1a:	2301      	movne	r3, #1
 8003c1c:	2300      	moveq	r3, #0
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d015      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f022 0204 	bic.w	r2, r2, #4
 8003c32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c38:	f003 031f 	and.w	r3, r3, #31
 8003c3c:	2208      	movs	r2, #8
 8003c3e:	409a      	lsls	r2, r3
 8003c40:	6a3b      	ldr	r3, [r7, #32]
 8003c42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c48:	f043 0201 	orr.w	r2, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	f003 031f 	and.w	r3, r3, #31
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06e      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a69      	ldr	r2, [pc, #420]	; (8003e10 <HAL_DMA_IRQHandler+0x3f8>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d04a      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a67      	ldr	r2, [pc, #412]	; (8003e14 <HAL_DMA_IRQHandler+0x3fc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d045      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a66      	ldr	r2, [pc, #408]	; (8003e18 <HAL_DMA_IRQHandler+0x400>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d040      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a64      	ldr	r2, [pc, #400]	; (8003e1c <HAL_DMA_IRQHandler+0x404>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d03b      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a63      	ldr	r2, [pc, #396]	; (8003e20 <HAL_DMA_IRQHandler+0x408>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d036      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a61      	ldr	r2, [pc, #388]	; (8003e24 <HAL_DMA_IRQHandler+0x40c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d031      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a60      	ldr	r2, [pc, #384]	; (8003e28 <HAL_DMA_IRQHandler+0x410>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d02c      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a5e      	ldr	r2, [pc, #376]	; (8003e2c <HAL_DMA_IRQHandler+0x414>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d027      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a5d      	ldr	r2, [pc, #372]	; (8003e30 <HAL_DMA_IRQHandler+0x418>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d022      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5b      	ldr	r2, [pc, #364]	; (8003e34 <HAL_DMA_IRQHandler+0x41c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a5a      	ldr	r2, [pc, #360]	; (8003e38 <HAL_DMA_IRQHandler+0x420>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <HAL_DMA_IRQHandler+0x424>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a57      	ldr	r2, [pc, #348]	; (8003e40 <HAL_DMA_IRQHandler+0x428>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a55      	ldr	r2, [pc, #340]	; (8003e44 <HAL_DMA_IRQHandler+0x42c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a54      	ldr	r2, [pc, #336]	; (8003e48 <HAL_DMA_IRQHandler+0x430>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x2ee>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a52      	ldr	r2, [pc, #328]	; (8003e4c <HAL_DMA_IRQHandler+0x434>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d10a      	bne.n	8003d1c <HAL_DMA_IRQHandler+0x304>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	e003      	b.n	8003d24 <HAL_DMA_IRQHandler+0x30c>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2300      	movs	r3, #0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00d      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	2201      	movs	r2, #1
 8003d32:	409a      	lsls	r2, r3
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3c:	f043 0202 	orr.w	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	2204      	movs	r2, #4
 8003d4e:	409a      	lsls	r2, r3
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 808f 	beq.w	8003e78 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a2c      	ldr	r2, [pc, #176]	; (8003e10 <HAL_DMA_IRQHandler+0x3f8>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d04a      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a2a      	ldr	r2, [pc, #168]	; (8003e14 <HAL_DMA_IRQHandler+0x3fc>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d045      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a29      	ldr	r2, [pc, #164]	; (8003e18 <HAL_DMA_IRQHandler+0x400>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d040      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a27      	ldr	r2, [pc, #156]	; (8003e1c <HAL_DMA_IRQHandler+0x404>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d03b      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a26      	ldr	r2, [pc, #152]	; (8003e20 <HAL_DMA_IRQHandler+0x408>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d036      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a24      	ldr	r2, [pc, #144]	; (8003e24 <HAL_DMA_IRQHandler+0x40c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d031      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a23      	ldr	r2, [pc, #140]	; (8003e28 <HAL_DMA_IRQHandler+0x410>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d02c      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a21      	ldr	r2, [pc, #132]	; (8003e2c <HAL_DMA_IRQHandler+0x414>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d027      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a20      	ldr	r2, [pc, #128]	; (8003e30 <HAL_DMA_IRQHandler+0x418>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d022      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a1e      	ldr	r2, [pc, #120]	; (8003e34 <HAL_DMA_IRQHandler+0x41c>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d01d      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <HAL_DMA_IRQHandler+0x420>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d018      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <HAL_DMA_IRQHandler+0x424>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d013      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a1a      	ldr	r2, [pc, #104]	; (8003e40 <HAL_DMA_IRQHandler+0x428>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d00e      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a18      	ldr	r2, [pc, #96]	; (8003e44 <HAL_DMA_IRQHandler+0x42c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d009      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_DMA_IRQHandler+0x430>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d004      	beq.n	8003dfa <HAL_DMA_IRQHandler+0x3e2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a15      	ldr	r2, [pc, #84]	; (8003e4c <HAL_DMA_IRQHandler+0x434>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d12a      	bne.n	8003e50 <HAL_DMA_IRQHandler+0x438>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	e023      	b.n	8003e58 <HAL_DMA_IRQHandler+0x440>
 8003e10:	40020010 	.word	0x40020010
 8003e14:	40020028 	.word	0x40020028
 8003e18:	40020040 	.word	0x40020040
 8003e1c:	40020058 	.word	0x40020058
 8003e20:	40020070 	.word	0x40020070
 8003e24:	40020088 	.word	0x40020088
 8003e28:	400200a0 	.word	0x400200a0
 8003e2c:	400200b8 	.word	0x400200b8
 8003e30:	40020410 	.word	0x40020410
 8003e34:	40020428 	.word	0x40020428
 8003e38:	40020440 	.word	0x40020440
 8003e3c:	40020458 	.word	0x40020458
 8003e40:	40020470 	.word	0x40020470
 8003e44:	40020488 	.word	0x40020488
 8003e48:	400204a0 	.word	0x400204a0
 8003e4c:	400204b8 	.word	0x400204b8
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00d      	beq.n	8003e78 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	f003 031f 	and.w	r3, r3, #31
 8003e64:	2204      	movs	r2, #4
 8003e66:	409a      	lsls	r2, r3
 8003e68:	6a3b      	ldr	r3, [r7, #32]
 8003e6a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	f043 0204 	orr.w	r2, r3, #4
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7c:	f003 031f 	and.w	r3, r3, #31
 8003e80:	2210      	movs	r2, #16
 8003e82:	409a      	lsls	r2, r3
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f000 80a6 	beq.w	8003fda <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a85      	ldr	r2, [pc, #532]	; (80040a8 <HAL_DMA_IRQHandler+0x690>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d04a      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a83      	ldr	r2, [pc, #524]	; (80040ac <HAL_DMA_IRQHandler+0x694>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d045      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a82      	ldr	r2, [pc, #520]	; (80040b0 <HAL_DMA_IRQHandler+0x698>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d040      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a80      	ldr	r2, [pc, #512]	; (80040b4 <HAL_DMA_IRQHandler+0x69c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d03b      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a7f      	ldr	r2, [pc, #508]	; (80040b8 <HAL_DMA_IRQHandler+0x6a0>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d036      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a7d      	ldr	r2, [pc, #500]	; (80040bc <HAL_DMA_IRQHandler+0x6a4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d031      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a7c      	ldr	r2, [pc, #496]	; (80040c0 <HAL_DMA_IRQHandler+0x6a8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d02c      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a7a      	ldr	r2, [pc, #488]	; (80040c4 <HAL_DMA_IRQHandler+0x6ac>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d027      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a79      	ldr	r2, [pc, #484]	; (80040c8 <HAL_DMA_IRQHandler+0x6b0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d022      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a77      	ldr	r2, [pc, #476]	; (80040cc <HAL_DMA_IRQHandler+0x6b4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a76      	ldr	r2, [pc, #472]	; (80040d0 <HAL_DMA_IRQHandler+0x6b8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d018      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a74      	ldr	r2, [pc, #464]	; (80040d4 <HAL_DMA_IRQHandler+0x6bc>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a73      	ldr	r2, [pc, #460]	; (80040d8 <HAL_DMA_IRQHandler+0x6c0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a71      	ldr	r2, [pc, #452]	; (80040dc <HAL_DMA_IRQHandler+0x6c4>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a70      	ldr	r2, [pc, #448]	; (80040e0 <HAL_DMA_IRQHandler+0x6c8>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_DMA_IRQHandler+0x516>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6e      	ldr	r2, [pc, #440]	; (80040e4 <HAL_DMA_IRQHandler+0x6cc>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d10a      	bne.n	8003f44 <HAL_DMA_IRQHandler+0x52c>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	bf14      	ite	ne
 8003f3c:	2301      	movne	r3, #1
 8003f3e:	2300      	moveq	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	e009      	b.n	8003f58 <HAL_DMA_IRQHandler+0x540>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	bf14      	ite	ne
 8003f52:	2301      	movne	r3, #1
 8003f54:	2300      	moveq	r3, #0
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03e      	beq.n	8003fda <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2210      	movs	r2, #16
 8003f66:	409a      	lsls	r2, r3
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d018      	beq.n	8003fac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d108      	bne.n	8003f9a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d024      	beq.n	8003fda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	4798      	blx	r3
 8003f98:	e01f      	b.n	8003fda <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d01b      	beq.n	8003fda <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	4798      	blx	r3
 8003faa:	e016      	b.n	8003fda <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d107      	bne.n	8003fca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0208 	bic.w	r2, r2, #8
 8003fc8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	f003 031f 	and.w	r3, r3, #31
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	409a      	lsls	r2, r3
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8110 	beq.w	8004210 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a2c      	ldr	r2, [pc, #176]	; (80040a8 <HAL_DMA_IRQHandler+0x690>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d04a      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a2b      	ldr	r2, [pc, #172]	; (80040ac <HAL_DMA_IRQHandler+0x694>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d045      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a29      	ldr	r2, [pc, #164]	; (80040b0 <HAL_DMA_IRQHandler+0x698>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d040      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a28      	ldr	r2, [pc, #160]	; (80040b4 <HAL_DMA_IRQHandler+0x69c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d03b      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a26      	ldr	r2, [pc, #152]	; (80040b8 <HAL_DMA_IRQHandler+0x6a0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d036      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a25      	ldr	r2, [pc, #148]	; (80040bc <HAL_DMA_IRQHandler+0x6a4>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d031      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a23      	ldr	r2, [pc, #140]	; (80040c0 <HAL_DMA_IRQHandler+0x6a8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d02c      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a22      	ldr	r2, [pc, #136]	; (80040c4 <HAL_DMA_IRQHandler+0x6ac>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d027      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a20      	ldr	r2, [pc, #128]	; (80040c8 <HAL_DMA_IRQHandler+0x6b0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d022      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a1f      	ldr	r2, [pc, #124]	; (80040cc <HAL_DMA_IRQHandler+0x6b4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d01d      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_DMA_IRQHandler+0x6b8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d018      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1c      	ldr	r2, [pc, #112]	; (80040d4 <HAL_DMA_IRQHandler+0x6bc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d013      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_DMA_IRQHandler+0x6c0>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d00e      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a19      	ldr	r2, [pc, #100]	; (80040dc <HAL_DMA_IRQHandler+0x6c4>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d009      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <HAL_DMA_IRQHandler+0x6c8>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d004      	beq.n	8004090 <HAL_DMA_IRQHandler+0x678>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <HAL_DMA_IRQHandler+0x6cc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d12b      	bne.n	80040e8 <HAL_DMA_IRQHandler+0x6d0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	e02a      	b.n	80040fc <HAL_DMA_IRQHandler+0x6e4>
 80040a6:	bf00      	nop
 80040a8:	40020010 	.word	0x40020010
 80040ac:	40020028 	.word	0x40020028
 80040b0:	40020040 	.word	0x40020040
 80040b4:	40020058 	.word	0x40020058
 80040b8:	40020070 	.word	0x40020070
 80040bc:	40020088 	.word	0x40020088
 80040c0:	400200a0 	.word	0x400200a0
 80040c4:	400200b8 	.word	0x400200b8
 80040c8:	40020410 	.word	0x40020410
 80040cc:	40020428 	.word	0x40020428
 80040d0:	40020440 	.word	0x40020440
 80040d4:	40020458 	.word	0x40020458
 80040d8:	40020470 	.word	0x40020470
 80040dc:	40020488 	.word	0x40020488
 80040e0:	400204a0 	.word	0x400204a0
 80040e4:	400204b8 	.word	0x400204b8
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 8087 	beq.w	8004210 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004106:	f003 031f 	and.w	r3, r3, #31
 800410a:	2220      	movs	r2, #32
 800410c:	409a      	lsls	r2, r3
 800410e:	6a3b      	ldr	r3, [r7, #32]
 8004110:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b04      	cmp	r3, #4
 800411c:	d139      	bne.n	8004192 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0216 	bic.w	r2, r2, #22
 800412c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800413c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_DMA_IRQHandler+0x736>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800414a:	2b00      	cmp	r3, #0
 800414c:	d007      	beq.n	800415e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0208 	bic.w	r2, r2, #8
 800415c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	223f      	movs	r2, #63	; 0x3f
 8004168:	409a      	lsls	r2, r3
 800416a:	6a3b      	ldr	r3, [r7, #32]
 800416c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 834a 	beq.w	800481c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
          }
          return;
 8004190:	e344      	b.n	800481c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d018      	beq.n	80041d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d108      	bne.n	80041c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d02c      	beq.n	8004210 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
 80041be:	e027      	b.n	8004210 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d023      	beq.n	8004210 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
 80041d0:	e01e      	b.n	8004210 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10f      	bne.n	8004200 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0210 	bic.w	r2, r2, #16
 80041ee:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8306 	beq.w	8004826 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 8088 	beq.w	8004338 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2204      	movs	r2, #4
 800422c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a7a      	ldr	r2, [pc, #488]	; (8004420 <HAL_DMA_IRQHandler+0xa08>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d04a      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a79      	ldr	r2, [pc, #484]	; (8004424 <HAL_DMA_IRQHandler+0xa0c>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d045      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a77      	ldr	r2, [pc, #476]	; (8004428 <HAL_DMA_IRQHandler+0xa10>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d040      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a76      	ldr	r2, [pc, #472]	; (800442c <HAL_DMA_IRQHandler+0xa14>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d03b      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a74      	ldr	r2, [pc, #464]	; (8004430 <HAL_DMA_IRQHandler+0xa18>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d036      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a73      	ldr	r2, [pc, #460]	; (8004434 <HAL_DMA_IRQHandler+0xa1c>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d031      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a71      	ldr	r2, [pc, #452]	; (8004438 <HAL_DMA_IRQHandler+0xa20>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d02c      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a70      	ldr	r2, [pc, #448]	; (800443c <HAL_DMA_IRQHandler+0xa24>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d027      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a6e      	ldr	r2, [pc, #440]	; (8004440 <HAL_DMA_IRQHandler+0xa28>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d022      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a6d      	ldr	r2, [pc, #436]	; (8004444 <HAL_DMA_IRQHandler+0xa2c>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d01d      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a6b      	ldr	r2, [pc, #428]	; (8004448 <HAL_DMA_IRQHandler+0xa30>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d018      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a6a      	ldr	r2, [pc, #424]	; (800444c <HAL_DMA_IRQHandler+0xa34>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d013      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a68      	ldr	r2, [pc, #416]	; (8004450 <HAL_DMA_IRQHandler+0xa38>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d00e      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a67      	ldr	r2, [pc, #412]	; (8004454 <HAL_DMA_IRQHandler+0xa3c>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d009      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a65      	ldr	r2, [pc, #404]	; (8004458 <HAL_DMA_IRQHandler+0xa40>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d004      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x8b8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a64      	ldr	r2, [pc, #400]	; (800445c <HAL_DMA_IRQHandler+0xa44>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d108      	bne.n	80042e2 <HAL_DMA_IRQHandler+0x8ca>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0201 	bic.w	r2, r2, #1
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	e007      	b.n	80042f2 <HAL_DMA_IRQHandler+0x8da>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	3301      	adds	r3, #1
 80042f6:	60fb      	str	r3, [r7, #12]
 80042f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d307      	bcc.n	800430e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1f2      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x8da>
 800430c:	e000      	b.n	8004310 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800430e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d004      	beq.n	8004328 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2203      	movs	r2, #3
 8004322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004326:	e003      	b.n	8004330 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433c:	2b00      	cmp	r3, #0
 800433e:	f000 8272 	beq.w	8004826 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	4798      	blx	r3
 800434a:	e26c      	b.n	8004826 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a43      	ldr	r2, [pc, #268]	; (8004460 <HAL_DMA_IRQHandler+0xa48>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d022      	beq.n	800439c <HAL_DMA_IRQHandler+0x984>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a42      	ldr	r2, [pc, #264]	; (8004464 <HAL_DMA_IRQHandler+0xa4c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d01d      	beq.n	800439c <HAL_DMA_IRQHandler+0x984>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a40      	ldr	r2, [pc, #256]	; (8004468 <HAL_DMA_IRQHandler+0xa50>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d018      	beq.n	800439c <HAL_DMA_IRQHandler+0x984>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a3f      	ldr	r2, [pc, #252]	; (800446c <HAL_DMA_IRQHandler+0xa54>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d013      	beq.n	800439c <HAL_DMA_IRQHandler+0x984>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a3d      	ldr	r2, [pc, #244]	; (8004470 <HAL_DMA_IRQHandler+0xa58>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00e      	beq.n	800439c <HAL_DMA_IRQHandler+0x984>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a3c      	ldr	r2, [pc, #240]	; (8004474 <HAL_DMA_IRQHandler+0xa5c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d009      	beq.n	800439c <HAL_DMA_IRQHandler+0x984>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a3a      	ldr	r2, [pc, #232]	; (8004478 <HAL_DMA_IRQHandler+0xa60>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d004      	beq.n	800439c <HAL_DMA_IRQHandler+0x984>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a39      	ldr	r2, [pc, #228]	; (800447c <HAL_DMA_IRQHandler+0xa64>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d101      	bne.n	80043a0 <HAL_DMA_IRQHandler+0x988>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <HAL_DMA_IRQHandler+0x98a>
 80043a0:	2300      	movs	r3, #0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f000 823f 	beq.w	8004826 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2204      	movs	r2, #4
 80043ba:	409a      	lsls	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	4013      	ands	r3, r2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 80cd 	beq.w	8004560 <HAL_DMA_IRQHandler+0xb48>
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80c7 	beq.w	8004560 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d6:	f003 031f 	and.w	r3, r3, #31
 80043da:	2204      	movs	r2, #4
 80043dc:	409a      	lsls	r2, r3
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d049      	beq.n	8004480 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d109      	bne.n	800440a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	f000 8210 	beq.w	8004820 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004408:	e20a      	b.n	8004820 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	2b00      	cmp	r3, #0
 8004410:	f000 8206 	beq.w	8004820 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800441c:	e200      	b.n	8004820 <HAL_DMA_IRQHandler+0xe08>
 800441e:	bf00      	nop
 8004420:	40020010 	.word	0x40020010
 8004424:	40020028 	.word	0x40020028
 8004428:	40020040 	.word	0x40020040
 800442c:	40020058 	.word	0x40020058
 8004430:	40020070 	.word	0x40020070
 8004434:	40020088 	.word	0x40020088
 8004438:	400200a0 	.word	0x400200a0
 800443c:	400200b8 	.word	0x400200b8
 8004440:	40020410 	.word	0x40020410
 8004444:	40020428 	.word	0x40020428
 8004448:	40020440 	.word	0x40020440
 800444c:	40020458 	.word	0x40020458
 8004450:	40020470 	.word	0x40020470
 8004454:	40020488 	.word	0x40020488
 8004458:	400204a0 	.word	0x400204a0
 800445c:	400204b8 	.word	0x400204b8
 8004460:	58025408 	.word	0x58025408
 8004464:	5802541c 	.word	0x5802541c
 8004468:	58025430 	.word	0x58025430
 800446c:	58025444 	.word	0x58025444
 8004470:	58025458 	.word	0x58025458
 8004474:	5802546c 	.word	0x5802546c
 8004478:	58025480 	.word	0x58025480
 800447c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	f003 0320 	and.w	r3, r3, #32
 8004486:	2b00      	cmp	r3, #0
 8004488:	d160      	bne.n	800454c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7f      	ldr	r2, [pc, #508]	; (800468c <HAL_DMA_IRQHandler+0xc74>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d04a      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a7d      	ldr	r2, [pc, #500]	; (8004690 <HAL_DMA_IRQHandler+0xc78>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d045      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a7c      	ldr	r2, [pc, #496]	; (8004694 <HAL_DMA_IRQHandler+0xc7c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d040      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a7a      	ldr	r2, [pc, #488]	; (8004698 <HAL_DMA_IRQHandler+0xc80>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d03b      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a79      	ldr	r2, [pc, #484]	; (800469c <HAL_DMA_IRQHandler+0xc84>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d036      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a77      	ldr	r2, [pc, #476]	; (80046a0 <HAL_DMA_IRQHandler+0xc88>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d031      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a76      	ldr	r2, [pc, #472]	; (80046a4 <HAL_DMA_IRQHandler+0xc8c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d02c      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a74      	ldr	r2, [pc, #464]	; (80046a8 <HAL_DMA_IRQHandler+0xc90>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d027      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a73      	ldr	r2, [pc, #460]	; (80046ac <HAL_DMA_IRQHandler+0xc94>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d022      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a71      	ldr	r2, [pc, #452]	; (80046b0 <HAL_DMA_IRQHandler+0xc98>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d01d      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a70      	ldr	r2, [pc, #448]	; (80046b4 <HAL_DMA_IRQHandler+0xc9c>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d018      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a6e      	ldr	r2, [pc, #440]	; (80046b8 <HAL_DMA_IRQHandler+0xca0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d013      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a6d      	ldr	r2, [pc, #436]	; (80046bc <HAL_DMA_IRQHandler+0xca4>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d00e      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a6b      	ldr	r2, [pc, #428]	; (80046c0 <HAL_DMA_IRQHandler+0xca8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d009      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a6a      	ldr	r2, [pc, #424]	; (80046c4 <HAL_DMA_IRQHandler+0xcac>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d004      	beq.n	800452a <HAL_DMA_IRQHandler+0xb12>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a68      	ldr	r2, [pc, #416]	; (80046c8 <HAL_DMA_IRQHandler+0xcb0>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d108      	bne.n	800453c <HAL_DMA_IRQHandler+0xb24>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0208 	bic.w	r2, r2, #8
 8004538:	601a      	str	r2, [r3, #0]
 800453a:	e007      	b.n	800454c <HAL_DMA_IRQHandler+0xb34>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0204 	bic.w	r2, r2, #4
 800454a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 8165 	beq.w	8004820 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800455e:	e15f      	b.n	8004820 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004564:	f003 031f 	and.w	r3, r3, #31
 8004568:	2202      	movs	r2, #2
 800456a:	409a      	lsls	r2, r3
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80c5 	beq.w	8004700 <HAL_DMA_IRQHandler+0xce8>
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f003 0302 	and.w	r3, r3, #2
 800457c:	2b00      	cmp	r3, #0
 800457e:	f000 80bf 	beq.w	8004700 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	2202      	movs	r2, #2
 800458c:	409a      	lsls	r2, r3
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d018      	beq.n	80045ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 813a 	beq.w	8004824 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045b8:	e134      	b.n	8004824 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 8130 	beq.w	8004824 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80045cc:	e12a      	b.n	8004824 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f040 8089 	bne.w	80046ec <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a2b      	ldr	r2, [pc, #172]	; (800468c <HAL_DMA_IRQHandler+0xc74>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d04a      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a29      	ldr	r2, [pc, #164]	; (8004690 <HAL_DMA_IRQHandler+0xc78>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d045      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a28      	ldr	r2, [pc, #160]	; (8004694 <HAL_DMA_IRQHandler+0xc7c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d040      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a26      	ldr	r2, [pc, #152]	; (8004698 <HAL_DMA_IRQHandler+0xc80>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d03b      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a25      	ldr	r2, [pc, #148]	; (800469c <HAL_DMA_IRQHandler+0xc84>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d036      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a23      	ldr	r2, [pc, #140]	; (80046a0 <HAL_DMA_IRQHandler+0xc88>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d031      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a22      	ldr	r2, [pc, #136]	; (80046a4 <HAL_DMA_IRQHandler+0xc8c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d02c      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a20      	ldr	r2, [pc, #128]	; (80046a8 <HAL_DMA_IRQHandler+0xc90>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d027      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a1f      	ldr	r2, [pc, #124]	; (80046ac <HAL_DMA_IRQHandler+0xc94>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d022      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a1d      	ldr	r2, [pc, #116]	; (80046b0 <HAL_DMA_IRQHandler+0xc98>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d01d      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a1c      	ldr	r2, [pc, #112]	; (80046b4 <HAL_DMA_IRQHandler+0xc9c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d018      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1a      	ldr	r2, [pc, #104]	; (80046b8 <HAL_DMA_IRQHandler+0xca0>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <HAL_DMA_IRQHandler+0xca4>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00e      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a17      	ldr	r2, [pc, #92]	; (80046c0 <HAL_DMA_IRQHandler+0xca8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d009      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a16      	ldr	r2, [pc, #88]	; (80046c4 <HAL_DMA_IRQHandler+0xcac>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_DMA_IRQHandler+0xc62>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <HAL_DMA_IRQHandler+0xcb0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d128      	bne.n	80046cc <HAL_DMA_IRQHandler+0xcb4>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0214 	bic.w	r2, r2, #20
 8004688:	601a      	str	r2, [r3, #0]
 800468a:	e027      	b.n	80046dc <HAL_DMA_IRQHandler+0xcc4>
 800468c:	40020010 	.word	0x40020010
 8004690:	40020028 	.word	0x40020028
 8004694:	40020040 	.word	0x40020040
 8004698:	40020058 	.word	0x40020058
 800469c:	40020070 	.word	0x40020070
 80046a0:	40020088 	.word	0x40020088
 80046a4:	400200a0 	.word	0x400200a0
 80046a8:	400200b8 	.word	0x400200b8
 80046ac:	40020410 	.word	0x40020410
 80046b0:	40020428 	.word	0x40020428
 80046b4:	40020440 	.word	0x40020440
 80046b8:	40020458 	.word	0x40020458
 80046bc:	40020470 	.word	0x40020470
 80046c0:	40020488 	.word	0x40020488
 80046c4:	400204a0 	.word	0x400204a0
 80046c8:	400204b8 	.word	0x400204b8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 020a 	bic.w	r2, r2, #10
 80046da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8097 	beq.w	8004824 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046fe:	e091      	b.n	8004824 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004704:	f003 031f 	and.w	r3, r3, #31
 8004708:	2208      	movs	r2, #8
 800470a:	409a      	lsls	r2, r3
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	4013      	ands	r3, r2
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8088 	beq.w	8004826 <HAL_DMA_IRQHandler+0xe0e>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	2b00      	cmp	r3, #0
 800471e:	f000 8082 	beq.w	8004826 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a41      	ldr	r2, [pc, #260]	; (800482c <HAL_DMA_IRQHandler+0xe14>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d04a      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3f      	ldr	r2, [pc, #252]	; (8004830 <HAL_DMA_IRQHandler+0xe18>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d045      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a3e      	ldr	r2, [pc, #248]	; (8004834 <HAL_DMA_IRQHandler+0xe1c>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d040      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a3c      	ldr	r2, [pc, #240]	; (8004838 <HAL_DMA_IRQHandler+0xe20>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d03b      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a3b      	ldr	r2, [pc, #236]	; (800483c <HAL_DMA_IRQHandler+0xe24>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d036      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a39      	ldr	r2, [pc, #228]	; (8004840 <HAL_DMA_IRQHandler+0xe28>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d031      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a38      	ldr	r2, [pc, #224]	; (8004844 <HAL_DMA_IRQHandler+0xe2c>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d02c      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a36      	ldr	r2, [pc, #216]	; (8004848 <HAL_DMA_IRQHandler+0xe30>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d027      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a35      	ldr	r2, [pc, #212]	; (800484c <HAL_DMA_IRQHandler+0xe34>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d022      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a33      	ldr	r2, [pc, #204]	; (8004850 <HAL_DMA_IRQHandler+0xe38>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01d      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a32      	ldr	r2, [pc, #200]	; (8004854 <HAL_DMA_IRQHandler+0xe3c>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d018      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a30      	ldr	r2, [pc, #192]	; (8004858 <HAL_DMA_IRQHandler+0xe40>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d013      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a2f      	ldr	r2, [pc, #188]	; (800485c <HAL_DMA_IRQHandler+0xe44>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d00e      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a2d      	ldr	r2, [pc, #180]	; (8004860 <HAL_DMA_IRQHandler+0xe48>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d009      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a2c      	ldr	r2, [pc, #176]	; (8004864 <HAL_DMA_IRQHandler+0xe4c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_DMA_IRQHandler+0xdaa>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <HAL_DMA_IRQHandler+0xe50>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d108      	bne.n	80047d4 <HAL_DMA_IRQHandler+0xdbc>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 021c 	bic.w	r2, r2, #28
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	e007      	b.n	80047e4 <HAL_DMA_IRQHandler+0xdcc>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f022 020e 	bic.w	r2, r2, #14
 80047e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	2201      	movs	r2, #1
 80047ee:	409a      	lsls	r2, r3
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	4798      	blx	r3
 800481a:	e004      	b.n	8004826 <HAL_DMA_IRQHandler+0xe0e>
          return;
 800481c:	bf00      	nop
 800481e:	e002      	b.n	8004826 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004824:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004826:	3728      	adds	r7, #40	; 0x28
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40020010 	.word	0x40020010
 8004830:	40020028 	.word	0x40020028
 8004834:	40020040 	.word	0x40020040
 8004838:	40020058 	.word	0x40020058
 800483c:	40020070 	.word	0x40020070
 8004840:	40020088 	.word	0x40020088
 8004844:	400200a0 	.word	0x400200a0
 8004848:	400200b8 	.word	0x400200b8
 800484c:	40020410 	.word	0x40020410
 8004850:	40020428 	.word	0x40020428
 8004854:	40020440 	.word	0x40020440
 8004858:	40020458 	.word	0x40020458
 800485c:	40020470 	.word	0x40020470
 8004860:	40020488 	.word	0x40020488
 8004864:	400204a0 	.word	0x400204a0
 8004868:	400204b8 	.word	0x400204b8

0800486c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a42      	ldr	r2, [pc, #264]	; (8004984 <DMA_CalcBaseAndBitshift+0x118>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d04a      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a41      	ldr	r2, [pc, #260]	; (8004988 <DMA_CalcBaseAndBitshift+0x11c>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d045      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a3f      	ldr	r2, [pc, #252]	; (800498c <DMA_CalcBaseAndBitshift+0x120>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d040      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a3e      	ldr	r2, [pc, #248]	; (8004990 <DMA_CalcBaseAndBitshift+0x124>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d03b      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <DMA_CalcBaseAndBitshift+0x128>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d036      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <DMA_CalcBaseAndBitshift+0x12c>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d031      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a39      	ldr	r2, [pc, #228]	; (800499c <DMA_CalcBaseAndBitshift+0x130>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d02c      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a38      	ldr	r2, [pc, #224]	; (80049a0 <DMA_CalcBaseAndBitshift+0x134>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d027      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a36      	ldr	r2, [pc, #216]	; (80049a4 <DMA_CalcBaseAndBitshift+0x138>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d022      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a35      	ldr	r2, [pc, #212]	; (80049a8 <DMA_CalcBaseAndBitshift+0x13c>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d01d      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a33      	ldr	r2, [pc, #204]	; (80049ac <DMA_CalcBaseAndBitshift+0x140>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d018      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a32      	ldr	r2, [pc, #200]	; (80049b0 <DMA_CalcBaseAndBitshift+0x144>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d013      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a30      	ldr	r2, [pc, #192]	; (80049b4 <DMA_CalcBaseAndBitshift+0x148>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d00e      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a2f      	ldr	r2, [pc, #188]	; (80049b8 <DMA_CalcBaseAndBitshift+0x14c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d009      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <DMA_CalcBaseAndBitshift+0x150>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <DMA_CalcBaseAndBitshift+0xa8>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2c      	ldr	r2, [pc, #176]	; (80049c0 <DMA_CalcBaseAndBitshift+0x154>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <DMA_CalcBaseAndBitshift+0xac>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <DMA_CalcBaseAndBitshift+0xae>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d024      	beq.n	8004968 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	3b10      	subs	r3, #16
 8004926:	4a27      	ldr	r2, [pc, #156]	; (80049c4 <DMA_CalcBaseAndBitshift+0x158>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <DMA_CalcBaseAndBitshift+0x15c>)
 8004938:	5cd3      	ldrb	r3, [r2, r3]
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2b03      	cmp	r3, #3
 8004944:	d908      	bls.n	8004958 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	4b1f      	ldr	r3, [pc, #124]	; (80049cc <DMA_CalcBaseAndBitshift+0x160>)
 800494e:	4013      	ands	r3, r2
 8004950:	1d1a      	adds	r2, r3, #4
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	659a      	str	r2, [r3, #88]	; 0x58
 8004956:	e00d      	b.n	8004974 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	461a      	mov	r2, r3
 800495e:	4b1b      	ldr	r3, [pc, #108]	; (80049cc <DMA_CalcBaseAndBitshift+0x160>)
 8004960:	4013      	ands	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6593      	str	r3, [r2, #88]	; 0x58
 8004966:	e005      	b.n	8004974 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004978:	4618      	mov	r0, r3
 800497a:	3714      	adds	r7, #20
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	40020010 	.word	0x40020010
 8004988:	40020028 	.word	0x40020028
 800498c:	40020040 	.word	0x40020040
 8004990:	40020058 	.word	0x40020058
 8004994:	40020070 	.word	0x40020070
 8004998:	40020088 	.word	0x40020088
 800499c:	400200a0 	.word	0x400200a0
 80049a0:	400200b8 	.word	0x400200b8
 80049a4:	40020410 	.word	0x40020410
 80049a8:	40020428 	.word	0x40020428
 80049ac:	40020440 	.word	0x40020440
 80049b0:	40020458 	.word	0x40020458
 80049b4:	40020470 	.word	0x40020470
 80049b8:	40020488 	.word	0x40020488
 80049bc:	400204a0 	.word	0x400204a0
 80049c0:	400204b8 	.word	0x400204b8
 80049c4:	aaaaaaab 	.word	0xaaaaaaab
 80049c8:	0800c114 	.word	0x0800c114
 80049cc:	fffffc00 	.word	0xfffffc00

080049d0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049d8:	2300      	movs	r3, #0
 80049da:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d120      	bne.n	8004a26 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d858      	bhi.n	8004a9e <DMA_CheckFifoParam+0xce>
 80049ec:	a201      	add	r2, pc, #4	; (adr r2, 80049f4 <DMA_CheckFifoParam+0x24>)
 80049ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049f2:	bf00      	nop
 80049f4:	08004a05 	.word	0x08004a05
 80049f8:	08004a17 	.word	0x08004a17
 80049fc:	08004a05 	.word	0x08004a05
 8004a00:	08004a9f 	.word	0x08004a9f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d048      	beq.n	8004aa2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a14:	e045      	b.n	8004aa2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a1e:	d142      	bne.n	8004aa6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a24:	e03f      	b.n	8004aa6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a2e:	d123      	bne.n	8004a78 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a34:	2b03      	cmp	r3, #3
 8004a36:	d838      	bhi.n	8004aaa <DMA_CheckFifoParam+0xda>
 8004a38:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <DMA_CheckFifoParam+0x70>)
 8004a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a3e:	bf00      	nop
 8004a40:	08004a51 	.word	0x08004a51
 8004a44:	08004a57 	.word	0x08004a57
 8004a48:	08004a51 	.word	0x08004a51
 8004a4c:	08004a69 	.word	0x08004a69
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
        break;
 8004a54:	e030      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d025      	beq.n	8004aae <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a66:	e022      	b.n	8004aae <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a70:	d11f      	bne.n	8004ab2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004a76:	e01c      	b.n	8004ab2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d902      	bls.n	8004a86 <DMA_CheckFifoParam+0xb6>
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d003      	beq.n	8004a8c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004a84:	e018      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	73fb      	strb	r3, [r7, #15]
        break;
 8004a8a:	e015      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00e      	beq.n	8004ab6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
    break;
 8004a9c:	e00b      	b.n	8004ab6 <DMA_CheckFifoParam+0xe6>
        break;
 8004a9e:	bf00      	nop
 8004aa0:	e00a      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8004aa2:	bf00      	nop
 8004aa4:	e008      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8004aa6:	bf00      	nop
 8004aa8:	e006      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8004aaa:	bf00      	nop
 8004aac:	e004      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8004aae:	bf00      	nop
 8004ab0:	e002      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
        break;
 8004ab2:	bf00      	nop
 8004ab4:	e000      	b.n	8004ab8 <DMA_CheckFifoParam+0xe8>
    break;
 8004ab6:	bf00      	nop
    }
  }

  return status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3714      	adds	r7, #20
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a38      	ldr	r2, [pc, #224]	; (8004bbc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d022      	beq.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a36      	ldr	r2, [pc, #216]	; (8004bc0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d01d      	beq.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a35      	ldr	r2, [pc, #212]	; (8004bc4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d018      	beq.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a33      	ldr	r2, [pc, #204]	; (8004bc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d013      	beq.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a32      	ldr	r2, [pc, #200]	; (8004bcc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d00e      	beq.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a30      	ldr	r2, [pc, #192]	; (8004bd0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d009      	beq.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a2f      	ldr	r2, [pc, #188]	; (8004bd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d004      	beq.n	8004b26 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a2d      	ldr	r2, [pc, #180]	; (8004bd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d101      	bne.n	8004b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004b26:	2301      	movs	r3, #1
 8004b28:	e000      	b.n	8004b2c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01a      	beq.n	8004b66 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	3b08      	subs	r3, #8
 8004b38:	4a28      	ldr	r2, [pc, #160]	; (8004bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	091b      	lsrs	r3, r3, #4
 8004b40:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4b26      	ldr	r3, [pc, #152]	; (8004be0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a24      	ldr	r2, [pc, #144]	; (8004be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004b54:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	f003 031f 	and.w	r3, r3, #31
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	409a      	lsls	r2, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004b64:	e024      	b.n	8004bb0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	3b10      	subs	r3, #16
 8004b6e:	4a1e      	ldr	r2, [pc, #120]	; (8004be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004b70:	fba2 2303 	umull	r2, r3, r2, r3
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	4a1c      	ldr	r2, [pc, #112]	; (8004bec <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d806      	bhi.n	8004b8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d902      	bls.n	8004b8e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4b18      	ldr	r3, [pc, #96]	; (8004bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004b92:	4413      	add	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	461a      	mov	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a16      	ldr	r2, [pc, #88]	; (8004bf8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004ba0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	f003 031f 	and.w	r3, r3, #31
 8004ba8:	2201      	movs	r2, #1
 8004baa:	409a      	lsls	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	58025408 	.word	0x58025408
 8004bc0:	5802541c 	.word	0x5802541c
 8004bc4:	58025430 	.word	0x58025430
 8004bc8:	58025444 	.word	0x58025444
 8004bcc:	58025458 	.word	0x58025458
 8004bd0:	5802546c 	.word	0x5802546c
 8004bd4:	58025480 	.word	0x58025480
 8004bd8:	58025494 	.word	0x58025494
 8004bdc:	cccccccd 	.word	0xcccccccd
 8004be0:	16009600 	.word	0x16009600
 8004be4:	58025880 	.word	0x58025880
 8004be8:	aaaaaaab 	.word	0xaaaaaaab
 8004bec:	400204b8 	.word	0x400204b8
 8004bf0:	4002040f 	.word	0x4002040f
 8004bf4:	10008200 	.word	0x10008200
 8004bf8:	40020880 	.word	0x40020880

08004bfc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d04a      	beq.n	8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d847      	bhi.n	8004ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a25      	ldr	r2, [pc, #148]	; (8004cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d022      	beq.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a24      	ldr	r2, [pc, #144]	; (8004cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d01d      	beq.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a22      	ldr	r2, [pc, #136]	; (8004cbc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d018      	beq.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d013      	beq.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a1f      	ldr	r2, [pc, #124]	; (8004cc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d00e      	beq.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a1e      	ldr	r2, [pc, #120]	; (8004cc8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d009      	beq.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a1c      	ldr	r2, [pc, #112]	; (8004ccc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d004      	beq.n	8004c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a1b      	ldr	r2, [pc, #108]	; (8004cd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d101      	bne.n	8004c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e000      	b.n	8004c6e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4b17      	ldr	r3, [pc, #92]	; (8004cd4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004c76:	4413      	add	r3, r2
 8004c78:	009b      	lsls	r3, r3, #2
 8004c7a:	461a      	mov	r2, r3
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004c84:	671a      	str	r2, [r3, #112]	; 0x70
 8004c86:	e009      	b.n	8004c9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a11      	ldr	r2, [pc, #68]	; (8004ce0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004c9a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	58025408 	.word	0x58025408
 8004cb8:	5802541c 	.word	0x5802541c
 8004cbc:	58025430 	.word	0x58025430
 8004cc0:	58025444 	.word	0x58025444
 8004cc4:	58025458 	.word	0x58025458
 8004cc8:	5802546c 	.word	0x5802546c
 8004ccc:	58025480 	.word	0x58025480
 8004cd0:	58025494 	.word	0x58025494
 8004cd4:	1600963f 	.word	0x1600963f
 8004cd8:	58025940 	.word	0x58025940
 8004cdc:	1000823f 	.word	0x1000823f
 8004ce0:	40020940 	.word	0x40020940

08004ce4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d101      	bne.n	8004cf6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e0cf      	b.n	8004e96 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2223      	movs	r2, #35	; 0x23
 8004d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7fd f907 	bl	8001f1c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0e:	4b64      	ldr	r3, [pc, #400]	; (8004ea0 <HAL_ETH_Init+0x1bc>)
 8004d10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d14:	4a62      	ldr	r2, [pc, #392]	; (8004ea0 <HAL_ETH_Init+0x1bc>)
 8004d16:	f043 0302 	orr.w	r3, r3, #2
 8004d1a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d1e:	4b60      	ldr	r3, [pc, #384]	; (8004ea0 <HAL_ETH_Init+0x1bc>)
 8004d20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	60bb      	str	r3, [r7, #8]
 8004d2a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	7a1b      	ldrb	r3, [r3, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d103      	bne.n	8004d3c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004d34:	2000      	movs	r0, #0
 8004d36:	f7fd fc8b 	bl	8002650 <HAL_SYSCFG_ETHInterfaceSelect>
 8004d3a:	e003      	b.n	8004d44 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004d3c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004d40:	f7fd fc86 	bl	8002650 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004d44:	4b57      	ldr	r3, [pc, #348]	; (8004ea4 <HAL_ETH_Init+0x1c0>)
 8004d46:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6812      	ldr	r2, [r2, #0]
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d60:	f7fd fc3a 	bl	80025d8 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d66:	e011      	b.n	8004d8c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004d68:	f7fd fc36 	bl	80025d8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d76:	d909      	bls.n	8004d8c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2204      	movs	r2, #4
 8004d7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	22e0      	movs	r2, #224	; 0xe0
 8004d84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e084      	b.n	8004e96 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0301 	and.w	r3, r3, #1
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e4      	bne.n	8004d68 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 f886 	bl	8004eb0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004da4:	f001 fefc 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a3f      	ldr	r2, [pc, #252]	; (8004ea8 <HAL_ETH_Init+0x1c4>)
 8004dac:	fba2 2303 	umull	r2, r3, r2, r3
 8004db0:	0c9a      	lsrs	r2, r3, #18
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3a01      	subs	r2, #1
 8004db8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 fa71 	bl	80052a4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004dce:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004dde:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	22e0      	movs	r2, #224	; 0xe0
 8004dfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e049      	b.n	8004e96 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004e0e:	4b27      	ldr	r3, [pc, #156]	; (8004eac <HAL_ETH_Init+0x1c8>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	6952      	ldr	r2, [r2, #20]
 8004e16:	0051      	lsls	r1, r2, #1
 8004e18:	687a      	ldr	r2, [r7, #4]
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	430b      	orrs	r3, r1
 8004e1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004e22:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fad9 	bl	80053de <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 fb1f 	bl	8005470 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	3305      	adds	r3, #5
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	021a      	lsls	r2, r3, #8
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	3304      	adds	r3, #4
 8004e42:	781b      	ldrb	r3, [r3, #0]
 8004e44:	4619      	mov	r1, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	3303      	adds	r3, #3
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	061a      	lsls	r2, r3, #24
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	3302      	adds	r3, #2
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	041b      	lsls	r3, r3, #16
 8004e64:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	781b      	ldrb	r3, [r3, #0]
 8004e6e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e70:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004e7e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004e80:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	58000400 	.word	0x58000400
 8004ea8:	431bde83 	.word	0x431bde83
 8004eac:	ffff8001 	.word	0xffff8001

08004eb0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b084      	sub	sp, #16
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ec8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004eca:	f001 fe69 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8004ece:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	4a1e      	ldr	r2, [pc, #120]	; (8004f4c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d908      	bls.n	8004eea <HAL_ETH_SetMDIOClockRange+0x3a>
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4a1d      	ldr	r2, [pc, #116]	; (8004f50 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d804      	bhi.n	8004eea <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e027      	b.n	8004f3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4a18      	ldr	r2, [pc, #96]	; (8004f50 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d908      	bls.n	8004f04 <HAL_ETH_SetMDIOClockRange+0x54>
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4a17      	ldr	r2, [pc, #92]	; (8004f54 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d204      	bcs.n	8004f04 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	e01a      	b.n	8004f3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	4a13      	ldr	r2, [pc, #76]	; (8004f54 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d303      	bcc.n	8004f14 <HAL_ETH_SetMDIOClockRange+0x64>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4a12      	ldr	r2, [pc, #72]	; (8004f58 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d911      	bls.n	8004f38 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	4a10      	ldr	r2, [pc, #64]	; (8004f58 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d908      	bls.n	8004f2e <HAL_ETH_SetMDIOClockRange+0x7e>
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <HAL_ETH_SetMDIOClockRange+0xac>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d804      	bhi.n	8004f2e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	e005      	b.n	8004f3a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f34:	60fb      	str	r3, [r7, #12]
 8004f36:	e000      	b.n	8004f3a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004f38:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f44:	bf00      	nop
 8004f46:	3710      	adds	r7, #16
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	01312cff 	.word	0x01312cff
 8004f50:	02160ebf 	.word	0x02160ebf
 8004f54:	03938700 	.word	0x03938700
 8004f58:	05f5e0ff 	.word	0x05f5e0ff
 8004f5c:	08f0d17f 	.word	0x08f0d17f

08004f60 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004f72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	791b      	ldrb	r3, [r3, #4]
 8004f78:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004f7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	7b1b      	ldrb	r3, [r3, #12]
 8004f80:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004f82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	7b5b      	ldrb	r3, [r3, #13]
 8004f88:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004f8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	7b9b      	ldrb	r3, [r3, #14]
 8004f90:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004f92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	7bdb      	ldrb	r3, [r3, #15]
 8004f98:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004f9a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	7c12      	ldrb	r2, [r2, #16]
 8004fa0:	2a00      	cmp	r2, #0
 8004fa2:	d102      	bne.n	8004faa <ETH_SetMACConfig+0x4a>
 8004fa4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004fa8:	e000      	b.n	8004fac <ETH_SetMACConfig+0x4c>
 8004faa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004fac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	7c52      	ldrb	r2, [r2, #17]
 8004fb2:	2a00      	cmp	r2, #0
 8004fb4:	d102      	bne.n	8004fbc <ETH_SetMACConfig+0x5c>
 8004fb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004fba:	e000      	b.n	8004fbe <ETH_SetMACConfig+0x5e>
 8004fbc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004fbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	7c9b      	ldrb	r3, [r3, #18]
 8004fc4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004fc6:	431a      	orrs	r2, r3
               macconf->Speed |
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004fcc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004fd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	7f1b      	ldrb	r3, [r3, #28]
 8004fd8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004fda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	7f5b      	ldrb	r3, [r3, #29]
 8004fe0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004fe2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	7f92      	ldrb	r2, [r2, #30]
 8004fe8:	2a00      	cmp	r2, #0
 8004fea:	d102      	bne.n	8004ff2 <ETH_SetMACConfig+0x92>
 8004fec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ff0:	e000      	b.n	8004ff4 <ETH_SetMACConfig+0x94>
 8004ff2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004ff4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	7fdb      	ldrb	r3, [r3, #31]
 8004ffa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004ffc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005004:	2a00      	cmp	r2, #0
 8005006:	d102      	bne.n	800500e <ETH_SetMACConfig+0xae>
 8005008:	f44f 7280 	mov.w	r2, #256	; 0x100
 800500c:	e000      	b.n	8005010 <ETH_SetMACConfig+0xb0>
 800500e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005010:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005016:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800501e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005020:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b56      	ldr	r3, [pc, #344]	; (800518c <ETH_SetMACConfig+0x22c>)
 8005032:	4013      	ands	r3, r2
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	68f9      	ldr	r1, [r7, #12]
 800503a:	430b      	orrs	r3, r1
 800503c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005042:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800504a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800504c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005054:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005056:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800505e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005060:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005062:	683a      	ldr	r2, [r7, #0]
 8005064:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005068:	2a00      	cmp	r2, #0
 800506a:	d102      	bne.n	8005072 <ETH_SetMACConfig+0x112>
 800506c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005070:	e000      	b.n	8005074 <ETH_SetMACConfig+0x114>
 8005072:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005074:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800507a:	4313      	orrs	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	4b42      	ldr	r3, [pc, #264]	; (8005190 <ETH_SetMACConfig+0x230>)
 8005086:	4013      	ands	r3, r2
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6812      	ldr	r2, [r2, #0]
 800508c:	68f9      	ldr	r1, [r7, #12]
 800508e:	430b      	orrs	r3, r1
 8005090:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005098:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800509e:	4313      	orrs	r3, r2
 80050a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68da      	ldr	r2, [r3, #12]
 80050a8:	4b3a      	ldr	r3, [pc, #232]	; (8005194 <ETH_SetMACConfig+0x234>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	68f9      	ldr	r1, [r7, #12]
 80050b2:	430b      	orrs	r3, r1
 80050b4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80050bc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80050ca:	2a00      	cmp	r2, #0
 80050cc:	d101      	bne.n	80050d2 <ETH_SetMACConfig+0x172>
 80050ce:	2280      	movs	r2, #128	; 0x80
 80050d0:	e000      	b.n	80050d4 <ETH_SetMACConfig+0x174>
 80050d2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80050d4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050da:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80050dc:	4313      	orrs	r3, r2
 80050de:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050e6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80050ea:	4013      	ands	r3, r2
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6812      	ldr	r2, [r2, #0]
 80050f0:	68f9      	ldr	r1, [r7, #12]
 80050f2:	430b      	orrs	r3, r1
 80050f4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80050fc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005104:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005106:	4313      	orrs	r3, r2
 8005108:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005112:	f023 0103 	bic.w	r1, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	430a      	orrs	r2, r1
 800511e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800512a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005140:	683a      	ldr	r2, [r7, #0]
 8005142:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005146:	2a00      	cmp	r2, #0
 8005148:	d101      	bne.n	800514e <ETH_SetMACConfig+0x1ee>
 800514a:	2240      	movs	r2, #64	; 0x40
 800514c:	e000      	b.n	8005150 <ETH_SetMACConfig+0x1f0>
 800514e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005150:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005158:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800515a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005162:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005164:	4313      	orrs	r3, r2
 8005166:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005170:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	430a      	orrs	r2, r1
 800517c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005180:	bf00      	nop
 8005182:	3714      	adds	r7, #20
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	00048083 	.word	0x00048083
 8005190:	c0f88000 	.word	0xc0f88000
 8005194:	fffffef0 	.word	0xfffffef0

08005198 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	4b38      	ldr	r3, [pc, #224]	; (8005290 <ETH_SetDMAConfig+0xf8>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	6811      	ldr	r1, [r2, #0]
 80051b4:	687a      	ldr	r2, [r7, #4]
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	430b      	orrs	r3, r1
 80051ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051be:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	791b      	ldrb	r3, [r3, #4]
 80051c4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	7b1b      	ldrb	r3, [r3, #12]
 80051d0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	4b2c      	ldr	r3, [pc, #176]	; (8005294 <ETH_SetDMAConfig+0xfc>)
 80051e2:	4013      	ands	r3, r2
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	68f9      	ldr	r1, [r7, #12]
 80051ea:	430b      	orrs	r3, r1
 80051ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051f0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	7b5b      	ldrb	r3, [r3, #13]
 80051f6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005208:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800520c:	4b22      	ldr	r3, [pc, #136]	; (8005298 <ETH_SetDMAConfig+0x100>)
 800520e:	4013      	ands	r3, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	6812      	ldr	r2, [r2, #0]
 8005214:	68f9      	ldr	r1, [r7, #12]
 8005216:	430b      	orrs	r3, r1
 8005218:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800521c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	7d1b      	ldrb	r3, [r3, #20]
 8005228:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800522a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	7f5b      	ldrb	r3, [r3, #29]
 8005230:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005232:	4313      	orrs	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800523e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005242:	4b16      	ldr	r3, [pc, #88]	; (800529c <ETH_SetDMAConfig+0x104>)
 8005244:	4013      	ands	r3, r2
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6812      	ldr	r2, [r2, #0]
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	430b      	orrs	r3, r1
 800524e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005252:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	7f1b      	ldrb	r3, [r3, #28]
 800525a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005260:	4313      	orrs	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800526c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005270:	4b0b      	ldr	r3, [pc, #44]	; (80052a0 <ETH_SetDMAConfig+0x108>)
 8005272:	4013      	ands	r3, r2
 8005274:	687a      	ldr	r2, [r7, #4]
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	68f9      	ldr	r1, [r7, #12]
 800527a:	430b      	orrs	r3, r1
 800527c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005280:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005284:	bf00      	nop
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr
 8005290:	ffff87fd 	.word	0xffff87fd
 8005294:	ffff2ffe 	.word	0xffff2ffe
 8005298:	fffec000 	.word	0xfffec000
 800529c:	ffc0efef 	.word	0xffc0efef
 80052a0:	7fc0ffff 	.word	0x7fc0ffff

080052a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b0a4      	sub	sp, #144	; 0x90
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80052b2:	2300      	movs	r3, #0
 80052b4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80052b6:	2300      	movs	r3, #0
 80052b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80052bc:	2300      	movs	r3, #0
 80052be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80052ce:	2301      	movs	r3, #1
 80052d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80052d4:	2300      	movs	r3, #0
 80052d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80052da:	2301      	movs	r3, #1
 80052dc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80052e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052e4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80052e6:	2300      	movs	r3, #0
 80052e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80052ec:	2300      	movs	r3, #0
 80052ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80052f0:	2300      	movs	r3, #0
 80052f2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80052f6:	2300      	movs	r3, #0
 80052f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80052fc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005300:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005302:	2300      	movs	r3, #0
 8005304:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005308:	2300      	movs	r3, #0
 800530a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005312:	2300      	movs	r3, #0
 8005314:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005318:	2300      	movs	r3, #0
 800531a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800531e:	2300      	movs	r3, #0
 8005320:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005322:	2300      	movs	r3, #0
 8005324:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005326:	2300      	movs	r3, #0
 8005328:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800532a:	2300      	movs	r3, #0
 800532c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005330:	2300      	movs	r3, #0
 8005332:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005336:	2301      	movs	r3, #1
 8005338:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800533c:	2320      	movs	r3, #32
 800533e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005342:	2301      	movs	r3, #1
 8005344:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005348:	2300      	movs	r3, #0
 800534a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800534e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005354:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005358:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800535a:	2300      	movs	r3, #0
 800535c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005360:	2302      	movs	r3, #2
 8005362:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005366:	2300      	movs	r3, #0
 8005368:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800536c:	2300      	movs	r3, #0
 800536e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005372:	2300      	movs	r3, #0
 8005374:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005378:	2301      	movs	r3, #1
 800537a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800537e:	2300      	movs	r3, #0
 8005380:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005382:	2301      	movs	r3, #1
 8005384:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800538c:	4619      	mov	r1, r3
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	f7ff fde6 	bl	8004f60 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005394:	2301      	movs	r3, #1
 8005396:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005398:	2301      	movs	r3, #1
 800539a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800539c:	2300      	movs	r3, #0
 800539e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80053a0:	2300      	movs	r3, #0
 80053a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80053a6:	2300      	movs	r3, #0
 80053a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80053aa:	2300      	movs	r3, #0
 80053ac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80053ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80053b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80053bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80053be:	2300      	movs	r3, #0
 80053c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80053c4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80053c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80053ca:	f107 0308 	add.w	r3, r7, #8
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f7ff fee1 	bl	8005198 <ETH_SetDMAConfig>
}
 80053d6:	bf00      	nop
 80053d8:	3790      	adds	r7, #144	; 0x90
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80053de:	b480      	push	{r7}
 80053e0:	b085      	sub	sp, #20
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	60fb      	str	r3, [r7, #12]
 80053ea:	e01d      	b.n	8005428 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	68d9      	ldr	r1, [r3, #12]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	4613      	mov	r3, r2
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	440b      	add	r3, r1
 80053fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2200      	movs	r2, #0
 800540e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2200      	movs	r2, #0
 8005414:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	3206      	adds	r2, #6
 800541e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	3301      	adds	r3, #1
 8005426:	60fb      	str	r3, [r7, #12]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b03      	cmp	r3, #3
 800542c:	d9de      	bls.n	80053ec <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800543c:	461a      	mov	r2, r3
 800543e:	2303      	movs	r3, #3
 8005440:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005450:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005460:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005464:	bf00      	nop
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005478:	2300      	movs	r3, #0
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e023      	b.n	80054c6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6919      	ldr	r1, [r3, #16]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	4613      	mov	r3, r2
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	4413      	add	r3, r2
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	440b      	add	r3, r1
 800548e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	2200      	movs	r2, #0
 800549a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	2200      	movs	r2, #0
 80054a6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2200      	movs	r2, #0
 80054ac:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2200      	movs	r2, #0
 80054b2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80054b4:	68b9      	ldr	r1, [r7, #8]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	3212      	adds	r2, #18
 80054bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	3301      	adds	r3, #1
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2b03      	cmp	r3, #3
 80054ca:	d9d8      	bls.n	800547e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054f2:	461a      	mov	r2, r3
 80054f4:	2303      	movs	r3, #3
 80054f6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691a      	ldr	r2, [r3, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005506:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800551a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800551e:	bf00      	nop
 8005520:	3714      	adds	r7, #20
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800552c:	b480      	push	{r7}
 800552e:	b089      	sub	sp, #36	; 0x24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
 8005534:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005536:	2300      	movs	r3, #0
 8005538:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800553a:	4b89      	ldr	r3, [pc, #548]	; (8005760 <HAL_GPIO_Init+0x234>)
 800553c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800553e:	e194      	b.n	800586a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681a      	ldr	r2, [r3, #0]
 8005544:	2101      	movs	r1, #1
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	4013      	ands	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 8186 	beq.w	8005864 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f003 0303 	and.w	r3, r3, #3
 8005560:	2b01      	cmp	r3, #1
 8005562:	d005      	beq.n	8005570 <HAL_GPIO_Init+0x44>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d130      	bne.n	80055d2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	2203      	movs	r2, #3
 800557c:	fa02 f303 	lsl.w	r3, r2, r3
 8005580:	43db      	mvns	r3, r3
 8005582:	69ba      	ldr	r2, [r7, #24]
 8005584:	4013      	ands	r3, r2
 8005586:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	69ba      	ldr	r2, [r7, #24]
 8005596:	4313      	orrs	r3, r2
 8005598:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055a6:	2201      	movs	r2, #1
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43db      	mvns	r3, r3
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	4013      	ands	r3, r2
 80055b4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	091b      	lsrs	r3, r3, #4
 80055bc:	f003 0201 	and.w	r2, r3, #1
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	fa02 f303 	lsl.w	r3, r2, r3
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f003 0303 	and.w	r3, r3, #3
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d017      	beq.n	800560e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	005b      	lsls	r3, r3, #1
 80055e8:	2203      	movs	r2, #3
 80055ea:	fa02 f303 	lsl.w	r3, r2, r3
 80055ee:	43db      	mvns	r3, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4013      	ands	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689a      	ldr	r2, [r3, #8]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	69ba      	ldr	r2, [r7, #24]
 8005604:	4313      	orrs	r3, r2
 8005606:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	69ba      	ldr	r2, [r7, #24]
 800560c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	f003 0303 	and.w	r3, r3, #3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d123      	bne.n	8005662 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	08da      	lsrs	r2, r3, #3
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	3208      	adds	r2, #8
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	220f      	movs	r2, #15
 8005632:	fa02 f303 	lsl.w	r3, r2, r3
 8005636:	43db      	mvns	r3, r3
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	4013      	ands	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	691a      	ldr	r2, [r3, #16]
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	69ba      	ldr	r2, [r7, #24]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	08da      	lsrs	r2, r3, #3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3208      	adds	r2, #8
 800565c:	69b9      	ldr	r1, [r7, #24]
 800565e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	005b      	lsls	r3, r3, #1
 800566c:	2203      	movs	r2, #3
 800566e:	fa02 f303 	lsl.w	r3, r2, r3
 8005672:	43db      	mvns	r3, r3
 8005674:	69ba      	ldr	r2, [r7, #24]
 8005676:	4013      	ands	r3, r2
 8005678:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f003 0203 	and.w	r2, r3, #3
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	005b      	lsls	r3, r3, #1
 8005686:	fa02 f303 	lsl.w	r3, r2, r3
 800568a:	69ba      	ldr	r2, [r7, #24]
 800568c:	4313      	orrs	r3, r2
 800568e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80e0 	beq.w	8005864 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056a4:	4b2f      	ldr	r3, [pc, #188]	; (8005764 <HAL_GPIO_Init+0x238>)
 80056a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056aa:	4a2e      	ldr	r2, [pc, #184]	; (8005764 <HAL_GPIO_Init+0x238>)
 80056ac:	f043 0302 	orr.w	r3, r3, #2
 80056b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056b4:	4b2b      	ldr	r3, [pc, #172]	; (8005764 <HAL_GPIO_Init+0x238>)
 80056b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056c2:	4a29      	ldr	r2, [pc, #164]	; (8005768 <HAL_GPIO_Init+0x23c>)
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	089b      	lsrs	r3, r3, #2
 80056c8:	3302      	adds	r3, #2
 80056ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	220f      	movs	r2, #15
 80056da:	fa02 f303 	lsl.w	r3, r2, r3
 80056de:	43db      	mvns	r3, r3
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	4013      	ands	r3, r2
 80056e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a20      	ldr	r2, [pc, #128]	; (800576c <HAL_GPIO_Init+0x240>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d052      	beq.n	8005794 <HAL_GPIO_Init+0x268>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1f      	ldr	r2, [pc, #124]	; (8005770 <HAL_GPIO_Init+0x244>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d031      	beq.n	800575a <HAL_GPIO_Init+0x22e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a1e      	ldr	r2, [pc, #120]	; (8005774 <HAL_GPIO_Init+0x248>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d02b      	beq.n	8005756 <HAL_GPIO_Init+0x22a>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1d      	ldr	r2, [pc, #116]	; (8005778 <HAL_GPIO_Init+0x24c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d025      	beq.n	8005752 <HAL_GPIO_Init+0x226>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1c      	ldr	r2, [pc, #112]	; (800577c <HAL_GPIO_Init+0x250>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01f      	beq.n	800574e <HAL_GPIO_Init+0x222>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_GPIO_Init+0x254>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d019      	beq.n	800574a <HAL_GPIO_Init+0x21e>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_GPIO_Init+0x258>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <HAL_GPIO_Init+0x21a>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a19      	ldr	r2, [pc, #100]	; (8005788 <HAL_GPIO_Init+0x25c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00d      	beq.n	8005742 <HAL_GPIO_Init+0x216>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a18      	ldr	r2, [pc, #96]	; (800578c <HAL_GPIO_Init+0x260>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d007      	beq.n	800573e <HAL_GPIO_Init+0x212>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a17      	ldr	r2, [pc, #92]	; (8005790 <HAL_GPIO_Init+0x264>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d101      	bne.n	800573a <HAL_GPIO_Init+0x20e>
 8005736:	2309      	movs	r3, #9
 8005738:	e02d      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800573a:	230a      	movs	r3, #10
 800573c:	e02b      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800573e:	2308      	movs	r3, #8
 8005740:	e029      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 8005742:	2307      	movs	r3, #7
 8005744:	e027      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 8005746:	2306      	movs	r3, #6
 8005748:	e025      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800574a:	2305      	movs	r3, #5
 800574c:	e023      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800574e:	2304      	movs	r3, #4
 8005750:	e021      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 8005752:	2303      	movs	r3, #3
 8005754:	e01f      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 8005756:	2302      	movs	r3, #2
 8005758:	e01d      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800575a:	2301      	movs	r3, #1
 800575c:	e01b      	b.n	8005796 <HAL_GPIO_Init+0x26a>
 800575e:	bf00      	nop
 8005760:	58000080 	.word	0x58000080
 8005764:	58024400 	.word	0x58024400
 8005768:	58000400 	.word	0x58000400
 800576c:	58020000 	.word	0x58020000
 8005770:	58020400 	.word	0x58020400
 8005774:	58020800 	.word	0x58020800
 8005778:	58020c00 	.word	0x58020c00
 800577c:	58021000 	.word	0x58021000
 8005780:	58021400 	.word	0x58021400
 8005784:	58021800 	.word	0x58021800
 8005788:	58021c00 	.word	0x58021c00
 800578c:	58022000 	.word	0x58022000
 8005790:	58022400 	.word	0x58022400
 8005794:	2300      	movs	r3, #0
 8005796:	69fa      	ldr	r2, [r7, #28]
 8005798:	f002 0203 	and.w	r2, r2, #3
 800579c:	0092      	lsls	r2, r2, #2
 800579e:	4093      	lsls	r3, r2
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057a6:	4938      	ldr	r1, [pc, #224]	; (8005888 <HAL_GPIO_Init+0x35c>)
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	089b      	lsrs	r3, r3, #2
 80057ac:	3302      	adds	r3, #2
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	43db      	mvns	r3, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4013      	ands	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d003      	beq.n	80057da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057d2:	69ba      	ldr	r2, [r7, #24]
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	43db      	mvns	r3, r3
 80057ee:	69ba      	ldr	r2, [r7, #24]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005800:	69ba      	ldr	r2, [r7, #24]
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	43db      	mvns	r3, r3
 800581a:	69ba      	ldr	r2, [r7, #24]
 800581c:	4013      	ands	r3, r2
 800581e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800582c:	69ba      	ldr	r2, [r7, #24]
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	43db      	mvns	r3, r3
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	4013      	ands	r3, r2
 8005848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d003      	beq.n	800585e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	4313      	orrs	r3, r2
 800585c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005864:	69fb      	ldr	r3, [r7, #28]
 8005866:	3301      	adds	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	f47f ae63 	bne.w	8005540 <HAL_GPIO_Init+0x14>
  }
}
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	3724      	adds	r7, #36	; 0x24
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	58000400 	.word	0x58000400

0800588c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	460b      	mov	r3, r1
 8005896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691a      	ldr	r2, [r3, #16]
 800589c:	887b      	ldrh	r3, [r7, #2]
 800589e:	4013      	ands	r3, r2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80058a4:	2301      	movs	r3, #1
 80058a6:	73fb      	strb	r3, [r7, #15]
 80058a8:	e001      	b.n	80058ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	460b      	mov	r3, r1
 80058c6:	807b      	strh	r3, [r7, #2]
 80058c8:	4613      	mov	r3, r2
 80058ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058cc:	787b      	ldrb	r3, [r7, #1]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d003      	beq.n	80058da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058d2:	887a      	ldrh	r2, [r7, #2]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058d8:	e003      	b.n	80058e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058da:	887b      	ldrh	r3, [r7, #2]
 80058dc:	041a      	lsls	r2, r3, #16
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	619a      	str	r2, [r3, #24]
}
 80058e2:	bf00      	nop
 80058e4:	370c      	adds	r7, #12
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b085      	sub	sp, #20
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005900:	887a      	ldrh	r2, [r7, #2]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4013      	ands	r3, r2
 8005906:	041a      	lsls	r2, r3, #16
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	43d9      	mvns	r1, r3
 800590c:	887b      	ldrh	r3, [r7, #2]
 800590e:	400b      	ands	r3, r1
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	619a      	str	r2, [r3, #24]
}
 8005916:	bf00      	nop
 8005918:	3714      	adds	r7, #20
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800592c:	4a08      	ldr	r2, [pc, #32]	; (8005950 <HAL_HSEM_FastTake+0x2c>)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	3320      	adds	r3, #32
 8005932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005936:	4a07      	ldr	r2, [pc, #28]	; (8005954 <HAL_HSEM_FastTake+0x30>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d101      	bne.n	8005940 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800593c:	2300      	movs	r3, #0
 800593e:	e000      	b.n	8005942 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	58026400 	.word	0x58026400
 8005954:	80000300 	.word	0x80000300

08005958 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005962:	4906      	ldr	r1, [pc, #24]	; (800597c <HAL_HSEM_Release+0x24>)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr
 800597c:	58026400 	.word	0x58026400

08005980 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005980:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005982:	b08f      	sub	sp, #60	; 0x3c
 8005984:	af0a      	add	r7, sp, #40	; 0x28
 8005986:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e116      	b.n	8005bc0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fc fcc1 	bl	8002334 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2203      	movs	r2, #3
 80059b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f004 fded 	bl	800a5b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	687e      	ldr	r6, [r7, #4]
 80059de:	466d      	mov	r5, sp
 80059e0:	f106 0410 	add.w	r4, r6, #16
 80059e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80059ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80059ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80059f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80059f4:	1d33      	adds	r3, r6, #4
 80059f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80059f8:	6838      	ldr	r0, [r7, #0]
 80059fa:	f004 fd6b 	bl	800a4d4 <USB_CoreInit>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	e0d7      	b.n	8005bc0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4618      	mov	r0, r3
 8005a18:	f004 fddb 	bl	800a5d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	73fb      	strb	r3, [r7, #15]
 8005a20:	e04a      	b.n	8005ab8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	6879      	ldr	r1, [r7, #4]
 8005a26:	4613      	mov	r3, r2
 8005a28:	00db      	lsls	r3, r3, #3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	440b      	add	r3, r1
 8005a30:	333d      	adds	r3, #61	; 0x3d
 8005a32:	2201      	movs	r2, #1
 8005a34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005a36:	7bfa      	ldrb	r2, [r7, #15]
 8005a38:	6879      	ldr	r1, [r7, #4]
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	00db      	lsls	r3, r3, #3
 8005a3e:	4413      	add	r3, r2
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	440b      	add	r3, r1
 8005a44:	333c      	adds	r3, #60	; 0x3c
 8005a46:	7bfa      	ldrb	r2, [r7, #15]
 8005a48:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005a4a:	7bfa      	ldrb	r2, [r7, #15]
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	b298      	uxth	r0, r3
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	3344      	adds	r3, #68	; 0x44
 8005a5e:	4602      	mov	r2, r0
 8005a60:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005a62:	7bfa      	ldrb	r2, [r7, #15]
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	4613      	mov	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	440b      	add	r3, r1
 8005a70:	3340      	adds	r3, #64	; 0x40
 8005a72:	2200      	movs	r2, #0
 8005a74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005a76:	7bfa      	ldrb	r2, [r7, #15]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4413      	add	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	3348      	adds	r3, #72	; 0x48
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005a8a:	7bfa      	ldrb	r2, [r7, #15]
 8005a8c:	6879      	ldr	r1, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	440b      	add	r3, r1
 8005a98:	334c      	adds	r3, #76	; 0x4c
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005a9e:	7bfa      	ldrb	r2, [r7, #15]
 8005aa0:	6879      	ldr	r1, [r7, #4]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	4413      	add	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	440b      	add	r3, r1
 8005aac:	3354      	adds	r3, #84	; 0x54
 8005aae:	2200      	movs	r2, #0
 8005ab0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ab2:	7bfb      	ldrb	r3, [r7, #15]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	73fb      	strb	r3, [r7, #15]
 8005ab8:	7bfa      	ldrb	r2, [r7, #15]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d3af      	bcc.n	8005a22 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
 8005ac6:	e044      	b.n	8005b52 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005ac8:	7bfa      	ldrb	r2, [r7, #15]
 8005aca:	6879      	ldr	r1, [r7, #4]
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	440b      	add	r3, r1
 8005ad6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005ade:	7bfa      	ldrb	r2, [r7, #15]
 8005ae0:	6879      	ldr	r1, [r7, #4]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	4413      	add	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	440b      	add	r3, r1
 8005aec:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005af0:	7bfa      	ldrb	r2, [r7, #15]
 8005af2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005af4:	7bfa      	ldrb	r2, [r7, #15]
 8005af6:	6879      	ldr	r1, [r7, #4]
 8005af8:	4613      	mov	r3, r2
 8005afa:	00db      	lsls	r3, r3, #3
 8005afc:	4413      	add	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	440b      	add	r3, r1
 8005b02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b06:	2200      	movs	r2, #0
 8005b08:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005b0a:	7bfa      	ldrb	r2, [r7, #15]
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4413      	add	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	440b      	add	r3, r1
 8005b18:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005b20:	7bfa      	ldrb	r2, [r7, #15]
 8005b22:	6879      	ldr	r1, [r7, #4]
 8005b24:	4613      	mov	r3, r2
 8005b26:	00db      	lsls	r3, r3, #3
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	440b      	add	r3, r1
 8005b2e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005b32:	2200      	movs	r2, #0
 8005b34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005b36:	7bfa      	ldrb	r2, [r7, #15]
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b48:	2200      	movs	r2, #0
 8005b4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
 8005b52:	7bfa      	ldrb	r2, [r7, #15]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d3b5      	bcc.n	8005ac8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	687e      	ldr	r6, [r7, #4]
 8005b64:	466d      	mov	r5, sp
 8005b66:	f106 0410 	add.w	r4, r6, #16
 8005b6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b76:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b7a:	1d33      	adds	r3, r6, #4
 8005b7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b7e:	6838      	ldr	r0, [r7, #0]
 8005b80:	f004 fd74 	bl	800a66c <USB_DevInit>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d005      	beq.n	8005b96 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e014      	b.n	8005bc0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d102      	bne.n	8005bb4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 f80a 	bl	8005bc8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f004 ff32 	bl	800aa22 <USB_DevDisconnect>

  return HAL_OK;
 8005bbe:	2300      	movs	r3, #0
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3714      	adds	r7, #20
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005bc8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bf6:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <HAL_PCDEx_ActivateLPM+0x44>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3714      	adds	r7, #20
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	10000003 	.word	0x10000003

08005c10 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005c18:	4b29      	ldr	r3, [pc, #164]	; (8005cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	2b06      	cmp	r3, #6
 8005c22:	d00a      	beq.n	8005c3a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c24:	4b26      	ldr	r3, [pc, #152]	; (8005cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d001      	beq.n	8005c36 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	e040      	b.n	8005cb8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e03e      	b.n	8005cb8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005c3a:	4b21      	ldr	r3, [pc, #132]	; (8005cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005c42:	491f      	ldr	r1, [pc, #124]	; (8005cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005c4a:	f7fc fcc5 	bl	80025d8 <HAL_GetTick>
 8005c4e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c50:	e009      	b.n	8005c66 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c52:	f7fc fcc1 	bl	80025d8 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005c60:	d901      	bls.n	8005c66 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e028      	b.n	8005cb8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005c66:	4b16      	ldr	r3, [pc, #88]	; (8005cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c72:	d1ee      	bne.n	8005c52 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b1e      	cmp	r3, #30
 8005c78:	d008      	beq.n	8005c8c <HAL_PWREx_ConfigSupply+0x7c>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b2e      	cmp	r3, #46	; 0x2e
 8005c7e:	d005      	beq.n	8005c8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2b1d      	cmp	r3, #29
 8005c84:	d002      	beq.n	8005c8c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b2d      	cmp	r3, #45	; 0x2d
 8005c8a:	d114      	bne.n	8005cb6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005c8c:	f7fc fca4 	bl	80025d8 <HAL_GetTick>
 8005c90:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005c92:	e009      	b.n	8005ca8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005c94:	f7fc fca0 	bl	80025d8 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ca2:	d901      	bls.n	8005ca8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e007      	b.n	8005cb8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <HAL_PWREx_ConfigSupply+0xb0>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cb4:	d1ee      	bne.n	8005c94 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	58024800 	.word	0x58024800

08005cc4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005cc8:	4b05      	ldr	r3, [pc, #20]	; (8005ce0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005cd2:	60d3      	str	r3, [r2, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr
 8005cde:	bf00      	nop
 8005ce0:	58024800 	.word	0x58024800

08005ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b08c      	sub	sp, #48	; 0x30
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d102      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f000 bc1d 	b.w	8006532 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8087 	beq.w	8005e14 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d06:	4b99      	ldr	r3, [pc, #612]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d10:	4b96      	ldr	r3, [pc, #600]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d007      	beq.n	8005d2c <HAL_RCC_OscConfig+0x48>
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	2b18      	cmp	r3, #24
 8005d20:	d110      	bne.n	8005d44 <HAL_RCC_OscConfig+0x60>
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	f003 0303 	and.w	r3, r3, #3
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d10b      	bne.n	8005d44 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2c:	4b8f      	ldr	r3, [pc, #572]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d06c      	beq.n	8005e12 <HAL_RCC_OscConfig+0x12e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d168      	bne.n	8005e12 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	e3f6      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	d106      	bne.n	8005d5c <HAL_RCC_OscConfig+0x78>
 8005d4e:	4b87      	ldr	r3, [pc, #540]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a86      	ldr	r2, [pc, #536]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d58:	6013      	str	r3, [r2, #0]
 8005d5a:	e02e      	b.n	8005dba <HAL_RCC_OscConfig+0xd6>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10c      	bne.n	8005d7e <HAL_RCC_OscConfig+0x9a>
 8005d64:	4b81      	ldr	r3, [pc, #516]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a80      	ldr	r2, [pc, #512]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	4b7e      	ldr	r3, [pc, #504]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a7d      	ldr	r2, [pc, #500]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	e01d      	b.n	8005dba <HAL_RCC_OscConfig+0xd6>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d86:	d10c      	bne.n	8005da2 <HAL_RCC_OscConfig+0xbe>
 8005d88:	4b78      	ldr	r3, [pc, #480]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a77      	ldr	r2, [pc, #476]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	4b75      	ldr	r3, [pc, #468]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a74      	ldr	r2, [pc, #464]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	e00b      	b.n	8005dba <HAL_RCC_OscConfig+0xd6>
 8005da2:	4b72      	ldr	r3, [pc, #456]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a71      	ldr	r2, [pc, #452]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dac:	6013      	str	r3, [r2, #0]
 8005dae:	4b6f      	ldr	r3, [pc, #444]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a6e      	ldr	r2, [pc, #440]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d013      	beq.n	8005dea <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dc2:	f7fc fc09 	bl	80025d8 <HAL_GetTick>
 8005dc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dc8:	e008      	b.n	8005ddc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005dca:	f7fc fc05 	bl	80025d8 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	2b64      	cmp	r3, #100	; 0x64
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e3aa      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ddc:	4b63      	ldr	r3, [pc, #396]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0f0      	beq.n	8005dca <HAL_RCC_OscConfig+0xe6>
 8005de8:	e014      	b.n	8005e14 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dea:	f7fc fbf5 	bl	80025d8 <HAL_GetTick>
 8005dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005df0:	e008      	b.n	8005e04 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005df2:	f7fc fbf1 	bl	80025d8 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b64      	cmp	r3, #100	; 0x64
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e396      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e04:	4b59      	ldr	r3, [pc, #356]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f0      	bne.n	8005df2 <HAL_RCC_OscConfig+0x10e>
 8005e10:	e000      	b.n	8005e14 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 80cb 	beq.w	8005fb8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e22:	4b52      	ldr	r3, [pc, #328]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e2a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e2c:	4b4f      	ldr	r3, [pc, #316]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d007      	beq.n	8005e48 <HAL_RCC_OscConfig+0x164>
 8005e38:	6a3b      	ldr	r3, [r7, #32]
 8005e3a:	2b18      	cmp	r3, #24
 8005e3c:	d156      	bne.n	8005eec <HAL_RCC_OscConfig+0x208>
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d151      	bne.n	8005eec <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e48:	4b48      	ldr	r3, [pc, #288]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0304 	and.w	r3, r3, #4
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <HAL_RCC_OscConfig+0x17c>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d101      	bne.n	8005e60 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e368      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e60:	4b42      	ldr	r3, [pc, #264]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f023 0219 	bic.w	r2, r3, #25
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	493f      	ldr	r1, [pc, #252]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005e72:	f7fc fbb1 	bl	80025d8 <HAL_GetTick>
 8005e76:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e7a:	f7fc fbad 	bl	80025d8 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e352      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e8c:	4b37      	ldr	r3, [pc, #220]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e98:	f7fc fbce 	bl	8002638 <HAL_GetREVID>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d817      	bhi.n	8005ed6 <HAL_RCC_OscConfig+0x1f2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d108      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x1dc>
 8005eae:	4b2f      	ldr	r3, [pc, #188]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005eb6:	4a2d      	ldr	r2, [pc, #180]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ebc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ebe:	e07b      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ec0:	4b2a      	ldr	r3, [pc, #168]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	031b      	lsls	r3, r3, #12
 8005ece:	4927      	ldr	r1, [pc, #156]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed4:	e070      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed6:	4b25      	ldr	r3, [pc, #148]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	061b      	lsls	r3, r3, #24
 8005ee4:	4921      	ldr	r1, [pc, #132]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eea:	e065      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d048      	beq.n	8005f86 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005ef4:	4b1d      	ldr	r3, [pc, #116]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f023 0219 	bic.w	r2, r3, #25
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	491a      	ldr	r1, [pc, #104]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f02:	4313      	orrs	r3, r2
 8005f04:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f06:	f7fc fb67 	bl	80025d8 <HAL_GetTick>
 8005f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f0c:	e008      	b.n	8005f20 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f0e:	f7fc fb63 	bl	80025d8 <HAL_GetTick>
 8005f12:	4602      	mov	r2, r0
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2b02      	cmp	r3, #2
 8005f1a:	d901      	bls.n	8005f20 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005f1c:	2303      	movs	r3, #3
 8005f1e:	e308      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f20:	4b12      	ldr	r3, [pc, #72]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d0f0      	beq.n	8005f0e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f2c:	f7fc fb84 	bl	8002638 <HAL_GetREVID>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f241 0203 	movw	r2, #4099	; 0x1003
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d81a      	bhi.n	8005f70 <HAL_RCC_OscConfig+0x28c>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d108      	bne.n	8005f54 <HAL_RCC_OscConfig+0x270>
 8005f42:	4b0a      	ldr	r3, [pc, #40]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f50:	6053      	str	r3, [r2, #4]
 8005f52:	e031      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2d4>
 8005f54:	4b05      	ldr	r3, [pc, #20]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	031b      	lsls	r3, r3, #12
 8005f62:	4902      	ldr	r1, [pc, #8]	; (8005f6c <HAL_RCC_OscConfig+0x288>)
 8005f64:	4313      	orrs	r3, r2
 8005f66:	604b      	str	r3, [r1, #4]
 8005f68:	e026      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2d4>
 8005f6a:	bf00      	nop
 8005f6c:	58024400 	.word	0x58024400
 8005f70:	4b9a      	ldr	r3, [pc, #616]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	061b      	lsls	r3, r3, #24
 8005f7e:	4997      	ldr	r1, [pc, #604]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8005f80:	4313      	orrs	r3, r2
 8005f82:	604b      	str	r3, [r1, #4]
 8005f84:	e018      	b.n	8005fb8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f86:	4b95      	ldr	r3, [pc, #596]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a94      	ldr	r2, [pc, #592]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f92:	f7fc fb21 	bl	80025d8 <HAL_GetTick>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005f9a:	f7fc fb1d 	bl	80025d8 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e2c2      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fac:	4b8b      	ldr	r3, [pc, #556]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1f0      	bne.n	8005f9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0310 	and.w	r3, r3, #16
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 80a9 	beq.w	8006118 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fc6:	4b85      	ldr	r3, [pc, #532]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fd0:	4b82      	ldr	r3, [pc, #520]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8005fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d007      	beq.n	8005fec <HAL_RCC_OscConfig+0x308>
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	2b18      	cmp	r3, #24
 8005fe0:	d13a      	bne.n	8006058 <HAL_RCC_OscConfig+0x374>
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f003 0303 	and.w	r3, r3, #3
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d135      	bne.n	8006058 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005fec:	4b7b      	ldr	r3, [pc, #492]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_RCC_OscConfig+0x320>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	69db      	ldr	r3, [r3, #28]
 8005ffc:	2b80      	cmp	r3, #128	; 0x80
 8005ffe:	d001      	beq.n	8006004 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e296      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006004:	f7fc fb18 	bl	8002638 <HAL_GetREVID>
 8006008:	4603      	mov	r3, r0
 800600a:	f241 0203 	movw	r2, #4099	; 0x1003
 800600e:	4293      	cmp	r3, r2
 8006010:	d817      	bhi.n	8006042 <HAL_RCC_OscConfig+0x35e>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	2b20      	cmp	r3, #32
 8006018:	d108      	bne.n	800602c <HAL_RCC_OscConfig+0x348>
 800601a:	4b70      	ldr	r3, [pc, #448]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006022:	4a6e      	ldr	r2, [pc, #440]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006028:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800602a:	e075      	b.n	8006118 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800602c:	4b6b      	ldr	r3, [pc, #428]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	069b      	lsls	r3, r3, #26
 800603a:	4968      	ldr	r1, [pc, #416]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 800603c:	4313      	orrs	r3, r2
 800603e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006040:	e06a      	b.n	8006118 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006042:	4b66      	ldr	r3, [pc, #408]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a1b      	ldr	r3, [r3, #32]
 800604e:	061b      	lsls	r3, r3, #24
 8006050:	4962      	ldr	r1, [pc, #392]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006052:	4313      	orrs	r3, r2
 8006054:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006056:	e05f      	b.n	8006118 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d042      	beq.n	80060e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006060:	4b5e      	ldr	r3, [pc, #376]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a5d      	ldr	r2, [pc, #372]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fc fab4 	bl	80025d8 <HAL_GetTick>
 8006070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006074:	f7fc fab0 	bl	80025d8 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e255      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006086:	4b55      	ldr	r3, [pc, #340]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006092:	f7fc fad1 	bl	8002638 <HAL_GetREVID>
 8006096:	4603      	mov	r3, r0
 8006098:	f241 0203 	movw	r2, #4099	; 0x1003
 800609c:	4293      	cmp	r3, r2
 800609e:	d817      	bhi.n	80060d0 <HAL_RCC_OscConfig+0x3ec>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6a1b      	ldr	r3, [r3, #32]
 80060a4:	2b20      	cmp	r3, #32
 80060a6:	d108      	bne.n	80060ba <HAL_RCC_OscConfig+0x3d6>
 80060a8:	4b4c      	ldr	r3, [pc, #304]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80060b0:	4a4a      	ldr	r2, [pc, #296]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80060b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060b6:	6053      	str	r3, [r2, #4]
 80060b8:	e02e      	b.n	8006118 <HAL_RCC_OscConfig+0x434>
 80060ba:	4b48      	ldr	r3, [pc, #288]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	069b      	lsls	r3, r3, #26
 80060c8:	4944      	ldr	r1, [pc, #272]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	604b      	str	r3, [r1, #4]
 80060ce:	e023      	b.n	8006118 <HAL_RCC_OscConfig+0x434>
 80060d0:	4b42      	ldr	r3, [pc, #264]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a1b      	ldr	r3, [r3, #32]
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	493f      	ldr	r1, [pc, #252]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	60cb      	str	r3, [r1, #12]
 80060e4:	e018      	b.n	8006118 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060e6:	4b3d      	ldr	r3, [pc, #244]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3c      	ldr	r2, [pc, #240]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80060ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060f2:	f7fc fa71 	bl	80025d8 <HAL_GetTick>
 80060f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80060fa:	f7fc fa6d 	bl	80025d8 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e212      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800610c:	4b33      	ldr	r3, [pc, #204]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f0      	bne.n	80060fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 0308 	and.w	r3, r3, #8
 8006120:	2b00      	cmp	r3, #0
 8006122:	d036      	beq.n	8006192 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	695b      	ldr	r3, [r3, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d019      	beq.n	8006160 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800612c:	4b2b      	ldr	r3, [pc, #172]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 800612e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006130:	4a2a      	ldr	r2, [pc, #168]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006132:	f043 0301 	orr.w	r3, r3, #1
 8006136:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006138:	f7fc fa4e 	bl	80025d8 <HAL_GetTick>
 800613c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800613e:	e008      	b.n	8006152 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006140:	f7fc fa4a 	bl	80025d8 <HAL_GetTick>
 8006144:	4602      	mov	r2, r0
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	1ad3      	subs	r3, r2, r3
 800614a:	2b02      	cmp	r3, #2
 800614c:	d901      	bls.n	8006152 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e1ef      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006152:	4b22      	ldr	r3, [pc, #136]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d0f0      	beq.n	8006140 <HAL_RCC_OscConfig+0x45c>
 800615e:	e018      	b.n	8006192 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006164:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006166:	f023 0301 	bic.w	r3, r3, #1
 800616a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800616c:	f7fc fa34 	bl	80025d8 <HAL_GetTick>
 8006170:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006174:	f7fc fa30 	bl	80025d8 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e1d5      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006186:	4b15      	ldr	r3, [pc, #84]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 8006188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0320 	and.w	r3, r3, #32
 800619a:	2b00      	cmp	r3, #0
 800619c:	d039      	beq.n	8006212 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d01c      	beq.n	80061e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061a6:	4b0d      	ldr	r3, [pc, #52]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a0c      	ldr	r2, [pc, #48]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80061ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061b2:	f7fc fa11 	bl	80025d8 <HAL_GetTick>
 80061b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061b8:	e008      	b.n	80061cc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061ba:	f7fc fa0d 	bl	80025d8 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e1b2      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061cc:	4b03      	ldr	r3, [pc, #12]	; (80061dc <HAL_RCC_OscConfig+0x4f8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <HAL_RCC_OscConfig+0x4d6>
 80061d8:	e01b      	b.n	8006212 <HAL_RCC_OscConfig+0x52e>
 80061da:	bf00      	nop
 80061dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061e0:	4b9b      	ldr	r3, [pc, #620]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a9a      	ldr	r2, [pc, #616]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80061e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061ec:	f7fc f9f4 	bl	80025d8 <HAL_GetTick>
 80061f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80061f4:	f7fc f9f0 	bl	80025d8 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e195      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006206:	4b92      	ldr	r3, [pc, #584]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1f0      	bne.n	80061f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0304 	and.w	r3, r3, #4
 800621a:	2b00      	cmp	r3, #0
 800621c:	f000 8081 	beq.w	8006322 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006220:	4b8c      	ldr	r3, [pc, #560]	; (8006454 <HAL_RCC_OscConfig+0x770>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a8b      	ldr	r2, [pc, #556]	; (8006454 <HAL_RCC_OscConfig+0x770>)
 8006226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800622a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800622c:	f7fc f9d4 	bl	80025d8 <HAL_GetTick>
 8006230:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006232:	e008      	b.n	8006246 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006234:	f7fc f9d0 	bl	80025d8 <HAL_GetTick>
 8006238:	4602      	mov	r2, r0
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	1ad3      	subs	r3, r2, r3
 800623e:	2b64      	cmp	r3, #100	; 0x64
 8006240:	d901      	bls.n	8006246 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006242:	2303      	movs	r3, #3
 8006244:	e175      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006246:	4b83      	ldr	r3, [pc, #524]	; (8006454 <HAL_RCC_OscConfig+0x770>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f0      	beq.n	8006234 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d106      	bne.n	8006268 <HAL_RCC_OscConfig+0x584>
 800625a:	4b7d      	ldr	r3, [pc, #500]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800625c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625e:	4a7c      	ldr	r2, [pc, #496]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006260:	f043 0301 	orr.w	r3, r3, #1
 8006264:	6713      	str	r3, [r2, #112]	; 0x70
 8006266:	e02d      	b.n	80062c4 <HAL_RCC_OscConfig+0x5e0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10c      	bne.n	800628a <HAL_RCC_OscConfig+0x5a6>
 8006270:	4b77      	ldr	r3, [pc, #476]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006274:	4a76      	ldr	r2, [pc, #472]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006276:	f023 0301 	bic.w	r3, r3, #1
 800627a:	6713      	str	r3, [r2, #112]	; 0x70
 800627c:	4b74      	ldr	r3, [pc, #464]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4a73      	ldr	r2, [pc, #460]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006282:	f023 0304 	bic.w	r3, r3, #4
 8006286:	6713      	str	r3, [r2, #112]	; 0x70
 8006288:	e01c      	b.n	80062c4 <HAL_RCC_OscConfig+0x5e0>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b05      	cmp	r3, #5
 8006290:	d10c      	bne.n	80062ac <HAL_RCC_OscConfig+0x5c8>
 8006292:	4b6f      	ldr	r3, [pc, #444]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006296:	4a6e      	ldr	r2, [pc, #440]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006298:	f043 0304 	orr.w	r3, r3, #4
 800629c:	6713      	str	r3, [r2, #112]	; 0x70
 800629e:	4b6c      	ldr	r3, [pc, #432]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80062a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062a2:	4a6b      	ldr	r2, [pc, #428]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	6713      	str	r3, [r2, #112]	; 0x70
 80062aa:	e00b      	b.n	80062c4 <HAL_RCC_OscConfig+0x5e0>
 80062ac:	4b68      	ldr	r3, [pc, #416]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80062ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b0:	4a67      	ldr	r2, [pc, #412]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80062b2:	f023 0301 	bic.w	r3, r3, #1
 80062b6:	6713      	str	r3, [r2, #112]	; 0x70
 80062b8:	4b65      	ldr	r3, [pc, #404]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80062ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062bc:	4a64      	ldr	r2, [pc, #400]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80062be:	f023 0304 	bic.w	r3, r3, #4
 80062c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062cc:	f7fc f984 	bl	80025d8 <HAL_GetTick>
 80062d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062d2:	e00a      	b.n	80062ea <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062d4:	f7fc f980 	bl	80025d8 <HAL_GetTick>
 80062d8:	4602      	mov	r2, r0
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	f241 3288 	movw	r2, #5000	; 0x1388
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e123      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062ea:	4b59      	ldr	r3, [pc, #356]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80062ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d0ee      	beq.n	80062d4 <HAL_RCC_OscConfig+0x5f0>
 80062f6:	e014      	b.n	8006322 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062f8:	f7fc f96e 	bl	80025d8 <HAL_GetTick>
 80062fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80062fe:	e00a      	b.n	8006316 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006300:	f7fc f96a 	bl	80025d8 <HAL_GetTick>
 8006304:	4602      	mov	r2, r0
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	f241 3288 	movw	r2, #5000	; 0x1388
 800630e:	4293      	cmp	r3, r2
 8006310:	d901      	bls.n	8006316 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006312:	2303      	movs	r3, #3
 8006314:	e10d      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006316:	4b4e      	ldr	r3, [pc, #312]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800631a:	f003 0302 	and.w	r3, r3, #2
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1ee      	bne.n	8006300 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006326:	2b00      	cmp	r3, #0
 8006328:	f000 8102 	beq.w	8006530 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800632c:	4b48      	ldr	r3, [pc, #288]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800632e:	691b      	ldr	r3, [r3, #16]
 8006330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006334:	2b18      	cmp	r3, #24
 8006336:	f000 80bd 	beq.w	80064b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b02      	cmp	r3, #2
 8006340:	f040 809e 	bne.w	8006480 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006344:	4b42      	ldr	r3, [pc, #264]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a41      	ldr	r2, [pc, #260]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800634a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800634e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fc f942 	bl	80025d8 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006358:	f7fc f93e 	bl	80025d8 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e0e3      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800636a:	4b39      	ldr	r3, [pc, #228]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f0      	bne.n	8006358 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006376:	4b36      	ldr	r3, [pc, #216]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800637a:	4b37      	ldr	r3, [pc, #220]	; (8006458 <HAL_RCC_OscConfig+0x774>)
 800637c:	4013      	ands	r3, r2
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006386:	0112      	lsls	r2, r2, #4
 8006388:	430a      	orrs	r2, r1
 800638a:	4931      	ldr	r1, [pc, #196]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800638c:	4313      	orrs	r3, r2
 800638e:	628b      	str	r3, [r1, #40]	; 0x28
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006394:	3b01      	subs	r3, #1
 8006396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	3b01      	subs	r3, #1
 80063a0:	025b      	lsls	r3, r3, #9
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	3b01      	subs	r3, #1
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80063b2:	431a      	orrs	r2, r3
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b8:	3b01      	subs	r3, #1
 80063ba:	061b      	lsls	r3, r3, #24
 80063bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80063c0:	4923      	ldr	r1, [pc, #140]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80063c6:	4b22      	ldr	r3, [pc, #136]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	4a21      	ldr	r2, [pc, #132]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80063cc:	f023 0301 	bic.w	r3, r3, #1
 80063d0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063d2:	4b1f      	ldr	r3, [pc, #124]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80063d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063d6:	4b21      	ldr	r3, [pc, #132]	; (800645c <HAL_RCC_OscConfig+0x778>)
 80063d8:	4013      	ands	r3, r2
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063de:	00d2      	lsls	r2, r2, #3
 80063e0:	491b      	ldr	r1, [pc, #108]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063e6:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	f023 020c 	bic.w	r2, r3, #12
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	4917      	ldr	r1, [pc, #92]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80063f8:	4b15      	ldr	r3, [pc, #84]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 80063fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fc:	f023 0202 	bic.w	r2, r3, #2
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006404:	4912      	ldr	r1, [pc, #72]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006406:	4313      	orrs	r3, r2
 8006408:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800640a:	4b11      	ldr	r3, [pc, #68]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	4a10      	ldr	r2, [pc, #64]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006414:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006416:	4b0e      	ldr	r3, [pc, #56]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641a:	4a0d      	ldr	r2, [pc, #52]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800641c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006420:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800642c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	4a07      	ldr	r2, [pc, #28]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006434:	f043 0301 	orr.w	r3, r3, #1
 8006438:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a04      	ldr	r2, [pc, #16]	; (8006450 <HAL_RCC_OscConfig+0x76c>)
 8006440:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006446:	f7fc f8c7 	bl	80025d8 <HAL_GetTick>
 800644a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800644c:	e011      	b.n	8006472 <HAL_RCC_OscConfig+0x78e>
 800644e:	bf00      	nop
 8006450:	58024400 	.word	0x58024400
 8006454:	58024800 	.word	0x58024800
 8006458:	fffffc0c 	.word	0xfffffc0c
 800645c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006460:	f7fc f8ba 	bl	80025d8 <HAL_GetTick>
 8006464:	4602      	mov	r2, r0
 8006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b02      	cmp	r3, #2
 800646c:	d901      	bls.n	8006472 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e05f      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006472:	4b32      	ldr	r3, [pc, #200]	; (800653c <HAL_RCC_OscConfig+0x858>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0f0      	beq.n	8006460 <HAL_RCC_OscConfig+0x77c>
 800647e:	e057      	b.n	8006530 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006480:	4b2e      	ldr	r3, [pc, #184]	; (800653c <HAL_RCC_OscConfig+0x858>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a2d      	ldr	r2, [pc, #180]	; (800653c <HAL_RCC_OscConfig+0x858>)
 8006486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800648a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800648c:	f7fc f8a4 	bl	80025d8 <HAL_GetTick>
 8006490:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006492:	e008      	b.n	80064a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006494:	f7fc f8a0 	bl	80025d8 <HAL_GetTick>
 8006498:	4602      	mov	r2, r0
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	2b02      	cmp	r3, #2
 80064a0:	d901      	bls.n	80064a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064a2:	2303      	movs	r3, #3
 80064a4:	e045      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a6:	4b25      	ldr	r3, [pc, #148]	; (800653c <HAL_RCC_OscConfig+0x858>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f0      	bne.n	8006494 <HAL_RCC_OscConfig+0x7b0>
 80064b2:	e03d      	b.n	8006530 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064b4:	4b21      	ldr	r3, [pc, #132]	; (800653c <HAL_RCC_OscConfig+0x858>)
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064ba:	4b20      	ldr	r3, [pc, #128]	; (800653c <HAL_RCC_OscConfig+0x858>)
 80064bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064be:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d031      	beq.n	800652c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f003 0203 	and.w	r2, r3, #3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d12a      	bne.n	800652c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	091b      	lsrs	r3, r3, #4
 80064da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d122      	bne.n	800652c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d11a      	bne.n	800652c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	0a5b      	lsrs	r3, r3, #9
 80064fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006502:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006504:	429a      	cmp	r2, r3
 8006506:	d111      	bne.n	800652c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	0c1b      	lsrs	r3, r3, #16
 800650c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006514:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006516:	429a      	cmp	r2, r3
 8006518:	d108      	bne.n	800652c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	0e1b      	lsrs	r3, r3, #24
 800651e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006526:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006528:	429a      	cmp	r2, r3
 800652a:	d001      	beq.n	8006530 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	e000      	b.n	8006532 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3730      	adds	r7, #48	; 0x30
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	58024400 	.word	0x58024400

08006540 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d101      	bne.n	8006554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e19c      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006554:	4b8a      	ldr	r3, [pc, #552]	; (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f003 030f 	and.w	r3, r3, #15
 800655c:	683a      	ldr	r2, [r7, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d910      	bls.n	8006584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006562:	4b87      	ldr	r3, [pc, #540]	; (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f023 020f 	bic.w	r2, r3, #15
 800656a:	4985      	ldr	r1, [pc, #532]	; (8006780 <HAL_RCC_ClockConfig+0x240>)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	4313      	orrs	r3, r2
 8006570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006572:	4b83      	ldr	r3, [pc, #524]	; (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 030f 	and.w	r3, r3, #15
 800657a:	683a      	ldr	r2, [r7, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d001      	beq.n	8006584 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	e184      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0304 	and.w	r3, r3, #4
 800658c:	2b00      	cmp	r3, #0
 800658e:	d010      	beq.n	80065b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	4b7b      	ldr	r3, [pc, #492]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800659c:	429a      	cmp	r2, r3
 800659e:	d908      	bls.n	80065b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80065a0:	4b78      	ldr	r3, [pc, #480]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	4975      	ldr	r1, [pc, #468]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065ae:	4313      	orrs	r3, r2
 80065b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0308 	and.w	r3, r3, #8
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d010      	beq.n	80065e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	695a      	ldr	r2, [r3, #20]
 80065c2:	4b70      	ldr	r3, [pc, #448]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065c4:	69db      	ldr	r3, [r3, #28]
 80065c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d908      	bls.n	80065e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80065ce:	4b6d      	ldr	r3, [pc, #436]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065d0:	69db      	ldr	r3, [r3, #28]
 80065d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	496a      	ldr	r1, [pc, #424]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065dc:	4313      	orrs	r3, r2
 80065de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0310 	and.w	r3, r3, #16
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699a      	ldr	r2, [r3, #24]
 80065f0:	4b64      	ldr	r3, [pc, #400]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d908      	bls.n	800660e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80065fc:	4b61      	ldr	r3, [pc, #388]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80065fe:	69db      	ldr	r3, [r3, #28]
 8006600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	699b      	ldr	r3, [r3, #24]
 8006608:	495e      	ldr	r1, [pc, #376]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 800660a:	4313      	orrs	r3, r2
 800660c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0320 	and.w	r3, r3, #32
 8006616:	2b00      	cmp	r3, #0
 8006618:	d010      	beq.n	800663c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	69da      	ldr	r2, [r3, #28]
 800661e:	4b59      	ldr	r3, [pc, #356]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006626:	429a      	cmp	r2, r3
 8006628:	d908      	bls.n	800663c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800662a:	4b56      	ldr	r3, [pc, #344]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 800662c:	6a1b      	ldr	r3, [r3, #32]
 800662e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	69db      	ldr	r3, [r3, #28]
 8006636:	4953      	ldr	r1, [pc, #332]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006638:	4313      	orrs	r3, r2
 800663a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0302 	and.w	r3, r3, #2
 8006644:	2b00      	cmp	r3, #0
 8006646:	d010      	beq.n	800666a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68da      	ldr	r2, [r3, #12]
 800664c:	4b4d      	ldr	r3, [pc, #308]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 800664e:	699b      	ldr	r3, [r3, #24]
 8006650:	f003 030f 	and.w	r3, r3, #15
 8006654:	429a      	cmp	r2, r3
 8006656:	d908      	bls.n	800666a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006658:	4b4a      	ldr	r3, [pc, #296]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	f023 020f 	bic.w	r2, r3, #15
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	4947      	ldr	r1, [pc, #284]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006666:	4313      	orrs	r3, r2
 8006668:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0301 	and.w	r3, r3, #1
 8006672:	2b00      	cmp	r3, #0
 8006674:	d055      	beq.n	8006722 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006676:	4b43      	ldr	r3, [pc, #268]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006678:	699b      	ldr	r3, [r3, #24]
 800667a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	4940      	ldr	r1, [pc, #256]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006684:	4313      	orrs	r3, r2
 8006686:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	2b02      	cmp	r3, #2
 800668e:	d107      	bne.n	80066a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006690:	4b3c      	ldr	r3, [pc, #240]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d121      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e0f6      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d107      	bne.n	80066b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80066a8:	4b36      	ldr	r3, [pc, #216]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d115      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
 80066b6:	e0ea      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d107      	bne.n	80066d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80066c0:	4b30      	ldr	r3, [pc, #192]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d109      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e0de      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066d0:	4b2c      	ldr	r3, [pc, #176]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0304 	and.w	r3, r3, #4
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e0d6      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066e0:	4b28      	ldr	r3, [pc, #160]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066e2:	691b      	ldr	r3, [r3, #16]
 80066e4:	f023 0207 	bic.w	r2, r3, #7
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	4925      	ldr	r1, [pc, #148]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066f2:	f7fb ff71 	bl	80025d8 <HAL_GetTick>
 80066f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066f8:	e00a      	b.n	8006710 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066fa:	f7fb ff6d 	bl	80025d8 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	f241 3288 	movw	r2, #5000	; 0x1388
 8006708:	4293      	cmp	r3, r2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e0be      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006710:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	00db      	lsls	r3, r3, #3
 800671e:	429a      	cmp	r2, r3
 8006720:	d1eb      	bne.n	80066fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d010      	beq.n	8006750 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68da      	ldr	r2, [r3, #12]
 8006732:	4b14      	ldr	r3, [pc, #80]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	f003 030f 	and.w	r3, r3, #15
 800673a:	429a      	cmp	r2, r3
 800673c:	d208      	bcs.n	8006750 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800673e:	4b11      	ldr	r3, [pc, #68]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 8006740:	699b      	ldr	r3, [r3, #24]
 8006742:	f023 020f 	bic.w	r2, r3, #15
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	490e      	ldr	r1, [pc, #56]	; (8006784 <HAL_RCC_ClockConfig+0x244>)
 800674c:	4313      	orrs	r3, r2
 800674e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006750:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	683a      	ldr	r2, [r7, #0]
 800675a:	429a      	cmp	r2, r3
 800675c:	d214      	bcs.n	8006788 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800675e:	4b08      	ldr	r3, [pc, #32]	; (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f023 020f 	bic.w	r2, r3, #15
 8006766:	4906      	ldr	r1, [pc, #24]	; (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	4313      	orrs	r3, r2
 800676c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800676e:	4b04      	ldr	r3, [pc, #16]	; (8006780 <HAL_RCC_ClockConfig+0x240>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d005      	beq.n	8006788 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e086      	b.n	800688e <HAL_RCC_ClockConfig+0x34e>
 8006780:	52002000 	.word	0x52002000
 8006784:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0304 	and.w	r3, r3, #4
 8006790:	2b00      	cmp	r3, #0
 8006792:	d010      	beq.n	80067b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	691a      	ldr	r2, [r3, #16]
 8006798:	4b3f      	ldr	r3, [pc, #252]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067a0:	429a      	cmp	r2, r3
 80067a2:	d208      	bcs.n	80067b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067a4:	4b3c      	ldr	r3, [pc, #240]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	4939      	ldr	r1, [pc, #228]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067b2:	4313      	orrs	r3, r2
 80067b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0308 	and.w	r3, r3, #8
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d010      	beq.n	80067e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	695a      	ldr	r2, [r3, #20]
 80067c6:	4b34      	ldr	r3, [pc, #208]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d208      	bcs.n	80067e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067d2:	4b31      	ldr	r3, [pc, #196]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067d4:	69db      	ldr	r3, [r3, #28]
 80067d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	492e      	ldr	r1, [pc, #184]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 0310 	and.w	r3, r3, #16
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d010      	beq.n	8006812 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	699a      	ldr	r2, [r3, #24]
 80067f4:	4b28      	ldr	r3, [pc, #160]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d208      	bcs.n	8006812 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006800:	4b25      	ldr	r3, [pc, #148]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006802:	69db      	ldr	r3, [r3, #28]
 8006804:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	699b      	ldr	r3, [r3, #24]
 800680c:	4922      	ldr	r1, [pc, #136]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 800680e:	4313      	orrs	r3, r2
 8006810:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	2b00      	cmp	r3, #0
 800681c:	d010      	beq.n	8006840 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	69da      	ldr	r2, [r3, #28]
 8006822:	4b1d      	ldr	r3, [pc, #116]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800682a:	429a      	cmp	r2, r3
 800682c:	d208      	bcs.n	8006840 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800682e:	4b1a      	ldr	r3, [pc, #104]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	4917      	ldr	r1, [pc, #92]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 800683c:	4313      	orrs	r3, r2
 800683e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006840:	f000 f834 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 8006844:	4602      	mov	r2, r0
 8006846:	4b14      	ldr	r3, [pc, #80]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	0a1b      	lsrs	r3, r3, #8
 800684c:	f003 030f 	and.w	r3, r3, #15
 8006850:	4912      	ldr	r1, [pc, #72]	; (800689c <HAL_RCC_ClockConfig+0x35c>)
 8006852:	5ccb      	ldrb	r3, [r1, r3]
 8006854:	f003 031f 	and.w	r3, r3, #31
 8006858:	fa22 f303 	lsr.w	r3, r2, r3
 800685c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800685e:	4b0e      	ldr	r3, [pc, #56]	; (8006898 <HAL_RCC_ClockConfig+0x358>)
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	f003 030f 	and.w	r3, r3, #15
 8006866:	4a0d      	ldr	r2, [pc, #52]	; (800689c <HAL_RCC_ClockConfig+0x35c>)
 8006868:	5cd3      	ldrb	r3, [r2, r3]
 800686a:	f003 031f 	and.w	r3, r3, #31
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	fa22 f303 	lsr.w	r3, r2, r3
 8006874:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <HAL_RCC_ClockConfig+0x360>)
 8006876:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006878:	4a0a      	ldr	r2, [pc, #40]	; (80068a4 <HAL_RCC_ClockConfig+0x364>)
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800687e:	4b0a      	ldr	r3, [pc, #40]	; (80068a8 <HAL_RCC_ClockConfig+0x368>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4618      	mov	r0, r3
 8006884:	f7fb fe5e 	bl	8002544 <HAL_InitTick>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800688c:	7bfb      	ldrb	r3, [r7, #15]
}
 800688e:	4618      	mov	r0, r3
 8006890:	3718      	adds	r7, #24
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	58024400 	.word	0x58024400
 800689c:	0800abc4 	.word	0x0800abc4
 80068a0:	24000004 	.word	0x24000004
 80068a4:	24000000 	.word	0x24000000
 80068a8:	24000018 	.word	0x24000018

080068ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b089      	sub	sp, #36	; 0x24
 80068b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068b2:	4bb3      	ldr	r3, [pc, #716]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068ba:	2b18      	cmp	r3, #24
 80068bc:	f200 8155 	bhi.w	8006b6a <HAL_RCC_GetSysClockFreq+0x2be>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	0800692d 	.word	0x0800692d
 80068cc:	08006b6b 	.word	0x08006b6b
 80068d0:	08006b6b 	.word	0x08006b6b
 80068d4:	08006b6b 	.word	0x08006b6b
 80068d8:	08006b6b 	.word	0x08006b6b
 80068dc:	08006b6b 	.word	0x08006b6b
 80068e0:	08006b6b 	.word	0x08006b6b
 80068e4:	08006b6b 	.word	0x08006b6b
 80068e8:	08006953 	.word	0x08006953
 80068ec:	08006b6b 	.word	0x08006b6b
 80068f0:	08006b6b 	.word	0x08006b6b
 80068f4:	08006b6b 	.word	0x08006b6b
 80068f8:	08006b6b 	.word	0x08006b6b
 80068fc:	08006b6b 	.word	0x08006b6b
 8006900:	08006b6b 	.word	0x08006b6b
 8006904:	08006b6b 	.word	0x08006b6b
 8006908:	08006959 	.word	0x08006959
 800690c:	08006b6b 	.word	0x08006b6b
 8006910:	08006b6b 	.word	0x08006b6b
 8006914:	08006b6b 	.word	0x08006b6b
 8006918:	08006b6b 	.word	0x08006b6b
 800691c:	08006b6b 	.word	0x08006b6b
 8006920:	08006b6b 	.word	0x08006b6b
 8006924:	08006b6b 	.word	0x08006b6b
 8006928:	0800695f 	.word	0x0800695f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800692c:	4b94      	ldr	r3, [pc, #592]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0320 	and.w	r3, r3, #32
 8006934:	2b00      	cmp	r3, #0
 8006936:	d009      	beq.n	800694c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006938:	4b91      	ldr	r3, [pc, #580]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	08db      	lsrs	r3, r3, #3
 800693e:	f003 0303 	and.w	r3, r3, #3
 8006942:	4a90      	ldr	r2, [pc, #576]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
 8006948:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800694a:	e111      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800694c:	4b8d      	ldr	r3, [pc, #564]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800694e:	61bb      	str	r3, [r7, #24]
    break;
 8006950:	e10e      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006952:	4b8d      	ldr	r3, [pc, #564]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006954:	61bb      	str	r3, [r7, #24]
    break;
 8006956:	e10b      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006958:	4b8c      	ldr	r3, [pc, #560]	; (8006b8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800695a:	61bb      	str	r3, [r7, #24]
    break;
 800695c:	e108      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800695e:	4b88      	ldr	r3, [pc, #544]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006968:	4b85      	ldr	r3, [pc, #532]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800696a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696c:	091b      	lsrs	r3, r3, #4
 800696e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006972:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006974:	4b82      	ldr	r3, [pc, #520]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800697e:	4b80      	ldr	r3, [pc, #512]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006980:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006982:	08db      	lsrs	r3, r3, #3
 8006984:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	fb02 f303 	mul.w	r3, r2, r3
 800698e:	ee07 3a90 	vmov	s15, r3
 8006992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006996:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f000 80e1 	beq.w	8006b64 <HAL_RCC_GetSysClockFreq+0x2b8>
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	f000 8083 	beq.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x204>
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	f200 80a1 	bhi.w	8006af4 <HAL_RCC_GetSysClockFreq+0x248>
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d003      	beq.n	80069c0 <HAL_RCC_GetSysClockFreq+0x114>
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d056      	beq.n	8006a6c <HAL_RCC_GetSysClockFreq+0x1c0>
 80069be:	e099      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c0:	4b6f      	ldr	r3, [pc, #444]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0320 	and.w	r3, r3, #32
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d02d      	beq.n	8006a28 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80069cc:	4b6c      	ldr	r3, [pc, #432]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	08db      	lsrs	r3, r3, #3
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	4a6b      	ldr	r2, [pc, #428]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069d8:	fa22 f303 	lsr.w	r3, r2, r3
 80069dc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	ee07 3a90 	vmov	s15, r3
 80069ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069f6:	4b62      	ldr	r3, [pc, #392]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006a26:	e087      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006b94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3a:	4b51      	ldr	r3, [pc, #324]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a6a:	e065      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006b98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a7e:	4b40      	ldr	r3, [pc, #256]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aae:	e043      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aba:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006b9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8006abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac2:	4b2f      	ldr	r3, [pc, #188]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad2:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af2:	e021      	b.n	8006b38 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006afe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006b98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b06:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b0e:	ee07 3a90 	vmov	s15, r3
 8006b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006b90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b36:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b3c:	0a5b      	lsrs	r3, r3, #9
 8006b3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b42:	3301      	adds	r3, #1
 8006b44:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	ee07 3a90 	vmov	s15, r3
 8006b4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006b50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b5c:	ee17 3a90 	vmov	r3, s15
 8006b60:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006b62:	e005      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006b64:	2300      	movs	r3, #0
 8006b66:	61bb      	str	r3, [r7, #24]
    break;
 8006b68:	e002      	b.n	8006b70 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8006b6a:	4b07      	ldr	r3, [pc, #28]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b6c:	61bb      	str	r3, [r7, #24]
    break;
 8006b6e:	bf00      	nop
  }

  return sysclockfreq;
 8006b70:	69bb      	ldr	r3, [r7, #24]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3724      	adds	r7, #36	; 0x24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	58024400 	.word	0x58024400
 8006b84:	03d09000 	.word	0x03d09000
 8006b88:	003d0900 	.word	0x003d0900
 8006b8c:	007a1200 	.word	0x007a1200
 8006b90:	46000000 	.word	0x46000000
 8006b94:	4c742400 	.word	0x4c742400
 8006b98:	4a742400 	.word	0x4a742400
 8006b9c:	4af42400 	.word	0x4af42400

08006ba0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ba6:	f7ff fe81 	bl	80068ac <HAL_RCC_GetSysClockFreq>
 8006baa:	4602      	mov	r2, r0
 8006bac:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	0a1b      	lsrs	r3, r3, #8
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	490f      	ldr	r1, [pc, #60]	; (8006bf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bb8:	5ccb      	ldrb	r3, [r1, r3]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006bc4:	4b0a      	ldr	r3, [pc, #40]	; (8006bf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	f003 030f 	and.w	r3, r3, #15
 8006bcc:	4a09      	ldr	r2, [pc, #36]	; (8006bf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006bce:	5cd3      	ldrb	r3, [r2, r3]
 8006bd0:	f003 031f 	and.w	r3, r3, #31
 8006bd4:	687a      	ldr	r2, [r7, #4]
 8006bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bda:	4a07      	ldr	r2, [pc, #28]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006bdc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006bde:	4a07      	ldr	r2, [pc, #28]	; (8006bfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006be4:	4b04      	ldr	r3, [pc, #16]	; (8006bf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8006be6:	681b      	ldr	r3, [r3, #0]
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	58024400 	.word	0x58024400
 8006bf4:	0800abc4 	.word	0x0800abc4
 8006bf8:	24000004 	.word	0x24000004
 8006bfc:	24000000 	.word	0x24000000

08006c00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c04:	f7ff ffcc 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	091b      	lsrs	r3, r3, #4
 8006c10:	f003 0307 	and.w	r3, r3, #7
 8006c14:	4904      	ldr	r1, [pc, #16]	; (8006c28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c16:	5ccb      	ldrb	r3, [r1, r3]
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	58024400 	.word	0x58024400
 8006c28:	0800abc4 	.word	0x0800abc4

08006c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c30:	f7ff ffb6 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8006c34:	4602      	mov	r2, r0
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	4904      	ldr	r1, [pc, #16]	; (8006c54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006c42:	5ccb      	ldrb	r3, [r1, r3]
 8006c44:	f003 031f 	and.w	r3, r3, #31
 8006c48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	58024400 	.word	0x58024400
 8006c54:	0800abc4 	.word	0x0800abc4

08006c58 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b086      	sub	sp, #24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006c60:	2300      	movs	r3, #0
 8006c62:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006c64:	2300      	movs	r3, #0
 8006c66:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d03f      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c7c:	d02a      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006c7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c82:	d824      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c88:	d018      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006c8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c8e:	d81e      	bhi.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d003      	beq.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006c94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c98:	d007      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006c9a:	e018      	b.n	8006cce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c9c:	4ba3      	ldr	r3, [pc, #652]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	4aa2      	ldr	r2, [pc, #648]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ca2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ca6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ca8:	e015      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	3304      	adds	r3, #4
 8006cae:	2102      	movs	r1, #2
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f001 f9d5 	bl	8008060 <RCCEx_PLL2_Config>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006cba:	e00c      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	3324      	adds	r3, #36	; 0x24
 8006cc0:	2102      	movs	r1, #2
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f001 fa7e 	bl	80081c4 <RCCEx_PLL3_Config>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006ccc:	e003      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8006cd2:	e000      	b.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006cd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cd6:	7dfb      	ldrb	r3, [r7, #23]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d109      	bne.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006cdc:	4b93      	ldr	r3, [pc, #588]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ce8:	4990      	ldr	r1, [pc, #576]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	650b      	str	r3, [r1, #80]	; 0x50
 8006cee:	e001      	b.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
 8006cf2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d03d      	beq.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d826      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006d08:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8006d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d0e:	bf00      	nop
 8006d10:	08006d25 	.word	0x08006d25
 8006d14:	08006d33 	.word	0x08006d33
 8006d18:	08006d45 	.word	0x08006d45
 8006d1c:	08006d5d 	.word	0x08006d5d
 8006d20:	08006d5d 	.word	0x08006d5d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d24:	4b81      	ldr	r3, [pc, #516]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d28:	4a80      	ldr	r2, [pc, #512]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d2e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d30:	e015      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3304      	adds	r3, #4
 8006d36:	2100      	movs	r1, #0
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f001 f991 	bl	8008060 <RCCEx_PLL2_Config>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d42:	e00c      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3324      	adds	r3, #36	; 0x24
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f001 fa3a 	bl	80081c4 <RCCEx_PLL3_Config>
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006d54:	e003      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5a:	e000      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006d5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d5e:	7dfb      	ldrb	r3, [r7, #23]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d109      	bne.n	8006d78 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006d64:	4b71      	ldr	r3, [pc, #452]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d68:	f023 0207 	bic.w	r2, r3, #7
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d70:	496e      	ldr	r1, [pc, #440]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006d72:	4313      	orrs	r3, r2
 8006d74:	650b      	str	r3, [r1, #80]	; 0x50
 8006d76:	e001      	b.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d042      	beq.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d90:	d02b      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d96:	d825      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006d98:	2bc0      	cmp	r3, #192	; 0xc0
 8006d9a:	d028      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006d9c:	2bc0      	cmp	r3, #192	; 0xc0
 8006d9e:	d821      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006da0:	2b80      	cmp	r3, #128	; 0x80
 8006da2:	d016      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006da4:	2b80      	cmp	r3, #128	; 0x80
 8006da6:	d81d      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006dac:	2b40      	cmp	r3, #64	; 0x40
 8006dae:	d007      	beq.n	8006dc0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006db0:	e018      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006db2:	4b5e      	ldr	r3, [pc, #376]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db6:	4a5d      	ldr	r2, [pc, #372]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dbc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dbe:	e017      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f001 f94a 	bl	8008060 <RCCEx_PLL2_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006dd0:	e00e      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3324      	adds	r3, #36	; 0x24
 8006dd6:	2100      	movs	r1, #0
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 f9f3 	bl	80081c4 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006de2:	e005      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
      break;
 8006de8:	e002      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006dea:	bf00      	nop
 8006dec:	e000      	b.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df0:	7dfb      	ldrb	r3, [r7, #23]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d109      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006df6:	4b4d      	ldr	r3, [pc, #308]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e02:	494a      	ldr	r1, [pc, #296]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e04:	4313      	orrs	r3, r2
 8006e06:	650b      	str	r3, [r1, #80]	; 0x50
 8006e08:	e001      	b.n	8006e0e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
 8006e0c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d049      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e24:	d030      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e2a:	d82a      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e2c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e30:	d02c      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006e32:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006e36:	d824      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e3c:	d018      	beq.n	8006e70 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006e3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e42:	d81e      	bhi.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d003      	beq.n	8006e50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006e48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e4c:	d007      	beq.n	8006e5e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006e4e:	e018      	b.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e50:	4b36      	ldr	r3, [pc, #216]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	4a35      	ldr	r2, [pc, #212]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e5a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e5c:	e017      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	3304      	adds	r3, #4
 8006e62:	2100      	movs	r1, #0
 8006e64:	4618      	mov	r0, r3
 8006e66:	f001 f8fb 	bl	8008060 <RCCEx_PLL2_Config>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006e6e:	e00e      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	3324      	adds	r3, #36	; 0x24
 8006e74:	2100      	movs	r1, #0
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f9a4 	bl	80081c4 <RCCEx_PLL3_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006e80:	e005      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	75fb      	strb	r3, [r7, #23]
      break;
 8006e86:	e002      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e8e:	7dfb      	ldrb	r3, [r7, #23]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e94:	4b25      	ldr	r3, [pc, #148]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e98:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ea2:	4922      	ldr	r1, [pc, #136]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	658b      	str	r3, [r1, #88]	; 0x58
 8006ea8:	e001      	b.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eaa:	7dfb      	ldrb	r3, [r7, #23]
 8006eac:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d04b      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ec4:	d030      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006eca:	d82a      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ecc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ed0:	d02e      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006ed2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006ed6:	d824      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006edc:	d018      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006ede:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ee2:	d81e      	bhi.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006eec:	d007      	beq.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006eee:	e018      	b.n	8006f22 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ef0:	4b0e      	ldr	r3, [pc, #56]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef4:	4a0d      	ldr	r2, [pc, #52]	; (8006f2c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006efa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006efc:	e019      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	3304      	adds	r3, #4
 8006f02:	2100      	movs	r1, #0
 8006f04:	4618      	mov	r0, r3
 8006f06:	f001 f8ab 	bl	8008060 <RCCEx_PLL2_Config>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006f0e:	e010      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3324      	adds	r3, #36	; 0x24
 8006f14:	2100      	movs	r1, #0
 8006f16:	4618      	mov	r0, r3
 8006f18:	f001 f954 	bl	80081c4 <RCCEx_PLL3_Config>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006f20:	e007      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	75fb      	strb	r3, [r7, #23]
      break;
 8006f26:	e004      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006f28:	bf00      	nop
 8006f2a:	e002      	b.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006f2c:	58024400 	.word	0x58024400
      break;
 8006f30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f32:	7dfb      	ldrb	r3, [r7, #23]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d10a      	bne.n	8006f4e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f38:	4b99      	ldr	r3, [pc, #612]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f3c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006f46:	4996      	ldr	r1, [pc, #600]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f4c:	e001      	b.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
 8006f50:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d032      	beq.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f62:	2b30      	cmp	r3, #48	; 0x30
 8006f64:	d01c      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8006f66:	2b30      	cmp	r3, #48	; 0x30
 8006f68:	d817      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	d00c      	beq.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006f6e:	2b20      	cmp	r3, #32
 8006f70:	d813      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d016      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8006f76:	2b10      	cmp	r3, #16
 8006f78:	d10f      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f7a:	4b89      	ldr	r3, [pc, #548]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7e:	4a88      	ldr	r2, [pc, #544]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f86:	e00e      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3304      	adds	r3, #4
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f001 f866 	bl	8008060 <RCCEx_PLL2_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006f98:	e005      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f9e:	e002      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006fa0:	bf00      	nop
 8006fa2:	e000      	b.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006fa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006fac:	4b7c      	ldr	r3, [pc, #496]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fb0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fb8:	4979      	ldr	r1, [pc, #484]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fbe:	e001      	b.n	8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc0:	7dfb      	ldrb	r3, [r7, #23]
 8006fc2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d047      	beq.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fd8:	d030      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006fda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006fde:	d82a      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006fe0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fe4:	d02c      	beq.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006fe6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006fea:	d824      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff0:	d018      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ff6:	d81e      	bhi.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d003      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006ffc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007000:	d007      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007002:	e018      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007004:	4b66      	ldr	r3, [pc, #408]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	4a65      	ldr	r2, [pc, #404]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800700a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800700e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007010:	e017      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	3304      	adds	r3, #4
 8007016:	2100      	movs	r1, #0
 8007018:	4618      	mov	r0, r3
 800701a:	f001 f821 	bl	8008060 <RCCEx_PLL2_Config>
 800701e:	4603      	mov	r3, r0
 8007020:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007022:	e00e      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3324      	adds	r3, #36	; 0x24
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f001 f8ca 	bl	80081c4 <RCCEx_PLL3_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007034:	e005      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	75fb      	strb	r3, [r7, #23]
      break;
 800703a:	e002      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800703c:	bf00      	nop
 800703e:	e000      	b.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007040:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d109      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007048:	4b55      	ldr	r3, [pc, #340]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007054:	4952      	ldr	r1, [pc, #328]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007056:	4313      	orrs	r3, r2
 8007058:	650b      	str	r3, [r1, #80]	; 0x50
 800705a:	e001      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007068:	2b00      	cmp	r3, #0
 800706a:	d049      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007074:	d02e      	beq.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007076:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800707a:	d828      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 800707c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007080:	d02a      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007082:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007086:	d822      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007088:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800708c:	d026      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800708e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007092:	d81c      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007098:	d010      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x464>
 800709a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800709e:	d816      	bhi.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x476>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d01d      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070a8:	d111      	bne.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	3304      	adds	r3, #4
 80070ae:	2101      	movs	r1, #1
 80070b0:	4618      	mov	r0, r3
 80070b2:	f000 ffd5 	bl	8008060 <RCCEx_PLL2_Config>
 80070b6:	4603      	mov	r3, r0
 80070b8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070ba:	e012      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	3324      	adds	r3, #36	; 0x24
 80070c0:	2101      	movs	r1, #1
 80070c2:	4618      	mov	r0, r3
 80070c4:	f001 f87e 	bl	80081c4 <RCCEx_PLL3_Config>
 80070c8:	4603      	mov	r3, r0
 80070ca:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80070cc:	e009      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	75fb      	strb	r3, [r7, #23]
      break;
 80070d2:	e006      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80070d4:	bf00      	nop
 80070d6:	e004      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80070d8:	bf00      	nop
 80070da:	e002      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80070dc:	bf00      	nop
 80070de:	e000      	b.n	80070e2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80070e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d109      	bne.n	80070fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80070e8:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070f4:	492a      	ldr	r1, [pc, #168]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80070f6:	4313      	orrs	r3, r2
 80070f8:	650b      	str	r3, [r1, #80]	; 0x50
 80070fa:	e001      	b.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fc:	7dfb      	ldrb	r3, [r7, #23]
 80070fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d04d      	beq.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007116:	d02e      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800711c:	d828      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800711e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007122:	d02a      	beq.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007124:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007128:	d822      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800712a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800712e:	d026      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007130:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007134:	d81c      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007136:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800713a:	d010      	beq.n	800715e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800713c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007140:	d816      	bhi.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007142:	2b00      	cmp	r3, #0
 8007144:	d01d      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800714a:	d111      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3304      	adds	r3, #4
 8007150:	2101      	movs	r1, #1
 8007152:	4618      	mov	r0, r3
 8007154:	f000 ff84 	bl	8008060 <RCCEx_PLL2_Config>
 8007158:	4603      	mov	r3, r0
 800715a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800715c:	e012      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3324      	adds	r3, #36	; 0x24
 8007162:	2101      	movs	r1, #1
 8007164:	4618      	mov	r0, r3
 8007166:	f001 f82d 	bl	80081c4 <RCCEx_PLL3_Config>
 800716a:	4603      	mov	r3, r0
 800716c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800716e:	e009      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	75fb      	strb	r3, [r7, #23]
      break;
 8007174:	e006      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007176:	bf00      	nop
 8007178:	e004      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800717a:	bf00      	nop
 800717c:	e002      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800717e:	bf00      	nop
 8007180:	e000      	b.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007182:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007184:	7dfb      	ldrb	r3, [r7, #23]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d10c      	bne.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800718a:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800718c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800718e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007198:	4901      	ldr	r1, [pc, #4]	; (80071a0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800719a:	4313      	orrs	r3, r2
 800719c:	658b      	str	r3, [r1, #88]	; 0x58
 800719e:	e003      	b.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80071a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
 80071a6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d02f      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071bc:	d00e      	beq.n	80071dc <HAL_RCCEx_PeriphCLKConfig+0x584>
 80071be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071c2:	d814      	bhi.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x596>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d015      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80071c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071cc:	d10f      	bne.n	80071ee <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071ce:	4baf      	ldr	r3, [pc, #700]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071d2:	4aae      	ldr	r2, [pc, #696]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071da:	e00c      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3304      	adds	r3, #4
 80071e0:	2101      	movs	r1, #1
 80071e2:	4618      	mov	r0, r3
 80071e4:	f000 ff3c 	bl	8008060 <RCCEx_PLL2_Config>
 80071e8:	4603      	mov	r3, r0
 80071ea:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80071ec:	e003      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	75fb      	strb	r3, [r7, #23]
      break;
 80071f2:	e000      	b.n	80071f6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80071f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d109      	bne.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80071fc:	4ba3      	ldr	r3, [pc, #652]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80071fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007200:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007208:	49a0      	ldr	r1, [pc, #640]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800720a:	4313      	orrs	r3, r2
 800720c:	650b      	str	r3, [r1, #80]	; 0x50
 800720e:	e001      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
 8007212:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d032      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007224:	2b03      	cmp	r3, #3
 8007226:	d81b      	bhi.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007228:	a201      	add	r2, pc, #4	; (adr r2, 8007230 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800722a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722e:	bf00      	nop
 8007230:	08007267 	.word	0x08007267
 8007234:	08007241 	.word	0x08007241
 8007238:	0800724f 	.word	0x0800724f
 800723c:	08007267 	.word	0x08007267
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007240:	4b92      	ldr	r3, [pc, #584]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	4a91      	ldr	r2, [pc, #580]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800724a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800724c:	e00c      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	3304      	adds	r3, #4
 8007252:	2102      	movs	r1, #2
 8007254:	4618      	mov	r0, r3
 8007256:	f000 ff03 	bl	8008060 <RCCEx_PLL2_Config>
 800725a:	4603      	mov	r3, r0
 800725c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800725e:	e003      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
      break;
 8007264:	e000      	b.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007266:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007268:	7dfb      	ldrb	r3, [r7, #23]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800726e:	4b87      	ldr	r3, [pc, #540]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007272:	f023 0203 	bic.w	r2, r3, #3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727a:	4984      	ldr	r1, [pc, #528]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800727c:	4313      	orrs	r3, r2
 800727e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007280:	e001      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8086 	beq.w	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007294:	4b7e      	ldr	r3, [pc, #504]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a7d      	ldr	r2, [pc, #500]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800729a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800729e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80072a0:	f7fb f99a 	bl	80025d8 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072a6:	e009      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a8:	f7fb f996 	bl	80025d8 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b64      	cmp	r3, #100	; 0x64
 80072b4:	d902      	bls.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	75fb      	strb	r3, [r7, #23]
        break;
 80072ba:	e005      	b.n	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80072bc:	4b74      	ldr	r3, [pc, #464]	; (8007490 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d0ef      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80072c8:	7dfb      	ldrb	r3, [r7, #23]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d166      	bne.n	800739c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80072ce:	4b6f      	ldr	r3, [pc, #444]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80072d8:	4053      	eors	r3, r2
 80072da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d013      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80072e2:	4b6a      	ldr	r3, [pc, #424]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ea:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072ec:	4b67      	ldr	r3, [pc, #412]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f0:	4a66      	ldr	r2, [pc, #408]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072f8:	4b64      	ldr	r3, [pc, #400]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072fc:	4a63      	ldr	r2, [pc, #396]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80072fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007302:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007304:	4a61      	ldr	r2, [pc, #388]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007314:	d115      	bne.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007316:	f7fb f95f 	bl	80025d8 <HAL_GetTick>
 800731a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800731c:	e00b      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800731e:	f7fb f95b 	bl	80025d8 <HAL_GetTick>
 8007322:	4602      	mov	r2, r0
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	f241 3288 	movw	r2, #5000	; 0x1388
 800732c:	4293      	cmp	r3, r2
 800732e:	d902      	bls.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	75fb      	strb	r3, [r7, #23]
            break;
 8007334:	e005      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007336:	4b55      	ldr	r3, [pc, #340]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800733a:	f003 0302 	and.w	r3, r3, #2
 800733e:	2b00      	cmp	r3, #0
 8007340:	d0ed      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007342:	7dfb      	ldrb	r3, [r7, #23]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d126      	bne.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800734e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007356:	d10d      	bne.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007358:	4b4c      	ldr	r3, [pc, #304]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007366:	0919      	lsrs	r1, r3, #4
 8007368:	4b4a      	ldr	r3, [pc, #296]	; (8007494 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800736a:	400b      	ands	r3, r1
 800736c:	4947      	ldr	r1, [pc, #284]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800736e:	4313      	orrs	r3, r2
 8007370:	610b      	str	r3, [r1, #16]
 8007372:	e005      	b.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007374:	4b45      	ldr	r3, [pc, #276]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	4a44      	ldr	r2, [pc, #272]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800737a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800737e:	6113      	str	r3, [r2, #16]
 8007380:	4b42      	ldr	r3, [pc, #264]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007382:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800738a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800738e:	493f      	ldr	r1, [pc, #252]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007390:	4313      	orrs	r3, r2
 8007392:	670b      	str	r3, [r1, #112]	; 0x70
 8007394:	e004      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
 8007398:	75bb      	strb	r3, [r7, #22]
 800739a:	e001      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0301 	and.w	r3, r3, #1
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 8085 	beq.w	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073b2:	2b28      	cmp	r3, #40	; 0x28
 80073b4:	d866      	bhi.n	8007484 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 80073b6:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <HAL_RCCEx_PeriphCLKConfig+0x764>)
 80073b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073bc:	08007499 	.word	0x08007499
 80073c0:	08007485 	.word	0x08007485
 80073c4:	08007485 	.word	0x08007485
 80073c8:	08007485 	.word	0x08007485
 80073cc:	08007485 	.word	0x08007485
 80073d0:	08007485 	.word	0x08007485
 80073d4:	08007485 	.word	0x08007485
 80073d8:	08007485 	.word	0x08007485
 80073dc:	08007461 	.word	0x08007461
 80073e0:	08007485 	.word	0x08007485
 80073e4:	08007485 	.word	0x08007485
 80073e8:	08007485 	.word	0x08007485
 80073ec:	08007485 	.word	0x08007485
 80073f0:	08007485 	.word	0x08007485
 80073f4:	08007485 	.word	0x08007485
 80073f8:	08007485 	.word	0x08007485
 80073fc:	08007473 	.word	0x08007473
 8007400:	08007485 	.word	0x08007485
 8007404:	08007485 	.word	0x08007485
 8007408:	08007485 	.word	0x08007485
 800740c:	08007485 	.word	0x08007485
 8007410:	08007485 	.word	0x08007485
 8007414:	08007485 	.word	0x08007485
 8007418:	08007485 	.word	0x08007485
 800741c:	08007499 	.word	0x08007499
 8007420:	08007485 	.word	0x08007485
 8007424:	08007485 	.word	0x08007485
 8007428:	08007485 	.word	0x08007485
 800742c:	08007485 	.word	0x08007485
 8007430:	08007485 	.word	0x08007485
 8007434:	08007485 	.word	0x08007485
 8007438:	08007485 	.word	0x08007485
 800743c:	08007499 	.word	0x08007499
 8007440:	08007485 	.word	0x08007485
 8007444:	08007485 	.word	0x08007485
 8007448:	08007485 	.word	0x08007485
 800744c:	08007485 	.word	0x08007485
 8007450:	08007485 	.word	0x08007485
 8007454:	08007485 	.word	0x08007485
 8007458:	08007485 	.word	0x08007485
 800745c:	08007499 	.word	0x08007499
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3304      	adds	r3, #4
 8007464:	2101      	movs	r1, #1
 8007466:	4618      	mov	r0, r3
 8007468:	f000 fdfa 	bl	8008060 <RCCEx_PLL2_Config>
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007470:	e013      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	3324      	adds	r3, #36	; 0x24
 8007476:	2101      	movs	r1, #1
 8007478:	4618      	mov	r0, r3
 800747a:	f000 fea3 	bl	80081c4 <RCCEx_PLL3_Config>
 800747e:	4603      	mov	r3, r0
 8007480:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007482:	e00a      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]
      break;
 8007488:	e007      	b.n	800749a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800748a:	bf00      	nop
 800748c:	58024400 	.word	0x58024400
 8007490:	58024800 	.word	0x58024800
 8007494:	00ffffcf 	.word	0x00ffffcf
      break;
 8007498:	bf00      	nop
    }

    if(ret == HAL_OK)
 800749a:	7dfb      	ldrb	r3, [r7, #23]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d109      	bne.n	80074b4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80074a0:	4b96      	ldr	r3, [pc, #600]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80074a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074ac:	4993      	ldr	r1, [pc, #588]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	654b      	str	r3, [r1, #84]	; 0x54
 80074b2:	e001      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074b4:	7dfb      	ldrb	r3, [r7, #23]
 80074b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d038      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074c8:	2b05      	cmp	r3, #5
 80074ca:	d821      	bhi.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80074cc:	a201      	add	r2, pc, #4	; (adr r2, 80074d4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80074ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d2:	bf00      	nop
 80074d4:	08007517 	.word	0x08007517
 80074d8:	080074ed 	.word	0x080074ed
 80074dc:	080074ff 	.word	0x080074ff
 80074e0:	08007517 	.word	0x08007517
 80074e4:	08007517 	.word	0x08007517
 80074e8:	08007517 	.word	0x08007517
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	3304      	adds	r3, #4
 80074f0:	2101      	movs	r1, #1
 80074f2:	4618      	mov	r0, r3
 80074f4:	f000 fdb4 	bl	8008060 <RCCEx_PLL2_Config>
 80074f8:	4603      	mov	r3, r0
 80074fa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80074fc:	e00c      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	3324      	adds	r3, #36	; 0x24
 8007502:	2101      	movs	r1, #1
 8007504:	4618      	mov	r0, r3
 8007506:	f000 fe5d 	bl	80081c4 <RCCEx_PLL3_Config>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800750e:	e003      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	75fb      	strb	r3, [r7, #23]
      break;
 8007514:	e000      	b.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007516:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800751e:	4b77      	ldr	r3, [pc, #476]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007522:	f023 0207 	bic.w	r2, r3, #7
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800752a:	4974      	ldr	r1, [pc, #464]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800752c:	4313      	orrs	r3, r2
 800752e:	654b      	str	r3, [r1, #84]	; 0x54
 8007530:	e001      	b.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0304 	and.w	r3, r3, #4
 800753e:	2b00      	cmp	r3, #0
 8007540:	d03a      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007548:	2b05      	cmp	r3, #5
 800754a:	d821      	bhi.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800754c:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007597 	.word	0x08007597
 8007558:	0800756d 	.word	0x0800756d
 800755c:	0800757f 	.word	0x0800757f
 8007560:	08007597 	.word	0x08007597
 8007564:	08007597 	.word	0x08007597
 8007568:	08007597 	.word	0x08007597
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	3304      	adds	r3, #4
 8007570:	2101      	movs	r1, #1
 8007572:	4618      	mov	r0, r3
 8007574:	f000 fd74 	bl	8008060 <RCCEx_PLL2_Config>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800757c:	e00c      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	3324      	adds	r3, #36	; 0x24
 8007582:	2101      	movs	r1, #1
 8007584:	4618      	mov	r0, r3
 8007586:	f000 fe1d 	bl	80081c4 <RCCEx_PLL3_Config>
 800758a:	4603      	mov	r3, r0
 800758c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800758e:	e003      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	75fb      	strb	r3, [r7, #23]
      break;
 8007594:	e000      	b.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007596:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d10a      	bne.n	80075b4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800759e:	4b57      	ldr	r3, [pc, #348]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80075a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075a2:	f023 0207 	bic.w	r2, r3, #7
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ac:	4953      	ldr	r1, [pc, #332]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80075ae:	4313      	orrs	r3, r2
 80075b0:	658b      	str	r3, [r1, #88]	; 0x58
 80075b2:	e001      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b4:	7dfb      	ldrb	r3, [r7, #23]
 80075b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0320 	and.w	r3, r3, #32
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d04b      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075ce:	d02e      	beq.n	800762e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80075d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80075d4:	d828      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075da:	d02a      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80075dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075e0:	d822      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075e6:	d026      	beq.n	8007636 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80075e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80075ec:	d81c      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f2:	d010      	beq.n	8007616 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80075f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075f8:	d816      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d01d      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80075fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007602:	d111      	bne.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	3304      	adds	r3, #4
 8007608:	2100      	movs	r1, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fd28 	bl	8008060 <RCCEx_PLL2_Config>
 8007610:	4603      	mov	r3, r0
 8007612:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007614:	e012      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	3324      	adds	r3, #36	; 0x24
 800761a:	2102      	movs	r1, #2
 800761c:	4618      	mov	r0, r3
 800761e:	f000 fdd1 	bl	80081c4 <RCCEx_PLL3_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007626:	e009      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	75fb      	strb	r3, [r7, #23]
      break;
 800762c:	e006      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800762e:	bf00      	nop
 8007630:	e004      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007632:	bf00      	nop
 8007634:	e002      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007636:	bf00      	nop
 8007638:	e000      	b.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800763a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007642:	4b2e      	ldr	r3, [pc, #184]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007646:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007650:	492a      	ldr	r1, [pc, #168]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007652:	4313      	orrs	r3, r2
 8007654:	654b      	str	r3, [r1, #84]	; 0x54
 8007656:	e001      	b.n	800765c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007658:	7dfb      	ldrb	r3, [r7, #23]
 800765a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007664:	2b00      	cmp	r3, #0
 8007666:	d04d      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800766e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007672:	d02e      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8007674:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007678:	d828      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800767a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767e:	d02a      	beq.n	80076d6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007684:	d822      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007686:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800768a:	d026      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800768c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007690:	d81c      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007692:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007696:	d010      	beq.n	80076ba <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8007698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800769c:	d816      	bhi.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01d      	beq.n	80076de <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80076a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a6:	d111      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	3304      	adds	r3, #4
 80076ac:	2100      	movs	r1, #0
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fcd6 	bl	8008060 <RCCEx_PLL2_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076b8:	e012      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3324      	adds	r3, #36	; 0x24
 80076be:	2102      	movs	r1, #2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f000 fd7f 	bl	80081c4 <RCCEx_PLL3_Config>
 80076c6:	4603      	mov	r3, r0
 80076c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80076ca:	e009      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076cc:	2301      	movs	r3, #1
 80076ce:	75fb      	strb	r3, [r7, #23]
      break;
 80076d0:	e006      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80076d2:	bf00      	nop
 80076d4:	e004      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80076d6:	bf00      	nop
 80076d8:	e002      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80076de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d10c      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80076e6:	4b05      	ldr	r3, [pc, #20]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ea:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076f4:	4901      	ldr	r1, [pc, #4]	; (80076fc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	658b      	str	r3, [r1, #88]	; 0x58
 80076fa:	e003      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80076fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770c:	2b00      	cmp	r3, #0
 800770e:	d04b      	beq.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007716:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800771a:	d02e      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800771c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007720:	d828      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007726:	d02a      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007728:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800772c:	d822      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800772e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007732:	d026      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007734:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007738:	d81c      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800773a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800773e:	d010      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007744:	d816      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007746:	2b00      	cmp	r3, #0
 8007748:	d01d      	beq.n	8007786 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800774a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774e:	d111      	bne.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f000 fc82 	bl	8008060 <RCCEx_PLL2_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007760:	e012      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3324      	adds	r3, #36	; 0x24
 8007766:	2102      	movs	r1, #2
 8007768:	4618      	mov	r0, r3
 800776a:	f000 fd2b 	bl	80081c4 <RCCEx_PLL3_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007772:	e009      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	75fb      	strb	r3, [r7, #23]
      break;
 8007778:	e006      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800777a:	bf00      	nop
 800777c:	e004      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800777e:	bf00      	nop
 8007780:	e002      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007782:	bf00      	nop
 8007784:	e000      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007786:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007788:	7dfb      	ldrb	r3, [r7, #23]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d10a      	bne.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800778e:	4b9d      	ldr	r3, [pc, #628]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800779c:	4999      	ldr	r1, [pc, #612]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	658b      	str	r3, [r1, #88]	; 0x58
 80077a2:	e001      	b.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 0308 	and.w	r3, r3, #8
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d01a      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077be:	d10a      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	3324      	adds	r3, #36	; 0x24
 80077c4:	2102      	movs	r1, #2
 80077c6:	4618      	mov	r0, r3
 80077c8:	f000 fcfc 	bl	80081c4 <RCCEx_PLL3_Config>
 80077cc:	4603      	mov	r3, r0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d001      	beq.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80077d2:	2301      	movs	r3, #1
 80077d4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80077d6:	4b8b      	ldr	r3, [pc, #556]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077da:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077e4:	4987      	ldr	r1, [pc, #540]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80077e6:	4313      	orrs	r3, r2
 80077e8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 0310 	and.w	r3, r3, #16
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d01a      	beq.n	800782c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007800:	d10a      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	3324      	adds	r3, #36	; 0x24
 8007806:	2102      	movs	r1, #2
 8007808:	4618      	mov	r0, r3
 800780a:	f000 fcdb 	bl	80081c4 <RCCEx_PLL3_Config>
 800780e:	4603      	mov	r3, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007818:	4b7a      	ldr	r3, [pc, #488]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800781a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007826:	4977      	ldr	r1, [pc, #476]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007828:	4313      	orrs	r3, r2
 800782a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d034      	beq.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800783e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007842:	d01d      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007848:	d817      	bhi.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800784a:	2b00      	cmp	r3, #0
 800784c:	d003      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800784e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007852:	d009      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007854:	e011      	b.n	800787a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	3304      	adds	r3, #4
 800785a:	2100      	movs	r1, #0
 800785c:	4618      	mov	r0, r3
 800785e:	f000 fbff 	bl	8008060 <RCCEx_PLL2_Config>
 8007862:	4603      	mov	r3, r0
 8007864:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007866:	e00c      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	3324      	adds	r3, #36	; 0x24
 800786c:	2102      	movs	r1, #2
 800786e:	4618      	mov	r0, r3
 8007870:	f000 fca8 	bl	80081c4 <RCCEx_PLL3_Config>
 8007874:	4603      	mov	r3, r0
 8007876:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007878:	e003      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	75fb      	strb	r3, [r7, #23]
      break;
 800787e:	e000      	b.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007882:	7dfb      	ldrb	r3, [r7, #23]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10a      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007888:	4b5e      	ldr	r3, [pc, #376]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800788a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800788c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007896:	495b      	ldr	r1, [pc, #364]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007898:	4313      	orrs	r3, r2
 800789a:	658b      	str	r3, [r1, #88]	; 0x58
 800789c:	e001      	b.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d033      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078b4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078b8:	d01c      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80078ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078be:	d816      	bhi.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80078c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078c4:	d003      	beq.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80078c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078ca:	d007      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80078cc:	e00f      	b.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078ce:	4b4d      	ldr	r3, [pc, #308]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	4a4c      	ldr	r2, [pc, #304]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078d8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80078da:	e00c      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	3324      	adds	r3, #36	; 0x24
 80078e0:	2101      	movs	r1, #1
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 fc6e 	bl	80081c4 <RCCEx_PLL3_Config>
 80078e8:	4603      	mov	r3, r0
 80078ea:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80078ec:	e003      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	75fb      	strb	r3, [r7, #23]
      break;
 80078f2:	e000      	b.n	80078f6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80078f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f6:	7dfb      	ldrb	r3, [r7, #23]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10a      	bne.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80078fc:	4b41      	ldr	r3, [pc, #260]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800790a:	493e      	ldr	r1, [pc, #248]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800790c:	4313      	orrs	r3, r2
 800790e:	654b      	str	r3, [r1, #84]	; 0x54
 8007910:	e001      	b.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007912:	7dfb      	ldrb	r3, [r7, #23]
 8007914:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d029      	beq.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d003      	beq.n	8007932 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800792a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800792e:	d007      	beq.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007930:	e00f      	b.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007932:	4b34      	ldr	r3, [pc, #208]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007936:	4a33      	ldr	r2, [pc, #204]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800793c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800793e:	e00b      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	3304      	adds	r3, #4
 8007944:	2102      	movs	r1, #2
 8007946:	4618      	mov	r0, r3
 8007948:	f000 fb8a 	bl	8008060 <RCCEx_PLL2_Config>
 800794c:	4603      	mov	r3, r0
 800794e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007950:	e002      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	75fb      	strb	r3, [r7, #23]
      break;
 8007956:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007958:	7dfb      	ldrb	r3, [r7, #23]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800795e:	4b29      	ldr	r3, [pc, #164]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007962:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800796a:	4926      	ldr	r1, [pc, #152]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800796c:	4313      	orrs	r3, r2
 800796e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007970:	e001      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	3324      	adds	r3, #36	; 0x24
 8007986:	2102      	movs	r1, #2
 8007988:	4618      	mov	r0, r3
 800798a:	f000 fc1b 	bl	80081c4 <RCCEx_PLL3_Config>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d001      	beq.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d033      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079ac:	d017      	beq.n	80079de <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80079ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b2:	d811      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80079b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079b8:	d013      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80079ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079be:	d80b      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d010      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80079c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079c8:	d106      	bne.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079ca:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ce:	4a0d      	ldr	r2, [pc, #52]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80079d6:	e007      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	75fb      	strb	r3, [r7, #23]
      break;
 80079dc:	e004      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80079de:	bf00      	nop
 80079e0:	e002      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80079e2:	bf00      	nop
 80079e4:	e000      	b.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80079e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d10c      	bne.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079ee:	4b05      	ldr	r3, [pc, #20]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079fa:	4902      	ldr	r1, [pc, #8]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80079fc:	4313      	orrs	r3, r2
 80079fe:	654b      	str	r3, [r1, #84]	; 0x54
 8007a00:	e004      	b.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007a02:	bf00      	nop
 8007a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a18:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a1c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a24:	492e      	ldr	r1, [pc, #184]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007a36:	4b2a      	ldr	r3, [pc, #168]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007a44:	4926      	ldr	r1, [pc, #152]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d008      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a56:	4b22      	ldr	r3, [pc, #136]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a5a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a62:	491f      	ldr	r1, [pc, #124]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a64:	4313      	orrs	r3, r2
 8007a66:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00d      	beq.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007a74:	4b1a      	ldr	r3, [pc, #104]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	4a19      	ldr	r2, [pc, #100]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a7e:	6113      	str	r3, [r2, #16]
 8007a80:	4b17      	ldr	r3, [pc, #92]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a82:	691a      	ldr	r2, [r3, #16]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007a8a:	4915      	ldr	r1, [pc, #84]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	da08      	bge.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007a98:	4b11      	ldr	r3, [pc, #68]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a9c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aa4:	490e      	ldr	r1, [pc, #56]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007aa6:	4313      	orrs	r3, r2
 8007aa8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d009      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ab6:	4b0a      	ldr	r3, [pc, #40]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007aba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac4:	4906      	ldr	r1, [pc, #24]	; (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007aca:	7dbb      	ldrb	r3, [r7, #22]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e000      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	58024400 	.word	0x58024400

08007ae4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ae8:	f7ff f85a 	bl	8006ba0 <HAL_RCC_GetHCLKFreq>
 8007aec:	4602      	mov	r2, r0
 8007aee:	4b06      	ldr	r3, [pc, #24]	; (8007b08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	091b      	lsrs	r3, r3, #4
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	4904      	ldr	r1, [pc, #16]	; (8007b0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007afa:	5ccb      	ldrb	r3, [r1, r3]
 8007afc:	f003 031f 	and.w	r3, r3, #31
 8007b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	0800abc4 	.word	0x0800abc4

08007b10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b089      	sub	sp, #36	; 0x24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b18:	4ba1      	ldr	r3, [pc, #644]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007b22:	4b9f      	ldr	r3, [pc, #636]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b26:	0b1b      	lsrs	r3, r3, #12
 8007b28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b2e:	4b9c      	ldr	r3, [pc, #624]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b32:	091b      	lsrs	r3, r3, #4
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007b3a:	4b99      	ldr	r3, [pc, #612]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b3e:	08db      	lsrs	r3, r3, #3
 8007b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	fb02 f303 	mul.w	r3, r2, r3
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8111 	beq.w	8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	f000 8083 	beq.w	8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	f200 80a1 	bhi.w	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d056      	beq.n	8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b7a:	e099      	b.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b7c:	4b88      	ldr	r3, [pc, #544]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d02d      	beq.n	8007be4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b88:	4b85      	ldr	r3, [pc, #532]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	08db      	lsrs	r3, r3, #3
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	4a84      	ldr	r2, [pc, #528]	; (8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
 8007b98:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	ee07 3a90 	vmov	s15, r3
 8007ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb2:	4b7b      	ldr	r3, [pc, #492]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc6:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bde:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007be2:	e087      	b.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bee:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf6:	4b6a      	ldr	r3, [pc, #424]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c26:	e065      	b.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3a:	4b59      	ldr	r3, [pc, #356]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c6a:	e043      	b.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7e:	4b48      	ldr	r3, [pc, #288]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c92:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007caa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cae:	e021      	b.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc2:	4b37      	ldr	r3, [pc, #220]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007cf4:	4b2a      	ldr	r3, [pc, #168]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	0a5b      	lsrs	r3, r3, #9
 8007cfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1a:	ee17 2a90 	vmov	r2, s15
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007d22:	4b1f      	ldr	r3, [pc, #124]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d26:	0c1b      	lsrs	r3, r3, #16
 8007d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d48:	ee17 2a90 	vmov	r2, s15
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007d50:	4b13      	ldr	r3, [pc, #76]	; (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	0e1b      	lsrs	r3, r3, #24
 8007d56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d76:	ee17 2a90 	vmov	r2, s15
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d7e:	e008      	b.n	8007d92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	609a      	str	r2, [r3, #8]
}
 8007d92:	bf00      	nop
 8007d94:	3724      	adds	r7, #36	; 0x24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	58024400 	.word	0x58024400
 8007da4:	03d09000 	.word	0x03d09000
 8007da8:	46000000 	.word	0x46000000
 8007dac:	4c742400 	.word	0x4c742400
 8007db0:	4a742400 	.word	0x4a742400
 8007db4:	4af42400 	.word	0x4af42400

08007db8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b089      	sub	sp, #36	; 0x24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dc0:	4ba1      	ldr	r3, [pc, #644]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007dca:	4b9f      	ldr	r3, [pc, #636]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dce:	0d1b      	lsrs	r3, r3, #20
 8007dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007dd6:	4b9c      	ldr	r3, [pc, #624]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007de2:	4b99      	ldr	r3, [pc, #612]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8111 	beq.w	8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	f000 8083 	beq.w	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	f200 80a1 	bhi.w	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d056      	beq.n	8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e22:	e099      	b.n	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e24:	4b88      	ldr	r3, [pc, #544]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d02d      	beq.n	8007e8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007e30:	4b85      	ldr	r3, [pc, #532]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	4a84      	ldr	r2, [pc, #528]	; (800804c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e40:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5a:	4b7b      	ldr	r3, [pc, #492]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007e8a:	e087      	b.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9e:	4b6a      	ldr	r3, [pc, #424]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ebe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007ece:	e065      	b.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee2:	4b59      	ldr	r3, [pc, #356]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f12:	e043      	b.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800805c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f26:	4b48      	ldr	r3, [pc, #288]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f56:	e021      	b.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6a:	4b37      	ldr	r3, [pc, #220]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007f9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007f9c:	4b2a      	ldr	r3, [pc, #168]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa0:	0a5b      	lsrs	r3, r3, #9
 8007fa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc2:	ee17 2a90 	vmov	r2, s15
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007fca:	4b1f      	ldr	r3, [pc, #124]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	0c1b      	lsrs	r3, r3, #16
 8007fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007fd4:	ee07 3a90 	vmov	s15, r3
 8007fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff0:	ee17 2a90 	vmov	r2, s15
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007ff8:	4b13      	ldr	r3, [pc, #76]	; (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffc:	0e1b      	lsrs	r3, r3, #24
 8007ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800800e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008012:	edd7 6a07 	vldr	s13, [r7, #28]
 8008016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800801a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801e:	ee17 2a90 	vmov	r2, s15
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008026:	e008      	b.n	800803a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	609a      	str	r2, [r3, #8]
}
 800803a:	bf00      	nop
 800803c:	3724      	adds	r7, #36	; 0x24
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	58024400 	.word	0x58024400
 800804c:	03d09000 	.word	0x03d09000
 8008050:	46000000 	.word	0x46000000
 8008054:	4c742400 	.word	0x4c742400
 8008058:	4a742400 	.word	0x4a742400
 800805c:	4af42400 	.word	0x4af42400

08008060 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800806e:	4b53      	ldr	r3, [pc, #332]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b03      	cmp	r3, #3
 8008078:	d101      	bne.n	800807e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e099      	b.n	80081b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800807e:	4b4f      	ldr	r3, [pc, #316]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a4e      	ldr	r2, [pc, #312]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008084:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800808a:	f7fa faa5 	bl	80025d8 <HAL_GetTick>
 800808e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008090:	e008      	b.n	80080a4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008092:	f7fa faa1 	bl	80025d8 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e086      	b.n	80081b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080a4:	4b45      	ldr	r3, [pc, #276]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f0      	bne.n	8008092 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080b0:	4b42      	ldr	r3, [pc, #264]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	031b      	lsls	r3, r3, #12
 80080be:	493f      	ldr	r1, [pc, #252]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	628b      	str	r3, [r1, #40]	; 0x28
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	025b      	lsls	r3, r3, #9
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	3b01      	subs	r3, #1
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80080f4:	4931      	ldr	r1, [pc, #196]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080fa:	4b30      	ldr	r3, [pc, #192]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	492d      	ldr	r1, [pc, #180]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008108:	4313      	orrs	r3, r2
 800810a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800810c:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 800810e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008110:	f023 0220 	bic.w	r2, r3, #32
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	4928      	ldr	r1, [pc, #160]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 800811a:	4313      	orrs	r3, r2
 800811c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800811e:	4b27      	ldr	r3, [pc, #156]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	4a26      	ldr	r2, [pc, #152]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008124:	f023 0310 	bic.w	r3, r3, #16
 8008128:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800812a:	4b24      	ldr	r3, [pc, #144]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 800812c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800812e:	4b24      	ldr	r3, [pc, #144]	; (80081c0 <RCCEx_PLL2_Config+0x160>)
 8008130:	4013      	ands	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	69d2      	ldr	r2, [r2, #28]
 8008136:	00d2      	lsls	r2, r2, #3
 8008138:	4920      	ldr	r1, [pc, #128]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 800813a:	4313      	orrs	r3, r2
 800813c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800813e:	4b1f      	ldr	r3, [pc, #124]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008142:	4a1e      	ldr	r2, [pc, #120]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008144:	f043 0310 	orr.w	r3, r3, #16
 8008148:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d106      	bne.n	800815e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008150:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008154:	4a19      	ldr	r2, [pc, #100]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008156:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800815a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800815c:	e00f      	b.n	800817e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d106      	bne.n	8008172 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008164:	4b15      	ldr	r3, [pc, #84]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008168:	4a14      	ldr	r2, [pc, #80]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 800816a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800816e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008170:	e005      	b.n	800817e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008172:	4b12      	ldr	r3, [pc, #72]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008176:	4a11      	ldr	r2, [pc, #68]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008178:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800817c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800817e:	4b0f      	ldr	r3, [pc, #60]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a0e      	ldr	r2, [pc, #56]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008184:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818a:	f7fa fa25 	bl	80025d8 <HAL_GetTick>
 800818e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008190:	e008      	b.n	80081a4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008192:	f7fa fa21 	bl	80025d8 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e006      	b.n	80081b2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081a4:	4b05      	ldr	r3, [pc, #20]	; (80081bc <RCCEx_PLL2_Config+0x15c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f0      	beq.n	8008192 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	ffff0007 	.word	0xffff0007

080081c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081d2:	4b53      	ldr	r3, [pc, #332]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80081d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d101      	bne.n	80081e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e099      	b.n	8008316 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80081e2:	4b4f      	ldr	r3, [pc, #316]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a4e      	ldr	r2, [pc, #312]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80081e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ee:	f7fa f9f3 	bl	80025d8 <HAL_GetTick>
 80081f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081f4:	e008      	b.n	8008208 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80081f6:	f7fa f9ef 	bl	80025d8 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e086      	b.n	8008316 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008208:	4b45      	ldr	r3, [pc, #276]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1f0      	bne.n	80081f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008214:	4b42      	ldr	r3, [pc, #264]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008218:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	051b      	lsls	r3, r3, #20
 8008222:	493f      	ldr	r1, [pc, #252]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008224:	4313      	orrs	r3, r2
 8008226:	628b      	str	r3, [r1, #40]	; 0x28
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	3b01      	subs	r3, #1
 800822e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	3b01      	subs	r3, #1
 8008238:	025b      	lsls	r3, r3, #9
 800823a:	b29b      	uxth	r3, r3
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	3b01      	subs	r3, #1
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	3b01      	subs	r3, #1
 8008252:	061b      	lsls	r3, r3, #24
 8008254:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008258:	4931      	ldr	r1, [pc, #196]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800825e:	4b30      	ldr	r3, [pc, #192]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008262:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	492d      	ldr	r1, [pc, #180]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 800826c:	4313      	orrs	r3, r2
 800826e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008270:	4b2b      	ldr	r3, [pc, #172]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	4928      	ldr	r1, [pc, #160]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 800827e:	4313      	orrs	r3, r2
 8008280:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008282:	4b27      	ldr	r3, [pc, #156]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008286:	4a26      	ldr	r2, [pc, #152]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800828c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800828e:	4b24      	ldr	r3, [pc, #144]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008292:	4b24      	ldr	r3, [pc, #144]	; (8008324 <RCCEx_PLL3_Config+0x160>)
 8008294:	4013      	ands	r3, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	69d2      	ldr	r2, [r2, #28]
 800829a:	00d2      	lsls	r2, r2, #3
 800829c:	4920      	ldr	r1, [pc, #128]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082a2:	4b1f      	ldr	r3, [pc, #124]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	4a1e      	ldr	r2, [pc, #120]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082b4:	4b1a      	ldr	r3, [pc, #104]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b8:	4a19      	ldr	r2, [pc, #100]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80082be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082c0:	e00f      	b.n	80082e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d106      	bne.n	80082d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082c8:	4b15      	ldr	r3, [pc, #84]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082cc:	4a14      	ldr	r2, [pc, #80]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80082d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80082d4:	e005      	b.n	80082e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082d6:	4b12      	ldr	r3, [pc, #72]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082da:	4a11      	ldr	r2, [pc, #68]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80082e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80082e2:	4b0f      	ldr	r3, [pc, #60]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a0e      	ldr	r2, [pc, #56]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ee:	f7fa f973 	bl	80025d8 <HAL_GetTick>
 80082f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082f4:	e008      	b.n	8008308 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80082f6:	f7fa f96f 	bl	80025d8 <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e006      	b.n	8008316 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008308:	4b05      	ldr	r3, [pc, #20]	; (8008320 <RCCEx_PLL3_Config+0x15c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0f0      	beq.n	80082f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	58024400 	.word	0x58024400
 8008324:	ffff0007 	.word	0xffff0007

08008328 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e0f1      	b.n	800851e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a78      	ldr	r2, [pc, #480]	; (8008528 <HAL_SPI_Init+0x200>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00f      	beq.n	800836a <HAL_SPI_Init+0x42>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a77      	ldr	r2, [pc, #476]	; (800852c <HAL_SPI_Init+0x204>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d00a      	beq.n	800836a <HAL_SPI_Init+0x42>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a75      	ldr	r2, [pc, #468]	; (8008530 <HAL_SPI_Init+0x208>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d005      	beq.n	800836a <HAL_SPI_Init+0x42>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	2b0f      	cmp	r3, #15
 8008364:	d901      	bls.n	800836a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008366:	2301      	movs	r3, #1
 8008368:	e0d9      	b.n	800851e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fba2 	bl	8008ab4 <SPI_GetPacketSize>
 8008370:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a6c      	ldr	r2, [pc, #432]	; (8008528 <HAL_SPI_Init+0x200>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00c      	beq.n	8008396 <HAL_SPI_Init+0x6e>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a6a      	ldr	r2, [pc, #424]	; (800852c <HAL_SPI_Init+0x204>)
 8008382:	4293      	cmp	r3, r2
 8008384:	d007      	beq.n	8008396 <HAL_SPI_Init+0x6e>
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	4a69      	ldr	r2, [pc, #420]	; (8008530 <HAL_SPI_Init+0x208>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d002      	beq.n	8008396 <HAL_SPI_Init+0x6e>
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	2b08      	cmp	r3, #8
 8008394:	d811      	bhi.n	80083ba <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800839a:	4a63      	ldr	r2, [pc, #396]	; (8008528 <HAL_SPI_Init+0x200>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d009      	beq.n	80083b4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a61      	ldr	r2, [pc, #388]	; (800852c <HAL_SPI_Init+0x204>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d004      	beq.n	80083b4 <HAL_SPI_Init+0x8c>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a60      	ldr	r2, [pc, #384]	; (8008530 <HAL_SPI_Init+0x208>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d104      	bne.n	80083be <HAL_SPI_Init+0x96>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b10      	cmp	r3, #16
 80083b8:	d901      	bls.n	80083be <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e0af      	b.n	800851e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f7f9 fe70 	bl	80020b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681a      	ldr	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0201 	bic.w	r2, r2, #1
 80083ee:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	689b      	ldr	r3, [r3, #8]
 80083f6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80083fa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008404:	d119      	bne.n	800843a <HAL_SPI_Init+0x112>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800840e:	d103      	bne.n	8008418 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008414:	2b00      	cmp	r3, #0
 8008416:	d008      	beq.n	800842a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800841c:	2b00      	cmp	r3, #0
 800841e:	d10c      	bne.n	800843a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008424:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008428:	d107      	bne.n	800843a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	681a      	ldr	r2, [r3, #0]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008438:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	69da      	ldr	r2, [r3, #28]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008442:	431a      	orrs	r2, r3
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	431a      	orrs	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800844c:	ea42 0103 	orr.w	r1, r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008464:	431a      	orrs	r2, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846a:	431a      	orrs	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	431a      	orrs	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	431a      	orrs	r2, r3
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	695b      	ldr	r3, [r3, #20]
 800847c:	431a      	orrs	r2, r3
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	431a      	orrs	r2, r3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848e:	431a      	orrs	r2, r3
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	431a      	orrs	r2, r3
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800849a:	ea42 0103 	orr.w	r1, r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d113      	bne.n	80084da <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	689b      	ldr	r3, [r3, #8]
 80084b8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084d8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f022 0201 	bic.w	r2, r2, #1
 80084e8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800851c:	2300      	movs	r3, #0
}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bd80      	pop	{r7, pc}
 8008526:	bf00      	nop
 8008528:	40013000 	.word	0x40013000
 800852c:	40003800 	.word	0x40003800
 8008530:	40003c00 	.word	0x40003c00

08008534 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b08a      	sub	sp, #40	; 0x28
 8008538:	af02      	add	r7, sp, #8
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	603b      	str	r3, [r7, #0]
 8008540:	4613      	mov	r3, r2
 8008542:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	3320      	adds	r3, #32
 800854a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800854c:	2300      	movs	r3, #0
 800854e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008556:	2b01      	cmp	r3, #1
 8008558:	d101      	bne.n	800855e <HAL_SPI_Transmit+0x2a>
 800855a:	2302      	movs	r3, #2
 800855c:	e1d7      	b.n	800890e <HAL_SPI_Transmit+0x3da>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008566:	f7fa f837 	bl	80025d8 <HAL_GetTick>
 800856a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008572:	b2db      	uxtb	r3, r3
 8008574:	2b01      	cmp	r3, #1
 8008576:	d007      	beq.n	8008588 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008578:	2302      	movs	r3, #2
 800857a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008584:	7efb      	ldrb	r3, [r7, #27]
 8008586:	e1c2      	b.n	800890e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d002      	beq.n	8008594 <HAL_SPI_Transmit+0x60>
 800858e:	88fb      	ldrh	r3, [r7, #6]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d107      	bne.n	80085a4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80085a0:	7efb      	ldrb	r3, [r7, #27]
 80085a2:	e1b4      	b.n	800890e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	2203      	movs	r2, #3
 80085a8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	88fa      	ldrh	r2, [r7, #6]
 80085be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	88fa      	ldrh	r2, [r7, #6]
 80085c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2200      	movs	r2, #0
 80085e4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80085f4:	d107      	bne.n	8008606 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008604:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
 800860c:	4b96      	ldr	r3, [pc, #600]	; (8008868 <HAL_SPI_Transmit+0x334>)
 800860e:	4013      	ands	r3, r2
 8008610:	88f9      	ldrh	r1, [r7, #6]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	6812      	ldr	r2, [r2, #0]
 8008616:	430b      	orrs	r3, r1
 8008618:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f042 0201 	orr.w	r2, r2, #1
 8008628:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008632:	d107      	bne.n	8008644 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008642:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	2b0f      	cmp	r3, #15
 800864a:	d947      	bls.n	80086dc <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800864c:	e03f      	b.n	80086ce <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	695b      	ldr	r3, [r3, #20]
 8008654:	f003 0302 	and.w	r3, r3, #2
 8008658:	2b02      	cmp	r3, #2
 800865a:	d114      	bne.n	8008686 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6812      	ldr	r2, [r2, #0]
 8008666:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800866c:	1d1a      	adds	r2, r3, #4
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008678:	b29b      	uxth	r3, r3
 800867a:	3b01      	subs	r3, #1
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008684:	e023      	b.n	80086ce <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008686:	f7f9 ffa7 	bl	80025d8 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	683a      	ldr	r2, [r7, #0]
 8008692:	429a      	cmp	r2, r3
 8008694:	d803      	bhi.n	800869e <HAL_SPI_Transmit+0x16a>
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869c:	d102      	bne.n	80086a4 <HAL_SPI_Transmit+0x170>
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d114      	bne.n	80086ce <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f000 f937 	bl	8008918 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2201      	movs	r2, #1
 80086c6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e11f      	b.n	800890e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1b9      	bne.n	800864e <HAL_SPI_Transmit+0x11a>
 80086da:	e0f2      	b.n	80088c2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	2b07      	cmp	r3, #7
 80086e2:	f240 80e7 	bls.w	80088b4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80086e6:	e05d      	b.n	80087a4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d132      	bne.n	800875c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80086fc:	b29b      	uxth	r3, r3
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d918      	bls.n	8008734 <HAL_SPI_Transmit+0x200>
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d014      	beq.n	8008734 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	6812      	ldr	r2, [r2, #0]
 8008714:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800871a:	1d1a      	adds	r2, r3, #4
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008726:	b29b      	uxth	r3, r3
 8008728:	3b02      	subs	r3, #2
 800872a:	b29a      	uxth	r2, r3
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008732:	e037      	b.n	80087a4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008738:	881a      	ldrh	r2, [r3, #0]
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008742:	1c9a      	adds	r2, r3, #2
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800874e:	b29b      	uxth	r3, r3
 8008750:	3b01      	subs	r3, #1
 8008752:	b29a      	uxth	r2, r3
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800875a:	e023      	b.n	80087a4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800875c:	f7f9 ff3c 	bl	80025d8 <HAL_GetTick>
 8008760:	4602      	mov	r2, r0
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	1ad3      	subs	r3, r2, r3
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d803      	bhi.n	8008774 <HAL_SPI_Transmit+0x240>
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008772:	d102      	bne.n	800877a <HAL_SPI_Transmit+0x246>
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d114      	bne.n	80087a4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 f8cc 	bl	8008918 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800878e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80087a0:	2303      	movs	r3, #3
 80087a2:	e0b4      	b.n	800890e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d19b      	bne.n	80086e8 <HAL_SPI_Transmit+0x1b4>
 80087b0:	e087      	b.n	80088c2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	f003 0302 	and.w	r3, r3, #2
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d155      	bne.n	800886c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087c6:	b29b      	uxth	r3, r3
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d918      	bls.n	80087fe <HAL_SPI_Transmit+0x2ca>
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d0:	2b40      	cmp	r3, #64	; 0x40
 80087d2:	d914      	bls.n	80087fe <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6812      	ldr	r2, [r2, #0]
 80087de:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087e4:	1d1a      	adds	r2, r3, #4
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	3b04      	subs	r3, #4
 80087f4:	b29a      	uxth	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80087fc:	e05a      	b.n	80088b4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b01      	cmp	r3, #1
 8008808:	d917      	bls.n	800883a <HAL_SPI_Transmit+0x306>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800880e:	2b00      	cmp	r3, #0
 8008810:	d013      	beq.n	800883a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008816:	881a      	ldrh	r2, [r3, #0]
 8008818:	69fb      	ldr	r3, [r7, #28]
 800881a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008820:	1c9a      	adds	r2, r3, #2
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800882c:	b29b      	uxth	r3, r3
 800882e:	3b02      	subs	r3, #2
 8008830:	b29a      	uxth	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008838:	e03c      	b.n	80088b4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	3320      	adds	r3, #32
 8008844:	7812      	ldrb	r2, [r2, #0]
 8008846:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884c:	1c5a      	adds	r2, r3, #1
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008858:	b29b      	uxth	r3, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008864:	e026      	b.n	80088b4 <HAL_SPI_Transmit+0x380>
 8008866:	bf00      	nop
 8008868:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800886c:	f7f9 feb4 	bl	80025d8 <HAL_GetTick>
 8008870:	4602      	mov	r2, r0
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	1ad3      	subs	r3, r2, r3
 8008876:	683a      	ldr	r2, [r7, #0]
 8008878:	429a      	cmp	r2, r3
 800887a:	d803      	bhi.n	8008884 <HAL_SPI_Transmit+0x350>
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008882:	d102      	bne.n	800888a <HAL_SPI_Transmit+0x356>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d114      	bne.n	80088b4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f000 f844 	bl	8008918 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80088b0:	2303      	movs	r3, #3
 80088b2:	e02c      	b.n	800890e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f47f af78 	bne.w	80087b2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	9300      	str	r3, [sp, #0]
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	2200      	movs	r2, #0
 80088ca:	2108      	movs	r1, #8
 80088cc:	68f8      	ldr	r0, [r7, #12]
 80088ce:	f000 f8c3 	bl	8008a58 <SPI_WaitOnFlagUntilTimeout>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088de:	f043 0220 	orr.w	r2, r3, #32
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f815 	bl	8008918 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2200      	movs	r2, #0
 80088f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2201      	movs	r2, #1
 80088fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e000      	b.n	800890e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800890c:	7efb      	ldrb	r3, [r7, #27]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3720      	adds	r7, #32
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop

08008918 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	695b      	ldr	r3, [r3, #20]
 8008926:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	699a      	ldr	r2, [r3, #24]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0208 	orr.w	r2, r2, #8
 8008936:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699a      	ldr	r2, [r3, #24]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f042 0210 	orr.w	r2, r2, #16
 8008946:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	681a      	ldr	r2, [r3, #0]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f022 0201 	bic.w	r2, r2, #1
 8008956:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6919      	ldr	r1, [r3, #16]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681a      	ldr	r2, [r3, #0]
 8008962:	4b3c      	ldr	r3, [pc, #240]	; (8008a54 <SPI_CloseTransfer+0x13c>)
 8008964:	400b      	ands	r3, r1
 8008966:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	689a      	ldr	r2, [r3, #8]
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008976:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b04      	cmp	r3, #4
 8008982:	d014      	beq.n	80089ae <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f003 0320 	and.w	r3, r3, #32
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00f      	beq.n	80089ae <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008994:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	699a      	ldr	r2, [r3, #24]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0220 	orr.w	r2, r2, #32
 80089ac:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b03      	cmp	r3, #3
 80089b8:	d014      	beq.n	80089e4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d00f      	beq.n	80089e4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089ca:	f043 0204 	orr.w	r2, r3, #4
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	699a      	ldr	r2, [r3, #24]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089e2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00f      	beq.n	8008a0e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089f4:	f043 0201 	orr.w	r2, r3, #1
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	699a      	ldr	r2, [r3, #24]
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a0c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00f      	beq.n	8008a38 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a1e:	f043 0208 	orr.w	r2, r3, #8
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	699a      	ldr	r2, [r3, #24]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a36:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008a48:	bf00      	nop
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr
 8008a54:	fffffc90 	.word	0xfffffc90

08008a58 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	603b      	str	r3, [r7, #0]
 8008a64:	4613      	mov	r3, r2
 8008a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a68:	e010      	b.n	8008a8c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008a6a:	f7f9 fdb5 	bl	80025d8 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	683b      	ldr	r3, [r7, #0]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	69ba      	ldr	r2, [r7, #24]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d803      	bhi.n	8008a82 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008a7a:	69bb      	ldr	r3, [r7, #24]
 8008a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a80:	d102      	bne.n	8008a88 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008a82:	69bb      	ldr	r3, [r7, #24]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d101      	bne.n	8008a8c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e00f      	b.n	8008aac <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	695a      	ldr	r2, [r3, #20]
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	4013      	ands	r3, r2
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	bf0c      	ite	eq
 8008a9c:	2301      	moveq	r3, #1
 8008a9e:	2300      	movne	r3, #0
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d0df      	beq.n	8008a6a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac0:	095b      	lsrs	r3, r3, #5
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	3301      	adds	r3, #1
 8008acc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	3307      	adds	r3, #7
 8008ad2:	08db      	lsrs	r3, r3, #3
 8008ad4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	fb02 f303 	mul.w	r3, r2, r3
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b082      	sub	sp, #8
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d101      	bne.n	8008afc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008af8:	2301      	movs	r3, #1
 8008afa:	e042      	b.n	8008b82 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d106      	bne.n	8008b14 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f7f9 fb3e 	bl	8002190 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2224      	movs	r2, #36	; 0x24
 8008b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681a      	ldr	r2, [r3, #0]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	f022 0201 	bic.w	r2, r2, #1
 8008b2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fbeb 	bl	8009308 <UART_SetConfig>
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d101      	bne.n	8008b3c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008b38:	2301      	movs	r3, #1
 8008b3a:	e022      	b.n	8008b82 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 f947 	bl	8009dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	685a      	ldr	r2, [r3, #4]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b58:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	689a      	ldr	r2, [r3, #8]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b68:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	681a      	ldr	r2, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f042 0201 	orr.w	r2, r2, #1
 8008b78:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 f9ce 	bl	8009f1c <UART_CheckIdleState>
 8008b80:	4603      	mov	r3, r0
}
 8008b82:	4618      	mov	r0, r3
 8008b84:	3708      	adds	r7, #8
 8008b86:	46bd      	mov	sp, r7
 8008b88:	bd80      	pop	{r7, pc}
	...

08008b8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b0ba      	sub	sp, #232	; 0xe8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	69db      	ldr	r3, [r3, #28]
 8008b9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bb2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008bb6:	f640 030f 	movw	r3, #2063	; 0x80f
 8008bba:	4013      	ands	r3, r2
 8008bbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008bc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d11b      	bne.n	8008c00 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bcc:	f003 0320 	and.w	r3, r3, #32
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d015      	beq.n	8008c00 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bd8:	f003 0320 	and.w	r3, r3, #32
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d105      	bne.n	8008bec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008be0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d009      	beq.n	8008c00 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 835a 	beq.w	80092aa <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
      }
      return;
 8008bfe:	e354      	b.n	80092aa <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	f000 811f 	beq.w	8008e48 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c0a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008c0e:	4b8b      	ldr	r3, [pc, #556]	; (8008e3c <HAL_UART_IRQHandler+0x2b0>)
 8008c10:	4013      	ands	r3, r2
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008c1a:	4b89      	ldr	r3, [pc, #548]	; (8008e40 <HAL_UART_IRQHandler+0x2b4>)
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8112 	beq.w	8008e48 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c28:	f003 0301 	and.w	r3, r3, #1
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d011      	beq.n	8008c54 <HAL_UART_IRQHandler+0xc8>
 8008c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00b      	beq.n	8008c54 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2201      	movs	r2, #1
 8008c42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c4a:	f043 0201 	orr.w	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c58:	f003 0302 	and.w	r3, r3, #2
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d011      	beq.n	8008c84 <HAL_UART_IRQHandler+0xf8>
 8008c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c64:	f003 0301 	and.w	r3, r3, #1
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d00b      	beq.n	8008c84 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2202      	movs	r2, #2
 8008c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c7a:	f043 0204 	orr.w	r2, r3, #4
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c88:	f003 0304 	and.w	r3, r3, #4
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d011      	beq.n	8008cb4 <HAL_UART_IRQHandler+0x128>
 8008c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c94:	f003 0301 	and.w	r3, r3, #1
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d00b      	beq.n	8008cb4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	2204      	movs	r2, #4
 8008ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008caa:	f043 0202 	orr.w	r2, r3, #2
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb8:	f003 0308 	and.w	r3, r3, #8
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc4:	f003 0320 	and.w	r3, r3, #32
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d105      	bne.n	8008cd8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008ccc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008cd0:	4b5a      	ldr	r3, [pc, #360]	; (8008e3c <HAL_UART_IRQHandler+0x2b0>)
 8008cd2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00b      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2208      	movs	r2, #8
 8008cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ce6:	f043 0208 	orr.w	r2, r3, #8
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d012      	beq.n	8008d22 <HAL_UART_IRQHandler+0x196>
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d00c      	beq.n	8008d22 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d18:	f043 0220 	orr.w	r2, r3, #32
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 82c0 	beq.w	80092ae <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d32:	f003 0320 	and.w	r3, r3, #32
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d013      	beq.n	8008d62 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d105      	bne.n	8008d52 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d007      	beq.n	8008d62 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d003      	beq.n	8008d62 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d76:	2b40      	cmp	r3, #64	; 0x40
 8008d78:	d005      	beq.n	8008d86 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d7e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d04f      	beq.n	8008e26 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f001 f9dc 	bl	800a144 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d96:	2b40      	cmp	r3, #64	; 0x40
 8008d98:	d141      	bne.n	8008e1e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3308      	adds	r3, #8
 8008da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008da8:	e853 3f00 	ldrex	r3, [r3]
 8008dac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008db8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3308      	adds	r3, #8
 8008dc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008dc6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008dca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008dd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008dd6:	e841 2300 	strex	r3, r2, [r1]
 8008dda:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008dde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1d9      	bne.n	8008d9a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d013      	beq.n	8008e16 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008df2:	4a14      	ldr	r2, [pc, #80]	; (8008e44 <HAL_UART_IRQHandler+0x2b8>)
 8008df4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fa fbc6 	bl	800358c <HAL_DMA_Abort_IT>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d017      	beq.n	8008e36 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008e10:	4610      	mov	r0, r2
 8008e12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e14:	e00f      	b.n	8008e36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa60 	bl	80092dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1c:	e00b      	b.n	8008e36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fa5c 	bl	80092dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e24:	e007      	b.n	8008e36 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fa58 	bl	80092dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008e34:	e23b      	b.n	80092ae <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e36:	bf00      	nop
    return;
 8008e38:	e239      	b.n	80092ae <HAL_UART_IRQHandler+0x722>
 8008e3a:	bf00      	nop
 8008e3c:	10000001 	.word	0x10000001
 8008e40:	04000120 	.word	0x04000120
 8008e44:	0800a211 	.word	0x0800a211

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	f040 81ce 	bne.w	80091ee <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e56:	f003 0310 	and.w	r3, r3, #16
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	f000 81c7 	beq.w	80091ee <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e64:	f003 0310 	and.w	r3, r3, #16
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 81c0 	beq.w	80091ee <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2210      	movs	r2, #16
 8008e74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b40      	cmp	r3, #64	; 0x40
 8008e82:	f040 813b 	bne.w	80090fc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a8b      	ldr	r2, [pc, #556]	; (80090bc <HAL_UART_IRQHandler+0x530>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d059      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a89      	ldr	r2, [pc, #548]	; (80090c0 <HAL_UART_IRQHandler+0x534>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d053      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a87      	ldr	r2, [pc, #540]	; (80090c4 <HAL_UART_IRQHandler+0x538>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d04d      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a85      	ldr	r2, [pc, #532]	; (80090c8 <HAL_UART_IRQHandler+0x53c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d047      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a83      	ldr	r2, [pc, #524]	; (80090cc <HAL_UART_IRQHandler+0x540>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d041      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a81      	ldr	r2, [pc, #516]	; (80090d0 <HAL_UART_IRQHandler+0x544>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d03b      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a7f      	ldr	r2, [pc, #508]	; (80090d4 <HAL_UART_IRQHandler+0x548>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d035      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	4a7d      	ldr	r2, [pc, #500]	; (80090d8 <HAL_UART_IRQHandler+0x54c>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d02f      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a7b      	ldr	r2, [pc, #492]	; (80090dc <HAL_UART_IRQHandler+0x550>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d029      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a79      	ldr	r2, [pc, #484]	; (80090e0 <HAL_UART_IRQHandler+0x554>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d023      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a77      	ldr	r2, [pc, #476]	; (80090e4 <HAL_UART_IRQHandler+0x558>)
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d01d      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a75      	ldr	r2, [pc, #468]	; (80090e8 <HAL_UART_IRQHandler+0x55c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d017      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a73      	ldr	r2, [pc, #460]	; (80090ec <HAL_UART_IRQHandler+0x560>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d011      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	4a71      	ldr	r2, [pc, #452]	; (80090f0 <HAL_UART_IRQHandler+0x564>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d00b      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	4a6f      	ldr	r2, [pc, #444]	; (80090f4 <HAL_UART_IRQHandler+0x568>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d005      	beq.n	8008f46 <HAL_UART_IRQHandler+0x3ba>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a6d      	ldr	r2, [pc, #436]	; (80090f8 <HAL_UART_IRQHandler+0x56c>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d105      	bne.n	8008f52 <HAL_UART_IRQHandler+0x3c6>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	e004      	b.n	8008f5c <HAL_UART_IRQHandler+0x3d0>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	b29b      	uxth	r3, r3
 8008f5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 81a4 	beq.w	80092b2 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008f70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f74:	429a      	cmp	r2, r3
 8008f76:	f080 819c 	bcs.w	80092b2 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008f80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f88:	69db      	ldr	r3, [r3, #28]
 8008f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f8e:	f000 8086 	beq.w	800909e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008fbc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008fc0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008fc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008fcc:	e841 2300 	strex	r3, r2, [r1]
 8008fd0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d1da      	bne.n	8008f92 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3308      	adds	r3, #8
 8008fe2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fe6:	e853 3f00 	ldrex	r3, [r3]
 8008fea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008fee:	f023 0301 	bic.w	r3, r3, #1
 8008ff2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009000:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009004:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009008:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800900c:	e841 2300 	strex	r3, r2, [r1]
 8009010:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009012:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009014:	2b00      	cmp	r3, #0
 8009016:	d1e1      	bne.n	8008fdc <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3308      	adds	r3, #8
 800901e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009020:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009022:	e853 3f00 	ldrex	r3, [r3]
 8009026:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800902a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800902e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800903c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800903e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009040:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009042:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009044:	e841 2300 	strex	r3, r2, [r1]
 8009048:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800904a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800904c:	2b00      	cmp	r3, #0
 800904e:	d1e3      	bne.n	8009018 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2220      	movs	r2, #32
 8009054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2200      	movs	r2, #0
 800905c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009064:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009066:	e853 3f00 	ldrex	r3, [r3]
 800906a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800906c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800906e:	f023 0310 	bic.w	r3, r3, #16
 8009072:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009080:	65bb      	str	r3, [r7, #88]	; 0x58
 8009082:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009086:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800908e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e4      	bne.n	800905e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009098:	4618      	mov	r0, r3
 800909a:	f7f9 ff59 	bl	8002f50 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090aa:	b29b      	uxth	r3, r3
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	4619      	mov	r1, r3
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f91c 	bl	80092f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090b8:	e0fb      	b.n	80092b2 <HAL_UART_IRQHandler+0x726>
 80090ba:	bf00      	nop
 80090bc:	40020010 	.word	0x40020010
 80090c0:	40020028 	.word	0x40020028
 80090c4:	40020040 	.word	0x40020040
 80090c8:	40020058 	.word	0x40020058
 80090cc:	40020070 	.word	0x40020070
 80090d0:	40020088 	.word	0x40020088
 80090d4:	400200a0 	.word	0x400200a0
 80090d8:	400200b8 	.word	0x400200b8
 80090dc:	40020410 	.word	0x40020410
 80090e0:	40020428 	.word	0x40020428
 80090e4:	40020440 	.word	0x40020440
 80090e8:	40020458 	.word	0x40020458
 80090ec:	40020470 	.word	0x40020470
 80090f0:	40020488 	.word	0x40020488
 80090f4:	400204a0 	.word	0x400204a0
 80090f8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009108:	b29b      	uxth	r3, r3
 800910a:	1ad3      	subs	r3, r2, r3
 800910c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009116:	b29b      	uxth	r3, r3
 8009118:	2b00      	cmp	r3, #0
 800911a:	f000 80cc 	beq.w	80092b6 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800911e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 80c7 	beq.w	80092b6 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800913c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800914a:	647b      	str	r3, [r7, #68]	; 0x44
 800914c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e4      	bne.n	8009128 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	3308      	adds	r3, #8
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	e853 3f00 	ldrex	r3, [r3]
 800916c:	623b      	str	r3, [r7, #32]
   return(result);
 800916e:	6a3a      	ldr	r2, [r7, #32]
 8009170:	4b54      	ldr	r3, [pc, #336]	; (80092c4 <HAL_UART_IRQHandler+0x738>)
 8009172:	4013      	ands	r3, r2
 8009174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009182:	633a      	str	r2, [r7, #48]	; 0x30
 8009184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918a:	e841 2300 	strex	r3, r2, [r1]
 800918e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009192:	2b00      	cmp	r3, #0
 8009194:	d1e3      	bne.n	800915e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	e853 3f00 	ldrex	r3, [r3]
 80091b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f023 0310 	bic.w	r3, r3, #16
 80091be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	461a      	mov	r2, r3
 80091c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091cc:	61fb      	str	r3, [r7, #28]
 80091ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	69b9      	ldr	r1, [r7, #24]
 80091d2:	69fa      	ldr	r2, [r7, #28]
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	617b      	str	r3, [r7, #20]
   return(result);
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e4      	bne.n	80091aa <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091e4:	4619      	mov	r1, r3
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f882 	bl	80092f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091ec:	e063      	b.n	80092b6 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80091ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00e      	beq.n	8009218 <HAL_UART_IRQHandler+0x68c>
 80091fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d008      	beq.n	8009218 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800920e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f001 f83e 	bl	800a292 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009216:	e051      	b.n	80092bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800921c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009220:	2b00      	cmp	r3, #0
 8009222:	d014      	beq.n	800924e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800922c:	2b00      	cmp	r3, #0
 800922e:	d105      	bne.n	800923c <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009230:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d008      	beq.n	800924e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009240:	2b00      	cmp	r3, #0
 8009242:	d03a      	beq.n	80092ba <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	4798      	blx	r3
    }
    return;
 800924c:	e035      	b.n	80092ba <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800924e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009256:	2b00      	cmp	r3, #0
 8009258:	d009      	beq.n	800926e <HAL_UART_IRQHandler+0x6e2>
 800925a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800925e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 ffe8 	bl	800a23c <UART_EndTransmit_IT>
    return;
 800926c:	e026      	b.n	80092bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800926e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d009      	beq.n	800928e <HAL_UART_IRQHandler+0x702>
 800927a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009282:	2b00      	cmp	r3, #0
 8009284:	d003      	beq.n	800928e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 f817 	bl	800a2ba <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800928c:	e016      	b.n	80092bc <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800928e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009292:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d010      	beq.n	80092bc <HAL_UART_IRQHandler+0x730>
 800929a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800929e:	2b00      	cmp	r3, #0
 80092a0:	da0c      	bge.n	80092bc <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 ffff 	bl	800a2a6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092a8:	e008      	b.n	80092bc <HAL_UART_IRQHandler+0x730>
      return;
 80092aa:	bf00      	nop
 80092ac:	e006      	b.n	80092bc <HAL_UART_IRQHandler+0x730>
    return;
 80092ae:	bf00      	nop
 80092b0:	e004      	b.n	80092bc <HAL_UART_IRQHandler+0x730>
      return;
 80092b2:	bf00      	nop
 80092b4:	e002      	b.n	80092bc <HAL_UART_IRQHandler+0x730>
      return;
 80092b6:	bf00      	nop
 80092b8:	e000      	b.n	80092bc <HAL_UART_IRQHandler+0x730>
    return;
 80092ba:	bf00      	nop
  }
}
 80092bc:	37e8      	adds	r7, #232	; 0xe8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	effffffe 	.word	0xeffffffe

080092c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b083      	sub	sp, #12
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80092e4:	bf00      	nop
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ee:	4770      	bx	lr

080092f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80092f0:	b480      	push	{r7}
 80092f2:	b083      	sub	sp, #12
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80092fc:	bf00      	nop
 80092fe:	370c      	adds	r7, #12
 8009300:	46bd      	mov	sp, r7
 8009302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009306:	4770      	bx	lr

08009308 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009308:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800930c:	b092      	sub	sp, #72	; 0x48
 800930e:	af00      	add	r7, sp, #0
 8009310:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	689a      	ldr	r2, [r3, #8]
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	431a      	orrs	r2, r3
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	431a      	orrs	r2, r3
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	69db      	ldr	r3, [r3, #28]
 800932c:	4313      	orrs	r3, r2
 800932e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	681a      	ldr	r2, [r3, #0]
 8009336:	4bbe      	ldr	r3, [pc, #760]	; (8009630 <UART_SetConfig+0x328>)
 8009338:	4013      	ands	r3, r2
 800933a:	697a      	ldr	r2, [r7, #20]
 800933c:	6812      	ldr	r2, [r2, #0]
 800933e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009340:	430b      	orrs	r3, r1
 8009342:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800934e:	697b      	ldr	r3, [r7, #20]
 8009350:	68da      	ldr	r2, [r3, #12]
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4ab3      	ldr	r2, [pc, #716]	; (8009634 <UART_SetConfig+0x32c>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d004      	beq.n	8009374 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009370:	4313      	orrs	r3, r2
 8009372:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689a      	ldr	r2, [r3, #8]
 800937a:	4baf      	ldr	r3, [pc, #700]	; (8009638 <UART_SetConfig+0x330>)
 800937c:	4013      	ands	r3, r2
 800937e:	697a      	ldr	r2, [r7, #20]
 8009380:	6812      	ldr	r2, [r2, #0]
 8009382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009384:	430b      	orrs	r3, r1
 8009386:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938e:	f023 010f 	bic.w	r1, r3, #15
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	430a      	orrs	r2, r1
 800939c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4aa6      	ldr	r2, [pc, #664]	; (800963c <UART_SetConfig+0x334>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d177      	bne.n	8009498 <UART_SetConfig+0x190>
 80093a8:	4ba5      	ldr	r3, [pc, #660]	; (8009640 <UART_SetConfig+0x338>)
 80093aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80093b0:	2b28      	cmp	r3, #40	; 0x28
 80093b2:	d86d      	bhi.n	8009490 <UART_SetConfig+0x188>
 80093b4:	a201      	add	r2, pc, #4	; (adr r2, 80093bc <UART_SetConfig+0xb4>)
 80093b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093ba:	bf00      	nop
 80093bc:	08009461 	.word	0x08009461
 80093c0:	08009491 	.word	0x08009491
 80093c4:	08009491 	.word	0x08009491
 80093c8:	08009491 	.word	0x08009491
 80093cc:	08009491 	.word	0x08009491
 80093d0:	08009491 	.word	0x08009491
 80093d4:	08009491 	.word	0x08009491
 80093d8:	08009491 	.word	0x08009491
 80093dc:	08009469 	.word	0x08009469
 80093e0:	08009491 	.word	0x08009491
 80093e4:	08009491 	.word	0x08009491
 80093e8:	08009491 	.word	0x08009491
 80093ec:	08009491 	.word	0x08009491
 80093f0:	08009491 	.word	0x08009491
 80093f4:	08009491 	.word	0x08009491
 80093f8:	08009491 	.word	0x08009491
 80093fc:	08009471 	.word	0x08009471
 8009400:	08009491 	.word	0x08009491
 8009404:	08009491 	.word	0x08009491
 8009408:	08009491 	.word	0x08009491
 800940c:	08009491 	.word	0x08009491
 8009410:	08009491 	.word	0x08009491
 8009414:	08009491 	.word	0x08009491
 8009418:	08009491 	.word	0x08009491
 800941c:	08009479 	.word	0x08009479
 8009420:	08009491 	.word	0x08009491
 8009424:	08009491 	.word	0x08009491
 8009428:	08009491 	.word	0x08009491
 800942c:	08009491 	.word	0x08009491
 8009430:	08009491 	.word	0x08009491
 8009434:	08009491 	.word	0x08009491
 8009438:	08009491 	.word	0x08009491
 800943c:	08009481 	.word	0x08009481
 8009440:	08009491 	.word	0x08009491
 8009444:	08009491 	.word	0x08009491
 8009448:	08009491 	.word	0x08009491
 800944c:	08009491 	.word	0x08009491
 8009450:	08009491 	.word	0x08009491
 8009454:	08009491 	.word	0x08009491
 8009458:	08009491 	.word	0x08009491
 800945c:	08009489 	.word	0x08009489
 8009460:	2301      	movs	r3, #1
 8009462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009466:	e222      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009468:	2304      	movs	r3, #4
 800946a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800946e:	e21e      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009470:	2308      	movs	r3, #8
 8009472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009476:	e21a      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009478:	2310      	movs	r3, #16
 800947a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800947e:	e216      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009480:	2320      	movs	r3, #32
 8009482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009486:	e212      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009488:	2340      	movs	r3, #64	; 0x40
 800948a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800948e:	e20e      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009490:	2380      	movs	r3, #128	; 0x80
 8009492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009496:	e20a      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a69      	ldr	r2, [pc, #420]	; (8009644 <UART_SetConfig+0x33c>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d130      	bne.n	8009504 <UART_SetConfig+0x1fc>
 80094a2:	4b67      	ldr	r3, [pc, #412]	; (8009640 <UART_SetConfig+0x338>)
 80094a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b05      	cmp	r3, #5
 80094ac:	d826      	bhi.n	80094fc <UART_SetConfig+0x1f4>
 80094ae:	a201      	add	r2, pc, #4	; (adr r2, 80094b4 <UART_SetConfig+0x1ac>)
 80094b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b4:	080094cd 	.word	0x080094cd
 80094b8:	080094d5 	.word	0x080094d5
 80094bc:	080094dd 	.word	0x080094dd
 80094c0:	080094e5 	.word	0x080094e5
 80094c4:	080094ed 	.word	0x080094ed
 80094c8:	080094f5 	.word	0x080094f5
 80094cc:	2300      	movs	r3, #0
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094d2:	e1ec      	b.n	80098ae <UART_SetConfig+0x5a6>
 80094d4:	2304      	movs	r3, #4
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094da:	e1e8      	b.n	80098ae <UART_SetConfig+0x5a6>
 80094dc:	2308      	movs	r3, #8
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094e2:	e1e4      	b.n	80098ae <UART_SetConfig+0x5a6>
 80094e4:	2310      	movs	r3, #16
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094ea:	e1e0      	b.n	80098ae <UART_SetConfig+0x5a6>
 80094ec:	2320      	movs	r3, #32
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094f2:	e1dc      	b.n	80098ae <UART_SetConfig+0x5a6>
 80094f4:	2340      	movs	r3, #64	; 0x40
 80094f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80094fa:	e1d8      	b.n	80098ae <UART_SetConfig+0x5a6>
 80094fc:	2380      	movs	r3, #128	; 0x80
 80094fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009502:	e1d4      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a4f      	ldr	r2, [pc, #316]	; (8009648 <UART_SetConfig+0x340>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d130      	bne.n	8009570 <UART_SetConfig+0x268>
 800950e:	4b4c      	ldr	r3, [pc, #304]	; (8009640 <UART_SetConfig+0x338>)
 8009510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009512:	f003 0307 	and.w	r3, r3, #7
 8009516:	2b05      	cmp	r3, #5
 8009518:	d826      	bhi.n	8009568 <UART_SetConfig+0x260>
 800951a:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <UART_SetConfig+0x218>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	08009539 	.word	0x08009539
 8009524:	08009541 	.word	0x08009541
 8009528:	08009549 	.word	0x08009549
 800952c:	08009551 	.word	0x08009551
 8009530:	08009559 	.word	0x08009559
 8009534:	08009561 	.word	0x08009561
 8009538:	2300      	movs	r3, #0
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800953e:	e1b6      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009540:	2304      	movs	r3, #4
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009546:	e1b2      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009548:	2308      	movs	r3, #8
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800954e:	e1ae      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009550:	2310      	movs	r3, #16
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009556:	e1aa      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009558:	2320      	movs	r3, #32
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800955e:	e1a6      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009560:	2340      	movs	r3, #64	; 0x40
 8009562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009566:	e1a2      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009568:	2380      	movs	r3, #128	; 0x80
 800956a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800956e:	e19e      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a35      	ldr	r2, [pc, #212]	; (800964c <UART_SetConfig+0x344>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d130      	bne.n	80095dc <UART_SetConfig+0x2d4>
 800957a:	4b31      	ldr	r3, [pc, #196]	; (8009640 <UART_SetConfig+0x338>)
 800957c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957e:	f003 0307 	and.w	r3, r3, #7
 8009582:	2b05      	cmp	r3, #5
 8009584:	d826      	bhi.n	80095d4 <UART_SetConfig+0x2cc>
 8009586:	a201      	add	r2, pc, #4	; (adr r2, 800958c <UART_SetConfig+0x284>)
 8009588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958c:	080095a5 	.word	0x080095a5
 8009590:	080095ad 	.word	0x080095ad
 8009594:	080095b5 	.word	0x080095b5
 8009598:	080095bd 	.word	0x080095bd
 800959c:	080095c5 	.word	0x080095c5
 80095a0:	080095cd 	.word	0x080095cd
 80095a4:	2300      	movs	r3, #0
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095aa:	e180      	b.n	80098ae <UART_SetConfig+0x5a6>
 80095ac:	2304      	movs	r3, #4
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095b2:	e17c      	b.n	80098ae <UART_SetConfig+0x5a6>
 80095b4:	2308      	movs	r3, #8
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ba:	e178      	b.n	80098ae <UART_SetConfig+0x5a6>
 80095bc:	2310      	movs	r3, #16
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095c2:	e174      	b.n	80098ae <UART_SetConfig+0x5a6>
 80095c4:	2320      	movs	r3, #32
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095ca:	e170      	b.n	80098ae <UART_SetConfig+0x5a6>
 80095cc:	2340      	movs	r3, #64	; 0x40
 80095ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095d2:	e16c      	b.n	80098ae <UART_SetConfig+0x5a6>
 80095d4:	2380      	movs	r3, #128	; 0x80
 80095d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80095da:	e168      	b.n	80098ae <UART_SetConfig+0x5a6>
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <UART_SetConfig+0x348>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d142      	bne.n	800966c <UART_SetConfig+0x364>
 80095e6:	4b16      	ldr	r3, [pc, #88]	; (8009640 <UART_SetConfig+0x338>)
 80095e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ea:	f003 0307 	and.w	r3, r3, #7
 80095ee:	2b05      	cmp	r3, #5
 80095f0:	d838      	bhi.n	8009664 <UART_SetConfig+0x35c>
 80095f2:	a201      	add	r2, pc, #4	; (adr r2, 80095f8 <UART_SetConfig+0x2f0>)
 80095f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f8:	08009611 	.word	0x08009611
 80095fc:	08009619 	.word	0x08009619
 8009600:	08009621 	.word	0x08009621
 8009604:	08009629 	.word	0x08009629
 8009608:	08009655 	.word	0x08009655
 800960c:	0800965d 	.word	0x0800965d
 8009610:	2300      	movs	r3, #0
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009616:	e14a      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009618:	2304      	movs	r3, #4
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800961e:	e146      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009620:	2308      	movs	r3, #8
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009626:	e142      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009628:	2310      	movs	r3, #16
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800962e:	e13e      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009630:	cfff69f3 	.word	0xcfff69f3
 8009634:	58000c00 	.word	0x58000c00
 8009638:	11fff4ff 	.word	0x11fff4ff
 800963c:	40011000 	.word	0x40011000
 8009640:	58024400 	.word	0x58024400
 8009644:	40004400 	.word	0x40004400
 8009648:	40004800 	.word	0x40004800
 800964c:	40004c00 	.word	0x40004c00
 8009650:	40005000 	.word	0x40005000
 8009654:	2320      	movs	r3, #32
 8009656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800965a:	e128      	b.n	80098ae <UART_SetConfig+0x5a6>
 800965c:	2340      	movs	r3, #64	; 0x40
 800965e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009662:	e124      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009664:	2380      	movs	r3, #128	; 0x80
 8009666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800966a:	e120      	b.n	80098ae <UART_SetConfig+0x5a6>
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	4acb      	ldr	r2, [pc, #812]	; (80099a0 <UART_SetConfig+0x698>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d176      	bne.n	8009764 <UART_SetConfig+0x45c>
 8009676:	4bcb      	ldr	r3, [pc, #812]	; (80099a4 <UART_SetConfig+0x69c>)
 8009678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800967a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800967e:	2b28      	cmp	r3, #40	; 0x28
 8009680:	d86c      	bhi.n	800975c <UART_SetConfig+0x454>
 8009682:	a201      	add	r2, pc, #4	; (adr r2, 8009688 <UART_SetConfig+0x380>)
 8009684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009688:	0800972d 	.word	0x0800972d
 800968c:	0800975d 	.word	0x0800975d
 8009690:	0800975d 	.word	0x0800975d
 8009694:	0800975d 	.word	0x0800975d
 8009698:	0800975d 	.word	0x0800975d
 800969c:	0800975d 	.word	0x0800975d
 80096a0:	0800975d 	.word	0x0800975d
 80096a4:	0800975d 	.word	0x0800975d
 80096a8:	08009735 	.word	0x08009735
 80096ac:	0800975d 	.word	0x0800975d
 80096b0:	0800975d 	.word	0x0800975d
 80096b4:	0800975d 	.word	0x0800975d
 80096b8:	0800975d 	.word	0x0800975d
 80096bc:	0800975d 	.word	0x0800975d
 80096c0:	0800975d 	.word	0x0800975d
 80096c4:	0800975d 	.word	0x0800975d
 80096c8:	0800973d 	.word	0x0800973d
 80096cc:	0800975d 	.word	0x0800975d
 80096d0:	0800975d 	.word	0x0800975d
 80096d4:	0800975d 	.word	0x0800975d
 80096d8:	0800975d 	.word	0x0800975d
 80096dc:	0800975d 	.word	0x0800975d
 80096e0:	0800975d 	.word	0x0800975d
 80096e4:	0800975d 	.word	0x0800975d
 80096e8:	08009745 	.word	0x08009745
 80096ec:	0800975d 	.word	0x0800975d
 80096f0:	0800975d 	.word	0x0800975d
 80096f4:	0800975d 	.word	0x0800975d
 80096f8:	0800975d 	.word	0x0800975d
 80096fc:	0800975d 	.word	0x0800975d
 8009700:	0800975d 	.word	0x0800975d
 8009704:	0800975d 	.word	0x0800975d
 8009708:	0800974d 	.word	0x0800974d
 800970c:	0800975d 	.word	0x0800975d
 8009710:	0800975d 	.word	0x0800975d
 8009714:	0800975d 	.word	0x0800975d
 8009718:	0800975d 	.word	0x0800975d
 800971c:	0800975d 	.word	0x0800975d
 8009720:	0800975d 	.word	0x0800975d
 8009724:	0800975d 	.word	0x0800975d
 8009728:	08009755 	.word	0x08009755
 800972c:	2301      	movs	r3, #1
 800972e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009732:	e0bc      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009734:	2304      	movs	r3, #4
 8009736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800973a:	e0b8      	b.n	80098ae <UART_SetConfig+0x5a6>
 800973c:	2308      	movs	r3, #8
 800973e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009742:	e0b4      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009744:	2310      	movs	r3, #16
 8009746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800974a:	e0b0      	b.n	80098ae <UART_SetConfig+0x5a6>
 800974c:	2320      	movs	r3, #32
 800974e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009752:	e0ac      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009754:	2340      	movs	r3, #64	; 0x40
 8009756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975a:	e0a8      	b.n	80098ae <UART_SetConfig+0x5a6>
 800975c:	2380      	movs	r3, #128	; 0x80
 800975e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009762:	e0a4      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a8f      	ldr	r2, [pc, #572]	; (80099a8 <UART_SetConfig+0x6a0>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d130      	bne.n	80097d0 <UART_SetConfig+0x4c8>
 800976e:	4b8d      	ldr	r3, [pc, #564]	; (80099a4 <UART_SetConfig+0x69c>)
 8009770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009772:	f003 0307 	and.w	r3, r3, #7
 8009776:	2b05      	cmp	r3, #5
 8009778:	d826      	bhi.n	80097c8 <UART_SetConfig+0x4c0>
 800977a:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <UART_SetConfig+0x478>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	08009799 	.word	0x08009799
 8009784:	080097a1 	.word	0x080097a1
 8009788:	080097a9 	.word	0x080097a9
 800978c:	080097b1 	.word	0x080097b1
 8009790:	080097b9 	.word	0x080097b9
 8009794:	080097c1 	.word	0x080097c1
 8009798:	2300      	movs	r3, #0
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800979e:	e086      	b.n	80098ae <UART_SetConfig+0x5a6>
 80097a0:	2304      	movs	r3, #4
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097a6:	e082      	b.n	80098ae <UART_SetConfig+0x5a6>
 80097a8:	2308      	movs	r3, #8
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ae:	e07e      	b.n	80098ae <UART_SetConfig+0x5a6>
 80097b0:	2310      	movs	r3, #16
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097b6:	e07a      	b.n	80098ae <UART_SetConfig+0x5a6>
 80097b8:	2320      	movs	r3, #32
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097be:	e076      	b.n	80098ae <UART_SetConfig+0x5a6>
 80097c0:	2340      	movs	r3, #64	; 0x40
 80097c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c6:	e072      	b.n	80098ae <UART_SetConfig+0x5a6>
 80097c8:	2380      	movs	r3, #128	; 0x80
 80097ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ce:	e06e      	b.n	80098ae <UART_SetConfig+0x5a6>
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a75      	ldr	r2, [pc, #468]	; (80099ac <UART_SetConfig+0x6a4>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d130      	bne.n	800983c <UART_SetConfig+0x534>
 80097da:	4b72      	ldr	r3, [pc, #456]	; (80099a4 <UART_SetConfig+0x69c>)
 80097dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097de:	f003 0307 	and.w	r3, r3, #7
 80097e2:	2b05      	cmp	r3, #5
 80097e4:	d826      	bhi.n	8009834 <UART_SetConfig+0x52c>
 80097e6:	a201      	add	r2, pc, #4	; (adr r2, 80097ec <UART_SetConfig+0x4e4>)
 80097e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ec:	08009805 	.word	0x08009805
 80097f0:	0800980d 	.word	0x0800980d
 80097f4:	08009815 	.word	0x08009815
 80097f8:	0800981d 	.word	0x0800981d
 80097fc:	08009825 	.word	0x08009825
 8009800:	0800982d 	.word	0x0800982d
 8009804:	2300      	movs	r3, #0
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800980a:	e050      	b.n	80098ae <UART_SetConfig+0x5a6>
 800980c:	2304      	movs	r3, #4
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009812:	e04c      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009814:	2308      	movs	r3, #8
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800981a:	e048      	b.n	80098ae <UART_SetConfig+0x5a6>
 800981c:	2310      	movs	r3, #16
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009822:	e044      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009824:	2320      	movs	r3, #32
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982a:	e040      	b.n	80098ae <UART_SetConfig+0x5a6>
 800982c:	2340      	movs	r3, #64	; 0x40
 800982e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009832:	e03c      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009834:	2380      	movs	r3, #128	; 0x80
 8009836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983a:	e038      	b.n	80098ae <UART_SetConfig+0x5a6>
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4a5b      	ldr	r2, [pc, #364]	; (80099b0 <UART_SetConfig+0x6a8>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d130      	bne.n	80098a8 <UART_SetConfig+0x5a0>
 8009846:	4b57      	ldr	r3, [pc, #348]	; (80099a4 <UART_SetConfig+0x69c>)
 8009848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800984a:	f003 0307 	and.w	r3, r3, #7
 800984e:	2b05      	cmp	r3, #5
 8009850:	d826      	bhi.n	80098a0 <UART_SetConfig+0x598>
 8009852:	a201      	add	r2, pc, #4	; (adr r2, 8009858 <UART_SetConfig+0x550>)
 8009854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009858:	08009871 	.word	0x08009871
 800985c:	08009879 	.word	0x08009879
 8009860:	08009881 	.word	0x08009881
 8009864:	08009889 	.word	0x08009889
 8009868:	08009891 	.word	0x08009891
 800986c:	08009899 	.word	0x08009899
 8009870:	2302      	movs	r3, #2
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009876:	e01a      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009878:	2304      	movs	r3, #4
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800987e:	e016      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009880:	2308      	movs	r3, #8
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009886:	e012      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009888:	2310      	movs	r3, #16
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800988e:	e00e      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009890:	2320      	movs	r3, #32
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009896:	e00a      	b.n	80098ae <UART_SetConfig+0x5a6>
 8009898:	2340      	movs	r3, #64	; 0x40
 800989a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989e:	e006      	b.n	80098ae <UART_SetConfig+0x5a6>
 80098a0:	2380      	movs	r3, #128	; 0x80
 80098a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a6:	e002      	b.n	80098ae <UART_SetConfig+0x5a6>
 80098a8:	2380      	movs	r3, #128	; 0x80
 80098aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a3f      	ldr	r2, [pc, #252]	; (80099b0 <UART_SetConfig+0x6a8>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	f040 80f8 	bne.w	8009aaa <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80098ba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80098be:	2b20      	cmp	r3, #32
 80098c0:	dc46      	bgt.n	8009950 <UART_SetConfig+0x648>
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	f2c0 8082 	blt.w	80099cc <UART_SetConfig+0x6c4>
 80098c8:	3b02      	subs	r3, #2
 80098ca:	2b1e      	cmp	r3, #30
 80098cc:	d87e      	bhi.n	80099cc <UART_SetConfig+0x6c4>
 80098ce:	a201      	add	r2, pc, #4	; (adr r2, 80098d4 <UART_SetConfig+0x5cc>)
 80098d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d4:	08009957 	.word	0x08009957
 80098d8:	080099cd 	.word	0x080099cd
 80098dc:	0800995f 	.word	0x0800995f
 80098e0:	080099cd 	.word	0x080099cd
 80098e4:	080099cd 	.word	0x080099cd
 80098e8:	080099cd 	.word	0x080099cd
 80098ec:	0800996f 	.word	0x0800996f
 80098f0:	080099cd 	.word	0x080099cd
 80098f4:	080099cd 	.word	0x080099cd
 80098f8:	080099cd 	.word	0x080099cd
 80098fc:	080099cd 	.word	0x080099cd
 8009900:	080099cd 	.word	0x080099cd
 8009904:	080099cd 	.word	0x080099cd
 8009908:	080099cd 	.word	0x080099cd
 800990c:	0800997f 	.word	0x0800997f
 8009910:	080099cd 	.word	0x080099cd
 8009914:	080099cd 	.word	0x080099cd
 8009918:	080099cd 	.word	0x080099cd
 800991c:	080099cd 	.word	0x080099cd
 8009920:	080099cd 	.word	0x080099cd
 8009924:	080099cd 	.word	0x080099cd
 8009928:	080099cd 	.word	0x080099cd
 800992c:	080099cd 	.word	0x080099cd
 8009930:	080099cd 	.word	0x080099cd
 8009934:	080099cd 	.word	0x080099cd
 8009938:	080099cd 	.word	0x080099cd
 800993c:	080099cd 	.word	0x080099cd
 8009940:	080099cd 	.word	0x080099cd
 8009944:	080099cd 	.word	0x080099cd
 8009948:	080099cd 	.word	0x080099cd
 800994c:	080099bf 	.word	0x080099bf
 8009950:	2b40      	cmp	r3, #64	; 0x40
 8009952:	d037      	beq.n	80099c4 <UART_SetConfig+0x6bc>
 8009954:	e03a      	b.n	80099cc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009956:	f7fe f8c5 	bl	8007ae4 <HAL_RCCEx_GetD3PCLK1Freq>
 800995a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800995c:	e03c      	b.n	80099d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800995e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009962:	4618      	mov	r0, r3
 8009964:	f7fe f8d4 	bl	8007b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800996c:	e034      	b.n	80099d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800996e:	f107 0318 	add.w	r3, r7, #24
 8009972:	4618      	mov	r0, r3
 8009974:	f7fe fa20 	bl	8007db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009978:	69fb      	ldr	r3, [r7, #28]
 800997a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800997c:	e02c      	b.n	80099d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800997e:	4b09      	ldr	r3, [pc, #36]	; (80099a4 <UART_SetConfig+0x69c>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0320 	and.w	r3, r3, #32
 8009986:	2b00      	cmp	r3, #0
 8009988:	d016      	beq.n	80099b8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800998a:	4b06      	ldr	r3, [pc, #24]	; (80099a4 <UART_SetConfig+0x69c>)
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	08db      	lsrs	r3, r3, #3
 8009990:	f003 0303 	and.w	r3, r3, #3
 8009994:	4a07      	ldr	r2, [pc, #28]	; (80099b4 <UART_SetConfig+0x6ac>)
 8009996:	fa22 f303 	lsr.w	r3, r2, r3
 800999a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800999c:	e01c      	b.n	80099d8 <UART_SetConfig+0x6d0>
 800999e:	bf00      	nop
 80099a0:	40011400 	.word	0x40011400
 80099a4:	58024400 	.word	0x58024400
 80099a8:	40007800 	.word	0x40007800
 80099ac:	40007c00 	.word	0x40007c00
 80099b0:	58000c00 	.word	0x58000c00
 80099b4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80099b8:	4b9d      	ldr	r3, [pc, #628]	; (8009c30 <UART_SetConfig+0x928>)
 80099ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099bc:	e00c      	b.n	80099d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80099be:	4b9d      	ldr	r3, [pc, #628]	; (8009c34 <UART_SetConfig+0x92c>)
 80099c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099c2:	e009      	b.n	80099d8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80099ca:	e005      	b.n	80099d8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80099cc:	2300      	movs	r3, #0
 80099ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80099d6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 81de 	beq.w	8009d9c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e4:	4a94      	ldr	r2, [pc, #592]	; (8009c38 <UART_SetConfig+0x930>)
 80099e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ea:	461a      	mov	r2, r3
 80099ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80099f2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	685a      	ldr	r2, [r3, #4]
 80099f8:	4613      	mov	r3, r2
 80099fa:	005b      	lsls	r3, r3, #1
 80099fc:	4413      	add	r3, r2
 80099fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d305      	bcc.n	8009a10 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d903      	bls.n	8009a18 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009a16:	e1c1      	b.n	8009d9c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	60bb      	str	r3, [r7, #8]
 8009a1e:	60fa      	str	r2, [r7, #12]
 8009a20:	697b      	ldr	r3, [r7, #20]
 8009a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a24:	4a84      	ldr	r2, [pc, #528]	; (8009c38 <UART_SetConfig+0x930>)
 8009a26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	607a      	str	r2, [r7, #4]
 8009a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a3a:	f7f6 fc4d 	bl	80002d8 <__aeabi_uldivmod>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	4610      	mov	r0, r2
 8009a44:	4619      	mov	r1, r3
 8009a46:	f04f 0200 	mov.w	r2, #0
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	020b      	lsls	r3, r1, #8
 8009a50:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a54:	0202      	lsls	r2, r0, #8
 8009a56:	6979      	ldr	r1, [r7, #20]
 8009a58:	6849      	ldr	r1, [r1, #4]
 8009a5a:	0849      	lsrs	r1, r1, #1
 8009a5c:	2000      	movs	r0, #0
 8009a5e:	460c      	mov	r4, r1
 8009a60:	4605      	mov	r5, r0
 8009a62:	eb12 0804 	adds.w	r8, r2, r4
 8009a66:	eb43 0905 	adc.w	r9, r3, r5
 8009a6a:	697b      	ldr	r3, [r7, #20]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	2200      	movs	r2, #0
 8009a70:	469a      	mov	sl, r3
 8009a72:	4693      	mov	fp, r2
 8009a74:	4652      	mov	r2, sl
 8009a76:	465b      	mov	r3, fp
 8009a78:	4640      	mov	r0, r8
 8009a7a:	4649      	mov	r1, r9
 8009a7c:	f7f6 fc2c 	bl	80002d8 <__aeabi_uldivmod>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	4613      	mov	r3, r2
 8009a86:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a8e:	d308      	bcc.n	8009aa2 <UART_SetConfig+0x79a>
 8009a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a96:	d204      	bcs.n	8009aa2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a9e:	60da      	str	r2, [r3, #12]
 8009aa0:	e17c      	b.n	8009d9c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009aa8:	e178      	b.n	8009d9c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	69db      	ldr	r3, [r3, #28]
 8009aae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ab2:	f040 80c5 	bne.w	8009c40 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009ab6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009aba:	2b20      	cmp	r3, #32
 8009abc:	dc48      	bgt.n	8009b50 <UART_SetConfig+0x848>
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	db7b      	blt.n	8009bba <UART_SetConfig+0x8b2>
 8009ac2:	2b20      	cmp	r3, #32
 8009ac4:	d879      	bhi.n	8009bba <UART_SetConfig+0x8b2>
 8009ac6:	a201      	add	r2, pc, #4	; (adr r2, 8009acc <UART_SetConfig+0x7c4>)
 8009ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009acc:	08009b57 	.word	0x08009b57
 8009ad0:	08009b5f 	.word	0x08009b5f
 8009ad4:	08009bbb 	.word	0x08009bbb
 8009ad8:	08009bbb 	.word	0x08009bbb
 8009adc:	08009b67 	.word	0x08009b67
 8009ae0:	08009bbb 	.word	0x08009bbb
 8009ae4:	08009bbb 	.word	0x08009bbb
 8009ae8:	08009bbb 	.word	0x08009bbb
 8009aec:	08009b77 	.word	0x08009b77
 8009af0:	08009bbb 	.word	0x08009bbb
 8009af4:	08009bbb 	.word	0x08009bbb
 8009af8:	08009bbb 	.word	0x08009bbb
 8009afc:	08009bbb 	.word	0x08009bbb
 8009b00:	08009bbb 	.word	0x08009bbb
 8009b04:	08009bbb 	.word	0x08009bbb
 8009b08:	08009bbb 	.word	0x08009bbb
 8009b0c:	08009b87 	.word	0x08009b87
 8009b10:	08009bbb 	.word	0x08009bbb
 8009b14:	08009bbb 	.word	0x08009bbb
 8009b18:	08009bbb 	.word	0x08009bbb
 8009b1c:	08009bbb 	.word	0x08009bbb
 8009b20:	08009bbb 	.word	0x08009bbb
 8009b24:	08009bbb 	.word	0x08009bbb
 8009b28:	08009bbb 	.word	0x08009bbb
 8009b2c:	08009bbb 	.word	0x08009bbb
 8009b30:	08009bbb 	.word	0x08009bbb
 8009b34:	08009bbb 	.word	0x08009bbb
 8009b38:	08009bbb 	.word	0x08009bbb
 8009b3c:	08009bbb 	.word	0x08009bbb
 8009b40:	08009bbb 	.word	0x08009bbb
 8009b44:	08009bbb 	.word	0x08009bbb
 8009b48:	08009bbb 	.word	0x08009bbb
 8009b4c:	08009bad 	.word	0x08009bad
 8009b50:	2b40      	cmp	r3, #64	; 0x40
 8009b52:	d02e      	beq.n	8009bb2 <UART_SetConfig+0x8aa>
 8009b54:	e031      	b.n	8009bba <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009b56:	f7fd f853 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
 8009b5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b5c:	e033      	b.n	8009bc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009b5e:	f7fd f865 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 8009b62:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009b64:	e02f      	b.n	8009bc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fd ffd0 	bl	8007b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b74:	e027      	b.n	8009bc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009b76:	f107 0318 	add.w	r3, r7, #24
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f7fe f91c 	bl	8007db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009b84:	e01f      	b.n	8009bc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009b86:	4b2d      	ldr	r3, [pc, #180]	; (8009c3c <UART_SetConfig+0x934>)
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009b92:	4b2a      	ldr	r3, [pc, #168]	; (8009c3c <UART_SetConfig+0x934>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	08db      	lsrs	r3, r3, #3
 8009b98:	f003 0303 	and.w	r3, r3, #3
 8009b9c:	4a24      	ldr	r2, [pc, #144]	; (8009c30 <UART_SetConfig+0x928>)
 8009b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8009ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009ba4:	e00f      	b.n	8009bc6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009ba6:	4b22      	ldr	r3, [pc, #136]	; (8009c30 <UART_SetConfig+0x928>)
 8009ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009baa:	e00c      	b.n	8009bc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009bac:	4b21      	ldr	r3, [pc, #132]	; (8009c34 <UART_SetConfig+0x92c>)
 8009bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb0:	e009      	b.n	8009bc6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bb8:	e005      	b.n	8009bc6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009bba:	2300      	movs	r3, #0
 8009bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009bc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	f000 80e7 	beq.w	8009d9c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bd2:	4a19      	ldr	r2, [pc, #100]	; (8009c38 <UART_SetConfig+0x930>)
 8009bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bd8:	461a      	mov	r2, r3
 8009bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009be0:	005a      	lsls	r2, r3, #1
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	085b      	lsrs	r3, r3, #1
 8009be8:	441a      	add	r2, r3
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bf2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bf6:	2b0f      	cmp	r3, #15
 8009bf8:	d916      	bls.n	8009c28 <UART_SetConfig+0x920>
 8009bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c00:	d212      	bcs.n	8009c28 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	f023 030f 	bic.w	r3, r3, #15
 8009c0a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c0e:	085b      	lsrs	r3, r3, #1
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	f003 0307 	and.w	r3, r3, #7
 8009c16:	b29a      	uxth	r2, r3
 8009c18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009c24:	60da      	str	r2, [r3, #12]
 8009c26:	e0b9      	b.n	8009d9c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c2e:	e0b5      	b.n	8009d9c <UART_SetConfig+0xa94>
 8009c30:	03d09000 	.word	0x03d09000
 8009c34:	003d0900 	.word	0x003d0900
 8009c38:	0800c11c 	.word	0x0800c11c
 8009c3c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c40:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	dc49      	bgt.n	8009cdc <UART_SetConfig+0x9d4>
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	db7c      	blt.n	8009d46 <UART_SetConfig+0xa3e>
 8009c4c:	2b20      	cmp	r3, #32
 8009c4e:	d87a      	bhi.n	8009d46 <UART_SetConfig+0xa3e>
 8009c50:	a201      	add	r2, pc, #4	; (adr r2, 8009c58 <UART_SetConfig+0x950>)
 8009c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c56:	bf00      	nop
 8009c58:	08009ce3 	.word	0x08009ce3
 8009c5c:	08009ceb 	.word	0x08009ceb
 8009c60:	08009d47 	.word	0x08009d47
 8009c64:	08009d47 	.word	0x08009d47
 8009c68:	08009cf3 	.word	0x08009cf3
 8009c6c:	08009d47 	.word	0x08009d47
 8009c70:	08009d47 	.word	0x08009d47
 8009c74:	08009d47 	.word	0x08009d47
 8009c78:	08009d03 	.word	0x08009d03
 8009c7c:	08009d47 	.word	0x08009d47
 8009c80:	08009d47 	.word	0x08009d47
 8009c84:	08009d47 	.word	0x08009d47
 8009c88:	08009d47 	.word	0x08009d47
 8009c8c:	08009d47 	.word	0x08009d47
 8009c90:	08009d47 	.word	0x08009d47
 8009c94:	08009d47 	.word	0x08009d47
 8009c98:	08009d13 	.word	0x08009d13
 8009c9c:	08009d47 	.word	0x08009d47
 8009ca0:	08009d47 	.word	0x08009d47
 8009ca4:	08009d47 	.word	0x08009d47
 8009ca8:	08009d47 	.word	0x08009d47
 8009cac:	08009d47 	.word	0x08009d47
 8009cb0:	08009d47 	.word	0x08009d47
 8009cb4:	08009d47 	.word	0x08009d47
 8009cb8:	08009d47 	.word	0x08009d47
 8009cbc:	08009d47 	.word	0x08009d47
 8009cc0:	08009d47 	.word	0x08009d47
 8009cc4:	08009d47 	.word	0x08009d47
 8009cc8:	08009d47 	.word	0x08009d47
 8009ccc:	08009d47 	.word	0x08009d47
 8009cd0:	08009d47 	.word	0x08009d47
 8009cd4:	08009d47 	.word	0x08009d47
 8009cd8:	08009d39 	.word	0x08009d39
 8009cdc:	2b40      	cmp	r3, #64	; 0x40
 8009cde:	d02e      	beq.n	8009d3e <UART_SetConfig+0xa36>
 8009ce0:	e031      	b.n	8009d46 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ce2:	f7fc ff8d 	bl	8006c00 <HAL_RCC_GetPCLK1Freq>
 8009ce6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009ce8:	e033      	b.n	8009d52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009cea:	f7fc ff9f 	bl	8006c2c <HAL_RCC_GetPCLK2Freq>
 8009cee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009cf0:	e02f      	b.n	8009d52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f7fd ff0a 	bl	8007b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d00:	e027      	b.n	8009d52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d02:	f107 0318 	add.w	r3, r7, #24
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe f856 	bl	8007db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d10:	e01f      	b.n	8009d52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d12:	4b2d      	ldr	r3, [pc, #180]	; (8009dc8 <UART_SetConfig+0xac0>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d009      	beq.n	8009d32 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d1e:	4b2a      	ldr	r3, [pc, #168]	; (8009dc8 <UART_SetConfig+0xac0>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	08db      	lsrs	r3, r3, #3
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	4a28      	ldr	r2, [pc, #160]	; (8009dcc <UART_SetConfig+0xac4>)
 8009d2a:	fa22 f303 	lsr.w	r3, r2, r3
 8009d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d30:	e00f      	b.n	8009d52 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009d32:	4b26      	ldr	r3, [pc, #152]	; (8009dcc <UART_SetConfig+0xac4>)
 8009d34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d36:	e00c      	b.n	8009d52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d38:	4b25      	ldr	r3, [pc, #148]	; (8009dd0 <UART_SetConfig+0xac8>)
 8009d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d3c:	e009      	b.n	8009d52 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009d44:	e005      	b.n	8009d52 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009d46:	2300      	movs	r3, #0
 8009d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009d50:	bf00      	nop
    }

    if (pclk != 0U)
 8009d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d021      	beq.n	8009d9c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d5c:	4a1d      	ldr	r2, [pc, #116]	; (8009dd4 <UART_SetConfig+0xacc>)
 8009d5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d62:	461a      	mov	r2, r3
 8009d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d66:	fbb3 f2f2 	udiv	r2, r3, r2
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	085b      	lsrs	r3, r3, #1
 8009d70:	441a      	add	r2, r3
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d7a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d7e:	2b0f      	cmp	r3, #15
 8009d80:	d909      	bls.n	8009d96 <UART_SetConfig+0xa8e>
 8009d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d88:	d205      	bcs.n	8009d96 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d8c:	b29a      	uxth	r2, r3
 8009d8e:	697b      	ldr	r3, [r7, #20]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	60da      	str	r2, [r3, #12]
 8009d94:	e002      	b.n	8009d9c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	2200      	movs	r2, #0
 8009db0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	2200      	movs	r2, #0
 8009db6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009db8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3748      	adds	r7, #72	; 0x48
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dc6:	bf00      	nop
 8009dc8:	58024400 	.word	0x58024400
 8009dcc:	03d09000 	.word	0x03d09000
 8009dd0:	003d0900 	.word	0x003d0900
 8009dd4:	0800c11c 	.word	0x0800c11c

08009dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009de4:	f003 0301 	and.w	r3, r3, #1
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d00a      	beq.n	8009e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	430a      	orrs	r2, r1
 8009e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e28:	f003 0304 	and.w	r3, r3, #4
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d00a      	beq.n	8009e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	430a      	orrs	r2, r1
 8009e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e4a:	f003 0308 	and.w	r3, r3, #8
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685b      	ldr	r3, [r3, #4]
 8009e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6c:	f003 0310 	and.w	r3, r3, #16
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d00a      	beq.n	8009e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8e:	f003 0320 	and.w	r3, r3, #32
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d00a      	beq.n	8009eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d01a      	beq.n	8009eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	430a      	orrs	r2, r1
 8009ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ed6:	d10a      	bne.n	8009eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	430a      	orrs	r2, r1
 8009eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00a      	beq.n	8009f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	430a      	orrs	r2, r1
 8009f0e:	605a      	str	r2, [r3, #4]
  }
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af02      	add	r7, sp, #8
 8009f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f2c:	f7f8 fb54 	bl	80025d8 <HAL_GetTick>
 8009f30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f003 0308 	and.w	r3, r3, #8
 8009f3c:	2b08      	cmp	r3, #8
 8009f3e:	d10e      	bne.n	8009f5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f44:	9300      	str	r3, [sp, #0]
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 f82f 	bl	8009fb2 <UART_WaitOnFlagUntilTimeout>
 8009f54:	4603      	mov	r3, r0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d001      	beq.n	8009f5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f5a:	2303      	movs	r3, #3
 8009f5c:	e025      	b.n	8009faa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f003 0304 	and.w	r3, r3, #4
 8009f68:	2b04      	cmp	r3, #4
 8009f6a:	d10e      	bne.n	8009f8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 f819 	bl	8009fb2 <UART_WaitOnFlagUntilTimeout>
 8009f80:	4603      	mov	r3, r0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d001      	beq.n	8009f8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	e00f      	b.n	8009faa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2220      	movs	r2, #32
 8009f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b09c      	sub	sp, #112	; 0x70
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	603b      	str	r3, [r7, #0]
 8009fbe:	4613      	mov	r3, r2
 8009fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fc2:	e0a9      	b.n	800a118 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fca:	f000 80a5 	beq.w	800a118 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009fce:	f7f8 fb03 	bl	80025d8 <HAL_GetTick>
 8009fd2:	4602      	mov	r2, r0
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	1ad3      	subs	r3, r2, r3
 8009fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d302      	bcc.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0x32>
 8009fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d140      	bne.n	800a066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009fec:	e853 3f00 	ldrex	r3, [r3]
 8009ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	461a      	mov	r2, r3
 800a000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a002:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a004:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a00a:	e841 2300 	strex	r3, r2, [r1]
 800a00e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1e6      	bne.n	8009fe4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	3308      	adds	r3, #8
 800a01c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a020:	e853 3f00 	ldrex	r3, [r3]
 800a024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a028:	f023 0301 	bic.w	r3, r3, #1
 800a02c:	663b      	str	r3, [r7, #96]	; 0x60
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	3308      	adds	r3, #8
 800a034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a036:	64ba      	str	r2, [r7, #72]	; 0x48
 800a038:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a03a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a03c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a03e:	e841 2300 	strex	r3, r2, [r1]
 800a042:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1e5      	bne.n	800a016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2220      	movs	r2, #32
 800a04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	2220      	movs	r2, #32
 800a056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2200      	movs	r2, #0
 800a05e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e069      	b.n	800a13a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f003 0304 	and.w	r3, r3, #4
 800a070:	2b00      	cmp	r3, #0
 800a072:	d051      	beq.n	800a118 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	69db      	ldr	r3, [r3, #28]
 800a07a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a07e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a082:	d149      	bne.n	800a118 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a08c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a096:	e853 3f00 	ldrex	r3, [r3]
 800a09a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a0ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a0ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0b4:	e841 2300 	strex	r3, r2, [r1]
 800a0b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1e6      	bne.n	800a08e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	3308      	adds	r3, #8
 800a0c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c8:	697b      	ldr	r3, [r7, #20]
 800a0ca:	e853 3f00 	ldrex	r3, [r3]
 800a0ce:	613b      	str	r3, [r7, #16]
   return(result);
 800a0d0:	693b      	ldr	r3, [r7, #16]
 800a0d2:	f023 0301 	bic.w	r3, r3, #1
 800a0d6:	66bb      	str	r3, [r7, #104]	; 0x68
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3308      	adds	r3, #8
 800a0de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a0e0:	623a      	str	r2, [r7, #32]
 800a0e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e4:	69f9      	ldr	r1, [r7, #28]
 800a0e6:	6a3a      	ldr	r2, [r7, #32]
 800a0e8:	e841 2300 	strex	r3, r2, [r1]
 800a0ec:	61bb      	str	r3, [r7, #24]
   return(result);
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d1e5      	bne.n	800a0c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2220      	movs	r2, #32
 800a0f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2220      	movs	r2, #32
 800a100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	2220      	movs	r2, #32
 800a108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e010      	b.n	800a13a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	69da      	ldr	r2, [r3, #28]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	4013      	ands	r3, r2
 800a122:	68ba      	ldr	r2, [r7, #8]
 800a124:	429a      	cmp	r2, r3
 800a126:	bf0c      	ite	eq
 800a128:	2301      	moveq	r3, #1
 800a12a:	2300      	movne	r3, #0
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	461a      	mov	r2, r3
 800a130:	79fb      	ldrb	r3, [r7, #7]
 800a132:	429a      	cmp	r2, r3
 800a134:	f43f af46 	beq.w	8009fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a138:	2300      	movs	r3, #0
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3770      	adds	r7, #112	; 0x70
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
	...

0800a144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a144:	b480      	push	{r7}
 800a146:	b095      	sub	sp, #84	; 0x54
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a154:	e853 3f00 	ldrex	r3, [r3]
 800a158:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a15a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a15c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a160:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	461a      	mov	r2, r3
 800a168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a16a:	643b      	str	r3, [r7, #64]	; 0x40
 800a16c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a16e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a170:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a172:	e841 2300 	strex	r3, r2, [r1]
 800a176:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1e6      	bne.n	800a14c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	3308      	adds	r3, #8
 800a184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	e853 3f00 	ldrex	r3, [r3]
 800a18c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a18e:	69fa      	ldr	r2, [r7, #28]
 800a190:	4b1e      	ldr	r3, [pc, #120]	; (800a20c <UART_EndRxTransfer+0xc8>)
 800a192:	4013      	ands	r3, r2
 800a194:	64bb      	str	r3, [r7, #72]	; 0x48
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	3308      	adds	r3, #8
 800a19c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a19e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a1a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a1a6:	e841 2300 	strex	r3, r2, [r1]
 800a1aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1e5      	bne.n	800a17e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a1b6:	2b01      	cmp	r3, #1
 800a1b8:	d118      	bne.n	800a1ec <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	e853 3f00 	ldrex	r3, [r3]
 800a1c6:	60bb      	str	r3, [r7, #8]
   return(result);
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	f023 0310 	bic.w	r3, r3, #16
 800a1ce:	647b      	str	r3, [r7, #68]	; 0x44
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d8:	61bb      	str	r3, [r7, #24]
 800a1da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	6979      	ldr	r1, [r7, #20]
 800a1de:	69ba      	ldr	r2, [r7, #24]
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	613b      	str	r3, [r7, #16]
   return(result);
 800a1e6:	693b      	ldr	r3, [r7, #16]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e6      	bne.n	800a1ba <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2220      	movs	r2, #32
 800a1f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a200:	bf00      	nop
 800a202:	3754      	adds	r7, #84	; 0x54
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr
 800a20c:	effffffe 	.word	0xeffffffe

0800a210 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a21c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	2200      	movs	r2, #0
 800a22a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7ff f854 	bl	80092dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a234:	bf00      	nop
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b088      	sub	sp, #32
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	e853 3f00 	ldrex	r3, [r3]
 800a250:	60bb      	str	r3, [r7, #8]
   return(result);
 800a252:	68bb      	ldr	r3, [r7, #8]
 800a254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a258:	61fb      	str	r3, [r7, #28]
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	461a      	mov	r2, r3
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	61bb      	str	r3, [r7, #24]
 800a264:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a266:	6979      	ldr	r1, [r7, #20]
 800a268:	69ba      	ldr	r2, [r7, #24]
 800a26a:	e841 2300 	strex	r3, r2, [r1]
 800a26e:	613b      	str	r3, [r7, #16]
   return(result);
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e6      	bne.n	800a244 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2220      	movs	r2, #32
 800a27a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2200      	movs	r2, #0
 800a282:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f7ff f81f 	bl	80092c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a28a:	bf00      	nop
 800a28c:	3720      	adds	r7, #32
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}

0800a292 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a292:	b480      	push	{r7}
 800a294:	b083      	sub	sp, #12
 800a296:	af00      	add	r7, sp, #0
 800a298:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a29a:	bf00      	nop
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a2a6:	b480      	push	{r7}
 800a2a8:	b083      	sub	sp, #12
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a2ae:	bf00      	nop
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a2c2:	bf00      	nop
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b085      	sub	sp, #20
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d101      	bne.n	800a2e4 <HAL_UARTEx_DisableFifoMode+0x16>
 800a2e0:	2302      	movs	r3, #2
 800a2e2:	e027      	b.n	800a334 <HAL_UARTEx_DisableFifoMode+0x66>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2224      	movs	r2, #36	; 0x24
 800a2f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f022 0201 	bic.w	r2, r2, #1
 800a30a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a312:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2200      	movs	r2, #0
 800a318:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2220      	movs	r2, #32
 800a326:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a350:	2b01      	cmp	r3, #1
 800a352:	d101      	bne.n	800a358 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a354:	2302      	movs	r3, #2
 800a356:	e02d      	b.n	800a3b4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	2201      	movs	r2, #1
 800a35c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2224      	movs	r2, #36	; 0x24
 800a364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	681a      	ldr	r2, [r3, #0]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	f022 0201 	bic.w	r2, r2, #1
 800a37e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	430a      	orrs	r2, r1
 800a392:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f000 f84f 	bl	800a438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	2220      	movs	r2, #32
 800a3a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2200      	movs	r2, #0
 800a3ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
 800a3c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d101      	bne.n	800a3d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e02d      	b.n	800a430 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2201      	movs	r2, #1
 800a3d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2224      	movs	r2, #36	; 0x24
 800a3e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f022 0201 	bic.w	r2, r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	689b      	ldr	r3, [r3, #8]
 800a402:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	430a      	orrs	r2, r1
 800a40e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	f000 f811 	bl	800a438 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68fa      	ldr	r2, [r7, #12]
 800a41c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2220      	movs	r2, #32
 800a422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2200      	movs	r2, #0
 800a42a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a438:	b480      	push	{r7}
 800a43a:	b085      	sub	sp, #20
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a444:	2b00      	cmp	r3, #0
 800a446:	d108      	bne.n	800a45a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	2201      	movs	r2, #1
 800a454:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a458:	e031      	b.n	800a4be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a45a:	2310      	movs	r3, #16
 800a45c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a45e:	2310      	movs	r3, #16
 800a460:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	0e5b      	lsrs	r3, r3, #25
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	f003 0307 	and.w	r3, r3, #7
 800a470:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	689b      	ldr	r3, [r3, #8]
 800a478:	0f5b      	lsrs	r3, r3, #29
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	f003 0307 	and.w	r3, r3, #7
 800a480:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a482:	7bbb      	ldrb	r3, [r7, #14]
 800a484:	7b3a      	ldrb	r2, [r7, #12]
 800a486:	4911      	ldr	r1, [pc, #68]	; (800a4cc <UARTEx_SetNbDataToProcess+0x94>)
 800a488:	5c8a      	ldrb	r2, [r1, r2]
 800a48a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a48e:	7b3a      	ldrb	r2, [r7, #12]
 800a490:	490f      	ldr	r1, [pc, #60]	; (800a4d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a492:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a494:	fb93 f3f2 	sdiv	r3, r3, r2
 800a498:	b29a      	uxth	r2, r3
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4a0:	7bfb      	ldrb	r3, [r7, #15]
 800a4a2:	7b7a      	ldrb	r2, [r7, #13]
 800a4a4:	4909      	ldr	r1, [pc, #36]	; (800a4cc <UARTEx_SetNbDataToProcess+0x94>)
 800a4a6:	5c8a      	ldrb	r2, [r1, r2]
 800a4a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a4ac:	7b7a      	ldrb	r2, [r7, #13]
 800a4ae:	4908      	ldr	r1, [pc, #32]	; (800a4d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a4b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4b6:	b29a      	uxth	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a4be:	bf00      	nop
 800a4c0:	3714      	adds	r7, #20
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	0800c134 	.word	0x0800c134
 800a4d0:	0800c13c 	.word	0x0800c13c

0800a4d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4d4:	b084      	sub	sp, #16
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b084      	sub	sp, #16
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	f107 001c 	add.w	r0, r7, #28
 800a4e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	d120      	bne.n	800a52e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	68da      	ldr	r2, [r3, #12]
 800a4fc:	4b2a      	ldr	r3, [pc, #168]	; (800a5a8 <USB_CoreInit+0xd4>)
 800a4fe:	4013      	ands	r3, r2
 800a500:	687a      	ldr	r2, [r7, #4]
 800a502:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a512:	2b01      	cmp	r3, #1
 800a514:	d105      	bne.n	800a522 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	68db      	ldr	r3, [r3, #12]
 800a51a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a522:	6878      	ldr	r0, [r7, #4]
 800a524:	f000 faac 	bl	800aa80 <USB_CoreReset>
 800a528:	4603      	mov	r3, r0
 800a52a:	73fb      	strb	r3, [r7, #15]
 800a52c:	e01a      	b.n	800a564 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a53a:	6878      	ldr	r0, [r7, #4]
 800a53c:	f000 faa0 	bl	800aa80 <USB_CoreReset>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a544:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a546:	2b00      	cmp	r3, #0
 800a548:	d106      	bne.n	800a558 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a54e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	639a      	str	r2, [r3, #56]	; 0x38
 800a556:	e005      	b.n	800a564 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	2b01      	cmp	r3, #1
 800a568:	d116      	bne.n	800a598 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <USB_CoreInit+0xd8>)
 800a57a:	4313      	orrs	r3, r2
 800a57c:	687a      	ldr	r2, [r7, #4]
 800a57e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	f043 0206 	orr.w	r2, r3, #6
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	f043 0220 	orr.w	r2, r3, #32
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a598:	7bfb      	ldrb	r3, [r7, #15]
}
 800a59a:	4618      	mov	r0, r3
 800a59c:	3710      	adds	r7, #16
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5a4:	b004      	add	sp, #16
 800a5a6:	4770      	bx	lr
 800a5a8:	ffbdffbf 	.word	0xffbdffbf
 800a5ac:	03ee0000 	.word	0x03ee0000

0800a5b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	689b      	ldr	r3, [r3, #8]
 800a5bc:	f023 0201 	bic.w	r2, r3, #1
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a5c4:	2300      	movs	r3, #0
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	370c      	adds	r7, #12
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b084      	sub	sp, #16
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	460b      	mov	r3, r1
 800a5dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5de:	2300      	movs	r3, #0
 800a5e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5ee:	78fb      	ldrb	r3, [r7, #3]
 800a5f0:	2b01      	cmp	r3, #1
 800a5f2:	d115      	bne.n	800a620 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	68db      	ldr	r3, [r3, #12]
 800a5f8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a600:	2001      	movs	r0, #1
 800a602:	f7f7 fff5 	bl	80025f0 <HAL_Delay>
      ms++;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	3301      	adds	r3, #1
 800a60a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fa29 	bl	800aa64 <USB_GetMode>
 800a612:	4603      	mov	r3, r0
 800a614:	2b01      	cmp	r3, #1
 800a616:	d01e      	beq.n	800a656 <USB_SetCurrentMode+0x84>
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2b31      	cmp	r3, #49	; 0x31
 800a61c:	d9f0      	bls.n	800a600 <USB_SetCurrentMode+0x2e>
 800a61e:	e01a      	b.n	800a656 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a620:	78fb      	ldrb	r3, [r7, #3]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d115      	bne.n	800a652 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	68db      	ldr	r3, [r3, #12]
 800a62a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a632:	2001      	movs	r0, #1
 800a634:	f7f7 ffdc 	bl	80025f0 <HAL_Delay>
      ms++;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f000 fa10 	bl	800aa64 <USB_GetMode>
 800a644:	4603      	mov	r3, r0
 800a646:	2b00      	cmp	r3, #0
 800a648:	d005      	beq.n	800a656 <USB_SetCurrentMode+0x84>
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	2b31      	cmp	r3, #49	; 0x31
 800a64e:	d9f0      	bls.n	800a632 <USB_SetCurrentMode+0x60>
 800a650:	e001      	b.n	800a656 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a652:	2301      	movs	r3, #1
 800a654:	e005      	b.n	800a662 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	2b32      	cmp	r3, #50	; 0x32
 800a65a:	d101      	bne.n	800a660 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	e000      	b.n	800a662 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3710      	adds	r7, #16
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}
	...

0800a66c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a66c:	b084      	sub	sp, #16
 800a66e:	b580      	push	{r7, lr}
 800a670:	b086      	sub	sp, #24
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
 800a676:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a67a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a67e:	2300      	movs	r3, #0
 800a680:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a686:	2300      	movs	r3, #0
 800a688:	613b      	str	r3, [r7, #16]
 800a68a:	e009      	b.n	800a6a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	3340      	adds	r3, #64	; 0x40
 800a692:	009b      	lsls	r3, r3, #2
 800a694:	4413      	add	r3, r2
 800a696:	2200      	movs	r2, #0
 800a698:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	3301      	adds	r3, #1
 800a69e:	613b      	str	r3, [r7, #16]
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	2b0e      	cmp	r3, #14
 800a6a4:	d9f2      	bls.n	800a68c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a6a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d11c      	bne.n	800a6e6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b2:	685b      	ldr	r3, [r3, #4]
 800a6b4:	68fa      	ldr	r2, [r7, #12]
 800a6b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a6ba:	f043 0302 	orr.w	r3, r3, #2
 800a6be:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	601a      	str	r2, [r3, #0]
 800a6e4:	e005      	b.n	800a6f2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6ea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a704:	4619      	mov	r1, r3
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a70c:	461a      	mov	r2, r3
 800a70e:	680b      	ldr	r3, [r1, #0]
 800a710:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a714:	2b01      	cmp	r3, #1
 800a716:	d10c      	bne.n	800a732 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d104      	bne.n	800a728 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a71e:	2100      	movs	r1, #0
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f965 	bl	800a9f0 <USB_SetDevSpeed>
 800a726:	e008      	b.n	800a73a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a728:	2101      	movs	r1, #1
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f960 	bl	800a9f0 <USB_SetDevSpeed>
 800a730:	e003      	b.n	800a73a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a732:	2103      	movs	r1, #3
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f000 f95b 	bl	800a9f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a73a:	2110      	movs	r1, #16
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f000 f8f3 	bl	800a928 <USB_FlushTxFifo>
 800a742:	4603      	mov	r3, r0
 800a744:	2b00      	cmp	r3, #0
 800a746:	d001      	beq.n	800a74c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a748:	2301      	movs	r3, #1
 800a74a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 f91f 	bl	800a990 <USB_FlushRxFifo>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d001      	beq.n	800a75c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a758:	2301      	movs	r3, #1
 800a75a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a762:	461a      	mov	r2, r3
 800a764:	2300      	movs	r3, #0
 800a766:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a76e:	461a      	mov	r2, r3
 800a770:	2300      	movs	r3, #0
 800a772:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a77a:	461a      	mov	r2, r3
 800a77c:	2300      	movs	r3, #0
 800a77e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a780:	2300      	movs	r3, #0
 800a782:	613b      	str	r3, [r7, #16]
 800a784:	e043      	b.n	800a80e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a786:	693b      	ldr	r3, [r7, #16]
 800a788:	015a      	lsls	r2, r3, #5
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	4413      	add	r3, r2
 800a78e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a79c:	d118      	bne.n	800a7d0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a79e:	693b      	ldr	r3, [r7, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d10a      	bne.n	800a7ba <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7b6:	6013      	str	r3, [r2, #0]
 800a7b8:	e013      	b.n	800a7e2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	e008      	b.n	800a7e2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7dc:	461a      	mov	r2, r3
 800a7de:	2300      	movs	r3, #0
 800a7e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a7e2:	693b      	ldr	r3, [r7, #16]
 800a7e4:	015a      	lsls	r2, r3, #5
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	015a      	lsls	r2, r3, #5
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a800:	461a      	mov	r2, r3
 800a802:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a806:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	3301      	adds	r3, #1
 800a80c:	613b      	str	r3, [r7, #16]
 800a80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a810:	693a      	ldr	r2, [r7, #16]
 800a812:	429a      	cmp	r2, r3
 800a814:	d3b7      	bcc.n	800a786 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a816:	2300      	movs	r3, #0
 800a818:	613b      	str	r3, [r7, #16]
 800a81a:	e043      	b.n	800a8a4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	015a      	lsls	r2, r3, #5
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	4413      	add	r3, r2
 800a824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a82e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a832:	d118      	bne.n	800a866 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d10a      	bne.n	800a850 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	015a      	lsls	r2, r3, #5
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	4413      	add	r3, r2
 800a842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a846:	461a      	mov	r2, r3
 800a848:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a84c:	6013      	str	r3, [r2, #0]
 800a84e:	e013      	b.n	800a878 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	015a      	lsls	r2, r3, #5
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	4413      	add	r3, r2
 800a858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a85c:	461a      	mov	r2, r3
 800a85e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	e008      	b.n	800a878 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	015a      	lsls	r2, r3, #5
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	4413      	add	r3, r2
 800a86e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a872:	461a      	mov	r2, r3
 800a874:	2300      	movs	r3, #0
 800a876:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	015a      	lsls	r2, r3, #5
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a884:	461a      	mov	r2, r3
 800a886:	2300      	movs	r3, #0
 800a888:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	015a      	lsls	r2, r3, #5
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	4413      	add	r3, r2
 800a892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a896:	461a      	mov	r2, r3
 800a898:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a89c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a89e:	693b      	ldr	r3, [r7, #16]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	613b      	str	r3, [r7, #16]
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a6:	693a      	ldr	r2, [r7, #16]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d3b7      	bcc.n	800a81c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8be:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a8cc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d105      	bne.n	800a8e0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	699b      	ldr	r3, [r3, #24]
 800a8d8:	f043 0210 	orr.w	r2, r3, #16
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	699a      	ldr	r2, [r3, #24]
 800a8e4:	4b0e      	ldr	r3, [pc, #56]	; (800a920 <USB_DevInit+0x2b4>)
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a8ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d005      	beq.n	800a8fe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	f043 0208 	orr.w	r2, r3, #8
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a8fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a900:	2b01      	cmp	r3, #1
 800a902:	d105      	bne.n	800a910 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	699a      	ldr	r2, [r3, #24]
 800a908:	4b06      	ldr	r3, [pc, #24]	; (800a924 <USB_DevInit+0x2b8>)
 800a90a:	4313      	orrs	r3, r2
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a910:	7dfb      	ldrb	r3, [r7, #23]
}
 800a912:	4618      	mov	r0, r3
 800a914:	3718      	adds	r7, #24
 800a916:	46bd      	mov	sp, r7
 800a918:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a91c:	b004      	add	sp, #16
 800a91e:	4770      	bx	lr
 800a920:	803c3800 	.word	0x803c3800
 800a924:	40000004 	.word	0x40000004

0800a928 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a932:	2300      	movs	r3, #0
 800a934:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	3301      	adds	r3, #1
 800a93a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4a13      	ldr	r2, [pc, #76]	; (800a98c <USB_FlushTxFifo+0x64>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d901      	bls.n	800a948 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a944:	2303      	movs	r3, #3
 800a946:	e01b      	b.n	800a980 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	daf2      	bge.n	800a936 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a950:	2300      	movs	r3, #0
 800a952:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	019b      	lsls	r3, r3, #6
 800a958:	f043 0220 	orr.w	r2, r3, #32
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	3301      	adds	r3, #1
 800a964:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	4a08      	ldr	r2, [pc, #32]	; (800a98c <USB_FlushTxFifo+0x64>)
 800a96a:	4293      	cmp	r3, r2
 800a96c:	d901      	bls.n	800a972 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e006      	b.n	800a980 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0320 	and.w	r3, r3, #32
 800a97a:	2b20      	cmp	r3, #32
 800a97c:	d0f0      	beq.n	800a960 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a97e:	2300      	movs	r3, #0
}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	00030d40 	.word	0x00030d40

0800a990 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a990:	b480      	push	{r7}
 800a992:	b085      	sub	sp, #20
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a998:	2300      	movs	r3, #0
 800a99a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3301      	adds	r3, #1
 800a9a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	4a11      	ldr	r2, [pc, #68]	; (800a9ec <USB_FlushRxFifo+0x5c>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d901      	bls.n	800a9ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e018      	b.n	800a9e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	691b      	ldr	r3, [r3, #16]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	daf2      	bge.n	800a99c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2210      	movs	r2, #16
 800a9be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	4a08      	ldr	r2, [pc, #32]	; (800a9ec <USB_FlushRxFifo+0x5c>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d901      	bls.n	800a9d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e006      	b.n	800a9e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	f003 0310 	and.w	r3, r3, #16
 800a9da:	2b10      	cmp	r3, #16
 800a9dc:	d0f0      	beq.n	800a9c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr
 800a9ec:	00030d40 	.word	0x00030d40

0800a9f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b085      	sub	sp, #20
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
 800a9f8:	460b      	mov	r3, r1
 800a9fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	78fb      	ldrb	r3, [r7, #3]
 800aa0a:	68f9      	ldr	r1, [r7, #12]
 800aa0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa10:	4313      	orrs	r3, r2
 800aa12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3714      	adds	r7, #20
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr

0800aa22 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b085      	sub	sp, #20
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	68fa      	ldr	r2, [r7, #12]
 800aa38:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800aa3c:	f023 0303 	bic.w	r3, r3, #3
 800aa40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa50:	f043 0302 	orr.w	r3, r3, #2
 800aa54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa56:	2300      	movs	r3, #0
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	695b      	ldr	r3, [r3, #20]
 800aa70:	f003 0301 	and.w	r3, r3, #1
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b085      	sub	sp, #20
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa88:	2300      	movs	r3, #0
 800aa8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	4a13      	ldr	r2, [pc, #76]	; (800aae4 <USB_CoreReset+0x64>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d901      	bls.n	800aa9e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e01b      	b.n	800aad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	daf2      	bge.n	800aa8c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	691b      	ldr	r3, [r3, #16]
 800aaae:	f043 0201 	orr.w	r2, r3, #1
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	4a09      	ldr	r2, [pc, #36]	; (800aae4 <USB_CoreReset+0x64>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d901      	bls.n	800aac8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aac4:	2303      	movs	r3, #3
 800aac6:	e006      	b.n	800aad6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	f003 0301 	and.w	r3, r3, #1
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d0f0      	beq.n	800aab6 <USB_CoreReset+0x36>

  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	00030d40 	.word	0x00030d40

0800aae8 <__libc_init_array>:
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	4d0d      	ldr	r5, [pc, #52]	; (800ab20 <__libc_init_array+0x38>)
 800aaec:	4c0d      	ldr	r4, [pc, #52]	; (800ab24 <__libc_init_array+0x3c>)
 800aaee:	1b64      	subs	r4, r4, r5
 800aaf0:	10a4      	asrs	r4, r4, #2
 800aaf2:	2600      	movs	r6, #0
 800aaf4:	42a6      	cmp	r6, r4
 800aaf6:	d109      	bne.n	800ab0c <__libc_init_array+0x24>
 800aaf8:	4d0b      	ldr	r5, [pc, #44]	; (800ab28 <__libc_init_array+0x40>)
 800aafa:	4c0c      	ldr	r4, [pc, #48]	; (800ab2c <__libc_init_array+0x44>)
 800aafc:	f000 f820 	bl	800ab40 <_init>
 800ab00:	1b64      	subs	r4, r4, r5
 800ab02:	10a4      	asrs	r4, r4, #2
 800ab04:	2600      	movs	r6, #0
 800ab06:	42a6      	cmp	r6, r4
 800ab08:	d105      	bne.n	800ab16 <__libc_init_array+0x2e>
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab10:	4798      	blx	r3
 800ab12:	3601      	adds	r6, #1
 800ab14:	e7ee      	b.n	800aaf4 <__libc_init_array+0xc>
 800ab16:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab1a:	4798      	blx	r3
 800ab1c:	3601      	adds	r6, #1
 800ab1e:	e7f2      	b.n	800ab06 <__libc_init_array+0x1e>
 800ab20:	0800c14c 	.word	0x0800c14c
 800ab24:	0800c14c 	.word	0x0800c14c
 800ab28:	0800c14c 	.word	0x0800c14c
 800ab2c:	0800c150 	.word	0x0800c150

0800ab30 <memset>:
 800ab30:	4402      	add	r2, r0
 800ab32:	4603      	mov	r3, r0
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d100      	bne.n	800ab3a <memset+0xa>
 800ab38:	4770      	bx	lr
 800ab3a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab3e:	e7f9      	b.n	800ab34 <memset+0x4>

0800ab40 <_init>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr

0800ab4c <_fini>:
 800ab4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab4e:	bf00      	nop
 800ab50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab52:	bc08      	pop	{r3}
 800ab54:	469e      	mov	lr, r3
 800ab56:	4770      	bx	lr
