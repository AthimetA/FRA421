
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc78  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0800bf18  0800bf18  0001bf18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d5b4  0800d5b4  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800d5b4  0800d5b4  0001d5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d5bc  0800d5bc  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d5bc  0800d5bc  0001d5bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d5c0  0800d5c0  0001d5c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800d5c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800d648  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800d6a8  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000c80  24000144  0800d708  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000dc4  0800d708  00020dc4  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f9d8  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003678  00000000  00000000  0003fb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001460  00000000  00000000  000431c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001388  00000000  00000000  00044628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c561  00000000  00000000  000459b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c3b0  00000000  00000000  00081f11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187255  00000000  00000000  0009e2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00225516  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005a10  00000000  00000000  00225568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bf00 	.word	0x0800bf00

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800bf00 	.word	0x0800bf00

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <YUGIOH_Clear_Card_Bufffer_Player>:
	// Stand Position and target Position Will be assign outside this function
	card->standPosition = 255;
	card->targetPosition = 255;
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000752:	b580      	push	{r7, lr}
 8000754:	b088      	sub	sp, #32
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800076e:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000770:	2300      	movs	r3, #0
 8000772:	76fb      	strb	r3, [r7, #27]
 8000774:	e00b      	b.n	800078e <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	69f9      	ldr	r1, [r7, #28]
 800077c:	4618      	mov	r0, r3
 800077e:	f7ff ff81 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	3310      	adds	r3, #16
 8000786:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000788:	7efb      	ldrb	r3, [r7, #27]
 800078a:	3301      	adds	r3, #1
 800078c:	76fb      	strb	r3, [r7, #27]
 800078e:	7efb      	ldrb	r3, [r7, #27]
 8000790:	2b05      	cmp	r3, #5
 8000792:	d9f0      	bls.n	8000776 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	3720      	adds	r7, #32
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}

0800079e <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 800079e:	b580      	push	{r7, lr}
 80007a0:	b088      	sub	sp, #32
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80007a6:	f107 0308 	add.w	r3, r7, #8
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80007ba:	61fb      	str	r3, [r7, #28]

		for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80007bc:	2300      	movs	r3, #0
 80007be:	76fb      	strb	r3, [r7, #27]
 80007c0:	e00b      	b.n	80007da <YUGIOH_Clear_Card_All+0x3c>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007c2:	f107 0308 	add.w	r3, r7, #8
 80007c6:	69f9      	ldr	r1, [r7, #28]
 80007c8:	4618      	mov	r0, r3
 80007ca:	f7ff ff5b 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3310      	adds	r3, #16
 80007d2:	61fb      	str	r3, [r7, #28]
		for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80007d4:	7efb      	ldrb	r3, [r7, #27]
 80007d6:	3301      	adds	r3, #1
 80007d8:	76fb      	strb	r3, [r7, #27]
 80007da:	7efb      	ldrb	r3, [r7, #27]
 80007dc:	2b05      	cmp	r3, #5
 80007de:	d9f0      	bls.n	80007c2 <YUGIOH_Clear_Card_All+0x24>

		}
		ptrYUGIOHCard = player->GY;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3364      	adds	r3, #100	; 0x64
 80007e4:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007e6:	2300      	movs	r3, #0
 80007e8:	76bb      	strb	r3, [r7, #26]
 80007ea:	e00b      	b.n	8000804 <YUGIOH_Clear_Card_All+0x66>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007ec:	f107 0308 	add.w	r3, r7, #8
 80007f0:	69f9      	ldr	r1, [r7, #28]
 80007f2:	4618      	mov	r0, r3
 80007f4:	f7ff ff46 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	3310      	adds	r3, #16
 80007fc:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007fe:	7ebb      	ldrb	r3, [r7, #26]
 8000800:	3301      	adds	r3, #1
 8000802:	76bb      	strb	r3, [r7, #26]
 8000804:	7ebb      	ldrb	r3, [r7, #26]
 8000806:	2b13      	cmp	r3, #19
 8000808:	d9f0      	bls.n	80007ec <YUGIOH_Clear_Card_All+0x4e>
		}
		ptrYUGIOHCard = player->cardOnBoard;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	3304      	adds	r3, #4
 800080e:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000810:	2300      	movs	r3, #0
 8000812:	767b      	strb	r3, [r7, #25]
 8000814:	e00b      	b.n	800082e <YUGIOH_Clear_Card_All+0x90>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	69f9      	ldr	r1, [r7, #28]
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff31 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3310      	adds	r3, #16
 8000826:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 8000828:	7e7b      	ldrb	r3, [r7, #25]
 800082a:	3301      	adds	r3, #1
 800082c:	767b      	strb	r3, [r7, #25]
 800082e:	7e7b      	ldrb	r3, [r7, #25]
 8000830:	2b05      	cmp	r3, #5
 8000832:	d9f0      	bls.n	8000816 <YUGIOH_Clear_Card_All+0x78>
		}

		ptrYUGIOHCard = &player->CardInPlayed;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800083a:	61fb      	str	r3, [r7, #28]
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	69f9      	ldr	r1, [r7, #28]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff1e 	bl	8000684 <YUGIOH_card_copy>
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800085e:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8000866:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800086e:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000876:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000878:	2306      	movs	r3, #6
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	e00c      	b.n	8000898 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800087e:	6939      	ldr	r1, [r7, #16]
 8000880:	6978      	ldr	r0, [r7, #20]
 8000882:	f7ff feff 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	3b10      	subs	r3, #16
 800088a:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	3b10      	subs	r3, #16
 8000890:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	3b01      	subs	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dcef      	bgt.n	800087e <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 800089e:	bf00      	nop
 80008a0:	bf00      	nop
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af04      	add	r7, sp, #16
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	3304      	adds	r3, #4
 80008b6:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	3304      	adds	r3, #4
 80008bc:	613b      	str	r3, [r7, #16]

	ptrPlayer1 = &state_game->player[0];
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	3304      	adds	r3, #4
 80008c2:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 80008ca:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 80008d2:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 80008d4:	7bfb      	ldrb	r3, [r7, #15]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	f000 820b 	beq.w	8000cf2 <GAME_PLAY_Management+0x44a>
 80008dc:	2b02      	cmp	r3, #2
 80008de:	f300 8238 	bgt.w	8000d52 <GAME_PLAY_Management+0x4aa>
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d003      	beq.n	80008ee <GAME_PLAY_Management+0x46>
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	f000 81d3 	beq.w	8000c92 <GAME_PLAY_Management+0x3ea>
			state_game->F_flag = 0;
		}
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 80008ec:	e231      	b.n	8000d52 <GAME_PLAY_Management+0x4aa>
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008ee:	4baa      	ldr	r3, [pc, #680]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	9202      	str	r2, [sp, #8]
 80008f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f8:	9201      	str	r2, [sp, #4]
 80008fa:	685a      	ldr	r2, [r3, #4]
 80008fc:	9200      	str	r2, [sp, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4aa6      	ldr	r2, [pc, #664]	; (8000b9c <GAME_PLAY_Management+0x2f4>)
 8000902:	2105      	movs	r1, #5
 8000904:	2005      	movs	r0, #5
 8000906:	f001 fe86 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800090a:	4ba3      	ldr	r3, [pc, #652]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 800090c:	2200      	movs	r2, #0
 800090e:	9202      	str	r2, [sp, #8]
 8000910:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000914:	9201      	str	r2, [sp, #4]
 8000916:	685a      	ldr	r2, [r3, #4]
 8000918:	9200      	str	r2, [sp, #0]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4aa0      	ldr	r2, [pc, #640]	; (8000ba0 <GAME_PLAY_Management+0x2f8>)
 800091e:	210f      	movs	r1, #15
 8000920:	2000      	movs	r0, #0
 8000922:	f001 fe78 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000926:	4b9f      	ldr	r3, [pc, #636]	; (8000ba4 <GAME_PLAY_Management+0x2fc>)
 8000928:	2200      	movs	r2, #0
 800092a:	9202      	str	r2, [sp, #8]
 800092c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000930:	9201      	str	r2, [sp, #4]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	9200      	str	r2, [sp, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a9b      	ldr	r2, [pc, #620]	; (8000ba8 <GAME_PLAY_Management+0x300>)
 800093a:	2123      	movs	r1, #35	; 0x23
 800093c:	2008      	movs	r0, #8
 800093e:	f001 fe6a 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000942:	4b98      	ldr	r3, [pc, #608]	; (8000ba4 <GAME_PLAY_Management+0x2fc>)
 8000944:	2200      	movs	r2, #0
 8000946:	9202      	str	r2, [sp, #8]
 8000948:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800094c:	9201      	str	r2, [sp, #4]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	9200      	str	r2, [sp, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a95      	ldr	r2, [pc, #596]	; (8000bac <GAME_PLAY_Management+0x304>)
 8000956:	213c      	movs	r1, #60	; 0x3c
 8000958:	2019      	movs	r0, #25
 800095a:	f001 fe5c 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800095e:	4b8e      	ldr	r3, [pc, #568]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000960:	2200      	movs	r2, #0
 8000962:	9202      	str	r2, [sp, #8]
 8000964:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000968:	9201      	str	r2, [sp, #4]
 800096a:	685a      	ldr	r2, [r3, #4]
 800096c:	9200      	str	r2, [sp, #0]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a8b      	ldr	r2, [pc, #556]	; (8000ba0 <GAME_PLAY_Management+0x2f8>)
 8000972:	214b      	movs	r1, #75	; 0x4b
 8000974:	2000      	movs	r0, #0
 8000976:	f001 fe4e 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800097a:	4b87      	ldr	r3, [pc, #540]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 800097c:	2200      	movs	r2, #0
 800097e:	9202      	str	r2, [sp, #8]
 8000980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000984:	9201      	str	r2, [sp, #4]
 8000986:	685a      	ldr	r2, [r3, #4]
 8000988:	9200      	str	r2, [sp, #0]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a88      	ldr	r2, [pc, #544]	; (8000bb0 <GAME_PLAY_Management+0x308>)
 800098e:	215a      	movs	r1, #90	; 0x5a
 8000990:	2000      	movs	r0, #0
 8000992:	f001 fe40 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000996:	4b80      	ldr	r3, [pc, #512]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000998:	2200      	movs	r2, #0
 800099a:	9202      	str	r2, [sp, #8]
 800099c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009a0:	9201      	str	r2, [sp, #4]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	9200      	str	r2, [sp, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a82      	ldr	r2, [pc, #520]	; (8000bb4 <GAME_PLAY_Management+0x30c>)
 80009aa:	215a      	movs	r1, #90	; 0x5a
 80009ac:	205d      	movs	r0, #93	; 0x5d
 80009ae:	f001 fe32 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009b2:	4b79      	ldr	r3, [pc, #484]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	9202      	str	r2, [sp, #8]
 80009b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009bc:	9201      	str	r2, [sp, #4]
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a7c      	ldr	r2, [pc, #496]	; (8000bb8 <GAME_PLAY_Management+0x310>)
 80009c6:	2169      	movs	r1, #105	; 0x69
 80009c8:	2000      	movs	r0, #0
 80009ca:	f001 fe24 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009ce:	4b72      	ldr	r3, [pc, #456]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	9202      	str	r2, [sp, #8]
 80009d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009d8:	9201      	str	r2, [sp, #4]
 80009da:	685a      	ldr	r2, [r3, #4]
 80009dc:	9200      	str	r2, [sp, #0]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a76      	ldr	r2, [pc, #472]	; (8000bbc <GAME_PLAY_Management+0x314>)
 80009e2:	2169      	movs	r1, #105	; 0x69
 80009e4:	2064      	movs	r0, #100	; 0x64
 80009e6:	f001 fe16 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009ea:	4b6b      	ldr	r3, [pc, #428]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	9202      	str	r2, [sp, #8]
 80009f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009f4:	9201      	str	r2, [sp, #4]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	9200      	str	r2, [sp, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a70      	ldr	r2, [pc, #448]	; (8000bc0 <GAME_PLAY_Management+0x318>)
 80009fe:	2105      	movs	r1, #5
 8000a00:	2005      	movs	r0, #5
 8000a02:	f001 fe52 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a06:	4b64      	ldr	r3, [pc, #400]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	9202      	str	r2, [sp, #8]
 8000a0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a10:	9201      	str	r2, [sp, #4]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	9200      	str	r2, [sp, #0]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a61      	ldr	r2, [pc, #388]	; (8000ba0 <GAME_PLAY_Management+0x2f8>)
 8000a1a:	210f      	movs	r1, #15
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	f001 fe44 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000a22:	4b60      	ldr	r3, [pc, #384]	; (8000ba4 <GAME_PLAY_Management+0x2fc>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	9202      	str	r2, [sp, #8]
 8000a28:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000a2c:	9201      	str	r2, [sp, #4]
 8000a2e:	685a      	ldr	r2, [r3, #4]
 8000a30:	9200      	str	r2, [sp, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a5c      	ldr	r2, [pc, #368]	; (8000ba8 <GAME_PLAY_Management+0x300>)
 8000a36:	2123      	movs	r1, #35	; 0x23
 8000a38:	2008      	movs	r0, #8
 8000a3a:	f001 fe36 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000a3e:	4b59      	ldr	r3, [pc, #356]	; (8000ba4 <GAME_PLAY_Management+0x2fc>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	9202      	str	r2, [sp, #8]
 8000a44:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a48:	9201      	str	r2, [sp, #4]
 8000a4a:	685a      	ldr	r2, [r3, #4]
 8000a4c:	9200      	str	r2, [sp, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a56      	ldr	r2, [pc, #344]	; (8000bac <GAME_PLAY_Management+0x304>)
 8000a52:	213c      	movs	r1, #60	; 0x3c
 8000a54:	2014      	movs	r0, #20
 8000a56:	f001 fe28 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a5a:	4b4f      	ldr	r3, [pc, #316]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	9202      	str	r2, [sp, #8]
 8000a60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a64:	9201      	str	r2, [sp, #4]
 8000a66:	685a      	ldr	r2, [r3, #4]
 8000a68:	9200      	str	r2, [sp, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a4c      	ldr	r2, [pc, #304]	; (8000ba0 <GAME_PLAY_Management+0x2f8>)
 8000a6e:	214b      	movs	r1, #75	; 0x4b
 8000a70:	2000      	movs	r0, #0
 8000a72:	f001 fe1a 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a76:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	9202      	str	r2, [sp, #8]
 8000a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a80:	9201      	str	r2, [sp, #4]
 8000a82:	685a      	ldr	r2, [r3, #4]
 8000a84:	9200      	str	r2, [sp, #0]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a49      	ldr	r2, [pc, #292]	; (8000bb0 <GAME_PLAY_Management+0x308>)
 8000a8a:	215a      	movs	r1, #90	; 0x5a
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f001 fe0c 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000a92:	4b41      	ldr	r3, [pc, #260]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	9202      	str	r2, [sp, #8]
 8000a98:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000a9c:	9201      	str	r2, [sp, #4]
 8000a9e:	685a      	ldr	r2, [r3, #4]
 8000aa0:	9200      	str	r2, [sp, #0]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a43      	ldr	r2, [pc, #268]	; (8000bb4 <GAME_PLAY_Management+0x30c>)
 8000aa6:	215a      	movs	r1, #90	; 0x5a
 8000aa8:	205d      	movs	r0, #93	; 0x5d
 8000aaa:	f001 fdfe 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000aae:	4b3a      	ldr	r3, [pc, #232]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	9202      	str	r2, [sp, #8]
 8000ab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab8:	9201      	str	r2, [sp, #4]
 8000aba:	685a      	ldr	r2, [r3, #4]
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a3d      	ldr	r2, [pc, #244]	; (8000bb8 <GAME_PLAY_Management+0x310>)
 8000ac2:	2169      	movs	r1, #105	; 0x69
 8000ac4:	2000      	movs	r0, #0
 8000ac6:	f001 fdf0 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000aca:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	9202      	str	r2, [sp, #8]
 8000ad0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000ad4:	9201      	str	r2, [sp, #4]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	9200      	str	r2, [sp, #0]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a37      	ldr	r2, [pc, #220]	; (8000bbc <GAME_PLAY_Management+0x314>)
 8000ade:	2169      	movs	r1, #105	; 0x69
 8000ae0:	2064      	movs	r0, #100	; 0x64
 8000ae2:	f001 fde2 	bl	80026aa <ST7735_WriteString1>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000ae6:	2108      	movs	r1, #8
 8000ae8:	4836      	ldr	r0, [pc, #216]	; (8000bc4 <GAME_PLAY_Management+0x31c>)
 8000aea:	f005 fc3b 	bl	8006364 <HAL_GPIO_ReadPin>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	f040 80c9 	bne.w	8000c88 <GAME_PLAY_Management+0x3e0>
			ptrPlayer1->life_point = 4000;
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000afc:	805a      	strh	r2, [r3, #2]
			ptrPlayer2->life_point = 4000;
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000b04:	805a      	strh	r2, [r3, #2]
			ST7735_FillScreen(ST7735_BLACK);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f001 ff02 	bl	8002910 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f001 ff10 	bl	8002932 <ST7735_FillScreen1>
			ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	9202      	str	r2, [sp, #8]
 8000b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1c:	9201      	str	r2, [sp, #4]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	9200      	str	r2, [sp, #0]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a1d      	ldr	r2, [pc, #116]	; (8000b9c <GAME_PLAY_Management+0x2f4>)
 8000b26:	2105      	movs	r1, #5
 8000b28:	2005      	movs	r0, #5
 8000b2a:	f001 fd74 	bl	8002616 <ST7735_WriteString>
			ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	9202      	str	r2, [sp, #8]
 8000b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b38:	9201      	str	r2, [sp, #4]
 8000b3a:	685a      	ldr	r2, [r3, #4]
 8000b3c:	9200      	str	r2, [sp, #0]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <GAME_PLAY_Management+0x2f8>)
 8000b42:	210f      	movs	r1, #15
 8000b44:	2000      	movs	r0, #0
 8000b46:	f001 fd66 	bl	8002616 <ST7735_WriteString>
			ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b4a:	4b16      	ldr	r3, [pc, #88]	; (8000ba4 <GAME_PLAY_Management+0x2fc>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	9202      	str	r2, [sp, #8]
 8000b50:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b54:	9201      	str	r2, [sp, #4]
 8000b56:	685a      	ldr	r2, [r3, #4]
 8000b58:	9200      	str	r2, [sp, #0]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1a      	ldr	r2, [pc, #104]	; (8000bc8 <GAME_PLAY_Management+0x320>)
 8000b5e:	2123      	movs	r1, #35	; 0x23
 8000b60:	2019      	movs	r0, #25
 8000b62:	f001 fd58 	bl	8002616 <ST7735_WriteString>
			ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b66:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <GAME_PLAY_Management+0x2fc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	9202      	str	r2, [sp, #8]
 8000b6c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b70:	9201      	str	r2, [sp, #4]
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	9200      	str	r2, [sp, #0]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a14      	ldr	r2, [pc, #80]	; (8000bcc <GAME_PLAY_Management+0x324>)
 8000b7a:	213c      	movs	r1, #60	; 0x3c
 8000b7c:	2021      	movs	r0, #33	; 0x21
 8000b7e:	f001 fd4a 	bl	8002616 <ST7735_WriteString>
			ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <GAME_PLAY_Management+0x2f0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	9202      	str	r2, [sp, #8]
 8000b88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8c:	9201      	str	r2, [sp, #4]
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	9200      	str	r2, [sp, #0]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	e01c      	b.n	8000bd0 <GAME_PLAY_Management+0x328>
 8000b96:	bf00      	nop
 8000b98:	24000008 	.word	0x24000008
 8000b9c:	0800bf18 	.word	0x0800bf18
 8000ba0:	0800bf24 	.word	0x0800bf24
 8000ba4:	24000010 	.word	0x24000010
 8000ba8:	0800bf38 	.word	0x0800bf38
 8000bac:	0800bf44 	.word	0x0800bf44
 8000bb0:	0800bf4c 	.word	0x0800bf4c
 8000bb4:	0800bf5c 	.word	0x0800bf5c
 8000bb8:	0800bf64 	.word	0x0800bf64
 8000bbc:	0800bf74 	.word	0x0800bf74
 8000bc0:	0800bf78 	.word	0x0800bf78
 8000bc4:	58020000 	.word	0x58020000
 8000bc8:	0800bf84 	.word	0x0800bf84
 8000bcc:	0800bf8c 	.word	0x0800bf8c
 8000bd0:	4a62      	ldr	r2, [pc, #392]	; (8000d5c <GAME_PLAY_Management+0x4b4>)
 8000bd2:	214b      	movs	r1, #75	; 0x4b
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f001 fd1e 	bl	8002616 <ST7735_WriteString>
			ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bda:	4b61      	ldr	r3, [pc, #388]	; (8000d60 <GAME_PLAY_Management+0x4b8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	9202      	str	r2, [sp, #8]
 8000be0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be4:	9201      	str	r2, [sp, #4]
 8000be6:	685a      	ldr	r2, [r3, #4]
 8000be8:	9200      	str	r2, [sp, #0]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a5d      	ldr	r2, [pc, #372]	; (8000d64 <GAME_PLAY_Management+0x4bc>)
 8000bee:	2105      	movs	r1, #5
 8000bf0:	2005      	movs	r0, #5
 8000bf2:	f001 fd5a 	bl	80026aa <ST7735_WriteString1>
			ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bf6:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <GAME_PLAY_Management+0x4b8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	9202      	str	r2, [sp, #8]
 8000bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c00:	9201      	str	r2, [sp, #4]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	9200      	str	r2, [sp, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a54      	ldr	r2, [pc, #336]	; (8000d5c <GAME_PLAY_Management+0x4b4>)
 8000c0a:	210f      	movs	r1, #15
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f001 fd4c 	bl	80026aa <ST7735_WriteString1>
			ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000c12:	4b55      	ldr	r3, [pc, #340]	; (8000d68 <GAME_PLAY_Management+0x4c0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	9202      	str	r2, [sp, #8]
 8000c18:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	685a      	ldr	r2, [r3, #4]
 8000c20:	9200      	str	r2, [sp, #0]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a51      	ldr	r2, [pc, #324]	; (8000d6c <GAME_PLAY_Management+0x4c4>)
 8000c26:	2123      	movs	r1, #35	; 0x23
 8000c28:	2019      	movs	r0, #25
 8000c2a:	f001 fd3e 	bl	80026aa <ST7735_WriteString1>
			ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000c2e:	4b4e      	ldr	r3, [pc, #312]	; (8000d68 <GAME_PLAY_Management+0x4c0>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	9202      	str	r2, [sp, #8]
 8000c34:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c38:	9201      	str	r2, [sp, #4]
 8000c3a:	685a      	ldr	r2, [r3, #4]
 8000c3c:	9200      	str	r2, [sp, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a4b      	ldr	r2, [pc, #300]	; (8000d70 <GAME_PLAY_Management+0x4c8>)
 8000c42:	213c      	movs	r1, #60	; 0x3c
 8000c44:	2025      	movs	r0, #37	; 0x25
 8000c46:	f001 fd30 	bl	80026aa <ST7735_WriteString1>
			ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c4a:	4b45      	ldr	r3, [pc, #276]	; (8000d60 <GAME_PLAY_Management+0x4b8>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	9202      	str	r2, [sp, #8]
 8000c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c54:	9201      	str	r2, [sp, #4]
 8000c56:	685a      	ldr	r2, [r3, #4]
 8000c58:	9200      	str	r2, [sp, #0]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a3f      	ldr	r2, [pc, #252]	; (8000d5c <GAME_PLAY_Management+0x4b4>)
 8000c5e:	214b      	movs	r1, #75	; 0x4b
 8000c60:	2000      	movs	r0, #0
 8000c62:	f001 fd22 	bl	80026aa <ST7735_WriteString1>
			HAL_Delay(3000);
 8000c66:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c6a:	f002 fa2d 	bl	80030c8 <HAL_Delay>
			ST7735_FillScreen(ST7735_BLACK);
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f001 fe4e 	bl	8002910 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000c74:	2000      	movs	r0, #0
 8000c76:	f001 fe5c 	bl	8002932 <ST7735_FillScreen1>
			MainGUI();
 8000c7a:	f000 fe4b 	bl	8001914 <MainGUI>
			state_game->player_state = first_player;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	2201      	movs	r2, #1
 8000c82:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
		break;
 8000c86:	e064      	b.n	8000d52 <GAME_PLAY_Management+0x4aa>
			state_game->test = 98;
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	2262      	movs	r2, #98	; 0x62
 8000c8c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
		break;
 8000c90:	e05f      	b.n	8000d52 <GAME_PLAY_Management+0x4aa>
		if (state_game -> F_flag == 0){
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d125      	bne.n	8000ce8 <GAME_PLAY_Management+0x440>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000c9c:	4b32      	ldr	r3, [pc, #200]	; (8000d68 <GAME_PLAY_Management+0x4c0>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	9202      	str	r2, [sp, #8]
 8000ca2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000ca6:	9201      	str	r2, [sp, #4]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a31      	ldr	r2, [pc, #196]	; (8000d74 <GAME_PLAY_Management+0x4cc>)
 8000cb0:	215a      	movs	r1, #90	; 0x5a
 8000cb2:	200f      	movs	r0, #15
 8000cb4:	f001 fcf9 	bl	80026aa <ST7735_WriteString1>
			HAL_Delay(2000);
 8000cb8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cbc:	f002 fa04 	bl	80030c8 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	9300      	str	r3, [sp, #0]
 8000cc4:	2326      	movs	r3, #38	; 0x26
 8000cc6:	2280      	movs	r2, #128	; 0x80
 8000cc8:	215a      	movs	r1, #90	; 0x5a
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f001 fdac 	bl	8002828 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f893 3439 	ldrb.w	r3, [r3, #1081]	; 0x439
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
			state_game->S_flag = 0;
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000ce8:	6839      	ldr	r1, [r7, #0]
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f000 f844 	bl	8000d78 <GAME_PLAY_Phase_Management>
		break;
 8000cf0:	e02f      	b.n	8000d52 <GAME_PLAY_Management+0x4aa>
		if (state_game -> S_flag == 0){
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d125      	bne.n	8000d48 <GAME_PLAY_Management+0x4a0>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <GAME_PLAY_Management+0x4c0>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	9202      	str	r2, [sp, #8]
 8000d02:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000d06:	9201      	str	r2, [sp, #4]
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	9200      	str	r2, [sp, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <GAME_PLAY_Management+0x4cc>)
 8000d10:	215a      	movs	r1, #90	; 0x5a
 8000d12:	200f      	movs	r0, #15
 8000d14:	f001 fc7f 	bl	8002616 <ST7735_WriteString>
			HAL_Delay(2000);
 8000d18:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d1c:	f002 f9d4 	bl	80030c8 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000d20:	2300      	movs	r3, #0
 8000d22:	9300      	str	r3, [sp, #0]
 8000d24:	2326      	movs	r3, #38	; 0x26
 8000d26:	2280      	movs	r2, #128	; 0x80
 8000d28:	215a      	movs	r1, #90	; 0x5a
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f001 fd08 	bl	8002740 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	f893 343a 	ldrb.w	r3, [r3, #1082]	; 0x43a
 8000d36:	3301      	adds	r3, #1
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	f883 243a 	strb.w	r2, [r3, #1082]	; 0x43a
			state_game->F_flag = 0;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 2439 	strb.w	r2, [r3, #1081]	; 0x439
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000d48:	6839      	ldr	r1, [r7, #0]
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f000 f814 	bl	8000d78 <GAME_PLAY_Phase_Management>
		break;
 8000d50:	bf00      	nop
}
 8000d52:	bf00      	nop
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	0800bf24 	.word	0x0800bf24
 8000d60:	24000008 	.word	0x24000008
 8000d64:	0800bf78 	.word	0x0800bf78
 8000d68:	24000010 	.word	0x24000010
 8000d6c:	0800bf84 	.word	0x0800bf84
 8000d70:	0800bf94 	.word	0x0800bf94
 8000d74:	0800bf9c 	.word	0x0800bf9c

08000d78 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af04      	add	r7, sp, #16
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Winner
	} STATE;
	STATE = state_game->STATE;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	f893 3435 	ldrb.w	r3, [r3, #1077]	; 0x435
 8000d88:	75fb      	strb	r3, [r7, #23]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f893 3437 	ldrb.w	r3, [r3, #1079]	; 0x437
 8000d90:	75bb      	strb	r3, [r7, #22]

    enum _BATTLE {
    	selection, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
    } BATTLE;
    BATTLE = state_game->BATTLE;
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	f893 3436 	ldrb.w	r3, [r3, #1078]	; 0x436
 8000d98:	757b      	strb	r3, [r7, #21]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	3304      	adds	r3, #4
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
	Player *ptrPlayerDef = state_game->player;
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	3304      	adds	r3, #4
 8000da4:	623b      	str	r3, [r7, #32]

	if (state_game->player_state == first_player) {
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d107      	bne.n	8000dc0 <GAME_PLAY_Phase_Management+0x48>
		ptrPlayerAtk = &state_game->player[0];
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	3304      	adds	r3, #4
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
		ptrPlayerDef = &state_game->player[1];
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000dbc:	623b      	str	r3, [r7, #32]
 8000dbe:	e00b      	b.n	8000dd8 <GAME_PLAY_Phase_Management+0x60>
	} else if (state_game->player_state == second_player) {
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d106      	bne.n	8000dd8 <GAME_PLAY_Phase_Management+0x60>
		ptrPlayerAtk = &state_game->player[1];
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	f503 7307 	add.w	r3, r3, #540	; 0x21c
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
		ptrPlayerDef = &state_game->player[0];
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	623b      	str	r3, [r7, #32]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000dd8:	7dfb      	ldrb	r3, [r7, #23]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	f200 8505 	bhi.w	80017ea <GAME_PLAY_Phase_Management+0xa72>
 8000de0:	a201      	add	r2, pc, #4	; (adr r2, 8000de8 <GAME_PLAY_Phase_Management+0x70>)
 8000de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000df9 	.word	0x08000df9
 8000dec:	08000f27 	.word	0x08000f27
 8000df0:	08001407 	.word	0x08001407
 8000df4:	080017b5 	.word	0x080017b5
	case Drawn_Phase:
		//		ST7735_FillScreen(ST7735_BLACK);
		//		ST7735_FillScreen1(ST7735_BLACK);
		//		// MAIN display for draw phase state
		sprintf(C_LP2, "%d",ptrPlayerDef -> life_point);
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	885b      	ldrh	r3, [r3, #2]
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	49a5      	ldr	r1, [pc, #660]	; (8001094 <GAME_PLAY_Phase_Management+0x31c>)
 8000e00:	48a5      	ldr	r0, [pc, #660]	; (8001098 <GAME_PLAY_Phase_Management+0x320>)
 8000e02:	f00a fcff 	bl	800b804 <siprintf>
		ST7735_WriteString( 90, 20, C_LP2, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e06:	4ba5      	ldr	r3, [pc, #660]	; (800109c <GAME_PLAY_Phase_Management+0x324>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	9202      	str	r2, [sp, #8]
 8000e0c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e10:	9201      	str	r2, [sp, #4]
 8000e12:	685a      	ldr	r2, [r3, #4]
 8000e14:	9200      	str	r2, [sp, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a9f      	ldr	r2, [pc, #636]	; (8001098 <GAME_PLAY_Phase_Management+0x320>)
 8000e1a:	2114      	movs	r1, #20
 8000e1c:	205a      	movs	r0, #90	; 0x5a
 8000e1e:	f001 fbfa 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000e22:	4b9e      	ldr	r3, [pc, #632]	; (800109c <GAME_PLAY_Phase_Management+0x324>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	9202      	str	r2, [sp, #8]
 8000e28:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e2c:	9201      	str	r2, [sp, #4]
 8000e2e:	685a      	ldr	r2, [r3, #4]
 8000e30:	9200      	str	r2, [sp, #0]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a9a      	ldr	r2, [pc, #616]	; (80010a0 <GAME_PLAY_Phase_Management+0x328>)
 8000e36:	2123      	movs	r1, #35	; 0x23
 8000e38:	203c      	movs	r0, #60	; 0x3c
 8000e3a:	f001 fbec 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e3e:	4b97      	ldr	r3, [pc, #604]	; (800109c <GAME_PLAY_Phase_Management+0x324>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	9202      	str	r2, [sp, #8]
 8000e44:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e48:	9201      	str	r2, [sp, #4]
 8000e4a:	685a      	ldr	r2, [r3, #4]
 8000e4c:	9200      	str	r2, [sp, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a94      	ldr	r2, [pc, #592]	; (80010a4 <GAME_PLAY_Phase_Management+0x32c>)
 8000e52:	2132      	movs	r1, #50	; 0x32
 8000e54:	2069      	movs	r0, #105	; 0x69
 8000e56:	f001 fbde 	bl	8002616 <ST7735_WriteString>
		ST7735_WriteString(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e5a:	4b90      	ldr	r3, [pc, #576]	; (800109c <GAME_PLAY_Phase_Management+0x324>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	9202      	str	r2, [sp, #8]
 8000e60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e64:	9201      	str	r2, [sp, #4]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	9200      	str	r2, [sp, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a8e      	ldr	r2, [pc, #568]	; (80010a8 <GAME_PLAY_Phase_Management+0x330>)
 8000e6e:	215a      	movs	r1, #90	; 0x5a
 8000e70:	2005      	movs	r0, #5
 8000e72:	f001 fbd0 	bl	8002616 <ST7735_WriteString>
		sprintf(C_LP1, "%d",ptrPlayerAtk -> life_point);
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	885b      	ldrh	r3, [r3, #2]
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	4985      	ldr	r1, [pc, #532]	; (8001094 <GAME_PLAY_Phase_Management+0x31c>)
 8000e7e:	488b      	ldr	r0, [pc, #556]	; (80010ac <GAME_PLAY_Phase_Management+0x334>)
 8000e80:	f00a fcc0 	bl	800b804 <siprintf>
		ST7735_WriteString1( 90, 20, C_LP1, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e84:	4b85      	ldr	r3, [pc, #532]	; (800109c <GAME_PLAY_Phase_Management+0x324>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	9202      	str	r2, [sp, #8]
 8000e8a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e8e:	9201      	str	r2, [sp, #4]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	9200      	str	r2, [sp, #0]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4a85      	ldr	r2, [pc, #532]	; (80010ac <GAME_PLAY_Phase_Management+0x334>)
 8000e98:	2114      	movs	r1, #20
 8000e9a:	205a      	movs	r0, #90	; 0x5a
 8000e9c:	f001 fc05 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000ea0:	4b7e      	ldr	r3, [pc, #504]	; (800109c <GAME_PLAY_Phase_Management+0x324>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	9202      	str	r2, [sp, #8]
 8000ea6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000eaa:	9201      	str	r2, [sp, #4]
 8000eac:	685a      	ldr	r2, [r3, #4]
 8000eae:	9200      	str	r2, [sp, #0]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a7b      	ldr	r2, [pc, #492]	; (80010a0 <GAME_PLAY_Phase_Management+0x328>)
 8000eb4:	2123      	movs	r1, #35	; 0x23
 8000eb6:	203c      	movs	r0, #60	; 0x3c
 8000eb8:	f001 fbf7 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000ebc:	4b77      	ldr	r3, [pc, #476]	; (800109c <GAME_PLAY_Phase_Management+0x324>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	9202      	str	r2, [sp, #8]
 8000ec2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000ec6:	9201      	str	r2, [sp, #4]
 8000ec8:	685a      	ldr	r2, [r3, #4]
 8000eca:	9200      	str	r2, [sp, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a75      	ldr	r2, [pc, #468]	; (80010a4 <GAME_PLAY_Phase_Management+0x32c>)
 8000ed0:	2132      	movs	r1, #50	; 0x32
 8000ed2:	2069      	movs	r0, #105	; 0x69
 8000ed4:	f001 fbe9 	bl	80026aa <ST7735_WriteString1>
		ST7735_WriteString1(5, 90, "Draw a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ed8:	4b70      	ldr	r3, [pc, #448]	; (800109c <GAME_PLAY_Phase_Management+0x324>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	9202      	str	r2, [sp, #8]
 8000ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ee2:	9201      	str	r2, [sp, #4]
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	9200      	str	r2, [sp, #0]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a71      	ldr	r2, [pc, #452]	; (80010b0 <GAME_PLAY_Phase_Management+0x338>)
 8000eec:	215a      	movs	r1, #90	; 0x5a
 8000eee:	2005      	movs	r0, #5
 8000ef0:	f001 fbdb 	bl	80026aa <ST7735_WriteString1>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	486f      	ldr	r0, [pc, #444]	; (80010b4 <GAME_PLAY_Phase_Management+0x33c>)
 8000ef8:	f005 fa34 	bl	8006364 <HAL_GPIO_ReadPin>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f040 846e 	bne.w	80017e0 <GAME_PLAY_Phase_Management+0xa68>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	2201      	movs	r2, #1
 8000f08:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
			state_game->MAIN = await;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	2200      	movs	r2, #0
 8000f18:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8000f1a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f1e:	f002 f8d3 	bl	80030c8 <HAL_Delay>
		}
		break;
 8000f22:	f000 bc5d 	b.w	80017e0 <GAME_PLAY_Phase_Management+0xa68>
	case Main_Phase:

		switch (MAIN)
 8000f26:	7dbb      	ldrb	r3, [r7, #22]
 8000f28:	2b06      	cmp	r3, #6
 8000f2a:	f200 845b 	bhi.w	80017e4 <GAME_PLAY_Phase_Management+0xa6c>
 8000f2e:	a201      	add	r2, pc, #4	; (adr r2, 8000f34 <GAME_PLAY_Phase_Management+0x1bc>)
 8000f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f34:	08000f51 	.word	0x08000f51
 8000f38:	08000f9d 	.word	0x08000f9d
 8000f3c:	080010c1 	.word	0x080010c1
 8000f40:	0800123f 	.word	0x0800123f
 8000f44:	080013eb 	.word	0x080013eb
 8000f48:	0800139d 	.word	0x0800139d
 8000f4c:	08001335 	.word	0x08001335
		{
		case await:
			if (state_game->action == 0)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d117      	bne.n	8000f88 <GAME_PLAY_Phase_Management+0x210>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000f58:	2101      	movs	r1, #1
 8000f5a:	4856      	ldr	r0, [pc, #344]	; (80010b4 <GAME_PLAY_Phase_Management+0x33c>)
 8000f5c:	f005 fa02 	bl	8006364 <HAL_GPIO_ReadPin>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10a      	bne.n	8000f7c <GAME_PLAY_Phase_Management+0x204>
						== GPIO_PIN_RESET){
					state_game->action =50;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2232      	movs	r2, #50	; 0x32
 8000f6a:	701a      	strb	r2, [r3, #0]
					state_game->STATE = Battle_Phase;
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	2202      	movs	r2, #2
 8000f70:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
					HAL_Delay(1500);
 8000f74:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f78:	f002 f8a6 	bl	80030c8 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f7e:	6839      	ldr	r1, [r7, #0]
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f000 fc39 	bl	80017f8 <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000f86:	e232      	b.n	80013ee <GAME_PLAY_Phase_Management+0x676>
			else if (state_game->action == 1)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 822e 	bne.w	80013ee <GAME_PLAY_Phase_Management+0x676>
				state_game->MAIN = select_position;
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	2201      	movs	r2, #1
 8000f96:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
			break;
 8000f9a:	e228      	b.n	80013ee <GAME_PLAY_Phase_Management+0x676>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8000fa2:	613b      	str	r3, [r7, #16]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8000fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8000faa:	61fb      	str	r3, [r7, #28]

			if (state_game->action == 1)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d15e      	bne.n	8001072 <GAME_PLAY_Phase_Management+0x2fa>
			{
				if (state_game->player_state == first_player)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d135      	bne.n	800102a <GAME_PLAY_Phase_Management+0x2b2>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	483c      	ldr	r0, [pc, #240]	; (80010b4 <GAME_PLAY_Phase_Management+0x33c>)
 8000fc2:	f005 f9cf 	bl	8006364 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d106      	bne.n	8000fda <GAME_PLAY_Phase_Management+0x262>
					{
						ptrYugiohCard_src->cardState = 1;
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 8000fd8:	e20b      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x67a>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000fda:	2102      	movs	r1, #2
 8000fdc:	4836      	ldr	r0, [pc, #216]	; (80010b8 <GAME_PLAY_Phase_Management+0x340>)
 8000fde:	f005 f9c1 	bl	8006364 <HAL_GPIO_ReadPin>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <GAME_PLAY_Phase_Management+0x27e>
						ptrYugiohCard_src->cardState = 0;
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	2200      	movs	r2, #0
 8000fec:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	701a      	strb	r2, [r3, #0]
			break;
 8000ff4:	e1fd      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x67a>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000ff6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ffa:	4830      	ldr	r0, [pc, #192]	; (80010bc <GAME_PLAY_Phase_Management+0x344>)
 8000ffc:	f005 f9b2 	bl	8006364 <HAL_GPIO_ReadPin>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d104      	bne.n	8001010 <GAME_PLAY_Phase_Management+0x298>
						state_game->test = 22;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	2216      	movs	r2, #22
 800100a:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
			break;
 800100e:	e1f0      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x67a>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8001010:	2104      	movs	r1, #4
 8001012:	4828      	ldr	r0, [pc, #160]	; (80010b4 <GAME_PLAY_Phase_Management+0x33c>)
 8001014:	f005 f9a6 	bl	8006364 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	f040 81e9 	bne.w	80013f2 <GAME_PLAY_Phase_Management+0x67a>
						state_game->test = 33;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2221      	movs	r2, #33	; 0x21
 8001024:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
			break;
 8001028:	e1e3      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x67a>
				else if (state_game->player_state == second_player)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8001030:	2b02      	cmp	r3, #2
 8001032:	f040 81de 	bne.w	80013f2 <GAME_PLAY_Phase_Management+0x67a>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8001036:	2104      	movs	r1, #4
 8001038:	481e      	ldr	r0, [pc, #120]	; (80010b4 <GAME_PLAY_Phase_Management+0x33c>)
 800103a:	f005 f993 	bl	8006364 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d106      	bne.n	8001052 <GAME_PLAY_Phase_Management+0x2da>
						ptrYugiohCard_src->cardState = 1;
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	2201      	movs	r2, #1
 8001048:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	2202      	movs	r2, #2
 800104e:	701a      	strb	r2, [r3, #0]
			break;
 8001050:	e1cf      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x67a>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8001052:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001056:	4819      	ldr	r0, [pc, #100]	; (80010bc <GAME_PLAY_Phase_Management+0x344>)
 8001058:	f005 f984 	bl	8006364 <HAL_GPIO_ReadPin>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 81c7 	bne.w	80013f2 <GAME_PLAY_Phase_Management+0x67a>
						ptrYugiohCard_src->cardState = 0;
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2200      	movs	r2, #0
 8001068:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	2202      	movs	r2, #2
 800106e:	701a      	strb	r2, [r3, #0]
			break;
 8001070:	e1bf      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x67a>
			else if (state_game->action == 2)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b02      	cmp	r3, #2
 8001078:	f040 81bb 	bne.w	80013f2 <GAME_PLAY_Phase_Management+0x67a>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800107c:	69f9      	ldr	r1, [r7, #28]
 800107e:	6938      	ldr	r0, [r7, #16]
 8001080:	f7ff fb00 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	2203      	movs	r2, #3
 8001088:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	2202      	movs	r2, #2
 800108e:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
			break;
 8001092:	e1ae      	b.n	80013f2 <GAME_PLAY_Phase_Management+0x67a>
 8001094:	0800bfa8 	.word	0x0800bfa8
 8001098:	24000164 	.word	0x24000164
 800109c:	24000008 	.word	0x24000008
 80010a0:	0800bfac 	.word	0x0800bfac
 80010a4:	0800bf74 	.word	0x0800bf74
 80010a8:	0800bfb8 	.word	0x0800bfb8
 80010ac:	24000160 	.word	0x24000160
 80010b0:	0800bfc8 	.word	0x0800bfc8
 80010b4:	58020800 	.word	0x58020800
 80010b8:	58020400 	.word	0x58020400
 80010bc:	58021400 	.word	0x58021400
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 80010c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010c6:	613b      	str	r3, [r7, #16]

			if (state_game->action == 3)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	f040 8192 	bne.w	80013f6 <GAME_PLAY_Phase_Management+0x67e>
			{
				if (ptrYugiohCard_src->cardType == 3)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	785b      	ldrb	r3, [r3, #1]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d127      	bne.n	800112a <GAME_PLAY_Phase_Management+0x3b2>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	799a      	ldrb	r2, [r3, #6]
 80010de:	4bad      	ldr	r3, [pc, #692]	; (8001394 <GAME_PLAY_Phase_Management+0x61c>)
 80010e0:	fba3 1302 	umull	r1, r3, r3, r2
 80010e4:	0899      	lsrs	r1, r3, #2
 80010e6:	460b      	mov	r3, r1
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	440b      	add	r3, r1
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	1ad3      	subs	r3, r2, r3
 80010f0:	727b      	strb	r3, [r7, #9]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80010f2:	7a7b      	ldrb	r3, [r7, #9]
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f8:	4413      	add	r3, r2
 80010fa:	3304      	adds	r3, #4
 80010fc:	61fb      	str	r3, [r7, #28]

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80010fe:	69f9      	ldr	r1, [r7, #28]
 8001100:	6938      	ldr	r0, [r7, #16]
 8001102:	f7ff fabf 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001106:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001108:	f7ff fb23 	bl	8000752 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001112:	6939      	ldr	r1, [r7, #16]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fab5 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 8001128:	e165      	b.n	80013f6 <GAME_PLAY_Phase_Management+0x67e>
				else if (ptrYugiohCard_src->cardType == 2)
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	785b      	ldrb	r3, [r3, #1]
 800112e:	2b02      	cmp	r3, #2
 8001130:	d141      	bne.n	80011b6 <GAME_PLAY_Phase_Management+0x43e>
					state_game->count_chain = 1;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2201      	movs	r2, #1
 8001136:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->standPosition == 1){
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	799b      	ldrb	r3, [r3, #6]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d112      	bne.n	8001166 <GAME_PLAY_Phase_Management+0x3ee>
						state_game->test = 33;
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	2221      	movs	r2, #33	; 0x21
 8001144:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001148:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800114a:	f7ff fb02 	bl	8000752 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	2204      	movs	r2, #4
 8001152:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800115a:	61fb      	str	r3, [r7, #28]
						state_game->MAIN = chaining_main_DEF;
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2206      	movs	r2, #6
 8001160:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
			break;
 8001164:	e147      	b.n	80013f6 <GAME_PLAY_Phase_Management+0x67e>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	799a      	ldrb	r2, [r3, #6]
 800116a:	4b8a      	ldr	r3, [pc, #552]	; (8001394 <GAME_PLAY_Phase_Management+0x61c>)
 800116c:	fba3 1302 	umull	r1, r3, r3, r2
 8001170:	0899      	lsrs	r1, r3, #2
 8001172:	460b      	mov	r3, r1
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	440b      	add	r3, r1
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	72bb      	strb	r3, [r7, #10]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	011b      	lsls	r3, r3, #4
 8001182:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001184:	4413      	add	r3, r2
 8001186:	3304      	adds	r3, #4
 8001188:	61fb      	str	r3, [r7, #28]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800118a:	69f9      	ldr	r1, [r7, #28]
 800118c:	6938      	ldr	r0, [r7, #16]
 800118e:	f7ff fa79 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001192:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001194:	f7ff fadd 	bl	8000752 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800119a:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fa6f 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
			break;
 80011b4:	e11f      	b.n	80013f6 <GAME_PLAY_Phase_Management+0x67e>
				else if (ptrYugiohCard_src->cardType == 1)
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	785b      	ldrb	r3, [r3, #1]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	f040 811b 	bne.w	80013f6 <GAME_PLAY_Phase_Management+0x67e>
					state_game->test = 2;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2202      	movs	r2, #2
 80011c4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
					if (ptrYugiohCard_src->cardLevel < 7)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	78db      	ldrb	r3, [r3, #3]
 80011cc:	2b06      	cmp	r3, #6
 80011ce:	d82b      	bhi.n	8001228 <GAME_PLAY_Phase_Management+0x4b0>
						state_game->test = 1;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	2201      	movs	r2, #1
 80011d4:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	799a      	ldrb	r2, [r3, #6]
 80011dc:	4b6d      	ldr	r3, [pc, #436]	; (8001394 <GAME_PLAY_Phase_Management+0x61c>)
 80011de:	fba3 1302 	umull	r1, r3, r3, r2
 80011e2:	0899      	lsrs	r1, r3, #2
 80011e4:	460b      	mov	r3, r1
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	440b      	add	r3, r1
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	72fb      	strb	r3, [r7, #11]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f6:	4413      	add	r3, r2
 80011f8:	3304      	adds	r3, #4
 80011fa:	61fb      	str	r3, [r7, #28]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011fc:	69f9      	ldr	r1, [r7, #28]
 80011fe:	6938      	ldr	r0, [r7, #16]
 8001200:	f7ff fa40 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001204:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001206:	f7ff faa4 	bl	8000752 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001210:	6939      	ldr	r1, [r7, #16]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fa36 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
			break;
 8001226:	e0e6      	b.n	80013f6 <GAME_PLAY_Phase_Management+0x67e>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800122a:	f7ff fa92 	bl	8000752 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	2204      	movs	r2, #4
 8001232:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2203      	movs	r2, #3
 8001238:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
			break;
 800123c:	e0db      	b.n	80013f6 <GAME_PLAY_Phase_Management+0x67e>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 800123e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001240:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001244:	613b      	str	r3, [r7, #16]

			if (state_game->action == 4)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b04      	cmp	r3, #4
 800124c:	d105      	bne.n	800125a <GAME_PLAY_Phase_Management+0x4e2>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 800124e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001250:	6839      	ldr	r1, [r7, #0]
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f000 fad0 	bl	80017f8 <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
				}
			}
				break;
 8001258:	e0cf      	b.n	80013fa <GAME_PLAY_Phase_Management+0x682>
			else if (state_game->action == 5)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b05      	cmp	r3, #5
 8001260:	d105      	bne.n	800126e <GAME_PLAY_Phase_Management+0x4f6>
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001264:	6839      	ldr	r1, [r7, #0]
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 fac6 	bl	80017f8 <Player_Reading_Card>
				break;
 800126c:	e0c5      	b.n	80013fa <GAME_PLAY_Phase_Management+0x682>
			else if (state_game->action == 6)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b06      	cmp	r3, #6
 8001274:	f040 80c1 	bne.w	80013fa <GAME_PLAY_Phase_Management+0x682>
				uint8_t monsterflag = 0 ;
 8001278:	2300      	movs	r3, #0
 800127a:	76fb      	strb	r3, [r7, #27]
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 800127c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127e:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001282:	61fb      	str	r3, [r7, #28]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d802      	bhi.n	8001292 <GAME_PLAY_Phase_Management+0x51a>
					monsterflag += 1;
 800128c:	7efb      	ldrb	r3, [r7, #27]
 800128e:	3301      	adds	r3, #1
 8001290:	76fb      	strb	r3, [r7, #27]
				ptrYugiohCard_dst++;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3310      	adds	r3, #16
 8001296:	61fb      	str	r3, [r7, #28]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	78db      	ldrb	r3, [r3, #3]
 800129c:	2b04      	cmp	r3, #4
 800129e:	d802      	bhi.n	80012a6 <GAME_PLAY_Phase_Management+0x52e>
					monsterflag += 1;
 80012a0:	7efb      	ldrb	r3, [r7, #27]
 80012a2:	3301      	adds	r3, #1
 80012a4:	76fb      	strb	r3, [r7, #27]
				if (monsterflag == 2)
 80012a6:	7efb      	ldrb	r3, [r7, #27]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d135      	bne.n	8001318 <GAME_PLAY_Phase_Management+0x5a0>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	799a      	ldrb	r2, [r3, #6]
 80012b0:	4b38      	ldr	r3, [pc, #224]	; (8001394 <GAME_PLAY_Phase_Management+0x61c>)
 80012b2:	fba3 1302 	umull	r1, r3, r3, r2
 80012b6:	0899      	lsrs	r1, r3, #2
 80012b8:	460b      	mov	r3, r1
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	440b      	add	r3, r1
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	733b      	strb	r3, [r7, #12]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80012c4:	7b3b      	ldrb	r3, [r7, #12]
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ca:	4413      	add	r3, r2
 80012cc:	3304      	adds	r3, #4
 80012ce:	61fb      	str	r3, [r7, #28]
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80012d0:	69f9      	ldr	r1, [r7, #28]
 80012d2:	6938      	ldr	r0, [r7, #16]
 80012d4:	f7ff f9d6 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[0]);
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80012de:	4619      	mov	r1, r3
 80012e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012e2:	f000 fad5 	bl	8001890 <YUGIOH_To_GY>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[1]);
 80012e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e8:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 80012ec:	4619      	mov	r1, r3
 80012ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f0:	f000 face 	bl	8001890 <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80012f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012f6:	f7ff fa2c 	bl	8000752 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80012fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fc:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 8001300:	6939      	ldr	r1, [r7, #16]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f9be 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2200      	movs	r2, #0
 800130c:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
				break;
 8001316:	e070      	b.n	80013fa <GAME_PLAY_Phase_Management+0x682>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001318:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800131a:	f7ff fa1a 	bl	8000752 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 800131e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001320:	f503 72d2 	add.w	r2, r3, #420	; 0x1a4
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800132a:	4619      	mov	r1, r3
 800132c:	4610      	mov	r0, r2
 800132e:	f7ff f9a9 	bl	8000684 <YUGIOH_card_copy>
				break;
 8001332:	e062      	b.n	80013fa <GAME_PLAY_Phase_Management+0x682>
		case chaining_main_DEF:
			state_game->test = 34;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2222      	movs	r2, #34	; 0x22
 8001338:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
			if(state_game->action == 4)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d115      	bne.n	8001370 <GAME_PLAY_Phase_Management+0x5f8>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001346:	6839      	ldr	r1, [r7, #0]
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 fa55 	bl	80017f8 <Player_Reading_Card>
				state_game->test = 35;
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	2223      	movs	r2, #35	; 0x23
 8001352:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
				if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 8001356:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800135a:	480f      	ldr	r0, [pc, #60]	; (8001398 <GAME_PLAY_Phase_Management+0x620>)
 800135c:	f005 f802 	bl	8006364 <HAL_GPIO_ReadPin>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d14b      	bne.n	80013fe <GAME_PLAY_Phase_Management+0x686>
					state_game->MAIN = activate_effect;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	2204      	movs	r2, #4
 800136a:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
				//				ptrYugiohCard_dst++;
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 800136e:	e046      	b.n	80013fe <GAME_PLAY_Phase_Management+0x686>
			else if ((state_game->action == 5 )){
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b05      	cmp	r3, #5
 8001376:	d142      	bne.n	80013fe <GAME_PLAY_Phase_Management+0x686>
				state_game->count_chain += 1;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	3301      	adds	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_ATK;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	2205      	movs	r2, #5
 8001388:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
				state_game->action = 4;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	2204      	movs	r2, #4
 8001390:	701a      	strb	r2, [r3, #0]
			break;
 8001392:	e034      	b.n	80013fe <GAME_PLAY_Phase_Management+0x686>
 8001394:	aaaaaaab 	.word	0xaaaaaaab
 8001398:	58021400 	.word	0x58021400
		case chaining_main_ATK:
			if(state_game->action == 4)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b04      	cmp	r3, #4
 80013a2:	d110      	bne.n	80013c6 <GAME_PLAY_Phase_Management+0x64e>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80013a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013a6:	6839      	ldr	r1, [r7, #0]
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f000 fa25 	bl	80017f8 <Player_Reading_Card>
				if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 80013ae:	2102      	movs	r1, #2
 80013b0:	4892      	ldr	r0, [pc, #584]	; (80015fc <GAME_PLAY_Phase_Management+0x884>)
 80013b2:	f004 ffd7 	bl	8006364 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d122      	bne.n	8001402 <GAME_PLAY_Phase_Management+0x68a>
					state_game->MAIN = activate_effect;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	2204      	movs	r2, #4
 80013c0:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 80013c4:	e01d      	b.n	8001402 <GAME_PLAY_Phase_Management+0x68a>
			else if ((state_game->action == 5 )){
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d119      	bne.n	8001402 <GAME_PLAY_Phase_Management+0x68a>
				state_game->count_chain += 1;
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	785b      	ldrb	r3, [r3, #1]
 80013d2:	3301      	adds	r3, #1
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_DEF;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	2206      	movs	r2, #6
 80013de:	f883 2437 	strb.w	r2, [r3, #1079]	; 0x437
				state_game->action = 4;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2204      	movs	r2, #4
 80013e6:	701a      	strb	r2, [r3, #0]
			break;
 80013e8:	e00b      	b.n	8001402 <GAME_PLAY_Phase_Management+0x68a>
//				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
//				YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
//				state_game->action = 0;
//				state_game->MAIN = await;
//			}
			break;
 80013ea:	bf00      	nop
 80013ec:	e1fa      	b.n	80017e4 <GAME_PLAY_Phase_Management+0xa6c>
			break;
 80013ee:	bf00      	nop
 80013f0:	e1f8      	b.n	80017e4 <GAME_PLAY_Phase_Management+0xa6c>
			break;
 80013f2:	bf00      	nop
 80013f4:	e1f6      	b.n	80017e4 <GAME_PLAY_Phase_Management+0xa6c>
			break;
 80013f6:	bf00      	nop
 80013f8:	e1f4      	b.n	80017e4 <GAME_PLAY_Phase_Management+0xa6c>
				break;
 80013fa:	bf00      	nop
 80013fc:	e1f2      	b.n	80017e4 <GAME_PLAY_Phase_Management+0xa6c>
			break;
 80013fe:	bf00      	nop
 8001400:	e1f0      	b.n	80017e4 <GAME_PLAY_Phase_Management+0xa6c>
			break;
 8001402:	bf00      	nop
		}
		break;
 8001404:	e1ee      	b.n	80017e4 <GAME_PLAY_Phase_Management+0xa6c>
		case Battle_Phase:

			switch(BATTLE){
 8001406:	7d7b      	ldrb	r3, [r7, #21]
 8001408:	2b05      	cmp	r3, #5
 800140a:	f200 81d3 	bhi.w	80017b4 <GAME_PLAY_Phase_Management+0xa3c>
 800140e:	a201      	add	r2, pc, #4	; (adr r2, 8001414 <GAME_PLAY_Phase_Management+0x69c>)
 8001410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001414:	0800142d 	.word	0x0800142d
 8001418:	080015a9 	.word	0x080015a9
 800141c:	0800153f 	.word	0x0800153f
 8001420:	080017b5 	.word	0x080017b5
 8001424:	08001609 	.word	0x08001609
 8001428:	0800176b 	.word	0x0800176b
			case selection:
				//ATK action 50
				if(state_game->action == 50){
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b32      	cmp	r3, #50	; 0x32
 8001432:	d129      	bne.n	8001488 <GAME_PLAY_Phase_Management+0x710>
					Player_Reading_Card(RFIDmain, state_game, ptrPlayerDef);
 8001434:	6a3a      	ldr	r2, [r7, #32]
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f9dd 	bl	80017f8 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800143e:	2101      	movs	r1, #1
 8001440:	486f      	ldr	r0, [pc, #444]	; (8001600 <GAME_PLAY_Phase_Management+0x888>)
 8001442:	f004 ff8f 	bl	8006364 <HAL_GPIO_ReadPin>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 81ac 	bne.w	80017a6 <GAME_PLAY_Phase_Management+0xa2e>
							== GPIO_PIN_RESET){
						if(state_game->player_state == first_player){
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	f893 3434 	ldrb.w	r3, [r3, #1076]	; 0x434
 8001454:	2b01      	cmp	r3, #1
 8001456:	d10b      	bne.n	8001470 <GAME_PLAY_Phase_Management+0x6f8>
							state_game->action = 0;
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
							state_game->player_state = second_player;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	2202      	movs	r2, #2
 8001462:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
							state_game->STATE = Drawn_Phase;
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
							break;
						}
						ptrYugiohCard_dst++;
					}
					}
			break;
 800146e:	e19a      	b.n	80017a6 <GAME_PLAY_Phase_Management+0xa2e>
							state_game->action = 0;
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
							state_game->player_state = first_player;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
							state_game->STATE = Drawn_Phase;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2200      	movs	r2, #0
 8001482:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
			break;
 8001486:	e18e      	b.n	80017a6 <GAME_PLAY_Phase_Management+0xa2e>
				else if(state_game->action == 51){
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b33      	cmp	r3, #51	; 0x33
 800148e:	f040 818a 	bne.w	80017a6 <GAME_PLAY_Phase_Management+0xa2e>
					uint8_t check_def_mon = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	76bb      	strb	r3, [r7, #26]
					ptrYugiohCard_src = &ptrPlayerDef->cardOnBoard[3];
 8001496:	6a3b      	ldr	r3, [r7, #32]
 8001498:	3334      	adds	r3, #52	; 0x34
 800149a:	613b      	str	r3, [r7, #16]
					for(uint8_t i = 0;i < 3; ++i){
 800149c:	2300      	movs	r3, #0
 800149e:	767b      	strb	r3, [r7, #25]
 80014a0:	e009      	b.n	80014b6 <GAME_PLAY_Phase_Management+0x73e>
						if(ptrYugiohCard_src->cardData == 0){
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d102      	bne.n	80014b0 <GAME_PLAY_Phase_Management+0x738>
							check_def_mon++;
 80014aa:	7ebb      	ldrb	r3, [r7, #26]
 80014ac:	3301      	adds	r3, #1
 80014ae:	76bb      	strb	r3, [r7, #26]
					for(uint8_t i = 0;i < 3; ++i){
 80014b0:	7e7b      	ldrb	r3, [r7, #25]
 80014b2:	3301      	adds	r3, #1
 80014b4:	767b      	strb	r3, [r7, #25]
 80014b6:	7e7b      	ldrb	r3, [r7, #25]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d9f2      	bls.n	80014a2 <GAME_PLAY_Phase_Management+0x72a>
					ptrYugiohCard_src = &ptrPlayerDef->ChainBuffer[0];
 80014bc:	6a3b      	ldr	r3, [r7, #32]
 80014be:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 80014c2:	613b      	str	r3, [r7, #16]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[3];
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	3334      	adds	r3, #52	; 0x34
 80014c8:	61fb      	str	r3, [r7, #28]
					for (uint8_t i = 0;i < 3; ++i) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	763b      	strb	r3, [r7, #24]
 80014ce:	e030      	b.n	8001532 <GAME_PLAY_Phase_Management+0x7ba>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	68da      	ldr	r2, [r3, #12]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d124      	bne.n	8001526 <GAME_PLAY_Phase_Management+0x7ae>
							if(ptrYugiohCard_dst->cardState == 1){
 80014dc:	69fb      	ldr	r3, [r7, #28]
 80014de:	789b      	ldrb	r3, [r3, #2]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d12a      	bne.n	800153a <GAME_PLAY_Phase_Management+0x7c2>
								YUGIOH_card_copy(ptrYugiohCard_dst, &ptrPlayerAtk->CardInPlayed);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014ea:	4619      	mov	r1, r3
 80014ec:	69f8      	ldr	r0, [r7, #28]
 80014ee:	f7ff f8c9 	bl	8000684 <YUGIOH_card_copy>
								ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014f8:	61fb      	str	r3, [r7, #28]
								if(check_def_mon == 3){
 80014fa:	7ebb      	ldrb	r3, [r7, #26]
 80014fc:	2b03      	cmp	r3, #3
 80014fe:	d103      	bne.n	8001508 <GAME_PLAY_Phase_Management+0x790>
									ptrYugiohCard_dst->targetPosition = 99;
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	2263      	movs	r2, #99	; 0x63
 8001504:	71da      	strb	r2, [r3, #7]
 8001506:	e003      	b.n	8001510 <GAME_PLAY_Phase_Management+0x798>
									ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	799a      	ldrb	r2, [r3, #6]
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerDef);
 8001510:	6a38      	ldr	r0, [r7, #32]
 8001512:	f7ff f91e 	bl	8000752 <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2234      	movs	r2, #52	; 0x34
 800151a:	701a      	strb	r2, [r3, #0]
								state_game->BATTLE = counter_DEF;
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
							break;
 8001524:	e009      	b.n	800153a <GAME_PLAY_Phase_Management+0x7c2>
						ptrYugiohCard_dst++;
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3310      	adds	r3, #16
 800152a:	61fb      	str	r3, [r7, #28]
					for (uint8_t i = 0;i < 3; ++i) {
 800152c:	7e3b      	ldrb	r3, [r7, #24]
 800152e:	3301      	adds	r3, #1
 8001530:	763b      	strb	r3, [r7, #24]
 8001532:	7e3b      	ldrb	r3, [r7, #24]
 8001534:	2b02      	cmp	r3, #2
 8001536:	d9cb      	bls.n	80014d0 <GAME_PLAY_Phase_Management+0x758>
			break;
 8001538:	e135      	b.n	80017a6 <GAME_PLAY_Phase_Management+0xa2e>
							break;
 800153a:	bf00      	nop
			break;
 800153c:	e133      	b.n	80017a6 <GAME_PLAY_Phase_Management+0xa2e>
			case counter_DEF:
				//action 52
//				state_game->test = 34;
				if(state_game->action == 52)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b34      	cmp	r3, #52	; 0x34
 8001544:	d11d      	bne.n	8001582 <GAME_PLAY_Phase_Management+0x80a>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001548:	6839      	ldr	r1, [r7, #0]
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f000 f954 	bl	80017f8 <Player_Reading_Card>
//					state_game->test = 35;
					if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 8001550:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001554:	482b      	ldr	r0, [pc, #172]	; (8001604 <GAME_PLAY_Phase_Management+0x88c>)
 8001556:	f004 ff05 	bl	8006364 <HAL_GPIO_ReadPin>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <GAME_PLAY_Phase_Management+0x7f0>
						state_game->BATTLE = calculate_damage;
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2204      	movs	r2, #4
 8001564:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
					}
					if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 8001568:	2102      	movs	r1, #2
 800156a:	4824      	ldr	r0, [pc, #144]	; (80015fc <GAME_PLAY_Phase_Management+0x884>)
 800156c:	f004 fefa 	bl	8006364 <HAL_GPIO_ReadPin>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 8119 	bne.w	80017aa <GAME_PLAY_Phase_Management+0xa32>
						state_game->BATTLE = calculate_damage;
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2204      	movs	r2, #4
 800157c:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->BATTLE = counter_ATK;
					state_game->action = 54;
				}
				break;
 8001580:	e113      	b.n	80017aa <GAME_PLAY_Phase_Management+0xa32>
				else if ((state_game->action == 53 )){
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b35      	cmp	r3, #53	; 0x35
 8001588:	f040 810f 	bne.w	80017aa <GAME_PLAY_Phase_Management+0xa32>
					state_game->count_chain += 1;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	785b      	ldrb	r3, [r3, #1]
 8001590:	3301      	adds	r3, #1
 8001592:	b2da      	uxtb	r2, r3
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_ATK;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
					state_game->action = 54;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	2236      	movs	r2, #54	; 0x36
 80015a4:	701a      	strb	r2, [r3, #0]
				break;
 80015a6:	e100      	b.n	80017aa <GAME_PLAY_Phase_Management+0xa32>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b36      	cmp	r3, #54	; 0x36
 80015ae:	d111      	bne.n	80015d4 <GAME_PLAY_Phase_Management+0x85c>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80015b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b2:	6839      	ldr	r1, [r7, #0]
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f000 f91f 	bl	80017f8 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 80015ba:	2102      	movs	r1, #2
 80015bc:	480f      	ldr	r0, [pc, #60]	; (80015fc <GAME_PLAY_Phase_Management+0x884>)
 80015be:	f004 fed1 	bl	8006364 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	f040 80f2 	bne.w	80017ae <GAME_PLAY_Phase_Management+0xa36>
						state_game->BATTLE = calculate_damage;
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2204      	movs	r2, #4
 80015ce:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->BATTLE = counter_DEF;
					state_game->action = 52;
				}
				break;
 80015d2:	e0ec      	b.n	80017ae <GAME_PLAY_Phase_Management+0xa36>
				else if ((state_game->action == 55 )){
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	2b37      	cmp	r3, #55	; 0x37
 80015da:	f040 80e8 	bne.w	80017ae <GAME_PLAY_Phase_Management+0xa36>
					state_game->count_chain += 1;
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	785b      	ldrb	r3, [r3, #1]
 80015e2:	3301      	adds	r3, #1
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_DEF;
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	2202      	movs	r2, #2
 80015ee:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
					state_game->action = 52;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	2234      	movs	r2, #52	; 0x34
 80015f6:	701a      	strb	r2, [r3, #0]
				break;
 80015f8:	e0d9      	b.n	80017ae <GAME_PLAY_Phase_Management+0xa36>
 80015fa:	bf00      	nop
 80015fc:	58020400 	.word	0x58020400
 8001600:	58020800 	.word	0x58020800
 8001604:	58021400 	.word	0x58021400
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800160e:	613b      	str	r3, [r7, #16]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	791b      	ldrb	r3, [r3, #4]
 8001614:	73fb      	strb	r3, [r7, #15]

				if(ptrYugiohCard_src->targetPosition == 99){
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	79db      	ldrb	r3, [r3, #7]
 800161a:	2b63      	cmp	r3, #99	; 0x63
 800161c:	d114      	bne.n	8001648 <GAME_PLAY_Phase_Management+0x8d0>
					ptrPlayerDef->life_point -= atk*100;
 800161e:	6a3b      	ldr	r3, [r7, #32]
 8001620:	885a      	ldrh	r2, [r3, #2]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4619      	mov	r1, r3
 8001628:	0249      	lsls	r1, r1, #9
 800162a:	1ac9      	subs	r1, r1, r3
 800162c:	0089      	lsls	r1, r1, #2
 800162e:	4419      	add	r1, r3
 8001630:	00c9      	lsls	r1, r1, #3
 8001632:	1acb      	subs	r3, r1, r3
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	b29b      	uxth	r3, r3
 8001638:	4413      	add	r3, r2
 800163a:	b29a      	uxth	r2, r3
 800163c:	6a3b      	ldr	r3, [r7, #32]
 800163e:	805a      	strh	r2, [r3, #2]
					state_game->BATTLE = after_calculate;
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	2205      	movs	r2, #5
 8001644:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
				}

				ptrYugiohCard_dst = ptrPlayerDef->cardOnBoard;
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	3304      	adds	r3, #4
 800164c:	61fb      	str	r3, [r7, #28]

				ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	799b      	ldrb	r3, [r3, #6]
 8001652:	011b      	lsls	r3, r3, #4
 8001654:	6a3a      	ldr	r2, [r7, #32]
 8001656:	4413      	add	r3, r2
 8001658:	3304      	adds	r3, #4
 800165a:	61fb      	str	r3, [r7, #28]

				state_game->test = 54;
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	2236      	movs	r2, #54	; 0x36
 8001660:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
				if(ptrYugiohCard_dst->cardState == 0){
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	789b      	ldrb	r3, [r3, #2]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d12b      	bne.n	80016c4 <GAME_PLAY_Phase_Management+0x94c>
//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	795b      	ldrb	r3, [r3, #5]
 8001670:	737b      	strb	r3, [r7, #13]
					if(atk < def){
 8001672:	7bfa      	ldrb	r2, [r7, #15]
 8001674:	7b7b      	ldrb	r3, [r7, #13]
 8001676:	429a      	cmp	r2, r3
 8001678:	d217      	bcs.n	80016aa <GAME_PLAY_Phase_Management+0x932>
						ptrPlayerAtk->life_point -= (def-atk)*100;
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	885a      	ldrh	r2, [r3, #2]
 800167e:	7b79      	ldrb	r1, [r7, #13]
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	1acb      	subs	r3, r1, r3
 8001684:	b29b      	uxth	r3, r3
 8001686:	4619      	mov	r1, r3
 8001688:	0249      	lsls	r1, r1, #9
 800168a:	1ac9      	subs	r1, r1, r3
 800168c:	0089      	lsls	r1, r1, #2
 800168e:	4419      	add	r1, r3
 8001690:	00c9      	lsls	r1, r1, #3
 8001692:	1acb      	subs	r3, r1, r3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	b29b      	uxth	r3, r3
 8001698:	4413      	add	r3, r2
 800169a:	b29a      	uxth	r2, r3
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	805a      	strh	r2, [r3, #2]
						state_game->BATTLE = after_calculate;
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	2205      	movs	r2, #5
 80016a4:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
						ptrPlayerDef->life_point -= (atk-atk2)*100;
						state_game->BATTLE = after_calculate;
					}

				}
				break;
 80016a8:	e083      	b.n	80017b2 <GAME_PLAY_Phase_Management+0xa3a>
					else if(atk > def){
 80016aa:	7bfa      	ldrb	r2, [r7, #15]
 80016ac:	7b7b      	ldrb	r3, [r7, #13]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d97f      	bls.n	80017b2 <GAME_PLAY_Phase_Management+0xa3a>
						YUGIOH_To_GY(ptrPlayerDef, ptrYugiohCard_dst);
 80016b2:	69f9      	ldr	r1, [r7, #28]
 80016b4:	6a38      	ldr	r0, [r7, #32]
 80016b6:	f000 f8eb 	bl	8001890 <YUGIOH_To_GY>
						state_game->BATTLE = after_calculate;
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	2205      	movs	r2, #5
 80016be:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
				break;
 80016c2:	e076      	b.n	80017b2 <GAME_PLAY_Phase_Management+0xa3a>
				else if(ptrYugiohCard_dst->cardState == 1){
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	789b      	ldrb	r3, [r3, #2]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d172      	bne.n	80017b2 <GAME_PLAY_Phase_Management+0xa3a>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	791b      	ldrb	r3, [r3, #4]
 80016d0:	73bb      	strb	r3, [r7, #14]
					state_game->test = 60;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	223c      	movs	r2, #60	; 0x3c
 80016d6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
					if(atk < atk2){
 80016da:	7bfa      	ldrb	r2, [r7, #15]
 80016dc:	7bbb      	ldrb	r3, [r7, #14]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d21f      	bcs.n	8001722 <GAME_PLAY_Phase_Management+0x9aa>
						state_game->test = 61;
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	223d      	movs	r2, #61	; 0x3d
 80016e6:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
						ptrPlayerAtk->life_point -= (atk2-atk)*100;
 80016ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ec:	885a      	ldrh	r2, [r3, #2]
 80016ee:	7bb9      	ldrb	r1, [r7, #14]
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
 80016f2:	1acb      	subs	r3, r1, r3
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	4619      	mov	r1, r3
 80016f8:	0249      	lsls	r1, r1, #9
 80016fa:	1ac9      	subs	r1, r1, r3
 80016fc:	0089      	lsls	r1, r1, #2
 80016fe:	4419      	add	r1, r3
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	1acb      	subs	r3, r1, r3
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	b29b      	uxth	r3, r3
 8001708:	4413      	add	r3, r2
 800170a:	b29a      	uxth	r2, r3
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	805a      	strh	r2, [r3, #2]
						YUGIOH_To_GY(ptrPlayerAtk, ptrYugiohCard_src);
 8001710:	6939      	ldr	r1, [r7, #16]
 8001712:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001714:	f000 f8bc 	bl	8001890 <YUGIOH_To_GY>
						state_game->BATTLE = after_calculate;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	2205      	movs	r2, #5
 800171c:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
				break;
 8001720:	e047      	b.n	80017b2 <GAME_PLAY_Phase_Management+0xa3a>
					else if(atk > atk2){
 8001722:	7bfa      	ldrb	r2, [r7, #15]
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	429a      	cmp	r2, r3
 8001728:	d943      	bls.n	80017b2 <GAME_PLAY_Phase_Management+0xa3a>
						state_game->test = 70;
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	2246      	movs	r2, #70	; 0x46
 800172e:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
						YUGIOH_To_GY(ptrPlayerDef, ptrYugiohCard_dst);
 8001732:	69f9      	ldr	r1, [r7, #28]
 8001734:	6a38      	ldr	r0, [r7, #32]
 8001736:	f000 f8ab 	bl	8001890 <YUGIOH_To_GY>
						ptrPlayerDef->life_point -= (atk-atk2)*100;
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	885a      	ldrh	r2, [r3, #2]
 800173e:	7bf9      	ldrb	r1, [r7, #15]
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	1acb      	subs	r3, r1, r3
 8001744:	b29b      	uxth	r3, r3
 8001746:	4619      	mov	r1, r3
 8001748:	0249      	lsls	r1, r1, #9
 800174a:	1ac9      	subs	r1, r1, r3
 800174c:	0089      	lsls	r1, r1, #2
 800174e:	4419      	add	r1, r3
 8001750:	00c9      	lsls	r1, r1, #3
 8001752:	1acb      	subs	r3, r1, r3
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	b29b      	uxth	r3, r3
 8001758:	4413      	add	r3, r2
 800175a:	b29a      	uxth	r2, r3
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	805a      	strh	r2, [r3, #2]
						state_game->BATTLE = after_calculate;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	2205      	movs	r2, #5
 8001764:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
				break;
 8001768:	e023      	b.n	80017b2 <GAME_PLAY_Phase_Management+0xa3a>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001770:	613b      	str	r3, [r7, #16]
				YUGIOH_card_clear(ptrYugiohCard_src);
 8001772:	6938      	ldr	r0, [r7, #16]
 8001774:	f7fe ffbd 	bl	80006f2 <YUGIOH_card_clear>

				if(ptrPlayerDef->life_point == 0 || ptrPlayerDef->life_point >= 60000){
 8001778:	6a3b      	ldr	r3, [r7, #32]
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <GAME_PLAY_Phase_Management+0xa14>
 8001780:	6a3b      	ldr	r3, [r7, #32]
 8001782:	885b      	ldrh	r3, [r3, #2]
 8001784:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001788:	4293      	cmp	r3, r2
 800178a:	d904      	bls.n	8001796 <GAME_PLAY_Phase_Management+0xa1e>
					state_game->STATE = Winner;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	2203      	movs	r2, #3
 8001790:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
				}
				else{
					state_game->action = 50;
					state_game->BATTLE = selection;
				}
				break;
 8001794:	e00e      	b.n	80017b4 <GAME_PLAY_Phase_Management+0xa3c>
					state_game->action = 50;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2232      	movs	r2, #50	; 0x32
 800179a:	701a      	strb	r2, [r3, #0]
					state_game->BATTLE = selection;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2436 	strb.w	r2, [r3, #1078]	; 0x436
				break;
 80017a4:	e006      	b.n	80017b4 <GAME_PLAY_Phase_Management+0xa3c>
			break;
 80017a6:	bf00      	nop
 80017a8:	e004      	b.n	80017b4 <GAME_PLAY_Phase_Management+0xa3c>
				break;
 80017aa:	bf00      	nop
 80017ac:	e002      	b.n	80017b4 <GAME_PLAY_Phase_Management+0xa3c>
				break;
 80017ae:	bf00      	nop
 80017b0:	e000      	b.n	80017b4 <GAME_PLAY_Phase_Management+0xa3c>
				break;
 80017b2:	bf00      	nop
			}
		case Winner:
			if(HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 80017b4:	2108      	movs	r1, #8
 80017b6:	480f      	ldr	r0, [pc, #60]	; (80017f4 <GAME_PLAY_Phase_Management+0xa7c>)
 80017b8:	f004 fdd4 	bl	8006364 <HAL_GPIO_ReadPin>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d112      	bne.n	80017e8 <GAME_PLAY_Phase_Management+0xa70>
					== GPIO_PIN_RESET){
				state_game->player_state = ready;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	f883 2434 	strb.w	r2, [r3, #1076]	; 0x434
				state_game->STATE = Drawn_Phase;
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 2435 	strb.w	r2, [r3, #1077]	; 0x435
				YUGIOH_Clear_Card_All(ptrPlayerAtk);
 80017d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80017d4:	f7fe ffe3 	bl	800079e <YUGIOH_Clear_Card_All>
				YUGIOH_Clear_Card_All(ptrPlayerDef);
 80017d8:	6a38      	ldr	r0, [r7, #32]
 80017da:	f7fe ffe0 	bl	800079e <YUGIOH_Clear_Card_All>

			}
			break;
 80017de:	e003      	b.n	80017e8 <GAME_PLAY_Phase_Management+0xa70>
		break;
 80017e0:	bf00      	nop
 80017e2:	e002      	b.n	80017ea <GAME_PLAY_Phase_Management+0xa72>
		break;
 80017e4:	bf00      	nop
 80017e6:	e000      	b.n	80017ea <GAME_PLAY_Phase_Management+0xa72>
			break;
 80017e8:	bf00      	nop

	}
}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	; 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	58020000 	.word	0x58020000

080017f8 <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3328      	adds	r3, #40	; 0x28
 8001808:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	461a      	mov	r2, r3
 8001810:	2358      	movs	r3, #88	; 0x58
 8001812:	fb02 f303 	mul.w	r3, r2, r3
 8001816:	3328      	adds	r3, #40	; 0x28
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4413      	add	r3, r2
 800181c:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3318      	adds	r3, #24
 8001822:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f503 73d2 	add.w	r3, r3, #420	; 0x1a4
 800182a:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	78db      	ldrb	r3, [r3, #3]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d126      	bne.n	8001882 <Player_Reading_Card+0x8a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff f80b 	bl	8000850 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800183a:	6979      	ldr	r1, [r7, #20]
 800183c:	69b8      	ldr	r0, [r7, #24]
 800183e:	f7fe ff21 	bl	8000684 <YUGIOH_card_copy>

		// Mod standPosition in case off 2 player
		ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	799a      	ldrb	r2, [r3, #6]
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <Player_Reading_Card+0x94>)
 8001848:	fba3 1302 	umull	r1, r3, r3, r2
 800184c:	0899      	lsrs	r1, r3, #2
 800184e:	460b      	mov	r3, r1
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	440b      	add	r3, r1
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	b2da      	uxtb	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	719a      	strb	r2, [r3, #6]
		// Card Reading So it can't attack
		ptrYugiohCard_dst->actionPoint_Atk = 0;
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2200      	movs	r2, #0
 8001862:	721a      	strb	r2, [r3, #8]
		// Card Reading Then it can use it Effect
		ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2201      	movs	r2, #1
 8001868:	725a      	strb	r2, [r3, #9]
		RFID_Clear_Card_Bufffer(ptrRFID);
 800186a:	69f8      	ldr	r0, [r7, #28]
 800186c:	f7fe ff56 	bl	800071c <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	2200      	movs	r2, #0
 8001874:	70da      	strb	r2, [r3, #3]
		state_game->action += 1;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	3301      	adds	r3, #1
 800187c:	b2da      	uxtb	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	701a      	strb	r2, [r3, #0]
	}
}
 8001882:	bf00      	nop
 8001884:	3720      	adds	r7, #32
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	aaaaaaab 	.word	0xaaaaaaab

08001890 <YUGIOH_To_GY>:
	}
}

//void YUGIOH_Clear_Card_New_G(Player *player1,Player *player2) {

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	; 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3364      	adds	r3, #100	; 0x64
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	3364      	adds	r3, #100	; 0x64
 80018ba:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80018c2:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80018c4:	2314      	movs	r3, #20
 80018c6:	61fb      	str	r3, [r7, #28]
 80018c8:	e00c      	b.n	80018e4 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80018ca:	6a39      	ldr	r1, [r7, #32]
 80018cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018ce:	f7fe fed9 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	3b10      	subs	r3, #16
 80018d6:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 80018d8:	6a3b      	ldr	r3, [r7, #32]
 80018da:	3b10      	subs	r3, #16
 80018dc:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b01      	subs	r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	dcef      	bgt.n	80018ca <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3364      	adds	r3, #100	; 0x64
 80018f2:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80018f4:	6a39      	ldr	r1, [r7, #32]
 80018f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80018f8:	f7fe fec4 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001904:	6a38      	ldr	r0, [r7, #32]
 8001906:	f7fe febd 	bl	8000684 <YUGIOH_card_copy>

}
 800190a:	bf00      	nop
 800190c:	3728      	adds	r7, #40	; 0x28
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <MainGUI>:

void MainGUI(){
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <MainGUI+0x124>)
 800191c:	2200      	movs	r2, #0
 800191e:	9202      	str	r2, [sp, #8]
 8001920:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001924:	9201      	str	r2, [sp, #4]
 8001926:	685a      	ldr	r2, [r3, #4]
 8001928:	9200      	str	r2, [sp, #0]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a43      	ldr	r2, [pc, #268]	; (8001a3c <MainGUI+0x128>)
 800192e:	2105      	movs	r1, #5
 8001930:	2005      	movs	r0, #5
 8001932:	f000 feba 	bl	80026aa <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001936:	4b40      	ldr	r3, [pc, #256]	; (8001a38 <MainGUI+0x124>)
 8001938:	2200      	movs	r2, #0
 800193a:	9202      	str	r2, [sp, #8]
 800193c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001940:	9201      	str	r2, [sp, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	9200      	str	r2, [sp, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <MainGUI+0x12c>)
 800194a:	2114      	movs	r1, #20
 800194c:	2005      	movs	r0, #5
 800194e:	f000 feac 	bl	80026aa <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <MainGUI+0x124>)
 8001954:	2200      	movs	r2, #0
 8001956:	9202      	str	r2, [sp, #8]
 8001958:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800195c:	9201      	str	r2, [sp, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	9200      	str	r2, [sp, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a37      	ldr	r2, [pc, #220]	; (8001a44 <MainGUI+0x130>)
 8001966:	2123      	movs	r1, #35	; 0x23
 8001968:	2005      	movs	r0, #5
 800196a:	f000 fe9e 	bl	80026aa <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <MainGUI+0x124>)
 8001970:	2200      	movs	r2, #0
 8001972:	9202      	str	r2, [sp, #8]
 8001974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001978:	9201      	str	r2, [sp, #4]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	9200      	str	r2, [sp, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a31      	ldr	r2, [pc, #196]	; (8001a48 <MainGUI+0x134>)
 8001982:	2132      	movs	r1, #50	; 0x32
 8001984:	2000      	movs	r0, #0
 8001986:	f000 fe90 	bl	80026aa <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800198a:	4b2b      	ldr	r3, [pc, #172]	; (8001a38 <MainGUI+0x124>)
 800198c:	2200      	movs	r2, #0
 800198e:	9202      	str	r2, [sp, #8]
 8001990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001994:	9201      	str	r2, [sp, #4]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	9200      	str	r2, [sp, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a2b      	ldr	r2, [pc, #172]	; (8001a4c <MainGUI+0x138>)
 800199e:	213c      	movs	r1, #60	; 0x3c
 80019a0:	2000      	movs	r0, #0
 80019a2:	f000 fe82 	bl	80026aa <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MainGUI+0x124>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	9202      	str	r2, [sp, #8]
 80019ac:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80019b0:	9201      	str	r2, [sp, #4]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	9200      	str	r2, [sp, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a25      	ldr	r2, [pc, #148]	; (8001a50 <MainGUI+0x13c>)
 80019ba:	2105      	movs	r1, #5
 80019bc:	2005      	movs	r0, #5
 80019be:	f000 fe2a 	bl	8002616 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MainGUI+0x124>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	9202      	str	r2, [sp, #8]
 80019c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019cc:	9201      	str	r2, [sp, #4]
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	9200      	str	r2, [sp, #0]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a1a      	ldr	r2, [pc, #104]	; (8001a40 <MainGUI+0x12c>)
 80019d6:	2114      	movs	r1, #20
 80019d8:	2005      	movs	r0, #5
 80019da:	f000 fe1c 	bl	8002616 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MainGUI+0x124>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	9202      	str	r2, [sp, #8]
 80019e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e8:	9201      	str	r2, [sp, #4]
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	9200      	str	r2, [sp, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <MainGUI+0x130>)
 80019f2:	2123      	movs	r1, #35	; 0x23
 80019f4:	2005      	movs	r0, #5
 80019f6:	f000 fe0e 	bl	8002616 <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019fa:	4b0f      	ldr	r3, [pc, #60]	; (8001a38 <MainGUI+0x124>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	9202      	str	r2, [sp, #8]
 8001a00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a04:	9201      	str	r2, [sp, #4]
 8001a06:	685a      	ldr	r2, [r3, #4]
 8001a08:	9200      	str	r2, [sp, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <MainGUI+0x134>)
 8001a0e:	2132      	movs	r1, #50	; 0x32
 8001a10:	2000      	movs	r0, #0
 8001a12:	f000 fe00 	bl	8002616 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a16:	4b08      	ldr	r3, [pc, #32]	; (8001a38 <MainGUI+0x124>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	9202      	str	r2, [sp, #8]
 8001a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a20:	9201      	str	r2, [sp, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	9200      	str	r2, [sp, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <MainGUI+0x138>)
 8001a2a:	213c      	movs	r1, #60	; 0x3c
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f000 fdf2 	bl	8002616 <ST7735_WriteString>
}
 8001a32:	bf00      	nop
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	24000008 	.word	0x24000008
 8001a3c:	0800bf78 	.word	0x0800bf78
 8001a40:	0800bfd4 	.word	0x0800bfd4
 8001a44:	0800bfe4 	.word	0x0800bfe4
 8001a48:	0800bfec 	.word	0x0800bfec
 8001a4c:	0800bf24 	.word	0x0800bf24
 8001a50:	0800bf18 	.word	0x0800bf18

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a58:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <SystemInit+0xfc>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a3c      	ldr	r2, [pc, #240]	; (8001b50 <SystemInit+0xfc>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001a68:	4b39      	ldr	r3, [pc, #228]	; (8001b50 <SystemInit+0xfc>)
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	4a38      	ldr	r2, [pc, #224]	; (8001b50 <SystemInit+0xfc>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a74:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <SystemInit+0x100>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 030f 	and.w	r3, r3, #15
 8001a7c:	2b06      	cmp	r3, #6
 8001a7e:	d807      	bhi.n	8001a90 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a80:	4b34      	ldr	r3, [pc, #208]	; (8001b54 <SystemInit+0x100>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f023 030f 	bic.w	r3, r3, #15
 8001a88:	4a32      	ldr	r2, [pc, #200]	; (8001b54 <SystemInit+0x100>)
 8001a8a:	f043 0307 	orr.w	r3, r3, #7
 8001a8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a90:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <SystemInit+0x104>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <SystemInit+0x104>)
 8001a96:	f043 0301 	orr.w	r3, r3, #1
 8001a9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a9c:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <SystemInit+0x104>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <SystemInit+0x104>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	492c      	ldr	r1, [pc, #176]	; (8001b58 <SystemInit+0x104>)
 8001aa8:	4b2c      	ldr	r3, [pc, #176]	; (8001b5c <SystemInit+0x108>)
 8001aaa:	4013      	ands	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001aae:	4b29      	ldr	r3, [pc, #164]	; (8001b54 <SystemInit+0x100>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <SystemInit+0x100>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 030f 	bic.w	r3, r3, #15
 8001ac2:	4a24      	ldr	r2, [pc, #144]	; (8001b54 <SystemInit+0x100>)
 8001ac4:	f043 0307 	orr.w	r3, r3, #7
 8001ac8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001aca:	4b23      	ldr	r3, [pc, #140]	; (8001b58 <SystemInit+0x104>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ad0:	4b21      	ldr	r3, [pc, #132]	; (8001b58 <SystemInit+0x104>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <SystemInit+0x104>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001adc:	4b1e      	ldr	r3, [pc, #120]	; (8001b58 <SystemInit+0x104>)
 8001ade:	4a20      	ldr	r2, [pc, #128]	; (8001b60 <SystemInit+0x10c>)
 8001ae0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ae2:	4b1d      	ldr	r3, [pc, #116]	; (8001b58 <SystemInit+0x104>)
 8001ae4:	4a1f      	ldr	r2, [pc, #124]	; (8001b64 <SystemInit+0x110>)
 8001ae6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <SystemInit+0x104>)
 8001aea:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <SystemInit+0x114>)
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <SystemInit+0x104>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <SystemInit+0x104>)
 8001af6:	4a1c      	ldr	r2, [pc, #112]	; (8001b68 <SystemInit+0x114>)
 8001af8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <SystemInit+0x104>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001b00:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <SystemInit+0x104>)
 8001b02:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <SystemInit+0x114>)
 8001b04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <SystemInit+0x104>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <SystemInit+0x104>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <SystemInit+0x104>)
 8001b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <SystemInit+0x104>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <SystemInit+0x118>)
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <SystemInit+0x118>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <SystemInit+0x11c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4b11      	ldr	r3, [pc, #68]	; (8001b74 <SystemInit+0x120>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b36:	d202      	bcs.n	8001b3e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <SystemInit+0x124>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001b3e:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <SystemInit+0x128>)
 8001b40:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001b44:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001b46:	bf00      	nop
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000ed00 	.word	0xe000ed00
 8001b54:	52002000 	.word	0x52002000
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001b60:	02020200 	.word	0x02020200
 8001b64:	01ff0000 	.word	0x01ff0000
 8001b68:	01010280 	.word	0x01010280
 8001b6c:	580000c0 	.word	0x580000c0
 8001b70:	5c001000 	.word	0x5c001000
 8001b74:	ffff0000 	.word	0xffff0000
 8001b78:	51008108 	.word	0x51008108
 8001b7c:	52004000 	.word	0x52004000

08001b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001b86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b8a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001b8c:	bf00      	nop
 8001b8e:	4b36      	ldr	r3, [pc, #216]	; (8001c68 <main+0xe8>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <main+0x24>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	dcf4      	bgt.n	8001b8e <main+0xe>
	if ( timeout < 0 )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da01      	bge.n	8001bae <main+0x2e>
	{
		Error_Handler();
 8001baa:	f000 fb97 	bl	80022dc <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bae:	f001 f9f9 	bl	8002fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bb2:	f000 f861 	bl	8001c78 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001bb6:	f000 f8e3 	bl	8001d80 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001bba:	4b2b      	ldr	r3, [pc, #172]	; (8001c68 <main+0xe8>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc0:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <main+0xe8>)
 8001bc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bca:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <main+0xe8>)
 8001bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd4:	603b      	str	r3, [r7, #0]
 8001bd6:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f004 fc0f 	bl	80063fc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001bde:	2100      	movs	r1, #0
 8001be0:	2000      	movs	r0, #0
 8001be2:	f004 fc25 	bl	8006430 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001be6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bea:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001bec:	bf00      	nop
 8001bee:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <main+0xe8>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d104      	bne.n	8001c04 <main+0x84>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	1e5a      	subs	r2, r3, #1
 8001bfe:	607a      	str	r2, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	dcf4      	bgt.n	8001bee <main+0x6e>
	if ( timeout < 0 )
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	da01      	bge.n	8001c0e <main+0x8e>
	{
		Error_Handler();
 8001c0a:	f000 fb67 	bl	80022dc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c0e:	f000 fa35 	bl	800207c <MX_GPIO_Init>
  MX_ETH_Init();
 8001c12:	f000 f8e7 	bl	8001de4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001c16:	f000 f989 	bl	8001f2c <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001c1a:	f000 fa07 	bl	800202c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001c1e:	f000 f9d3 	bl	8001fc8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001c22:	f000 f92b 	bl	8001e7c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8001c26:	f000 fc61 	bl	80024ec <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f000 fe81 	bl	8002932 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f000 fe6d 	bl	8002910 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8001c36:	f001 fa3b 	bl	80030b0 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <main+0xec>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2bc8      	cmp	r3, #200	; 0xc8
 8001c44:	d9f7      	bls.n	8001c36 <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 8001c46:	f001 fa33 	bl	80030b0 <HAL_GetTick>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4a07      	ldr	r2, [pc, #28]	; (8001c6c <main+0xec>)
 8001c4e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c54:	4806      	ldr	r0, [pc, #24]	; (8001c70 <main+0xf0>)
 8001c56:	f004 fbb6 	bl	80063c6 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8001c5a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001c5e:	4905      	ldr	r1, [pc, #20]	; (8001c74 <main+0xf4>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fe21 	bl	80008a8 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8001c66:	e7e6      	b.n	8001c36 <main+0xb6>
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	24000da0 	.word	0x24000da0
 8001c70:	58020400 	.word	0x58020400
 8001c74:	24000964 	.word	0x24000964

08001c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b09c      	sub	sp, #112	; 0x70
 8001c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c82:	224c      	movs	r2, #76	; 0x4c
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f009 fcc4 	bl	800b614 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8c:	1d3b      	adds	r3, r7, #4
 8001c8e:	2220      	movs	r2, #32
 8001c90:	2100      	movs	r1, #0
 8001c92:	4618      	mov	r0, r3
 8001c94:	f009 fcbe 	bl	800b614 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001c98:	2004      	movs	r0, #4
 8001c9a:	f004 fd25 	bl	80066e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	603b      	str	r3, [r7, #0]
 8001ca2:	4b34      	ldr	r3, [pc, #208]	; (8001d74 <SystemClock_Config+0xfc>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	4a33      	ldr	r2, [pc, #204]	; (8001d74 <SystemClock_Config+0xfc>)
 8001ca8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cac:	6193      	str	r3, [r2, #24]
 8001cae:	4b31      	ldr	r3, [pc, #196]	; (8001d74 <SystemClock_Config+0xfc>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001cb6:	603b      	str	r3, [r7, #0]
 8001cb8:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <SystemClock_Config+0x100>)
 8001cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cbc:	4a2e      	ldr	r2, [pc, #184]	; (8001d78 <SystemClock_Config+0x100>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001cc4:	4b2c      	ldr	r3, [pc, #176]	; (8001d78 <SystemClock_Config+0x100>)
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	603b      	str	r3, [r7, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001cd0:	bf00      	nop
 8001cd2:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <SystemClock_Config+0xfc>)
 8001cd4:	699b      	ldr	r3, [r3, #24]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cde:	d1f8      	bne.n	8001cd2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <SystemClock_Config+0x104>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ce4:	f023 0303 	bic.w	r3, r3, #3
 8001ce8:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <SystemClock_Config+0x104>)
 8001cea:	f043 0302 	orr.w	r3, r3, #2
 8001cee:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001cf4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d02:	2301      	movs	r3, #1
 8001d04:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001d06:	2378      	movs	r3, #120	; 0x78
 8001d08:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001d12:	2302      	movs	r3, #2
 8001d14:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001d16:	230c      	movs	r3, #12
 8001d18:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 fd48 	bl	80067bc <HAL_RCC_OscConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001d32:	f000 fad3 	bl	80022dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d36:	233f      	movs	r3, #63	; 0x3f
 8001d38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001d42:	2308      	movs	r3, #8
 8001d44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001d4a:	2340      	movs	r3, #64	; 0x40
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d52:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001d54:	2340      	movs	r3, #64	; 0x40
 8001d56:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f005 f95b 	bl	8007018 <HAL_RCC_ClockConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001d68:	f000 fab8 	bl	80022dc <Error_Handler>
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	3770      	adds	r7, #112	; 0x70
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	58024800 	.word	0x58024800
 8001d78:	58000400 	.word	0x58000400
 8001d7c:	58024400 	.word	0x58024400

08001d80 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0b0      	sub	sp, #192	; 0xc0
 8001d84:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001d86:	1d3b      	adds	r3, r7, #4
 8001d88:	22bc      	movs	r2, #188	; 0xbc
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f009 fc41 	bl	800b614 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001d92:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8001d96:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001d9c:	2318      	movs	r3, #24
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001da0:	2302      	movs	r3, #2
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001da4:	2304      	movs	r3, #4
 8001da6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001dac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001db0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001dba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dbe:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001dc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f005 fcb0 	bl	8007730 <HAL_RCCEx_PeriphCLKConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001dd6:	f000 fa81 	bl	80022dc <Error_Handler>
  }
}
 8001dda:	bf00      	nop
 8001ddc:	37c0      	adds	r7, #192	; 0xc0
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
	...

08001de4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	; (8001e64 <MX_ETH_Init+0x80>)
 8001dea:	4a1f      	ldr	r2, [pc, #124]	; (8001e68 <MX_ETH_Init+0x84>)
 8001dec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001dee:	4b1f      	ldr	r3, [pc, #124]	; (8001e6c <MX_ETH_Init+0x88>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <MX_ETH_Init+0x88>)
 8001df6:	2280      	movs	r2, #128	; 0x80
 8001df8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001dfa:	4b1c      	ldr	r3, [pc, #112]	; (8001e6c <MX_ETH_Init+0x88>)
 8001dfc:	22e1      	movs	r2, #225	; 0xe1
 8001dfe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001e00:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <MX_ETH_Init+0x88>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <MX_ETH_Init+0x88>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001e0c:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <MX_ETH_Init+0x88>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <MX_ETH_Init+0x80>)
 8001e14:	4a15      	ldr	r2, [pc, #84]	; (8001e6c <MX_ETH_Init+0x88>)
 8001e16:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001e18:	4b12      	ldr	r3, [pc, #72]	; (8001e64 <MX_ETH_Init+0x80>)
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001e1e:	4b11      	ldr	r3, [pc, #68]	; (8001e64 <MX_ETH_Init+0x80>)
 8001e20:	4a13      	ldr	r2, [pc, #76]	; (8001e70 <MX_ETH_Init+0x8c>)
 8001e22:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <MX_ETH_Init+0x80>)
 8001e26:	4a13      	ldr	r2, [pc, #76]	; (8001e74 <MX_ETH_Init+0x90>)
 8001e28:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <MX_ETH_Init+0x80>)
 8001e2c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e30:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001e32:	480c      	ldr	r0, [pc, #48]	; (8001e64 <MX_ETH_Init+0x80>)
 8001e34:	f003 fcc2 	bl	80057bc <HAL_ETH_Init>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001e3e:	f000 fa4d 	bl	80022dc <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001e42:	2238      	movs	r2, #56	; 0x38
 8001e44:	2100      	movs	r1, #0
 8001e46:	480c      	ldr	r0, [pc, #48]	; (8001e78 <MX_ETH_Init+0x94>)
 8001e48:	f009 fbe4 	bl	800b614 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001e4c:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <MX_ETH_Init+0x94>)
 8001e4e:	2221      	movs	r2, #33	; 0x21
 8001e50:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001e52:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <MX_ETH_Init+0x94>)
 8001e54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e58:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <MX_ETH_Init+0x94>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001e60:	bf00      	nop
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	240001a0 	.word	0x240001a0
 8001e68:	40028000 	.word	0x40028000
 8001e6c:	24000da4 	.word	0x24000da4
 8001e70:	240000e4 	.word	0x240000e4
 8001e74:	24000084 	.word	0x24000084
 8001e78:	24000168 	.word	0x24000168

08001e7c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e80:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001e82:	4a29      	ldr	r2, [pc, #164]	; (8001f28 <MX_SPI3_Init+0xac>)
 8001e84:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e86:	4b27      	ldr	r3, [pc, #156]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001e88:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e8c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001e90:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e94:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e96:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001e98:	2207      	movs	r2, #7
 8001e9a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e9c:	4b21      	ldr	r3, [pc, #132]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ea2:	4b20      	ldr	r3, [pc, #128]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001ea8:	4b1e      	ldr	r3, [pc, #120]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001eaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001eae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001eb0:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001eb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eb6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ebe:	4b19      	ldr	r3, [pc, #100]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001eca:	4b16      	ldr	r3, [pc, #88]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ed6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001ed8:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_SPI3_Init+0xa8>)
 8001f10:	f006 ff76 	bl	8008e00 <HAL_SPI_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001f1a:	f000 f9df 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	24000250 	.word	0x24000250
 8001f28:	40003c00 	.word	0x40003c00

08001f2c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f32:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <MX_USART3_UART_Init+0x94>)
 8001f34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f38:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <MX_USART3_UART_Init+0x98>)
 8001f3a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f50:	220c      	movs	r2, #12
 8001f52:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f72:	4812      	ldr	r0, [pc, #72]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f74:	f007 fb25 	bl	80095c2 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001f7e:	f000 f9ad 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f82:	2100      	movs	r1, #0
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f86:	f008 ff47 	bl	800ae18 <HAL_UARTEx_SetTxFifoThreshold>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d001      	beq.n	8001f94 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001f90:	f000 f9a4 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f94:	2100      	movs	r1, #0
 8001f96:	4809      	ldr	r0, [pc, #36]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001f98:	f008 ff7c 	bl	800ae94 <HAL_UARTEx_SetRxFifoThreshold>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001fa2:	f000 f99b 	bl	80022dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_USART3_UART_Init+0x90>)
 8001fa8:	f008 fefd 	bl	800ada6 <HAL_UARTEx_DisableFifoMode>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001fb2:	f000 f993 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	240002d8 	.word	0x240002d8
 8001fc0:	40004800 	.word	0x40004800
 8001fc4:	0005dc00 	.word	0x0005dc00

08001fc8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fce:	4a16      	ldr	r2, [pc, #88]	; (8002028 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001fd0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fd4:	2209      	movs	r2, #9
 8001fd6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fd8:	4b12      	ldr	r3, [pc, #72]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fda:	2202      	movs	r2, #2
 8001fdc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fe4:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002004:	2201      	movs	r2, #1
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800200a:	2200      	movs	r2, #0
 800200c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800200e:	4805      	ldr	r0, [pc, #20]	; (8002024 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002010:	f004 fa22 	bl	8006458 <HAL_PCD_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800201a:	f000 f95f 	bl	80022dc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	24000458 	.word	0x24000458
 8002028:	40080000 	.word	0x40080000

0800202c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <MX_DMA_Init+0x4c>)
 8002034:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002038:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <MX_DMA_Init+0x4c>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <MX_DMA_Init+0x4c>)
 8002044:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	607b      	str	r3, [r7, #4]
 800204e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	200c      	movs	r0, #12
 8002056:	f001 f956 	bl	8003306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800205a:	200c      	movs	r0, #12
 800205c:	f001 f96d 	bl	800333a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002060:	2200      	movs	r2, #0
 8002062:	2100      	movs	r1, #0
 8002064:	200f      	movs	r0, #15
 8002066:	f001 f94e 	bl	8003306 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800206a:	200f      	movs	r0, #15
 800206c:	f001 f965 	bl	800333a <HAL_NVIC_EnableIRQ>

}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	58024400 	.word	0x58024400

0800207c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08e      	sub	sp, #56	; 0x38
 8002080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002092:	4b8a      	ldr	r3, [pc, #552]	; (80022bc <MX_GPIO_Init+0x240>)
 8002094:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002098:	4a88      	ldr	r2, [pc, #544]	; (80022bc <MX_GPIO_Init+0x240>)
 800209a:	f043 0304 	orr.w	r3, r3, #4
 800209e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020a2:	4b86      	ldr	r3, [pc, #536]	; (80022bc <MX_GPIO_Init+0x240>)
 80020a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	623b      	str	r3, [r7, #32]
 80020ae:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b0:	4b82      	ldr	r3, [pc, #520]	; (80022bc <MX_GPIO_Init+0x240>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b6:	4a81      	ldr	r2, [pc, #516]	; (80022bc <MX_GPIO_Init+0x240>)
 80020b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c0:	4b7e      	ldr	r3, [pc, #504]	; (80022bc <MX_GPIO_Init+0x240>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ce:	4b7b      	ldr	r3, [pc, #492]	; (80022bc <MX_GPIO_Init+0x240>)
 80020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020d4:	4a79      	ldr	r2, [pc, #484]	; (80022bc <MX_GPIO_Init+0x240>)
 80020d6:	f043 0301 	orr.w	r3, r3, #1
 80020da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020de:	4b77      	ldr	r3, [pc, #476]	; (80022bc <MX_GPIO_Init+0x240>)
 80020e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ec:	4b73      	ldr	r3, [pc, #460]	; (80022bc <MX_GPIO_Init+0x240>)
 80020ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f2:	4a72      	ldr	r2, [pc, #456]	; (80022bc <MX_GPIO_Init+0x240>)
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020fc:	4b6f      	ldr	r3, [pc, #444]	; (80022bc <MX_GPIO_Init+0x240>)
 80020fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	617b      	str	r3, [r7, #20]
 8002108:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800210a:	4b6c      	ldr	r3, [pc, #432]	; (80022bc <MX_GPIO_Init+0x240>)
 800210c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002110:	4a6a      	ldr	r2, [pc, #424]	; (80022bc <MX_GPIO_Init+0x240>)
 8002112:	f043 0320 	orr.w	r3, r3, #32
 8002116:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800211a:	4b68      	ldr	r3, [pc, #416]	; (80022bc <MX_GPIO_Init+0x240>)
 800211c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002120:	f003 0320 	and.w	r3, r3, #32
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002128:	4b64      	ldr	r3, [pc, #400]	; (80022bc <MX_GPIO_Init+0x240>)
 800212a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800212e:	4a63      	ldr	r2, [pc, #396]	; (80022bc <MX_GPIO_Init+0x240>)
 8002130:	f043 0310 	orr.w	r3, r3, #16
 8002134:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002138:	4b60      	ldr	r3, [pc, #384]	; (80022bc <MX_GPIO_Init+0x240>)
 800213a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800213e:	f003 0310 	and.w	r3, r3, #16
 8002142:	60fb      	str	r3, [r7, #12]
 8002144:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <MX_GPIO_Init+0x240>)
 8002148:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214c:	4a5b      	ldr	r2, [pc, #364]	; (80022bc <MX_GPIO_Init+0x240>)
 800214e:	f043 0308 	orr.w	r3, r3, #8
 8002152:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002156:	4b59      	ldr	r3, [pc, #356]	; (80022bc <MX_GPIO_Init+0x240>)
 8002158:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002164:	4b55      	ldr	r3, [pc, #340]	; (80022bc <MX_GPIO_Init+0x240>)
 8002166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800216a:	4a54      	ldr	r2, [pc, #336]	; (80022bc <MX_GPIO_Init+0x240>)
 800216c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002170:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002174:	4b51      	ldr	r3, [pc, #324]	; (80022bc <MX_GPIO_Init+0x240>)
 8002176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800217a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800217e:	607b      	str	r3, [r7, #4]
 8002180:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8002182:	2201      	movs	r2, #1
 8002184:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8002188:	484d      	ldr	r0, [pc, #308]	; (80022c0 <MX_GPIO_Init+0x244>)
 800218a:	f004 f903 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002194:	484a      	ldr	r0, [pc, #296]	; (80022c0 <MX_GPIO_Init+0x244>)
 8002196:	f004 f8fd 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800219a:	2200      	movs	r2, #0
 800219c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021a0:	4848      	ldr	r0, [pc, #288]	; (80022c4 <MX_GPIO_Init+0x248>)
 80021a2:	f004 f8f7 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ac:	4846      	ldr	r0, [pc, #280]	; (80022c8 <MX_GPIO_Init+0x24c>)
 80021ae:	f004 f8f1 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b8:	4844      	ldr	r0, [pc, #272]	; (80022cc <MX_GPIO_Init+0x250>)
 80021ba:	f004 f8eb 	bl	8006394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 80021be:	230d      	movs	r3, #13
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c2:	2300      	movs	r3, #0
 80021c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ce:	4619      	mov	r1, r3
 80021d0:	483f      	ldr	r0, [pc, #252]	; (80022d0 <MX_GPIO_Init+0x254>)
 80021d2:	f003 ff17 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80021d6:	2308      	movs	r3, #8
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	483a      	ldr	r0, [pc, #232]	; (80022d4 <MX_GPIO_Init+0x258>)
 80021ea:	f003 ff0b 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 80021ee:	2302      	movs	r3, #2
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 80021fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021fe:	4619      	mov	r1, r3
 8002200:	4830      	ldr	r0, [pc, #192]	; (80022c4 <MX_GPIO_Init+0x248>)
 8002202:	f003 feff 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8002206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8002214:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002218:	4619      	mov	r1, r3
 800221a:	482f      	ldr	r0, [pc, #188]	; (80022d8 <MX_GPIO_Init+0x25c>)
 800221c:	f003 fef2 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8002220:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002224:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002226:	2301      	movs	r3, #1
 8002228:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222e:	2300      	movs	r3, #0
 8002230:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	4619      	mov	r1, r3
 8002238:	4821      	ldr	r0, [pc, #132]	; (80022c0 <MX_GPIO_Init+0x244>)
 800223a:	f003 fee3 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800223e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002244:	2301      	movs	r3, #1
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224c:	2300      	movs	r3, #0
 800224e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002250:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002254:	4619      	mov	r1, r3
 8002256:	481b      	ldr	r0, [pc, #108]	; (80022c4 <MX_GPIO_Init+0x248>)
 8002258:	f003 fed4 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800225c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002262:	2301      	movs	r3, #1
 8002264:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800226e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002272:	4619      	mov	r1, r3
 8002274:	4814      	ldr	r0, [pc, #80]	; (80022c8 <MX_GPIO_Init+0x24c>)
 8002276:	f003 fec5 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800227a:	2380      	movs	r3, #128	; 0x80
 800227c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800227e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <MX_GPIO_Init+0x250>)
 8002290:	f003 feb8 	bl	8006004 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8002294:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80022a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022aa:	4619      	mov	r1, r3
 80022ac:	4807      	ldr	r0, [pc, #28]	; (80022cc <MX_GPIO_Init+0x250>)
 80022ae:	f003 fea9 	bl	8006004 <HAL_GPIO_Init>

}
 80022b2:	bf00      	nop
 80022b4:	3738      	adds	r7, #56	; 0x38
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	58024400 	.word	0x58024400
 80022c0:	58021000 	.word	0x58021000
 80022c4:	58020400 	.word	0x58020400
 80022c8:	58020c00 	.word	0x58020c00
 80022cc:	58021800 	.word	0x58021800
 80022d0:	58020800 	.word	0x58020800
 80022d4:	58020000 	.word	0x58020000
 80022d8:	58021400 	.word	0x58021400

080022dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022e0:	b672      	cpsid	i
}
 80022e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80022e4:	e7fe      	b.n	80022e4 <Error_Handler+0x8>
	...

080022e8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80022ec:	2200      	movs	r2, #0
 80022ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022f2:	4802      	ldr	r0, [pc, #8]	; (80022fc <ST7735_Select+0x14>)
 80022f4:	f004 f84e 	bl	8006394 <HAL_GPIO_WritePin>
}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	58021000 	.word	0x58021000

08002300 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800230a:	4802      	ldr	r0, [pc, #8]	; (8002314 <ST7735_Unselect+0x14>)
 800230c:	f004 f842 	bl	8006394 <HAL_GPIO_WritePin>
}
 8002310:	bf00      	nop
 8002312:	bd80      	pop	{r7, pc}
 8002314:	58021000 	.word	0x58021000

08002318 <ST7735_Select1>:
static void ST7735_Select1() {
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 800231c:	2200      	movs	r2, #0
 800231e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002322:	4802      	ldr	r0, [pc, #8]	; (800232c <ST7735_Select1+0x14>)
 8002324:	f004 f836 	bl	8006394 <HAL_GPIO_WritePin>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	58021000 	.word	0x58021000

08002330 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8002334:	2201      	movs	r2, #1
 8002336:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800233a:	4802      	ldr	r0, [pc, #8]	; (8002344 <ST7735_Unselect1+0x14>)
 800233c:	f004 f82a 	bl	8006394 <HAL_GPIO_WritePin>
}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	58021000 	.word	0x58021000

08002348 <ST7735_Reset>:

static void ST7735_Reset() {
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800234c:	2200      	movs	r2, #0
 800234e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002352:	4807      	ldr	r0, [pc, #28]	; (8002370 <ST7735_Reset+0x28>)
 8002354:	f004 f81e 	bl	8006394 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002358:	2005      	movs	r0, #5
 800235a:	f000 feb5 	bl	80030c8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800235e:	2201      	movs	r2, #1
 8002360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <ST7735_Reset+0x28>)
 8002366:	f004 f815 	bl	8006394 <HAL_GPIO_WritePin>
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	58021000 	.word	0x58021000

08002374 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800237e:	2200      	movs	r2, #0
 8002380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002384:	4806      	ldr	r0, [pc, #24]	; (80023a0 <ST7735_WriteCommand+0x2c>)
 8002386:	f004 f805 	bl	8006394 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800238a:	1df9      	adds	r1, r7, #7
 800238c:	f04f 33ff 	mov.w	r3, #4294967295
 8002390:	2201      	movs	r2, #1
 8002392:	4804      	ldr	r0, [pc, #16]	; (80023a4 <ST7735_WriteCommand+0x30>)
 8002394:	f006 fe3a 	bl	800900c <HAL_SPI_Transmit>
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	58021800 	.word	0x58021800
 80023a4:	24000250 	.word	0x24000250

080023a8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80023b2:	2201      	movs	r2, #1
 80023b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023b8:	4807      	ldr	r0, [pc, #28]	; (80023d8 <ST7735_WriteData+0x30>)
 80023ba:	f003 ffeb 	bl	8006394 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b29a      	uxth	r2, r3
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	4804      	ldr	r0, [pc, #16]	; (80023dc <ST7735_WriteData+0x34>)
 80023ca:	f006 fe1f 	bl	800900c <HAL_SPI_Transmit>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	58021800 	.word	0x58021800
 80023dc:	24000250 	.word	0x24000250

080023e0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80023f2:	e034      	b.n	800245e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	1c5a      	adds	r2, r3, #1
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80023fe:	7afb      	ldrb	r3, [r7, #11]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ffb7 	bl	8002374 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	1c5a      	adds	r2, r3, #1
 800240a:	607a      	str	r2, [r7, #4]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002410:	7abb      	ldrb	r3, [r7, #10]
 8002412:	b29b      	uxth	r3, r3
 8002414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002418:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800241a:	7abb      	ldrb	r3, [r7, #10]
 800241c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002420:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002422:	7abb      	ldrb	r3, [r7, #10]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d008      	beq.n	800243a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002428:	7abb      	ldrb	r3, [r7, #10]
 800242a:	4619      	mov	r1, r3
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff ffbb 	bl	80023a8 <ST7735_WriteData>
            addr += numArgs;
 8002432:	7abb      	ldrb	r3, [r7, #10]
 8002434:	687a      	ldr	r2, [r7, #4]
 8002436:	4413      	add	r3, r2
 8002438:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800243a:	89bb      	ldrh	r3, [r7, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00e      	beq.n	800245e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	1c5a      	adds	r2, r3, #1
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800244a:	89bb      	ldrh	r3, [r7, #12]
 800244c:	2bff      	cmp	r3, #255	; 0xff
 800244e:	d102      	bne.n	8002456 <ST7735_ExecuteCommandList+0x76>
 8002450:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002454:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002456:	89bb      	ldrh	r3, [r7, #12]
 8002458:	4618      	mov	r0, r3
 800245a:	f000 fe35 	bl	80030c8 <HAL_Delay>
    while(numCommands--) {
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	1e5a      	subs	r2, r3, #1
 8002462:	73fa      	strb	r2, [r7, #15]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1c5      	bne.n	80023f4 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002468:	bf00      	nop
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002472:	b590      	push	{r4, r7, lr}
 8002474:	b085      	sub	sp, #20
 8002476:	af00      	add	r7, sp, #0
 8002478:	4604      	mov	r4, r0
 800247a:	4608      	mov	r0, r1
 800247c:	4611      	mov	r1, r2
 800247e:	461a      	mov	r2, r3
 8002480:	4623      	mov	r3, r4
 8002482:	71fb      	strb	r3, [r7, #7]
 8002484:	4603      	mov	r3, r0
 8002486:	71bb      	strb	r3, [r7, #6]
 8002488:	460b      	mov	r3, r1
 800248a:	717b      	strb	r3, [r7, #5]
 800248c:	4613      	mov	r3, r2
 800248e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002490:	202a      	movs	r0, #42	; 0x2a
 8002492:	f7ff ff6f 	bl	8002374 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8002496:	2300      	movs	r3, #0
 8002498:	733b      	strb	r3, [r7, #12]
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	3302      	adds	r3, #2
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	737b      	strb	r3, [r7, #13]
 80024a2:	2300      	movs	r3, #0
 80024a4:	73bb      	strb	r3, [r7, #14]
 80024a6:	797b      	ldrb	r3, [r7, #5]
 80024a8:	3302      	adds	r3, #2
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80024ae:	f107 030c 	add.w	r3, r7, #12
 80024b2:	2104      	movs	r1, #4
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff77 	bl	80023a8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80024ba:	202b      	movs	r0, #43	; 0x2b
 80024bc:	f7ff ff5a 	bl	8002374 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80024c0:	79bb      	ldrb	r3, [r7, #6]
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80024c8:	793b      	ldrb	r3, [r7, #4]
 80024ca:	3301      	adds	r3, #1
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80024d0:	f107 030c 	add.w	r3, r7, #12
 80024d4:	2104      	movs	r1, #4
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff ff66 	bl	80023a8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80024dc:	202c      	movs	r0, #44	; 0x2c
 80024de:	f7ff ff49 	bl	8002374 <ST7735_WriteCommand>
}
 80024e2:	bf00      	nop
 80024e4:	3714      	adds	r7, #20
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd90      	pop	{r4, r7, pc}
	...

080024ec <ST7735_Init>:

void ST7735_Init() {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
    ST7735_Select();
 80024f0:	f7ff fefa 	bl	80022e8 <ST7735_Select>
    ST7735_Select1();
 80024f4:	f7ff ff10 	bl	8002318 <ST7735_Select1>
    ST7735_Reset();
 80024f8:	f7ff ff26 	bl	8002348 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80024fc:	4807      	ldr	r0, [pc, #28]	; (800251c <ST7735_Init+0x30>)
 80024fe:	f7ff ff6f 	bl	80023e0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002502:	4807      	ldr	r0, [pc, #28]	; (8002520 <ST7735_Init+0x34>)
 8002504:	f7ff ff6c 	bl	80023e0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002508:	4806      	ldr	r0, [pc, #24]	; (8002524 <ST7735_Init+0x38>)
 800250a:	f7ff ff69 	bl	80023e0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800250e:	f7ff fef7 	bl	8002300 <ST7735_Unselect>
    ST7735_Unselect1();
 8002512:	f7ff ff0d 	bl	8002330 <ST7735_Unselect1>
}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	0800d4d8 	.word	0x0800d4d8
 8002520:	0800d514 	.word	0x0800d514
 8002524:	0800d524 	.word	0x0800d524

08002528 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002528:	b082      	sub	sp, #8
 800252a:	b590      	push	{r4, r7, lr}
 800252c:	b089      	sub	sp, #36	; 0x24
 800252e:	af00      	add	r7, sp, #0
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
 8002536:	460b      	mov	r3, r1
 8002538:	80bb      	strh	r3, [r7, #4]
 800253a:	4613      	mov	r3, r2
 800253c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800253e:	88fb      	ldrh	r3, [r7, #6]
 8002540:	b2d8      	uxtb	r0, r3
 8002542:	88bb      	ldrh	r3, [r7, #4]
 8002544:	b2d9      	uxtb	r1, r3
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	b2da      	uxtb	r2, r3
 800254a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800254e:	4413      	add	r3, r2
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b2dc      	uxtb	r4, r3
 8002556:	88bb      	ldrh	r3, [r7, #4]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800255e:	4413      	add	r3, r2
 8002560:	b2db      	uxtb	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b2db      	uxtb	r3, r3
 8002566:	4622      	mov	r2, r4
 8002568:	f7ff ff83 	bl	8002472 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
 8002570:	e043      	b.n	80025fa <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002572:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	3b20      	subs	r3, #32
 8002578:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800257c:	fb01 f303 	mul.w	r3, r1, r3
 8002580:	4619      	mov	r1, r3
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	440b      	add	r3, r1
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800258e:	2300      	movs	r3, #0
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	e029      	b.n	80025e8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00e      	beq.n	80025c2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80025a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	743b      	strb	r3, [r7, #16]
 80025ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	2102      	movs	r1, #2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7ff fef4 	bl	80023a8 <ST7735_WriteData>
 80025c0:	e00f      	b.n	80025e2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80025c2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025c6:	0a1b      	lsrs	r3, r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	733b      	strb	r3, [r7, #12]
 80025ce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80025d6:	f107 030c 	add.w	r3, r7, #12
 80025da:	2102      	movs	r1, #2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fee3 	bl	80023a8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	3301      	adds	r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025ec:	461a      	mov	r2, r3
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d3cf      	bcc.n	8002594 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	3301      	adds	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025fe:	461a      	mov	r2, r3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	4293      	cmp	r3, r2
 8002604:	d3b5      	bcc.n	8002572 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	3724      	adds	r7, #36	; 0x24
 800260c:	46bd      	mov	sp, r7
 800260e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002612:	b002      	add	sp, #8
 8002614:	4770      	bx	lr

08002616 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002616:	b082      	sub	sp, #8
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af04      	add	r7, sp, #16
 800261e:	603a      	str	r2, [r7, #0]
 8002620:	617b      	str	r3, [r7, #20]
 8002622:	4603      	mov	r3, r0
 8002624:	80fb      	strh	r3, [r7, #6]
 8002626:	460b      	mov	r3, r1
 8002628:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800262a:	f7ff fe5d 	bl	80022e8 <ST7735_Select>

    while(*str) {
 800262e:	e02d      	b.n	800268c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	7d3a      	ldrb	r2, [r7, #20]
 8002634:	4413      	add	r3, r2
 8002636:	2b7f      	cmp	r3, #127	; 0x7f
 8002638:	dd13      	ble.n	8002662 <ST7735_WriteString+0x4c>
            x = 0;
 800263a:	2300      	movs	r3, #0
 800263c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800263e:	7d7b      	ldrb	r3, [r7, #21]
 8002640:	b29a      	uxth	r2, r3
 8002642:	88bb      	ldrh	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002648:	88bb      	ldrh	r3, [r7, #4]
 800264a:	7d7a      	ldrb	r2, [r7, #21]
 800264c:	4413      	add	r3, r2
 800264e:	2b7f      	cmp	r3, #127	; 0x7f
 8002650:	dc21      	bgt.n	8002696 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	2b20      	cmp	r3, #32
 8002658:	d103      	bne.n	8002662 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	3301      	adds	r3, #1
 800265e:	603b      	str	r3, [r7, #0]
                continue;
 8002660:	e014      	b.n	800268c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	88b9      	ldrh	r1, [r7, #4]
 8002668:	88f8      	ldrh	r0, [r7, #6]
 800266a:	8c3b      	ldrh	r3, [r7, #32]
 800266c:	9302      	str	r3, [sp, #8]
 800266e:	8bbb      	ldrh	r3, [r7, #28]
 8002670:	9301      	str	r3, [sp, #4]
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f7ff ff56 	bl	8002528 <ST7735_WriteChar>
        x += font.width;
 800267c:	7d3b      	ldrb	r3, [r7, #20]
 800267e:	b29a      	uxth	r2, r3
 8002680:	88fb      	ldrh	r3, [r7, #6]
 8002682:	4413      	add	r3, r2
 8002684:	80fb      	strh	r3, [r7, #6]
        str++;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d1cd      	bne.n	8002630 <ST7735_WriteString+0x1a>
 8002694:	e000      	b.n	8002698 <ST7735_WriteString+0x82>
                break;
 8002696:	bf00      	nop
    }

    ST7735_Unselect();
 8002698:	f7ff fe32 	bl	8002300 <ST7735_Unselect>
}
 800269c:	bf00      	nop
 800269e:	3708      	adds	r7, #8
 80026a0:	46bd      	mov	sp, r7
 80026a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026a6:	b002      	add	sp, #8
 80026a8:	4770      	bx	lr

080026aa <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80026aa:	b082      	sub	sp, #8
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af04      	add	r7, sp, #16
 80026b2:	603a      	str	r2, [r7, #0]
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	4603      	mov	r3, r0
 80026b8:	80fb      	strh	r3, [r7, #6]
 80026ba:	460b      	mov	r3, r1
 80026bc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select1();
 80026be:	f7ff fe2b 	bl	8002318 <ST7735_Select1>

    while(*str) {
 80026c2:	e02d      	b.n	8002720 <ST7735_WriteString1+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80026c4:	88fb      	ldrh	r3, [r7, #6]
 80026c6:	7d3a      	ldrb	r2, [r7, #20]
 80026c8:	4413      	add	r3, r2
 80026ca:	2b7f      	cmp	r3, #127	; 0x7f
 80026cc:	dd13      	ble.n	80026f6 <ST7735_WriteString1+0x4c>
            x = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80026d2:	7d7b      	ldrb	r3, [r7, #21]
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	88bb      	ldrh	r3, [r7, #4]
 80026d8:	4413      	add	r3, r2
 80026da:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80026dc:	88bb      	ldrh	r3, [r7, #4]
 80026de:	7d7a      	ldrb	r2, [r7, #21]
 80026e0:	4413      	add	r3, r2
 80026e2:	2b7f      	cmp	r3, #127	; 0x7f
 80026e4:	dc21      	bgt.n	800272a <ST7735_WriteString1+0x80>
                break;
            }

            if(*str == ' ') {
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b20      	cmp	r3, #32
 80026ec:	d103      	bne.n	80026f6 <ST7735_WriteString1+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	3301      	adds	r3, #1
 80026f2:	603b      	str	r3, [r7, #0]
                continue;
 80026f4:	e014      	b.n	8002720 <ST7735_WriteString1+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	88b9      	ldrh	r1, [r7, #4]
 80026fc:	88f8      	ldrh	r0, [r7, #6]
 80026fe:	8c3b      	ldrh	r3, [r7, #32]
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	8bbb      	ldrh	r3, [r7, #28]
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f7ff ff0c 	bl	8002528 <ST7735_WriteChar>
        x += font.width;
 8002710:	7d3b      	ldrb	r3, [r7, #20]
 8002712:	b29a      	uxth	r2, r3
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	4413      	add	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
        str++;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1cd      	bne.n	80026c4 <ST7735_WriteString1+0x1a>
 8002728:	e000      	b.n	800272c <ST7735_WriteString1+0x82>
                break;
 800272a:	bf00      	nop
    }

    ST7735_Unselect1();
 800272c:	f7ff fe00 	bl	8002330 <ST7735_Unselect1>
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800273a:	b002      	add	sp, #8
 800273c:	4770      	bx	lr
	...

08002740 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002740:	b590      	push	{r4, r7, lr}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	4604      	mov	r4, r0
 8002748:	4608      	mov	r0, r1
 800274a:	4611      	mov	r1, r2
 800274c:	461a      	mov	r2, r3
 800274e:	4623      	mov	r3, r4
 8002750:	80fb      	strh	r3, [r7, #6]
 8002752:	4603      	mov	r3, r0
 8002754:	80bb      	strh	r3, [r7, #4]
 8002756:	460b      	mov	r3, r1
 8002758:	807b      	strh	r3, [r7, #2]
 800275a:	4613      	mov	r3, r2
 800275c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800275e:	88fb      	ldrh	r3, [r7, #6]
 8002760:	2b7f      	cmp	r3, #127	; 0x7f
 8002762:	d858      	bhi.n	8002816 <ST7735_FillRectangle+0xd6>
 8002764:	88bb      	ldrh	r3, [r7, #4]
 8002766:	2b7f      	cmp	r3, #127	; 0x7f
 8002768:	d855      	bhi.n	8002816 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800276a:	88fa      	ldrh	r2, [r7, #6]
 800276c:	887b      	ldrh	r3, [r7, #2]
 800276e:	4413      	add	r3, r2
 8002770:	2b80      	cmp	r3, #128	; 0x80
 8002772:	dd03      	ble.n	800277c <ST7735_FillRectangle+0x3c>
 8002774:	88fb      	ldrh	r3, [r7, #6]
 8002776:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800277a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800277c:	88ba      	ldrh	r2, [r7, #4]
 800277e:	883b      	ldrh	r3, [r7, #0]
 8002780:	4413      	add	r3, r2
 8002782:	2b80      	cmp	r3, #128	; 0x80
 8002784:	dd03      	ble.n	800278e <ST7735_FillRectangle+0x4e>
 8002786:	88bb      	ldrh	r3, [r7, #4]
 8002788:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800278c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800278e:	f7ff fdab 	bl	80022e8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002792:	88fb      	ldrh	r3, [r7, #6]
 8002794:	b2d8      	uxtb	r0, r3
 8002796:	88bb      	ldrh	r3, [r7, #4]
 8002798:	b2d9      	uxtb	r1, r3
 800279a:	88fb      	ldrh	r3, [r7, #6]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	887b      	ldrh	r3, [r7, #2]
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	4413      	add	r3, r2
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	3b01      	subs	r3, #1
 80027a8:	b2dc      	uxtb	r4, r3
 80027aa:	88bb      	ldrh	r3, [r7, #4]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	883b      	ldrh	r3, [r7, #0]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	4622      	mov	r2, r4
 80027bc:	f7ff fe59 	bl	8002472 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80027c0:	8c3b      	ldrh	r3, [r7, #32]
 80027c2:	0a1b      	lsrs	r3, r3, #8
 80027c4:	b29b      	uxth	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	733b      	strb	r3, [r7, #12]
 80027ca:	8c3b      	ldrh	r3, [r7, #32]
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80027d0:	2201      	movs	r2, #1
 80027d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027d6:	4812      	ldr	r0, [pc, #72]	; (8002820 <ST7735_FillRectangle+0xe0>)
 80027d8:	f003 fddc 	bl	8006394 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80027dc:	883b      	ldrh	r3, [r7, #0]
 80027de:	80bb      	strh	r3, [r7, #4]
 80027e0:	e013      	b.n	800280a <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	80fb      	strh	r3, [r7, #6]
 80027e6:	e00a      	b.n	80027fe <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80027e8:	f107 010c 	add.w	r1, r7, #12
 80027ec:	f04f 33ff 	mov.w	r3, #4294967295
 80027f0:	2202      	movs	r2, #2
 80027f2:	480c      	ldr	r0, [pc, #48]	; (8002824 <ST7735_FillRectangle+0xe4>)
 80027f4:	f006 fc0a 	bl	800900c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80027f8:	88fb      	ldrh	r3, [r7, #6]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	80fb      	strh	r3, [r7, #6]
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f1      	bne.n	80027e8 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8002804:	88bb      	ldrh	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	80bb      	strh	r3, [r7, #4]
 800280a:	88bb      	ldrh	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1e8      	bne.n	80027e2 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8002810:	f7ff fd76 	bl	8002300 <ST7735_Unselect>
 8002814:	e000      	b.n	8002818 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002816:	bf00      	nop
}
 8002818:	3714      	adds	r7, #20
 800281a:	46bd      	mov	sp, r7
 800281c:	bd90      	pop	{r4, r7, pc}
 800281e:	bf00      	nop
 8002820:	58021800 	.word	0x58021800
 8002824:	24000250 	.word	0x24000250

08002828 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	4604      	mov	r4, r0
 8002830:	4608      	mov	r0, r1
 8002832:	4611      	mov	r1, r2
 8002834:	461a      	mov	r2, r3
 8002836:	4623      	mov	r3, r4
 8002838:	80fb      	strh	r3, [r7, #6]
 800283a:	4603      	mov	r3, r0
 800283c:	80bb      	strh	r3, [r7, #4]
 800283e:	460b      	mov	r3, r1
 8002840:	807b      	strh	r3, [r7, #2]
 8002842:	4613      	mov	r3, r2
 8002844:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002846:	88fb      	ldrh	r3, [r7, #6]
 8002848:	2b7f      	cmp	r3, #127	; 0x7f
 800284a:	d858      	bhi.n	80028fe <ST7735_FillRectangle1+0xd6>
 800284c:	88bb      	ldrh	r3, [r7, #4]
 800284e:	2b7f      	cmp	r3, #127	; 0x7f
 8002850:	d855      	bhi.n	80028fe <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002852:	88fa      	ldrh	r2, [r7, #6]
 8002854:	887b      	ldrh	r3, [r7, #2]
 8002856:	4413      	add	r3, r2
 8002858:	2b80      	cmp	r3, #128	; 0x80
 800285a:	dd03      	ble.n	8002864 <ST7735_FillRectangle1+0x3c>
 800285c:	88fb      	ldrh	r3, [r7, #6]
 800285e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002862:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002864:	88ba      	ldrh	r2, [r7, #4]
 8002866:	883b      	ldrh	r3, [r7, #0]
 8002868:	4413      	add	r3, r2
 800286a:	2b80      	cmp	r3, #128	; 0x80
 800286c:	dd03      	ble.n	8002876 <ST7735_FillRectangle1+0x4e>
 800286e:	88bb      	ldrh	r3, [r7, #4]
 8002870:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002874:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 8002876:	f7ff fd4f 	bl	8002318 <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800287a:	88fb      	ldrh	r3, [r7, #6]
 800287c:	b2d8      	uxtb	r0, r3
 800287e:	88bb      	ldrh	r3, [r7, #4]
 8002880:	b2d9      	uxtb	r1, r3
 8002882:	88fb      	ldrh	r3, [r7, #6]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	887b      	ldrh	r3, [r7, #2]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	4413      	add	r3, r2
 800288c:	b2db      	uxtb	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b2dc      	uxtb	r4, r3
 8002892:	88bb      	ldrh	r3, [r7, #4]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	883b      	ldrh	r3, [r7, #0]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	4413      	add	r3, r2
 800289c:	b2db      	uxtb	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4622      	mov	r2, r4
 80028a4:	f7ff fde5 	bl	8002472 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80028a8:	8c3b      	ldrh	r3, [r7, #32]
 80028aa:	0a1b      	lsrs	r3, r3, #8
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	733b      	strb	r3, [r7, #12]
 80028b2:	8c3b      	ldrh	r3, [r7, #32]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80028b8:	2201      	movs	r2, #1
 80028ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028be:	4812      	ldr	r0, [pc, #72]	; (8002908 <ST7735_FillRectangle1+0xe0>)
 80028c0:	f003 fd68 	bl	8006394 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80028c4:	883b      	ldrh	r3, [r7, #0]
 80028c6:	80bb      	strh	r3, [r7, #4]
 80028c8:	e013      	b.n	80028f2 <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 80028ca:	887b      	ldrh	r3, [r7, #2]
 80028cc:	80fb      	strh	r3, [r7, #6]
 80028ce:	e00a      	b.n	80028e6 <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80028d0:	f107 010c 	add.w	r1, r7, #12
 80028d4:	f04f 33ff 	mov.w	r3, #4294967295
 80028d8:	2202      	movs	r2, #2
 80028da:	480c      	ldr	r0, [pc, #48]	; (800290c <ST7735_FillRectangle1+0xe4>)
 80028dc:	f006 fb96 	bl	800900c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80028e0:	88fb      	ldrh	r3, [r7, #6]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	80fb      	strh	r3, [r7, #6]
 80028e6:	88fb      	ldrh	r3, [r7, #6]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f1      	bne.n	80028d0 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80028ec:	88bb      	ldrh	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	80bb      	strh	r3, [r7, #4]
 80028f2:	88bb      	ldrh	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1e8      	bne.n	80028ca <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 80028f8:	f7ff fd1a 	bl	8002330 <ST7735_Unselect1>
 80028fc:	e000      	b.n	8002900 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80028fe:	bf00      	nop
}
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bd90      	pop	{r4, r7, pc}
 8002906:	bf00      	nop
 8002908:	58021800 	.word	0x58021800
 800290c:	24000250 	.word	0x24000250

08002910 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af02      	add	r7, sp, #8
 8002916:	4603      	mov	r3, r0
 8002918:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800291a:	88fb      	ldrh	r3, [r7, #6]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	2280      	movs	r2, #128	; 0x80
 8002922:	2100      	movs	r1, #0
 8002924:	2000      	movs	r0, #0
 8002926:	f7ff ff0b 	bl	8002740 <ST7735_FillRectangle>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8002932:	b580      	push	{r7, lr}
 8002934:	b084      	sub	sp, #16
 8002936:	af02      	add	r7, sp, #8
 8002938:	4603      	mov	r3, r0
 800293a:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800293c:	88fb      	ldrh	r3, [r7, #6]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	2100      	movs	r1, #0
 8002946:	2000      	movs	r0, #0
 8002948:	f7ff ff6e 	bl	8002828 <ST7735_FillRectangle1>
}
 800294c:	bf00      	nop
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <HAL_MspInit+0x30>)
 800295c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002960:	4a08      	ldr	r2, [pc, #32]	; (8002984 <HAL_MspInit+0x30>)
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800296a:	4b06      	ldr	r3, [pc, #24]	; (8002984 <HAL_MspInit+0x30>)
 800296c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	607b      	str	r3, [r7, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr
 8002984:	58024400 	.word	0x58024400

08002988 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
 8002998:	605a      	str	r2, [r3, #4]
 800299a:	609a      	str	r2, [r3, #8]
 800299c:	60da      	str	r2, [r3, #12]
 800299e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a59      	ldr	r2, [pc, #356]	; (8002b0c <HAL_ETH_MspInit+0x184>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	f040 80ab 	bne.w	8002b02 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80029ac:	4b58      	ldr	r3, [pc, #352]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029b2:	4a57      	ldr	r2, [pc, #348]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029bc:	4b54      	ldr	r3, [pc, #336]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80029ca:	4b51      	ldr	r3, [pc, #324]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029d0:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029da:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e4:	61fb      	str	r3, [r7, #28]
 80029e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80029e8:	4b49      	ldr	r3, [pc, #292]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029ee:	4a48      	ldr	r2, [pc, #288]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029f4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80029f8:	4b45      	ldr	r3, [pc, #276]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 80029fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	61bb      	str	r3, [r7, #24]
 8002a04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	4b42      	ldr	r3, [pc, #264]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a0c:	4a40      	ldr	r2, [pc, #256]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a16:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a24:	4b3a      	ldr	r3, [pc, #232]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2a:	4a39      	ldr	r2, [pc, #228]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a34:	4b36      	ldr	r3, [pc, #216]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a42:	4b33      	ldr	r3, [pc, #204]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a48:	4a31      	ldr	r2, [pc, #196]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a4a:	f043 0302 	orr.w	r3, r3, #2
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a52:	4b2f      	ldr	r3, [pc, #188]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a60:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a66:	4a2a      	ldr	r2, [pc, #168]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a70:	4b27      	ldr	r3, [pc, #156]	; (8002b10 <HAL_ETH_MspInit+0x188>)
 8002a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a7a:	60bb      	str	r3, [r7, #8]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002a7e:	2332      	movs	r3, #50	; 0x32
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a82:	2302      	movs	r3, #2
 8002a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a86:	2300      	movs	r3, #0
 8002a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002a8e:	230b      	movs	r3, #11
 8002a90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	4619      	mov	r1, r3
 8002a98:	481e      	ldr	r0, [pc, #120]	; (8002b14 <HAL_ETH_MspInit+0x18c>)
 8002a9a:	f003 fab3 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002a9e:	2386      	movs	r3, #134	; 0x86
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002aae:	230b      	movs	r3, #11
 8002ab0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4817      	ldr	r0, [pc, #92]	; (8002b18 <HAL_ETH_MspInit+0x190>)
 8002aba:	f003 faa3 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002acc:	2300      	movs	r3, #0
 8002ace:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002ad0:	230b      	movs	r3, #11
 8002ad2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad8:	4619      	mov	r1, r3
 8002ada:	4810      	ldr	r0, [pc, #64]	; (8002b1c <HAL_ETH_MspInit+0x194>)
 8002adc:	f003 fa92 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002ae0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aea:	2300      	movs	r3, #0
 8002aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aee:	2300      	movs	r3, #0
 8002af0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002af2:	230b      	movs	r3, #11
 8002af4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002afa:	4619      	mov	r1, r3
 8002afc:	4808      	ldr	r0, [pc, #32]	; (8002b20 <HAL_ETH_MspInit+0x198>)
 8002afe:	f003 fa81 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002b02:	bf00      	nop
 8002b04:	3738      	adds	r7, #56	; 0x38
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40028000 	.word	0x40028000
 8002b10:	58024400 	.word	0x58024400
 8002b14:	58020800 	.word	0x58020800
 8002b18:	58020000 	.word	0x58020000
 8002b1c:	58020400 	.word	0x58020400
 8002b20:	58021800 	.word	0x58021800

08002b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_SPI_MspInit+0xc8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d14d      	bne.n	8002be2 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b46:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b4c:	4a28      	ldr	r2, [pc, #160]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b52:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b64:	4b22      	ldr	r3, [pc, #136]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b6a:	4a21      	ldr	r2, [pc, #132]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b6c:	f043 0302 	orr.w	r3, r3, #2
 8002b70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b74:	4b1e      	ldr	r3, [pc, #120]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b82:	4b1b      	ldr	r3, [pc, #108]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b88:	4a19      	ldr	r2, [pc, #100]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b8a:	f043 0304 	orr.w	r3, r3, #4
 8002b8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b92:	4b17      	ldr	r3, [pc, #92]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002ba0:	2304      	movs	r3, #4
 8002ba2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ba8:	2302      	movs	r3, #2
 8002baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002bb0:	2307      	movs	r3, #7
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb4:	f107 0314 	add.w	r3, r7, #20
 8002bb8:	4619      	mov	r1, r3
 8002bba:	480e      	ldr	r0, [pc, #56]	; (8002bf4 <HAL_SPI_MspInit+0xd0>)
 8002bbc:	f003 fa22 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bd2:	2306      	movs	r3, #6
 8002bd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd6:	f107 0314 	add.w	r3, r7, #20
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4806      	ldr	r0, [pc, #24]	; (8002bf8 <HAL_SPI_MspInit+0xd4>)
 8002bde:	f003 fa11 	bl	8006004 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3728      	adds	r7, #40	; 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40003c00 	.word	0x40003c00
 8002bf0:	58024400 	.word	0x58024400
 8002bf4:	58020400 	.word	0x58020400
 8002bf8:	58020800 	.word	0x58020800

08002bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b0b8      	sub	sp, #224	; 0xe0
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c14:	f107 0310 	add.w	r3, r7, #16
 8002c18:	22bc      	movs	r2, #188	; 0xbc
 8002c1a:	2100      	movs	r1, #0
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f008 fcf9 	bl	800b614 <memset>
  if(huart->Instance==USART3)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a57      	ldr	r2, [pc, #348]	; (8002d84 <HAL_UART_MspInit+0x188>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	f040 80a6 	bne.w	8002d7a <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002c2e:	2302      	movs	r3, #2
 8002c30:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c32:	2300      	movs	r3, #0
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c38:	f107 0310 	add.w	r3, r7, #16
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f004 fd77 	bl	8007730 <HAL_RCCEx_PeriphCLKConfig>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d001      	beq.n	8002c4c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002c48:	f7ff fb48 	bl	80022dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c4c:	4b4e      	ldr	r3, [pc, #312]	; (8002d88 <HAL_UART_MspInit+0x18c>)
 8002c4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c52:	4a4d      	ldr	r2, [pc, #308]	; (8002d88 <HAL_UART_MspInit+0x18c>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c5c:	4b4a      	ldr	r3, [pc, #296]	; (8002d88 <HAL_UART_MspInit+0x18c>)
 8002c5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_UART_MspInit+0x18c>)
 8002c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c70:	4a45      	ldr	r2, [pc, #276]	; (8002d88 <HAL_UART_MspInit+0x18c>)
 8002c72:	f043 0308 	orr.w	r3, r3, #8
 8002c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c7a:	4b43      	ldr	r3, [pc, #268]	; (8002d88 <HAL_UART_MspInit+0x18c>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c88:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ca2:	2307      	movs	r3, #7
 8002ca4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002cac:	4619      	mov	r1, r3
 8002cae:	4837      	ldr	r0, [pc, #220]	; (8002d8c <HAL_UART_MspInit+0x190>)
 8002cb0:	f003 f9a8 	bl	8006004 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002cb4:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cb6:	4a37      	ldr	r2, [pc, #220]	; (8002d94 <HAL_UART_MspInit+0x198>)
 8002cb8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002cba:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cbc:	222d      	movs	r2, #45	; 0x2d
 8002cbe:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cc0:	4b33      	ldr	r3, [pc, #204]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cc6:	4b32      	ldr	r3, [pc, #200]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ccc:	4b30      	ldr	r3, [pc, #192]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cd2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002cd4:	4b2e      	ldr	r3, [pc, #184]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002ce0:	4b2b      	ldr	r3, [pc, #172]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002ce2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ce6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ce8:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cee:	4b28      	ldr	r3, [pc, #160]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002cf4:	4826      	ldr	r0, [pc, #152]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002cf6:	f000 fb3b 	bl	8003370 <HAL_DMA_Init>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002d00:	f7ff faec 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a22      	ldr	r2, [pc, #136]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002d08:	67da      	str	r2, [r3, #124]	; 0x7c
 8002d0a:	4a21      	ldr	r2, [pc, #132]	; (8002d90 <HAL_UART_MspInit+0x194>)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002d10:	4b21      	ldr	r3, [pc, #132]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d12:	4a22      	ldr	r2, [pc, #136]	; (8002d9c <HAL_UART_MspInit+0x1a0>)
 8002d14:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d18:	222e      	movs	r2, #46	; 0x2e
 8002d1a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d1c:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d1e:	2240      	movs	r2, #64	; 0x40
 8002d20:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d2a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d2e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d30:	4b19      	ldr	r3, [pc, #100]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002d3c:	4b16      	ldr	r3, [pc, #88]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d3e:	2200      	movs	r2, #0
 8002d40:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d48:	4b13      	ldr	r3, [pc, #76]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002d4e:	4812      	ldr	r0, [pc, #72]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d50:	f000 fb0e 	bl	8003370 <HAL_DMA_Init>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8002d5a:	f7ff fabf 	bl	80022dc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a0d      	ldr	r2, [pc, #52]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d62:	679a      	str	r2, [r3, #120]	; 0x78
 8002d64:	4a0c      	ldr	r2, [pc, #48]	; (8002d98 <HAL_UART_MspInit+0x19c>)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	2027      	movs	r0, #39	; 0x27
 8002d70:	f000 fac9 	bl	8003306 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d74:	2027      	movs	r0, #39	; 0x27
 8002d76:	f000 fae0 	bl	800333a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d7a:	bf00      	nop
 8002d7c:	37e0      	adds	r7, #224	; 0xe0
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40004800 	.word	0x40004800
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	58020c00 	.word	0x58020c00
 8002d90:	24000368 	.word	0x24000368
 8002d94:	40020028 	.word	0x40020028
 8002d98:	240003e0 	.word	0x240003e0
 8002d9c:	40020070 	.word	0x40020070

08002da0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b08a      	sub	sp, #40	; 0x28
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002da8:	f107 0314 	add.w	r3, r7, #20
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a22      	ldr	r2, [pc, #136]	; (8002e48 <HAL_PCD_MspInit+0xa8>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d13d      	bne.n	8002e3e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002dc2:	f003 fceb 	bl	800679c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <HAL_PCD_MspInit+0xac>)
 8002dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dcc:	4a1f      	ldr	r2, [pc, #124]	; (8002e4c <HAL_PCD_MspInit+0xac>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	; (8002e4c <HAL_PCD_MspInit+0xac>)
 8002dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002de4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dea:	2302      	movs	r3, #2
 8002dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dee:	2300      	movs	r3, #0
 8002df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df2:	2300      	movs	r3, #0
 8002df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002df6:	230a      	movs	r3, #10
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dfa:	f107 0314 	add.w	r3, r7, #20
 8002dfe:	4619      	mov	r1, r3
 8002e00:	4813      	ldr	r0, [pc, #76]	; (8002e50 <HAL_PCD_MspInit+0xb0>)
 8002e02:	f003 f8ff 	bl	8006004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002e06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e10:	2300      	movs	r3, #0
 8002e12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e14:	f107 0314 	add.w	r3, r7, #20
 8002e18:	4619      	mov	r1, r3
 8002e1a:	480d      	ldr	r0, [pc, #52]	; (8002e50 <HAL_PCD_MspInit+0xb0>)
 8002e1c:	f003 f8f2 	bl	8006004 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <HAL_PCD_MspInit+0xac>)
 8002e22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e26:	4a09      	ldr	r2, [pc, #36]	; (8002e4c <HAL_PCD_MspInit+0xac>)
 8002e28:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002e30:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <HAL_PCD_MspInit+0xac>)
 8002e32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002e36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002e3e:	bf00      	nop
 8002e40:	3728      	adds	r7, #40	; 0x28
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40080000 	.word	0x40080000
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	58020000 	.word	0x58020000

08002e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e58:	e7fe      	b.n	8002e58 <NMI_Handler+0x4>

08002e5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e5e:	e7fe      	b.n	8002e5e <HardFault_Handler+0x4>

08002e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e64:	e7fe      	b.n	8002e64 <MemManage_Handler+0x4>

08002e66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e6a:	e7fe      	b.n	8002e6a <BusFault_Handler+0x4>

08002e6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <UsageFault_Handler+0x4>

08002e72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ea0:	f000 f8f2 	bl	8003088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <DMA1_Stream1_IRQHandler+0x10>)
 8002eae:	f001 fb1f 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	24000368 	.word	0x24000368

08002ebc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <DMA1_Stream4_IRQHandler+0x10>)
 8002ec2:	f001 fb15 	bl	80044f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	240003e0 	.word	0x240003e0

08002ed0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002ed4:	4802      	ldr	r0, [pc, #8]	; (8002ee0 <USART3_IRQHandler+0x10>)
 8002ed6:	f006 fbc5 	bl	8009664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	240002d8 	.word	0x240002d8

08002ee4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b086      	sub	sp, #24
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002eec:	4a14      	ldr	r2, [pc, #80]	; (8002f40 <_sbrk+0x5c>)
 8002eee:	4b15      	ldr	r3, [pc, #84]	; (8002f44 <_sbrk+0x60>)
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ef8:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <_sbrk+0x64>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <_sbrk+0x64>)
 8002f02:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <_sbrk+0x68>)
 8002f04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <_sbrk+0x64>)
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d207      	bcs.n	8002f24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f14:	f008 fb54 	bl	800b5c0 <__errno>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f22:	e009      	b.n	8002f38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f24:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <_sbrk+0x64>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f2a:	4b07      	ldr	r3, [pc, #28]	; (8002f48 <_sbrk+0x64>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	4a05      	ldr	r2, [pc, #20]	; (8002f48 <_sbrk+0x64>)
 8002f34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f36:	68fb      	ldr	r3, [r7, #12]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	24080000 	.word	0x24080000
 8002f44:	00000400 	.word	0x00000400
 8002f48:	24000dac 	.word	0x24000dac
 8002f4c:	24000dc8 	.word	0x24000dc8

08002f50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002f50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002f54:	f7fe fd7e 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f58:	480c      	ldr	r0, [pc, #48]	; (8002f8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f5a:	490d      	ldr	r1, [pc, #52]	; (8002f90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f5c:	4a0d      	ldr	r2, [pc, #52]	; (8002f94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f60:	e002      	b.n	8002f68 <LoopCopyDataInit>

08002f62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f66:	3304      	adds	r3, #4

08002f68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f6c:	d3f9      	bcc.n	8002f62 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f6e:	4a0a      	ldr	r2, [pc, #40]	; (8002f98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f74:	e001      	b.n	8002f7a <LoopFillZerobss>

08002f76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f78:	3204      	adds	r2, #4

08002f7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f7c:	d3fb      	bcc.n	8002f76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f7e:	f008 fb25 	bl	800b5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f82:	f7fe fdfd 	bl	8001b80 <main>
  bx  lr
 8002f86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f88:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002f8c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002f90:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002f94:	0800d5c4 	.word	0x0800d5c4
  ldr r2, =_sbss
 8002f98:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8002f9c:	24000dc4 	.word	0x24000dc4

08002fa0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fa0:	e7fe      	b.n	8002fa0 <ADC3_IRQHandler>
	...

08002fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002faa:	2003      	movs	r0, #3
 8002fac:	f000 f9a0 	bl	80032f0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002fb0:	f004 f9e8 	bl	8007384 <HAL_RCC_GetSysClockFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b15      	ldr	r3, [pc, #84]	; (800300c <HAL_Init+0x68>)
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 030f 	and.w	r3, r3, #15
 8002fc0:	4913      	ldr	r1, [pc, #76]	; (8003010 <HAL_Init+0x6c>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_Init+0x68>)
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <HAL_Init+0x6c>)
 8002fd8:	5cd3      	ldrb	r3, [r2, r3]
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <HAL_Init+0x70>)
 8002fe6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fe8:	4a0b      	ldr	r2, [pc, #44]	; (8003018 <HAL_Init+0x74>)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fee:	2000      	movs	r0, #0
 8002ff0:	f000 f814 	bl	800301c <HAL_InitTick>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d001      	beq.n	8002ffe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e002      	b.n	8003004 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ffe:	f7ff fca9 	bl	8002954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	58024400 	.word	0x58024400
 8003010:	0800c000 	.word	0x0800c000
 8003014:	24000004 	.word	0x24000004
 8003018:	24000000 	.word	0x24000000

0800301c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003024:	4b15      	ldr	r3, [pc, #84]	; (800307c <HAL_InitTick+0x60>)
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e021      	b.n	8003074 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003030:	4b13      	ldr	r3, [pc, #76]	; (8003080 <HAL_InitTick+0x64>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	4b11      	ldr	r3, [pc, #68]	; (800307c <HAL_InitTick+0x60>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	4619      	mov	r1, r3
 800303a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800303e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003042:	fbb2 f3f3 	udiv	r3, r2, r3
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f985 	bl	8003356 <HAL_SYSTICK_Config>
 800304c:	4603      	mov	r3, r0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d001      	beq.n	8003056 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e00e      	b.n	8003074 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b0f      	cmp	r3, #15
 800305a:	d80a      	bhi.n	8003072 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800305c:	2200      	movs	r2, #0
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	f04f 30ff 	mov.w	r0, #4294967295
 8003064:	f000 f94f 	bl	8003306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003068:	4a06      	ldr	r2, [pc, #24]	; (8003084 <HAL_InitTick+0x68>)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	e000      	b.n	8003074 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
}
 8003074:	4618      	mov	r0, r3
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	2400001c 	.word	0x2400001c
 8003080:	24000000 	.word	0x24000000
 8003084:	24000018 	.word	0x24000018

08003088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800308c:	4b06      	ldr	r3, [pc, #24]	; (80030a8 <HAL_IncTick+0x20>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_IncTick+0x24>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	4a04      	ldr	r2, [pc, #16]	; (80030ac <HAL_IncTick+0x24>)
 800309a:	6013      	str	r3, [r2, #0]
}
 800309c:	bf00      	nop
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	2400001c 	.word	0x2400001c
 80030ac:	24000db0 	.word	0x24000db0

080030b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	af00      	add	r7, sp, #0
  return uwTick;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <HAL_GetTick+0x14>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	24000db0 	.word	0x24000db0

080030c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d0:	f7ff ffee 	bl	80030b0 <HAL_GetTick>
 80030d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d005      	beq.n	80030ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_Delay+0x44>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	461a      	mov	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4413      	add	r3, r2
 80030ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030ee:	bf00      	nop
 80030f0:	f7ff ffde 	bl	80030b0 <HAL_GetTick>
 80030f4:	4602      	mov	r2, r0
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d8f7      	bhi.n	80030f0 <HAL_Delay+0x28>
  {
  }
}
 8003100:	bf00      	nop
 8003102:	bf00      	nop
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2400001c 	.word	0x2400001c

08003110 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <HAL_GetREVID+0x14>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0c1b      	lsrs	r3, r3, #16
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	5c001000 	.word	0x5c001000

08003128 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003130:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003138:	4904      	ldr	r1, [pc, #16]	; (800314c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4313      	orrs	r3, r2
 800313e:	604b      	str	r3, [r1, #4]
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	58000400 	.word	0x58000400

08003150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003150:	b480      	push	{r7}
 8003152:	b085      	sub	sp, #20
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <__NVIC_SetPriorityGrouping+0x40>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003166:	68ba      	ldr	r2, [r7, #8]
 8003168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800316c:	4013      	ands	r3, r2
 800316e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <__NVIC_SetPriorityGrouping+0x44>)
 800317a:	4313      	orrs	r3, r2
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <__NVIC_SetPriorityGrouping+0x40>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00
 8003194:	05fa0000 	.word	0x05fa0000

08003198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800319c:	4b04      	ldr	r3, [pc, #16]	; (80031b0 <__NVIC_GetPriorityGrouping+0x18>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	f003 0307 	and.w	r3, r3, #7
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000ed00 	.word	0xe000ed00

080031b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	db0b      	blt.n	80031de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	f003 021f 	and.w	r2, r3, #31
 80031cc:	4907      	ldr	r1, [pc, #28]	; (80031ec <__NVIC_EnableIRQ+0x38>)
 80031ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80031d2:	095b      	lsrs	r3, r3, #5
 80031d4:	2001      	movs	r0, #1
 80031d6:	fa00 f202 	lsl.w	r2, r0, r2
 80031da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	e000e100 	.word	0xe000e100

080031f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80031fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003200:	2b00      	cmp	r3, #0
 8003202:	db0a      	blt.n	800321a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	b2da      	uxtb	r2, r3
 8003208:	490c      	ldr	r1, [pc, #48]	; (800323c <__NVIC_SetPriority+0x4c>)
 800320a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800320e:	0112      	lsls	r2, r2, #4
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	440b      	add	r3, r1
 8003214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003218:	e00a      	b.n	8003230 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	b2da      	uxtb	r2, r3
 800321e:	4908      	ldr	r1, [pc, #32]	; (8003240 <__NVIC_SetPriority+0x50>)
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	3b04      	subs	r3, #4
 8003228:	0112      	lsls	r2, r2, #4
 800322a:	b2d2      	uxtb	r2, r2
 800322c:	440b      	add	r3, r1
 800322e:	761a      	strb	r2, [r3, #24]
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000e100 	.word	0xe000e100
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003244:	b480      	push	{r7}
 8003246:	b089      	sub	sp, #36	; 0x24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	f1c3 0307 	rsb	r3, r3, #7
 800325e:	2b04      	cmp	r3, #4
 8003260:	bf28      	it	cs
 8003262:	2304      	movcs	r3, #4
 8003264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	3304      	adds	r3, #4
 800326a:	2b06      	cmp	r3, #6
 800326c:	d902      	bls.n	8003274 <NVIC_EncodePriority+0x30>
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	3b03      	subs	r3, #3
 8003272:	e000      	b.n	8003276 <NVIC_EncodePriority+0x32>
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003278:	f04f 32ff 	mov.w	r2, #4294967295
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	fa02 f303 	lsl.w	r3, r2, r3
 8003282:	43da      	mvns	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	401a      	ands	r2, r3
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800328c:	f04f 31ff 	mov.w	r1, #4294967295
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	43d9      	mvns	r1, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800329c:	4313      	orrs	r3, r2
         );
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3724      	adds	r7, #36	; 0x24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b082      	sub	sp, #8
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032bc:	d301      	bcc.n	80032c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032be:	2301      	movs	r3, #1
 80032c0:	e00f      	b.n	80032e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <SysTick_Config+0x40>)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ca:	210f      	movs	r1, #15
 80032cc:	f04f 30ff 	mov.w	r0, #4294967295
 80032d0:	f7ff ff8e 	bl	80031f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d4:	4b05      	ldr	r3, [pc, #20]	; (80032ec <SysTick_Config+0x40>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032da:	4b04      	ldr	r3, [pc, #16]	; (80032ec <SysTick_Config+0x40>)
 80032dc:	2207      	movs	r2, #7
 80032de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	e000e010 	.word	0xe000e010

080032f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff ff29 	bl	8003150 <__NVIC_SetPriorityGrouping>
}
 80032fe:	bf00      	nop
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af00      	add	r7, sp, #0
 800330c:	4603      	mov	r3, r0
 800330e:	60b9      	str	r1, [r7, #8]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003314:	f7ff ff40 	bl	8003198 <__NVIC_GetPriorityGrouping>
 8003318:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff ff90 	bl	8003244 <NVIC_EncodePriority>
 8003324:	4602      	mov	r2, r0
 8003326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff5f 	bl	80031f0 <__NVIC_SetPriority>
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003344:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff33 	bl	80031b4 <__NVIC_EnableIRQ>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffa4 	bl	80032ac <SysTick_Config>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
	...

08003370 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b086      	sub	sp, #24
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003378:	f7ff fe9a 	bl	80030b0 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e316      	b.n	80039b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a66      	ldr	r2, [pc, #408]	; (8003528 <HAL_DMA_Init+0x1b8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d04a      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a65      	ldr	r2, [pc, #404]	; (800352c <HAL_DMA_Init+0x1bc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d045      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a63      	ldr	r2, [pc, #396]	; (8003530 <HAL_DMA_Init+0x1c0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d040      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a62      	ldr	r2, [pc, #392]	; (8003534 <HAL_DMA_Init+0x1c4>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d03b      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a60      	ldr	r2, [pc, #384]	; (8003538 <HAL_DMA_Init+0x1c8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d036      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a5f      	ldr	r2, [pc, #380]	; (800353c <HAL_DMA_Init+0x1cc>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d031      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5d      	ldr	r2, [pc, #372]	; (8003540 <HAL_DMA_Init+0x1d0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d02c      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5c      	ldr	r2, [pc, #368]	; (8003544 <HAL_DMA_Init+0x1d4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d027      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a5a      	ldr	r2, [pc, #360]	; (8003548 <HAL_DMA_Init+0x1d8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d022      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a59      	ldr	r2, [pc, #356]	; (800354c <HAL_DMA_Init+0x1dc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d01d      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_DMA_Init+0x1e0>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d018      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_DMA_Init+0x1e4>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d013      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a54      	ldr	r2, [pc, #336]	; (8003558 <HAL_DMA_Init+0x1e8>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d00e      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a53      	ldr	r2, [pc, #332]	; (800355c <HAL_DMA_Init+0x1ec>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d009      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a51      	ldr	r2, [pc, #324]	; (8003560 <HAL_DMA_Init+0x1f0>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d004      	beq.n	8003428 <HAL_DMA_Init+0xb8>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a50      	ldr	r2, [pc, #320]	; (8003564 <HAL_DMA_Init+0x1f4>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d101      	bne.n	800342c <HAL_DMA_Init+0xbc>
 8003428:	2301      	movs	r3, #1
 800342a:	e000      	b.n	800342e <HAL_DMA_Init+0xbe>
 800342c:	2300      	movs	r3, #0
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 813b 	beq.w	80036aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a37      	ldr	r2, [pc, #220]	; (8003528 <HAL_DMA_Init+0x1b8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d04a      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a36      	ldr	r2, [pc, #216]	; (800352c <HAL_DMA_Init+0x1bc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d045      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a34      	ldr	r2, [pc, #208]	; (8003530 <HAL_DMA_Init+0x1c0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d040      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a33      	ldr	r2, [pc, #204]	; (8003534 <HAL_DMA_Init+0x1c4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d03b      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a31      	ldr	r2, [pc, #196]	; (8003538 <HAL_DMA_Init+0x1c8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d036      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a30      	ldr	r2, [pc, #192]	; (800353c <HAL_DMA_Init+0x1cc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d031      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a2e      	ldr	r2, [pc, #184]	; (8003540 <HAL_DMA_Init+0x1d0>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d02c      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a2d      	ldr	r2, [pc, #180]	; (8003544 <HAL_DMA_Init+0x1d4>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d027      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a2b      	ldr	r2, [pc, #172]	; (8003548 <HAL_DMA_Init+0x1d8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d022      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <HAL_DMA_Init+0x1dc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d01d      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a28      	ldr	r2, [pc, #160]	; (8003550 <HAL_DMA_Init+0x1e0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d018      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a27      	ldr	r2, [pc, #156]	; (8003554 <HAL_DMA_Init+0x1e4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <HAL_DMA_Init+0x1e8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00e      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a24      	ldr	r2, [pc, #144]	; (800355c <HAL_DMA_Init+0x1ec>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d009      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a22      	ldr	r2, [pc, #136]	; (8003560 <HAL_DMA_Init+0x1f0>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d004      	beq.n	80034e4 <HAL_DMA_Init+0x174>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a21      	ldr	r2, [pc, #132]	; (8003564 <HAL_DMA_Init+0x1f4>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <HAL_DMA_Init+0x186>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	e007      	b.n	8003506 <HAL_DMA_Init+0x196>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f022 0201 	bic.w	r2, r2, #1
 8003504:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003506:	e02f      	b.n	8003568 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003508:	f7ff fdd2 	bl	80030b0 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b05      	cmp	r3, #5
 8003514:	d928      	bls.n	8003568 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2220      	movs	r2, #32
 800351a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2203      	movs	r2, #3
 8003520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e246      	b.n	80039b6 <HAL_DMA_Init+0x646>
 8003528:	40020010 	.word	0x40020010
 800352c:	40020028 	.word	0x40020028
 8003530:	40020040 	.word	0x40020040
 8003534:	40020058 	.word	0x40020058
 8003538:	40020070 	.word	0x40020070
 800353c:	40020088 	.word	0x40020088
 8003540:	400200a0 	.word	0x400200a0
 8003544:	400200b8 	.word	0x400200b8
 8003548:	40020410 	.word	0x40020410
 800354c:	40020428 	.word	0x40020428
 8003550:	40020440 	.word	0x40020440
 8003554:	40020458 	.word	0x40020458
 8003558:	40020470 	.word	0x40020470
 800355c:	40020488 	.word	0x40020488
 8003560:	400204a0 	.word	0x400204a0
 8003564:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1c8      	bne.n	8003508 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4b83      	ldr	r3, [pc, #524]	; (8003790 <HAL_DMA_Init+0x420>)
 8003582:	4013      	ands	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800358e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800359a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035a6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	4313      	orrs	r3, r2
 80035b2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d107      	bne.n	80035cc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	4313      	orrs	r3, r2
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80035cc:	4b71      	ldr	r3, [pc, #452]	; (8003794 <HAL_DMA_Init+0x424>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	4b71      	ldr	r3, [pc, #452]	; (8003798 <HAL_DMA_Init+0x428>)
 80035d2:	4013      	ands	r3, r2
 80035d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d8:	d328      	bcc.n	800362c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b28      	cmp	r3, #40	; 0x28
 80035e0:	d903      	bls.n	80035ea <HAL_DMA_Init+0x27a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	2b2e      	cmp	r3, #46	; 0x2e
 80035e8:	d917      	bls.n	800361a <HAL_DMA_Init+0x2aa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2b3e      	cmp	r3, #62	; 0x3e
 80035f0:	d903      	bls.n	80035fa <HAL_DMA_Init+0x28a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	2b42      	cmp	r3, #66	; 0x42
 80035f8:	d90f      	bls.n	800361a <HAL_DMA_Init+0x2aa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	2b46      	cmp	r3, #70	; 0x46
 8003600:	d903      	bls.n	800360a <HAL_DMA_Init+0x29a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b48      	cmp	r3, #72	; 0x48
 8003608:	d907      	bls.n	800361a <HAL_DMA_Init+0x2aa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	2b4e      	cmp	r3, #78	; 0x4e
 8003610:	d905      	bls.n	800361e <HAL_DMA_Init+0x2ae>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b52      	cmp	r3, #82	; 0x52
 8003618:	d801      	bhi.n	800361e <HAL_DMA_Init+0x2ae>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_DMA_Init+0x2b0>
 800361e:	2300      	movs	r3, #0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800362a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f023 0307 	bic.w	r3, r3, #7
 8003642:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003648:	697a      	ldr	r2, [r7, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	2b04      	cmp	r3, #4
 8003654:	d117      	bne.n	8003686 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00e      	beq.n	8003686 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f001 ff1d 	bl	80054a8 <DMA_CheckFifoParam>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2240      	movs	r2, #64	; 0x40
 8003678:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2201      	movs	r2, #1
 800367e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	e197      	b.n	80039b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	697a      	ldr	r2, [r7, #20]
 800368c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f001 fe58 	bl	8005344 <DMA_CalcBaseAndBitshift>
 8003694:	4603      	mov	r3, r0
 8003696:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	223f      	movs	r2, #63	; 0x3f
 80036a2:	409a      	lsls	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	e0cd      	b.n	8003846 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a3b      	ldr	r2, [pc, #236]	; (800379c <HAL_DMA_Init+0x42c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_DMA_Init+0x38a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a39      	ldr	r2, [pc, #228]	; (80037a0 <HAL_DMA_Init+0x430>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01d      	beq.n	80036fa <HAL_DMA_Init+0x38a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a38      	ldr	r2, [pc, #224]	; (80037a4 <HAL_DMA_Init+0x434>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_DMA_Init+0x38a>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a36      	ldr	r2, [pc, #216]	; (80037a8 <HAL_DMA_Init+0x438>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_DMA_Init+0x38a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a35      	ldr	r2, [pc, #212]	; (80037ac <HAL_DMA_Init+0x43c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_DMA_Init+0x38a>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a33      	ldr	r2, [pc, #204]	; (80037b0 <HAL_DMA_Init+0x440>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_DMA_Init+0x38a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a32      	ldr	r2, [pc, #200]	; (80037b4 <HAL_DMA_Init+0x444>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_DMA_Init+0x38a>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a30      	ldr	r2, [pc, #192]	; (80037b8 <HAL_DMA_Init+0x448>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d101      	bne.n	80036fe <HAL_DMA_Init+0x38e>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <HAL_DMA_Init+0x390>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 8097 	beq.w	8003834 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a24      	ldr	r2, [pc, #144]	; (800379c <HAL_DMA_Init+0x42c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d021      	beq.n	8003754 <HAL_DMA_Init+0x3e4>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <HAL_DMA_Init+0x430>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d01c      	beq.n	8003754 <HAL_DMA_Init+0x3e4>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a21      	ldr	r2, [pc, #132]	; (80037a4 <HAL_DMA_Init+0x434>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d017      	beq.n	8003754 <HAL_DMA_Init+0x3e4>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_DMA_Init+0x438>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d012      	beq.n	8003754 <HAL_DMA_Init+0x3e4>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <HAL_DMA_Init+0x43c>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00d      	beq.n	8003754 <HAL_DMA_Init+0x3e4>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <HAL_DMA_Init+0x440>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d008      	beq.n	8003754 <HAL_DMA_Init+0x3e4>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a1b      	ldr	r2, [pc, #108]	; (80037b4 <HAL_DMA_Init+0x444>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d003      	beq.n	8003754 <HAL_DMA_Init+0x3e4>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a19      	ldr	r2, [pc, #100]	; (80037b8 <HAL_DMA_Init+0x448>)
 8003752:	4293      	cmp	r3, r2
 8003754:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2202      	movs	r2, #2
 800375a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4b12      	ldr	r3, [pc, #72]	; (80037bc <HAL_DMA_Init+0x44c>)
 8003772:	4013      	ands	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	2b40      	cmp	r3, #64	; 0x40
 800377c:	d020      	beq.n	80037c0 <HAL_DMA_Init+0x450>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b80      	cmp	r3, #128	; 0x80
 8003784:	d102      	bne.n	800378c <HAL_DMA_Init+0x41c>
 8003786:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800378a:	e01a      	b.n	80037c2 <HAL_DMA_Init+0x452>
 800378c:	2300      	movs	r3, #0
 800378e:	e018      	b.n	80037c2 <HAL_DMA_Init+0x452>
 8003790:	fe10803f 	.word	0xfe10803f
 8003794:	5c001000 	.word	0x5c001000
 8003798:	ffff0000 	.word	0xffff0000
 800379c:	58025408 	.word	0x58025408
 80037a0:	5802541c 	.word	0x5802541c
 80037a4:	58025430 	.word	0x58025430
 80037a8:	58025444 	.word	0x58025444
 80037ac:	58025458 	.word	0x58025458
 80037b0:	5802546c 	.word	0x5802546c
 80037b4:	58025480 	.word	0x58025480
 80037b8:	58025494 	.word	0x58025494
 80037bc:	fffe000f 	.word	0xfffe000f
 80037c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68d2      	ldr	r2, [r2, #12]
 80037c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	691b      	ldr	r3, [r3, #16]
 80037ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	461a      	mov	r2, r3
 8003806:	4b6e      	ldr	r3, [pc, #440]	; (80039c0 <HAL_DMA_Init+0x650>)
 8003808:	4413      	add	r3, r2
 800380a:	4a6e      	ldr	r2, [pc, #440]	; (80039c4 <HAL_DMA_Init+0x654>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	009a      	lsls	r2, r3, #2
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f001 fd93 	bl	8005344 <DMA_CalcBaseAndBitshift>
 800381e:	4603      	mov	r3, r0
 8003820:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	f003 031f 	and.w	r3, r3, #31
 800382a:	2201      	movs	r2, #1
 800382c:	409a      	lsls	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	e008      	b.n	8003846 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2203      	movs	r2, #3
 800383e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e0b7      	b.n	80039b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a5f      	ldr	r2, [pc, #380]	; (80039c8 <HAL_DMA_Init+0x658>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d072      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a5d      	ldr	r2, [pc, #372]	; (80039cc <HAL_DMA_Init+0x65c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d06d      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a5c      	ldr	r2, [pc, #368]	; (80039d0 <HAL_DMA_Init+0x660>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d068      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a5a      	ldr	r2, [pc, #360]	; (80039d4 <HAL_DMA_Init+0x664>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d063      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a59      	ldr	r2, [pc, #356]	; (80039d8 <HAL_DMA_Init+0x668>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d05e      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a57      	ldr	r2, [pc, #348]	; (80039dc <HAL_DMA_Init+0x66c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d059      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a56      	ldr	r2, [pc, #344]	; (80039e0 <HAL_DMA_Init+0x670>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d054      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a54      	ldr	r2, [pc, #336]	; (80039e4 <HAL_DMA_Init+0x674>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d04f      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a53      	ldr	r2, [pc, #332]	; (80039e8 <HAL_DMA_Init+0x678>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d04a      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a51      	ldr	r2, [pc, #324]	; (80039ec <HAL_DMA_Init+0x67c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d045      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a50      	ldr	r2, [pc, #320]	; (80039f0 <HAL_DMA_Init+0x680>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d040      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a4e      	ldr	r2, [pc, #312]	; (80039f4 <HAL_DMA_Init+0x684>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d03b      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a4d      	ldr	r2, [pc, #308]	; (80039f8 <HAL_DMA_Init+0x688>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d036      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a4b      	ldr	r2, [pc, #300]	; (80039fc <HAL_DMA_Init+0x68c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d031      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a4a      	ldr	r2, [pc, #296]	; (8003a00 <HAL_DMA_Init+0x690>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d02c      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a48      	ldr	r2, [pc, #288]	; (8003a04 <HAL_DMA_Init+0x694>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d027      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a47      	ldr	r2, [pc, #284]	; (8003a08 <HAL_DMA_Init+0x698>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d022      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a45      	ldr	r2, [pc, #276]	; (8003a0c <HAL_DMA_Init+0x69c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01d      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a44      	ldr	r2, [pc, #272]	; (8003a10 <HAL_DMA_Init+0x6a0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d018      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a42      	ldr	r2, [pc, #264]	; (8003a14 <HAL_DMA_Init+0x6a4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d013      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a41      	ldr	r2, [pc, #260]	; (8003a18 <HAL_DMA_Init+0x6a8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d00e      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a3f      	ldr	r2, [pc, #252]	; (8003a1c <HAL_DMA_Init+0x6ac>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a3e      	ldr	r2, [pc, #248]	; (8003a20 <HAL_DMA_Init+0x6b0>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d004      	beq.n	8003936 <HAL_DMA_Init+0x5c6>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a3c      	ldr	r2, [pc, #240]	; (8003a24 <HAL_DMA_Init+0x6b4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d101      	bne.n	800393a <HAL_DMA_Init+0x5ca>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_DMA_Init+0x5cc>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d032      	beq.n	80039a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f001 fe2d 	bl	80055a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b80      	cmp	r3, #128	; 0x80
 800394c:	d102      	bne.n	8003954 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003968:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d010      	beq.n	8003994 <HAL_DMA_Init+0x624>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b08      	cmp	r3, #8
 8003978:	d80c      	bhi.n	8003994 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f001 feaa 	bl	80056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003990:	605a      	str	r2, [r3, #4]
 8003992:	e008      	b.n	80039a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	a7fdabf8 	.word	0xa7fdabf8
 80039c4:	cccccccd 	.word	0xcccccccd
 80039c8:	40020010 	.word	0x40020010
 80039cc:	40020028 	.word	0x40020028
 80039d0:	40020040 	.word	0x40020040
 80039d4:	40020058 	.word	0x40020058
 80039d8:	40020070 	.word	0x40020070
 80039dc:	40020088 	.word	0x40020088
 80039e0:	400200a0 	.word	0x400200a0
 80039e4:	400200b8 	.word	0x400200b8
 80039e8:	40020410 	.word	0x40020410
 80039ec:	40020428 	.word	0x40020428
 80039f0:	40020440 	.word	0x40020440
 80039f4:	40020458 	.word	0x40020458
 80039f8:	40020470 	.word	0x40020470
 80039fc:	40020488 	.word	0x40020488
 8003a00:	400204a0 	.word	0x400204a0
 8003a04:	400204b8 	.word	0x400204b8
 8003a08:	58025408 	.word	0x58025408
 8003a0c:	5802541c 	.word	0x5802541c
 8003a10:	58025430 	.word	0x58025430
 8003a14:	58025444 	.word	0x58025444
 8003a18:	58025458 	.word	0x58025458
 8003a1c:	5802546c 	.word	0x5802546c
 8003a20:	58025480 	.word	0x58025480
 8003a24:	58025494 	.word	0x58025494

08003a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b086      	sub	sp, #24
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003a30:	f7ff fb3e 	bl	80030b0 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e2dc      	b.n	8003ffa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d008      	beq.n	8003a5e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2280      	movs	r2, #128	; 0x80
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e2cd      	b.n	8003ffa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a76      	ldr	r2, [pc, #472]	; (8003c3c <HAL_DMA_Abort+0x214>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d04a      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a74      	ldr	r2, [pc, #464]	; (8003c40 <HAL_DMA_Abort+0x218>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d045      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a73      	ldr	r2, [pc, #460]	; (8003c44 <HAL_DMA_Abort+0x21c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d040      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a71      	ldr	r2, [pc, #452]	; (8003c48 <HAL_DMA_Abort+0x220>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d03b      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a70      	ldr	r2, [pc, #448]	; (8003c4c <HAL_DMA_Abort+0x224>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d036      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a6e      	ldr	r2, [pc, #440]	; (8003c50 <HAL_DMA_Abort+0x228>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d031      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a6d      	ldr	r2, [pc, #436]	; (8003c54 <HAL_DMA_Abort+0x22c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d02c      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a6b      	ldr	r2, [pc, #428]	; (8003c58 <HAL_DMA_Abort+0x230>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d027      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a6a      	ldr	r2, [pc, #424]	; (8003c5c <HAL_DMA_Abort+0x234>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d022      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a68      	ldr	r2, [pc, #416]	; (8003c60 <HAL_DMA_Abort+0x238>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a67      	ldr	r2, [pc, #412]	; (8003c64 <HAL_DMA_Abort+0x23c>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d018      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a65      	ldr	r2, [pc, #404]	; (8003c68 <HAL_DMA_Abort+0x240>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a64      	ldr	r2, [pc, #400]	; (8003c6c <HAL_DMA_Abort+0x244>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d00e      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a62      	ldr	r2, [pc, #392]	; (8003c70 <HAL_DMA_Abort+0x248>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a61      	ldr	r2, [pc, #388]	; (8003c74 <HAL_DMA_Abort+0x24c>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d004      	beq.n	8003afe <HAL_DMA_Abort+0xd6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a5f      	ldr	r2, [pc, #380]	; (8003c78 <HAL_DMA_Abort+0x250>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d101      	bne.n	8003b02 <HAL_DMA_Abort+0xda>
 8003afe:	2301      	movs	r3, #1
 8003b00:	e000      	b.n	8003b04 <HAL_DMA_Abort+0xdc>
 8003b02:	2300      	movs	r3, #0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d013      	beq.n	8003b30 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 021e 	bic.w	r2, r2, #30
 8003b16:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695a      	ldr	r2, [r3, #20]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b26:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	e00a      	b.n	8003b46 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 020e 	bic.w	r2, r2, #14
 8003b3e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a3c      	ldr	r2, [pc, #240]	; (8003c3c <HAL_DMA_Abort+0x214>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d072      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a3a      	ldr	r2, [pc, #232]	; (8003c40 <HAL_DMA_Abort+0x218>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d06d      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a39      	ldr	r2, [pc, #228]	; (8003c44 <HAL_DMA_Abort+0x21c>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d068      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a37      	ldr	r2, [pc, #220]	; (8003c48 <HAL_DMA_Abort+0x220>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d063      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a36      	ldr	r2, [pc, #216]	; (8003c4c <HAL_DMA_Abort+0x224>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d05e      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <HAL_DMA_Abort+0x228>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d059      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a33      	ldr	r2, [pc, #204]	; (8003c54 <HAL_DMA_Abort+0x22c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d054      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a31      	ldr	r2, [pc, #196]	; (8003c58 <HAL_DMA_Abort+0x230>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d04f      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a30      	ldr	r2, [pc, #192]	; (8003c5c <HAL_DMA_Abort+0x234>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d04a      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a2e      	ldr	r2, [pc, #184]	; (8003c60 <HAL_DMA_Abort+0x238>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d045      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a2d      	ldr	r2, [pc, #180]	; (8003c64 <HAL_DMA_Abort+0x23c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d040      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a2b      	ldr	r2, [pc, #172]	; (8003c68 <HAL_DMA_Abort+0x240>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d03b      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <HAL_DMA_Abort+0x244>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d036      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a28      	ldr	r2, [pc, #160]	; (8003c70 <HAL_DMA_Abort+0x248>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d031      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a27      	ldr	r2, [pc, #156]	; (8003c74 <HAL_DMA_Abort+0x24c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d02c      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a25      	ldr	r2, [pc, #148]	; (8003c78 <HAL_DMA_Abort+0x250>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d027      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a24      	ldr	r2, [pc, #144]	; (8003c7c <HAL_DMA_Abort+0x254>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d022      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a22      	ldr	r2, [pc, #136]	; (8003c80 <HAL_DMA_Abort+0x258>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d01d      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_DMA_Abort+0x25c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d018      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a1f      	ldr	r2, [pc, #124]	; (8003c88 <HAL_DMA_Abort+0x260>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d013      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1e      	ldr	r2, [pc, #120]	; (8003c8c <HAL_DMA_Abort+0x264>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00e      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1c      	ldr	r2, [pc, #112]	; (8003c90 <HAL_DMA_Abort+0x268>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d009      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1b      	ldr	r2, [pc, #108]	; (8003c94 <HAL_DMA_Abort+0x26c>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d004      	beq.n	8003c36 <HAL_DMA_Abort+0x20e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <HAL_DMA_Abort+0x270>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d132      	bne.n	8003c9c <HAL_DMA_Abort+0x274>
 8003c36:	2301      	movs	r3, #1
 8003c38:	e031      	b.n	8003c9e <HAL_DMA_Abort+0x276>
 8003c3a:	bf00      	nop
 8003c3c:	40020010 	.word	0x40020010
 8003c40:	40020028 	.word	0x40020028
 8003c44:	40020040 	.word	0x40020040
 8003c48:	40020058 	.word	0x40020058
 8003c4c:	40020070 	.word	0x40020070
 8003c50:	40020088 	.word	0x40020088
 8003c54:	400200a0 	.word	0x400200a0
 8003c58:	400200b8 	.word	0x400200b8
 8003c5c:	40020410 	.word	0x40020410
 8003c60:	40020428 	.word	0x40020428
 8003c64:	40020440 	.word	0x40020440
 8003c68:	40020458 	.word	0x40020458
 8003c6c:	40020470 	.word	0x40020470
 8003c70:	40020488 	.word	0x40020488
 8003c74:	400204a0 	.word	0x400204a0
 8003c78:	400204b8 	.word	0x400204b8
 8003c7c:	58025408 	.word	0x58025408
 8003c80:	5802541c 	.word	0x5802541c
 8003c84:	58025430 	.word	0x58025430
 8003c88:	58025444 	.word	0x58025444
 8003c8c:	58025458 	.word	0x58025458
 8003c90:	5802546c 	.word	0x5802546c
 8003c94:	58025480 	.word	0x58025480
 8003c98:	58025494 	.word	0x58025494
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d007      	beq.n	8003cb2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a6d      	ldr	r2, [pc, #436]	; (8003e6c <HAL_DMA_Abort+0x444>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d04a      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6b      	ldr	r2, [pc, #428]	; (8003e70 <HAL_DMA_Abort+0x448>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d045      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a6a      	ldr	r2, [pc, #424]	; (8003e74 <HAL_DMA_Abort+0x44c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d040      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a68      	ldr	r2, [pc, #416]	; (8003e78 <HAL_DMA_Abort+0x450>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d03b      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a67      	ldr	r2, [pc, #412]	; (8003e7c <HAL_DMA_Abort+0x454>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d036      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a65      	ldr	r2, [pc, #404]	; (8003e80 <HAL_DMA_Abort+0x458>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d031      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a64      	ldr	r2, [pc, #400]	; (8003e84 <HAL_DMA_Abort+0x45c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d02c      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a62      	ldr	r2, [pc, #392]	; (8003e88 <HAL_DMA_Abort+0x460>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d027      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a61      	ldr	r2, [pc, #388]	; (8003e8c <HAL_DMA_Abort+0x464>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d022      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a5f      	ldr	r2, [pc, #380]	; (8003e90 <HAL_DMA_Abort+0x468>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d01d      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a5e      	ldr	r2, [pc, #376]	; (8003e94 <HAL_DMA_Abort+0x46c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d018      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a5c      	ldr	r2, [pc, #368]	; (8003e98 <HAL_DMA_Abort+0x470>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d013      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a5b      	ldr	r2, [pc, #364]	; (8003e9c <HAL_DMA_Abort+0x474>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d00e      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a59      	ldr	r2, [pc, #356]	; (8003ea0 <HAL_DMA_Abort+0x478>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a58      	ldr	r2, [pc, #352]	; (8003ea4 <HAL_DMA_Abort+0x47c>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d004      	beq.n	8003d52 <HAL_DMA_Abort+0x32a>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a56      	ldr	r2, [pc, #344]	; (8003ea8 <HAL_DMA_Abort+0x480>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d108      	bne.n	8003d64 <HAL_DMA_Abort+0x33c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0201 	bic.w	r2, r2, #1
 8003d60:	601a      	str	r2, [r3, #0]
 8003d62:	e007      	b.n	8003d74 <HAL_DMA_Abort+0x34c>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d74:	e013      	b.n	8003d9e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d76:	f7ff f99b 	bl	80030b0 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b05      	cmp	r3, #5
 8003d82:	d90c      	bls.n	8003d9e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2203      	movs	r2, #3
 8003d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e12d      	b.n	8003ffa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1e5      	bne.n	8003d76 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2f      	ldr	r2, [pc, #188]	; (8003e6c <HAL_DMA_Abort+0x444>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d04a      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a2d      	ldr	r2, [pc, #180]	; (8003e70 <HAL_DMA_Abort+0x448>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d045      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a2c      	ldr	r2, [pc, #176]	; (8003e74 <HAL_DMA_Abort+0x44c>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d040      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a2a      	ldr	r2, [pc, #168]	; (8003e78 <HAL_DMA_Abort+0x450>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d03b      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a29      	ldr	r2, [pc, #164]	; (8003e7c <HAL_DMA_Abort+0x454>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d036      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a27      	ldr	r2, [pc, #156]	; (8003e80 <HAL_DMA_Abort+0x458>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d031      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a26      	ldr	r2, [pc, #152]	; (8003e84 <HAL_DMA_Abort+0x45c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d02c      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a24      	ldr	r2, [pc, #144]	; (8003e88 <HAL_DMA_Abort+0x460>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d027      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a23      	ldr	r2, [pc, #140]	; (8003e8c <HAL_DMA_Abort+0x464>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d022      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a21      	ldr	r2, [pc, #132]	; (8003e90 <HAL_DMA_Abort+0x468>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01d      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a20      	ldr	r2, [pc, #128]	; (8003e94 <HAL_DMA_Abort+0x46c>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d018      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a1e      	ldr	r2, [pc, #120]	; (8003e98 <HAL_DMA_Abort+0x470>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d013      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <HAL_DMA_Abort+0x474>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d00e      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1b      	ldr	r2, [pc, #108]	; (8003ea0 <HAL_DMA_Abort+0x478>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d009      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1a      	ldr	r2, [pc, #104]	; (8003ea4 <HAL_DMA_Abort+0x47c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d004      	beq.n	8003e4a <HAL_DMA_Abort+0x422>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a18      	ldr	r2, [pc, #96]	; (8003ea8 <HAL_DMA_Abort+0x480>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d101      	bne.n	8003e4e <HAL_DMA_Abort+0x426>
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e000      	b.n	8003e50 <HAL_DMA_Abort+0x428>
 8003e4e:	2300      	movs	r3, #0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d02b      	beq.n	8003eac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5e:	f003 031f 	and.w	r3, r3, #31
 8003e62:	223f      	movs	r2, #63	; 0x3f
 8003e64:	409a      	lsls	r2, r3
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	609a      	str	r2, [r3, #8]
 8003e6a:	e02a      	b.n	8003ec2 <HAL_DMA_Abort+0x49a>
 8003e6c:	40020010 	.word	0x40020010
 8003e70:	40020028 	.word	0x40020028
 8003e74:	40020040 	.word	0x40020040
 8003e78:	40020058 	.word	0x40020058
 8003e7c:	40020070 	.word	0x40020070
 8003e80:	40020088 	.word	0x40020088
 8003e84:	400200a0 	.word	0x400200a0
 8003e88:	400200b8 	.word	0x400200b8
 8003e8c:	40020410 	.word	0x40020410
 8003e90:	40020428 	.word	0x40020428
 8003e94:	40020440 	.word	0x40020440
 8003e98:	40020458 	.word	0x40020458
 8003e9c:	40020470 	.word	0x40020470
 8003ea0:	40020488 	.word	0x40020488
 8003ea4:	400204a0 	.word	0x400204a0
 8003ea8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	f003 031f 	and.w	r3, r3, #31
 8003eba:	2201      	movs	r2, #1
 8003ebc:	409a      	lsls	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a4f      	ldr	r2, [pc, #316]	; (8004004 <HAL_DMA_Abort+0x5dc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d072      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a4d      	ldr	r2, [pc, #308]	; (8004008 <HAL_DMA_Abort+0x5e0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d06d      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a4c      	ldr	r2, [pc, #304]	; (800400c <HAL_DMA_Abort+0x5e4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d068      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a4a      	ldr	r2, [pc, #296]	; (8004010 <HAL_DMA_Abort+0x5e8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d063      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a49      	ldr	r2, [pc, #292]	; (8004014 <HAL_DMA_Abort+0x5ec>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d05e      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a47      	ldr	r2, [pc, #284]	; (8004018 <HAL_DMA_Abort+0x5f0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d059      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a46      	ldr	r2, [pc, #280]	; (800401c <HAL_DMA_Abort+0x5f4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d054      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a44      	ldr	r2, [pc, #272]	; (8004020 <HAL_DMA_Abort+0x5f8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d04f      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a43      	ldr	r2, [pc, #268]	; (8004024 <HAL_DMA_Abort+0x5fc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d04a      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a41      	ldr	r2, [pc, #260]	; (8004028 <HAL_DMA_Abort+0x600>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d045      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a40      	ldr	r2, [pc, #256]	; (800402c <HAL_DMA_Abort+0x604>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d040      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a3e      	ldr	r2, [pc, #248]	; (8004030 <HAL_DMA_Abort+0x608>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d03b      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a3d      	ldr	r2, [pc, #244]	; (8004034 <HAL_DMA_Abort+0x60c>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d036      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <HAL_DMA_Abort+0x610>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d031      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	; (800403c <HAL_DMA_Abort+0x614>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d02c      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a38      	ldr	r2, [pc, #224]	; (8004040 <HAL_DMA_Abort+0x618>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d027      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a37      	ldr	r2, [pc, #220]	; (8004044 <HAL_DMA_Abort+0x61c>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d022      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a35      	ldr	r2, [pc, #212]	; (8004048 <HAL_DMA_Abort+0x620>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01d      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_DMA_Abort+0x624>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a32      	ldr	r2, [pc, #200]	; (8004050 <HAL_DMA_Abort+0x628>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a31      	ldr	r2, [pc, #196]	; (8004054 <HAL_DMA_Abort+0x62c>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <HAL_DMA_Abort+0x630>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a2e      	ldr	r2, [pc, #184]	; (800405c <HAL_DMA_Abort+0x634>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_DMA_Abort+0x58a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <HAL_DMA_Abort+0x638>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_DMA_Abort+0x58e>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_DMA_Abort+0x590>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003fc4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003fdc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003fe6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3718      	adds	r7, #24
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	40020010 	.word	0x40020010
 8004008:	40020028 	.word	0x40020028
 800400c:	40020040 	.word	0x40020040
 8004010:	40020058 	.word	0x40020058
 8004014:	40020070 	.word	0x40020070
 8004018:	40020088 	.word	0x40020088
 800401c:	400200a0 	.word	0x400200a0
 8004020:	400200b8 	.word	0x400200b8
 8004024:	40020410 	.word	0x40020410
 8004028:	40020428 	.word	0x40020428
 800402c:	40020440 	.word	0x40020440
 8004030:	40020458 	.word	0x40020458
 8004034:	40020470 	.word	0x40020470
 8004038:	40020488 	.word	0x40020488
 800403c:	400204a0 	.word	0x400204a0
 8004040:	400204b8 	.word	0x400204b8
 8004044:	58025408 	.word	0x58025408
 8004048:	5802541c 	.word	0x5802541c
 800404c:	58025430 	.word	0x58025430
 8004050:	58025444 	.word	0x58025444
 8004054:	58025458 	.word	0x58025458
 8004058:	5802546c 	.word	0x5802546c
 800405c:	58025480 	.word	0x58025480
 8004060:	58025494 	.word	0x58025494

08004064 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e237      	b.n	80044e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d004      	beq.n	800408c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2280      	movs	r2, #128	; 0x80
 8004086:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e22c      	b.n	80044e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a5c      	ldr	r2, [pc, #368]	; (8004204 <HAL_DMA_Abort_IT+0x1a0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d04a      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a5b      	ldr	r2, [pc, #364]	; (8004208 <HAL_DMA_Abort_IT+0x1a4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d045      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a59      	ldr	r2, [pc, #356]	; (800420c <HAL_DMA_Abort_IT+0x1a8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d040      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a58      	ldr	r2, [pc, #352]	; (8004210 <HAL_DMA_Abort_IT+0x1ac>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d03b      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a56      	ldr	r2, [pc, #344]	; (8004214 <HAL_DMA_Abort_IT+0x1b0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d036      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a55      	ldr	r2, [pc, #340]	; (8004218 <HAL_DMA_Abort_IT+0x1b4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d031      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a53      	ldr	r2, [pc, #332]	; (800421c <HAL_DMA_Abort_IT+0x1b8>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d02c      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a52      	ldr	r2, [pc, #328]	; (8004220 <HAL_DMA_Abort_IT+0x1bc>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d027      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a50      	ldr	r2, [pc, #320]	; (8004224 <HAL_DMA_Abort_IT+0x1c0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d022      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a4f      	ldr	r2, [pc, #316]	; (8004228 <HAL_DMA_Abort_IT+0x1c4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d01d      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a4d      	ldr	r2, [pc, #308]	; (800422c <HAL_DMA_Abort_IT+0x1c8>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d018      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a4c      	ldr	r2, [pc, #304]	; (8004230 <HAL_DMA_Abort_IT+0x1cc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d013      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a4a      	ldr	r2, [pc, #296]	; (8004234 <HAL_DMA_Abort_IT+0x1d0>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d00e      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a49      	ldr	r2, [pc, #292]	; (8004238 <HAL_DMA_Abort_IT+0x1d4>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d009      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a47      	ldr	r2, [pc, #284]	; (800423c <HAL_DMA_Abort_IT+0x1d8>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d004      	beq.n	800412c <HAL_DMA_Abort_IT+0xc8>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a46      	ldr	r2, [pc, #280]	; (8004240 <HAL_DMA_Abort_IT+0x1dc>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d101      	bne.n	8004130 <HAL_DMA_Abort_IT+0xcc>
 800412c:	2301      	movs	r3, #1
 800412e:	e000      	b.n	8004132 <HAL_DMA_Abort_IT+0xce>
 8004130:	2300      	movs	r3, #0
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 8086 	beq.w	8004244 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2204      	movs	r2, #4
 800413c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a2f      	ldr	r2, [pc, #188]	; (8004204 <HAL_DMA_Abort_IT+0x1a0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d04a      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a2e      	ldr	r2, [pc, #184]	; (8004208 <HAL_DMA_Abort_IT+0x1a4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d045      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a2c      	ldr	r2, [pc, #176]	; (800420c <HAL_DMA_Abort_IT+0x1a8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d040      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a2b      	ldr	r2, [pc, #172]	; (8004210 <HAL_DMA_Abort_IT+0x1ac>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d03b      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a29      	ldr	r2, [pc, #164]	; (8004214 <HAL_DMA_Abort_IT+0x1b0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d036      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a28      	ldr	r2, [pc, #160]	; (8004218 <HAL_DMA_Abort_IT+0x1b4>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d031      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a26      	ldr	r2, [pc, #152]	; (800421c <HAL_DMA_Abort_IT+0x1b8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d02c      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a25      	ldr	r2, [pc, #148]	; (8004220 <HAL_DMA_Abort_IT+0x1bc>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d027      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a23      	ldr	r2, [pc, #140]	; (8004224 <HAL_DMA_Abort_IT+0x1c0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d022      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a22      	ldr	r2, [pc, #136]	; (8004228 <HAL_DMA_Abort_IT+0x1c4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d01d      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a20      	ldr	r2, [pc, #128]	; (800422c <HAL_DMA_Abort_IT+0x1c8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d018      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1f      	ldr	r2, [pc, #124]	; (8004230 <HAL_DMA_Abort_IT+0x1cc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d013      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a1d      	ldr	r2, [pc, #116]	; (8004234 <HAL_DMA_Abort_IT+0x1d0>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00e      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a1c      	ldr	r2, [pc, #112]	; (8004238 <HAL_DMA_Abort_IT+0x1d4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d009      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1a      	ldr	r2, [pc, #104]	; (800423c <HAL_DMA_Abort_IT+0x1d8>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d004      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x17c>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a19      	ldr	r2, [pc, #100]	; (8004240 <HAL_DMA_Abort_IT+0x1dc>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d108      	bne.n	80041f2 <HAL_DMA_Abort_IT+0x18e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	e178      	b.n	80044e4 <HAL_DMA_Abort_IT+0x480>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	e16f      	b.n	80044e4 <HAL_DMA_Abort_IT+0x480>
 8004204:	40020010 	.word	0x40020010
 8004208:	40020028 	.word	0x40020028
 800420c:	40020040 	.word	0x40020040
 8004210:	40020058 	.word	0x40020058
 8004214:	40020070 	.word	0x40020070
 8004218:	40020088 	.word	0x40020088
 800421c:	400200a0 	.word	0x400200a0
 8004220:	400200b8 	.word	0x400200b8
 8004224:	40020410 	.word	0x40020410
 8004228:	40020428 	.word	0x40020428
 800422c:	40020440 	.word	0x40020440
 8004230:	40020458 	.word	0x40020458
 8004234:	40020470 	.word	0x40020470
 8004238:	40020488 	.word	0x40020488
 800423c:	400204a0 	.word	0x400204a0
 8004240:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 020e 	bic.w	r2, r2, #14
 8004252:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a6c      	ldr	r2, [pc, #432]	; (800440c <HAL_DMA_Abort_IT+0x3a8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d04a      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a6b      	ldr	r2, [pc, #428]	; (8004410 <HAL_DMA_Abort_IT+0x3ac>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d045      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a69      	ldr	r2, [pc, #420]	; (8004414 <HAL_DMA_Abort_IT+0x3b0>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d040      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a68      	ldr	r2, [pc, #416]	; (8004418 <HAL_DMA_Abort_IT+0x3b4>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d03b      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a66      	ldr	r2, [pc, #408]	; (800441c <HAL_DMA_Abort_IT+0x3b8>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d036      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a65      	ldr	r2, [pc, #404]	; (8004420 <HAL_DMA_Abort_IT+0x3bc>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d031      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a63      	ldr	r2, [pc, #396]	; (8004424 <HAL_DMA_Abort_IT+0x3c0>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d02c      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a62      	ldr	r2, [pc, #392]	; (8004428 <HAL_DMA_Abort_IT+0x3c4>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d027      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a60      	ldr	r2, [pc, #384]	; (800442c <HAL_DMA_Abort_IT+0x3c8>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d022      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a5f      	ldr	r2, [pc, #380]	; (8004430 <HAL_DMA_Abort_IT+0x3cc>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d01d      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a5d      	ldr	r2, [pc, #372]	; (8004434 <HAL_DMA_Abort_IT+0x3d0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d018      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a5c      	ldr	r2, [pc, #368]	; (8004438 <HAL_DMA_Abort_IT+0x3d4>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d013      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a5a      	ldr	r2, [pc, #360]	; (800443c <HAL_DMA_Abort_IT+0x3d8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d00e      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a59      	ldr	r2, [pc, #356]	; (8004440 <HAL_DMA_Abort_IT+0x3dc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d009      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a57      	ldr	r2, [pc, #348]	; (8004444 <HAL_DMA_Abort_IT+0x3e0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d004      	beq.n	80042f4 <HAL_DMA_Abort_IT+0x290>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a56      	ldr	r2, [pc, #344]	; (8004448 <HAL_DMA_Abort_IT+0x3e4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d108      	bne.n	8004306 <HAL_DMA_Abort_IT+0x2a2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	e007      	b.n	8004316 <HAL_DMA_Abort_IT+0x2b2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a3c      	ldr	r2, [pc, #240]	; (800440c <HAL_DMA_Abort_IT+0x3a8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d072      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a3a      	ldr	r2, [pc, #232]	; (8004410 <HAL_DMA_Abort_IT+0x3ac>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d06d      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a39      	ldr	r2, [pc, #228]	; (8004414 <HAL_DMA_Abort_IT+0x3b0>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d068      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a37      	ldr	r2, [pc, #220]	; (8004418 <HAL_DMA_Abort_IT+0x3b4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d063      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a36      	ldr	r2, [pc, #216]	; (800441c <HAL_DMA_Abort_IT+0x3b8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d05e      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a34      	ldr	r2, [pc, #208]	; (8004420 <HAL_DMA_Abort_IT+0x3bc>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d059      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a33      	ldr	r2, [pc, #204]	; (8004424 <HAL_DMA_Abort_IT+0x3c0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d054      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a31      	ldr	r2, [pc, #196]	; (8004428 <HAL_DMA_Abort_IT+0x3c4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d04f      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a30      	ldr	r2, [pc, #192]	; (800442c <HAL_DMA_Abort_IT+0x3c8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d04a      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a2e      	ldr	r2, [pc, #184]	; (8004430 <HAL_DMA_Abort_IT+0x3cc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d045      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2d      	ldr	r2, [pc, #180]	; (8004434 <HAL_DMA_Abort_IT+0x3d0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d040      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2b      	ldr	r2, [pc, #172]	; (8004438 <HAL_DMA_Abort_IT+0x3d4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d03b      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2a      	ldr	r2, [pc, #168]	; (800443c <HAL_DMA_Abort_IT+0x3d8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d036      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a28      	ldr	r2, [pc, #160]	; (8004440 <HAL_DMA_Abort_IT+0x3dc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d031      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a27      	ldr	r2, [pc, #156]	; (8004444 <HAL_DMA_Abort_IT+0x3e0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d02c      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a25      	ldr	r2, [pc, #148]	; (8004448 <HAL_DMA_Abort_IT+0x3e4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d027      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a24      	ldr	r2, [pc, #144]	; (800444c <HAL_DMA_Abort_IT+0x3e8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d022      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a22      	ldr	r2, [pc, #136]	; (8004450 <HAL_DMA_Abort_IT+0x3ec>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d01d      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a21      	ldr	r2, [pc, #132]	; (8004454 <HAL_DMA_Abort_IT+0x3f0>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d018      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1f      	ldr	r2, [pc, #124]	; (8004458 <HAL_DMA_Abort_IT+0x3f4>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d013      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a1e      	ldr	r2, [pc, #120]	; (800445c <HAL_DMA_Abort_IT+0x3f8>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d00e      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_DMA_Abort_IT+0x3fc>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d009      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a1b      	ldr	r2, [pc, #108]	; (8004464 <HAL_DMA_Abort_IT+0x400>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d004      	beq.n	8004406 <HAL_DMA_Abort_IT+0x3a2>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a19      	ldr	r2, [pc, #100]	; (8004468 <HAL_DMA_Abort_IT+0x404>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d132      	bne.n	800446c <HAL_DMA_Abort_IT+0x408>
 8004406:	2301      	movs	r3, #1
 8004408:	e031      	b.n	800446e <HAL_DMA_Abort_IT+0x40a>
 800440a:	bf00      	nop
 800440c:	40020010 	.word	0x40020010
 8004410:	40020028 	.word	0x40020028
 8004414:	40020040 	.word	0x40020040
 8004418:	40020058 	.word	0x40020058
 800441c:	40020070 	.word	0x40020070
 8004420:	40020088 	.word	0x40020088
 8004424:	400200a0 	.word	0x400200a0
 8004428:	400200b8 	.word	0x400200b8
 800442c:	40020410 	.word	0x40020410
 8004430:	40020428 	.word	0x40020428
 8004434:	40020440 	.word	0x40020440
 8004438:	40020458 	.word	0x40020458
 800443c:	40020470 	.word	0x40020470
 8004440:	40020488 	.word	0x40020488
 8004444:	400204a0 	.word	0x400204a0
 8004448:	400204b8 	.word	0x400204b8
 800444c:	58025408 	.word	0x58025408
 8004450:	5802541c 	.word	0x5802541c
 8004454:	58025430 	.word	0x58025430
 8004458:	58025444 	.word	0x58025444
 800445c:	58025458 	.word	0x58025458
 8004460:	5802546c 	.word	0x5802546c
 8004464:	58025480 	.word	0x58025480
 8004468:	58025494 	.word	0x58025494
 800446c:	2300      	movs	r3, #0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d028      	beq.n	80044c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800447c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004480:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2201      	movs	r2, #1
 8004492:	409a      	lsls	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80044a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d00c      	beq.n	80044c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80044c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d003      	beq.n	80044e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop

080044f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	; 0x28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80044fc:	4b67      	ldr	r3, [pc, #412]	; (800469c <HAL_DMA_IRQHandler+0x1ac>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a67      	ldr	r2, [pc, #412]	; (80046a0 <HAL_DMA_IRQHandler+0x1b0>)
 8004502:	fba2 2303 	umull	r2, r3, r2, r3
 8004506:	0a9b      	lsrs	r3, r3, #10
 8004508:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a5f      	ldr	r2, [pc, #380]	; (80046a4 <HAL_DMA_IRQHandler+0x1b4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d04a      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a5d      	ldr	r2, [pc, #372]	; (80046a8 <HAL_DMA_IRQHandler+0x1b8>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d045      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a5c      	ldr	r2, [pc, #368]	; (80046ac <HAL_DMA_IRQHandler+0x1bc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d040      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5a      	ldr	r2, [pc, #360]	; (80046b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d03b      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a59      	ldr	r2, [pc, #356]	; (80046b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d036      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a57      	ldr	r2, [pc, #348]	; (80046b8 <HAL_DMA_IRQHandler+0x1c8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d031      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a56      	ldr	r2, [pc, #344]	; (80046bc <HAL_DMA_IRQHandler+0x1cc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d02c      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a54      	ldr	r2, [pc, #336]	; (80046c0 <HAL_DMA_IRQHandler+0x1d0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d027      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a53      	ldr	r2, [pc, #332]	; (80046c4 <HAL_DMA_IRQHandler+0x1d4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d022      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a51      	ldr	r2, [pc, #324]	; (80046c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d01d      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a50      	ldr	r2, [pc, #320]	; (80046cc <HAL_DMA_IRQHandler+0x1dc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d018      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a4e      	ldr	r2, [pc, #312]	; (80046d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d013      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4d      	ldr	r2, [pc, #308]	; (80046d4 <HAL_DMA_IRQHandler+0x1e4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00e      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a4b      	ldr	r2, [pc, #300]	; (80046d8 <HAL_DMA_IRQHandler+0x1e8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d009      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a4a      	ldr	r2, [pc, #296]	; (80046dc <HAL_DMA_IRQHandler+0x1ec>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d004      	beq.n	80045c2 <HAL_DMA_IRQHandler+0xd2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a48      	ldr	r2, [pc, #288]	; (80046e0 <HAL_DMA_IRQHandler+0x1f0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d101      	bne.n	80045c6 <HAL_DMA_IRQHandler+0xd6>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <HAL_DMA_IRQHandler+0xd8>
 80045c6:	2300      	movs	r3, #0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	f000 842b 	beq.w	8004e24 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d2:	f003 031f 	and.w	r3, r3, #31
 80045d6:	2208      	movs	r2, #8
 80045d8:	409a      	lsls	r2, r3
 80045da:	69bb      	ldr	r3, [r7, #24]
 80045dc:	4013      	ands	r3, r2
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 80a2 	beq.w	8004728 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <HAL_DMA_IRQHandler+0x1b4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d04a      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a2d      	ldr	r2, [pc, #180]	; (80046a8 <HAL_DMA_IRQHandler+0x1b8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d045      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2b      	ldr	r2, [pc, #172]	; (80046ac <HAL_DMA_IRQHandler+0x1bc>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d040      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <HAL_DMA_IRQHandler+0x1c0>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d03b      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a28      	ldr	r2, [pc, #160]	; (80046b4 <HAL_DMA_IRQHandler+0x1c4>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d036      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a27      	ldr	r2, [pc, #156]	; (80046b8 <HAL_DMA_IRQHandler+0x1c8>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d031      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a25      	ldr	r2, [pc, #148]	; (80046bc <HAL_DMA_IRQHandler+0x1cc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d02c      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a24      	ldr	r2, [pc, #144]	; (80046c0 <HAL_DMA_IRQHandler+0x1d0>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d027      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a22      	ldr	r2, [pc, #136]	; (80046c4 <HAL_DMA_IRQHandler+0x1d4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d022      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a21      	ldr	r2, [pc, #132]	; (80046c8 <HAL_DMA_IRQHandler+0x1d8>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d01d      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <HAL_DMA_IRQHandler+0x1dc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d018      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a1e      	ldr	r2, [pc, #120]	; (80046d0 <HAL_DMA_IRQHandler+0x1e0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d013      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a1c      	ldr	r2, [pc, #112]	; (80046d4 <HAL_DMA_IRQHandler+0x1e4>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d00e      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1b      	ldr	r2, [pc, #108]	; (80046d8 <HAL_DMA_IRQHandler+0x1e8>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d009      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a19      	ldr	r2, [pc, #100]	; (80046dc <HAL_DMA_IRQHandler+0x1ec>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d004      	beq.n	8004684 <HAL_DMA_IRQHandler+0x194>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <HAL_DMA_IRQHandler+0x1f0>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d12f      	bne.n	80046e4 <HAL_DMA_IRQHandler+0x1f4>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0304 	and.w	r3, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	bf14      	ite	ne
 8004692:	2301      	movne	r3, #1
 8004694:	2300      	moveq	r3, #0
 8004696:	b2db      	uxtb	r3, r3
 8004698:	e02e      	b.n	80046f8 <HAL_DMA_IRQHandler+0x208>
 800469a:	bf00      	nop
 800469c:	24000000 	.word	0x24000000
 80046a0:	1b4e81b5 	.word	0x1b4e81b5
 80046a4:	40020010 	.word	0x40020010
 80046a8:	40020028 	.word	0x40020028
 80046ac:	40020040 	.word	0x40020040
 80046b0:	40020058 	.word	0x40020058
 80046b4:	40020070 	.word	0x40020070
 80046b8:	40020088 	.word	0x40020088
 80046bc:	400200a0 	.word	0x400200a0
 80046c0:	400200b8 	.word	0x400200b8
 80046c4:	40020410 	.word	0x40020410
 80046c8:	40020428 	.word	0x40020428
 80046cc:	40020440 	.word	0x40020440
 80046d0:	40020458 	.word	0x40020458
 80046d4:	40020470 	.word	0x40020470
 80046d8:	40020488 	.word	0x40020488
 80046dc:	400204a0 	.word	0x400204a0
 80046e0:	400204b8 	.word	0x400204b8
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0308 	and.w	r3, r3, #8
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bf14      	ite	ne
 80046f2:	2301      	movne	r3, #1
 80046f4:	2300      	moveq	r3, #0
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d015      	beq.n	8004728 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f022 0204 	bic.w	r2, r2, #4
 800470a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	2208      	movs	r2, #8
 8004716:	409a      	lsls	r2, r3
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004720:	f043 0201 	orr.w	r2, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800472c:	f003 031f 	and.w	r3, r3, #31
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	fa22 f303 	lsr.w	r3, r2, r3
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d06e      	beq.n	800481c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a69      	ldr	r2, [pc, #420]	; (80048e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d04a      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a67      	ldr	r2, [pc, #412]	; (80048ec <HAL_DMA_IRQHandler+0x3fc>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d045      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a66      	ldr	r2, [pc, #408]	; (80048f0 <HAL_DMA_IRQHandler+0x400>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d040      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a64      	ldr	r2, [pc, #400]	; (80048f4 <HAL_DMA_IRQHandler+0x404>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d03b      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a63      	ldr	r2, [pc, #396]	; (80048f8 <HAL_DMA_IRQHandler+0x408>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d036      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a61      	ldr	r2, [pc, #388]	; (80048fc <HAL_DMA_IRQHandler+0x40c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d031      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a60      	ldr	r2, [pc, #384]	; (8004900 <HAL_DMA_IRQHandler+0x410>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d02c      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a5e      	ldr	r2, [pc, #376]	; (8004904 <HAL_DMA_IRQHandler+0x414>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d027      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5d      	ldr	r2, [pc, #372]	; (8004908 <HAL_DMA_IRQHandler+0x418>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d022      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5b      	ldr	r2, [pc, #364]	; (800490c <HAL_DMA_IRQHandler+0x41c>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01d      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a5a      	ldr	r2, [pc, #360]	; (8004910 <HAL_DMA_IRQHandler+0x420>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d018      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a58      	ldr	r2, [pc, #352]	; (8004914 <HAL_DMA_IRQHandler+0x424>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a57      	ldr	r2, [pc, #348]	; (8004918 <HAL_DMA_IRQHandler+0x428>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00e      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a55      	ldr	r2, [pc, #340]	; (800491c <HAL_DMA_IRQHandler+0x42c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d009      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a54      	ldr	r2, [pc, #336]	; (8004920 <HAL_DMA_IRQHandler+0x430>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d004      	beq.n	80047de <HAL_DMA_IRQHandler+0x2ee>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a52      	ldr	r2, [pc, #328]	; (8004924 <HAL_DMA_IRQHandler+0x434>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d10a      	bne.n	80047f4 <HAL_DMA_IRQHandler+0x304>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	e003      	b.n	80047fc <HAL_DMA_IRQHandler+0x30c>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2300      	movs	r3, #0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d00d      	beq.n	800481c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	f003 031f 	and.w	r3, r3, #31
 8004808:	2201      	movs	r2, #1
 800480a:	409a      	lsls	r2, r3
 800480c:	6a3b      	ldr	r3, [r7, #32]
 800480e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004814:	f043 0202 	orr.w	r2, r3, #2
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2204      	movs	r2, #4
 8004826:	409a      	lsls	r2, r3
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	4013      	ands	r3, r2
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 808f 	beq.w	8004950 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a2c      	ldr	r2, [pc, #176]	; (80048e8 <HAL_DMA_IRQHandler+0x3f8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d04a      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <HAL_DMA_IRQHandler+0x3fc>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d045      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a29      	ldr	r2, [pc, #164]	; (80048f0 <HAL_DMA_IRQHandler+0x400>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d040      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <HAL_DMA_IRQHandler+0x404>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d03b      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <HAL_DMA_IRQHandler+0x408>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d036      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a24      	ldr	r2, [pc, #144]	; (80048fc <HAL_DMA_IRQHandler+0x40c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d031      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a23      	ldr	r2, [pc, #140]	; (8004900 <HAL_DMA_IRQHandler+0x410>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d02c      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a21      	ldr	r2, [pc, #132]	; (8004904 <HAL_DMA_IRQHandler+0x414>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d027      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a20      	ldr	r2, [pc, #128]	; (8004908 <HAL_DMA_IRQHandler+0x418>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d022      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a1e      	ldr	r2, [pc, #120]	; (800490c <HAL_DMA_IRQHandler+0x41c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d01d      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a1d      	ldr	r2, [pc, #116]	; (8004910 <HAL_DMA_IRQHandler+0x420>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d018      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a1b      	ldr	r2, [pc, #108]	; (8004914 <HAL_DMA_IRQHandler+0x424>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d013      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a1a      	ldr	r2, [pc, #104]	; (8004918 <HAL_DMA_IRQHandler+0x428>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d00e      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a18      	ldr	r2, [pc, #96]	; (800491c <HAL_DMA_IRQHandler+0x42c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d009      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <HAL_DMA_IRQHandler+0x430>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_DMA_IRQHandler+0x3e2>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a15      	ldr	r2, [pc, #84]	; (8004924 <HAL_DMA_IRQHandler+0x434>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d12a      	bne.n	8004928 <HAL_DMA_IRQHandler+0x438>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	e023      	b.n	8004930 <HAL_DMA_IRQHandler+0x440>
 80048e8:	40020010 	.word	0x40020010
 80048ec:	40020028 	.word	0x40020028
 80048f0:	40020040 	.word	0x40020040
 80048f4:	40020058 	.word	0x40020058
 80048f8:	40020070 	.word	0x40020070
 80048fc:	40020088 	.word	0x40020088
 8004900:	400200a0 	.word	0x400200a0
 8004904:	400200b8 	.word	0x400200b8
 8004908:	40020410 	.word	0x40020410
 800490c:	40020428 	.word	0x40020428
 8004910:	40020440 	.word	0x40020440
 8004914:	40020458 	.word	0x40020458
 8004918:	40020470 	.word	0x40020470
 800491c:	40020488 	.word	0x40020488
 8004920:	400204a0 	.word	0x400204a0
 8004924:	400204b8 	.word	0x400204b8
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2300      	movs	r3, #0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	2204      	movs	r2, #4
 800493e:	409a      	lsls	r2, r3
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004948:	f043 0204 	orr.w	r2, r3, #4
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004954:	f003 031f 	and.w	r3, r3, #31
 8004958:	2210      	movs	r2, #16
 800495a:	409a      	lsls	r2, r3
 800495c:	69bb      	ldr	r3, [r7, #24]
 800495e:	4013      	ands	r3, r2
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80a6 	beq.w	8004ab2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a85      	ldr	r2, [pc, #532]	; (8004b80 <HAL_DMA_IRQHandler+0x690>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d04a      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a83      	ldr	r2, [pc, #524]	; (8004b84 <HAL_DMA_IRQHandler+0x694>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d045      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a82      	ldr	r2, [pc, #520]	; (8004b88 <HAL_DMA_IRQHandler+0x698>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d040      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a80      	ldr	r2, [pc, #512]	; (8004b8c <HAL_DMA_IRQHandler+0x69c>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d03b      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a7f      	ldr	r2, [pc, #508]	; (8004b90 <HAL_DMA_IRQHandler+0x6a0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d036      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a7d      	ldr	r2, [pc, #500]	; (8004b94 <HAL_DMA_IRQHandler+0x6a4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d031      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a7c      	ldr	r2, [pc, #496]	; (8004b98 <HAL_DMA_IRQHandler+0x6a8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d02c      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a7a      	ldr	r2, [pc, #488]	; (8004b9c <HAL_DMA_IRQHandler+0x6ac>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d027      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a79      	ldr	r2, [pc, #484]	; (8004ba0 <HAL_DMA_IRQHandler+0x6b0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d022      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a77      	ldr	r2, [pc, #476]	; (8004ba4 <HAL_DMA_IRQHandler+0x6b4>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01d      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a76      	ldr	r2, [pc, #472]	; (8004ba8 <HAL_DMA_IRQHandler+0x6b8>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d018      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a74      	ldr	r2, [pc, #464]	; (8004bac <HAL_DMA_IRQHandler+0x6bc>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a73      	ldr	r2, [pc, #460]	; (8004bb0 <HAL_DMA_IRQHandler+0x6c0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00e      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a71      	ldr	r2, [pc, #452]	; (8004bb4 <HAL_DMA_IRQHandler+0x6c4>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d009      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a70      	ldr	r2, [pc, #448]	; (8004bb8 <HAL_DMA_IRQHandler+0x6c8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <HAL_DMA_IRQHandler+0x516>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a6e      	ldr	r2, [pc, #440]	; (8004bbc <HAL_DMA_IRQHandler+0x6cc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d10a      	bne.n	8004a1c <HAL_DMA_IRQHandler+0x52c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e009      	b.n	8004a30 <HAL_DMA_IRQHandler+0x540>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	bf14      	ite	ne
 8004a2a:	2301      	movne	r3, #1
 8004a2c:	2300      	moveq	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d03e      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	f003 031f 	and.w	r3, r3, #31
 8004a3c:	2210      	movs	r2, #16
 8004a3e:	409a      	lsls	r2, r3
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d018      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d108      	bne.n	8004a72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d024      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	4798      	blx	r3
 8004a70:	e01f      	b.n	8004ab2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d01b      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	4798      	blx	r3
 8004a82:	e016      	b.n	8004ab2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d107      	bne.n	8004aa2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0208 	bic.w	r2, r2, #8
 8004aa0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab6:	f003 031f 	and.w	r3, r3, #31
 8004aba:	2220      	movs	r2, #32
 8004abc:	409a      	lsls	r2, r3
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8110 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a2c      	ldr	r2, [pc, #176]	; (8004b80 <HAL_DMA_IRQHandler+0x690>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d04a      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a2b      	ldr	r2, [pc, #172]	; (8004b84 <HAL_DMA_IRQHandler+0x694>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d045      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a29      	ldr	r2, [pc, #164]	; (8004b88 <HAL_DMA_IRQHandler+0x698>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d040      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a28      	ldr	r2, [pc, #160]	; (8004b8c <HAL_DMA_IRQHandler+0x69c>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d03b      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a26      	ldr	r2, [pc, #152]	; (8004b90 <HAL_DMA_IRQHandler+0x6a0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d036      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a25      	ldr	r2, [pc, #148]	; (8004b94 <HAL_DMA_IRQHandler+0x6a4>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d031      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a23      	ldr	r2, [pc, #140]	; (8004b98 <HAL_DMA_IRQHandler+0x6a8>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d02c      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a22      	ldr	r2, [pc, #136]	; (8004b9c <HAL_DMA_IRQHandler+0x6ac>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d027      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <HAL_DMA_IRQHandler+0x6b0>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d022      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a1f      	ldr	r2, [pc, #124]	; (8004ba4 <HAL_DMA_IRQHandler+0x6b4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d01d      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a1d      	ldr	r2, [pc, #116]	; (8004ba8 <HAL_DMA_IRQHandler+0x6b8>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d018      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1c      	ldr	r2, [pc, #112]	; (8004bac <HAL_DMA_IRQHandler+0x6bc>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1a      	ldr	r2, [pc, #104]	; (8004bb0 <HAL_DMA_IRQHandler+0x6c0>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d00e      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a19      	ldr	r2, [pc, #100]	; (8004bb4 <HAL_DMA_IRQHandler+0x6c4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d009      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <HAL_DMA_IRQHandler+0x6c8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d004      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x678>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a16      	ldr	r2, [pc, #88]	; (8004bbc <HAL_DMA_IRQHandler+0x6cc>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d12b      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0x6d0>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0310 	and.w	r3, r3, #16
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	bf14      	ite	ne
 8004b76:	2301      	movne	r3, #1
 8004b78:	2300      	moveq	r3, #0
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	e02a      	b.n	8004bd4 <HAL_DMA_IRQHandler+0x6e4>
 8004b7e:	bf00      	nop
 8004b80:	40020010 	.word	0x40020010
 8004b84:	40020028 	.word	0x40020028
 8004b88:	40020040 	.word	0x40020040
 8004b8c:	40020058 	.word	0x40020058
 8004b90:	40020070 	.word	0x40020070
 8004b94:	40020088 	.word	0x40020088
 8004b98:	400200a0 	.word	0x400200a0
 8004b9c:	400200b8 	.word	0x400200b8
 8004ba0:	40020410 	.word	0x40020410
 8004ba4:	40020428 	.word	0x40020428
 8004ba8:	40020440 	.word	0x40020440
 8004bac:	40020458 	.word	0x40020458
 8004bb0:	40020470 	.word	0x40020470
 8004bb4:	40020488 	.word	0x40020488
 8004bb8:	400204a0 	.word	0x400204a0
 8004bbc:	400204b8 	.word	0x400204b8
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	bf14      	ite	ne
 8004bce:	2301      	movne	r3, #1
 8004bd0:	2300      	moveq	r3, #0
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8087 	beq.w	8004ce8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	f003 031f 	and.w	r3, r3, #31
 8004be2:	2220      	movs	r2, #32
 8004be4:	409a      	lsls	r2, r3
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d139      	bne.n	8004c6a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0216 	bic.w	r2, r2, #22
 8004c04:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c14:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d103      	bne.n	8004c26 <HAL_DMA_IRQHandler+0x736>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0208 	bic.w	r2, r2, #8
 8004c34:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3a:	f003 031f 	and.w	r3, r3, #31
 8004c3e:	223f      	movs	r2, #63	; 0x3f
 8004c40:	409a      	lsls	r2, r3
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 834a 	beq.w	80052f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	4798      	blx	r3
          }
          return;
 8004c68:	e344      	b.n	80052f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d018      	beq.n	8004caa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d108      	bne.n	8004c98 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d02c      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	4798      	blx	r3
 8004c96:	e027      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d023      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	4798      	blx	r3
 8004ca8:	e01e      	b.n	8004ce8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10f      	bne.n	8004cd8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0210 	bic.w	r2, r2, #16
 8004cc6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8306 	beq.w	80052fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f003 0301 	and.w	r3, r3, #1
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f000 8088 	beq.w	8004e10 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2204      	movs	r2, #4
 8004d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a7a      	ldr	r2, [pc, #488]	; (8004ef8 <HAL_DMA_IRQHandler+0xa08>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d04a      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a79      	ldr	r2, [pc, #484]	; (8004efc <HAL_DMA_IRQHandler+0xa0c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d045      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a77      	ldr	r2, [pc, #476]	; (8004f00 <HAL_DMA_IRQHandler+0xa10>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d040      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a76      	ldr	r2, [pc, #472]	; (8004f04 <HAL_DMA_IRQHandler+0xa14>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d03b      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a74      	ldr	r2, [pc, #464]	; (8004f08 <HAL_DMA_IRQHandler+0xa18>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d036      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a73      	ldr	r2, [pc, #460]	; (8004f0c <HAL_DMA_IRQHandler+0xa1c>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d031      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a71      	ldr	r2, [pc, #452]	; (8004f10 <HAL_DMA_IRQHandler+0xa20>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d02c      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a70      	ldr	r2, [pc, #448]	; (8004f14 <HAL_DMA_IRQHandler+0xa24>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d027      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a6e      	ldr	r2, [pc, #440]	; (8004f18 <HAL_DMA_IRQHandler+0xa28>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d022      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a6d      	ldr	r2, [pc, #436]	; (8004f1c <HAL_DMA_IRQHandler+0xa2c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d01d      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a6b      	ldr	r2, [pc, #428]	; (8004f20 <HAL_DMA_IRQHandler+0xa30>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d018      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a6a      	ldr	r2, [pc, #424]	; (8004f24 <HAL_DMA_IRQHandler+0xa34>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d013      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a68      	ldr	r2, [pc, #416]	; (8004f28 <HAL_DMA_IRQHandler+0xa38>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00e      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a67      	ldr	r2, [pc, #412]	; (8004f2c <HAL_DMA_IRQHandler+0xa3c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d009      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a65      	ldr	r2, [pc, #404]	; (8004f30 <HAL_DMA_IRQHandler+0xa40>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d004      	beq.n	8004da8 <HAL_DMA_IRQHandler+0x8b8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a64      	ldr	r2, [pc, #400]	; (8004f34 <HAL_DMA_IRQHandler+0xa44>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d108      	bne.n	8004dba <HAL_DMA_IRQHandler+0x8ca>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f022 0201 	bic.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]
 8004db8:	e007      	b.n	8004dca <HAL_DMA_IRQHandler+0x8da>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0201 	bic.w	r2, r2, #1
 8004dc8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	3301      	adds	r3, #1
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d307      	bcc.n	8004de6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f2      	bne.n	8004dca <HAL_DMA_IRQHandler+0x8da>
 8004de4:	e000      	b.n	8004de8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004de6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0301 	and.w	r3, r3, #1
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2203      	movs	r2, #3
 8004dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004dfe:	e003      	b.n	8004e08 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8272 	beq.w	80052fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	4798      	blx	r3
 8004e22:	e26c      	b.n	80052fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a43      	ldr	r2, [pc, #268]	; (8004f38 <HAL_DMA_IRQHandler+0xa48>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d022      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x984>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a42      	ldr	r2, [pc, #264]	; (8004f3c <HAL_DMA_IRQHandler+0xa4c>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d01d      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x984>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a40      	ldr	r2, [pc, #256]	; (8004f40 <HAL_DMA_IRQHandler+0xa50>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d018      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x984>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a3f      	ldr	r2, [pc, #252]	; (8004f44 <HAL_DMA_IRQHandler+0xa54>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d013      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x984>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a3d      	ldr	r2, [pc, #244]	; (8004f48 <HAL_DMA_IRQHandler+0xa58>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d00e      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x984>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a3c      	ldr	r2, [pc, #240]	; (8004f4c <HAL_DMA_IRQHandler+0xa5c>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x984>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a3a      	ldr	r2, [pc, #232]	; (8004f50 <HAL_DMA_IRQHandler+0xa60>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <HAL_DMA_IRQHandler+0x984>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a39      	ldr	r2, [pc, #228]	; (8004f54 <HAL_DMA_IRQHandler+0xa64>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d101      	bne.n	8004e78 <HAL_DMA_IRQHandler+0x988>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e000      	b.n	8004e7a <HAL_DMA_IRQHandler+0x98a>
 8004e78:	2300      	movs	r3, #0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f000 823f 	beq.w	80052fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e8c:	f003 031f 	and.w	r3, r3, #31
 8004e90:	2204      	movs	r2, #4
 8004e92:	409a      	lsls	r2, r3
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	4013      	ands	r3, r2
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80cd 	beq.w	8005038 <HAL_DMA_IRQHandler+0xb48>
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	f003 0304 	and.w	r3, r3, #4
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f000 80c7 	beq.w	8005038 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eae:	f003 031f 	and.w	r3, r3, #31
 8004eb2:	2204      	movs	r2, #4
 8004eb4:	409a      	lsls	r2, r3
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d049      	beq.n	8004f58 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d109      	bne.n	8004ee2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 8210 	beq.w	80052f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ee0:	e20a      	b.n	80052f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 8206 	beq.w	80052f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ef4:	e200      	b.n	80052f8 <HAL_DMA_IRQHandler+0xe08>
 8004ef6:	bf00      	nop
 8004ef8:	40020010 	.word	0x40020010
 8004efc:	40020028 	.word	0x40020028
 8004f00:	40020040 	.word	0x40020040
 8004f04:	40020058 	.word	0x40020058
 8004f08:	40020070 	.word	0x40020070
 8004f0c:	40020088 	.word	0x40020088
 8004f10:	400200a0 	.word	0x400200a0
 8004f14:	400200b8 	.word	0x400200b8
 8004f18:	40020410 	.word	0x40020410
 8004f1c:	40020428 	.word	0x40020428
 8004f20:	40020440 	.word	0x40020440
 8004f24:	40020458 	.word	0x40020458
 8004f28:	40020470 	.word	0x40020470
 8004f2c:	40020488 	.word	0x40020488
 8004f30:	400204a0 	.word	0x400204a0
 8004f34:	400204b8 	.word	0x400204b8
 8004f38:	58025408 	.word	0x58025408
 8004f3c:	5802541c 	.word	0x5802541c
 8004f40:	58025430 	.word	0x58025430
 8004f44:	58025444 	.word	0x58025444
 8004f48:	58025458 	.word	0x58025458
 8004f4c:	5802546c 	.word	0x5802546c
 8004f50:	58025480 	.word	0x58025480
 8004f54:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d160      	bne.n	8005024 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a7f      	ldr	r2, [pc, #508]	; (8005164 <HAL_DMA_IRQHandler+0xc74>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d04a      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a7d      	ldr	r2, [pc, #500]	; (8005168 <HAL_DMA_IRQHandler+0xc78>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d045      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a7c      	ldr	r2, [pc, #496]	; (800516c <HAL_DMA_IRQHandler+0xc7c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d040      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a7a      	ldr	r2, [pc, #488]	; (8005170 <HAL_DMA_IRQHandler+0xc80>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d03b      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a79      	ldr	r2, [pc, #484]	; (8005174 <HAL_DMA_IRQHandler+0xc84>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d036      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a77      	ldr	r2, [pc, #476]	; (8005178 <HAL_DMA_IRQHandler+0xc88>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d031      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a76      	ldr	r2, [pc, #472]	; (800517c <HAL_DMA_IRQHandler+0xc8c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d02c      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a74      	ldr	r2, [pc, #464]	; (8005180 <HAL_DMA_IRQHandler+0xc90>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d027      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a73      	ldr	r2, [pc, #460]	; (8005184 <HAL_DMA_IRQHandler+0xc94>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d022      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a71      	ldr	r2, [pc, #452]	; (8005188 <HAL_DMA_IRQHandler+0xc98>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d01d      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a70      	ldr	r2, [pc, #448]	; (800518c <HAL_DMA_IRQHandler+0xc9c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d018      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a6e      	ldr	r2, [pc, #440]	; (8005190 <HAL_DMA_IRQHandler+0xca0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d013      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a6d      	ldr	r2, [pc, #436]	; (8005194 <HAL_DMA_IRQHandler+0xca4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d00e      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a6b      	ldr	r2, [pc, #428]	; (8005198 <HAL_DMA_IRQHandler+0xca8>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d009      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a6a      	ldr	r2, [pc, #424]	; (800519c <HAL_DMA_IRQHandler+0xcac>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_DMA_IRQHandler+0xb12>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a68      	ldr	r2, [pc, #416]	; (80051a0 <HAL_DMA_IRQHandler+0xcb0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d108      	bne.n	8005014 <HAL_DMA_IRQHandler+0xb24>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0208 	bic.w	r2, r2, #8
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	e007      	b.n	8005024 <HAL_DMA_IRQHandler+0xb34>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0204 	bic.w	r2, r2, #4
 8005022:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005028:	2b00      	cmp	r3, #0
 800502a:	f000 8165 	beq.w	80052f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005036:	e15f      	b.n	80052f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2202      	movs	r2, #2
 8005042:	409a      	lsls	r2, r3
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4013      	ands	r3, r2
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 80c5 	beq.w	80051d8 <HAL_DMA_IRQHandler+0xce8>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f003 0302 	and.w	r3, r3, #2
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 80bf 	beq.w	80051d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	2202      	movs	r2, #2
 8005064:	409a      	lsls	r2, r3
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d018      	beq.n	80050a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 813a 	beq.w	80052fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005090:	e134      	b.n	80052fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 8130 	beq.w	80052fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050a4:	e12a      	b.n	80052fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	f040 8089 	bne.w	80051c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a2b      	ldr	r2, [pc, #172]	; (8005164 <HAL_DMA_IRQHandler+0xc74>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d04a      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a29      	ldr	r2, [pc, #164]	; (8005168 <HAL_DMA_IRQHandler+0xc78>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d045      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a28      	ldr	r2, [pc, #160]	; (800516c <HAL_DMA_IRQHandler+0xc7c>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d040      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a26      	ldr	r2, [pc, #152]	; (8005170 <HAL_DMA_IRQHandler+0xc80>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d03b      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a25      	ldr	r2, [pc, #148]	; (8005174 <HAL_DMA_IRQHandler+0xc84>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d036      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a23      	ldr	r2, [pc, #140]	; (8005178 <HAL_DMA_IRQHandler+0xc88>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d031      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4a22      	ldr	r2, [pc, #136]	; (800517c <HAL_DMA_IRQHandler+0xc8c>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d02c      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a20      	ldr	r2, [pc, #128]	; (8005180 <HAL_DMA_IRQHandler+0xc90>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d027      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a1f      	ldr	r2, [pc, #124]	; (8005184 <HAL_DMA_IRQHandler+0xc94>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d022      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a1d      	ldr	r2, [pc, #116]	; (8005188 <HAL_DMA_IRQHandler+0xc98>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d01d      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a1c      	ldr	r2, [pc, #112]	; (800518c <HAL_DMA_IRQHandler+0xc9c>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d018      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1a      	ldr	r2, [pc, #104]	; (8005190 <HAL_DMA_IRQHandler+0xca0>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a19      	ldr	r2, [pc, #100]	; (8005194 <HAL_DMA_IRQHandler+0xca4>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d00e      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a17      	ldr	r2, [pc, #92]	; (8005198 <HAL_DMA_IRQHandler+0xca8>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d009      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a16      	ldr	r2, [pc, #88]	; (800519c <HAL_DMA_IRQHandler+0xcac>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d004      	beq.n	8005152 <HAL_DMA_IRQHandler+0xc62>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <HAL_DMA_IRQHandler+0xcb0>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d128      	bne.n	80051a4 <HAL_DMA_IRQHandler+0xcb4>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0214 	bic.w	r2, r2, #20
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e027      	b.n	80051b4 <HAL_DMA_IRQHandler+0xcc4>
 8005164:	40020010 	.word	0x40020010
 8005168:	40020028 	.word	0x40020028
 800516c:	40020040 	.word	0x40020040
 8005170:	40020058 	.word	0x40020058
 8005174:	40020070 	.word	0x40020070
 8005178:	40020088 	.word	0x40020088
 800517c:	400200a0 	.word	0x400200a0
 8005180:	400200b8 	.word	0x400200b8
 8005184:	40020410 	.word	0x40020410
 8005188:	40020428 	.word	0x40020428
 800518c:	40020440 	.word	0x40020440
 8005190:	40020458 	.word	0x40020458
 8005194:	40020470 	.word	0x40020470
 8005198:	40020488 	.word	0x40020488
 800519c:	400204a0 	.word	0x400204a0
 80051a0:	400204b8 	.word	0x400204b8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 020a 	bic.w	r2, r2, #10
 80051b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	f000 8097 	beq.w	80052fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051d6:	e091      	b.n	80052fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051dc:	f003 031f 	and.w	r3, r3, #31
 80051e0:	2208      	movs	r2, #8
 80051e2:	409a      	lsls	r2, r3
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8088 	beq.w	80052fe <HAL_DMA_IRQHandler+0xe0e>
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f000 8082 	beq.w	80052fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a41      	ldr	r2, [pc, #260]	; (8005304 <HAL_DMA_IRQHandler+0xe14>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d04a      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a3f      	ldr	r2, [pc, #252]	; (8005308 <HAL_DMA_IRQHandler+0xe18>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d045      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a3e      	ldr	r2, [pc, #248]	; (800530c <HAL_DMA_IRQHandler+0xe1c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d040      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a3c      	ldr	r2, [pc, #240]	; (8005310 <HAL_DMA_IRQHandler+0xe20>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d03b      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a3b      	ldr	r2, [pc, #236]	; (8005314 <HAL_DMA_IRQHandler+0xe24>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d036      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a39      	ldr	r2, [pc, #228]	; (8005318 <HAL_DMA_IRQHandler+0xe28>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d031      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a38      	ldr	r2, [pc, #224]	; (800531c <HAL_DMA_IRQHandler+0xe2c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d02c      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a36      	ldr	r2, [pc, #216]	; (8005320 <HAL_DMA_IRQHandler+0xe30>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d027      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a35      	ldr	r2, [pc, #212]	; (8005324 <HAL_DMA_IRQHandler+0xe34>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d022      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a33      	ldr	r2, [pc, #204]	; (8005328 <HAL_DMA_IRQHandler+0xe38>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d01d      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a32      	ldr	r2, [pc, #200]	; (800532c <HAL_DMA_IRQHandler+0xe3c>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d018      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a30      	ldr	r2, [pc, #192]	; (8005330 <HAL_DMA_IRQHandler+0xe40>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d013      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a2f      	ldr	r2, [pc, #188]	; (8005334 <HAL_DMA_IRQHandler+0xe44>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d00e      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2d      	ldr	r2, [pc, #180]	; (8005338 <HAL_DMA_IRQHandler+0xe48>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d009      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a2c      	ldr	r2, [pc, #176]	; (800533c <HAL_DMA_IRQHandler+0xe4c>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d004      	beq.n	800529a <HAL_DMA_IRQHandler+0xdaa>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a2a      	ldr	r2, [pc, #168]	; (8005340 <HAL_DMA_IRQHandler+0xe50>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d108      	bne.n	80052ac <HAL_DMA_IRQHandler+0xdbc>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 021c 	bic.w	r2, r2, #28
 80052a8:	601a      	str	r2, [r3, #0]
 80052aa:	e007      	b.n	80052bc <HAL_DMA_IRQHandler+0xdcc>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 020e 	bic.w	r2, r2, #14
 80052ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052c0:	f003 031f 	and.w	r3, r3, #31
 80052c4:	2201      	movs	r2, #1
 80052c6:	409a      	lsls	r2, r3
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	4798      	blx	r3
 80052f2:	e004      	b.n	80052fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80052f4:	bf00      	nop
 80052f6:	e002      	b.n	80052fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052f8:	bf00      	nop
 80052fa:	e000      	b.n	80052fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80052fe:	3728      	adds	r7, #40	; 0x28
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40020010 	.word	0x40020010
 8005308:	40020028 	.word	0x40020028
 800530c:	40020040 	.word	0x40020040
 8005310:	40020058 	.word	0x40020058
 8005314:	40020070 	.word	0x40020070
 8005318:	40020088 	.word	0x40020088
 800531c:	400200a0 	.word	0x400200a0
 8005320:	400200b8 	.word	0x400200b8
 8005324:	40020410 	.word	0x40020410
 8005328:	40020428 	.word	0x40020428
 800532c:	40020440 	.word	0x40020440
 8005330:	40020458 	.word	0x40020458
 8005334:	40020470 	.word	0x40020470
 8005338:	40020488 	.word	0x40020488
 800533c:	400204a0 	.word	0x400204a0
 8005340:	400204b8 	.word	0x400204b8

08005344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a42      	ldr	r2, [pc, #264]	; (800545c <DMA_CalcBaseAndBitshift+0x118>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d04a      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a41      	ldr	r2, [pc, #260]	; (8005460 <DMA_CalcBaseAndBitshift+0x11c>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d045      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a3f      	ldr	r2, [pc, #252]	; (8005464 <DMA_CalcBaseAndBitshift+0x120>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d040      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a3e      	ldr	r2, [pc, #248]	; (8005468 <DMA_CalcBaseAndBitshift+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d03b      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a3c      	ldr	r2, [pc, #240]	; (800546c <DMA_CalcBaseAndBitshift+0x128>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d036      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3b      	ldr	r2, [pc, #236]	; (8005470 <DMA_CalcBaseAndBitshift+0x12c>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d031      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a39      	ldr	r2, [pc, #228]	; (8005474 <DMA_CalcBaseAndBitshift+0x130>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d02c      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a38      	ldr	r2, [pc, #224]	; (8005478 <DMA_CalcBaseAndBitshift+0x134>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d027      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a36      	ldr	r2, [pc, #216]	; (800547c <DMA_CalcBaseAndBitshift+0x138>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d022      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a35      	ldr	r2, [pc, #212]	; (8005480 <DMA_CalcBaseAndBitshift+0x13c>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d01d      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a33      	ldr	r2, [pc, #204]	; (8005484 <DMA_CalcBaseAndBitshift+0x140>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d018      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a32      	ldr	r2, [pc, #200]	; (8005488 <DMA_CalcBaseAndBitshift+0x144>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d013      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a30      	ldr	r2, [pc, #192]	; (800548c <DMA_CalcBaseAndBitshift+0x148>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d00e      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a2f      	ldr	r2, [pc, #188]	; (8005490 <DMA_CalcBaseAndBitshift+0x14c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d009      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2d      	ldr	r2, [pc, #180]	; (8005494 <DMA_CalcBaseAndBitshift+0x150>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <DMA_CalcBaseAndBitshift+0xa8>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2c      	ldr	r2, [pc, #176]	; (8005498 <DMA_CalcBaseAndBitshift+0x154>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d101      	bne.n	80053f0 <DMA_CalcBaseAndBitshift+0xac>
 80053ec:	2301      	movs	r3, #1
 80053ee:	e000      	b.n	80053f2 <DMA_CalcBaseAndBitshift+0xae>
 80053f0:	2300      	movs	r3, #0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d024      	beq.n	8005440 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	3b10      	subs	r3, #16
 80053fe:	4a27      	ldr	r2, [pc, #156]	; (800549c <DMA_CalcBaseAndBitshift+0x158>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	091b      	lsrs	r3, r3, #4
 8005406:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	4a24      	ldr	r2, [pc, #144]	; (80054a0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005410:	5cd3      	ldrb	r3, [r2, r3]
 8005412:	461a      	mov	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2b03      	cmp	r3, #3
 800541c:	d908      	bls.n	8005430 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	4b1f      	ldr	r3, [pc, #124]	; (80054a4 <DMA_CalcBaseAndBitshift+0x160>)
 8005426:	4013      	ands	r3, r2
 8005428:	1d1a      	adds	r2, r3, #4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	659a      	str	r2, [r3, #88]	; 0x58
 800542e:	e00d      	b.n	800544c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	461a      	mov	r2, r3
 8005436:	4b1b      	ldr	r3, [pc, #108]	; (80054a4 <DMA_CalcBaseAndBitshift+0x160>)
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6593      	str	r3, [r2, #88]	; 0x58
 800543e:	e005      	b.n	800544c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	40020010 	.word	0x40020010
 8005460:	40020028 	.word	0x40020028
 8005464:	40020040 	.word	0x40020040
 8005468:	40020058 	.word	0x40020058
 800546c:	40020070 	.word	0x40020070
 8005470:	40020088 	.word	0x40020088
 8005474:	400200a0 	.word	0x400200a0
 8005478:	400200b8 	.word	0x400200b8
 800547c:	40020410 	.word	0x40020410
 8005480:	40020428 	.word	0x40020428
 8005484:	40020440 	.word	0x40020440
 8005488:	40020458 	.word	0x40020458
 800548c:	40020470 	.word	0x40020470
 8005490:	40020488 	.word	0x40020488
 8005494:	400204a0 	.word	0x400204a0
 8005498:	400204b8 	.word	0x400204b8
 800549c:	aaaaaaab 	.word	0xaaaaaaab
 80054a0:	0800d550 	.word	0x0800d550
 80054a4:	fffffc00 	.word	0xfffffc00

080054a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80054a8:	b480      	push	{r7}
 80054aa:	b085      	sub	sp, #20
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d120      	bne.n	80054fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c0:	2b03      	cmp	r3, #3
 80054c2:	d858      	bhi.n	8005576 <DMA_CheckFifoParam+0xce>
 80054c4:	a201      	add	r2, pc, #4	; (adr r2, 80054cc <DMA_CheckFifoParam+0x24>)
 80054c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ca:	bf00      	nop
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054ef 	.word	0x080054ef
 80054d4:	080054dd 	.word	0x080054dd
 80054d8:	08005577 	.word	0x08005577
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d048      	beq.n	800557a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054ec:	e045      	b.n	800557a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80054f6:	d142      	bne.n	800557e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80054fc:	e03f      	b.n	800557e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005506:	d123      	bne.n	8005550 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	2b03      	cmp	r3, #3
 800550e:	d838      	bhi.n	8005582 <DMA_CheckFifoParam+0xda>
 8005510:	a201      	add	r2, pc, #4	; (adr r2, 8005518 <DMA_CheckFifoParam+0x70>)
 8005512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005516:	bf00      	nop
 8005518:	08005529 	.word	0x08005529
 800551c:	0800552f 	.word	0x0800552f
 8005520:	08005529 	.word	0x08005529
 8005524:	08005541 	.word	0x08005541
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
        break;
 800552c:	e030      	b.n	8005590 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005532:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d025      	beq.n	8005586 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800553e:	e022      	b.n	8005586 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005548:	d11f      	bne.n	800558a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800554e:	e01c      	b.n	800558a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005554:	2b02      	cmp	r3, #2
 8005556:	d902      	bls.n	800555e <DMA_CheckFifoParam+0xb6>
 8005558:	2b03      	cmp	r3, #3
 800555a:	d003      	beq.n	8005564 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800555c:	e018      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	73fb      	strb	r3, [r7, #15]
        break;
 8005562:	e015      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00e      	beq.n	800558e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
    break;
 8005574:	e00b      	b.n	800558e <DMA_CheckFifoParam+0xe6>
        break;
 8005576:	bf00      	nop
 8005578:	e00a      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 800557a:	bf00      	nop
 800557c:	e008      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 800557e:	bf00      	nop
 8005580:	e006      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 8005582:	bf00      	nop
 8005584:	e004      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 8005586:	bf00      	nop
 8005588:	e002      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
        break;
 800558a:	bf00      	nop
 800558c:	e000      	b.n	8005590 <DMA_CheckFifoParam+0xe8>
    break;
 800558e:	bf00      	nop
    }
  }

  return status;
 8005590:	7bfb      	ldrb	r3, [r7, #15]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop

080055a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a38      	ldr	r2, [pc, #224]	; (8005694 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d022      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a36      	ldr	r2, [pc, #216]	; (8005698 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d01d      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a35      	ldr	r2, [pc, #212]	; (800569c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d018      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a33      	ldr	r2, [pc, #204]	; (80056a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d013      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a32      	ldr	r2, [pc, #200]	; (80056a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00e      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a30      	ldr	r2, [pc, #192]	; (80056a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d009      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a2f      	ldr	r2, [pc, #188]	; (80056ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d004      	beq.n	80055fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a2d      	ldr	r2, [pc, #180]	; (80056b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d101      	bne.n	8005602 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d01a      	beq.n	800563e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	3b08      	subs	r3, #8
 8005610:	4a28      	ldr	r2, [pc, #160]	; (80056b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005612:	fba2 2303 	umull	r2, r3, r2, r3
 8005616:	091b      	lsrs	r3, r3, #4
 8005618:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	4b26      	ldr	r3, [pc, #152]	; (80056b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800561e:	4413      	add	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	461a      	mov	r2, r3
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a24      	ldr	r2, [pc, #144]	; (80056bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800562c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 031f 	and.w	r3, r3, #31
 8005634:	2201      	movs	r2, #1
 8005636:	409a      	lsls	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800563c:	e024      	b.n	8005688 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	3b10      	subs	r3, #16
 8005646:	4a1e      	ldr	r2, [pc, #120]	; (80056c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	091b      	lsrs	r3, r3, #4
 800564e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d806      	bhi.n	8005666 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4a1b      	ldr	r2, [pc, #108]	; (80056c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d902      	bls.n	8005666 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	3308      	adds	r3, #8
 8005664:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	4b18      	ldr	r3, [pc, #96]	; (80056cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	461a      	mov	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a16      	ldr	r2, [pc, #88]	; (80056d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005678:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 031f 	and.w	r3, r3, #31
 8005680:	2201      	movs	r2, #1
 8005682:	409a      	lsls	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005688:	bf00      	nop
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr
 8005694:	58025408 	.word	0x58025408
 8005698:	5802541c 	.word	0x5802541c
 800569c:	58025430 	.word	0x58025430
 80056a0:	58025444 	.word	0x58025444
 80056a4:	58025458 	.word	0x58025458
 80056a8:	5802546c 	.word	0x5802546c
 80056ac:	58025480 	.word	0x58025480
 80056b0:	58025494 	.word	0x58025494
 80056b4:	cccccccd 	.word	0xcccccccd
 80056b8:	16009600 	.word	0x16009600
 80056bc:	58025880 	.word	0x58025880
 80056c0:	aaaaaaab 	.word	0xaaaaaaab
 80056c4:	400204b8 	.word	0x400204b8
 80056c8:	4002040f 	.word	0x4002040f
 80056cc:	10008200 	.word	0x10008200
 80056d0:	40020880 	.word	0x40020880

080056d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d04a      	beq.n	8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d847      	bhi.n	8005780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a25      	ldr	r2, [pc, #148]	; (800578c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d022      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a24      	ldr	r2, [pc, #144]	; (8005790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d01d      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a22      	ldr	r2, [pc, #136]	; (8005794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d018      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a21      	ldr	r2, [pc, #132]	; (8005798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a1f      	ldr	r2, [pc, #124]	; (800579c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d00e      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d009      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a1c      	ldr	r2, [pc, #112]	; (80057a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d101      	bne.n	8005744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005744:	2300      	movs	r3, #0
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00a      	beq.n	8005760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	4b17      	ldr	r3, [pc, #92]	; (80057ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800574e:	4413      	add	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	461a      	mov	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a15      	ldr	r2, [pc, #84]	; (80057b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800575c:	671a      	str	r2, [r3, #112]	; 0x70
 800575e:	e009      	b.n	8005774 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005764:	4413      	add	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	461a      	mov	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a11      	ldr	r2, [pc, #68]	; (80057b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005772:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3b01      	subs	r3, #1
 8005778:	2201      	movs	r2, #1
 800577a:	409a      	lsls	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005780:	bf00      	nop
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr
 800578c:	58025408 	.word	0x58025408
 8005790:	5802541c 	.word	0x5802541c
 8005794:	58025430 	.word	0x58025430
 8005798:	58025444 	.word	0x58025444
 800579c:	58025458 	.word	0x58025458
 80057a0:	5802546c 	.word	0x5802546c
 80057a4:	58025480 	.word	0x58025480
 80057a8:	58025494 	.word	0x58025494
 80057ac:	1600963f 	.word	0x1600963f
 80057b0:	58025940 	.word	0x58025940
 80057b4:	1000823f 	.word	0x1000823f
 80057b8:	40020940 	.word	0x40020940

080057bc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b084      	sub	sp, #16
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0cf      	b.n	800596e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d106      	bne.n	80057e6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2223      	movs	r2, #35	; 0x23
 80057dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f7fd f8d1 	bl	8002988 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80057e6:	4b64      	ldr	r3, [pc, #400]	; (8005978 <HAL_ETH_Init+0x1bc>)
 80057e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057ec:	4a62      	ldr	r2, [pc, #392]	; (8005978 <HAL_ETH_Init+0x1bc>)
 80057ee:	f043 0302 	orr.w	r3, r3, #2
 80057f2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80057f6:	4b60      	ldr	r3, [pc, #384]	; (8005978 <HAL_ETH_Init+0x1bc>)
 80057f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	60bb      	str	r3, [r7, #8]
 8005802:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	7a1b      	ldrb	r3, [r3, #8]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d103      	bne.n	8005814 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800580c:	2000      	movs	r0, #0
 800580e:	f7fd fc8b 	bl	8003128 <HAL_SYSCFG_ETHInterfaceSelect>
 8005812:	e003      	b.n	800581c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005814:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005818:	f7fd fc86 	bl	8003128 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800581c:	4b57      	ldr	r3, [pc, #348]	; (800597c <HAL_ETH_Init+0x1c0>)
 800581e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6812      	ldr	r2, [r2, #0]
 800582e:	f043 0301 	orr.w	r3, r3, #1
 8005832:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005836:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005838:	f7fd fc3a 	bl	80030b0 <HAL_GetTick>
 800583c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800583e:	e011      	b.n	8005864 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005840:	f7fd fc36 	bl	80030b0 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800584e:	d909      	bls.n	8005864 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2204      	movs	r2, #4
 8005854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	22e0      	movs	r2, #224	; 0xe0
 800585c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e084      	b.n	800596e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e4      	bne.n	8005840 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f886 	bl	8005988 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800587c:	f001 fefc 	bl	8007678 <HAL_RCC_GetHCLKFreq>
 8005880:	4603      	mov	r3, r0
 8005882:	4a3f      	ldr	r2, [pc, #252]	; (8005980 <HAL_ETH_Init+0x1c4>)
 8005884:	fba2 2303 	umull	r2, r3, r2, r3
 8005888:	0c9a      	lsrs	r2, r3, #18
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3a01      	subs	r2, #1
 8005890:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fa71 	bl	8005d7c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80058a6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6812      	ldr	r2, [r2, #0]
 80058ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058b6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	695b      	ldr	r3, [r3, #20]
 80058be:	f003 0303 	and.w	r3, r3, #3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2201      	movs	r2, #1
 80058ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	22e0      	movs	r2, #224	; 0xe0
 80058d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e049      	b.n	800596e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058e2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80058e6:	4b27      	ldr	r3, [pc, #156]	; (8005984 <HAL_ETH_Init+0x1c8>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6952      	ldr	r2, [r2, #20]
 80058ee:	0051      	lsls	r1, r2, #1
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	430b      	orrs	r3, r1
 80058f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80058fa:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80058fe:	6878      	ldr	r0, [r7, #4]
 8005900:	f000 fad9 	bl	8005eb6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 fb1f 	bl	8005f48 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	3305      	adds	r3, #5
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	021a      	lsls	r2, r3, #8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	3304      	adds	r3, #4
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	4619      	mov	r1, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	3303      	adds	r3, #3
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	061a      	lsls	r2, r3, #24
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	3302      	adds	r3, #2
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	041b      	lsls	r3, r3, #16
 800593c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	3301      	adds	r3, #1
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005948:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005956:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005958:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2210      	movs	r2, #16
 8005968:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	58024400 	.word	0x58024400
 800597c:	58000400 	.word	0x58000400
 8005980:	431bde83 	.word	0x431bde83
 8005984:	ffff8001 	.word	0xffff8001

08005988 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005998:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80059a2:	f001 fe69 	bl	8007678 <HAL_RCC_GetHCLKFreq>
 80059a6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	4a1e      	ldr	r2, [pc, #120]	; (8005a24 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d908      	bls.n	80059c2 <HAL_ETH_SetMDIOClockRange+0x3a>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a1d      	ldr	r2, [pc, #116]	; (8005a28 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d804      	bhi.n	80059c2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	e027      	b.n	8005a12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d908      	bls.n	80059dc <HAL_ETH_SetMDIOClockRange+0x54>
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4a17      	ldr	r2, [pc, #92]	; (8005a2c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d204      	bcs.n	80059dc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80059d8:	60fb      	str	r3, [r7, #12]
 80059da:	e01a      	b.n	8005a12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	4a13      	ldr	r2, [pc, #76]	; (8005a2c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d303      	bcc.n	80059ec <HAL_ETH_SetMDIOClockRange+0x64>
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4a12      	ldr	r2, [pc, #72]	; (8005a30 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d911      	bls.n	8005a10 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4a10      	ldr	r2, [pc, #64]	; (8005a30 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d908      	bls.n	8005a06 <HAL_ETH_SetMDIOClockRange+0x7e>
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4a0f      	ldr	r2, [pc, #60]	; (8005a34 <HAL_ETH_SetMDIOClockRange+0xac>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d804      	bhi.n	8005a06 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e005      	b.n	8005a12 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a0c:	60fb      	str	r3, [r7, #12]
 8005a0e:	e000      	b.n	8005a12 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005a10:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005a1c:	bf00      	nop
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	01312cff 	.word	0x01312cff
 8005a28:	02160ebf 	.word	0x02160ebf
 8005a2c:	03938700 	.word	0x03938700
 8005a30:	05f5e0ff 	.word	0x05f5e0ff
 8005a34:	08f0d17f 	.word	0x08f0d17f

08005a38 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005a4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	791b      	ldrb	r3, [r3, #4]
 8005a50:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005a52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	7b1b      	ldrb	r3, [r3, #12]
 8005a58:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005a5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	7b5b      	ldrb	r3, [r3, #13]
 8005a60:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	7b9b      	ldrb	r3, [r3, #14]
 8005a68:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	7bdb      	ldrb	r3, [r3, #15]
 8005a70:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a72:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	7c12      	ldrb	r2, [r2, #16]
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	d102      	bne.n	8005a82 <ETH_SetMACConfig+0x4a>
 8005a7c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a80:	e000      	b.n	8005a84 <ETH_SetMACConfig+0x4c>
 8005a82:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a84:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	7c52      	ldrb	r2, [r2, #17]
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d102      	bne.n	8005a94 <ETH_SetMACConfig+0x5c>
 8005a8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a92:	e000      	b.n	8005a96 <ETH_SetMACConfig+0x5e>
 8005a94:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	7c9b      	ldrb	r3, [r3, #18]
 8005a9c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a9e:	431a      	orrs	r2, r3
               macconf->Speed |
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005aa4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	7f1b      	ldrb	r3, [r3, #28]
 8005ab0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	7f5b      	ldrb	r3, [r3, #29]
 8005ab8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005aba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	7f92      	ldrb	r2, [r2, #30]
 8005ac0:	2a00      	cmp	r2, #0
 8005ac2:	d102      	bne.n	8005aca <ETH_SetMACConfig+0x92>
 8005ac4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ac8:	e000      	b.n	8005acc <ETH_SetMACConfig+0x94>
 8005aca:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005acc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	7fdb      	ldrb	r3, [r3, #31]
 8005ad2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005ad4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005adc:	2a00      	cmp	r2, #0
 8005ade:	d102      	bne.n	8005ae6 <ETH_SetMACConfig+0xae>
 8005ae0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ae4:	e000      	b.n	8005ae8 <ETH_SetMACConfig+0xb0>
 8005ae6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005ae8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005aee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005af6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005af8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005afe:	4313      	orrs	r3, r2
 8005b00:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	4b56      	ldr	r3, [pc, #344]	; (8005c64 <ETH_SetMACConfig+0x22c>)
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	430b      	orrs	r3, r1
 8005b14:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b22:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b2c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005b2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b36:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005b38:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005b40:	2a00      	cmp	r2, #0
 8005b42:	d102      	bne.n	8005b4a <ETH_SetMACConfig+0x112>
 8005b44:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b48:	e000      	b.n	8005b4c <ETH_SetMACConfig+0x114>
 8005b4a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005b4c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b52:	4313      	orrs	r3, r2
 8005b54:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	4b42      	ldr	r3, [pc, #264]	; (8005c68 <ETH_SetMACConfig+0x230>)
 8005b5e:	4013      	ands	r3, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	68f9      	ldr	r1, [r7, #12]
 8005b66:	430b      	orrs	r3, r1
 8005b68:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b70:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b76:	4313      	orrs	r3, r2
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68da      	ldr	r2, [r3, #12]
 8005b80:	4b3a      	ldr	r3, [pc, #232]	; (8005c6c <ETH_SetMACConfig+0x234>)
 8005b82:	4013      	ands	r3, r2
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	6812      	ldr	r2, [r2, #0]
 8005b88:	68f9      	ldr	r1, [r7, #12]
 8005b8a:	430b      	orrs	r3, r1
 8005b8c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b94:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b9a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005ba2:	2a00      	cmp	r2, #0
 8005ba4:	d101      	bne.n	8005baa <ETH_SetMACConfig+0x172>
 8005ba6:	2280      	movs	r2, #128	; 0x80
 8005ba8:	e000      	b.n	8005bac <ETH_SetMACConfig+0x174>
 8005baa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005bac:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bb2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bbe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	6812      	ldr	r2, [r2, #0]
 8005bc8:	68f9      	ldr	r1, [r7, #12]
 8005bca:	430b      	orrs	r3, r1
 8005bcc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005bd4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005bdc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f023 0103 	bic.w	r1, r3, #3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005c02:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c18:	683a      	ldr	r2, [r7, #0]
 8005c1a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005c1e:	2a00      	cmp	r2, #0
 8005c20:	d101      	bne.n	8005c26 <ETH_SetMACConfig+0x1ee>
 8005c22:	2240      	movs	r2, #64	; 0x40
 8005c24:	e000      	b.n	8005c28 <ETH_SetMACConfig+0x1f0>
 8005c26:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005c28:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005c30:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c3a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005c48:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	430a      	orrs	r2, r1
 8005c54:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005c58:	bf00      	nop
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	00048083 	.word	0x00048083
 8005c68:	c0f88000 	.word	0xc0f88000
 8005c6c:	fffffef0 	.word	0xfffffef0

08005c70 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	4b38      	ldr	r3, [pc, #224]	; (8005d68 <ETH_SetDMAConfig+0xf8>)
 8005c86:	4013      	ands	r3, r2
 8005c88:	683a      	ldr	r2, [r7, #0]
 8005c8a:	6811      	ldr	r1, [r2, #0]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	6812      	ldr	r2, [r2, #0]
 8005c90:	430b      	orrs	r3, r1
 8005c92:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c96:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	791b      	ldrb	r3, [r3, #4]
 8005c9c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ca2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	7b1b      	ldrb	r3, [r3, #12]
 8005ca8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005caa:	4313      	orrs	r3, r2
 8005cac:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cb6:	685a      	ldr	r2, [r3, #4]
 8005cb8:	4b2c      	ldr	r3, [pc, #176]	; (8005d6c <ETH_SetDMAConfig+0xfc>)
 8005cba:	4013      	ands	r3, r2
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	6812      	ldr	r2, [r2, #0]
 8005cc0:	68f9      	ldr	r1, [r7, #12]
 8005cc2:	430b      	orrs	r3, r1
 8005cc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cc8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	7b5b      	ldrb	r3, [r3, #13]
 8005cce:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005ce4:	4b22      	ldr	r3, [pc, #136]	; (8005d70 <ETH_SetDMAConfig+0x100>)
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	68f9      	ldr	r1, [r7, #12]
 8005cee:	430b      	orrs	r3, r1
 8005cf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cf4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	7d1b      	ldrb	r3, [r3, #20]
 8005d00:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d02:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	7f5b      	ldrb	r3, [r3, #29]
 8005d08:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005d1a:	4b16      	ldr	r3, [pc, #88]	; (8005d74 <ETH_SetDMAConfig+0x104>)
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	430b      	orrs	r3, r1
 8005d26:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d2a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	7f1b      	ldrb	r3, [r3, #28]
 8005d32:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d44:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005d48:	4b0b      	ldr	r3, [pc, #44]	; (8005d78 <ETH_SetDMAConfig+0x108>)
 8005d4a:	4013      	ands	r3, r2
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	68f9      	ldr	r1, [r7, #12]
 8005d52:	430b      	orrs	r3, r1
 8005d54:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d58:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005d5c:	bf00      	nop
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	ffff87fd 	.word	0xffff87fd
 8005d6c:	ffff2ffe 	.word	0xffff2ffe
 8005d70:	fffec000 	.word	0xfffec000
 8005d74:	ffc0efef 	.word	0xffc0efef
 8005d78:	7fc0ffff 	.word	0x7fc0ffff

08005d7c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b0a4      	sub	sp, #144	; 0x90
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005d94:	2300      	movs	r3, #0
 8005d96:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005da6:	2301      	movs	r3, #1
 8005da8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005db2:	2301      	movs	r3, #1
 8005db4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005db8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dbc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005dd4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005dd8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005de0:	2300      	movs	r3, #0
 8005de2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005dea:	2300      	movs	r3, #0
 8005dec:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005df6:	2300      	movs	r3, #0
 8005df8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005e14:	2320      	movs	r3, #32
 8005e16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005e26:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005e2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e30:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005e56:	2300      	movs	r3, #0
 8005e58:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fde6 	bl	8005a38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e70:	2301      	movs	r3, #1
 8005e72:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e86:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e8a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e94:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005e96:	2300      	movs	r3, #0
 8005e98:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005e9c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005ea0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005ea2:	f107 0308 	add.w	r3, r7, #8
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fee1 	bl	8005c70 <ETH_SetDMAConfig>
}
 8005eae:	bf00      	nop
 8005eb0:	3790      	adds	r7, #144	; 0x90
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}

08005eb6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005eb6:	b480      	push	{r7}
 8005eb8:	b085      	sub	sp, #20
 8005eba:	af00      	add	r7, sp, #0
 8005ebc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	60fb      	str	r3, [r7, #12]
 8005ec2:	e01d      	b.n	8005f00 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	68d9      	ldr	r1, [r3, #12]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	005b      	lsls	r3, r3, #1
 8005ece:	4413      	add	r3, r2
 8005ed0:	00db      	lsls	r3, r3, #3
 8005ed2:	440b      	add	r3, r1
 8005ed4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	2200      	movs	r2, #0
 8005eec:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	68fa      	ldr	r2, [r7, #12]
 8005ef4:	3206      	adds	r2, #6
 8005ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	3301      	adds	r3, #1
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b03      	cmp	r3, #3
 8005f04:	d9de      	bls.n	8005ec4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f14:	461a      	mov	r2, r3
 8005f16:	2303      	movs	r3, #3
 8005f18:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f28:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	68da      	ldr	r2, [r3, #12]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f38:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005f3c:	bf00      	nop
 8005f3e:	3714      	adds	r7, #20
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]
 8005f54:	e023      	b.n	8005f9e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6919      	ldr	r1, [r3, #16]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	4413      	add	r3, r2
 8005f62:	00db      	lsls	r3, r3, #3
 8005f64:	440b      	add	r3, r1
 8005f66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2200      	movs	r2, #0
 8005f72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2200      	movs	r2, #0
 8005f78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005f8c:	68b9      	ldr	r1, [r7, #8]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	3212      	adds	r2, #18
 8005f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d9d8      	bls.n	8005f56 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2303      	movs	r3, #3
 8005fce:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fde:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ff2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
	...

08006004 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006004:	b480      	push	{r7}
 8006006:	b089      	sub	sp, #36	; 0x24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006012:	4b89      	ldr	r3, [pc, #548]	; (8006238 <HAL_GPIO_Init+0x234>)
 8006014:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006016:	e194      	b.n	8006342 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	2101      	movs	r1, #1
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	fa01 f303 	lsl.w	r3, r1, r3
 8006024:	4013      	ands	r3, r2
 8006026:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	f000 8186 	beq.w	800633c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f003 0303 	and.w	r3, r3, #3
 8006038:	2b01      	cmp	r3, #1
 800603a:	d005      	beq.n	8006048 <HAL_GPIO_Init+0x44>
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	f003 0303 	and.w	r3, r3, #3
 8006044:	2b02      	cmp	r3, #2
 8006046:	d130      	bne.n	80060aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	2203      	movs	r2, #3
 8006054:	fa02 f303 	lsl.w	r3, r2, r3
 8006058:	43db      	mvns	r3, r3
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	4013      	ands	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	005b      	lsls	r3, r3, #1
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	69ba      	ldr	r2, [r7, #24]
 800606e:	4313      	orrs	r3, r2
 8006070:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800607e:	2201      	movs	r2, #1
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	43db      	mvns	r3, r3
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	4013      	ands	r3, r2
 800608c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	091b      	lsrs	r3, r3, #4
 8006094:	f003 0201 	and.w	r2, r3, #1
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	2b03      	cmp	r3, #3
 80060b4:	d017      	beq.n	80060e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060bc:	69fb      	ldr	r3, [r7, #28]
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	2203      	movs	r2, #3
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	43db      	mvns	r3, r3
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	4013      	ands	r3, r2
 80060cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	689a      	ldr	r2, [r3, #8]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	005b      	lsls	r3, r3, #1
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	4313      	orrs	r3, r2
 80060de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f003 0303 	and.w	r3, r3, #3
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d123      	bne.n	800613a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	08da      	lsrs	r2, r3, #3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	3208      	adds	r2, #8
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	f003 0307 	and.w	r3, r3, #7
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	220f      	movs	r2, #15
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4013      	ands	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	691a      	ldr	r2, [r3, #16]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f003 0307 	and.w	r3, r3, #7
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	08da      	lsrs	r2, r3, #3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3208      	adds	r2, #8
 8006134:	69b9      	ldr	r1, [r7, #24]
 8006136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	2203      	movs	r2, #3
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	43db      	mvns	r3, r3
 800614c:	69ba      	ldr	r2, [r7, #24]
 800614e:	4013      	ands	r3, r2
 8006150:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f003 0203 	and.w	r2, r3, #3
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	005b      	lsls	r3, r3, #1
 800615e:	fa02 f303 	lsl.w	r3, r2, r3
 8006162:	69ba      	ldr	r2, [r7, #24]
 8006164:	4313      	orrs	r3, r2
 8006166:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80e0 	beq.w	800633c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800617c:	4b2f      	ldr	r3, [pc, #188]	; (800623c <HAL_GPIO_Init+0x238>)
 800617e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006182:	4a2e      	ldr	r2, [pc, #184]	; (800623c <HAL_GPIO_Init+0x238>)
 8006184:	f043 0302 	orr.w	r3, r3, #2
 8006188:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800618c:	4b2b      	ldr	r3, [pc, #172]	; (800623c <HAL_GPIO_Init+0x238>)
 800618e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006192:	f003 0302 	and.w	r3, r3, #2
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800619a:	4a29      	ldr	r2, [pc, #164]	; (8006240 <HAL_GPIO_Init+0x23c>)
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	089b      	lsrs	r3, r3, #2
 80061a0:	3302      	adds	r3, #2
 80061a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0303 	and.w	r3, r3, #3
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	220f      	movs	r2, #15
 80061b2:	fa02 f303 	lsl.w	r3, r2, r3
 80061b6:	43db      	mvns	r3, r3
 80061b8:	69ba      	ldr	r2, [r7, #24]
 80061ba:	4013      	ands	r3, r2
 80061bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a20      	ldr	r2, [pc, #128]	; (8006244 <HAL_GPIO_Init+0x240>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d052      	beq.n	800626c <HAL_GPIO_Init+0x268>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a1f      	ldr	r2, [pc, #124]	; (8006248 <HAL_GPIO_Init+0x244>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d031      	beq.n	8006232 <HAL_GPIO_Init+0x22e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a1e      	ldr	r2, [pc, #120]	; (800624c <HAL_GPIO_Init+0x248>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d02b      	beq.n	800622e <HAL_GPIO_Init+0x22a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <HAL_GPIO_Init+0x24c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d025      	beq.n	800622a <HAL_GPIO_Init+0x226>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <HAL_GPIO_Init+0x250>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01f      	beq.n	8006226 <HAL_GPIO_Init+0x222>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <HAL_GPIO_Init+0x254>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d019      	beq.n	8006222 <HAL_GPIO_Init+0x21e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a1a      	ldr	r2, [pc, #104]	; (800625c <HAL_GPIO_Init+0x258>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d013      	beq.n	800621e <HAL_GPIO_Init+0x21a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a19      	ldr	r2, [pc, #100]	; (8006260 <HAL_GPIO_Init+0x25c>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00d      	beq.n	800621a <HAL_GPIO_Init+0x216>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a18      	ldr	r2, [pc, #96]	; (8006264 <HAL_GPIO_Init+0x260>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d007      	beq.n	8006216 <HAL_GPIO_Init+0x212>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a17      	ldr	r2, [pc, #92]	; (8006268 <HAL_GPIO_Init+0x264>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d101      	bne.n	8006212 <HAL_GPIO_Init+0x20e>
 800620e:	2309      	movs	r3, #9
 8006210:	e02d      	b.n	800626e <HAL_GPIO_Init+0x26a>
 8006212:	230a      	movs	r3, #10
 8006214:	e02b      	b.n	800626e <HAL_GPIO_Init+0x26a>
 8006216:	2308      	movs	r3, #8
 8006218:	e029      	b.n	800626e <HAL_GPIO_Init+0x26a>
 800621a:	2307      	movs	r3, #7
 800621c:	e027      	b.n	800626e <HAL_GPIO_Init+0x26a>
 800621e:	2306      	movs	r3, #6
 8006220:	e025      	b.n	800626e <HAL_GPIO_Init+0x26a>
 8006222:	2305      	movs	r3, #5
 8006224:	e023      	b.n	800626e <HAL_GPIO_Init+0x26a>
 8006226:	2304      	movs	r3, #4
 8006228:	e021      	b.n	800626e <HAL_GPIO_Init+0x26a>
 800622a:	2303      	movs	r3, #3
 800622c:	e01f      	b.n	800626e <HAL_GPIO_Init+0x26a>
 800622e:	2302      	movs	r3, #2
 8006230:	e01d      	b.n	800626e <HAL_GPIO_Init+0x26a>
 8006232:	2301      	movs	r3, #1
 8006234:	e01b      	b.n	800626e <HAL_GPIO_Init+0x26a>
 8006236:	bf00      	nop
 8006238:	58000080 	.word	0x58000080
 800623c:	58024400 	.word	0x58024400
 8006240:	58000400 	.word	0x58000400
 8006244:	58020000 	.word	0x58020000
 8006248:	58020400 	.word	0x58020400
 800624c:	58020800 	.word	0x58020800
 8006250:	58020c00 	.word	0x58020c00
 8006254:	58021000 	.word	0x58021000
 8006258:	58021400 	.word	0x58021400
 800625c:	58021800 	.word	0x58021800
 8006260:	58021c00 	.word	0x58021c00
 8006264:	58022000 	.word	0x58022000
 8006268:	58022400 	.word	0x58022400
 800626c:	2300      	movs	r3, #0
 800626e:	69fa      	ldr	r2, [r7, #28]
 8006270:	f002 0203 	and.w	r2, r2, #3
 8006274:	0092      	lsls	r2, r2, #2
 8006276:	4093      	lsls	r3, r2
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	4313      	orrs	r3, r2
 800627c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800627e:	4938      	ldr	r1, [pc, #224]	; (8006360 <HAL_GPIO_Init+0x35c>)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	089b      	lsrs	r3, r3, #2
 8006284:	3302      	adds	r3, #2
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800628c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	43db      	mvns	r3, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4013      	ands	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	43db      	mvns	r3, r3
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	4013      	ands	r3, r2
 80062ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	4313      	orrs	r3, r2
 80062de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	43db      	mvns	r3, r3
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	4013      	ands	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	4313      	orrs	r3, r2
 800630a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	69ba      	ldr	r2, [r7, #24]
 8006310:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	43db      	mvns	r3, r3
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	4013      	ands	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	4313      	orrs	r3, r2
 8006334:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800633c:	69fb      	ldr	r3, [r7, #28]
 800633e:	3301      	adds	r3, #1
 8006340:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	69fb      	ldr	r3, [r7, #28]
 8006348:	fa22 f303 	lsr.w	r3, r2, r3
 800634c:	2b00      	cmp	r3, #0
 800634e:	f47f ae63 	bne.w	8006018 <HAL_GPIO_Init+0x14>
  }
}
 8006352:	bf00      	nop
 8006354:	bf00      	nop
 8006356:	3724      	adds	r7, #36	; 0x24
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	58000400 	.word	0x58000400

08006364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	460b      	mov	r3, r1
 800636e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	691a      	ldr	r2, [r3, #16]
 8006374:	887b      	ldrh	r3, [r7, #2]
 8006376:	4013      	ands	r3, r2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800637c:	2301      	movs	r3, #1
 800637e:	73fb      	strb	r3, [r7, #15]
 8006380:	e001      	b.n	8006386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006386:	7bfb      	ldrb	r3, [r7, #15]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
 800639c:	460b      	mov	r3, r1
 800639e:	807b      	strh	r3, [r7, #2]
 80063a0:	4613      	mov	r3, r2
 80063a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063a4:	787b      	ldrb	r3, [r7, #1]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063aa:	887a      	ldrh	r2, [r7, #2]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063b0:	e003      	b.n	80063ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063b2:	887b      	ldrh	r3, [r7, #2]
 80063b4:	041a      	lsls	r2, r3, #16
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	619a      	str	r2, [r3, #24]
}
 80063ba:	bf00      	nop
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063c6:	b480      	push	{r7}
 80063c8:	b085      	sub	sp, #20
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063d8:	887a      	ldrh	r2, [r7, #2]
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4013      	ands	r3, r2
 80063de:	041a      	lsls	r2, r3, #16
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	43d9      	mvns	r1, r3
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	400b      	ands	r3, r1
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	619a      	str	r2, [r3, #24]
}
 80063ee:	bf00      	nop
 80063f0:	3714      	adds	r7, #20
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
	...

080063fc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006404:	4a08      	ldr	r2, [pc, #32]	; (8006428 <HAL_HSEM_FastTake+0x2c>)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3320      	adds	r3, #32
 800640a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640e:	4a07      	ldr	r2, [pc, #28]	; (800642c <HAL_HSEM_FastTake+0x30>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d101      	bne.n	8006418 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	e000      	b.n	800641a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
}
 800641a:	4618      	mov	r0, r3
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	58026400 	.word	0x58026400
 800642c:	80000300 	.word	0x80000300

08006430 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800643a:	4906      	ldr	r1, [pc, #24]	; (8006454 <HAL_HSEM_Release+0x24>)
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	58026400 	.word	0x58026400

08006458 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800645a:	b08f      	sub	sp, #60	; 0x3c
 800645c:	af0a      	add	r7, sp, #40	; 0x28
 800645e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e116      	b.n	8006698 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fc fc8b 	bl	8002da0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2203      	movs	r2, #3
 800648e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d102      	bne.n	80064a4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4618      	mov	r0, r3
 80064aa:	f004 fded 	bl	800b088 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	687e      	ldr	r6, [r7, #4]
 80064b6:	466d      	mov	r5, sp
 80064b8:	f106 0410 	add.w	r4, r6, #16
 80064bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80064cc:	1d33      	adds	r3, r6, #4
 80064ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064d0:	6838      	ldr	r0, [r7, #0]
 80064d2:	f004 fd6b 	bl	800afac <USB_CoreInit>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d005      	beq.n	80064e8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	e0d7      	b.n	8006698 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2100      	movs	r1, #0
 80064ee:	4618      	mov	r0, r3
 80064f0:	f004 fddb 	bl	800b0aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064f4:	2300      	movs	r3, #0
 80064f6:	73fb      	strb	r3, [r7, #15]
 80064f8:	e04a      	b.n	8006590 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064fa:	7bfa      	ldrb	r2, [r7, #15]
 80064fc:	6879      	ldr	r1, [r7, #4]
 80064fe:	4613      	mov	r3, r2
 8006500:	00db      	lsls	r3, r3, #3
 8006502:	4413      	add	r3, r2
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	440b      	add	r3, r1
 8006508:	333d      	adds	r3, #61	; 0x3d
 800650a:	2201      	movs	r2, #1
 800650c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800650e:	7bfa      	ldrb	r2, [r7, #15]
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	4613      	mov	r3, r2
 8006514:	00db      	lsls	r3, r3, #3
 8006516:	4413      	add	r3, r2
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	440b      	add	r3, r1
 800651c:	333c      	adds	r3, #60	; 0x3c
 800651e:	7bfa      	ldrb	r2, [r7, #15]
 8006520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006522:	7bfa      	ldrb	r2, [r7, #15]
 8006524:	7bfb      	ldrb	r3, [r7, #15]
 8006526:	b298      	uxth	r0, r3
 8006528:	6879      	ldr	r1, [r7, #4]
 800652a:	4613      	mov	r3, r2
 800652c:	00db      	lsls	r3, r3, #3
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	440b      	add	r3, r1
 8006534:	3344      	adds	r3, #68	; 0x44
 8006536:	4602      	mov	r2, r0
 8006538:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800653a:	7bfa      	ldrb	r2, [r7, #15]
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	00db      	lsls	r3, r3, #3
 8006542:	4413      	add	r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3340      	adds	r3, #64	; 0x40
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800654e:	7bfa      	ldrb	r2, [r7, #15]
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4613      	mov	r3, r2
 8006554:	00db      	lsls	r3, r3, #3
 8006556:	4413      	add	r3, r2
 8006558:	009b      	lsls	r3, r3, #2
 800655a:	440b      	add	r3, r1
 800655c:	3348      	adds	r3, #72	; 0x48
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006562:	7bfa      	ldrb	r2, [r7, #15]
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	4613      	mov	r3, r2
 8006568:	00db      	lsls	r3, r3, #3
 800656a:	4413      	add	r3, r2
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	440b      	add	r3, r1
 8006570:	334c      	adds	r3, #76	; 0x4c
 8006572:	2200      	movs	r2, #0
 8006574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006576:	7bfa      	ldrb	r2, [r7, #15]
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	4613      	mov	r3, r2
 800657c:	00db      	lsls	r3, r3, #3
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	440b      	add	r3, r1
 8006584:	3354      	adds	r3, #84	; 0x54
 8006586:	2200      	movs	r2, #0
 8006588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800658a:	7bfb      	ldrb	r3, [r7, #15]
 800658c:	3301      	adds	r3, #1
 800658e:	73fb      	strb	r3, [r7, #15]
 8006590:	7bfa      	ldrb	r2, [r7, #15]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	429a      	cmp	r2, r3
 8006598:	d3af      	bcc.n	80064fa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
 800659e:	e044      	b.n	800662a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065a0:	7bfa      	ldrb	r2, [r7, #15]
 80065a2:	6879      	ldr	r1, [r7, #4]
 80065a4:	4613      	mov	r3, r2
 80065a6:	00db      	lsls	r3, r3, #3
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	440b      	add	r3, r1
 80065ae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80065b2:	2200      	movs	r2, #0
 80065b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80065b6:	7bfa      	ldrb	r2, [r7, #15]
 80065b8:	6879      	ldr	r1, [r7, #4]
 80065ba:	4613      	mov	r3, r2
 80065bc:	00db      	lsls	r3, r3, #3
 80065be:	4413      	add	r3, r2
 80065c0:	009b      	lsls	r3, r3, #2
 80065c2:	440b      	add	r3, r1
 80065c4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80065c8:	7bfa      	ldrb	r2, [r7, #15]
 80065ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065cc:	7bfa      	ldrb	r2, [r7, #15]
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	4613      	mov	r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065e2:	7bfa      	ldrb	r2, [r7, #15]
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	4613      	mov	r3, r2
 80065e8:	00db      	lsls	r3, r3, #3
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80065f4:	2200      	movs	r2, #0
 80065f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065f8:	7bfa      	ldrb	r2, [r7, #15]
 80065fa:	6879      	ldr	r1, [r7, #4]
 80065fc:	4613      	mov	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800660a:	2200      	movs	r2, #0
 800660c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800660e:	7bfa      	ldrb	r2, [r7, #15]
 8006610:	6879      	ldr	r1, [r7, #4]
 8006612:	4613      	mov	r3, r2
 8006614:	00db      	lsls	r3, r3, #3
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	440b      	add	r3, r1
 800661c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	3301      	adds	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
 800662a:	7bfa      	ldrb	r2, [r7, #15]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	429a      	cmp	r2, r3
 8006632:	d3b5      	bcc.n	80065a0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	603b      	str	r3, [r7, #0]
 800663a:	687e      	ldr	r6, [r7, #4]
 800663c:	466d      	mov	r5, sp
 800663e:	f106 0410 	add.w	r4, r6, #16
 8006642:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006644:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006646:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006648:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800664a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800664e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006652:	1d33      	adds	r3, r6, #4
 8006654:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006656:	6838      	ldr	r0, [r7, #0]
 8006658:	f004 fd74 	bl	800b144 <USB_DevInit>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d005      	beq.n	800666e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2202      	movs	r2, #2
 8006666:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	e014      	b.n	8006698 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2201      	movs	r2, #1
 800667a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006682:	2b01      	cmp	r3, #1
 8006684:	d102      	bne.n	800668c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f80a 	bl	80066a0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f004 ff32 	bl	800b4fa <USB_DevDisconnect>

  return HAL_OK;
 8006696:	2300      	movs	r3, #0
}
 8006698:	4618      	mov	r0, r3
 800669a:	3714      	adds	r7, #20
 800669c:	46bd      	mov	sp, r7
 800669e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080066a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b085      	sub	sp, #20
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80066d0:	4313      	orrs	r3, r2
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr
 80066e4:	10000003 	.word	0x10000003

080066e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80066f0:	4b29      	ldr	r3, [pc, #164]	; (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0307 	and.w	r3, r3, #7
 80066f8:	2b06      	cmp	r3, #6
 80066fa:	d00a      	beq.n	8006712 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80066fc:	4b26      	ldr	r3, [pc, #152]	; (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	429a      	cmp	r2, r3
 8006708:	d001      	beq.n	800670e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	e040      	b.n	8006790 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800670e:	2300      	movs	r3, #0
 8006710:	e03e      	b.n	8006790 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006712:	4b21      	ldr	r3, [pc, #132]	; (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800671a:	491f      	ldr	r1, [pc, #124]	; (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4313      	orrs	r3, r2
 8006720:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006722:	f7fc fcc5 	bl	80030b0 <HAL_GetTick>
 8006726:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006728:	e009      	b.n	800673e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800672a:	f7fc fcc1 	bl	80030b0 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006738:	d901      	bls.n	800673e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800673a:	2301      	movs	r3, #1
 800673c:	e028      	b.n	8006790 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800673e:	4b16      	ldr	r3, [pc, #88]	; (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674a:	d1ee      	bne.n	800672a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b1e      	cmp	r3, #30
 8006750:	d008      	beq.n	8006764 <HAL_PWREx_ConfigSupply+0x7c>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b2e      	cmp	r3, #46	; 0x2e
 8006756:	d005      	beq.n	8006764 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b1d      	cmp	r3, #29
 800675c:	d002      	beq.n	8006764 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b2d      	cmp	r3, #45	; 0x2d
 8006762:	d114      	bne.n	800678e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006764:	f7fc fca4 	bl	80030b0 <HAL_GetTick>
 8006768:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800676a:	e009      	b.n	8006780 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800676c:	f7fc fca0 	bl	80030b0 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800677a:	d901      	bls.n	8006780 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800677c:	2301      	movs	r3, #1
 800677e:	e007      	b.n	8006790 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006780:	4b05      	ldr	r3, [pc, #20]	; (8006798 <HAL_PWREx_ConfigSupply+0xb0>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d1ee      	bne.n	800676c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}
 8006798:	58024800 	.word	0x58024800

0800679c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80067a0:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	4a04      	ldr	r2, [pc, #16]	; (80067b8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80067a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80067aa:	60d3      	str	r3, [r2, #12]
}
 80067ac:	bf00      	nop
 80067ae:	46bd      	mov	sp, r7
 80067b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b4:	4770      	bx	lr
 80067b6:	bf00      	nop
 80067b8:	58024800 	.word	0x58024800

080067bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08c      	sub	sp, #48	; 0x30
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d102      	bne.n	80067d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f000 bc1d 	b.w	800700a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0301 	and.w	r3, r3, #1
 80067d8:	2b00      	cmp	r3, #0
 80067da:	f000 8087 	beq.w	80068ec <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067de:	4b99      	ldr	r3, [pc, #612]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067e8:	4b96      	ldr	r3, [pc, #600]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80067ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ec:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80067ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d007      	beq.n	8006804 <HAL_RCC_OscConfig+0x48>
 80067f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f6:	2b18      	cmp	r3, #24
 80067f8:	d110      	bne.n	800681c <HAL_RCC_OscConfig+0x60>
 80067fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fc:	f003 0303 	and.w	r3, r3, #3
 8006800:	2b02      	cmp	r3, #2
 8006802:	d10b      	bne.n	800681c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006804:	4b8f      	ldr	r3, [pc, #572]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d06c      	beq.n	80068ea <HAL_RCC_OscConfig+0x12e>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d168      	bne.n	80068ea <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e3f6      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006824:	d106      	bne.n	8006834 <HAL_RCC_OscConfig+0x78>
 8006826:	4b87      	ldr	r3, [pc, #540]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a86      	ldr	r2, [pc, #536]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800682c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e02e      	b.n	8006892 <HAL_RCC_OscConfig+0xd6>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10c      	bne.n	8006856 <HAL_RCC_OscConfig+0x9a>
 800683c:	4b81      	ldr	r3, [pc, #516]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a80      	ldr	r2, [pc, #512]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006846:	6013      	str	r3, [r2, #0]
 8006848:	4b7e      	ldr	r3, [pc, #504]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a7d      	ldr	r2, [pc, #500]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800684e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006852:	6013      	str	r3, [r2, #0]
 8006854:	e01d      	b.n	8006892 <HAL_RCC_OscConfig+0xd6>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800685e:	d10c      	bne.n	800687a <HAL_RCC_OscConfig+0xbe>
 8006860:	4b78      	ldr	r3, [pc, #480]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a77      	ldr	r2, [pc, #476]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006866:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686a:	6013      	str	r3, [r2, #0]
 800686c:	4b75      	ldr	r3, [pc, #468]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a74      	ldr	r2, [pc, #464]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006876:	6013      	str	r3, [r2, #0]
 8006878:	e00b      	b.n	8006892 <HAL_RCC_OscConfig+0xd6>
 800687a:	4b72      	ldr	r3, [pc, #456]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a71      	ldr	r2, [pc, #452]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006880:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006884:	6013      	str	r3, [r2, #0]
 8006886:	4b6f      	ldr	r3, [pc, #444]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a6e      	ldr	r2, [pc, #440]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800688c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006890:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d013      	beq.n	80068c2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689a:	f7fc fc09 	bl	80030b0 <HAL_GetTick>
 800689e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068a2:	f7fc fc05 	bl	80030b0 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b64      	cmp	r3, #100	; 0x64
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e3aa      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80068b4:	4b63      	ldr	r3, [pc, #396]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0xe6>
 80068c0:	e014      	b.n	80068ec <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c2:	f7fc fbf5 	bl	80030b0 <HAL_GetTick>
 80068c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068c8:	e008      	b.n	80068dc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068ca:	f7fc fbf1 	bl	80030b0 <HAL_GetTick>
 80068ce:	4602      	mov	r2, r0
 80068d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d2:	1ad3      	subs	r3, r2, r3
 80068d4:	2b64      	cmp	r3, #100	; 0x64
 80068d6:	d901      	bls.n	80068dc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80068d8:	2303      	movs	r3, #3
 80068da:	e396      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068dc:	4b59      	ldr	r3, [pc, #356]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1f0      	bne.n	80068ca <HAL_RCC_OscConfig+0x10e>
 80068e8:	e000      	b.n	80068ec <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80cb 	beq.w	8006a90 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068fa:	4b52      	ldr	r3, [pc, #328]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006902:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006904:	4b4f      	ldr	r3, [pc, #316]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006908:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d007      	beq.n	8006920 <HAL_RCC_OscConfig+0x164>
 8006910:	6a3b      	ldr	r3, [r7, #32]
 8006912:	2b18      	cmp	r3, #24
 8006914:	d156      	bne.n	80069c4 <HAL_RCC_OscConfig+0x208>
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	2b00      	cmp	r3, #0
 800691e:	d151      	bne.n	80069c4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006920:	4b48      	ldr	r3, [pc, #288]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <HAL_RCC_OscConfig+0x17c>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d101      	bne.n	8006938 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e368      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006938:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f023 0219 	bic.w	r2, r3, #25
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	493f      	ldr	r1, [pc, #252]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006946:	4313      	orrs	r3, r2
 8006948:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800694a:	f7fc fbb1 	bl	80030b0 <HAL_GetTick>
 800694e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006950:	e008      	b.n	8006964 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006952:	f7fc fbad 	bl	80030b0 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	2b02      	cmp	r3, #2
 800695e:	d901      	bls.n	8006964 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006960:	2303      	movs	r3, #3
 8006962:	e352      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006964:	4b37      	ldr	r3, [pc, #220]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	2b00      	cmp	r3, #0
 800696e:	d0f0      	beq.n	8006952 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006970:	f7fc fbce 	bl	8003110 <HAL_GetREVID>
 8006974:	4603      	mov	r3, r0
 8006976:	f241 0203 	movw	r2, #4099	; 0x1003
 800697a:	4293      	cmp	r3, r2
 800697c:	d817      	bhi.n	80069ae <HAL_RCC_OscConfig+0x1f2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	691b      	ldr	r3, [r3, #16]
 8006982:	2b40      	cmp	r3, #64	; 0x40
 8006984:	d108      	bne.n	8006998 <HAL_RCC_OscConfig+0x1dc>
 8006986:	4b2f      	ldr	r3, [pc, #188]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800698e:	4a2d      	ldr	r2, [pc, #180]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006994:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006996:	e07b      	b.n	8006a90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006998:	4b2a      	ldr	r3, [pc, #168]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	031b      	lsls	r3, r3, #12
 80069a6:	4927      	ldr	r1, [pc, #156]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80069a8:	4313      	orrs	r3, r2
 80069aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069ac:	e070      	b.n	8006a90 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ae:	4b25      	ldr	r3, [pc, #148]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	061b      	lsls	r3, r3, #24
 80069bc:	4921      	ldr	r1, [pc, #132]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069c2:	e065      	b.n	8006a90 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d048      	beq.n	8006a5e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80069cc:	4b1d      	ldr	r3, [pc, #116]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f023 0219 	bic.w	r2, r3, #25
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	491a      	ldr	r1, [pc, #104]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069de:	f7fc fb67 	bl	80030b0 <HAL_GetTick>
 80069e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069e4:	e008      	b.n	80069f8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069e6:	f7fc fb63 	bl	80030b0 <HAL_GetTick>
 80069ea:	4602      	mov	r2, r0
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d901      	bls.n	80069f8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e308      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80069f8:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f0      	beq.n	80069e6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a04:	f7fc fb84 	bl	8003110 <HAL_GetREVID>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d81a      	bhi.n	8006a48 <HAL_RCC_OscConfig+0x28c>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	2b40      	cmp	r3, #64	; 0x40
 8006a18:	d108      	bne.n	8006a2c <HAL_RCC_OscConfig+0x270>
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a22:	4a08      	ldr	r2, [pc, #32]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a28:	6053      	str	r3, [r2, #4]
 8006a2a:	e031      	b.n	8006a90 <HAL_RCC_OscConfig+0x2d4>
 8006a2c:	4b05      	ldr	r3, [pc, #20]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	031b      	lsls	r3, r3, #12
 8006a3a:	4902      	ldr	r1, [pc, #8]	; (8006a44 <HAL_RCC_OscConfig+0x288>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	604b      	str	r3, [r1, #4]
 8006a40:	e026      	b.n	8006a90 <HAL_RCC_OscConfig+0x2d4>
 8006a42:	bf00      	nop
 8006a44:	58024400 	.word	0x58024400
 8006a48:	4b9a      	ldr	r3, [pc, #616]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	691b      	ldr	r3, [r3, #16]
 8006a54:	061b      	lsls	r3, r3, #24
 8006a56:	4997      	ldr	r1, [pc, #604]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	604b      	str	r3, [r1, #4]
 8006a5c:	e018      	b.n	8006a90 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a5e:	4b95      	ldr	r3, [pc, #596]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a94      	ldr	r2, [pc, #592]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006a64:	f023 0301 	bic.w	r3, r3, #1
 8006a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a6a:	f7fc fb21 	bl	80030b0 <HAL_GetTick>
 8006a6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a70:	e008      	b.n	8006a84 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a72:	f7fc fb1d 	bl	80030b0 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	2b02      	cmp	r3, #2
 8006a7e:	d901      	bls.n	8006a84 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e2c2      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a84:	4b8b      	ldr	r3, [pc, #556]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0304 	and.w	r3, r3, #4
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1f0      	bne.n	8006a72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	f000 80a9 	beq.w	8006bf0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a9e:	4b85      	ldr	r3, [pc, #532]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006aa6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006aa8:	4b82      	ldr	r3, [pc, #520]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aac:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d007      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x308>
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	2b18      	cmp	r3, #24
 8006ab8:	d13a      	bne.n	8006b30 <HAL_RCC_OscConfig+0x374>
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f003 0303 	and.w	r3, r3, #3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d135      	bne.n	8006b30 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ac4:	4b7b      	ldr	r3, [pc, #492]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <HAL_RCC_OscConfig+0x320>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69db      	ldr	r3, [r3, #28]
 8006ad4:	2b80      	cmp	r3, #128	; 0x80
 8006ad6:	d001      	beq.n	8006adc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e296      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006adc:	f7fc fb18 	bl	8003110 <HAL_GetREVID>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d817      	bhi.n	8006b1a <HAL_RCC_OscConfig+0x35e>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6a1b      	ldr	r3, [r3, #32]
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d108      	bne.n	8006b04 <HAL_RCC_OscConfig+0x348>
 8006af2:	4b70      	ldr	r3, [pc, #448]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006afa:	4a6e      	ldr	r2, [pc, #440]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006afc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b00:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b02:	e075      	b.n	8006bf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b04:	4b6b      	ldr	r3, [pc, #428]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6a1b      	ldr	r3, [r3, #32]
 8006b10:	069b      	lsls	r3, r3, #26
 8006b12:	4968      	ldr	r1, [pc, #416]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b14:	4313      	orrs	r3, r2
 8006b16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b18:	e06a      	b.n	8006bf0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b1a:	4b66      	ldr	r3, [pc, #408]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6a1b      	ldr	r3, [r3, #32]
 8006b26:	061b      	lsls	r3, r3, #24
 8006b28:	4962      	ldr	r1, [pc, #392]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006b2e:	e05f      	b.n	8006bf0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d042      	beq.n	8006bbe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006b38:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a5d      	ldr	r2, [pc, #372]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b44:	f7fc fab4 	bl	80030b0 <HAL_GetTick>
 8006b48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b4a:	e008      	b.n	8006b5e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006b4c:	f7fc fab0 	bl	80030b0 <HAL_GetTick>
 8006b50:	4602      	mov	r2, r0
 8006b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b54:	1ad3      	subs	r3, r2, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d901      	bls.n	8006b5e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	e255      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b5e:	4b55      	ldr	r3, [pc, #340]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d0f0      	beq.n	8006b4c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b6a:	f7fc fad1 	bl	8003110 <HAL_GetREVID>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d817      	bhi.n	8006ba8 <HAL_RCC_OscConfig+0x3ec>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a1b      	ldr	r3, [r3, #32]
 8006b7c:	2b20      	cmp	r3, #32
 8006b7e:	d108      	bne.n	8006b92 <HAL_RCC_OscConfig+0x3d6>
 8006b80:	4b4c      	ldr	r3, [pc, #304]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b88:	4a4a      	ldr	r2, [pc, #296]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b8e:	6053      	str	r3, [r2, #4]
 8006b90:	e02e      	b.n	8006bf0 <HAL_RCC_OscConfig+0x434>
 8006b92:	4b48      	ldr	r3, [pc, #288]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a1b      	ldr	r3, [r3, #32]
 8006b9e:	069b      	lsls	r3, r3, #26
 8006ba0:	4944      	ldr	r1, [pc, #272]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006ba2:	4313      	orrs	r3, r2
 8006ba4:	604b      	str	r3, [r1, #4]
 8006ba6:	e023      	b.n	8006bf0 <HAL_RCC_OscConfig+0x434>
 8006ba8:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	061b      	lsls	r3, r3, #24
 8006bb6:	493f      	ldr	r1, [pc, #252]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60cb      	str	r3, [r1, #12]
 8006bbc:	e018      	b.n	8006bf0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006bbe:	4b3d      	ldr	r3, [pc, #244]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	4a3c      	ldr	r2, [pc, #240]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006bc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bca:	f7fc fa71 	bl	80030b0 <HAL_GetTick>
 8006bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006bd2:	f7fc fa6d 	bl	80030b0 <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e212      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006be4:	4b33      	ldr	r3, [pc, #204]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1f0      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0308 	and.w	r3, r3, #8
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d036      	beq.n	8006c6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d019      	beq.n	8006c38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c04:	4b2b      	ldr	r3, [pc, #172]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c08:	4a2a      	ldr	r2, [pc, #168]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006c0a:	f043 0301 	orr.w	r3, r3, #1
 8006c0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c10:	f7fc fa4e 	bl	80030b0 <HAL_GetTick>
 8006c14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c18:	f7fc fa4a 	bl	80030b0 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e1ef      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006c2a:	4b22      	ldr	r3, [pc, #136]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d0f0      	beq.n	8006c18 <HAL_RCC_OscConfig+0x45c>
 8006c36:	e018      	b.n	8006c6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c38:	4b1e      	ldr	r3, [pc, #120]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c3c:	4a1d      	ldr	r2, [pc, #116]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006c3e:	f023 0301 	bic.w	r3, r3, #1
 8006c42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c44:	f7fc fa34 	bl	80030b0 <HAL_GetTick>
 8006c48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c4a:	e008      	b.n	8006c5e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c4c:	f7fc fa30 	bl	80030b0 <HAL_GetTick>
 8006c50:	4602      	mov	r2, r0
 8006c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	2b02      	cmp	r3, #2
 8006c58:	d901      	bls.n	8006c5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e1d5      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006c60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1f0      	bne.n	8006c4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d039      	beq.n	8006cea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	699b      	ldr	r3, [r3, #24]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d01c      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c7e:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a0c      	ldr	r2, [pc, #48]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006c84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c8a:	f7fc fa11 	bl	80030b0 <HAL_GetTick>
 8006c8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c90:	e008      	b.n	8006ca4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006c92:	f7fc fa0d 	bl	80030b0 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d901      	bls.n	8006ca4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006ca0:	2303      	movs	r3, #3
 8006ca2:	e1b2      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006ca4:	4b03      	ldr	r3, [pc, #12]	; (8006cb4 <HAL_RCC_OscConfig+0x4f8>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d0f0      	beq.n	8006c92 <HAL_RCC_OscConfig+0x4d6>
 8006cb0:	e01b      	b.n	8006cea <HAL_RCC_OscConfig+0x52e>
 8006cb2:	bf00      	nop
 8006cb4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cb8:	4b9b      	ldr	r3, [pc, #620]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a9a      	ldr	r2, [pc, #616]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006cbe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cc2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006cc4:	f7fc f9f4 	bl	80030b0 <HAL_GetTick>
 8006cc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ccc:	f7fc f9f0 	bl	80030b0 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e195      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006cde:	4b92      	ldr	r3, [pc, #584]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1f0      	bne.n	8006ccc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0304 	and.w	r3, r3, #4
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8081 	beq.w	8006dfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006cf8:	4b8c      	ldr	r3, [pc, #560]	; (8006f2c <HAL_RCC_OscConfig+0x770>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a8b      	ldr	r2, [pc, #556]	; (8006f2c <HAL_RCC_OscConfig+0x770>)
 8006cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d04:	f7fc f9d4 	bl	80030b0 <HAL_GetTick>
 8006d08:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d0a:	e008      	b.n	8006d1e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006d0c:	f7fc f9d0 	bl	80030b0 <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b64      	cmp	r3, #100	; 0x64
 8006d18:	d901      	bls.n	8006d1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e175      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d1e:	4b83      	ldr	r3, [pc, #524]	; (8006f2c <HAL_RCC_OscConfig+0x770>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0f0      	beq.n	8006d0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d106      	bne.n	8006d40 <HAL_RCC_OscConfig+0x584>
 8006d32:	4b7d      	ldr	r3, [pc, #500]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d36:	4a7c      	ldr	r2, [pc, #496]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d38:	f043 0301 	orr.w	r3, r3, #1
 8006d3c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3e:	e02d      	b.n	8006d9c <HAL_RCC_OscConfig+0x5e0>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10c      	bne.n	8006d62 <HAL_RCC_OscConfig+0x5a6>
 8006d48:	4b77      	ldr	r3, [pc, #476]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4c:	4a76      	ldr	r2, [pc, #472]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	6713      	str	r3, [r2, #112]	; 0x70
 8006d54:	4b74      	ldr	r3, [pc, #464]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d58:	4a73      	ldr	r2, [pc, #460]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d5a:	f023 0304 	bic.w	r3, r3, #4
 8006d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d60:	e01c      	b.n	8006d9c <HAL_RCC_OscConfig+0x5e0>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d10c      	bne.n	8006d84 <HAL_RCC_OscConfig+0x5c8>
 8006d6a:	4b6f      	ldr	r3, [pc, #444]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6e:	4a6e      	ldr	r2, [pc, #440]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d70:	f043 0304 	orr.w	r3, r3, #4
 8006d74:	6713      	str	r3, [r2, #112]	; 0x70
 8006d76:	4b6c      	ldr	r3, [pc, #432]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7a:	4a6b      	ldr	r2, [pc, #428]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d7c:	f043 0301 	orr.w	r3, r3, #1
 8006d80:	6713      	str	r3, [r2, #112]	; 0x70
 8006d82:	e00b      	b.n	8006d9c <HAL_RCC_OscConfig+0x5e0>
 8006d84:	4b68      	ldr	r3, [pc, #416]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d88:	4a67      	ldr	r2, [pc, #412]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d8a:	f023 0301 	bic.w	r3, r3, #1
 8006d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006d90:	4b65      	ldr	r3, [pc, #404]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d94:	4a64      	ldr	r2, [pc, #400]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006d96:	f023 0304 	bic.w	r3, r3, #4
 8006d9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d015      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da4:	f7fc f984 	bl	80030b0 <HAL_GetTick>
 8006da8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006daa:	e00a      	b.n	8006dc2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dac:	f7fc f980 	bl	80030b0 <HAL_GetTick>
 8006db0:	4602      	mov	r2, r0
 8006db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db4:	1ad3      	subs	r3, r2, r3
 8006db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d901      	bls.n	8006dc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e123      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006dc2:	4b59      	ldr	r3, [pc, #356]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0ee      	beq.n	8006dac <HAL_RCC_OscConfig+0x5f0>
 8006dce:	e014      	b.n	8006dfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd0:	f7fc f96e 	bl	80030b0 <HAL_GetTick>
 8006dd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dd6:	e00a      	b.n	8006dee <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dd8:	f7fc f96a 	bl	80030b0 <HAL_GetTick>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e10d      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006dee:	4b4e      	ldr	r3, [pc, #312]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1ee      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 8102 	beq.w	8007008 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006e04:	4b48      	ldr	r3, [pc, #288]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e0c:	2b18      	cmp	r3, #24
 8006e0e:	f000 80bd 	beq.w	8006f8c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	2b02      	cmp	r3, #2
 8006e18:	f040 809e 	bne.w	8006f58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e1c:	4b42      	ldr	r3, [pc, #264]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a41      	ldr	r2, [pc, #260]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006e22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e28:	f7fc f942 	bl	80030b0 <HAL_GetTick>
 8006e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e2e:	e008      	b.n	8006e42 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e30:	f7fc f93e 	bl	80030b0 <HAL_GetTick>
 8006e34:	4602      	mov	r2, r0
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	d901      	bls.n	8006e42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e0e3      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e42:	4b39      	ldr	r3, [pc, #228]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1f0      	bne.n	8006e30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006e4e:	4b36      	ldr	r3, [pc, #216]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006e52:	4b37      	ldr	r3, [pc, #220]	; (8006f30 <HAL_RCC_OscConfig+0x774>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e5e:	0112      	lsls	r2, r2, #4
 8006e60:	430a      	orrs	r2, r1
 8006e62:	4931      	ldr	r1, [pc, #196]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006e64:	4313      	orrs	r3, r2
 8006e66:	628b      	str	r3, [r1, #40]	; 0x28
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6c:	3b01      	subs	r3, #1
 8006e6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e76:	3b01      	subs	r3, #1
 8006e78:	025b      	lsls	r3, r3, #9
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	431a      	orrs	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	3b01      	subs	r3, #1
 8006e84:	041b      	lsls	r3, r3, #16
 8006e86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e90:	3b01      	subs	r3, #1
 8006e92:	061b      	lsls	r3, r3, #24
 8006e94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e98:	4923      	ldr	r1, [pc, #140]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006e9e:	4b22      	ldr	r3, [pc, #136]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	4a21      	ldr	r2, [pc, #132]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ea4:	f023 0301 	bic.w	r3, r3, #1
 8006ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006eaa:	4b1f      	ldr	r3, [pc, #124]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006eac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006eae:	4b21      	ldr	r3, [pc, #132]	; (8006f34 <HAL_RCC_OscConfig+0x778>)
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006eb6:	00d2      	lsls	r2, r2, #3
 8006eb8:	491b      	ldr	r1, [pc, #108]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ebe:	4b1a      	ldr	r3, [pc, #104]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec2:	f023 020c 	bic.w	r2, r3, #12
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	4917      	ldr	r1, [pc, #92]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006ed0:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed4:	f023 0202 	bic.w	r2, r3, #2
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006edc:	4912      	ldr	r1, [pc, #72]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ee2:	4b11      	ldr	r3, [pc, #68]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee6:	4a10      	ldr	r2, [pc, #64]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eee:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	4a0d      	ldr	r2, [pc, #52]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006efa:	4b0b      	ldr	r3, [pc, #44]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efe:	4a0a      	ldr	r2, [pc, #40]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006f06:	4b08      	ldr	r3, [pc, #32]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	4a07      	ldr	r2, [pc, #28]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f12:	4b05      	ldr	r3, [pc, #20]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a04      	ldr	r2, [pc, #16]	; (8006f28 <HAL_RCC_OscConfig+0x76c>)
 8006f18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f1e:	f7fc f8c7 	bl	80030b0 <HAL_GetTick>
 8006f22:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f24:	e011      	b.n	8006f4a <HAL_RCC_OscConfig+0x78e>
 8006f26:	bf00      	nop
 8006f28:	58024400 	.word	0x58024400
 8006f2c:	58024800 	.word	0x58024800
 8006f30:	fffffc0c 	.word	0xfffffc0c
 8006f34:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f38:	f7fc f8ba 	bl	80030b0 <HAL_GetTick>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f40:	1ad3      	subs	r3, r2, r3
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d901      	bls.n	8006f4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006f46:	2303      	movs	r3, #3
 8006f48:	e05f      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006f4a:	4b32      	ldr	r3, [pc, #200]	; (8007014 <HAL_RCC_OscConfig+0x858>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0f0      	beq.n	8006f38 <HAL_RCC_OscConfig+0x77c>
 8006f56:	e057      	b.n	8007008 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f58:	4b2e      	ldr	r3, [pc, #184]	; (8007014 <HAL_RCC_OscConfig+0x858>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a2d      	ldr	r2, [pc, #180]	; (8007014 <HAL_RCC_OscConfig+0x858>)
 8006f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f64:	f7fc f8a4 	bl	80030b0 <HAL_GetTick>
 8006f68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f6a:	e008      	b.n	8006f7e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f6c:	f7fc f8a0 	bl	80030b0 <HAL_GetTick>
 8006f70:	4602      	mov	r2, r0
 8006f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d901      	bls.n	8006f7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	e045      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f7e:	4b25      	ldr	r3, [pc, #148]	; (8007014 <HAL_RCC_OscConfig+0x858>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d1f0      	bne.n	8006f6c <HAL_RCC_OscConfig+0x7b0>
 8006f8a:	e03d      	b.n	8007008 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f8c:	4b21      	ldr	r3, [pc, #132]	; (8007014 <HAL_RCC_OscConfig+0x858>)
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f92:	4b20      	ldr	r3, [pc, #128]	; (8007014 <HAL_RCC_OscConfig+0x858>)
 8006f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f96:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d031      	beq.n	8007004 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f003 0203 	and.w	r2, r3, #3
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d12a      	bne.n	8007004 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	091b      	lsrs	r3, r3, #4
 8006fb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d122      	bne.n	8007004 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d11a      	bne.n	8007004 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	0a5b      	lsrs	r3, r3, #9
 8006fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fda:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d111      	bne.n	8007004 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	0c1b      	lsrs	r3, r3, #16
 8006fe4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fec:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d108      	bne.n	8007004 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	0e1b      	lsrs	r3, r3, #24
 8006ff6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007000:	429a      	cmp	r2, r3
 8007002:	d001      	beq.n	8007008 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e000      	b.n	800700a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3730      	adds	r7, #48	; 0x30
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	58024400 	.word	0x58024400

08007018 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b086      	sub	sp, #24
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d101      	bne.n	800702c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007028:	2301      	movs	r3, #1
 800702a:	e19c      	b.n	8007366 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800702c:	4b8a      	ldr	r3, [pc, #552]	; (8007258 <HAL_RCC_ClockConfig+0x240>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 030f 	and.w	r3, r3, #15
 8007034:	683a      	ldr	r2, [r7, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d910      	bls.n	800705c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800703a:	4b87      	ldr	r3, [pc, #540]	; (8007258 <HAL_RCC_ClockConfig+0x240>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f023 020f 	bic.w	r2, r3, #15
 8007042:	4985      	ldr	r1, [pc, #532]	; (8007258 <HAL_RCC_ClockConfig+0x240>)
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	4313      	orrs	r3, r2
 8007048:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800704a:	4b83      	ldr	r3, [pc, #524]	; (8007258 <HAL_RCC_ClockConfig+0x240>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d001      	beq.n	800705c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e184      	b.n	8007366 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 0304 	and.w	r3, r3, #4
 8007064:	2b00      	cmp	r3, #0
 8007066:	d010      	beq.n	800708a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691a      	ldr	r2, [r3, #16]
 800706c:	4b7b      	ldr	r3, [pc, #492]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007074:	429a      	cmp	r2, r3
 8007076:	d908      	bls.n	800708a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007078:	4b78      	ldr	r3, [pc, #480]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	691b      	ldr	r3, [r3, #16]
 8007084:	4975      	ldr	r1, [pc, #468]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007086:	4313      	orrs	r3, r2
 8007088:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f003 0308 	and.w	r3, r3, #8
 8007092:	2b00      	cmp	r3, #0
 8007094:	d010      	beq.n	80070b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	4b70      	ldr	r3, [pc, #448]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d908      	bls.n	80070b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070a6:	4b6d      	ldr	r3, [pc, #436]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80070a8:	69db      	ldr	r3, [r3, #28]
 80070aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	496a      	ldr	r1, [pc, #424]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d010      	beq.n	80070e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	699a      	ldr	r2, [r3, #24]
 80070c8:	4b64      	ldr	r3, [pc, #400]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80070ca:	69db      	ldr	r3, [r3, #28]
 80070cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d908      	bls.n	80070e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070d4:	4b61      	ldr	r3, [pc, #388]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	495e      	ldr	r1, [pc, #376]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80070e2:	4313      	orrs	r3, r2
 80070e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f003 0320 	and.w	r3, r3, #32
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d010      	beq.n	8007114 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	69da      	ldr	r2, [r3, #28]
 80070f6:	4b59      	ldr	r3, [pc, #356]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070fe:	429a      	cmp	r2, r3
 8007100:	d908      	bls.n	8007114 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007102:	4b56      	ldr	r3, [pc, #344]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	4953      	ldr	r1, [pc, #332]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007110:	4313      	orrs	r3, r2
 8007112:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f003 0302 	and.w	r3, r3, #2
 800711c:	2b00      	cmp	r3, #0
 800711e:	d010      	beq.n	8007142 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68da      	ldr	r2, [r3, #12]
 8007124:	4b4d      	ldr	r3, [pc, #308]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	f003 030f 	and.w	r3, r3, #15
 800712c:	429a      	cmp	r2, r3
 800712e:	d908      	bls.n	8007142 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007130:	4b4a      	ldr	r3, [pc, #296]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	f023 020f 	bic.w	r2, r3, #15
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	4947      	ldr	r1, [pc, #284]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 800713e:	4313      	orrs	r3, r2
 8007140:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0301 	and.w	r3, r3, #1
 800714a:	2b00      	cmp	r3, #0
 800714c:	d055      	beq.n	80071fa <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800714e:	4b43      	ldr	r3, [pc, #268]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007150:	699b      	ldr	r3, [r3, #24]
 8007152:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	4940      	ldr	r1, [pc, #256]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 800715c:	4313      	orrs	r3, r2
 800715e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	2b02      	cmp	r3, #2
 8007166:	d107      	bne.n	8007178 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007168:	4b3c      	ldr	r3, [pc, #240]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007170:	2b00      	cmp	r3, #0
 8007172:	d121      	bne.n	80071b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	e0f6      	b.n	8007366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b03      	cmp	r3, #3
 800717e:	d107      	bne.n	8007190 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007180:	4b36      	ldr	r3, [pc, #216]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007188:	2b00      	cmp	r3, #0
 800718a:	d115      	bne.n	80071b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e0ea      	b.n	8007366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	685b      	ldr	r3, [r3, #4]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d107      	bne.n	80071a8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007198:	4b30      	ldr	r3, [pc, #192]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d109      	bne.n	80071b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	e0de      	b.n	8007366 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071a8:	4b2c      	ldr	r3, [pc, #176]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d101      	bne.n	80071b8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	e0d6      	b.n	8007366 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071b8:	4b28      	ldr	r3, [pc, #160]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f023 0207 	bic.w	r2, r3, #7
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4925      	ldr	r1, [pc, #148]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80071c6:	4313      	orrs	r3, r2
 80071c8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071ca:	f7fb ff71 	bl	80030b0 <HAL_GetTick>
 80071ce:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071d0:	e00a      	b.n	80071e8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071d2:	f7fb ff6d 	bl	80030b0 <HAL_GetTick>
 80071d6:	4602      	mov	r2, r0
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	1ad3      	subs	r3, r2, r3
 80071dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d901      	bls.n	80071e8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80071e4:	2303      	movs	r3, #3
 80071e6:	e0be      	b.n	8007366 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e8:	4b1c      	ldr	r3, [pc, #112]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 80071ea:	691b      	ldr	r3, [r3, #16]
 80071ec:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	00db      	lsls	r3, r3, #3
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d1eb      	bne.n	80071d2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d010      	beq.n	8007228 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	68da      	ldr	r2, [r3, #12]
 800720a:	4b14      	ldr	r3, [pc, #80]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	f003 030f 	and.w	r3, r3, #15
 8007212:	429a      	cmp	r2, r3
 8007214:	d208      	bcs.n	8007228 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007216:	4b11      	ldr	r3, [pc, #68]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	f023 020f 	bic.w	r2, r3, #15
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	490e      	ldr	r1, [pc, #56]	; (800725c <HAL_RCC_ClockConfig+0x244>)
 8007224:	4313      	orrs	r3, r2
 8007226:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007228:	4b0b      	ldr	r3, [pc, #44]	; (8007258 <HAL_RCC_ClockConfig+0x240>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f003 030f 	and.w	r3, r3, #15
 8007230:	683a      	ldr	r2, [r7, #0]
 8007232:	429a      	cmp	r2, r3
 8007234:	d214      	bcs.n	8007260 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007236:	4b08      	ldr	r3, [pc, #32]	; (8007258 <HAL_RCC_ClockConfig+0x240>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f023 020f 	bic.w	r2, r3, #15
 800723e:	4906      	ldr	r1, [pc, #24]	; (8007258 <HAL_RCC_ClockConfig+0x240>)
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	4313      	orrs	r3, r2
 8007244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007246:	4b04      	ldr	r3, [pc, #16]	; (8007258 <HAL_RCC_ClockConfig+0x240>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f003 030f 	and.w	r3, r3, #15
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d005      	beq.n	8007260 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e086      	b.n	8007366 <HAL_RCC_ClockConfig+0x34e>
 8007258:	52002000 	.word	0x52002000
 800725c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d010      	beq.n	800728e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691a      	ldr	r2, [r3, #16]
 8007270:	4b3f      	ldr	r3, [pc, #252]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 8007272:	699b      	ldr	r3, [r3, #24]
 8007274:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007278:	429a      	cmp	r2, r3
 800727a:	d208      	bcs.n	800728e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800727c:	4b3c      	ldr	r3, [pc, #240]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	4939      	ldr	r1, [pc, #228]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 800728a:	4313      	orrs	r3, r2
 800728c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0308 	and.w	r3, r3, #8
 8007296:	2b00      	cmp	r3, #0
 8007298:	d010      	beq.n	80072bc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	695a      	ldr	r2, [r3, #20]
 800729e:	4b34      	ldr	r3, [pc, #208]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d208      	bcs.n	80072bc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072aa:	4b31      	ldr	r3, [pc, #196]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	492e      	ldr	r1, [pc, #184]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 80072b8:	4313      	orrs	r3, r2
 80072ba:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0310 	and.w	r3, r3, #16
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d010      	beq.n	80072ea <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	699a      	ldr	r2, [r3, #24]
 80072cc:	4b28      	ldr	r3, [pc, #160]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 80072ce:	69db      	ldr	r3, [r3, #28]
 80072d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d208      	bcs.n	80072ea <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072d8:	4b25      	ldr	r3, [pc, #148]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	4922      	ldr	r1, [pc, #136]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	f003 0320 	and.w	r3, r3, #32
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d010      	beq.n	8007318 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	69da      	ldr	r2, [r3, #28]
 80072fa:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 80072fc:	6a1b      	ldr	r3, [r3, #32]
 80072fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007302:	429a      	cmp	r2, r3
 8007304:	d208      	bcs.n	8007318 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007306:	4b1a      	ldr	r3, [pc, #104]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	69db      	ldr	r3, [r3, #28]
 8007312:	4917      	ldr	r1, [pc, #92]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 8007314:	4313      	orrs	r3, r2
 8007316:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007318:	f000 f834 	bl	8007384 <HAL_RCC_GetSysClockFreq>
 800731c:	4602      	mov	r2, r0
 800731e:	4b14      	ldr	r3, [pc, #80]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	0a1b      	lsrs	r3, r3, #8
 8007324:	f003 030f 	and.w	r3, r3, #15
 8007328:	4912      	ldr	r1, [pc, #72]	; (8007374 <HAL_RCC_ClockConfig+0x35c>)
 800732a:	5ccb      	ldrb	r3, [r1, r3]
 800732c:	f003 031f 	and.w	r3, r3, #31
 8007330:	fa22 f303 	lsr.w	r3, r2, r3
 8007334:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007336:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <HAL_RCC_ClockConfig+0x358>)
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	4a0d      	ldr	r2, [pc, #52]	; (8007374 <HAL_RCC_ClockConfig+0x35c>)
 8007340:	5cd3      	ldrb	r3, [r2, r3]
 8007342:	f003 031f 	and.w	r3, r3, #31
 8007346:	693a      	ldr	r2, [r7, #16]
 8007348:	fa22 f303 	lsr.w	r3, r2, r3
 800734c:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <HAL_RCC_ClockConfig+0x360>)
 800734e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007350:	4a0a      	ldr	r2, [pc, #40]	; (800737c <HAL_RCC_ClockConfig+0x364>)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007356:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <HAL_RCC_ClockConfig+0x368>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4618      	mov	r0, r3
 800735c:	f7fb fe5e 	bl	800301c <HAL_InitTick>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007364:	7bfb      	ldrb	r3, [r7, #15]
}
 8007366:	4618      	mov	r0, r3
 8007368:	3718      	adds	r7, #24
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	58024400 	.word	0x58024400
 8007374:	0800c000 	.word	0x0800c000
 8007378:	24000004 	.word	0x24000004
 800737c:	24000000 	.word	0x24000000
 8007380:	24000018 	.word	0x24000018

08007384 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007384:	b480      	push	{r7}
 8007386:	b089      	sub	sp, #36	; 0x24
 8007388:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800738a:	4bb3      	ldr	r3, [pc, #716]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800738c:	691b      	ldr	r3, [r3, #16]
 800738e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007392:	2b18      	cmp	r3, #24
 8007394:	f200 8155 	bhi.w	8007642 <HAL_RCC_GetSysClockFreq+0x2be>
 8007398:	a201      	add	r2, pc, #4	; (adr r2, 80073a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800739a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739e:	bf00      	nop
 80073a0:	08007405 	.word	0x08007405
 80073a4:	08007643 	.word	0x08007643
 80073a8:	08007643 	.word	0x08007643
 80073ac:	08007643 	.word	0x08007643
 80073b0:	08007643 	.word	0x08007643
 80073b4:	08007643 	.word	0x08007643
 80073b8:	08007643 	.word	0x08007643
 80073bc:	08007643 	.word	0x08007643
 80073c0:	0800742b 	.word	0x0800742b
 80073c4:	08007643 	.word	0x08007643
 80073c8:	08007643 	.word	0x08007643
 80073cc:	08007643 	.word	0x08007643
 80073d0:	08007643 	.word	0x08007643
 80073d4:	08007643 	.word	0x08007643
 80073d8:	08007643 	.word	0x08007643
 80073dc:	08007643 	.word	0x08007643
 80073e0:	08007431 	.word	0x08007431
 80073e4:	08007643 	.word	0x08007643
 80073e8:	08007643 	.word	0x08007643
 80073ec:	08007643 	.word	0x08007643
 80073f0:	08007643 	.word	0x08007643
 80073f4:	08007643 	.word	0x08007643
 80073f8:	08007643 	.word	0x08007643
 80073fc:	08007643 	.word	0x08007643
 8007400:	08007437 	.word	0x08007437
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007404:	4b94      	ldr	r3, [pc, #592]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f003 0320 	and.w	r3, r3, #32
 800740c:	2b00      	cmp	r3, #0
 800740e:	d009      	beq.n	8007424 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007410:	4b91      	ldr	r3, [pc, #580]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	08db      	lsrs	r3, r3, #3
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	4a90      	ldr	r2, [pc, #576]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
 8007420:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007422:	e111      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007424:	4b8d      	ldr	r3, [pc, #564]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007426:	61bb      	str	r3, [r7, #24]
    break;
 8007428:	e10e      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800742a:	4b8d      	ldr	r3, [pc, #564]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800742c:	61bb      	str	r3, [r7, #24]
    break;
 800742e:	e10b      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007430:	4b8c      	ldr	r3, [pc, #560]	; (8007664 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007432:	61bb      	str	r3, [r7, #24]
    break;
 8007434:	e108      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007436:	4b88      	ldr	r3, [pc, #544]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007440:	4b85      	ldr	r3, [pc, #532]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	091b      	lsrs	r3, r3, #4
 8007446:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800744a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800744c:	4b82      	ldr	r3, [pc, #520]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007450:	f003 0301 	and.w	r3, r3, #1
 8007454:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007456:	4b80      	ldr	r3, [pc, #512]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800745a:	08db      	lsrs	r3, r3, #3
 800745c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	fb02 f303 	mul.w	r3, r2, r3
 8007466:	ee07 3a90 	vmov	s15, r3
 800746a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	2b00      	cmp	r3, #0
 8007476:	f000 80e1 	beq.w	800763c <HAL_RCC_GetSysClockFreq+0x2b8>
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b02      	cmp	r3, #2
 800747e:	f000 8083 	beq.w	8007588 <HAL_RCC_GetSysClockFreq+0x204>
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	2b02      	cmp	r3, #2
 8007486:	f200 80a1 	bhi.w	80075cc <HAL_RCC_GetSysClockFreq+0x248>
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_RCC_GetSysClockFreq+0x114>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2b01      	cmp	r3, #1
 8007494:	d056      	beq.n	8007544 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007496:	e099      	b.n	80075cc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007498:	4b6f      	ldr	r3, [pc, #444]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f003 0320 	and.w	r3, r3, #32
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d02d      	beq.n	8007500 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074a4:	4b6c      	ldr	r3, [pc, #432]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	08db      	lsrs	r3, r3, #3
 80074aa:	f003 0303 	and.w	r3, r3, #3
 80074ae:	4a6b      	ldr	r2, [pc, #428]	; (800765c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074b0:	fa22 f303 	lsr.w	r3, r2, r3
 80074b4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	ee07 3a90 	vmov	s15, r3
 80074bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074c0:	693b      	ldr	r3, [r7, #16]
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ce:	4b62      	ldr	r3, [pc, #392]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074de:	ed97 6a02 	vldr	s12, [r7, #8]
 80074e2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007668 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80074fe:	e087      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	ee07 3a90 	vmov	s15, r3
 8007506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800750a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800766c <HAL_RCC_GetSysClockFreq+0x2e8>
 800750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007512:	4b51      	ldr	r3, [pc, #324]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007522:	ed97 6a02 	vldr	s12, [r7, #8]
 8007526:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007532:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007542:	e065      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	ee07 3a90 	vmov	s15, r3
 800754a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007670 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007556:	4b40      	ldr	r3, [pc, #256]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800755a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755e:	ee07 3a90 	vmov	s15, r3
 8007562:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007566:	ed97 6a02 	vldr	s12, [r7, #8]
 800756a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007668 <HAL_RCC_GetSysClockFreq+0x2e4>
 800756e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007572:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007576:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800757a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007586:	e043      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	ee07 3a90 	vmov	s15, r3
 800758e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007592:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007674 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007596:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800759a:	4b2f      	ldr	r3, [pc, #188]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800759c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075a2:	ee07 3a90 	vmov	s15, r3
 80075a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ae:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007668 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075ca:	e021      	b.n	8007610 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	ee07 3a90 	vmov	s15, r3
 80075d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007670 <HAL_RCC_GetSysClockFreq+0x2ec>
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b1e      	ldr	r3, [pc, #120]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80075f2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007668 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800760e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007610:	4b11      	ldr	r3, [pc, #68]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007614:	0a5b      	lsrs	r3, r3, #9
 8007616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761a:	3301      	adds	r3, #1
 800761c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	ee07 3a90 	vmov	s15, r3
 8007624:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007628:	edd7 6a07 	vldr	s13, [r7, #28]
 800762c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007630:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007634:	ee17 3a90 	vmov	r3, s15
 8007638:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800763a:	e005      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	61bb      	str	r3, [r7, #24]
    break;
 8007640:	e002      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007642:	4b07      	ldr	r3, [pc, #28]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007644:	61bb      	str	r3, [r7, #24]
    break;
 8007646:	bf00      	nop
  }

  return sysclockfreq;
 8007648:	69bb      	ldr	r3, [r7, #24]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3724      	adds	r7, #36	; 0x24
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	58024400 	.word	0x58024400
 800765c:	03d09000 	.word	0x03d09000
 8007660:	003d0900 	.word	0x003d0900
 8007664:	007a1200 	.word	0x007a1200
 8007668:	46000000 	.word	0x46000000
 800766c:	4c742400 	.word	0x4c742400
 8007670:	4a742400 	.word	0x4a742400
 8007674:	4af42400 	.word	0x4af42400

08007678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800767e:	f7ff fe81 	bl	8007384 <HAL_RCC_GetSysClockFreq>
 8007682:	4602      	mov	r2, r0
 8007684:	4b10      	ldr	r3, [pc, #64]	; (80076c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007686:	699b      	ldr	r3, [r3, #24]
 8007688:	0a1b      	lsrs	r3, r3, #8
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	490f      	ldr	r1, [pc, #60]	; (80076cc <HAL_RCC_GetHCLKFreq+0x54>)
 8007690:	5ccb      	ldrb	r3, [r1, r3]
 8007692:	f003 031f 	and.w	r3, r3, #31
 8007696:	fa22 f303 	lsr.w	r3, r2, r3
 800769a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800769c:	4b0a      	ldr	r3, [pc, #40]	; (80076c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f003 030f 	and.w	r3, r3, #15
 80076a4:	4a09      	ldr	r2, [pc, #36]	; (80076cc <HAL_RCC_GetHCLKFreq+0x54>)
 80076a6:	5cd3      	ldrb	r3, [r2, r3]
 80076a8:	f003 031f 	and.w	r3, r3, #31
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	fa22 f303 	lsr.w	r3, r2, r3
 80076b2:	4a07      	ldr	r2, [pc, #28]	; (80076d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80076b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076b6:	4a07      	ldr	r2, [pc, #28]	; (80076d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80076bc:	4b04      	ldr	r3, [pc, #16]	; (80076d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80076be:	681b      	ldr	r3, [r3, #0]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	58024400 	.word	0x58024400
 80076cc:	0800c000 	.word	0x0800c000
 80076d0:	24000004 	.word	0x24000004
 80076d4:	24000000 	.word	0x24000000

080076d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076dc:	f7ff ffcc 	bl	8007678 <HAL_RCC_GetHCLKFreq>
 80076e0:	4602      	mov	r2, r0
 80076e2:	4b06      	ldr	r3, [pc, #24]	; (80076fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80076e4:	69db      	ldr	r3, [r3, #28]
 80076e6:	091b      	lsrs	r3, r3, #4
 80076e8:	f003 0307 	and.w	r3, r3, #7
 80076ec:	4904      	ldr	r1, [pc, #16]	; (8007700 <HAL_RCC_GetPCLK1Freq+0x28>)
 80076ee:	5ccb      	ldrb	r3, [r1, r3]
 80076f0:	f003 031f 	and.w	r3, r3, #31
 80076f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	bd80      	pop	{r7, pc}
 80076fc:	58024400 	.word	0x58024400
 8007700:	0800c000 	.word	0x0800c000

08007704 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007708:	f7ff ffb6 	bl	8007678 <HAL_RCC_GetHCLKFreq>
 800770c:	4602      	mov	r2, r0
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	0a1b      	lsrs	r3, r3, #8
 8007714:	f003 0307 	and.w	r3, r3, #7
 8007718:	4904      	ldr	r1, [pc, #16]	; (800772c <HAL_RCC_GetPCLK2Freq+0x28>)
 800771a:	5ccb      	ldrb	r3, [r1, r3]
 800771c:	f003 031f 	and.w	r3, r3, #31
 8007720:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007724:	4618      	mov	r0, r3
 8007726:	bd80      	pop	{r7, pc}
 8007728:	58024400 	.word	0x58024400
 800772c:	0800c000 	.word	0x0800c000

08007730 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007738:	2300      	movs	r3, #0
 800773a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800773c:	2300      	movs	r3, #0
 800773e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d03f      	beq.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007750:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007754:	d02a      	beq.n	80077ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007756:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800775a:	d824      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800775c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007760:	d018      	beq.n	8007794 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007766:	d81e      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800776c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007770:	d007      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007772:	e018      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007774:	4ba3      	ldr	r3, [pc, #652]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	4aa2      	ldr	r2, [pc, #648]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800777a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800777e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007780:	e015      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	3304      	adds	r3, #4
 8007786:	2102      	movs	r1, #2
 8007788:	4618      	mov	r0, r3
 800778a:	f001 f9d5 	bl	8008b38 <RCCEx_PLL2_Config>
 800778e:	4603      	mov	r3, r0
 8007790:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007792:	e00c      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3324      	adds	r3, #36	; 0x24
 8007798:	2102      	movs	r1, #2
 800779a:	4618      	mov	r0, r3
 800779c:	f001 fa7e 	bl	8008c9c <RCCEx_PLL3_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80077a4:	e003      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	75fb      	strb	r3, [r7, #23]
      break;
 80077aa:	e000      	b.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80077ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077ae:	7dfb      	ldrb	r3, [r7, #23]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d109      	bne.n	80077c8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077b4:	4b93      	ldr	r3, [pc, #588]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80077c0:	4990      	ldr	r1, [pc, #576]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077c2:	4313      	orrs	r3, r2
 80077c4:	650b      	str	r3, [r1, #80]	; 0x50
 80077c6:	e001      	b.n	80077cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d03d      	beq.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077dc:	2b04      	cmp	r3, #4
 80077de:	d826      	bhi.n	800782e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80077e0:	a201      	add	r2, pc, #4	; (adr r2, 80077e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80077e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077e6:	bf00      	nop
 80077e8:	080077fd 	.word	0x080077fd
 80077ec:	0800780b 	.word	0x0800780b
 80077f0:	0800781d 	.word	0x0800781d
 80077f4:	08007835 	.word	0x08007835
 80077f8:	08007835 	.word	0x08007835
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077fc:	4b81      	ldr	r3, [pc, #516]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	4a80      	ldr	r2, [pc, #512]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007802:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007806:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007808:	e015      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	2100      	movs	r1, #0
 8007810:	4618      	mov	r0, r3
 8007812:	f001 f991 	bl	8008b38 <RCCEx_PLL2_Config>
 8007816:	4603      	mov	r3, r0
 8007818:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800781a:	e00c      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	3324      	adds	r3, #36	; 0x24
 8007820:	2100      	movs	r1, #0
 8007822:	4618      	mov	r0, r3
 8007824:	f001 fa3a 	bl	8008c9c <RCCEx_PLL3_Config>
 8007828:	4603      	mov	r3, r0
 800782a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800782c:	e003      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
      break;
 8007832:	e000      	b.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007836:	7dfb      	ldrb	r3, [r7, #23]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d109      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800783c:	4b71      	ldr	r3, [pc, #452]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800783e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007840:	f023 0207 	bic.w	r2, r3, #7
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007848:	496e      	ldr	r1, [pc, #440]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800784a:	4313      	orrs	r3, r2
 800784c:	650b      	str	r3, [r1, #80]	; 0x50
 800784e:	e001      	b.n	8007854 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007850:	7dfb      	ldrb	r3, [r7, #23]
 8007852:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800785c:	2b00      	cmp	r3, #0
 800785e:	d042      	beq.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007868:	d02b      	beq.n	80078c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800786a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800786e:	d825      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007870:	2bc0      	cmp	r3, #192	; 0xc0
 8007872:	d028      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007874:	2bc0      	cmp	r3, #192	; 0xc0
 8007876:	d821      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007878:	2b80      	cmp	r3, #128	; 0x80
 800787a:	d016      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d81d      	bhi.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007880:	2b00      	cmp	r3, #0
 8007882:	d002      	beq.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007884:	2b40      	cmp	r3, #64	; 0x40
 8007886:	d007      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007888:	e018      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800788a:	4b5e      	ldr	r3, [pc, #376]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800788c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800788e:	4a5d      	ldr	r2, [pc, #372]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007894:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007896:	e017      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3304      	adds	r3, #4
 800789c:	2100      	movs	r1, #0
 800789e:	4618      	mov	r0, r3
 80078a0:	f001 f94a 	bl	8008b38 <RCCEx_PLL2_Config>
 80078a4:	4603      	mov	r3, r0
 80078a6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078a8:	e00e      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	3324      	adds	r3, #36	; 0x24
 80078ae:	2100      	movs	r1, #0
 80078b0:	4618      	mov	r0, r3
 80078b2:	f001 f9f3 	bl	8008c9c <RCCEx_PLL3_Config>
 80078b6:	4603      	mov	r3, r0
 80078b8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80078ba:	e005      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	75fb      	strb	r3, [r7, #23]
      break;
 80078c0:	e002      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80078c2:	bf00      	nop
 80078c4:	e000      	b.n	80078c8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80078c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078c8:	7dfb      	ldrb	r3, [r7, #23]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80078ce:	4b4d      	ldr	r3, [pc, #308]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078da:	494a      	ldr	r1, [pc, #296]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	650b      	str	r3, [r1, #80]	; 0x50
 80078e0:	e001      	b.n	80078e6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e2:	7dfb      	ldrb	r3, [r7, #23]
 80078e4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d049      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80078f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078fc:	d030      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80078fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007902:	d82a      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007904:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007908:	d02c      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800790a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800790e:	d824      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007910:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007914:	d018      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007916:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800791a:	d81e      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007920:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007924:	d007      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007926:	e018      	b.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007928:	4b36      	ldr	r3, [pc, #216]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	4a35      	ldr	r2, [pc, #212]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800792e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007932:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007934:	e017      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	3304      	adds	r3, #4
 800793a:	2100      	movs	r1, #0
 800793c:	4618      	mov	r0, r3
 800793e:	f001 f8fb 	bl	8008b38 <RCCEx_PLL2_Config>
 8007942:	4603      	mov	r3, r0
 8007944:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007946:	e00e      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3324      	adds	r3, #36	; 0x24
 800794c:	2100      	movs	r1, #0
 800794e:	4618      	mov	r0, r3
 8007950:	f001 f9a4 	bl	8008c9c <RCCEx_PLL3_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007958:	e005      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
      break;
 800795e:	e002      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007960:	bf00      	nop
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10a      	bne.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800796c:	4b25      	ldr	r3, [pc, #148]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800797a:	4922      	ldr	r1, [pc, #136]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800797c:	4313      	orrs	r3, r2
 800797e:	658b      	str	r3, [r1, #88]	; 0x58
 8007980:	e001      	b.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800798e:	2b00      	cmp	r3, #0
 8007990:	d04b      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007998:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800799c:	d030      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800799e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079a2:	d82a      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079a8:	d02e      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80079aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079ae:	d824      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079b4:	d018      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80079b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079ba:	d81e      	bhi.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d003      	beq.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80079c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079c4:	d007      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80079c6:	e018      	b.n	80079fa <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c8:	4b0e      	ldr	r3, [pc, #56]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	4a0d      	ldr	r2, [pc, #52]	; (8007a04 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079d4:	e019      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	3304      	adds	r3, #4
 80079da:	2100      	movs	r1, #0
 80079dc:	4618      	mov	r0, r3
 80079de:	f001 f8ab 	bl	8008b38 <RCCEx_PLL2_Config>
 80079e2:	4603      	mov	r3, r0
 80079e4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80079e6:	e010      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3324      	adds	r3, #36	; 0x24
 80079ec:	2100      	movs	r1, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 f954 	bl	8008c9c <RCCEx_PLL3_Config>
 80079f4:	4603      	mov	r3, r0
 80079f6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80079f8:	e007      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	75fb      	strb	r3, [r7, #23]
      break;
 80079fe:	e004      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007a00:	bf00      	nop
 8007a02:	e002      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007a04:	58024400 	.word	0x58024400
      break;
 8007a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a0a:	7dfb      	ldrb	r3, [r7, #23]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007a10:	4b99      	ldr	r3, [pc, #612]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007a1e:	4996      	ldr	r1, [pc, #600]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	658b      	str	r3, [r1, #88]	; 0x58
 8007a24:	e001      	b.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a26:	7dfb      	ldrb	r3, [r7, #23]
 8007a28:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d032      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a3a:	2b30      	cmp	r3, #48	; 0x30
 8007a3c:	d01c      	beq.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007a3e:	2b30      	cmp	r3, #48	; 0x30
 8007a40:	d817      	bhi.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007a42:	2b20      	cmp	r3, #32
 8007a44:	d00c      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	d813      	bhi.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007a4e:	2b10      	cmp	r3, #16
 8007a50:	d10f      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a52:	4b89      	ldr	r3, [pc, #548]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	4a88      	ldr	r2, [pc, #544]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a5e:	e00e      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	3304      	adds	r3, #4
 8007a64:	2102      	movs	r1, #2
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 f866 	bl	8008b38 <RCCEx_PLL2_Config>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007a70:	e005      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	75fb      	strb	r3, [r7, #23]
      break;
 8007a76:	e002      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007a78:	bf00      	nop
 8007a7a:	e000      	b.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007a7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d109      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007a84:	4b7c      	ldr	r3, [pc, #496]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a88:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a90:	4979      	ldr	r1, [pc, #484]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a92:	4313      	orrs	r3, r2
 8007a94:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007a96:	e001      	b.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a98:	7dfb      	ldrb	r3, [r7, #23]
 8007a9a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d047      	beq.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab0:	d030      	beq.n	8007b14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007ab2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ab6:	d82a      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007ab8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007abc:	d02c      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007abe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ac2:	d824      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007ac4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ac8:	d018      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ace:	d81e      	bhi.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d003      	beq.n	8007adc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ad8:	d007      	beq.n	8007aea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007ada:	e018      	b.n	8007b0e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007adc:	4b66      	ldr	r3, [pc, #408]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae0:	4a65      	ldr	r2, [pc, #404]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007ae8:	e017      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	3304      	adds	r3, #4
 8007aee:	2100      	movs	r1, #0
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f821 	bl	8008b38 <RCCEx_PLL2_Config>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007afa:	e00e      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	3324      	adds	r3, #36	; 0x24
 8007b00:	2100      	movs	r1, #0
 8007b02:	4618      	mov	r0, r3
 8007b04:	f001 f8ca 	bl	8008c9c <RCCEx_PLL3_Config>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007b0c:	e005      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	75fb      	strb	r3, [r7, #23]
      break;
 8007b12:	e002      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007b14:	bf00      	nop
 8007b16:	e000      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d109      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007b20:	4b55      	ldr	r3, [pc, #340]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b24:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b2c:	4952      	ldr	r1, [pc, #328]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	650b      	str	r3, [r1, #80]	; 0x50
 8007b32:	e001      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	7dfb      	ldrb	r3, [r7, #23]
 8007b36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d049      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b4c:	d02e      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b52:	d828      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b58:	d02a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007b5a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007b5e:	d822      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b60:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b64:	d026      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007b66:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b6a:	d81c      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b70:	d010      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007b72:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b76:	d816      	bhi.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01d      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b80:	d111      	bne.n	8007ba6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3304      	adds	r3, #4
 8007b86:	2101      	movs	r1, #1
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f000 ffd5 	bl	8008b38 <RCCEx_PLL2_Config>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007b92:	e012      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	3324      	adds	r3, #36	; 0x24
 8007b98:	2101      	movs	r1, #1
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f001 f87e 	bl	8008c9c <RCCEx_PLL3_Config>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ba4:	e009      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	75fb      	strb	r3, [r7, #23]
      break;
 8007baa:	e006      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bac:	bf00      	nop
 8007bae:	e004      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bb0:	bf00      	nop
 8007bb2:	e002      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bb4:	bf00      	nop
 8007bb6:	e000      	b.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007bb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d109      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007bc0:	4b2d      	ldr	r3, [pc, #180]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bcc:	492a      	ldr	r1, [pc, #168]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	650b      	str	r3, [r1, #80]	; 0x50
 8007bd2:	e001      	b.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d04d      	beq.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bee:	d02e      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007bf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bf4:	d828      	bhi.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bfa:	d02a      	beq.n	8007c52 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c00:	d822      	bhi.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c06:	d026      	beq.n	8007c56 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007c08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007c0c:	d81c      	bhi.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c12:	d010      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c18:	d816      	bhi.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d01d      	beq.n	8007c5a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007c1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c22:	d111      	bne.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3304      	adds	r3, #4
 8007c28:	2101      	movs	r1, #1
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f000 ff84 	bl	8008b38 <RCCEx_PLL2_Config>
 8007c30:	4603      	mov	r3, r0
 8007c32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c34:	e012      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	3324      	adds	r3, #36	; 0x24
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f001 f82d 	bl	8008c9c <RCCEx_PLL3_Config>
 8007c42:	4603      	mov	r3, r0
 8007c44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007c46:	e009      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c4c:	e006      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c4e:	bf00      	nop
 8007c50:	e004      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c52:	bf00      	nop
 8007c54:	e002      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c56:	bf00      	nop
 8007c58:	e000      	b.n	8007c5c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007c5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c5c:	7dfb      	ldrb	r3, [r7, #23]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d10c      	bne.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007c62:	4b05      	ldr	r3, [pc, #20]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007c70:	4901      	ldr	r1, [pc, #4]	; (8007c78 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	658b      	str	r3, [r1, #88]	; 0x58
 8007c76:	e003      	b.n	8007c80 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007c78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c7c:	7dfb      	ldrb	r3, [r7, #23]
 8007c7e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d02f      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c94:	d00e      	beq.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007c96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007c9a:	d814      	bhi.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d015      	beq.n	8007ccc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007ca0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ca4:	d10f      	bne.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ca6:	4baf      	ldr	r3, [pc, #700]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	4aae      	ldr	r2, [pc, #696]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007cb2:	e00c      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	2101      	movs	r1, #1
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f000 ff3c 	bl	8008b38 <RCCEx_PLL2_Config>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007cc4:	e003      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cca:	e000      	b.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007ccc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cce:	7dfb      	ldrb	r3, [r7, #23]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d109      	bne.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007cd4:	4ba3      	ldr	r3, [pc, #652]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce0:	49a0      	ldr	r1, [pc, #640]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	650b      	str	r3, [r1, #80]	; 0x50
 8007ce6:	e001      	b.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d032      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfc:	2b03      	cmp	r3, #3
 8007cfe:	d81b      	bhi.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007d00:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d06:	bf00      	nop
 8007d08:	08007d3f 	.word	0x08007d3f
 8007d0c:	08007d19 	.word	0x08007d19
 8007d10:	08007d27 	.word	0x08007d27
 8007d14:	08007d3f 	.word	0x08007d3f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007d18:	4b92      	ldr	r3, [pc, #584]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	4a91      	ldr	r2, [pc, #580]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d24:	e00c      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	3304      	adds	r3, #4
 8007d2a:	2102      	movs	r1, #2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f000 ff03 	bl	8008b38 <RCCEx_PLL2_Config>
 8007d32:	4603      	mov	r3, r0
 8007d34:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007d36:	e003      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d3c:	e000      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007d3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d40:	7dfb      	ldrb	r3, [r7, #23]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d109      	bne.n	8007d5a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007d46:	4b87      	ldr	r3, [pc, #540]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4a:	f023 0203 	bic.w	r2, r3, #3
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d52:	4984      	ldr	r1, [pc, #528]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d54:	4313      	orrs	r3, r2
 8007d56:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007d58:	e001      	b.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 8086 	beq.w	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d6c:	4b7e      	ldr	r3, [pc, #504]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a7d      	ldr	r2, [pc, #500]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d76:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d78:	f7fb f99a 	bl	80030b0 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d7e:	e009      	b.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d80:	f7fb f996 	bl	80030b0 <HAL_GetTick>
 8007d84:	4602      	mov	r2, r0
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1ad3      	subs	r3, r2, r3
 8007d8a:	2b64      	cmp	r3, #100	; 0x64
 8007d8c:	d902      	bls.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007d8e:	2303      	movs	r3, #3
 8007d90:	75fb      	strb	r3, [r7, #23]
        break;
 8007d92:	e005      	b.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d94:	4b74      	ldr	r3, [pc, #464]	; (8007f68 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d0ef      	beq.n	8007d80 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d166      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007da6:	4b6f      	ldr	r3, [pc, #444]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007da8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007db0:	4053      	eors	r3, r2
 8007db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d013      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007dba:	4b6a      	ldr	r3, [pc, #424]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007dc4:	4b67      	ldr	r3, [pc, #412]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc8:	4a66      	ldr	r2, [pc, #408]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dce:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007dd0:	4b64      	ldr	r3, [pc, #400]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd4:	4a63      	ldr	r2, [pc, #396]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007dda:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007ddc:	4a61      	ldr	r2, [pc, #388]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dec:	d115      	bne.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dee:	f7fb f95f 	bl	80030b0 <HAL_GetTick>
 8007df2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007df4:	e00b      	b.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007df6:	f7fb f95b 	bl	80030b0 <HAL_GetTick>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	1ad3      	subs	r3, r2, r3
 8007e00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d902      	bls.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	75fb      	strb	r3, [r7, #23]
            break;
 8007e0c:	e005      	b.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e0e:	4b55      	ldr	r3, [pc, #340]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d0ed      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d126      	bne.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e2e:	d10d      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007e30:	4b4c      	ldr	r3, [pc, #304]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e32:	691b      	ldr	r3, [r3, #16]
 8007e34:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e3e:	0919      	lsrs	r1, r3, #4
 8007e40:	4b4a      	ldr	r3, [pc, #296]	; (8007f6c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007e42:	400b      	ands	r3, r1
 8007e44:	4947      	ldr	r1, [pc, #284]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	610b      	str	r3, [r1, #16]
 8007e4a:	e005      	b.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007e4c:	4b45      	ldr	r3, [pc, #276]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	4a44      	ldr	r2, [pc, #272]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007e56:	6113      	str	r3, [r2, #16]
 8007e58:	4b42      	ldr	r3, [pc, #264]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007e62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e66:	493f      	ldr	r1, [pc, #252]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	670b      	str	r3, [r1, #112]	; 0x70
 8007e6c:	e004      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e6e:	7dfb      	ldrb	r3, [r7, #23]
 8007e70:	75bb      	strb	r3, [r7, #22]
 8007e72:	e001      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f000 8085 	beq.w	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e8a:	2b28      	cmp	r3, #40	; 0x28
 8007e8c:	d866      	bhi.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007f71 	.word	0x08007f71
 8007e98:	08007f5d 	.word	0x08007f5d
 8007e9c:	08007f5d 	.word	0x08007f5d
 8007ea0:	08007f5d 	.word	0x08007f5d
 8007ea4:	08007f5d 	.word	0x08007f5d
 8007ea8:	08007f5d 	.word	0x08007f5d
 8007eac:	08007f5d 	.word	0x08007f5d
 8007eb0:	08007f5d 	.word	0x08007f5d
 8007eb4:	08007f39 	.word	0x08007f39
 8007eb8:	08007f5d 	.word	0x08007f5d
 8007ebc:	08007f5d 	.word	0x08007f5d
 8007ec0:	08007f5d 	.word	0x08007f5d
 8007ec4:	08007f5d 	.word	0x08007f5d
 8007ec8:	08007f5d 	.word	0x08007f5d
 8007ecc:	08007f5d 	.word	0x08007f5d
 8007ed0:	08007f5d 	.word	0x08007f5d
 8007ed4:	08007f4b 	.word	0x08007f4b
 8007ed8:	08007f5d 	.word	0x08007f5d
 8007edc:	08007f5d 	.word	0x08007f5d
 8007ee0:	08007f5d 	.word	0x08007f5d
 8007ee4:	08007f5d 	.word	0x08007f5d
 8007ee8:	08007f5d 	.word	0x08007f5d
 8007eec:	08007f5d 	.word	0x08007f5d
 8007ef0:	08007f5d 	.word	0x08007f5d
 8007ef4:	08007f71 	.word	0x08007f71
 8007ef8:	08007f5d 	.word	0x08007f5d
 8007efc:	08007f5d 	.word	0x08007f5d
 8007f00:	08007f5d 	.word	0x08007f5d
 8007f04:	08007f5d 	.word	0x08007f5d
 8007f08:	08007f5d 	.word	0x08007f5d
 8007f0c:	08007f5d 	.word	0x08007f5d
 8007f10:	08007f5d 	.word	0x08007f5d
 8007f14:	08007f71 	.word	0x08007f71
 8007f18:	08007f5d 	.word	0x08007f5d
 8007f1c:	08007f5d 	.word	0x08007f5d
 8007f20:	08007f5d 	.word	0x08007f5d
 8007f24:	08007f5d 	.word	0x08007f5d
 8007f28:	08007f5d 	.word	0x08007f5d
 8007f2c:	08007f5d 	.word	0x08007f5d
 8007f30:	08007f5d 	.word	0x08007f5d
 8007f34:	08007f71 	.word	0x08007f71
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3304      	adds	r3, #4
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 fdfa 	bl	8008b38 <RCCEx_PLL2_Config>
 8007f44:	4603      	mov	r3, r0
 8007f46:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f48:	e013      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	3324      	adds	r3, #36	; 0x24
 8007f4e:	2101      	movs	r1, #1
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 fea3 	bl	8008c9c <RCCEx_PLL3_Config>
 8007f56:	4603      	mov	r3, r0
 8007f58:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007f5a:	e00a      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f60:	e007      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007f62:	bf00      	nop
 8007f64:	58024400 	.word	0x58024400
 8007f68:	58024800 	.word	0x58024800
 8007f6c:	00ffffcf 	.word	0x00ffffcf
      break;
 8007f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d109      	bne.n	8007f8c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007f78:	4b96      	ldr	r3, [pc, #600]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f7c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f84:	4993      	ldr	r1, [pc, #588]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f86:	4313      	orrs	r3, r2
 8007f88:	654b      	str	r3, [r1, #84]	; 0x54
 8007f8a:	e001      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8c:	7dfb      	ldrb	r3, [r7, #23]
 8007f8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 0302 	and.w	r3, r3, #2
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d038      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007fa0:	2b05      	cmp	r3, #5
 8007fa2:	d821      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007fa4:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007faa:	bf00      	nop
 8007fac:	08007fef 	.word	0x08007fef
 8007fb0:	08007fc5 	.word	0x08007fc5
 8007fb4:	08007fd7 	.word	0x08007fd7
 8007fb8:	08007fef 	.word	0x08007fef
 8007fbc:	08007fef 	.word	0x08007fef
 8007fc0:	08007fef 	.word	0x08007fef
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	2101      	movs	r1, #1
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fdb4 	bl	8008b38 <RCCEx_PLL2_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007fd4:	e00c      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3324      	adds	r3, #36	; 0x24
 8007fda:	2101      	movs	r1, #1
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fe5d 	bl	8008c9c <RCCEx_PLL3_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007fe6:	e003      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	75fb      	strb	r3, [r7, #23]
      break;
 8007fec:	e000      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007fee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ff0:	7dfb      	ldrb	r3, [r7, #23]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d109      	bne.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ff6:	4b77      	ldr	r3, [pc, #476]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ffa:	f023 0207 	bic.w	r2, r3, #7
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008002:	4974      	ldr	r1, [pc, #464]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008004:	4313      	orrs	r3, r2
 8008006:	654b      	str	r3, [r1, #84]	; 0x54
 8008008:	e001      	b.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800800a:	7dfb      	ldrb	r3, [r7, #23]
 800800c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0304 	and.w	r3, r3, #4
 8008016:	2b00      	cmp	r3, #0
 8008018:	d03a      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008020:	2b05      	cmp	r3, #5
 8008022:	d821      	bhi.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008024:	a201      	add	r2, pc, #4	; (adr r2, 800802c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802a:	bf00      	nop
 800802c:	0800806f 	.word	0x0800806f
 8008030:	08008045 	.word	0x08008045
 8008034:	08008057 	.word	0x08008057
 8008038:	0800806f 	.word	0x0800806f
 800803c:	0800806f 	.word	0x0800806f
 8008040:	0800806f 	.word	0x0800806f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	3304      	adds	r3, #4
 8008048:	2101      	movs	r1, #1
 800804a:	4618      	mov	r0, r3
 800804c:	f000 fd74 	bl	8008b38 <RCCEx_PLL2_Config>
 8008050:	4603      	mov	r3, r0
 8008052:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008054:	e00c      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	3324      	adds	r3, #36	; 0x24
 800805a:	2101      	movs	r1, #1
 800805c:	4618      	mov	r0, r3
 800805e:	f000 fe1d 	bl	8008c9c <RCCEx_PLL3_Config>
 8008062:	4603      	mov	r3, r0
 8008064:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008066:	e003      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	75fb      	strb	r3, [r7, #23]
      break;
 800806c:	e000      	b.n	8008070 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800806e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008070:	7dfb      	ldrb	r3, [r7, #23]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d10a      	bne.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008076:	4b57      	ldr	r3, [pc, #348]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800807a:	f023 0207 	bic.w	r2, r3, #7
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008084:	4953      	ldr	r1, [pc, #332]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008086:	4313      	orrs	r3, r2
 8008088:	658b      	str	r3, [r1, #88]	; 0x58
 800808a:	e001      	b.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800808c:	7dfb      	ldrb	r3, [r7, #23]
 800808e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0320 	and.w	r3, r3, #32
 8008098:	2b00      	cmp	r3, #0
 800809a:	d04b      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080a6:	d02e      	beq.n	8008106 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80080a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080ac:	d828      	bhi.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b2:	d02a      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b8:	d822      	bhi.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080be:	d026      	beq.n	800810e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80080c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80080c4:	d81c      	bhi.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080ca:	d010      	beq.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80080cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080d0:	d816      	bhi.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01d      	beq.n	8008112 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80080d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080da:	d111      	bne.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	3304      	adds	r3, #4
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f000 fd28 	bl	8008b38 <RCCEx_PLL2_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080ec:	e012      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	3324      	adds	r3, #36	; 0x24
 80080f2:	2102      	movs	r1, #2
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fdd1 	bl	8008c9c <RCCEx_PLL3_Config>
 80080fa:	4603      	mov	r3, r0
 80080fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80080fe:	e009      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	75fb      	strb	r3, [r7, #23]
      break;
 8008104:	e006      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008106:	bf00      	nop
 8008108:	e004      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800810a:	bf00      	nop
 800810c:	e002      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800810e:	bf00      	nop
 8008110:	e000      	b.n	8008114 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008112:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10a      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800811a:	4b2e      	ldr	r3, [pc, #184]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800811c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008128:	492a      	ldr	r1, [pc, #168]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800812a:	4313      	orrs	r3, r2
 800812c:	654b      	str	r3, [r1, #84]	; 0x54
 800812e:	e001      	b.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008130:	7dfb      	ldrb	r3, [r7, #23]
 8008132:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800813c:	2b00      	cmp	r3, #0
 800813e:	d04d      	beq.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008146:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800814a:	d02e      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800814c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008150:	d828      	bhi.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008156:	d02a      	beq.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800815c:	d822      	bhi.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800815e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008162:	d026      	beq.n	80081b2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008168:	d81c      	bhi.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800816a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800816e:	d010      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008174:	d816      	bhi.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008176:	2b00      	cmp	r3, #0
 8008178:	d01d      	beq.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800817a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800817e:	d111      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3304      	adds	r3, #4
 8008184:	2100      	movs	r1, #0
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fcd6 	bl	8008b38 <RCCEx_PLL2_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008190:	e012      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	3324      	adds	r3, #36	; 0x24
 8008196:	2102      	movs	r1, #2
 8008198:	4618      	mov	r0, r3
 800819a:	f000 fd7f 	bl	8008c9c <RCCEx_PLL3_Config>
 800819e:	4603      	mov	r3, r0
 80081a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80081a2:	e009      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	75fb      	strb	r3, [r7, #23]
      break;
 80081a8:	e006      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081aa:	bf00      	nop
 80081ac:	e004      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081ae:	bf00      	nop
 80081b0:	e002      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081b2:	bf00      	nop
 80081b4:	e000      	b.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80081b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081b8:	7dfb      	ldrb	r3, [r7, #23]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d10c      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80081be:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80081cc:	4901      	ldr	r1, [pc, #4]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80081ce:	4313      	orrs	r3, r2
 80081d0:	658b      	str	r3, [r1, #88]	; 0x58
 80081d2:	e003      	b.n	80081dc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80081d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d8:	7dfb      	ldrb	r3, [r7, #23]
 80081da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d04b      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80081ee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081f2:	d02e      	beq.n	8008252 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80081f4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80081f8:	d828      	bhi.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80081fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081fe:	d02a      	beq.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008200:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008204:	d822      	bhi.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008206:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800820a:	d026      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800820c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008210:	d81c      	bhi.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008216:	d010      	beq.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008218:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800821c:	d816      	bhi.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d01d      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008226:	d111      	bne.n	800824c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3304      	adds	r3, #4
 800822c:	2100      	movs	r1, #0
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fc82 	bl	8008b38 <RCCEx_PLL2_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008238:	e012      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	3324      	adds	r3, #36	; 0x24
 800823e:	2102      	movs	r1, #2
 8008240:	4618      	mov	r0, r3
 8008242:	f000 fd2b 	bl	8008c9c <RCCEx_PLL3_Config>
 8008246:	4603      	mov	r3, r0
 8008248:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800824a:	e009      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	75fb      	strb	r3, [r7, #23]
      break;
 8008250:	e006      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008252:	bf00      	nop
 8008254:	e004      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008256:	bf00      	nop
 8008258:	e002      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800825a:	bf00      	nop
 800825c:	e000      	b.n	8008260 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800825e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008260:	7dfb      	ldrb	r3, [r7, #23]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008266:	4b9d      	ldr	r3, [pc, #628]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008274:	4999      	ldr	r1, [pc, #612]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008276:	4313      	orrs	r3, r2
 8008278:	658b      	str	r3, [r1, #88]	; 0x58
 800827a:	e001      	b.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800827c:	7dfb      	ldrb	r3, [r7, #23]
 800827e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d01a      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008292:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008296:	d10a      	bne.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	3324      	adds	r3, #36	; 0x24
 800829c:	2102      	movs	r1, #2
 800829e:	4618      	mov	r0, r3
 80082a0:	f000 fcfc 	bl	8008c9c <RCCEx_PLL3_Config>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d001      	beq.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80082aa:	2301      	movs	r3, #1
 80082ac:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80082ae:	4b8b      	ldr	r3, [pc, #556]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082bc:	4987      	ldr	r1, [pc, #540]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f003 0310 	and.w	r3, r3, #16
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d01a      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082d8:	d10a      	bne.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	3324      	adds	r3, #36	; 0x24
 80082de:	2102      	movs	r1, #2
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 fcdb 	bl	8008c9c <RCCEx_PLL3_Config>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80082f0:	4b7a      	ldr	r3, [pc, #488]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082fe:	4977      	ldr	r1, [pc, #476]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008300:	4313      	orrs	r3, r2
 8008302:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800830c:	2b00      	cmp	r3, #0
 800830e:	d034      	beq.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008316:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800831a:	d01d      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800831c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008320:	d817      	bhi.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800832a:	d009      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800832c:	e011      	b.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	3304      	adds	r3, #4
 8008332:	2100      	movs	r1, #0
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fbff 	bl	8008b38 <RCCEx_PLL2_Config>
 800833a:	4603      	mov	r3, r0
 800833c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800833e:	e00c      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	3324      	adds	r3, #36	; 0x24
 8008344:	2102      	movs	r1, #2
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fca8 	bl	8008c9c <RCCEx_PLL3_Config>
 800834c:	4603      	mov	r3, r0
 800834e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008350:	e003      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]
      break;
 8008356:	e000      	b.n	800835a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800835a:	7dfb      	ldrb	r3, [r7, #23]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008360:	4b5e      	ldr	r3, [pc, #376]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800836e:	495b      	ldr	r1, [pc, #364]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008370:	4313      	orrs	r3, r2
 8008372:	658b      	str	r3, [r1, #88]	; 0x58
 8008374:	e001      	b.n	800837a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008376:	7dfb      	ldrb	r3, [r7, #23]
 8008378:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d033      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800838c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008390:	d01c      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8008392:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008396:	d816      	bhi.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008398:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800839c:	d003      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800839e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083a2:	d007      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80083a4:	e00f      	b.n	80083c6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083a6:	4b4d      	ldr	r3, [pc, #308]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083aa:	4a4c      	ldr	r2, [pc, #304]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80083b2:	e00c      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	3324      	adds	r3, #36	; 0x24
 80083b8:	2101      	movs	r1, #1
 80083ba:	4618      	mov	r0, r3
 80083bc:	f000 fc6e 	bl	8008c9c <RCCEx_PLL3_Config>
 80083c0:	4603      	mov	r3, r0
 80083c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80083c4:	e003      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	75fb      	strb	r3, [r7, #23]
      break;
 80083ca:	e000      	b.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80083cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d10a      	bne.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80083d4:	4b41      	ldr	r3, [pc, #260]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e2:	493e      	ldr	r1, [pc, #248]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083e4:	4313      	orrs	r3, r2
 80083e6:	654b      	str	r3, [r1, #84]	; 0x54
 80083e8:	e001      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d029      	beq.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d003      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008406:	d007      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008408:	e00f      	b.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800840a:	4b34      	ldr	r3, [pc, #208]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800840c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840e:	4a33      	ldr	r2, [pc, #204]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008414:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008416:	e00b      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	3304      	adds	r3, #4
 800841c:	2102      	movs	r1, #2
 800841e:	4618      	mov	r0, r3
 8008420:	f000 fb8a 	bl	8008b38 <RCCEx_PLL2_Config>
 8008424:	4603      	mov	r3, r0
 8008426:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008428:	e002      	b.n	8008430 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800842a:	2301      	movs	r3, #1
 800842c:	75fb      	strb	r3, [r7, #23]
      break;
 800842e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008430:	7dfb      	ldrb	r3, [r7, #23]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008436:	4b29      	ldr	r3, [pc, #164]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800843a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008442:	4926      	ldr	r1, [pc, #152]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008444:	4313      	orrs	r3, r2
 8008446:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008448:	e001      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800844a:	7dfb      	ldrb	r3, [r7, #23]
 800844c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008456:	2b00      	cmp	r3, #0
 8008458:	d00a      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	3324      	adds	r3, #36	; 0x24
 800845e:	2102      	movs	r1, #2
 8008460:	4618      	mov	r0, r3
 8008462:	f000 fc1b 	bl	8008c9c <RCCEx_PLL3_Config>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d033      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008480:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008484:	d017      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008486:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800848a:	d811      	bhi.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800848c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008490:	d013      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8008492:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008496:	d80b      	bhi.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008498:	2b00      	cmp	r3, #0
 800849a:	d010      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800849c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80084a0:	d106      	bne.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084a2:	4b0e      	ldr	r3, [pc, #56]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a6:	4a0d      	ldr	r2, [pc, #52]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80084ae:	e007      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]
      break;
 80084b4:	e004      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084b6:	bf00      	nop
 80084b8:	e002      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084ba:	bf00      	nop
 80084bc:	e000      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80084be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d10c      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80084c6:	4b05      	ldr	r3, [pc, #20]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084d2:	4902      	ldr	r1, [pc, #8]	; (80084dc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	654b      	str	r3, [r1, #84]	; 0x54
 80084d8:	e004      	b.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80084da:	bf00      	nop
 80084dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e0:	7dfb      	ldrb	r3, [r7, #23]
 80084e2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d008      	beq.n	8008502 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80084f0:	4b31      	ldr	r3, [pc, #196]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084fc:	492e      	ldr	r1, [pc, #184]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d009      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800850e:	4b2a      	ldr	r3, [pc, #168]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800851c:	4926      	ldr	r1, [pc, #152]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800851e:	4313      	orrs	r3, r2
 8008520:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800852a:	2b00      	cmp	r3, #0
 800852c:	d008      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800852e:	4b22      	ldr	r3, [pc, #136]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008532:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800853a:	491f      	ldr	r1, [pc, #124]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800853c:	4313      	orrs	r3, r2
 800853e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00d      	beq.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800854c:	4b1a      	ldr	r3, [pc, #104]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	4a19      	ldr	r2, [pc, #100]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008552:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008556:	6113      	str	r3, [r2, #16]
 8008558:	4b17      	ldr	r3, [pc, #92]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800855a:	691a      	ldr	r2, [r3, #16]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008562:	4915      	ldr	r1, [pc, #84]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008564:	4313      	orrs	r3, r2
 8008566:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	da08      	bge.n	8008582 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008570:	4b11      	ldr	r3, [pc, #68]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008574:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857c:	490e      	ldr	r1, [pc, #56]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800857e:	4313      	orrs	r3, r2
 8008580:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d009      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800858e:	4b0a      	ldr	r3, [pc, #40]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008592:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800859c:	4906      	ldr	r1, [pc, #24]	; (80085b8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800859e:	4313      	orrs	r3, r2
 80085a0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80085a2:	7dbb      	ldrb	r3, [r7, #22]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80085a8:	2300      	movs	r3, #0
 80085aa:	e000      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
}
 80085ae:	4618      	mov	r0, r3
 80085b0:	3718      	adds	r7, #24
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	58024400 	.word	0x58024400

080085bc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80085c0:	f7ff f85a 	bl	8007678 <HAL_RCC_GetHCLKFreq>
 80085c4:	4602      	mov	r2, r0
 80085c6:	4b06      	ldr	r3, [pc, #24]	; (80085e0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	091b      	lsrs	r3, r3, #4
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	4904      	ldr	r1, [pc, #16]	; (80085e4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80085d2:	5ccb      	ldrb	r3, [r1, r3]
 80085d4:	f003 031f 	and.w	r3, r3, #31
 80085d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80085dc:	4618      	mov	r0, r3
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	58024400 	.word	0x58024400
 80085e4:	0800c000 	.word	0x0800c000

080085e8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b089      	sub	sp, #36	; 0x24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085f0:	4ba1      	ldr	r3, [pc, #644]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80085fa:	4b9f      	ldr	r3, [pc, #636]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	0b1b      	lsrs	r3, r3, #12
 8008600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008604:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008606:	4b9c      	ldr	r3, [pc, #624]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860a:	091b      	lsrs	r3, r3, #4
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008612:	4b99      	ldr	r3, [pc, #612]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008616:	08db      	lsrs	r3, r3, #3
 8008618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8111 	beq.w	8008858 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b02      	cmp	r3, #2
 800863a:	f000 8083 	beq.w	8008744 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b02      	cmp	r3, #2
 8008642:	f200 80a1 	bhi.w	8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d056      	beq.n	8008700 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008652:	e099      	b.n	8008788 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008654:	4b88      	ldr	r3, [pc, #544]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d02d      	beq.n	80086bc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008660:	4b85      	ldr	r3, [pc, #532]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	08db      	lsrs	r3, r3, #3
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	4a84      	ldr	r2, [pc, #528]	; (800887c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b7b      	ldr	r3, [pc, #492]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800868c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086ba:	e087      	b.n	80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008884 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80086ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ce:	4b6a      	ldr	r3, [pc, #424]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086de:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80086e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086fe:	e065      	b.n	80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008712:	4b59      	ldr	r3, [pc, #356]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008722:	ed97 6a03 	vldr	s12, [r7, #12]
 8008726:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008742:	e043      	b.n	80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800888c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008756:	4b48      	ldr	r3, [pc, #288]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800875a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008766:	ed97 6a03 	vldr	s12, [r7, #12]
 800876a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800876e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008786:	e021      	b.n	80087cc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008888 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879a:	4b37      	ldr	r3, [pc, #220]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008880 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087ca:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80087cc:	4b2a      	ldr	r3, [pc, #168]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	0a5b      	lsrs	r3, r3, #9
 80087d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087f2:	ee17 2a90 	vmov	r2, s15
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80087fa:	4b1f      	ldr	r3, [pc, #124]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008814:	edd7 6a07 	vldr	s13, [r7, #28]
 8008818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800881c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008820:	ee17 2a90 	vmov	r2, s15
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008828:	4b13      	ldr	r3, [pc, #76]	; (8008878 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800882a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800883e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008842:	edd7 6a07 	vldr	s13, [r7, #28]
 8008846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884e:	ee17 2a90 	vmov	r2, s15
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008856:	e008      	b.n	800886a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	609a      	str	r2, [r3, #8]
}
 800886a:	bf00      	nop
 800886c:	3724      	adds	r7, #36	; 0x24
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	58024400 	.word	0x58024400
 800887c:	03d09000 	.word	0x03d09000
 8008880:	46000000 	.word	0x46000000
 8008884:	4c742400 	.word	0x4c742400
 8008888:	4a742400 	.word	0x4a742400
 800888c:	4af42400 	.word	0x4af42400

08008890 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008890:	b480      	push	{r7}
 8008892:	b089      	sub	sp, #36	; 0x24
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008898:	4ba1      	ldr	r3, [pc, #644]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800889a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800889c:	f003 0303 	and.w	r3, r3, #3
 80088a0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80088a2:	4b9f      	ldr	r3, [pc, #636]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a6:	0d1b      	lsrs	r3, r3, #20
 80088a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80088ac:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80088ae:	4b9c      	ldr	r3, [pc, #624]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b2:	0a1b      	lsrs	r3, r3, #8
 80088b4:	f003 0301 	and.w	r3, r3, #1
 80088b8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80088ba:	4b99      	ldr	r3, [pc, #612]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088be:	08db      	lsrs	r3, r3, #3
 80088c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80088c4:	693a      	ldr	r2, [r7, #16]
 80088c6:	fb02 f303 	mul.w	r3, r2, r3
 80088ca:	ee07 3a90 	vmov	s15, r3
 80088ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 8111 	beq.w	8008b00 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	f000 8083 	beq.w	80089ec <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	f200 80a1 	bhi.w	8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d003      	beq.n	80088fc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d056      	beq.n	80089a8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80088fa:	e099      	b.n	8008a30 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088fc:	4b88      	ldr	r3, [pc, #544]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 0320 	and.w	r3, r3, #32
 8008904:	2b00      	cmp	r3, #0
 8008906:	d02d      	beq.n	8008964 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008908:	4b85      	ldr	r3, [pc, #532]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	08db      	lsrs	r3, r3, #3
 800890e:	f003 0303 	and.w	r3, r3, #3
 8008912:	4a84      	ldr	r2, [pc, #528]	; (8008b24 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008914:	fa22 f303 	lsr.w	r3, r2, r3
 8008918:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	ee07 3a90 	vmov	s15, r3
 8008920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	ee07 3a90 	vmov	s15, r3
 800892a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800892e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008932:	4b7b      	ldr	r3, [pc, #492]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	ee07 3a90 	vmov	s15, r3
 800893e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008942:	ed97 6a03 	vldr	s12, [r7, #12]
 8008946:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800894a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800895a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008962:	e087      	b.n	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008b2c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008976:	4b6a      	ldr	r3, [pc, #424]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800897e:	ee07 3a90 	vmov	s15, r3
 8008982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008986:	ed97 6a03 	vldr	s12, [r7, #12]
 800898a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800898e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800899a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800899e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089a6:	e065      	b.n	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	ee07 3a90 	vmov	s15, r3
 80089ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089b2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80089b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089ba:	4b59      	ldr	r3, [pc, #356]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80089ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80089ce:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80089d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80089d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80089da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80089de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80089e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80089ea:	e043      	b.n	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	ee07 3a90 	vmov	s15, r3
 80089f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089f6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008b34 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80089fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80089fe:	4b48      	ldr	r3, [pc, #288]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	ee07 3a90 	vmov	s15, r3
 8008a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a12:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a2a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a2e:	e021      	b.n	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	ee07 3a90 	vmov	s15, r3
 8008a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008b30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b37      	ldr	r3, [pc, #220]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008b28 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008a72:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008a74:	4b2a      	ldr	r3, [pc, #168]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a78:	0a5b      	lsrs	r3, r3, #9
 8008a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a7e:	ee07 3a90 	vmov	s15, r3
 8008a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008a8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a9a:	ee17 2a90 	vmov	r2, s15
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008aa2:	4b1f      	ldr	r3, [pc, #124]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa6:	0c1b      	lsrs	r3, r3, #16
 8008aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aac:	ee07 3a90 	vmov	s15, r3
 8008ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ab4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ab8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008abc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ac4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ac8:	ee17 2a90 	vmov	r2, s15
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008ad0:	4b13      	ldr	r3, [pc, #76]	; (8008b20 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ad4:	0e1b      	lsrs	r3, r3, #24
 8008ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ae2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8008aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008af6:	ee17 2a90 	vmov	r2, s15
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008afe:	e008      	b.n	8008b12 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2200      	movs	r2, #0
 8008b04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	609a      	str	r2, [r3, #8]
}
 8008b12:	bf00      	nop
 8008b14:	3724      	adds	r7, #36	; 0x24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	58024400 	.word	0x58024400
 8008b24:	03d09000 	.word	0x03d09000
 8008b28:	46000000 	.word	0x46000000
 8008b2c:	4c742400 	.word	0x4c742400
 8008b30:	4a742400 	.word	0x4a742400
 8008b34:	4af42400 	.word	0x4af42400

08008b38 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b42:	2300      	movs	r3, #0
 8008b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b46:	4b53      	ldr	r3, [pc, #332]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4a:	f003 0303 	and.w	r3, r3, #3
 8008b4e:	2b03      	cmp	r3, #3
 8008b50:	d101      	bne.n	8008b56 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e099      	b.n	8008c8a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008b56:	4b4f      	ldr	r3, [pc, #316]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a4e      	ldr	r2, [pc, #312]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b62:	f7fa faa5 	bl	80030b0 <HAL_GetTick>
 8008b66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b68:	e008      	b.n	8008b7c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b6a:	f7fa faa1 	bl	80030b0 <HAL_GetTick>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	2b02      	cmp	r3, #2
 8008b76:	d901      	bls.n	8008b7c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e086      	b.n	8008c8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008b7c:	4b45      	ldr	r3, [pc, #276]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d1f0      	bne.n	8008b6a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008b88:	4b42      	ldr	r3, [pc, #264]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	031b      	lsls	r3, r3, #12
 8008b96:	493f      	ldr	r1, [pc, #252]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	628b      	str	r3, [r1, #40]	; 0x28
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	3b01      	subs	r3, #1
 8008ba2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	025b      	lsls	r3, r3, #9
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	3b01      	subs	r3, #1
 8008bb8:	041b      	lsls	r3, r3, #16
 8008bba:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008bbe:	431a      	orrs	r2, r3
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	061b      	lsls	r3, r3, #24
 8008bc8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008bcc:	4931      	ldr	r1, [pc, #196]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008bd2:	4b30      	ldr	r3, [pc, #192]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	695b      	ldr	r3, [r3, #20]
 8008bde:	492d      	ldr	r1, [pc, #180]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008be0:	4313      	orrs	r3, r2
 8008be2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008be4:	4b2b      	ldr	r3, [pc, #172]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	f023 0220 	bic.w	r2, r3, #32
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	699b      	ldr	r3, [r3, #24]
 8008bf0:	4928      	ldr	r1, [pc, #160]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008bf6:	4b27      	ldr	r3, [pc, #156]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfa:	4a26      	ldr	r2, [pc, #152]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008bfc:	f023 0310 	bic.w	r3, r3, #16
 8008c00:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008c02:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c06:	4b24      	ldr	r3, [pc, #144]	; (8008c98 <RCCEx_PLL2_Config+0x160>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	69d2      	ldr	r2, [r2, #28]
 8008c0e:	00d2      	lsls	r2, r2, #3
 8008c10:	4920      	ldr	r1, [pc, #128]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c12:	4313      	orrs	r3, r2
 8008c14:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008c16:	4b1f      	ldr	r3, [pc, #124]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1a:	4a1e      	ldr	r2, [pc, #120]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c1c:	f043 0310 	orr.w	r3, r3, #16
 8008c20:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008c28:	4b1a      	ldr	r3, [pc, #104]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	4a19      	ldr	r2, [pc, #100]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c34:	e00f      	b.n	8008c56 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	2b01      	cmp	r3, #1
 8008c3a:	d106      	bne.n	8008c4a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008c3c:	4b15      	ldr	r3, [pc, #84]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	4a14      	ldr	r2, [pc, #80]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c48:	e005      	b.n	8008c56 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008c4a:	4b12      	ldr	r3, [pc, #72]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c4e:	4a11      	ldr	r2, [pc, #68]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c54:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008c56:	4b0f      	ldr	r3, [pc, #60]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a0e      	ldr	r2, [pc, #56]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c62:	f7fa fa25 	bl	80030b0 <HAL_GetTick>
 8008c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c68:	e008      	b.n	8008c7c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c6a:	f7fa fa21 	bl	80030b0 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	2b02      	cmp	r3, #2
 8008c76:	d901      	bls.n	8008c7c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008c78:	2303      	movs	r3, #3
 8008c7a:	e006      	b.n	8008c8a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008c7c:	4b05      	ldr	r3, [pc, #20]	; (8008c94 <RCCEx_PLL2_Config+0x15c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d0f0      	beq.n	8008c6a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	58024400 	.word	0x58024400
 8008c98:	ffff0007 	.word	0xffff0007

08008c9c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008caa:	4b53      	ldr	r3, [pc, #332]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d101      	bne.n	8008cba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e099      	b.n	8008dee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008cba:	4b4f      	ldr	r3, [pc, #316]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4a4e      	ldr	r2, [pc, #312]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cc6:	f7fa f9f3 	bl	80030b0 <HAL_GetTick>
 8008cca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ccc:	e008      	b.n	8008ce0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008cce:	f7fa f9ef 	bl	80030b0 <HAL_GetTick>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d901      	bls.n	8008ce0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008cdc:	2303      	movs	r3, #3
 8008cde:	e086      	b.n	8008dee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ce0:	4b45      	ldr	r3, [pc, #276]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d1f0      	bne.n	8008cce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008cec:	4b42      	ldr	r3, [pc, #264]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	051b      	lsls	r3, r3, #20
 8008cfa:	493f      	ldr	r1, [pc, #252]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	628b      	str	r3, [r1, #40]	; 0x28
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	3b01      	subs	r3, #1
 8008d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	3b01      	subs	r3, #1
 8008d10:	025b      	lsls	r3, r3, #9
 8008d12:	b29b      	uxth	r3, r3
 8008d14:	431a      	orrs	r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	3b01      	subs	r3, #1
 8008d1c:	041b      	lsls	r3, r3, #16
 8008d1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008d22:	431a      	orrs	r2, r3
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	061b      	lsls	r3, r3, #24
 8008d2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008d30:	4931      	ldr	r1, [pc, #196]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d32:	4313      	orrs	r3, r2
 8008d34:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008d36:	4b30      	ldr	r3, [pc, #192]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	695b      	ldr	r3, [r3, #20]
 8008d42:	492d      	ldr	r1, [pc, #180]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d44:	4313      	orrs	r3, r2
 8008d46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008d48:	4b2b      	ldr	r3, [pc, #172]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d4c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	699b      	ldr	r3, [r3, #24]
 8008d54:	4928      	ldr	r1, [pc, #160]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008d5a:	4b27      	ldr	r3, [pc, #156]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	4a26      	ldr	r2, [pc, #152]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008d66:	4b24      	ldr	r3, [pc, #144]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d6a:	4b24      	ldr	r3, [pc, #144]	; (8008dfc <RCCEx_PLL3_Config+0x160>)
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	69d2      	ldr	r2, [r2, #28]
 8008d72:	00d2      	lsls	r2, r2, #3
 8008d74:	4920      	ldr	r1, [pc, #128]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d76:	4313      	orrs	r3, r2
 8008d78:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008d7a:	4b1f      	ldr	r3, [pc, #124]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7e:	4a1e      	ldr	r2, [pc, #120]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d106      	bne.n	8008d9a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008d8c:	4b1a      	ldr	r3, [pc, #104]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d90:	4a19      	ldr	r2, [pc, #100]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008d92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d98:	e00f      	b.n	8008dba <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d106      	bne.n	8008dae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008da0:	4b15      	ldr	r3, [pc, #84]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da4:	4a14      	ldr	r2, [pc, #80]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008da6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008dac:	e005      	b.n	8008dba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008dae:	4b12      	ldr	r3, [pc, #72]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	4a11      	ldr	r2, [pc, #68]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008db4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008db8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008dba:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a0e      	ldr	r2, [pc, #56]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dc6:	f7fa f973 	bl	80030b0 <HAL_GetTick>
 8008dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008dcc:	e008      	b.n	8008de0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008dce:	f7fa f96f 	bl	80030b0 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d901      	bls.n	8008de0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008ddc:	2303      	movs	r3, #3
 8008dde:	e006      	b.n	8008dee <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008de0:	4b05      	ldr	r3, [pc, #20]	; (8008df8 <RCCEx_PLL3_Config+0x15c>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d0f0      	beq.n	8008dce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	58024400 	.word	0x58024400
 8008dfc:	ffff0007 	.word	0xffff0007

08008e00 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d101      	bne.n	8008e12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e0f1      	b.n	8008ff6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a78      	ldr	r2, [pc, #480]	; (8009000 <HAL_SPI_Init+0x200>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00f      	beq.n	8008e42 <HAL_SPI_Init+0x42>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a77      	ldr	r2, [pc, #476]	; (8009004 <HAL_SPI_Init+0x204>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00a      	beq.n	8008e42 <HAL_SPI_Init+0x42>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a75      	ldr	r2, [pc, #468]	; (8009008 <HAL_SPI_Init+0x208>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d005      	beq.n	8008e42 <HAL_SPI_Init+0x42>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	2b0f      	cmp	r3, #15
 8008e3c:	d901      	bls.n	8008e42 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e0d9      	b.n	8008ff6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fba2 	bl	800958c <SPI_GetPacketSize>
 8008e48:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a6c      	ldr	r2, [pc, #432]	; (8009000 <HAL_SPI_Init+0x200>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d00c      	beq.n	8008e6e <HAL_SPI_Init+0x6e>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a6a      	ldr	r2, [pc, #424]	; (8009004 <HAL_SPI_Init+0x204>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d007      	beq.n	8008e6e <HAL_SPI_Init+0x6e>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a69      	ldr	r2, [pc, #420]	; (8009008 <HAL_SPI_Init+0x208>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d002      	beq.n	8008e6e <HAL_SPI_Init+0x6e>
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d811      	bhi.n	8008e92 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008e72:	4a63      	ldr	r2, [pc, #396]	; (8009000 <HAL_SPI_Init+0x200>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d009      	beq.n	8008e8c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a61      	ldr	r2, [pc, #388]	; (8009004 <HAL_SPI_Init+0x204>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d004      	beq.n	8008e8c <HAL_SPI_Init+0x8c>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a60      	ldr	r2, [pc, #384]	; (8009008 <HAL_SPI_Init+0x208>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d104      	bne.n	8008e96 <HAL_SPI_Init+0x96>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b10      	cmp	r3, #16
 8008e90:	d901      	bls.n	8008e96 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e0af      	b.n	8008ff6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7f9 fe3a 	bl	8002b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f022 0201 	bic.w	r2, r2, #1
 8008ec6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008ed2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	699b      	ldr	r3, [r3, #24]
 8008ed8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008edc:	d119      	bne.n	8008f12 <HAL_SPI_Init+0x112>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ee6:	d103      	bne.n	8008ef0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d008      	beq.n	8008f02 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d10c      	bne.n	8008f12 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008efc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f00:	d107      	bne.n	8008f12 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008f10:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	69da      	ldr	r2, [r3, #28]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f1a:	431a      	orrs	r2, r3
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	431a      	orrs	r2, r3
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f24:	ea42 0103 	orr.w	r1, r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	68da      	ldr	r2, [r3, #12]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	430a      	orrs	r2, r1
 8008f32:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3c:	431a      	orrs	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	699b      	ldr	r3, [r3, #24]
 8008f48:	431a      	orrs	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	691b      	ldr	r3, [r3, #16]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	695b      	ldr	r3, [r3, #20]
 8008f54:	431a      	orrs	r2, r3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6a1b      	ldr	r3, [r3, #32]
 8008f5a:	431a      	orrs	r2, r3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	431a      	orrs	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f66:	431a      	orrs	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	431a      	orrs	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f72:	ea42 0103 	orr.w	r1, r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d113      	bne.n	8008fb2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f9c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008fb0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0201 	bic.w	r2, r2, #1
 8008fc0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	685b      	ldr	r3, [r3, #4]
 8008fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d00a      	beq.n	8008fe4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	68db      	ldr	r3, [r3, #12]
 8008fd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008ff4:	2300      	movs	r3, #0
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3710      	adds	r7, #16
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	40013000 	.word	0x40013000
 8009004:	40003800 	.word	0x40003800
 8009008:	40003c00 	.word	0x40003c00

0800900c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b08a      	sub	sp, #40	; 0x28
 8009010:	af02      	add	r7, sp, #8
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	603b      	str	r3, [r7, #0]
 8009018:	4613      	mov	r3, r2
 800901a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	3320      	adds	r3, #32
 8009022:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800902e:	2b01      	cmp	r3, #1
 8009030:	d101      	bne.n	8009036 <HAL_SPI_Transmit+0x2a>
 8009032:	2302      	movs	r3, #2
 8009034:	e1d7      	b.n	80093e6 <HAL_SPI_Transmit+0x3da>
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	2201      	movs	r2, #1
 800903a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800903e:	f7fa f837 	bl	80030b0 <HAL_GetTick>
 8009042:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800904a:	b2db      	uxtb	r3, r3
 800904c:	2b01      	cmp	r3, #1
 800904e:	d007      	beq.n	8009060 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009050:	2302      	movs	r3, #2
 8009052:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2200      	movs	r2, #0
 8009058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800905c:	7efb      	ldrb	r3, [r7, #27]
 800905e:	e1c2      	b.n	80093e6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d002      	beq.n	800906c <HAL_SPI_Transmit+0x60>
 8009066:	88fb      	ldrh	r3, [r7, #6]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d107      	bne.n	800907c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009078:	7efb      	ldrb	r3, [r7, #27]
 800907a:	e1b4      	b.n	80093e6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2203      	movs	r2, #3
 8009080:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2200      	movs	r2, #0
 8009088:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	88fa      	ldrh	r2, [r7, #6]
 8009096:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	88fa      	ldrh	r2, [r7, #6]
 800909e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80090cc:	d107      	bne.n	80090de <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	4b96      	ldr	r3, [pc, #600]	; (8009340 <HAL_SPI_Transmit+0x334>)
 80090e6:	4013      	ands	r3, r2
 80090e8:	88f9      	ldrh	r1, [r7, #6]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	6812      	ldr	r2, [r2, #0]
 80090ee:	430b      	orrs	r3, r1
 80090f0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f042 0201 	orr.w	r2, r2, #1
 8009100:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800910a:	d107      	bne.n	800911c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800911a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	2b0f      	cmp	r3, #15
 8009122:	d947      	bls.n	80091b4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009124:	e03f      	b.n	80091a6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b02      	cmp	r3, #2
 8009132:	d114      	bne.n	800915e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6812      	ldr	r2, [r2, #0]
 800913e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009144:	1d1a      	adds	r2, r3, #4
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009150:	b29b      	uxth	r3, r3
 8009152:	3b01      	subs	r3, #1
 8009154:	b29a      	uxth	r2, r3
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800915c:	e023      	b.n	80091a6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800915e:	f7f9 ffa7 	bl	80030b0 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	429a      	cmp	r2, r3
 800916c:	d803      	bhi.n	8009176 <HAL_SPI_Transmit+0x16a>
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009174:	d102      	bne.n	800917c <HAL_SPI_Transmit+0x170>
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d114      	bne.n	80091a6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	f000 f937 	bl	80093f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009190:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2201      	movs	r2, #1
 800919e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80091a2:	2303      	movs	r3, #3
 80091a4:	e11f      	b.n	80093e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1b9      	bne.n	8009126 <HAL_SPI_Transmit+0x11a>
 80091b2:	e0f2      	b.n	800939a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	2b07      	cmp	r3, #7
 80091ba:	f240 80e7 	bls.w	800938c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80091be:	e05d      	b.n	800927c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	f003 0302 	and.w	r3, r3, #2
 80091ca:	2b02      	cmp	r3, #2
 80091cc:	d132      	bne.n	8009234 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	2b01      	cmp	r3, #1
 80091d8:	d918      	bls.n	800920c <HAL_SPI_Transmit+0x200>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d014      	beq.n	800920c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	6812      	ldr	r2, [r2, #0]
 80091ec:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091f2:	1d1a      	adds	r2, r3, #4
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091fe:	b29b      	uxth	r3, r3
 8009200:	3b02      	subs	r3, #2
 8009202:	b29a      	uxth	r2, r3
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800920a:	e037      	b.n	800927c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009210:	881a      	ldrh	r2, [r3, #0]
 8009212:	69fb      	ldr	r3, [r7, #28]
 8009214:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800921a:	1c9a      	adds	r2, r3, #2
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009226:	b29b      	uxth	r3, r3
 8009228:	3b01      	subs	r3, #1
 800922a:	b29a      	uxth	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009232:	e023      	b.n	800927c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009234:	f7f9 ff3c 	bl	80030b0 <HAL_GetTick>
 8009238:	4602      	mov	r2, r0
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	1ad3      	subs	r3, r2, r3
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	429a      	cmp	r2, r3
 8009242:	d803      	bhi.n	800924c <HAL_SPI_Transmit+0x240>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924a:	d102      	bne.n	8009252 <HAL_SPI_Transmit+0x246>
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d114      	bne.n	800927c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 f8cc 	bl	80093f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2200      	movs	r2, #0
 800925c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009266:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2201      	movs	r2, #1
 8009274:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009278:	2303      	movs	r3, #3
 800927a:	e0b4      	b.n	80093e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009282:	b29b      	uxth	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	d19b      	bne.n	80091c0 <HAL_SPI_Transmit+0x1b4>
 8009288:	e087      	b.n	800939a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	f003 0302 	and.w	r3, r3, #2
 8009294:	2b02      	cmp	r3, #2
 8009296:	d155      	bne.n	8009344 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800929e:	b29b      	uxth	r3, r3
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	d918      	bls.n	80092d6 <HAL_SPI_Transmit+0x2ca>
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092a8:	2b40      	cmp	r3, #64	; 0x40
 80092aa:	d914      	bls.n	80092d6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	6812      	ldr	r2, [r2, #0]
 80092b6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092bc:	1d1a      	adds	r2, r3, #4
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	3b04      	subs	r3, #4
 80092cc:	b29a      	uxth	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80092d4:	e05a      	b.n	800938c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092dc:	b29b      	uxth	r3, r3
 80092de:	2b01      	cmp	r3, #1
 80092e0:	d917      	bls.n	8009312 <HAL_SPI_Transmit+0x306>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d013      	beq.n	8009312 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ee:	881a      	ldrh	r2, [r3, #0]
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f8:	1c9a      	adds	r2, r3, #2
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009304:	b29b      	uxth	r3, r3
 8009306:	3b02      	subs	r3, #2
 8009308:	b29a      	uxth	r2, r3
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009310:	e03c      	b.n	800938c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	3320      	adds	r3, #32
 800931c:	7812      	ldrb	r2, [r2, #0]
 800931e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009324:	1c5a      	adds	r2, r3, #1
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009330:	b29b      	uxth	r3, r3
 8009332:	3b01      	subs	r3, #1
 8009334:	b29a      	uxth	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800933c:	e026      	b.n	800938c <HAL_SPI_Transmit+0x380>
 800933e:	bf00      	nop
 8009340:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009344:	f7f9 feb4 	bl	80030b0 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d803      	bhi.n	800935c <HAL_SPI_Transmit+0x350>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935a:	d102      	bne.n	8009362 <HAL_SPI_Transmit+0x356>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d114      	bne.n	800938c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f844 	bl	80093f0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009376:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e02c      	b.n	80093e6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	f47f af78 	bne.w	800928a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	697b      	ldr	r3, [r7, #20]
 80093a0:	2200      	movs	r2, #0
 80093a2:	2108      	movs	r1, #8
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 f8c3 	bl	8009530 <SPI_WaitOnFlagUntilTimeout>
 80093aa:	4603      	mov	r3, r0
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d007      	beq.n	80093c0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093b6:	f043 0220 	orr.w	r2, r3, #32
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f815 	bl	80093f0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d001      	beq.n	80093e4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80093e0:	2301      	movs	r3, #1
 80093e2:	e000      	b.n	80093e6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80093e4:	7efb      	ldrb	r3, [r7, #27]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3720      	adds	r7, #32
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
 80093ee:	bf00      	nop

080093f0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	699a      	ldr	r2, [r3, #24]
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f042 0208 	orr.w	r2, r2, #8
 800940e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699a      	ldr	r2, [r3, #24]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f042 0210 	orr.w	r2, r2, #16
 800941e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f022 0201 	bic.w	r2, r2, #1
 800942e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6919      	ldr	r1, [r3, #16]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b3c      	ldr	r3, [pc, #240]	; (800952c <SPI_CloseTransfer+0x13c>)
 800943c:	400b      	ands	r3, r1
 800943e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800944e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009456:	b2db      	uxtb	r3, r3
 8009458:	2b04      	cmp	r3, #4
 800945a:	d014      	beq.n	8009486 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d00f      	beq.n	8009486 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800946c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	699a      	ldr	r2, [r3, #24]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0220 	orr.w	r2, r2, #32
 8009484:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800948c:	b2db      	uxtb	r3, r3
 800948e:	2b03      	cmp	r3, #3
 8009490:	d014      	beq.n	80094bc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00f      	beq.n	80094bc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a2:	f043 0204 	orr.w	r2, r3, #4
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699a      	ldr	r2, [r3, #24]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094ba:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00f      	beq.n	80094e6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094cc:	f043 0201 	orr.w	r2, r3, #1
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	699a      	ldr	r2, [r3, #24]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094e4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00f      	beq.n	8009510 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094f6:	f043 0208 	orr.w	r2, r3, #8
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	699a      	ldr	r2, [r3, #24]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800950e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009520:	bf00      	nop
 8009522:	3714      	adds	r7, #20
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	fffffc90 	.word	0xfffffc90

08009530 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	603b      	str	r3, [r7, #0]
 800953c:	4613      	mov	r3, r2
 800953e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009540:	e010      	b.n	8009564 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009542:	f7f9 fdb5 	bl	80030b0 <HAL_GetTick>
 8009546:	4602      	mov	r2, r0
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	1ad3      	subs	r3, r2, r3
 800954c:	69ba      	ldr	r2, [r7, #24]
 800954e:	429a      	cmp	r2, r3
 8009550:	d803      	bhi.n	800955a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009552:	69bb      	ldr	r3, [r7, #24]
 8009554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009558:	d102      	bne.n	8009560 <SPI_WaitOnFlagUntilTimeout+0x30>
 800955a:	69bb      	ldr	r3, [r7, #24]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009560:	2303      	movs	r3, #3
 8009562:	e00f      	b.n	8009584 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	695a      	ldr	r2, [r3, #20]
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	4013      	ands	r3, r2
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	429a      	cmp	r2, r3
 8009572:	bf0c      	ite	eq
 8009574:	2301      	moveq	r3, #1
 8009576:	2300      	movne	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	461a      	mov	r2, r3
 800957c:	79fb      	ldrb	r3, [r7, #7]
 800957e:	429a      	cmp	r2, r3
 8009580:	d0df      	beq.n	8009542 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3710      	adds	r7, #16
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800958c:	b480      	push	{r7}
 800958e:	b085      	sub	sp, #20
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009598:	095b      	lsrs	r3, r3, #5
 800959a:	3301      	adds	r3, #1
 800959c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	3301      	adds	r3, #1
 80095a4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	3307      	adds	r3, #7
 80095aa:	08db      	lsrs	r3, r3, #3
 80095ac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	fb02 f303 	mul.w	r3, r2, r3
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b082      	sub	sp, #8
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d101      	bne.n	80095d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	e042      	b.n	800965a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d106      	bne.n	80095ec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f7f9 fb08 	bl	8002bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2224      	movs	r2, #36	; 0x24
 80095f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f022 0201 	bic.w	r2, r2, #1
 8009602:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fbeb 	bl	8009de0 <UART_SetConfig>
 800960a:	4603      	mov	r3, r0
 800960c:	2b01      	cmp	r3, #1
 800960e:	d101      	bne.n	8009614 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009610:	2301      	movs	r3, #1
 8009612:	e022      	b.n	800965a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 f947 	bl	800a8b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685a      	ldr	r2, [r3, #4]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009630:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	689a      	ldr	r2, [r3, #8]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009640:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	681a      	ldr	r2, [r3, #0]
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f042 0201 	orr.w	r2, r2, #1
 8009650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f001 f9ce 	bl	800a9f4 <UART_CheckIdleState>
 8009658:	4603      	mov	r3, r0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
	...

08009664 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b0ba      	sub	sp, #232	; 0xe8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	69db      	ldr	r3, [r3, #28]
 8009672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800968a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800968e:	f640 030f 	movw	r3, #2063	; 0x80f
 8009692:	4013      	ands	r3, r2
 8009694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800969c:	2b00      	cmp	r3, #0
 800969e:	d11b      	bne.n	80096d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a4:	f003 0320 	and.w	r3, r3, #32
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d015      	beq.n	80096d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b0:	f003 0320 	and.w	r3, r3, #32
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d105      	bne.n	80096c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80096b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d009      	beq.n	80096d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 835a 	beq.w	8009d82 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
      }
      return;
 80096d6:	e354      	b.n	8009d82 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 811f 	beq.w	8009920 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80096e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80096e6:	4b8b      	ldr	r3, [pc, #556]	; (8009914 <HAL_UART_IRQHandler+0x2b0>)
 80096e8:	4013      	ands	r3, r2
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80096ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80096f2:	4b89      	ldr	r3, [pc, #548]	; (8009918 <HAL_UART_IRQHandler+0x2b4>)
 80096f4:	4013      	ands	r3, r2
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f000 8112 	beq.w	8009920 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80096fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009700:	f003 0301 	and.w	r3, r3, #1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d011      	beq.n	800972c <HAL_UART_IRQHandler+0xc8>
 8009708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800970c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00b      	beq.n	800972c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2201      	movs	r2, #1
 800971a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009722:	f043 0201 	orr.w	r2, r3, #1
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800972c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009730:	f003 0302 	and.w	r3, r3, #2
 8009734:	2b00      	cmp	r3, #0
 8009736:	d011      	beq.n	800975c <HAL_UART_IRQHandler+0xf8>
 8009738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b00      	cmp	r3, #0
 8009742:	d00b      	beq.n	800975c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2202      	movs	r2, #2
 800974a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009752:	f043 0204 	orr.w	r2, r3, #4
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800975c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	d011      	beq.n	800978c <HAL_UART_IRQHandler+0x128>
 8009768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800976c:	f003 0301 	and.w	r3, r3, #1
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	2204      	movs	r2, #4
 800977a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009782:	f043 0202 	orr.w	r2, r3, #2
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800978c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009790:	f003 0308 	and.w	r3, r3, #8
 8009794:	2b00      	cmp	r3, #0
 8009796:	d017      	beq.n	80097c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800979c:	f003 0320 	and.w	r3, r3, #32
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d105      	bne.n	80097b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097a8:	4b5a      	ldr	r3, [pc, #360]	; (8009914 <HAL_UART_IRQHandler+0x2b0>)
 80097aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d00b      	beq.n	80097c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2208      	movs	r2, #8
 80097b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097be:	f043 0208 	orr.w	r2, r3, #8
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d012      	beq.n	80097fa <HAL_UART_IRQHandler+0x196>
 80097d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00c      	beq.n	80097fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097f0:	f043 0220 	orr.w	r2, r3, #32
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009800:	2b00      	cmp	r3, #0
 8009802:	f000 82c0 	beq.w	8009d86 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980a:	f003 0320 	and.w	r3, r3, #32
 800980e:	2b00      	cmp	r3, #0
 8009810:	d013      	beq.n	800983a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009816:	f003 0320 	and.w	r3, r3, #32
 800981a:	2b00      	cmp	r3, #0
 800981c:	d105      	bne.n	800982a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800981e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009826:	2b00      	cmp	r3, #0
 8009828:	d007      	beq.n	800983a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984e:	2b40      	cmp	r3, #64	; 0x40
 8009850:	d005      	beq.n	800985e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009856:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800985a:	2b00      	cmp	r3, #0
 800985c:	d04f      	beq.n	80098fe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f001 f9dc 	bl	800ac1c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	689b      	ldr	r3, [r3, #8]
 800986a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800986e:	2b40      	cmp	r3, #64	; 0x40
 8009870:	d141      	bne.n	80098f6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3308      	adds	r3, #8
 8009878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009880:	e853 3f00 	ldrex	r3, [r3]
 8009884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800988c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800989e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80098a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80098ae:	e841 2300 	strex	r3, r2, [r1]
 80098b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80098b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d1d9      	bne.n	8009872 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d013      	beq.n	80098ee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ca:	4a14      	ldr	r2, [pc, #80]	; (800991c <HAL_UART_IRQHandler+0x2b8>)
 80098cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fa fbc6 	bl	8004064 <HAL_DMA_Abort_IT>
 80098d8:	4603      	mov	r3, r0
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d017      	beq.n	800990e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e4:	687a      	ldr	r2, [r7, #4]
 80098e6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80098e8:	4610      	mov	r0, r2
 80098ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098ec:	e00f      	b.n	800990e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa60 	bl	8009db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	e00b      	b.n	800990e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 fa5c 	bl	8009db4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098fc:	e007      	b.n	800990e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fa58 	bl	8009db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800990c:	e23b      	b.n	8009d86 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800990e:	bf00      	nop
    return;
 8009910:	e239      	b.n	8009d86 <HAL_UART_IRQHandler+0x722>
 8009912:	bf00      	nop
 8009914:	10000001 	.word	0x10000001
 8009918:	04000120 	.word	0x04000120
 800991c:	0800ace9 	.word	0x0800ace9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009924:	2b01      	cmp	r3, #1
 8009926:	f040 81ce 	bne.w	8009cc6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800992a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800992e:	f003 0310 	and.w	r3, r3, #16
 8009932:	2b00      	cmp	r3, #0
 8009934:	f000 81c7 	beq.w	8009cc6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009938:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800993c:	f003 0310 	and.w	r3, r3, #16
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 81c0 	beq.w	8009cc6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2210      	movs	r2, #16
 800994c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009958:	2b40      	cmp	r3, #64	; 0x40
 800995a:	f040 813b 	bne.w	8009bd4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a8b      	ldr	r2, [pc, #556]	; (8009b94 <HAL_UART_IRQHandler+0x530>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d059      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	4a89      	ldr	r2, [pc, #548]	; (8009b98 <HAL_UART_IRQHandler+0x534>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d053      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a87      	ldr	r2, [pc, #540]	; (8009b9c <HAL_UART_IRQHandler+0x538>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d04d      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a85      	ldr	r2, [pc, #532]	; (8009ba0 <HAL_UART_IRQHandler+0x53c>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d047      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a83      	ldr	r2, [pc, #524]	; (8009ba4 <HAL_UART_IRQHandler+0x540>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d041      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a81      	ldr	r2, [pc, #516]	; (8009ba8 <HAL_UART_IRQHandler+0x544>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d03b      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	4a7f      	ldr	r2, [pc, #508]	; (8009bac <HAL_UART_IRQHandler+0x548>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d035      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a7d      	ldr	r2, [pc, #500]	; (8009bb0 <HAL_UART_IRQHandler+0x54c>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d02f      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a7b      	ldr	r2, [pc, #492]	; (8009bb4 <HAL_UART_IRQHandler+0x550>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d029      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	4a79      	ldr	r2, [pc, #484]	; (8009bb8 <HAL_UART_IRQHandler+0x554>)
 80099d2:	4293      	cmp	r3, r2
 80099d4:	d023      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a77      	ldr	r2, [pc, #476]	; (8009bbc <HAL_UART_IRQHandler+0x558>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d01d      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a75      	ldr	r2, [pc, #468]	; (8009bc0 <HAL_UART_IRQHandler+0x55c>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d017      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a73      	ldr	r2, [pc, #460]	; (8009bc4 <HAL_UART_IRQHandler+0x560>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d011      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a71      	ldr	r2, [pc, #452]	; (8009bc8 <HAL_UART_IRQHandler+0x564>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00b      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a6f      	ldr	r2, [pc, #444]	; (8009bcc <HAL_UART_IRQHandler+0x568>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d005      	beq.n	8009a1e <HAL_UART_IRQHandler+0x3ba>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a6d      	ldr	r2, [pc, #436]	; (8009bd0 <HAL_UART_IRQHandler+0x56c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d105      	bne.n	8009a2a <HAL_UART_IRQHandler+0x3c6>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	e004      	b.n	8009a34 <HAL_UART_IRQHandler+0x3d0>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	685b      	ldr	r3, [r3, #4]
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	f000 81a4 	beq.w	8009d8a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	f080 819c 	bcs.w	8009d8a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a60:	69db      	ldr	r3, [r3, #28]
 8009a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a66:	f000 8086 	beq.w	8009b76 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a76:	e853 3f00 	ldrex	r3, [r3]
 8009a7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a86:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a98:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009aa0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aa4:	e841 2300 	strex	r3, r2, [r1]
 8009aa8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009aac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1da      	bne.n	8009a6a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	3308      	adds	r3, #8
 8009aba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009abc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009abe:	e853 3f00 	ldrex	r3, [r3]
 8009ac2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009ac4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ac6:	f023 0301 	bic.w	r3, r3, #1
 8009aca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	3308      	adds	r3, #8
 8009ad4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009ad8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009adc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ade:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009ae0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009aea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e1      	bne.n	8009ab4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	3308      	adds	r3, #8
 8009af6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	3308      	adds	r3, #8
 8009b10:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b14:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b16:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b1a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e3      	bne.n	8009af0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2220      	movs	r2, #32
 8009b2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b3e:	e853 3f00 	ldrex	r3, [r3]
 8009b42:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b46:	f023 0310 	bic.w	r3, r3, #16
 8009b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b58:	65bb      	str	r3, [r7, #88]	; 0x58
 8009b5a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009b60:	e841 2300 	strex	r3, r2, [r1]
 8009b64:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d1e4      	bne.n	8009b36 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b70:	4618      	mov	r0, r3
 8009b72:	f7f9 ff59 	bl	8003a28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	4619      	mov	r1, r3
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f91c 	bl	8009dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b90:	e0fb      	b.n	8009d8a <HAL_UART_IRQHandler+0x726>
 8009b92:	bf00      	nop
 8009b94:	40020010 	.word	0x40020010
 8009b98:	40020028 	.word	0x40020028
 8009b9c:	40020040 	.word	0x40020040
 8009ba0:	40020058 	.word	0x40020058
 8009ba4:	40020070 	.word	0x40020070
 8009ba8:	40020088 	.word	0x40020088
 8009bac:	400200a0 	.word	0x400200a0
 8009bb0:	400200b8 	.word	0x400200b8
 8009bb4:	40020410 	.word	0x40020410
 8009bb8:	40020428 	.word	0x40020428
 8009bbc:	40020440 	.word	0x40020440
 8009bc0:	40020458 	.word	0x40020458
 8009bc4:	40020470 	.word	0x40020470
 8009bc8:	40020488 	.word	0x40020488
 8009bcc:	400204a0 	.word	0x400204a0
 8009bd0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bee:	b29b      	uxth	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	f000 80cc 	beq.w	8009d8e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009bf6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	f000 80c7 	beq.w	8009d8e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c22:	647b      	str	r3, [r7, #68]	; 0x44
 8009c24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c2a:	e841 2300 	strex	r3, r2, [r1]
 8009c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d1e4      	bne.n	8009c00 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c40:	e853 3f00 	ldrex	r3, [r3]
 8009c44:	623b      	str	r3, [r7, #32]
   return(result);
 8009c46:	6a3a      	ldr	r2, [r7, #32]
 8009c48:	4b54      	ldr	r3, [pc, #336]	; (8009d9c <HAL_UART_IRQHandler+0x738>)
 8009c4a:	4013      	ands	r3, r2
 8009c4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	3308      	adds	r3, #8
 8009c56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c5a:	633a      	str	r2, [r7, #48]	; 0x30
 8009c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c62:	e841 2300 	strex	r3, r2, [r1]
 8009c66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d1e3      	bne.n	8009c36 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2220      	movs	r2, #32
 8009c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f023 0310 	bic.w	r3, r3, #16
 8009c96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009ca4:	61fb      	str	r3, [r7, #28]
 8009ca6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	69b9      	ldr	r1, [r7, #24]
 8009caa:	69fa      	ldr	r2, [r7, #28]
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cb2:	697b      	ldr	r3, [r7, #20]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e4      	bne.n	8009c82 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f882 	bl	8009dc8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cc4:	e063      	b.n	8009d8e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00e      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x68c>
 8009cd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d008      	beq.n	8009cf0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ce6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 f83e 	bl	800ad6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cee:	e051      	b.n	8009d94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d014      	beq.n	8009d26 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d105      	bne.n	8009d14 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d008      	beq.n	8009d26 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d03a      	beq.n	8009d92 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d20:	6878      	ldr	r0, [r7, #4]
 8009d22:	4798      	blx	r3
    }
    return;
 8009d24:	e035      	b.n	8009d92 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d009      	beq.n	8009d46 <HAL_UART_IRQHandler+0x6e2>
 8009d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d003      	beq.n	8009d46 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 ffe8 	bl	800ad14 <UART_EndTransmit_IT>
    return;
 8009d44:	e026      	b.n	8009d94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d009      	beq.n	8009d66 <HAL_UART_IRQHandler+0x702>
 8009d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d56:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f001 f817 	bl	800ad92 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d64:	e016      	b.n	8009d94 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d010      	beq.n	8009d94 <HAL_UART_IRQHandler+0x730>
 8009d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	da0c      	bge.n	8009d94 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 ffff 	bl	800ad7e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d80:	e008      	b.n	8009d94 <HAL_UART_IRQHandler+0x730>
      return;
 8009d82:	bf00      	nop
 8009d84:	e006      	b.n	8009d94 <HAL_UART_IRQHandler+0x730>
    return;
 8009d86:	bf00      	nop
 8009d88:	e004      	b.n	8009d94 <HAL_UART_IRQHandler+0x730>
      return;
 8009d8a:	bf00      	nop
 8009d8c:	e002      	b.n	8009d94 <HAL_UART_IRQHandler+0x730>
      return;
 8009d8e:	bf00      	nop
 8009d90:	e000      	b.n	8009d94 <HAL_UART_IRQHandler+0x730>
    return;
 8009d92:	bf00      	nop
  }
}
 8009d94:	37e8      	adds	r7, #232	; 0xe8
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}
 8009d9a:	bf00      	nop
 8009d9c:	effffffe 	.word	0xeffffffe

08009da0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b083      	sub	sp, #12
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009dbc:	bf00      	nop
 8009dbe:	370c      	adds	r7, #12
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc6:	4770      	bx	lr

08009dc8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009dd4:	bf00      	nop
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009de4:	b092      	sub	sp, #72	; 0x48
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009df0:	697b      	ldr	r3, [r7, #20]
 8009df2:	689a      	ldr	r2, [r3, #8]
 8009df4:	697b      	ldr	r3, [r7, #20]
 8009df6:	691b      	ldr	r3, [r3, #16]
 8009df8:	431a      	orrs	r2, r3
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	695b      	ldr	r3, [r3, #20]
 8009dfe:	431a      	orrs	r2, r3
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	69db      	ldr	r3, [r3, #28]
 8009e04:	4313      	orrs	r3, r2
 8009e06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	4bbe      	ldr	r3, [pc, #760]	; (800a108 <UART_SetConfig+0x328>)
 8009e10:	4013      	ands	r3, r2
 8009e12:	697a      	ldr	r2, [r7, #20]
 8009e14:	6812      	ldr	r2, [r2, #0]
 8009e16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e18:	430b      	orrs	r3, r1
 8009e1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	68da      	ldr	r2, [r3, #12]
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	430a      	orrs	r2, r1
 8009e30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e32:	697b      	ldr	r3, [r7, #20]
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4ab3      	ldr	r2, [pc, #716]	; (800a10c <UART_SetConfig+0x32c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d004      	beq.n	8009e4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	6a1b      	ldr	r3, [r3, #32]
 8009e46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	689a      	ldr	r2, [r3, #8]
 8009e52:	4baf      	ldr	r3, [pc, #700]	; (800a110 <UART_SetConfig+0x330>)
 8009e54:	4013      	ands	r3, r2
 8009e56:	697a      	ldr	r2, [r7, #20]
 8009e58:	6812      	ldr	r2, [r2, #0]
 8009e5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009e5c:	430b      	orrs	r3, r1
 8009e5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e66:	f023 010f 	bic.w	r1, r3, #15
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	430a      	orrs	r2, r1
 8009e74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	4aa6      	ldr	r2, [pc, #664]	; (800a114 <UART_SetConfig+0x334>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d177      	bne.n	8009f70 <UART_SetConfig+0x190>
 8009e80:	4ba5      	ldr	r3, [pc, #660]	; (800a118 <UART_SetConfig+0x338>)
 8009e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e88:	2b28      	cmp	r3, #40	; 0x28
 8009e8a:	d86d      	bhi.n	8009f68 <UART_SetConfig+0x188>
 8009e8c:	a201      	add	r2, pc, #4	; (adr r2, 8009e94 <UART_SetConfig+0xb4>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009f39 	.word	0x08009f39
 8009e98:	08009f69 	.word	0x08009f69
 8009e9c:	08009f69 	.word	0x08009f69
 8009ea0:	08009f69 	.word	0x08009f69
 8009ea4:	08009f69 	.word	0x08009f69
 8009ea8:	08009f69 	.word	0x08009f69
 8009eac:	08009f69 	.word	0x08009f69
 8009eb0:	08009f69 	.word	0x08009f69
 8009eb4:	08009f41 	.word	0x08009f41
 8009eb8:	08009f69 	.word	0x08009f69
 8009ebc:	08009f69 	.word	0x08009f69
 8009ec0:	08009f69 	.word	0x08009f69
 8009ec4:	08009f69 	.word	0x08009f69
 8009ec8:	08009f69 	.word	0x08009f69
 8009ecc:	08009f69 	.word	0x08009f69
 8009ed0:	08009f69 	.word	0x08009f69
 8009ed4:	08009f49 	.word	0x08009f49
 8009ed8:	08009f69 	.word	0x08009f69
 8009edc:	08009f69 	.word	0x08009f69
 8009ee0:	08009f69 	.word	0x08009f69
 8009ee4:	08009f69 	.word	0x08009f69
 8009ee8:	08009f69 	.word	0x08009f69
 8009eec:	08009f69 	.word	0x08009f69
 8009ef0:	08009f69 	.word	0x08009f69
 8009ef4:	08009f51 	.word	0x08009f51
 8009ef8:	08009f69 	.word	0x08009f69
 8009efc:	08009f69 	.word	0x08009f69
 8009f00:	08009f69 	.word	0x08009f69
 8009f04:	08009f69 	.word	0x08009f69
 8009f08:	08009f69 	.word	0x08009f69
 8009f0c:	08009f69 	.word	0x08009f69
 8009f10:	08009f69 	.word	0x08009f69
 8009f14:	08009f59 	.word	0x08009f59
 8009f18:	08009f69 	.word	0x08009f69
 8009f1c:	08009f69 	.word	0x08009f69
 8009f20:	08009f69 	.word	0x08009f69
 8009f24:	08009f69 	.word	0x08009f69
 8009f28:	08009f69 	.word	0x08009f69
 8009f2c:	08009f69 	.word	0x08009f69
 8009f30:	08009f69 	.word	0x08009f69
 8009f34:	08009f61 	.word	0x08009f61
 8009f38:	2301      	movs	r3, #1
 8009f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f3e:	e222      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009f40:	2304      	movs	r3, #4
 8009f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f46:	e21e      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009f48:	2308      	movs	r3, #8
 8009f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f4e:	e21a      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009f50:	2310      	movs	r3, #16
 8009f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f56:	e216      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009f58:	2320      	movs	r3, #32
 8009f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f5e:	e212      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009f60:	2340      	movs	r3, #64	; 0x40
 8009f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f66:	e20e      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009f68:	2380      	movs	r3, #128	; 0x80
 8009f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6e:	e20a      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a69      	ldr	r2, [pc, #420]	; (800a11c <UART_SetConfig+0x33c>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d130      	bne.n	8009fdc <UART_SetConfig+0x1fc>
 8009f7a:	4b67      	ldr	r3, [pc, #412]	; (800a118 <UART_SetConfig+0x338>)
 8009f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f7e:	f003 0307 	and.w	r3, r3, #7
 8009f82:	2b05      	cmp	r3, #5
 8009f84:	d826      	bhi.n	8009fd4 <UART_SetConfig+0x1f4>
 8009f86:	a201      	add	r2, pc, #4	; (adr r2, 8009f8c <UART_SetConfig+0x1ac>)
 8009f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f8c:	08009fa5 	.word	0x08009fa5
 8009f90:	08009fad 	.word	0x08009fad
 8009f94:	08009fb5 	.word	0x08009fb5
 8009f98:	08009fbd 	.word	0x08009fbd
 8009f9c:	08009fc5 	.word	0x08009fc5
 8009fa0:	08009fcd 	.word	0x08009fcd
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009faa:	e1ec      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009fac:	2304      	movs	r3, #4
 8009fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fb2:	e1e8      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009fb4:	2308      	movs	r3, #8
 8009fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fba:	e1e4      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009fbc:	2310      	movs	r3, #16
 8009fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fc2:	e1e0      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009fc4:	2320      	movs	r3, #32
 8009fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fca:	e1dc      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009fcc:	2340      	movs	r3, #64	; 0x40
 8009fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd2:	e1d8      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009fd4:	2380      	movs	r3, #128	; 0x80
 8009fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fda:	e1d4      	b.n	800a386 <UART_SetConfig+0x5a6>
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a4f      	ldr	r2, [pc, #316]	; (800a120 <UART_SetConfig+0x340>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d130      	bne.n	800a048 <UART_SetConfig+0x268>
 8009fe6:	4b4c      	ldr	r3, [pc, #304]	; (800a118 <UART_SetConfig+0x338>)
 8009fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fea:	f003 0307 	and.w	r3, r3, #7
 8009fee:	2b05      	cmp	r3, #5
 8009ff0:	d826      	bhi.n	800a040 <UART_SetConfig+0x260>
 8009ff2:	a201      	add	r2, pc, #4	; (adr r2, 8009ff8 <UART_SetConfig+0x218>)
 8009ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ff8:	0800a011 	.word	0x0800a011
 8009ffc:	0800a019 	.word	0x0800a019
 800a000:	0800a021 	.word	0x0800a021
 800a004:	0800a029 	.word	0x0800a029
 800a008:	0800a031 	.word	0x0800a031
 800a00c:	0800a039 	.word	0x0800a039
 800a010:	2300      	movs	r3, #0
 800a012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a016:	e1b6      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a018:	2304      	movs	r3, #4
 800a01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01e:	e1b2      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a020:	2308      	movs	r3, #8
 800a022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a026:	e1ae      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a028:	2310      	movs	r3, #16
 800a02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02e:	e1aa      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a030:	2320      	movs	r3, #32
 800a032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a036:	e1a6      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a038:	2340      	movs	r3, #64	; 0x40
 800a03a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a03e:	e1a2      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a040:	2380      	movs	r3, #128	; 0x80
 800a042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a046:	e19e      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a35      	ldr	r2, [pc, #212]	; (800a124 <UART_SetConfig+0x344>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d130      	bne.n	800a0b4 <UART_SetConfig+0x2d4>
 800a052:	4b31      	ldr	r3, [pc, #196]	; (800a118 <UART_SetConfig+0x338>)
 800a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	d826      	bhi.n	800a0ac <UART_SetConfig+0x2cc>
 800a05e:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <UART_SetConfig+0x284>)
 800a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a064:	0800a07d 	.word	0x0800a07d
 800a068:	0800a085 	.word	0x0800a085
 800a06c:	0800a08d 	.word	0x0800a08d
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a09d 	.word	0x0800a09d
 800a078:	0800a0a5 	.word	0x0800a0a5
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a082:	e180      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a084:	2304      	movs	r3, #4
 800a086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a08a:	e17c      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a08c:	2308      	movs	r3, #8
 800a08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a092:	e178      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a094:	2310      	movs	r3, #16
 800a096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a09a:	e174      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a09c:	2320      	movs	r3, #32
 800a09e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0a2:	e170      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a0a4:	2340      	movs	r3, #64	; 0x40
 800a0a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0aa:	e16c      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a0ac:	2380      	movs	r3, #128	; 0x80
 800a0ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0b2:	e168      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a1b      	ldr	r2, [pc, #108]	; (800a128 <UART_SetConfig+0x348>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d142      	bne.n	800a144 <UART_SetConfig+0x364>
 800a0be:	4b16      	ldr	r3, [pc, #88]	; (800a118 <UART_SetConfig+0x338>)
 800a0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	2b05      	cmp	r3, #5
 800a0c8:	d838      	bhi.n	800a13c <UART_SetConfig+0x35c>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <UART_SetConfig+0x2f0>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0e9 	.word	0x0800a0e9
 800a0d4:	0800a0f1 	.word	0x0800a0f1
 800a0d8:	0800a0f9 	.word	0x0800a0f9
 800a0dc:	0800a101 	.word	0x0800a101
 800a0e0:	0800a12d 	.word	0x0800a12d
 800a0e4:	0800a135 	.word	0x0800a135
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ee:	e14a      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f6:	e146      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a0f8:	2308      	movs	r3, #8
 800a0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fe:	e142      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a100:	2310      	movs	r3, #16
 800a102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a106:	e13e      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a108:	cfff69f3 	.word	0xcfff69f3
 800a10c:	58000c00 	.word	0x58000c00
 800a110:	11fff4ff 	.word	0x11fff4ff
 800a114:	40011000 	.word	0x40011000
 800a118:	58024400 	.word	0x58024400
 800a11c:	40004400 	.word	0x40004400
 800a120:	40004800 	.word	0x40004800
 800a124:	40004c00 	.word	0x40004c00
 800a128:	40005000 	.word	0x40005000
 800a12c:	2320      	movs	r3, #32
 800a12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a132:	e128      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a134:	2340      	movs	r3, #64	; 0x40
 800a136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a13a:	e124      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a13c:	2380      	movs	r3, #128	; 0x80
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a142:	e120      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4acb      	ldr	r2, [pc, #812]	; (800a478 <UART_SetConfig+0x698>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d176      	bne.n	800a23c <UART_SetConfig+0x45c>
 800a14e:	4bcb      	ldr	r3, [pc, #812]	; (800a47c <UART_SetConfig+0x69c>)
 800a150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a152:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a156:	2b28      	cmp	r3, #40	; 0x28
 800a158:	d86c      	bhi.n	800a234 <UART_SetConfig+0x454>
 800a15a:	a201      	add	r2, pc, #4	; (adr r2, 800a160 <UART_SetConfig+0x380>)
 800a15c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a160:	0800a205 	.word	0x0800a205
 800a164:	0800a235 	.word	0x0800a235
 800a168:	0800a235 	.word	0x0800a235
 800a16c:	0800a235 	.word	0x0800a235
 800a170:	0800a235 	.word	0x0800a235
 800a174:	0800a235 	.word	0x0800a235
 800a178:	0800a235 	.word	0x0800a235
 800a17c:	0800a235 	.word	0x0800a235
 800a180:	0800a20d 	.word	0x0800a20d
 800a184:	0800a235 	.word	0x0800a235
 800a188:	0800a235 	.word	0x0800a235
 800a18c:	0800a235 	.word	0x0800a235
 800a190:	0800a235 	.word	0x0800a235
 800a194:	0800a235 	.word	0x0800a235
 800a198:	0800a235 	.word	0x0800a235
 800a19c:	0800a235 	.word	0x0800a235
 800a1a0:	0800a215 	.word	0x0800a215
 800a1a4:	0800a235 	.word	0x0800a235
 800a1a8:	0800a235 	.word	0x0800a235
 800a1ac:	0800a235 	.word	0x0800a235
 800a1b0:	0800a235 	.word	0x0800a235
 800a1b4:	0800a235 	.word	0x0800a235
 800a1b8:	0800a235 	.word	0x0800a235
 800a1bc:	0800a235 	.word	0x0800a235
 800a1c0:	0800a21d 	.word	0x0800a21d
 800a1c4:	0800a235 	.word	0x0800a235
 800a1c8:	0800a235 	.word	0x0800a235
 800a1cc:	0800a235 	.word	0x0800a235
 800a1d0:	0800a235 	.word	0x0800a235
 800a1d4:	0800a235 	.word	0x0800a235
 800a1d8:	0800a235 	.word	0x0800a235
 800a1dc:	0800a235 	.word	0x0800a235
 800a1e0:	0800a225 	.word	0x0800a225
 800a1e4:	0800a235 	.word	0x0800a235
 800a1e8:	0800a235 	.word	0x0800a235
 800a1ec:	0800a235 	.word	0x0800a235
 800a1f0:	0800a235 	.word	0x0800a235
 800a1f4:	0800a235 	.word	0x0800a235
 800a1f8:	0800a235 	.word	0x0800a235
 800a1fc:	0800a235 	.word	0x0800a235
 800a200:	0800a22d 	.word	0x0800a22d
 800a204:	2301      	movs	r3, #1
 800a206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a20a:	e0bc      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a20c:	2304      	movs	r3, #4
 800a20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a212:	e0b8      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a214:	2308      	movs	r3, #8
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a21a:	e0b4      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a21c:	2310      	movs	r3, #16
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a222:	e0b0      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a224:	2320      	movs	r3, #32
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a22a:	e0ac      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a22c:	2340      	movs	r3, #64	; 0x40
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a232:	e0a8      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a234:	2380      	movs	r3, #128	; 0x80
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23a:	e0a4      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a8f      	ldr	r2, [pc, #572]	; (800a480 <UART_SetConfig+0x6a0>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d130      	bne.n	800a2a8 <UART_SetConfig+0x4c8>
 800a246:	4b8d      	ldr	r3, [pc, #564]	; (800a47c <UART_SetConfig+0x69c>)
 800a248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a24a:	f003 0307 	and.w	r3, r3, #7
 800a24e:	2b05      	cmp	r3, #5
 800a250:	d826      	bhi.n	800a2a0 <UART_SetConfig+0x4c0>
 800a252:	a201      	add	r2, pc, #4	; (adr r2, 800a258 <UART_SetConfig+0x478>)
 800a254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a258:	0800a271 	.word	0x0800a271
 800a25c:	0800a279 	.word	0x0800a279
 800a260:	0800a281 	.word	0x0800a281
 800a264:	0800a289 	.word	0x0800a289
 800a268:	0800a291 	.word	0x0800a291
 800a26c:	0800a299 	.word	0x0800a299
 800a270:	2300      	movs	r3, #0
 800a272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a276:	e086      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a278:	2304      	movs	r3, #4
 800a27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a27e:	e082      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a280:	2308      	movs	r3, #8
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a286:	e07e      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a288:	2310      	movs	r3, #16
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a28e:	e07a      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a290:	2320      	movs	r3, #32
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a296:	e076      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a298:	2340      	movs	r3, #64	; 0x40
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a29e:	e072      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a2a0:	2380      	movs	r3, #128	; 0x80
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2a6:	e06e      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a75      	ldr	r2, [pc, #468]	; (800a484 <UART_SetConfig+0x6a4>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d130      	bne.n	800a314 <UART_SetConfig+0x534>
 800a2b2:	4b72      	ldr	r3, [pc, #456]	; (800a47c <UART_SetConfig+0x69c>)
 800a2b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	2b05      	cmp	r3, #5
 800a2bc:	d826      	bhi.n	800a30c <UART_SetConfig+0x52c>
 800a2be:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <UART_SetConfig+0x4e4>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a2dd 	.word	0x0800a2dd
 800a2c8:	0800a2e5 	.word	0x0800a2e5
 800a2cc:	0800a2ed 	.word	0x0800a2ed
 800a2d0:	0800a2f5 	.word	0x0800a2f5
 800a2d4:	0800a2fd 	.word	0x0800a2fd
 800a2d8:	0800a305 	.word	0x0800a305
 800a2dc:	2300      	movs	r3, #0
 800a2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2e2:	e050      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2ea:	e04c      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a2ec:	2308      	movs	r3, #8
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2f2:	e048      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a2fa:	e044      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a2fc:	2320      	movs	r3, #32
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a302:	e040      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a304:	2340      	movs	r3, #64	; 0x40
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a30a:	e03c      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a30c:	2380      	movs	r3, #128	; 0x80
 800a30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a312:	e038      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a5b      	ldr	r2, [pc, #364]	; (800a488 <UART_SetConfig+0x6a8>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d130      	bne.n	800a380 <UART_SetConfig+0x5a0>
 800a31e:	4b57      	ldr	r3, [pc, #348]	; (800a47c <UART_SetConfig+0x69c>)
 800a320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a322:	f003 0307 	and.w	r3, r3, #7
 800a326:	2b05      	cmp	r3, #5
 800a328:	d826      	bhi.n	800a378 <UART_SetConfig+0x598>
 800a32a:	a201      	add	r2, pc, #4	; (adr r2, 800a330 <UART_SetConfig+0x550>)
 800a32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a330:	0800a349 	.word	0x0800a349
 800a334:	0800a351 	.word	0x0800a351
 800a338:	0800a359 	.word	0x0800a359
 800a33c:	0800a361 	.word	0x0800a361
 800a340:	0800a369 	.word	0x0800a369
 800a344:	0800a371 	.word	0x0800a371
 800a348:	2302      	movs	r3, #2
 800a34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a34e:	e01a      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a350:	2304      	movs	r3, #4
 800a352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a356:	e016      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a358:	2308      	movs	r3, #8
 800a35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a35e:	e012      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a360:	2310      	movs	r3, #16
 800a362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a366:	e00e      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a368:	2320      	movs	r3, #32
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a36e:	e00a      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a370:	2340      	movs	r3, #64	; 0x40
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a376:	e006      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a378:	2380      	movs	r3, #128	; 0x80
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a37e:	e002      	b.n	800a386 <UART_SetConfig+0x5a6>
 800a380:	2380      	movs	r3, #128	; 0x80
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a3f      	ldr	r2, [pc, #252]	; (800a488 <UART_SetConfig+0x6a8>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	f040 80f8 	bne.w	800a582 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a392:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a396:	2b20      	cmp	r3, #32
 800a398:	dc46      	bgt.n	800a428 <UART_SetConfig+0x648>
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	f2c0 8082 	blt.w	800a4a4 <UART_SetConfig+0x6c4>
 800a3a0:	3b02      	subs	r3, #2
 800a3a2:	2b1e      	cmp	r3, #30
 800a3a4:	d87e      	bhi.n	800a4a4 <UART_SetConfig+0x6c4>
 800a3a6:	a201      	add	r2, pc, #4	; (adr r2, 800a3ac <UART_SetConfig+0x5cc>)
 800a3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ac:	0800a42f 	.word	0x0800a42f
 800a3b0:	0800a4a5 	.word	0x0800a4a5
 800a3b4:	0800a437 	.word	0x0800a437
 800a3b8:	0800a4a5 	.word	0x0800a4a5
 800a3bc:	0800a4a5 	.word	0x0800a4a5
 800a3c0:	0800a4a5 	.word	0x0800a4a5
 800a3c4:	0800a447 	.word	0x0800a447
 800a3c8:	0800a4a5 	.word	0x0800a4a5
 800a3cc:	0800a4a5 	.word	0x0800a4a5
 800a3d0:	0800a4a5 	.word	0x0800a4a5
 800a3d4:	0800a4a5 	.word	0x0800a4a5
 800a3d8:	0800a4a5 	.word	0x0800a4a5
 800a3dc:	0800a4a5 	.word	0x0800a4a5
 800a3e0:	0800a4a5 	.word	0x0800a4a5
 800a3e4:	0800a457 	.word	0x0800a457
 800a3e8:	0800a4a5 	.word	0x0800a4a5
 800a3ec:	0800a4a5 	.word	0x0800a4a5
 800a3f0:	0800a4a5 	.word	0x0800a4a5
 800a3f4:	0800a4a5 	.word	0x0800a4a5
 800a3f8:	0800a4a5 	.word	0x0800a4a5
 800a3fc:	0800a4a5 	.word	0x0800a4a5
 800a400:	0800a4a5 	.word	0x0800a4a5
 800a404:	0800a4a5 	.word	0x0800a4a5
 800a408:	0800a4a5 	.word	0x0800a4a5
 800a40c:	0800a4a5 	.word	0x0800a4a5
 800a410:	0800a4a5 	.word	0x0800a4a5
 800a414:	0800a4a5 	.word	0x0800a4a5
 800a418:	0800a4a5 	.word	0x0800a4a5
 800a41c:	0800a4a5 	.word	0x0800a4a5
 800a420:	0800a4a5 	.word	0x0800a4a5
 800a424:	0800a497 	.word	0x0800a497
 800a428:	2b40      	cmp	r3, #64	; 0x40
 800a42a:	d037      	beq.n	800a49c <UART_SetConfig+0x6bc>
 800a42c:	e03a      	b.n	800a4a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a42e:	f7fe f8c5 	bl	80085bc <HAL_RCCEx_GetD3PCLK1Freq>
 800a432:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a434:	e03c      	b.n	800a4b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a43a:	4618      	mov	r0, r3
 800a43c:	f7fe f8d4 	bl	80085e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a444:	e034      	b.n	800a4b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a446:	f107 0318 	add.w	r3, r7, #24
 800a44a:	4618      	mov	r0, r3
 800a44c:	f7fe fa20 	bl	8008890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a454:	e02c      	b.n	800a4b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a456:	4b09      	ldr	r3, [pc, #36]	; (800a47c <UART_SetConfig+0x69c>)
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f003 0320 	and.w	r3, r3, #32
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d016      	beq.n	800a490 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a462:	4b06      	ldr	r3, [pc, #24]	; (800a47c <UART_SetConfig+0x69c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	08db      	lsrs	r3, r3, #3
 800a468:	f003 0303 	and.w	r3, r3, #3
 800a46c:	4a07      	ldr	r2, [pc, #28]	; (800a48c <UART_SetConfig+0x6ac>)
 800a46e:	fa22 f303 	lsr.w	r3, r2, r3
 800a472:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a474:	e01c      	b.n	800a4b0 <UART_SetConfig+0x6d0>
 800a476:	bf00      	nop
 800a478:	40011400 	.word	0x40011400
 800a47c:	58024400 	.word	0x58024400
 800a480:	40007800 	.word	0x40007800
 800a484:	40007c00 	.word	0x40007c00
 800a488:	58000c00 	.word	0x58000c00
 800a48c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a490:	4b9d      	ldr	r3, [pc, #628]	; (800a708 <UART_SetConfig+0x928>)
 800a492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a494:	e00c      	b.n	800a4b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a496:	4b9d      	ldr	r3, [pc, #628]	; (800a70c <UART_SetConfig+0x92c>)
 800a498:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a49a:	e009      	b.n	800a4b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a49c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a4a2:	e005      	b.n	800a4b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a4ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	f000 81de 	beq.w	800a874 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	4a94      	ldr	r2, [pc, #592]	; (800a710 <UART_SetConfig+0x930>)
 800a4be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	685a      	ldr	r2, [r3, #4]
 800a4d0:	4613      	mov	r3, r2
 800a4d2:	005b      	lsls	r3, r3, #1
 800a4d4:	4413      	add	r3, r2
 800a4d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d305      	bcc.n	800a4e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	685b      	ldr	r3, [r3, #4]
 800a4e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d903      	bls.n	800a4f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a4ee:	e1c1      	b.n	800a874 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a4f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	60bb      	str	r3, [r7, #8]
 800a4f6:	60fa      	str	r2, [r7, #12]
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	4a84      	ldr	r2, [pc, #528]	; (800a710 <UART_SetConfig+0x930>)
 800a4fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a502:	b29b      	uxth	r3, r3
 800a504:	2200      	movs	r2, #0
 800a506:	603b      	str	r3, [r7, #0]
 800a508:	607a      	str	r2, [r7, #4]
 800a50a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a50e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a512:	f7f5 ff35 	bl	8000380 <__aeabi_uldivmod>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4610      	mov	r0, r2
 800a51c:	4619      	mov	r1, r3
 800a51e:	f04f 0200 	mov.w	r2, #0
 800a522:	f04f 0300 	mov.w	r3, #0
 800a526:	020b      	lsls	r3, r1, #8
 800a528:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a52c:	0202      	lsls	r2, r0, #8
 800a52e:	6979      	ldr	r1, [r7, #20]
 800a530:	6849      	ldr	r1, [r1, #4]
 800a532:	0849      	lsrs	r1, r1, #1
 800a534:	2000      	movs	r0, #0
 800a536:	460c      	mov	r4, r1
 800a538:	4605      	mov	r5, r0
 800a53a:	eb12 0804 	adds.w	r8, r2, r4
 800a53e:	eb43 0905 	adc.w	r9, r3, r5
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	469a      	mov	sl, r3
 800a54a:	4693      	mov	fp, r2
 800a54c:	4652      	mov	r2, sl
 800a54e:	465b      	mov	r3, fp
 800a550:	4640      	mov	r0, r8
 800a552:	4649      	mov	r1, r9
 800a554:	f7f5 ff14 	bl	8000380 <__aeabi_uldivmod>
 800a558:	4602      	mov	r2, r0
 800a55a:	460b      	mov	r3, r1
 800a55c:	4613      	mov	r3, r2
 800a55e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a566:	d308      	bcc.n	800a57a <UART_SetConfig+0x79a>
 800a568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a56a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a56e:	d204      	bcs.n	800a57a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a576:	60da      	str	r2, [r3, #12]
 800a578:	e17c      	b.n	800a874 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a57a:	2301      	movs	r3, #1
 800a57c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a580:	e178      	b.n	800a874 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a58a:	f040 80c5 	bne.w	800a718 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a58e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a592:	2b20      	cmp	r3, #32
 800a594:	dc48      	bgt.n	800a628 <UART_SetConfig+0x848>
 800a596:	2b00      	cmp	r3, #0
 800a598:	db7b      	blt.n	800a692 <UART_SetConfig+0x8b2>
 800a59a:	2b20      	cmp	r3, #32
 800a59c:	d879      	bhi.n	800a692 <UART_SetConfig+0x8b2>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <UART_SetConfig+0x7c4>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a62f 	.word	0x0800a62f
 800a5a8:	0800a637 	.word	0x0800a637
 800a5ac:	0800a693 	.word	0x0800a693
 800a5b0:	0800a693 	.word	0x0800a693
 800a5b4:	0800a63f 	.word	0x0800a63f
 800a5b8:	0800a693 	.word	0x0800a693
 800a5bc:	0800a693 	.word	0x0800a693
 800a5c0:	0800a693 	.word	0x0800a693
 800a5c4:	0800a64f 	.word	0x0800a64f
 800a5c8:	0800a693 	.word	0x0800a693
 800a5cc:	0800a693 	.word	0x0800a693
 800a5d0:	0800a693 	.word	0x0800a693
 800a5d4:	0800a693 	.word	0x0800a693
 800a5d8:	0800a693 	.word	0x0800a693
 800a5dc:	0800a693 	.word	0x0800a693
 800a5e0:	0800a693 	.word	0x0800a693
 800a5e4:	0800a65f 	.word	0x0800a65f
 800a5e8:	0800a693 	.word	0x0800a693
 800a5ec:	0800a693 	.word	0x0800a693
 800a5f0:	0800a693 	.word	0x0800a693
 800a5f4:	0800a693 	.word	0x0800a693
 800a5f8:	0800a693 	.word	0x0800a693
 800a5fc:	0800a693 	.word	0x0800a693
 800a600:	0800a693 	.word	0x0800a693
 800a604:	0800a693 	.word	0x0800a693
 800a608:	0800a693 	.word	0x0800a693
 800a60c:	0800a693 	.word	0x0800a693
 800a610:	0800a693 	.word	0x0800a693
 800a614:	0800a693 	.word	0x0800a693
 800a618:	0800a693 	.word	0x0800a693
 800a61c:	0800a693 	.word	0x0800a693
 800a620:	0800a693 	.word	0x0800a693
 800a624:	0800a685 	.word	0x0800a685
 800a628:	2b40      	cmp	r3, #64	; 0x40
 800a62a:	d02e      	beq.n	800a68a <UART_SetConfig+0x8aa>
 800a62c:	e031      	b.n	800a692 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a62e:	f7fd f853 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 800a632:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a634:	e033      	b.n	800a69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a636:	f7fd f865 	bl	8007704 <HAL_RCC_GetPCLK2Freq>
 800a63a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a63c:	e02f      	b.n	800a69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a63e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a642:	4618      	mov	r0, r3
 800a644:	f7fd ffd0 	bl	80085e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a64c:	e027      	b.n	800a69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a64e:	f107 0318 	add.w	r3, r7, #24
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe f91c 	bl	8008890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a65c:	e01f      	b.n	800a69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a65e:	4b2d      	ldr	r3, [pc, #180]	; (800a714 <UART_SetConfig+0x934>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 0320 	and.w	r3, r3, #32
 800a666:	2b00      	cmp	r3, #0
 800a668:	d009      	beq.n	800a67e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a66a:	4b2a      	ldr	r3, [pc, #168]	; (800a714 <UART_SetConfig+0x934>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	08db      	lsrs	r3, r3, #3
 800a670:	f003 0303 	and.w	r3, r3, #3
 800a674:	4a24      	ldr	r2, [pc, #144]	; (800a708 <UART_SetConfig+0x928>)
 800a676:	fa22 f303 	lsr.w	r3, r2, r3
 800a67a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a67c:	e00f      	b.n	800a69e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a67e:	4b22      	ldr	r3, [pc, #136]	; (800a708 <UART_SetConfig+0x928>)
 800a680:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a682:	e00c      	b.n	800a69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a684:	4b21      	ldr	r3, [pc, #132]	; (800a70c <UART_SetConfig+0x92c>)
 800a686:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a688:	e009      	b.n	800a69e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a68a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a68e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a690:	e005      	b.n	800a69e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a692:	2300      	movs	r3, #0
 800a694:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a696:	2301      	movs	r3, #1
 800a698:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a69c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a69e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	f000 80e7 	beq.w	800a874 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6aa:	4a19      	ldr	r2, [pc, #100]	; (800a710 <UART_SetConfig+0x930>)
 800a6ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6b8:	005a      	lsls	r2, r3, #1
 800a6ba:	697b      	ldr	r3, [r7, #20]
 800a6bc:	685b      	ldr	r3, [r3, #4]
 800a6be:	085b      	lsrs	r3, r3, #1
 800a6c0:	441a      	add	r2, r3
 800a6c2:	697b      	ldr	r3, [r7, #20]
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ce:	2b0f      	cmp	r3, #15
 800a6d0:	d916      	bls.n	800a700 <UART_SetConfig+0x920>
 800a6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6d8:	d212      	bcs.n	800a700 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	f023 030f 	bic.w	r3, r3, #15
 800a6e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6e6:	085b      	lsrs	r3, r3, #1
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	f003 0307 	and.w	r3, r3, #7
 800a6ee:	b29a      	uxth	r2, r3
 800a6f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a6fc:	60da      	str	r2, [r3, #12]
 800a6fe:	e0b9      	b.n	800a874 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a706:	e0b5      	b.n	800a874 <UART_SetConfig+0xa94>
 800a708:	03d09000 	.word	0x03d09000
 800a70c:	003d0900 	.word	0x003d0900
 800a710:	0800d558 	.word	0x0800d558
 800a714:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a718:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a71c:	2b20      	cmp	r3, #32
 800a71e:	dc49      	bgt.n	800a7b4 <UART_SetConfig+0x9d4>
 800a720:	2b00      	cmp	r3, #0
 800a722:	db7c      	blt.n	800a81e <UART_SetConfig+0xa3e>
 800a724:	2b20      	cmp	r3, #32
 800a726:	d87a      	bhi.n	800a81e <UART_SetConfig+0xa3e>
 800a728:	a201      	add	r2, pc, #4	; (adr r2, 800a730 <UART_SetConfig+0x950>)
 800a72a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a72e:	bf00      	nop
 800a730:	0800a7bb 	.word	0x0800a7bb
 800a734:	0800a7c3 	.word	0x0800a7c3
 800a738:	0800a81f 	.word	0x0800a81f
 800a73c:	0800a81f 	.word	0x0800a81f
 800a740:	0800a7cb 	.word	0x0800a7cb
 800a744:	0800a81f 	.word	0x0800a81f
 800a748:	0800a81f 	.word	0x0800a81f
 800a74c:	0800a81f 	.word	0x0800a81f
 800a750:	0800a7db 	.word	0x0800a7db
 800a754:	0800a81f 	.word	0x0800a81f
 800a758:	0800a81f 	.word	0x0800a81f
 800a75c:	0800a81f 	.word	0x0800a81f
 800a760:	0800a81f 	.word	0x0800a81f
 800a764:	0800a81f 	.word	0x0800a81f
 800a768:	0800a81f 	.word	0x0800a81f
 800a76c:	0800a81f 	.word	0x0800a81f
 800a770:	0800a7eb 	.word	0x0800a7eb
 800a774:	0800a81f 	.word	0x0800a81f
 800a778:	0800a81f 	.word	0x0800a81f
 800a77c:	0800a81f 	.word	0x0800a81f
 800a780:	0800a81f 	.word	0x0800a81f
 800a784:	0800a81f 	.word	0x0800a81f
 800a788:	0800a81f 	.word	0x0800a81f
 800a78c:	0800a81f 	.word	0x0800a81f
 800a790:	0800a81f 	.word	0x0800a81f
 800a794:	0800a81f 	.word	0x0800a81f
 800a798:	0800a81f 	.word	0x0800a81f
 800a79c:	0800a81f 	.word	0x0800a81f
 800a7a0:	0800a81f 	.word	0x0800a81f
 800a7a4:	0800a81f 	.word	0x0800a81f
 800a7a8:	0800a81f 	.word	0x0800a81f
 800a7ac:	0800a81f 	.word	0x0800a81f
 800a7b0:	0800a811 	.word	0x0800a811
 800a7b4:	2b40      	cmp	r3, #64	; 0x40
 800a7b6:	d02e      	beq.n	800a816 <UART_SetConfig+0xa36>
 800a7b8:	e031      	b.n	800a81e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7ba:	f7fc ff8d 	bl	80076d8 <HAL_RCC_GetPCLK1Freq>
 800a7be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a7c0:	e033      	b.n	800a82a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7c2:	f7fc ff9f 	bl	8007704 <HAL_RCC_GetPCLK2Freq>
 800a7c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a7c8:	e02f      	b.n	800a82a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fd ff0a 	bl	80085e8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7d8:	e027      	b.n	800a82a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7da:	f107 0318 	add.w	r3, r7, #24
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7fe f856 	bl	8008890 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7e4:	69fb      	ldr	r3, [r7, #28]
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7e8:	e01f      	b.n	800a82a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7ea:	4b2d      	ldr	r3, [pc, #180]	; (800a8a0 <UART_SetConfig+0xac0>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f003 0320 	and.w	r3, r3, #32
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d009      	beq.n	800a80a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7f6:	4b2a      	ldr	r3, [pc, #168]	; (800a8a0 <UART_SetConfig+0xac0>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	08db      	lsrs	r3, r3, #3
 800a7fc:	f003 0303 	and.w	r3, r3, #3
 800a800:	4a28      	ldr	r2, [pc, #160]	; (800a8a4 <UART_SetConfig+0xac4>)
 800a802:	fa22 f303 	lsr.w	r3, r2, r3
 800a806:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a808:	e00f      	b.n	800a82a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a80a:	4b26      	ldr	r3, [pc, #152]	; (800a8a4 <UART_SetConfig+0xac4>)
 800a80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a80e:	e00c      	b.n	800a82a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a810:	4b25      	ldr	r3, [pc, #148]	; (800a8a8 <UART_SetConfig+0xac8>)
 800a812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a814:	e009      	b.n	800a82a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a816:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a81a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a81c:	e005      	b.n	800a82a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a81e:	2300      	movs	r3, #0
 800a820:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a822:	2301      	movs	r3, #1
 800a824:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a828:	bf00      	nop
    }

    if (pclk != 0U)
 800a82a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d021      	beq.n	800a874 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a834:	4a1d      	ldr	r2, [pc, #116]	; (800a8ac <UART_SetConfig+0xacc>)
 800a836:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a83a:	461a      	mov	r2, r3
 800a83c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a83e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	085b      	lsrs	r3, r3, #1
 800a848:	441a      	add	r2, r3
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a852:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	2b0f      	cmp	r3, #15
 800a858:	d909      	bls.n	800a86e <UART_SetConfig+0xa8e>
 800a85a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a85c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a860:	d205      	bcs.n	800a86e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a864:	b29a      	uxth	r2, r3
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	60da      	str	r2, [r3, #12]
 800a86c:	e002      	b.n	800a874 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	2201      	movs	r2, #1
 800a878:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	2201      	movs	r2, #1
 800a880:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	2200      	movs	r2, #0
 800a888:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	2200      	movs	r2, #0
 800a88e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a890:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a894:	4618      	mov	r0, r3
 800a896:	3748      	adds	r7, #72	; 0x48
 800a898:	46bd      	mov	sp, r7
 800a89a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a89e:	bf00      	nop
 800a8a0:	58024400 	.word	0x58024400
 800a8a4:	03d09000 	.word	0x03d09000
 800a8a8:	003d0900 	.word	0x003d0900
 800a8ac:	0800d558 	.word	0x0800d558

0800a8b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8bc:	f003 0301 	and.w	r3, r3, #1
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00a      	beq.n	800a8da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	430a      	orrs	r2, r1
 800a8d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8de:	f003 0302 	and.w	r3, r3, #2
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00a      	beq.n	800a8fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	685b      	ldr	r3, [r3, #4]
 800a8ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	430a      	orrs	r2, r1
 800a8fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a900:	f003 0304 	and.w	r3, r3, #4
 800a904:	2b00      	cmp	r3, #0
 800a906:	d00a      	beq.n	800a91e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	430a      	orrs	r2, r1
 800a91c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a922:	f003 0308 	and.w	r3, r3, #8
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	685b      	ldr	r3, [r3, #4]
 800a930:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	430a      	orrs	r2, r1
 800a93e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a944:	f003 0310 	and.w	r3, r3, #16
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00a      	beq.n	800a962 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
 800a952:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	430a      	orrs	r2, r1
 800a960:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a966:	f003 0320 	and.w	r3, r3, #32
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	430a      	orrs	r2, r1
 800a982:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d01a      	beq.n	800a9c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	685b      	ldr	r3, [r3, #4]
 800a996:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9ae:	d10a      	bne.n	800a9c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	685b      	ldr	r3, [r3, #4]
 800a9b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d00a      	beq.n	800a9e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	430a      	orrs	r2, r1
 800a9e6:	605a      	str	r2, [r3, #4]
  }
}
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af02      	add	r7, sp, #8
 800a9fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2200      	movs	r2, #0
 800aa00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa04:	f7f8 fb54 	bl	80030b0 <HAL_GetTick>
 800aa08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	f003 0308 	and.w	r3, r3, #8
 800aa14:	2b08      	cmp	r3, #8
 800aa16:	d10e      	bne.n	800aa36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa1c:	9300      	str	r3, [sp, #0]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	2200      	movs	r2, #0
 800aa22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f82f 	bl	800aa8a <UART_WaitOnFlagUntilTimeout>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa32:	2303      	movs	r3, #3
 800aa34:	e025      	b.n	800aa82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	d10e      	bne.n	800aa62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 f819 	bl	800aa8a <UART_WaitOnFlagUntilTimeout>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d001      	beq.n	800aa62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa5e:	2303      	movs	r3, #3
 800aa60:	e00f      	b.n	800aa82 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2220      	movs	r2, #32
 800aa66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2220      	movs	r2, #32
 800aa6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa80:	2300      	movs	r3, #0
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b09c      	sub	sp, #112	; 0x70
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	60f8      	str	r0, [r7, #12]
 800aa92:	60b9      	str	r1, [r7, #8]
 800aa94:	603b      	str	r3, [r7, #0]
 800aa96:	4613      	mov	r3, r2
 800aa98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa9a:	e0a9      	b.n	800abf0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaa2:	f000 80a5 	beq.w	800abf0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaa6:	f7f8 fb03 	bl	80030b0 <HAL_GetTick>
 800aaaa:	4602      	mov	r2, r0
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	1ad3      	subs	r3, r2, r3
 800aab0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d302      	bcc.n	800aabc <UART_WaitOnFlagUntilTimeout+0x32>
 800aab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d140      	bne.n	800ab3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aac4:	e853 3f00 	ldrex	r3, [r3]
 800aac8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aaca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aacc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aad0:	667b      	str	r3, [r7, #100]	; 0x64
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	461a      	mov	r2, r3
 800aad8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aada:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aadc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aade:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aae0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aae2:	e841 2300 	strex	r3, r2, [r1]
 800aae6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d1e6      	bne.n	800aabc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	663b      	str	r3, [r7, #96]	; 0x60
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab0e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e5      	bne.n	800aaee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2220      	movs	r2, #32
 800ab26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2220      	movs	r2, #32
 800ab2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2200      	movs	r2, #0
 800ab36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ab3a:	2303      	movs	r3, #3
 800ab3c:	e069      	b.n	800ac12 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d051      	beq.n	800abf0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	69db      	ldr	r3, [r3, #28]
 800ab52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab5a:	d149      	bne.n	800abf0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab64:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	e853 3f00 	ldrex	r3, [r3]
 800ab72:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab76:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	461a      	mov	r2, r3
 800ab82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab84:	637b      	str	r3, [r7, #52]	; 0x34
 800ab86:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab88:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab8c:	e841 2300 	strex	r3, r2, [r1]
 800ab90:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1e6      	bne.n	800ab66 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3308      	adds	r3, #8
 800ab9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	e853 3f00 	ldrex	r3, [r3]
 800aba6:	613b      	str	r3, [r7, #16]
   return(result);
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	f023 0301 	bic.w	r3, r3, #1
 800abae:	66bb      	str	r3, [r7, #104]	; 0x68
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	3308      	adds	r3, #8
 800abb6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abb8:	623a      	str	r2, [r7, #32]
 800abba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbc:	69f9      	ldr	r1, [r7, #28]
 800abbe:	6a3a      	ldr	r2, [r7, #32]
 800abc0:	e841 2300 	strex	r3, r2, [r1]
 800abc4:	61bb      	str	r3, [r7, #24]
   return(result);
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e5      	bne.n	800ab98 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	2220      	movs	r2, #32
 800abd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2220      	movs	r2, #32
 800abd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2220      	movs	r2, #32
 800abe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2200      	movs	r2, #0
 800abe8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800abec:	2303      	movs	r3, #3
 800abee:	e010      	b.n	800ac12 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	69da      	ldr	r2, [r3, #28]
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	4013      	ands	r3, r2
 800abfa:	68ba      	ldr	r2, [r7, #8]
 800abfc:	429a      	cmp	r2, r3
 800abfe:	bf0c      	ite	eq
 800ac00:	2301      	moveq	r3, #1
 800ac02:	2300      	movne	r3, #0
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	461a      	mov	r2, r3
 800ac08:	79fb      	ldrb	r3, [r7, #7]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	f43f af46 	beq.w	800aa9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac10:	2300      	movs	r3, #0
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3770      	adds	r7, #112	; 0x70
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}
	...

0800ac1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ac1c:	b480      	push	{r7}
 800ac1e:	b095      	sub	sp, #84	; 0x54
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2c:	e853 3f00 	ldrex	r3, [r3]
 800ac30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac42:	643b      	str	r3, [r7, #64]	; 0x40
 800ac44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac4a:	e841 2300 	strex	r3, r2, [r1]
 800ac4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d1e6      	bne.n	800ac24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	3308      	adds	r3, #8
 800ac5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac5e:	6a3b      	ldr	r3, [r7, #32]
 800ac60:	e853 3f00 	ldrex	r3, [r3]
 800ac64:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac66:	69fa      	ldr	r2, [r7, #28]
 800ac68:	4b1e      	ldr	r3, [pc, #120]	; (800ace4 <UART_EndRxTransfer+0xc8>)
 800ac6a:	4013      	ands	r3, r2
 800ac6c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	3308      	adds	r3, #8
 800ac74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac76:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac7e:	e841 2300 	strex	r3, r2, [r1]
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d1e5      	bne.n	800ac56 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d118      	bne.n	800acc4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	e853 3f00 	ldrex	r3, [r3]
 800ac9e:	60bb      	str	r3, [r7, #8]
   return(result);
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	f023 0310 	bic.w	r3, r3, #16
 800aca6:	647b      	str	r3, [r7, #68]	; 0x44
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	461a      	mov	r2, r3
 800acae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acb0:	61bb      	str	r3, [r7, #24]
 800acb2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acb4:	6979      	ldr	r1, [r7, #20]
 800acb6:	69ba      	ldr	r2, [r7, #24]
 800acb8:	e841 2300 	strex	r3, r2, [r1]
 800acbc:	613b      	str	r3, [r7, #16]
   return(result);
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d1e6      	bne.n	800ac92 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	2220      	movs	r2, #32
 800acc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2200      	movs	r2, #0
 800acd0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2200      	movs	r2, #0
 800acd6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800acd8:	bf00      	nop
 800acda:	3754      	adds	r7, #84	; 0x54
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr
 800ace4:	effffffe 	.word	0xeffffffe

0800ace8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b084      	sub	sp, #16
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2200      	movs	r2, #0
 800ad02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f7ff f854 	bl	8009db4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad0c:	bf00      	nop
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b088      	sub	sp, #32
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	e853 3f00 	ldrex	r3, [r3]
 800ad28:	60bb      	str	r3, [r7, #8]
   return(result);
 800ad2a:	68bb      	ldr	r3, [r7, #8]
 800ad2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad30:	61fb      	str	r3, [r7, #28]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	61bb      	str	r3, [r7, #24]
 800ad3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad3e:	6979      	ldr	r1, [r7, #20]
 800ad40:	69ba      	ldr	r2, [r7, #24]
 800ad42:	e841 2300 	strex	r3, r2, [r1]
 800ad46:	613b      	str	r3, [r7, #16]
   return(result);
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1e6      	bne.n	800ad1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2220      	movs	r2, #32
 800ad52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7ff f81f 	bl	8009da0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ad62:	bf00      	nop
 800ad64:	3720      	adds	r7, #32
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b083      	sub	sp, #12
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr

0800ad7e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ad7e:	b480      	push	{r7}
 800ad80:	b083      	sub	sp, #12
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ad86:	bf00      	nop
 800ad88:	370c      	adds	r7, #12
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr

0800ad92 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ad92:	b480      	push	{r7}
 800ad94:	b083      	sub	sp, #12
 800ad96:	af00      	add	r7, sp, #0
 800ad98:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr

0800ada6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ada6:	b480      	push	{r7}
 800ada8:	b085      	sub	sp, #20
 800adaa:	af00      	add	r7, sp, #0
 800adac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800adb4:	2b01      	cmp	r3, #1
 800adb6:	d101      	bne.n	800adbc <HAL_UARTEx_DisableFifoMode+0x16>
 800adb8:	2302      	movs	r3, #2
 800adba:	e027      	b.n	800ae0c <HAL_UARTEx_DisableFifoMode+0x66>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2201      	movs	r2, #1
 800adc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	2224      	movs	r2, #36	; 0x24
 800adc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 0201 	bic.w	r2, r2, #1
 800ade2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800adea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	68fa      	ldr	r2, [r7, #12]
 800adf8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2220      	movs	r2, #32
 800adfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b084      	sub	sp, #16
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d101      	bne.n	800ae30 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ae2c:	2302      	movs	r3, #2
 800ae2e:	e02d      	b.n	800ae8c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2201      	movs	r2, #1
 800ae34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2224      	movs	r2, #36	; 0x24
 800ae3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	f022 0201 	bic.w	r2, r2, #1
 800ae56:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	683a      	ldr	r2, [r7, #0]
 800ae68:	430a      	orrs	r2, r1
 800ae6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f000 f84f 	bl	800af10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2220      	movs	r2, #32
 800ae7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2200      	movs	r2, #0
 800ae86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ae8a:	2300      	movs	r3, #0
}
 800ae8c:	4618      	mov	r0, r3
 800ae8e:	3710      	adds	r7, #16
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bd80      	pop	{r7, pc}

0800ae94 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d101      	bne.n	800aeac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aea8:	2302      	movs	r3, #2
 800aeaa:	e02d      	b.n	800af08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2224      	movs	r2, #36	; 0x24
 800aeb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f022 0201 	bic.w	r2, r2, #1
 800aed2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	683a      	ldr	r2, [r7, #0]
 800aee4:	430a      	orrs	r2, r1
 800aee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 f811 	bl	800af10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	68fa      	ldr	r2, [r7, #12]
 800aef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	2220      	movs	r2, #32
 800aefa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3710      	adds	r7, #16
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800af10:	b480      	push	{r7}
 800af12:	b085      	sub	sp, #20
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d108      	bne.n	800af32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2201      	movs	r2, #1
 800af24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800af30:	e031      	b.n	800af96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800af32:	2310      	movs	r3, #16
 800af34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800af36:	2310      	movs	r3, #16
 800af38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	689b      	ldr	r3, [r3, #8]
 800af40:	0e5b      	lsrs	r3, r3, #25
 800af42:	b2db      	uxtb	r3, r3
 800af44:	f003 0307 	and.w	r3, r3, #7
 800af48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	0f5b      	lsrs	r3, r3, #29
 800af52:	b2db      	uxtb	r3, r3
 800af54:	f003 0307 	and.w	r3, r3, #7
 800af58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af5a:	7bbb      	ldrb	r3, [r7, #14]
 800af5c:	7b3a      	ldrb	r2, [r7, #12]
 800af5e:	4911      	ldr	r1, [pc, #68]	; (800afa4 <UARTEx_SetNbDataToProcess+0x94>)
 800af60:	5c8a      	ldrb	r2, [r1, r2]
 800af62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800af66:	7b3a      	ldrb	r2, [r7, #12]
 800af68:	490f      	ldr	r1, [pc, #60]	; (800afa8 <UARTEx_SetNbDataToProcess+0x98>)
 800af6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800af6c:	fb93 f3f2 	sdiv	r3, r3, r2
 800af70:	b29a      	uxth	r2, r3
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af78:	7bfb      	ldrb	r3, [r7, #15]
 800af7a:	7b7a      	ldrb	r2, [r7, #13]
 800af7c:	4909      	ldr	r1, [pc, #36]	; (800afa4 <UARTEx_SetNbDataToProcess+0x94>)
 800af7e:	5c8a      	ldrb	r2, [r1, r2]
 800af80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800af84:	7b7a      	ldrb	r2, [r7, #13]
 800af86:	4908      	ldr	r1, [pc, #32]	; (800afa8 <UARTEx_SetNbDataToProcess+0x98>)
 800af88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800af8a:	fb93 f3f2 	sdiv	r3, r3, r2
 800af8e:	b29a      	uxth	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800af96:	bf00      	nop
 800af98:	3714      	adds	r7, #20
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	0800d570 	.word	0x0800d570
 800afa8:	0800d578 	.word	0x0800d578

0800afac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afac:	b084      	sub	sp, #16
 800afae:	b580      	push	{r7, lr}
 800afb0:	b084      	sub	sp, #16
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	f107 001c 	add.w	r0, r7, #28
 800afba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d120      	bne.n	800b006 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	68da      	ldr	r2, [r3, #12]
 800afd4:	4b2a      	ldr	r3, [pc, #168]	; (800b080 <USB_CoreInit+0xd4>)
 800afd6:	4013      	ands	r3, r2
 800afd8:	687a      	ldr	r2, [r7, #4]
 800afda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800afe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afea:	2b01      	cmp	r3, #1
 800afec:	d105      	bne.n	800affa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	68db      	ldr	r3, [r3, #12]
 800aff2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 faac 	bl	800b558 <USB_CoreReset>
 800b000:	4603      	mov	r3, r0
 800b002:	73fb      	strb	r3, [r7, #15]
 800b004:	e01a      	b.n	800b03c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	68db      	ldr	r3, [r3, #12]
 800b00a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 faa0 	bl	800b558 <USB_CoreReset>
 800b018:	4603      	mov	r3, r0
 800b01a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b01c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	639a      	str	r2, [r3, #56]	; 0x38
 800b02e:	e005      	b.n	800b03c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b034:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d116      	bne.n	800b070 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b046:	b29a      	uxth	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b050:	4b0c      	ldr	r3, [pc, #48]	; (800b084 <USB_CoreInit+0xd8>)
 800b052:	4313      	orrs	r3, r2
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	f043 0206 	orr.w	r2, r3, #6
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	689b      	ldr	r3, [r3, #8]
 800b068:	f043 0220 	orr.w	r2, r3, #32
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b070:	7bfb      	ldrb	r3, [r7, #15]
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b07c:	b004      	add	sp, #16
 800b07e:	4770      	bx	lr
 800b080:	ffbdffbf 	.word	0xffbdffbf
 800b084:	03ee0000 	.word	0x03ee0000

0800b088 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b088:	b480      	push	{r7}
 800b08a:	b083      	sub	sp, #12
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	f023 0201 	bic.w	r2, r3, #1
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b09c:	2300      	movs	r3, #0
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	370c      	adds	r7, #12
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr

0800b0aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b084      	sub	sp, #16
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	6078      	str	r0, [r7, #4]
 800b0b2:	460b      	mov	r3, r1
 800b0b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	68db      	ldr	r3, [r3, #12]
 800b0be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b0c6:	78fb      	ldrb	r3, [r7, #3]
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d115      	bne.n	800b0f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	68db      	ldr	r3, [r3, #12]
 800b0d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b0d8:	2001      	movs	r0, #1
 800b0da:	f7f7 fff5 	bl	80030c8 <HAL_Delay>
      ms++;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 fa29 	bl	800b53c <USB_GetMode>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d01e      	beq.n	800b12e <USB_SetCurrentMode+0x84>
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	2b31      	cmp	r3, #49	; 0x31
 800b0f4:	d9f0      	bls.n	800b0d8 <USB_SetCurrentMode+0x2e>
 800b0f6:	e01a      	b.n	800b12e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b0f8:	78fb      	ldrb	r3, [r7, #3]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d115      	bne.n	800b12a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b10a:	2001      	movs	r0, #1
 800b10c:	f7f7 ffdc 	bl	80030c8 <HAL_Delay>
      ms++;
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	3301      	adds	r3, #1
 800b114:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fa10 	bl	800b53c <USB_GetMode>
 800b11c:	4603      	mov	r3, r0
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d005      	beq.n	800b12e <USB_SetCurrentMode+0x84>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2b31      	cmp	r3, #49	; 0x31
 800b126:	d9f0      	bls.n	800b10a <USB_SetCurrentMode+0x60>
 800b128:	e001      	b.n	800b12e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e005      	b.n	800b13a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2b32      	cmp	r3, #50	; 0x32
 800b132:	d101      	bne.n	800b138 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b134:	2301      	movs	r3, #1
 800b136:	e000      	b.n	800b13a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b138:	2300      	movs	r3, #0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	3710      	adds	r7, #16
 800b13e:	46bd      	mov	sp, r7
 800b140:	bd80      	pop	{r7, pc}
	...

0800b144 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b144:	b084      	sub	sp, #16
 800b146:	b580      	push	{r7, lr}
 800b148:	b086      	sub	sp, #24
 800b14a:	af00      	add	r7, sp, #0
 800b14c:	6078      	str	r0, [r7, #4]
 800b14e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b156:	2300      	movs	r3, #0
 800b158:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b15e:	2300      	movs	r3, #0
 800b160:	613b      	str	r3, [r7, #16]
 800b162:	e009      	b.n	800b178 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	693b      	ldr	r3, [r7, #16]
 800b168:	3340      	adds	r3, #64	; 0x40
 800b16a:	009b      	lsls	r3, r3, #2
 800b16c:	4413      	add	r3, r2
 800b16e:	2200      	movs	r2, #0
 800b170:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	3301      	adds	r3, #1
 800b176:	613b      	str	r3, [r7, #16]
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	2b0e      	cmp	r3, #14
 800b17c:	d9f2      	bls.n	800b164 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b17e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b180:	2b00      	cmp	r3, #0
 800b182:	d11c      	bne.n	800b1be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b18a:	685b      	ldr	r3, [r3, #4]
 800b18c:	68fa      	ldr	r2, [r7, #12]
 800b18e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b192:	f043 0302 	orr.w	r3, r3, #2
 800b196:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b19c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	e005      	b.n	800b1ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1d0:	461a      	mov	r2, r3
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1dc:	4619      	mov	r1, r3
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	680b      	ldr	r3, [r1, #0]
 800b1e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d10c      	bne.n	800b20a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d104      	bne.n	800b200 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b1f6:	2100      	movs	r1, #0
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f000 f965 	bl	800b4c8 <USB_SetDevSpeed>
 800b1fe:	e008      	b.n	800b212 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b200:	2101      	movs	r1, #1
 800b202:	6878      	ldr	r0, [r7, #4]
 800b204:	f000 f960 	bl	800b4c8 <USB_SetDevSpeed>
 800b208:	e003      	b.n	800b212 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b20a:	2103      	movs	r1, #3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f95b 	bl	800b4c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b212:	2110      	movs	r1, #16
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f8f3 	bl	800b400 <USB_FlushTxFifo>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f91f 	bl	800b468 <USB_FlushRxFifo>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23a:	461a      	mov	r2, r3
 800b23c:	2300      	movs	r3, #0
 800b23e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b246:	461a      	mov	r2, r3
 800b248:	2300      	movs	r3, #0
 800b24a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b252:	461a      	mov	r2, r3
 800b254:	2300      	movs	r3, #0
 800b256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b258:	2300      	movs	r3, #0
 800b25a:	613b      	str	r3, [r7, #16]
 800b25c:	e043      	b.n	800b2e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	015a      	lsls	r2, r3, #5
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	4413      	add	r3, r2
 800b266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b274:	d118      	bne.n	800b2a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4413      	add	r3, r2
 800b284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b288:	461a      	mov	r2, r3
 800b28a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	e013      	b.n	800b2ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	e008      	b.n	800b2ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	015a      	lsls	r2, r3, #5
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	015a      	lsls	r2, r3, #5
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	015a      	lsls	r2, r3, #5
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d8:	461a      	mov	r2, r3
 800b2da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	613b      	str	r3, [r7, #16]
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d3b7      	bcc.n	800b25e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	613b      	str	r3, [r7, #16]
 800b2f2:	e043      	b.n	800b37c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	015a      	lsls	r2, r3, #5
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b30a:	d118      	bne.n	800b33e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b31e:	461a      	mov	r2, r3
 800b320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	e013      	b.n	800b350 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b334:	461a      	mov	r2, r3
 800b336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	e008      	b.n	800b350 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34a:	461a      	mov	r2, r3
 800b34c:	2300      	movs	r3, #0
 800b34e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4413      	add	r3, r2
 800b358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b35c:	461a      	mov	r2, r3
 800b35e:	2300      	movs	r3, #0
 800b360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36e:	461a      	mov	r2, r3
 800b370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3301      	adds	r3, #1
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	429a      	cmp	r2, r3
 800b382:	d3b7      	bcc.n	800b2f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b3a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d105      	bne.n	800b3b8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	f043 0210 	orr.w	r2, r3, #16
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699a      	ldr	r2, [r3, #24]
 800b3bc:	4b0e      	ldr	r3, [pc, #56]	; (800b3f8 <USB_DevInit+0x2b4>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d005      	beq.n	800b3d6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	f043 0208 	orr.w	r2, r3, #8
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d105      	bne.n	800b3e8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	699a      	ldr	r2, [r3, #24]
 800b3e0:	4b06      	ldr	r3, [pc, #24]	; (800b3fc <USB_DevInit+0x2b8>)
 800b3e2:	4313      	orrs	r3, r2
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	3718      	adds	r7, #24
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3f4:	b004      	add	sp, #16
 800b3f6:	4770      	bx	lr
 800b3f8:	803c3800 	.word	0x803c3800
 800b3fc:	40000004 	.word	0x40000004

0800b400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3301      	adds	r3, #1
 800b412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4a13      	ldr	r2, [pc, #76]	; (800b464 <USB_FlushTxFifo+0x64>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d901      	bls.n	800b420 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e01b      	b.n	800b458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	daf2      	bge.n	800b40e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	019b      	lsls	r3, r3, #6
 800b430:	f043 0220 	orr.w	r2, r3, #32
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3301      	adds	r3, #1
 800b43c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4a08      	ldr	r2, [pc, #32]	; (800b464 <USB_FlushTxFifo+0x64>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d901      	bls.n	800b44a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e006      	b.n	800b458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	f003 0320 	and.w	r3, r3, #32
 800b452:	2b20      	cmp	r3, #32
 800b454:	d0f0      	beq.n	800b438 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	00030d40 	.word	0x00030d40

0800b468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	4a11      	ldr	r2, [pc, #68]	; (800b4c4 <USB_FlushRxFifo+0x5c>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d901      	bls.n	800b486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e018      	b.n	800b4b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	daf2      	bge.n	800b474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2210      	movs	r2, #16
 800b496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3301      	adds	r3, #1
 800b49c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	4a08      	ldr	r2, [pc, #32]	; (800b4c4 <USB_FlushRxFifo+0x5c>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d901      	bls.n	800b4aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e006      	b.n	800b4b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f003 0310 	and.w	r3, r3, #16
 800b4b2:	2b10      	cmp	r3, #16
 800b4b4:	d0f0      	beq.n	800b498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	00030d40 	.word	0x00030d40

0800b4c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	78fb      	ldrb	r3, [r7, #3]
 800b4e2:	68f9      	ldr	r1, [r7, #12]
 800b4e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b085      	sub	sp, #20
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b514:	f023 0303 	bic.w	r3, r3, #3
 800b518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b528:	f043 0302 	orr.w	r3, r3, #2
 800b52c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	f003 0301 	and.w	r3, r3, #1
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b560:	2300      	movs	r3, #0
 800b562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3301      	adds	r3, #1
 800b568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <USB_CoreReset+0x64>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d901      	bls.n	800b576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e01b      	b.n	800b5ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	daf2      	bge.n	800b564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f043 0201 	orr.w	r2, r3, #1
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3301      	adds	r3, #1
 800b592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4a09      	ldr	r2, [pc, #36]	; (800b5bc <USB_CoreReset+0x64>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d901      	bls.n	800b5a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e006      	b.n	800b5ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d0f0      	beq.n	800b58e <USB_CoreReset+0x36>

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	00030d40 	.word	0x00030d40

0800b5c0 <__errno>:
 800b5c0:	4b01      	ldr	r3, [pc, #4]	; (800b5c8 <__errno+0x8>)
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	24000020 	.word	0x24000020

0800b5cc <__libc_init_array>:
 800b5cc:	b570      	push	{r4, r5, r6, lr}
 800b5ce:	4d0d      	ldr	r5, [pc, #52]	; (800b604 <__libc_init_array+0x38>)
 800b5d0:	4c0d      	ldr	r4, [pc, #52]	; (800b608 <__libc_init_array+0x3c>)
 800b5d2:	1b64      	subs	r4, r4, r5
 800b5d4:	10a4      	asrs	r4, r4, #2
 800b5d6:	2600      	movs	r6, #0
 800b5d8:	42a6      	cmp	r6, r4
 800b5da:	d109      	bne.n	800b5f0 <__libc_init_array+0x24>
 800b5dc:	4d0b      	ldr	r5, [pc, #44]	; (800b60c <__libc_init_array+0x40>)
 800b5de:	4c0c      	ldr	r4, [pc, #48]	; (800b610 <__libc_init_array+0x44>)
 800b5e0:	f000 fc8e 	bl	800bf00 <_init>
 800b5e4:	1b64      	subs	r4, r4, r5
 800b5e6:	10a4      	asrs	r4, r4, #2
 800b5e8:	2600      	movs	r6, #0
 800b5ea:	42a6      	cmp	r6, r4
 800b5ec:	d105      	bne.n	800b5fa <__libc_init_array+0x2e>
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5f4:	4798      	blx	r3
 800b5f6:	3601      	adds	r6, #1
 800b5f8:	e7ee      	b.n	800b5d8 <__libc_init_array+0xc>
 800b5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5fe:	4798      	blx	r3
 800b600:	3601      	adds	r6, #1
 800b602:	e7f2      	b.n	800b5ea <__libc_init_array+0x1e>
 800b604:	0800d5bc 	.word	0x0800d5bc
 800b608:	0800d5bc 	.word	0x0800d5bc
 800b60c:	0800d5bc 	.word	0x0800d5bc
 800b610:	0800d5c0 	.word	0x0800d5c0

0800b614 <memset>:
 800b614:	4402      	add	r2, r0
 800b616:	4603      	mov	r3, r0
 800b618:	4293      	cmp	r3, r2
 800b61a:	d100      	bne.n	800b61e <memset+0xa>
 800b61c:	4770      	bx	lr
 800b61e:	f803 1b01 	strb.w	r1, [r3], #1
 800b622:	e7f9      	b.n	800b618 <memset+0x4>

0800b624 <_free_r>:
 800b624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b626:	2900      	cmp	r1, #0
 800b628:	d044      	beq.n	800b6b4 <_free_r+0x90>
 800b62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62e:	9001      	str	r0, [sp, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	f1a1 0404 	sub.w	r4, r1, #4
 800b636:	bfb8      	it	lt
 800b638:	18e4      	addlt	r4, r4, r3
 800b63a:	f000 f903 	bl	800b844 <__malloc_lock>
 800b63e:	4a1e      	ldr	r2, [pc, #120]	; (800b6b8 <_free_r+0x94>)
 800b640:	9801      	ldr	r0, [sp, #4]
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	b933      	cbnz	r3, 800b654 <_free_r+0x30>
 800b646:	6063      	str	r3, [r4, #4]
 800b648:	6014      	str	r4, [r2, #0]
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b650:	f000 b8fe 	b.w	800b850 <__malloc_unlock>
 800b654:	42a3      	cmp	r3, r4
 800b656:	d908      	bls.n	800b66a <_free_r+0x46>
 800b658:	6825      	ldr	r5, [r4, #0]
 800b65a:	1961      	adds	r1, r4, r5
 800b65c:	428b      	cmp	r3, r1
 800b65e:	bf01      	itttt	eq
 800b660:	6819      	ldreq	r1, [r3, #0]
 800b662:	685b      	ldreq	r3, [r3, #4]
 800b664:	1949      	addeq	r1, r1, r5
 800b666:	6021      	streq	r1, [r4, #0]
 800b668:	e7ed      	b.n	800b646 <_free_r+0x22>
 800b66a:	461a      	mov	r2, r3
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	b10b      	cbz	r3, 800b674 <_free_r+0x50>
 800b670:	42a3      	cmp	r3, r4
 800b672:	d9fa      	bls.n	800b66a <_free_r+0x46>
 800b674:	6811      	ldr	r1, [r2, #0]
 800b676:	1855      	adds	r5, r2, r1
 800b678:	42a5      	cmp	r5, r4
 800b67a:	d10b      	bne.n	800b694 <_free_r+0x70>
 800b67c:	6824      	ldr	r4, [r4, #0]
 800b67e:	4421      	add	r1, r4
 800b680:	1854      	adds	r4, r2, r1
 800b682:	42a3      	cmp	r3, r4
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	d1e0      	bne.n	800b64a <_free_r+0x26>
 800b688:	681c      	ldr	r4, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	4421      	add	r1, r4
 800b690:	6011      	str	r1, [r2, #0]
 800b692:	e7da      	b.n	800b64a <_free_r+0x26>
 800b694:	d902      	bls.n	800b69c <_free_r+0x78>
 800b696:	230c      	movs	r3, #12
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	e7d6      	b.n	800b64a <_free_r+0x26>
 800b69c:	6825      	ldr	r5, [r4, #0]
 800b69e:	1961      	adds	r1, r4, r5
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	bf04      	itt	eq
 800b6a4:	6819      	ldreq	r1, [r3, #0]
 800b6a6:	685b      	ldreq	r3, [r3, #4]
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	bf04      	itt	eq
 800b6ac:	1949      	addeq	r1, r1, r5
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	6054      	str	r4, [r2, #4]
 800b6b2:	e7ca      	b.n	800b64a <_free_r+0x26>
 800b6b4:	b003      	add	sp, #12
 800b6b6:	bd30      	pop	{r4, r5, pc}
 800b6b8:	24000db4 	.word	0x24000db4

0800b6bc <sbrk_aligned>:
 800b6bc:	b570      	push	{r4, r5, r6, lr}
 800b6be:	4e0e      	ldr	r6, [pc, #56]	; (800b6f8 <sbrk_aligned+0x3c>)
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	6831      	ldr	r1, [r6, #0]
 800b6c4:	4605      	mov	r5, r0
 800b6c6:	b911      	cbnz	r1, 800b6ce <sbrk_aligned+0x12>
 800b6c8:	f000 f88c 	bl	800b7e4 <_sbrk_r>
 800b6cc:	6030      	str	r0, [r6, #0]
 800b6ce:	4621      	mov	r1, r4
 800b6d0:	4628      	mov	r0, r5
 800b6d2:	f000 f887 	bl	800b7e4 <_sbrk_r>
 800b6d6:	1c43      	adds	r3, r0, #1
 800b6d8:	d00a      	beq.n	800b6f0 <sbrk_aligned+0x34>
 800b6da:	1cc4      	adds	r4, r0, #3
 800b6dc:	f024 0403 	bic.w	r4, r4, #3
 800b6e0:	42a0      	cmp	r0, r4
 800b6e2:	d007      	beq.n	800b6f4 <sbrk_aligned+0x38>
 800b6e4:	1a21      	subs	r1, r4, r0
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	f000 f87c 	bl	800b7e4 <_sbrk_r>
 800b6ec:	3001      	adds	r0, #1
 800b6ee:	d101      	bne.n	800b6f4 <sbrk_aligned+0x38>
 800b6f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	bd70      	pop	{r4, r5, r6, pc}
 800b6f8:	24000db8 	.word	0x24000db8

0800b6fc <_malloc_r>:
 800b6fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b700:	1ccd      	adds	r5, r1, #3
 800b702:	f025 0503 	bic.w	r5, r5, #3
 800b706:	3508      	adds	r5, #8
 800b708:	2d0c      	cmp	r5, #12
 800b70a:	bf38      	it	cc
 800b70c:	250c      	movcc	r5, #12
 800b70e:	2d00      	cmp	r5, #0
 800b710:	4607      	mov	r7, r0
 800b712:	db01      	blt.n	800b718 <_malloc_r+0x1c>
 800b714:	42a9      	cmp	r1, r5
 800b716:	d905      	bls.n	800b724 <_malloc_r+0x28>
 800b718:	230c      	movs	r3, #12
 800b71a:	603b      	str	r3, [r7, #0]
 800b71c:	2600      	movs	r6, #0
 800b71e:	4630      	mov	r0, r6
 800b720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b724:	4e2e      	ldr	r6, [pc, #184]	; (800b7e0 <_malloc_r+0xe4>)
 800b726:	f000 f88d 	bl	800b844 <__malloc_lock>
 800b72a:	6833      	ldr	r3, [r6, #0]
 800b72c:	461c      	mov	r4, r3
 800b72e:	bb34      	cbnz	r4, 800b77e <_malloc_r+0x82>
 800b730:	4629      	mov	r1, r5
 800b732:	4638      	mov	r0, r7
 800b734:	f7ff ffc2 	bl	800b6bc <sbrk_aligned>
 800b738:	1c43      	adds	r3, r0, #1
 800b73a:	4604      	mov	r4, r0
 800b73c:	d14d      	bne.n	800b7da <_malloc_r+0xde>
 800b73e:	6834      	ldr	r4, [r6, #0]
 800b740:	4626      	mov	r6, r4
 800b742:	2e00      	cmp	r6, #0
 800b744:	d140      	bne.n	800b7c8 <_malloc_r+0xcc>
 800b746:	6823      	ldr	r3, [r4, #0]
 800b748:	4631      	mov	r1, r6
 800b74a:	4638      	mov	r0, r7
 800b74c:	eb04 0803 	add.w	r8, r4, r3
 800b750:	f000 f848 	bl	800b7e4 <_sbrk_r>
 800b754:	4580      	cmp	r8, r0
 800b756:	d13a      	bne.n	800b7ce <_malloc_r+0xd2>
 800b758:	6821      	ldr	r1, [r4, #0]
 800b75a:	3503      	adds	r5, #3
 800b75c:	1a6d      	subs	r5, r5, r1
 800b75e:	f025 0503 	bic.w	r5, r5, #3
 800b762:	3508      	adds	r5, #8
 800b764:	2d0c      	cmp	r5, #12
 800b766:	bf38      	it	cc
 800b768:	250c      	movcc	r5, #12
 800b76a:	4629      	mov	r1, r5
 800b76c:	4638      	mov	r0, r7
 800b76e:	f7ff ffa5 	bl	800b6bc <sbrk_aligned>
 800b772:	3001      	adds	r0, #1
 800b774:	d02b      	beq.n	800b7ce <_malloc_r+0xd2>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	442b      	add	r3, r5
 800b77a:	6023      	str	r3, [r4, #0]
 800b77c:	e00e      	b.n	800b79c <_malloc_r+0xa0>
 800b77e:	6822      	ldr	r2, [r4, #0]
 800b780:	1b52      	subs	r2, r2, r5
 800b782:	d41e      	bmi.n	800b7c2 <_malloc_r+0xc6>
 800b784:	2a0b      	cmp	r2, #11
 800b786:	d916      	bls.n	800b7b6 <_malloc_r+0xba>
 800b788:	1961      	adds	r1, r4, r5
 800b78a:	42a3      	cmp	r3, r4
 800b78c:	6025      	str	r5, [r4, #0]
 800b78e:	bf18      	it	ne
 800b790:	6059      	strne	r1, [r3, #4]
 800b792:	6863      	ldr	r3, [r4, #4]
 800b794:	bf08      	it	eq
 800b796:	6031      	streq	r1, [r6, #0]
 800b798:	5162      	str	r2, [r4, r5]
 800b79a:	604b      	str	r3, [r1, #4]
 800b79c:	4638      	mov	r0, r7
 800b79e:	f104 060b 	add.w	r6, r4, #11
 800b7a2:	f000 f855 	bl	800b850 <__malloc_unlock>
 800b7a6:	f026 0607 	bic.w	r6, r6, #7
 800b7aa:	1d23      	adds	r3, r4, #4
 800b7ac:	1af2      	subs	r2, r6, r3
 800b7ae:	d0b6      	beq.n	800b71e <_malloc_r+0x22>
 800b7b0:	1b9b      	subs	r3, r3, r6
 800b7b2:	50a3      	str	r3, [r4, r2]
 800b7b4:	e7b3      	b.n	800b71e <_malloc_r+0x22>
 800b7b6:	6862      	ldr	r2, [r4, #4]
 800b7b8:	42a3      	cmp	r3, r4
 800b7ba:	bf0c      	ite	eq
 800b7bc:	6032      	streq	r2, [r6, #0]
 800b7be:	605a      	strne	r2, [r3, #4]
 800b7c0:	e7ec      	b.n	800b79c <_malloc_r+0xa0>
 800b7c2:	4623      	mov	r3, r4
 800b7c4:	6864      	ldr	r4, [r4, #4]
 800b7c6:	e7b2      	b.n	800b72e <_malloc_r+0x32>
 800b7c8:	4634      	mov	r4, r6
 800b7ca:	6876      	ldr	r6, [r6, #4]
 800b7cc:	e7b9      	b.n	800b742 <_malloc_r+0x46>
 800b7ce:	230c      	movs	r3, #12
 800b7d0:	603b      	str	r3, [r7, #0]
 800b7d2:	4638      	mov	r0, r7
 800b7d4:	f000 f83c 	bl	800b850 <__malloc_unlock>
 800b7d8:	e7a1      	b.n	800b71e <_malloc_r+0x22>
 800b7da:	6025      	str	r5, [r4, #0]
 800b7dc:	e7de      	b.n	800b79c <_malloc_r+0xa0>
 800b7de:	bf00      	nop
 800b7e0:	24000db4 	.word	0x24000db4

0800b7e4 <_sbrk_r>:
 800b7e4:	b538      	push	{r3, r4, r5, lr}
 800b7e6:	4d06      	ldr	r5, [pc, #24]	; (800b800 <_sbrk_r+0x1c>)
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	4604      	mov	r4, r0
 800b7ec:	4608      	mov	r0, r1
 800b7ee:	602b      	str	r3, [r5, #0]
 800b7f0:	f7f7 fb78 	bl	8002ee4 <_sbrk>
 800b7f4:	1c43      	adds	r3, r0, #1
 800b7f6:	d102      	bne.n	800b7fe <_sbrk_r+0x1a>
 800b7f8:	682b      	ldr	r3, [r5, #0]
 800b7fa:	b103      	cbz	r3, 800b7fe <_sbrk_r+0x1a>
 800b7fc:	6023      	str	r3, [r4, #0]
 800b7fe:	bd38      	pop	{r3, r4, r5, pc}
 800b800:	24000dbc 	.word	0x24000dbc

0800b804 <siprintf>:
 800b804:	b40e      	push	{r1, r2, r3}
 800b806:	b500      	push	{lr}
 800b808:	b09c      	sub	sp, #112	; 0x70
 800b80a:	ab1d      	add	r3, sp, #116	; 0x74
 800b80c:	9002      	str	r0, [sp, #8]
 800b80e:	9006      	str	r0, [sp, #24]
 800b810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b814:	4809      	ldr	r0, [pc, #36]	; (800b83c <siprintf+0x38>)
 800b816:	9107      	str	r1, [sp, #28]
 800b818:	9104      	str	r1, [sp, #16]
 800b81a:	4909      	ldr	r1, [pc, #36]	; (800b840 <siprintf+0x3c>)
 800b81c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b820:	9105      	str	r1, [sp, #20]
 800b822:	6800      	ldr	r0, [r0, #0]
 800b824:	9301      	str	r3, [sp, #4]
 800b826:	a902      	add	r1, sp, #8
 800b828:	f000 f874 	bl	800b914 <_svfiprintf_r>
 800b82c:	9b02      	ldr	r3, [sp, #8]
 800b82e:	2200      	movs	r2, #0
 800b830:	701a      	strb	r2, [r3, #0]
 800b832:	b01c      	add	sp, #112	; 0x70
 800b834:	f85d eb04 	ldr.w	lr, [sp], #4
 800b838:	b003      	add	sp, #12
 800b83a:	4770      	bx	lr
 800b83c:	24000020 	.word	0x24000020
 800b840:	ffff0208 	.word	0xffff0208

0800b844 <__malloc_lock>:
 800b844:	4801      	ldr	r0, [pc, #4]	; (800b84c <__malloc_lock+0x8>)
 800b846:	f000 baf9 	b.w	800be3c <__retarget_lock_acquire_recursive>
 800b84a:	bf00      	nop
 800b84c:	24000dc0 	.word	0x24000dc0

0800b850 <__malloc_unlock>:
 800b850:	4801      	ldr	r0, [pc, #4]	; (800b858 <__malloc_unlock+0x8>)
 800b852:	f000 baf4 	b.w	800be3e <__retarget_lock_release_recursive>
 800b856:	bf00      	nop
 800b858:	24000dc0 	.word	0x24000dc0

0800b85c <__ssputs_r>:
 800b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	688e      	ldr	r6, [r1, #8]
 800b862:	429e      	cmp	r6, r3
 800b864:	4682      	mov	sl, r0
 800b866:	460c      	mov	r4, r1
 800b868:	4690      	mov	r8, r2
 800b86a:	461f      	mov	r7, r3
 800b86c:	d838      	bhi.n	800b8e0 <__ssputs_r+0x84>
 800b86e:	898a      	ldrh	r2, [r1, #12]
 800b870:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b874:	d032      	beq.n	800b8dc <__ssputs_r+0x80>
 800b876:	6825      	ldr	r5, [r4, #0]
 800b878:	6909      	ldr	r1, [r1, #16]
 800b87a:	eba5 0901 	sub.w	r9, r5, r1
 800b87e:	6965      	ldr	r5, [r4, #20]
 800b880:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b888:	3301      	adds	r3, #1
 800b88a:	444b      	add	r3, r9
 800b88c:	106d      	asrs	r5, r5, #1
 800b88e:	429d      	cmp	r5, r3
 800b890:	bf38      	it	cc
 800b892:	461d      	movcc	r5, r3
 800b894:	0553      	lsls	r3, r2, #21
 800b896:	d531      	bpl.n	800b8fc <__ssputs_r+0xa0>
 800b898:	4629      	mov	r1, r5
 800b89a:	f7ff ff2f 	bl	800b6fc <_malloc_r>
 800b89e:	4606      	mov	r6, r0
 800b8a0:	b950      	cbnz	r0, 800b8b8 <__ssputs_r+0x5c>
 800b8a2:	230c      	movs	r3, #12
 800b8a4:	f8ca 3000 	str.w	r3, [sl]
 800b8a8:	89a3      	ldrh	r3, [r4, #12]
 800b8aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8ae:	81a3      	strh	r3, [r4, #12]
 800b8b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b8:	6921      	ldr	r1, [r4, #16]
 800b8ba:	464a      	mov	r2, r9
 800b8bc:	f000 fac0 	bl	800be40 <memcpy>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	6126      	str	r6, [r4, #16]
 800b8ce:	6165      	str	r5, [r4, #20]
 800b8d0:	444e      	add	r6, r9
 800b8d2:	eba5 0509 	sub.w	r5, r5, r9
 800b8d6:	6026      	str	r6, [r4, #0]
 800b8d8:	60a5      	str	r5, [r4, #8]
 800b8da:	463e      	mov	r6, r7
 800b8dc:	42be      	cmp	r6, r7
 800b8de:	d900      	bls.n	800b8e2 <__ssputs_r+0x86>
 800b8e0:	463e      	mov	r6, r7
 800b8e2:	6820      	ldr	r0, [r4, #0]
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4641      	mov	r1, r8
 800b8e8:	f000 fab8 	bl	800be5c <memmove>
 800b8ec:	68a3      	ldr	r3, [r4, #8]
 800b8ee:	1b9b      	subs	r3, r3, r6
 800b8f0:	60a3      	str	r3, [r4, #8]
 800b8f2:	6823      	ldr	r3, [r4, #0]
 800b8f4:	4433      	add	r3, r6
 800b8f6:	6023      	str	r3, [r4, #0]
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e7db      	b.n	800b8b4 <__ssputs_r+0x58>
 800b8fc:	462a      	mov	r2, r5
 800b8fe:	f000 fac7 	bl	800be90 <_realloc_r>
 800b902:	4606      	mov	r6, r0
 800b904:	2800      	cmp	r0, #0
 800b906:	d1e1      	bne.n	800b8cc <__ssputs_r+0x70>
 800b908:	6921      	ldr	r1, [r4, #16]
 800b90a:	4650      	mov	r0, sl
 800b90c:	f7ff fe8a 	bl	800b624 <_free_r>
 800b910:	e7c7      	b.n	800b8a2 <__ssputs_r+0x46>
	...

0800b914 <_svfiprintf_r>:
 800b914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b918:	4698      	mov	r8, r3
 800b91a:	898b      	ldrh	r3, [r1, #12]
 800b91c:	061b      	lsls	r3, r3, #24
 800b91e:	b09d      	sub	sp, #116	; 0x74
 800b920:	4607      	mov	r7, r0
 800b922:	460d      	mov	r5, r1
 800b924:	4614      	mov	r4, r2
 800b926:	d50e      	bpl.n	800b946 <_svfiprintf_r+0x32>
 800b928:	690b      	ldr	r3, [r1, #16]
 800b92a:	b963      	cbnz	r3, 800b946 <_svfiprintf_r+0x32>
 800b92c:	2140      	movs	r1, #64	; 0x40
 800b92e:	f7ff fee5 	bl	800b6fc <_malloc_r>
 800b932:	6028      	str	r0, [r5, #0]
 800b934:	6128      	str	r0, [r5, #16]
 800b936:	b920      	cbnz	r0, 800b942 <_svfiprintf_r+0x2e>
 800b938:	230c      	movs	r3, #12
 800b93a:	603b      	str	r3, [r7, #0]
 800b93c:	f04f 30ff 	mov.w	r0, #4294967295
 800b940:	e0d1      	b.n	800bae6 <_svfiprintf_r+0x1d2>
 800b942:	2340      	movs	r3, #64	; 0x40
 800b944:	616b      	str	r3, [r5, #20]
 800b946:	2300      	movs	r3, #0
 800b948:	9309      	str	r3, [sp, #36]	; 0x24
 800b94a:	2320      	movs	r3, #32
 800b94c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b950:	f8cd 800c 	str.w	r8, [sp, #12]
 800b954:	2330      	movs	r3, #48	; 0x30
 800b956:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb00 <_svfiprintf_r+0x1ec>
 800b95a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b95e:	f04f 0901 	mov.w	r9, #1
 800b962:	4623      	mov	r3, r4
 800b964:	469a      	mov	sl, r3
 800b966:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b96a:	b10a      	cbz	r2, 800b970 <_svfiprintf_r+0x5c>
 800b96c:	2a25      	cmp	r2, #37	; 0x25
 800b96e:	d1f9      	bne.n	800b964 <_svfiprintf_r+0x50>
 800b970:	ebba 0b04 	subs.w	fp, sl, r4
 800b974:	d00b      	beq.n	800b98e <_svfiprintf_r+0x7a>
 800b976:	465b      	mov	r3, fp
 800b978:	4622      	mov	r2, r4
 800b97a:	4629      	mov	r1, r5
 800b97c:	4638      	mov	r0, r7
 800b97e:	f7ff ff6d 	bl	800b85c <__ssputs_r>
 800b982:	3001      	adds	r0, #1
 800b984:	f000 80aa 	beq.w	800badc <_svfiprintf_r+0x1c8>
 800b988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b98a:	445a      	add	r2, fp
 800b98c:	9209      	str	r2, [sp, #36]	; 0x24
 800b98e:	f89a 3000 	ldrb.w	r3, [sl]
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 80a2 	beq.w	800badc <_svfiprintf_r+0x1c8>
 800b998:	2300      	movs	r3, #0
 800b99a:	f04f 32ff 	mov.w	r2, #4294967295
 800b99e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9a2:	f10a 0a01 	add.w	sl, sl, #1
 800b9a6:	9304      	str	r3, [sp, #16]
 800b9a8:	9307      	str	r3, [sp, #28]
 800b9aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9ae:	931a      	str	r3, [sp, #104]	; 0x68
 800b9b0:	4654      	mov	r4, sl
 800b9b2:	2205      	movs	r2, #5
 800b9b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b8:	4851      	ldr	r0, [pc, #324]	; (800bb00 <_svfiprintf_r+0x1ec>)
 800b9ba:	f7f4 fc91 	bl	80002e0 <memchr>
 800b9be:	9a04      	ldr	r2, [sp, #16]
 800b9c0:	b9d8      	cbnz	r0, 800b9fa <_svfiprintf_r+0xe6>
 800b9c2:	06d0      	lsls	r0, r2, #27
 800b9c4:	bf44      	itt	mi
 800b9c6:	2320      	movmi	r3, #32
 800b9c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9cc:	0711      	lsls	r1, r2, #28
 800b9ce:	bf44      	itt	mi
 800b9d0:	232b      	movmi	r3, #43	; 0x2b
 800b9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9da:	2b2a      	cmp	r3, #42	; 0x2a
 800b9dc:	d015      	beq.n	800ba0a <_svfiprintf_r+0xf6>
 800b9de:	9a07      	ldr	r2, [sp, #28]
 800b9e0:	4654      	mov	r4, sl
 800b9e2:	2000      	movs	r0, #0
 800b9e4:	f04f 0c0a 	mov.w	ip, #10
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ee:	3b30      	subs	r3, #48	; 0x30
 800b9f0:	2b09      	cmp	r3, #9
 800b9f2:	d94e      	bls.n	800ba92 <_svfiprintf_r+0x17e>
 800b9f4:	b1b0      	cbz	r0, 800ba24 <_svfiprintf_r+0x110>
 800b9f6:	9207      	str	r2, [sp, #28]
 800b9f8:	e014      	b.n	800ba24 <_svfiprintf_r+0x110>
 800b9fa:	eba0 0308 	sub.w	r3, r0, r8
 800b9fe:	fa09 f303 	lsl.w	r3, r9, r3
 800ba02:	4313      	orrs	r3, r2
 800ba04:	9304      	str	r3, [sp, #16]
 800ba06:	46a2      	mov	sl, r4
 800ba08:	e7d2      	b.n	800b9b0 <_svfiprintf_r+0x9c>
 800ba0a:	9b03      	ldr	r3, [sp, #12]
 800ba0c:	1d19      	adds	r1, r3, #4
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	9103      	str	r1, [sp, #12]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	bfbb      	ittet	lt
 800ba16:	425b      	neglt	r3, r3
 800ba18:	f042 0202 	orrlt.w	r2, r2, #2
 800ba1c:	9307      	strge	r3, [sp, #28]
 800ba1e:	9307      	strlt	r3, [sp, #28]
 800ba20:	bfb8      	it	lt
 800ba22:	9204      	strlt	r2, [sp, #16]
 800ba24:	7823      	ldrb	r3, [r4, #0]
 800ba26:	2b2e      	cmp	r3, #46	; 0x2e
 800ba28:	d10c      	bne.n	800ba44 <_svfiprintf_r+0x130>
 800ba2a:	7863      	ldrb	r3, [r4, #1]
 800ba2c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba2e:	d135      	bne.n	800ba9c <_svfiprintf_r+0x188>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	1d1a      	adds	r2, r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	9203      	str	r2, [sp, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bfb8      	it	lt
 800ba3c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba40:	3402      	adds	r4, #2
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb10 <_svfiprintf_r+0x1fc>
 800ba48:	7821      	ldrb	r1, [r4, #0]
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	4650      	mov	r0, sl
 800ba4e:	f7f4 fc47 	bl	80002e0 <memchr>
 800ba52:	b140      	cbz	r0, 800ba66 <_svfiprintf_r+0x152>
 800ba54:	2340      	movs	r3, #64	; 0x40
 800ba56:	eba0 000a 	sub.w	r0, r0, sl
 800ba5a:	fa03 f000 	lsl.w	r0, r3, r0
 800ba5e:	9b04      	ldr	r3, [sp, #16]
 800ba60:	4303      	orrs	r3, r0
 800ba62:	3401      	adds	r4, #1
 800ba64:	9304      	str	r3, [sp, #16]
 800ba66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba6a:	4826      	ldr	r0, [pc, #152]	; (800bb04 <_svfiprintf_r+0x1f0>)
 800ba6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba70:	2206      	movs	r2, #6
 800ba72:	f7f4 fc35 	bl	80002e0 <memchr>
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d038      	beq.n	800baec <_svfiprintf_r+0x1d8>
 800ba7a:	4b23      	ldr	r3, [pc, #140]	; (800bb08 <_svfiprintf_r+0x1f4>)
 800ba7c:	bb1b      	cbnz	r3, 800bac6 <_svfiprintf_r+0x1b2>
 800ba7e:	9b03      	ldr	r3, [sp, #12]
 800ba80:	3307      	adds	r3, #7
 800ba82:	f023 0307 	bic.w	r3, r3, #7
 800ba86:	3308      	adds	r3, #8
 800ba88:	9303      	str	r3, [sp, #12]
 800ba8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba8c:	4433      	add	r3, r6
 800ba8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba90:	e767      	b.n	800b962 <_svfiprintf_r+0x4e>
 800ba92:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba96:	460c      	mov	r4, r1
 800ba98:	2001      	movs	r0, #1
 800ba9a:	e7a5      	b.n	800b9e8 <_svfiprintf_r+0xd4>
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	3401      	adds	r4, #1
 800baa0:	9305      	str	r3, [sp, #20]
 800baa2:	4619      	mov	r1, r3
 800baa4:	f04f 0c0a 	mov.w	ip, #10
 800baa8:	4620      	mov	r0, r4
 800baaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baae:	3a30      	subs	r2, #48	; 0x30
 800bab0:	2a09      	cmp	r2, #9
 800bab2:	d903      	bls.n	800babc <_svfiprintf_r+0x1a8>
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d0c5      	beq.n	800ba44 <_svfiprintf_r+0x130>
 800bab8:	9105      	str	r1, [sp, #20]
 800baba:	e7c3      	b.n	800ba44 <_svfiprintf_r+0x130>
 800babc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bac0:	4604      	mov	r4, r0
 800bac2:	2301      	movs	r3, #1
 800bac4:	e7f0      	b.n	800baa8 <_svfiprintf_r+0x194>
 800bac6:	ab03      	add	r3, sp, #12
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	462a      	mov	r2, r5
 800bacc:	4b0f      	ldr	r3, [pc, #60]	; (800bb0c <_svfiprintf_r+0x1f8>)
 800bace:	a904      	add	r1, sp, #16
 800bad0:	4638      	mov	r0, r7
 800bad2:	f3af 8000 	nop.w
 800bad6:	1c42      	adds	r2, r0, #1
 800bad8:	4606      	mov	r6, r0
 800bada:	d1d6      	bne.n	800ba8a <_svfiprintf_r+0x176>
 800badc:	89ab      	ldrh	r3, [r5, #12]
 800bade:	065b      	lsls	r3, r3, #25
 800bae0:	f53f af2c 	bmi.w	800b93c <_svfiprintf_r+0x28>
 800bae4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bae6:	b01d      	add	sp, #116	; 0x74
 800bae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baec:	ab03      	add	r3, sp, #12
 800baee:	9300      	str	r3, [sp, #0]
 800baf0:	462a      	mov	r2, r5
 800baf2:	4b06      	ldr	r3, [pc, #24]	; (800bb0c <_svfiprintf_r+0x1f8>)
 800baf4:	a904      	add	r1, sp, #16
 800baf6:	4638      	mov	r0, r7
 800baf8:	f000 f87a 	bl	800bbf0 <_printf_i>
 800bafc:	e7eb      	b.n	800bad6 <_svfiprintf_r+0x1c2>
 800bafe:	bf00      	nop
 800bb00:	0800d580 	.word	0x0800d580
 800bb04:	0800d58a 	.word	0x0800d58a
 800bb08:	00000000 	.word	0x00000000
 800bb0c:	0800b85d 	.word	0x0800b85d
 800bb10:	0800d586 	.word	0x0800d586

0800bb14 <_printf_common>:
 800bb14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb18:	4616      	mov	r6, r2
 800bb1a:	4699      	mov	r9, r3
 800bb1c:	688a      	ldr	r2, [r1, #8]
 800bb1e:	690b      	ldr	r3, [r1, #16]
 800bb20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb24:	4293      	cmp	r3, r2
 800bb26:	bfb8      	it	lt
 800bb28:	4613      	movlt	r3, r2
 800bb2a:	6033      	str	r3, [r6, #0]
 800bb2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb30:	4607      	mov	r7, r0
 800bb32:	460c      	mov	r4, r1
 800bb34:	b10a      	cbz	r2, 800bb3a <_printf_common+0x26>
 800bb36:	3301      	adds	r3, #1
 800bb38:	6033      	str	r3, [r6, #0]
 800bb3a:	6823      	ldr	r3, [r4, #0]
 800bb3c:	0699      	lsls	r1, r3, #26
 800bb3e:	bf42      	ittt	mi
 800bb40:	6833      	ldrmi	r3, [r6, #0]
 800bb42:	3302      	addmi	r3, #2
 800bb44:	6033      	strmi	r3, [r6, #0]
 800bb46:	6825      	ldr	r5, [r4, #0]
 800bb48:	f015 0506 	ands.w	r5, r5, #6
 800bb4c:	d106      	bne.n	800bb5c <_printf_common+0x48>
 800bb4e:	f104 0a19 	add.w	sl, r4, #25
 800bb52:	68e3      	ldr	r3, [r4, #12]
 800bb54:	6832      	ldr	r2, [r6, #0]
 800bb56:	1a9b      	subs	r3, r3, r2
 800bb58:	42ab      	cmp	r3, r5
 800bb5a:	dc26      	bgt.n	800bbaa <_printf_common+0x96>
 800bb5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb60:	1e13      	subs	r3, r2, #0
 800bb62:	6822      	ldr	r2, [r4, #0]
 800bb64:	bf18      	it	ne
 800bb66:	2301      	movne	r3, #1
 800bb68:	0692      	lsls	r2, r2, #26
 800bb6a:	d42b      	bmi.n	800bbc4 <_printf_common+0xb0>
 800bb6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bb70:	4649      	mov	r1, r9
 800bb72:	4638      	mov	r0, r7
 800bb74:	47c0      	blx	r8
 800bb76:	3001      	adds	r0, #1
 800bb78:	d01e      	beq.n	800bbb8 <_printf_common+0xa4>
 800bb7a:	6823      	ldr	r3, [r4, #0]
 800bb7c:	68e5      	ldr	r5, [r4, #12]
 800bb7e:	6832      	ldr	r2, [r6, #0]
 800bb80:	f003 0306 	and.w	r3, r3, #6
 800bb84:	2b04      	cmp	r3, #4
 800bb86:	bf08      	it	eq
 800bb88:	1aad      	subeq	r5, r5, r2
 800bb8a:	68a3      	ldr	r3, [r4, #8]
 800bb8c:	6922      	ldr	r2, [r4, #16]
 800bb8e:	bf0c      	ite	eq
 800bb90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bb94:	2500      	movne	r5, #0
 800bb96:	4293      	cmp	r3, r2
 800bb98:	bfc4      	itt	gt
 800bb9a:	1a9b      	subgt	r3, r3, r2
 800bb9c:	18ed      	addgt	r5, r5, r3
 800bb9e:	2600      	movs	r6, #0
 800bba0:	341a      	adds	r4, #26
 800bba2:	42b5      	cmp	r5, r6
 800bba4:	d11a      	bne.n	800bbdc <_printf_common+0xc8>
 800bba6:	2000      	movs	r0, #0
 800bba8:	e008      	b.n	800bbbc <_printf_common+0xa8>
 800bbaa:	2301      	movs	r3, #1
 800bbac:	4652      	mov	r2, sl
 800bbae:	4649      	mov	r1, r9
 800bbb0:	4638      	mov	r0, r7
 800bbb2:	47c0      	blx	r8
 800bbb4:	3001      	adds	r0, #1
 800bbb6:	d103      	bne.n	800bbc0 <_printf_common+0xac>
 800bbb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc0:	3501      	adds	r5, #1
 800bbc2:	e7c6      	b.n	800bb52 <_printf_common+0x3e>
 800bbc4:	18e1      	adds	r1, r4, r3
 800bbc6:	1c5a      	adds	r2, r3, #1
 800bbc8:	2030      	movs	r0, #48	; 0x30
 800bbca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbce:	4422      	add	r2, r4
 800bbd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bbd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bbd8:	3302      	adds	r3, #2
 800bbda:	e7c7      	b.n	800bb6c <_printf_common+0x58>
 800bbdc:	2301      	movs	r3, #1
 800bbde:	4622      	mov	r2, r4
 800bbe0:	4649      	mov	r1, r9
 800bbe2:	4638      	mov	r0, r7
 800bbe4:	47c0      	blx	r8
 800bbe6:	3001      	adds	r0, #1
 800bbe8:	d0e6      	beq.n	800bbb8 <_printf_common+0xa4>
 800bbea:	3601      	adds	r6, #1
 800bbec:	e7d9      	b.n	800bba2 <_printf_common+0x8e>
	...

0800bbf0 <_printf_i>:
 800bbf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bbf4:	7e0f      	ldrb	r7, [r1, #24]
 800bbf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bbf8:	2f78      	cmp	r7, #120	; 0x78
 800bbfa:	4691      	mov	r9, r2
 800bbfc:	4680      	mov	r8, r0
 800bbfe:	460c      	mov	r4, r1
 800bc00:	469a      	mov	sl, r3
 800bc02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc06:	d807      	bhi.n	800bc18 <_printf_i+0x28>
 800bc08:	2f62      	cmp	r7, #98	; 0x62
 800bc0a:	d80a      	bhi.n	800bc22 <_printf_i+0x32>
 800bc0c:	2f00      	cmp	r7, #0
 800bc0e:	f000 80d8 	beq.w	800bdc2 <_printf_i+0x1d2>
 800bc12:	2f58      	cmp	r7, #88	; 0x58
 800bc14:	f000 80a3 	beq.w	800bd5e <_printf_i+0x16e>
 800bc18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc20:	e03a      	b.n	800bc98 <_printf_i+0xa8>
 800bc22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc26:	2b15      	cmp	r3, #21
 800bc28:	d8f6      	bhi.n	800bc18 <_printf_i+0x28>
 800bc2a:	a101      	add	r1, pc, #4	; (adr r1, 800bc30 <_printf_i+0x40>)
 800bc2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc30:	0800bc89 	.word	0x0800bc89
 800bc34:	0800bc9d 	.word	0x0800bc9d
 800bc38:	0800bc19 	.word	0x0800bc19
 800bc3c:	0800bc19 	.word	0x0800bc19
 800bc40:	0800bc19 	.word	0x0800bc19
 800bc44:	0800bc19 	.word	0x0800bc19
 800bc48:	0800bc9d 	.word	0x0800bc9d
 800bc4c:	0800bc19 	.word	0x0800bc19
 800bc50:	0800bc19 	.word	0x0800bc19
 800bc54:	0800bc19 	.word	0x0800bc19
 800bc58:	0800bc19 	.word	0x0800bc19
 800bc5c:	0800bda9 	.word	0x0800bda9
 800bc60:	0800bccd 	.word	0x0800bccd
 800bc64:	0800bd8b 	.word	0x0800bd8b
 800bc68:	0800bc19 	.word	0x0800bc19
 800bc6c:	0800bc19 	.word	0x0800bc19
 800bc70:	0800bdcb 	.word	0x0800bdcb
 800bc74:	0800bc19 	.word	0x0800bc19
 800bc78:	0800bccd 	.word	0x0800bccd
 800bc7c:	0800bc19 	.word	0x0800bc19
 800bc80:	0800bc19 	.word	0x0800bc19
 800bc84:	0800bd93 	.word	0x0800bd93
 800bc88:	682b      	ldr	r3, [r5, #0]
 800bc8a:	1d1a      	adds	r2, r3, #4
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	602a      	str	r2, [r5, #0]
 800bc90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bc98:	2301      	movs	r3, #1
 800bc9a:	e0a3      	b.n	800bde4 <_printf_i+0x1f4>
 800bc9c:	6820      	ldr	r0, [r4, #0]
 800bc9e:	6829      	ldr	r1, [r5, #0]
 800bca0:	0606      	lsls	r6, r0, #24
 800bca2:	f101 0304 	add.w	r3, r1, #4
 800bca6:	d50a      	bpl.n	800bcbe <_printf_i+0xce>
 800bca8:	680e      	ldr	r6, [r1, #0]
 800bcaa:	602b      	str	r3, [r5, #0]
 800bcac:	2e00      	cmp	r6, #0
 800bcae:	da03      	bge.n	800bcb8 <_printf_i+0xc8>
 800bcb0:	232d      	movs	r3, #45	; 0x2d
 800bcb2:	4276      	negs	r6, r6
 800bcb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcb8:	485e      	ldr	r0, [pc, #376]	; (800be34 <_printf_i+0x244>)
 800bcba:	230a      	movs	r3, #10
 800bcbc:	e019      	b.n	800bcf2 <_printf_i+0x102>
 800bcbe:	680e      	ldr	r6, [r1, #0]
 800bcc0:	602b      	str	r3, [r5, #0]
 800bcc2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bcc6:	bf18      	it	ne
 800bcc8:	b236      	sxthne	r6, r6
 800bcca:	e7ef      	b.n	800bcac <_printf_i+0xbc>
 800bccc:	682b      	ldr	r3, [r5, #0]
 800bcce:	6820      	ldr	r0, [r4, #0]
 800bcd0:	1d19      	adds	r1, r3, #4
 800bcd2:	6029      	str	r1, [r5, #0]
 800bcd4:	0601      	lsls	r1, r0, #24
 800bcd6:	d501      	bpl.n	800bcdc <_printf_i+0xec>
 800bcd8:	681e      	ldr	r6, [r3, #0]
 800bcda:	e002      	b.n	800bce2 <_printf_i+0xf2>
 800bcdc:	0646      	lsls	r6, r0, #25
 800bcde:	d5fb      	bpl.n	800bcd8 <_printf_i+0xe8>
 800bce0:	881e      	ldrh	r6, [r3, #0]
 800bce2:	4854      	ldr	r0, [pc, #336]	; (800be34 <_printf_i+0x244>)
 800bce4:	2f6f      	cmp	r7, #111	; 0x6f
 800bce6:	bf0c      	ite	eq
 800bce8:	2308      	moveq	r3, #8
 800bcea:	230a      	movne	r3, #10
 800bcec:	2100      	movs	r1, #0
 800bcee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bcf2:	6865      	ldr	r5, [r4, #4]
 800bcf4:	60a5      	str	r5, [r4, #8]
 800bcf6:	2d00      	cmp	r5, #0
 800bcf8:	bfa2      	ittt	ge
 800bcfa:	6821      	ldrge	r1, [r4, #0]
 800bcfc:	f021 0104 	bicge.w	r1, r1, #4
 800bd00:	6021      	strge	r1, [r4, #0]
 800bd02:	b90e      	cbnz	r6, 800bd08 <_printf_i+0x118>
 800bd04:	2d00      	cmp	r5, #0
 800bd06:	d04d      	beq.n	800bda4 <_printf_i+0x1b4>
 800bd08:	4615      	mov	r5, r2
 800bd0a:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd0e:	fb03 6711 	mls	r7, r3, r1, r6
 800bd12:	5dc7      	ldrb	r7, [r0, r7]
 800bd14:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd18:	4637      	mov	r7, r6
 800bd1a:	42bb      	cmp	r3, r7
 800bd1c:	460e      	mov	r6, r1
 800bd1e:	d9f4      	bls.n	800bd0a <_printf_i+0x11a>
 800bd20:	2b08      	cmp	r3, #8
 800bd22:	d10b      	bne.n	800bd3c <_printf_i+0x14c>
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	07de      	lsls	r6, r3, #31
 800bd28:	d508      	bpl.n	800bd3c <_printf_i+0x14c>
 800bd2a:	6923      	ldr	r3, [r4, #16]
 800bd2c:	6861      	ldr	r1, [r4, #4]
 800bd2e:	4299      	cmp	r1, r3
 800bd30:	bfde      	ittt	le
 800bd32:	2330      	movle	r3, #48	; 0x30
 800bd34:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd38:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd3c:	1b52      	subs	r2, r2, r5
 800bd3e:	6122      	str	r2, [r4, #16]
 800bd40:	f8cd a000 	str.w	sl, [sp]
 800bd44:	464b      	mov	r3, r9
 800bd46:	aa03      	add	r2, sp, #12
 800bd48:	4621      	mov	r1, r4
 800bd4a:	4640      	mov	r0, r8
 800bd4c:	f7ff fee2 	bl	800bb14 <_printf_common>
 800bd50:	3001      	adds	r0, #1
 800bd52:	d14c      	bne.n	800bdee <_printf_i+0x1fe>
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295
 800bd58:	b004      	add	sp, #16
 800bd5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5e:	4835      	ldr	r0, [pc, #212]	; (800be34 <_printf_i+0x244>)
 800bd60:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bd64:	6829      	ldr	r1, [r5, #0]
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	f851 6b04 	ldr.w	r6, [r1], #4
 800bd6c:	6029      	str	r1, [r5, #0]
 800bd6e:	061d      	lsls	r5, r3, #24
 800bd70:	d514      	bpl.n	800bd9c <_printf_i+0x1ac>
 800bd72:	07df      	lsls	r7, r3, #31
 800bd74:	bf44      	itt	mi
 800bd76:	f043 0320 	orrmi.w	r3, r3, #32
 800bd7a:	6023      	strmi	r3, [r4, #0]
 800bd7c:	b91e      	cbnz	r6, 800bd86 <_printf_i+0x196>
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	f023 0320 	bic.w	r3, r3, #32
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	2310      	movs	r3, #16
 800bd88:	e7b0      	b.n	800bcec <_printf_i+0xfc>
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	f043 0320 	orr.w	r3, r3, #32
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	2378      	movs	r3, #120	; 0x78
 800bd94:	4828      	ldr	r0, [pc, #160]	; (800be38 <_printf_i+0x248>)
 800bd96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bd9a:	e7e3      	b.n	800bd64 <_printf_i+0x174>
 800bd9c:	0659      	lsls	r1, r3, #25
 800bd9e:	bf48      	it	mi
 800bda0:	b2b6      	uxthmi	r6, r6
 800bda2:	e7e6      	b.n	800bd72 <_printf_i+0x182>
 800bda4:	4615      	mov	r5, r2
 800bda6:	e7bb      	b.n	800bd20 <_printf_i+0x130>
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	6826      	ldr	r6, [r4, #0]
 800bdac:	6961      	ldr	r1, [r4, #20]
 800bdae:	1d18      	adds	r0, r3, #4
 800bdb0:	6028      	str	r0, [r5, #0]
 800bdb2:	0635      	lsls	r5, r6, #24
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	d501      	bpl.n	800bdbc <_printf_i+0x1cc>
 800bdb8:	6019      	str	r1, [r3, #0]
 800bdba:	e002      	b.n	800bdc2 <_printf_i+0x1d2>
 800bdbc:	0670      	lsls	r0, r6, #25
 800bdbe:	d5fb      	bpl.n	800bdb8 <_printf_i+0x1c8>
 800bdc0:	8019      	strh	r1, [r3, #0]
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	6123      	str	r3, [r4, #16]
 800bdc6:	4615      	mov	r5, r2
 800bdc8:	e7ba      	b.n	800bd40 <_printf_i+0x150>
 800bdca:	682b      	ldr	r3, [r5, #0]
 800bdcc:	1d1a      	adds	r2, r3, #4
 800bdce:	602a      	str	r2, [r5, #0]
 800bdd0:	681d      	ldr	r5, [r3, #0]
 800bdd2:	6862      	ldr	r2, [r4, #4]
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	4628      	mov	r0, r5
 800bdd8:	f7f4 fa82 	bl	80002e0 <memchr>
 800bddc:	b108      	cbz	r0, 800bde2 <_printf_i+0x1f2>
 800bdde:	1b40      	subs	r0, r0, r5
 800bde0:	6060      	str	r0, [r4, #4]
 800bde2:	6863      	ldr	r3, [r4, #4]
 800bde4:	6123      	str	r3, [r4, #16]
 800bde6:	2300      	movs	r3, #0
 800bde8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdec:	e7a8      	b.n	800bd40 <_printf_i+0x150>
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	462a      	mov	r2, r5
 800bdf2:	4649      	mov	r1, r9
 800bdf4:	4640      	mov	r0, r8
 800bdf6:	47d0      	blx	sl
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	d0ab      	beq.n	800bd54 <_printf_i+0x164>
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	079b      	lsls	r3, r3, #30
 800be00:	d413      	bmi.n	800be2a <_printf_i+0x23a>
 800be02:	68e0      	ldr	r0, [r4, #12]
 800be04:	9b03      	ldr	r3, [sp, #12]
 800be06:	4298      	cmp	r0, r3
 800be08:	bfb8      	it	lt
 800be0a:	4618      	movlt	r0, r3
 800be0c:	e7a4      	b.n	800bd58 <_printf_i+0x168>
 800be0e:	2301      	movs	r3, #1
 800be10:	4632      	mov	r2, r6
 800be12:	4649      	mov	r1, r9
 800be14:	4640      	mov	r0, r8
 800be16:	47d0      	blx	sl
 800be18:	3001      	adds	r0, #1
 800be1a:	d09b      	beq.n	800bd54 <_printf_i+0x164>
 800be1c:	3501      	adds	r5, #1
 800be1e:	68e3      	ldr	r3, [r4, #12]
 800be20:	9903      	ldr	r1, [sp, #12]
 800be22:	1a5b      	subs	r3, r3, r1
 800be24:	42ab      	cmp	r3, r5
 800be26:	dcf2      	bgt.n	800be0e <_printf_i+0x21e>
 800be28:	e7eb      	b.n	800be02 <_printf_i+0x212>
 800be2a:	2500      	movs	r5, #0
 800be2c:	f104 0619 	add.w	r6, r4, #25
 800be30:	e7f5      	b.n	800be1e <_printf_i+0x22e>
 800be32:	bf00      	nop
 800be34:	0800d591 	.word	0x0800d591
 800be38:	0800d5a2 	.word	0x0800d5a2

0800be3c <__retarget_lock_acquire_recursive>:
 800be3c:	4770      	bx	lr

0800be3e <__retarget_lock_release_recursive>:
 800be3e:	4770      	bx	lr

0800be40 <memcpy>:
 800be40:	440a      	add	r2, r1
 800be42:	4291      	cmp	r1, r2
 800be44:	f100 33ff 	add.w	r3, r0, #4294967295
 800be48:	d100      	bne.n	800be4c <memcpy+0xc>
 800be4a:	4770      	bx	lr
 800be4c:	b510      	push	{r4, lr}
 800be4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be52:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be56:	4291      	cmp	r1, r2
 800be58:	d1f9      	bne.n	800be4e <memcpy+0xe>
 800be5a:	bd10      	pop	{r4, pc}

0800be5c <memmove>:
 800be5c:	4288      	cmp	r0, r1
 800be5e:	b510      	push	{r4, lr}
 800be60:	eb01 0402 	add.w	r4, r1, r2
 800be64:	d902      	bls.n	800be6c <memmove+0x10>
 800be66:	4284      	cmp	r4, r0
 800be68:	4623      	mov	r3, r4
 800be6a:	d807      	bhi.n	800be7c <memmove+0x20>
 800be6c:	1e43      	subs	r3, r0, #1
 800be6e:	42a1      	cmp	r1, r4
 800be70:	d008      	beq.n	800be84 <memmove+0x28>
 800be72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be76:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be7a:	e7f8      	b.n	800be6e <memmove+0x12>
 800be7c:	4402      	add	r2, r0
 800be7e:	4601      	mov	r1, r0
 800be80:	428a      	cmp	r2, r1
 800be82:	d100      	bne.n	800be86 <memmove+0x2a>
 800be84:	bd10      	pop	{r4, pc}
 800be86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be8e:	e7f7      	b.n	800be80 <memmove+0x24>

0800be90 <_realloc_r>:
 800be90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be94:	4680      	mov	r8, r0
 800be96:	4614      	mov	r4, r2
 800be98:	460e      	mov	r6, r1
 800be9a:	b921      	cbnz	r1, 800bea6 <_realloc_r+0x16>
 800be9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bea0:	4611      	mov	r1, r2
 800bea2:	f7ff bc2b 	b.w	800b6fc <_malloc_r>
 800bea6:	b92a      	cbnz	r2, 800beb4 <_realloc_r+0x24>
 800bea8:	f7ff fbbc 	bl	800b624 <_free_r>
 800beac:	4625      	mov	r5, r4
 800beae:	4628      	mov	r0, r5
 800beb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800beb4:	f000 f81b 	bl	800beee <_malloc_usable_size_r>
 800beb8:	4284      	cmp	r4, r0
 800beba:	4607      	mov	r7, r0
 800bebc:	d802      	bhi.n	800bec4 <_realloc_r+0x34>
 800bebe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bec2:	d812      	bhi.n	800beea <_realloc_r+0x5a>
 800bec4:	4621      	mov	r1, r4
 800bec6:	4640      	mov	r0, r8
 800bec8:	f7ff fc18 	bl	800b6fc <_malloc_r>
 800becc:	4605      	mov	r5, r0
 800bece:	2800      	cmp	r0, #0
 800bed0:	d0ed      	beq.n	800beae <_realloc_r+0x1e>
 800bed2:	42bc      	cmp	r4, r7
 800bed4:	4622      	mov	r2, r4
 800bed6:	4631      	mov	r1, r6
 800bed8:	bf28      	it	cs
 800beda:	463a      	movcs	r2, r7
 800bedc:	f7ff ffb0 	bl	800be40 <memcpy>
 800bee0:	4631      	mov	r1, r6
 800bee2:	4640      	mov	r0, r8
 800bee4:	f7ff fb9e 	bl	800b624 <_free_r>
 800bee8:	e7e1      	b.n	800beae <_realloc_r+0x1e>
 800beea:	4635      	mov	r5, r6
 800beec:	e7df      	b.n	800beae <_realloc_r+0x1e>

0800beee <_malloc_usable_size_r>:
 800beee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bef2:	1f18      	subs	r0, r3, #4
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	bfbc      	itt	lt
 800bef8:	580b      	ldrlt	r3, [r1, r0]
 800befa:	18c0      	addlt	r0, r0, r3
 800befc:	4770      	bx	lr
	...

0800bf00 <_init>:
 800bf00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf02:	bf00      	nop
 800bf04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf06:	bc08      	pop	{r3}
 800bf08:	469e      	mov	lr, r3
 800bf0a:	4770      	bx	lr

0800bf0c <_fini>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	bf00      	nop
 800bf10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf12:	bc08      	pop	{r3}
 800bf14:	469e      	mov	lr, r3
 800bf16:	4770      	bx	lr
