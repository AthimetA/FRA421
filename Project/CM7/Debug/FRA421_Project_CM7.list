
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010e64  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a3c  08011104  08011104  00021104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b40  08012b40  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08012b40  08012b40  00022b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b48  08012b48  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b48  08012b48  00022b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012b4c  08012b4c  00022b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08012b50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  08012bd8  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  08012c38  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  08012c98  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  08012c98  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   00026486  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  000565fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a98  00000000  00000000  0005a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001a08  00000000  00000000  0005bc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023b88  00000000  00000000  0009b0cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001937d4  00000000  00000000  000bec53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00252427  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076e4  00000000  00000000  00252478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080110ec 	.word	0x080110ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	080110ec 	.word	0x080110ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80e4 	bne.w	8000966 <Player_Reading_Card+0x212>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <Player_Reading_Card+0x21c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fe47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <Player_Reading_Card+0x21c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e03b      	b.n	8000966 <Player_Reading_Card+0x212>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d136      	bne.n	8000966 <Player_Reading_Card+0x212>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d132      	bne.n	8000966 <Player_Reading_Card+0x212>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d92e      	bls.n	8000966 <Player_Reading_Card+0x212>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fe12 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Player_Reading_Card+0x21c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				if(ptrYugiohCard_dst->cardType == 2)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d103      	bne.n	8000948 <Player_Reading_Card+0x1f4>
					ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
 8000946:	e002      	b.n	800094e <Player_Reading_Card+0x1fa>
					ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fee4 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	aaaaaaab 	.word	0xaaaaaaab

08000974 <Player_Reading_Card_Monster_SPS>:

void Player_Reading_Card_Monster_SPS(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	2358      	movs	r3, #88	; 0x58
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3328      	adds	r3, #40	; 0x28
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3318      	adds	r3, #24
 800099e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009a6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8098 	bne.w	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
 80009c2:	e00d      	b.n	80009e0 <Player_Reading_Card_Monster_SPS+0x6c>
			if (ptrYugiohCard_src->cardType == 1) {
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <Player_Reading_Card_Monster_SPS+0x60>
				flag_played = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80009d2:	e008      	b.n	80009e6 <Player_Reading_Card_Monster_SPS+0x72>
			}
			ptrYugiohCard_played++;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3310      	adds	r3, #16
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	ddee      	ble.n	80009c4 <Player_Reading_Card_Monster_SPS+0x50>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	e00f      	b.n	8000a14 <Player_Reading_Card_Monster_SPS+0xa0>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d103      	bne.n	8000a08 <Player_Reading_Card_Monster_SPS+0x94>
				flag_played = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000a06:	e008      	b.n	8000a1a <Player_Reading_Card_Monster_SPS+0xa6>
			}
			ptrYugiohCard_played++;
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	ddec      	ble.n	80009f4 <Player_Reading_Card_Monster_SPS+0x80>
		}

		if (player->turn == first && flag_played == 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12f      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>
 8000a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12b      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>

			if (ptrYugiohCard_src->standPosition < 6)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d85c      	bhi.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fd7c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	69b8      	ldr	r0, [r7, #24]
 8000a3e:	f7ff fe21 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	799a      	ldrb	r2, [r3, #6]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000a48:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4c:	0899      	lsrs	r1, r3, #2
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2200      	movs	r2, #0
 8000a68:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a6a:	69f8      	ldr	r0, [r7, #28]
 8000a6c:	f7ff fe56 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a82:	e034      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d12f      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12b      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d927      	bls.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fd47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	69b8      	ldr	r0, [r7, #24]
 8000aa8:	f7ff fdec 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	799a      	ldrb	r2, [r3, #6]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab6:	0899      	lsrs	r1, r3, #2
 8000ab8:	460b      	mov	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2200      	movs	r2, #0
 8000acc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ad4:	69f8      	ldr	r0, [r7, #28]
 8000ad6:	f7ff fe21 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	2200      	movs	r2, #0
 8000ade:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000aec:	e7ff      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	aaaaaaab 	.word	0xaaaaaaab

08000afc <Player_Reading_Card_Monster_Battle>:

void Player_Reading_Card_Monster_Battle(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3328      	adds	r3, #40	; 0x28
 8000b0c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2358      	movs	r3, #88	; 0x58
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	3328      	adds	r3, #40	; 0x28
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3318      	adds	r3, #24
 8000b26:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b2e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3308      	adds	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d17d      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e00d      	b.n	8000b66 <Player_Reading_Card_Monster_Battle+0x6a>
			if (ptrYugiohCard_src->cardType == 1 ) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <Player_Reading_Card_Monster_Battle+0x5e>
				flag_played = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b58:	e008      	b.n	8000b6c <Player_Reading_Card_Monster_Battle+0x70>
			}
			ptrYugiohCard_played++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	ddee      	ble.n	8000b4a <Player_Reading_Card_Monster_Battle+0x4e>
		}

		if (player->turn == first && flag_played == 0) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d12f      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>
 8000b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	799b      	ldrb	r3, [r3, #6]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d85c      	bhi.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fcd3 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff fd78 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	799a      	ldrb	r2, [r3, #6]
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0899      	lsrs	r1, r3, #2
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bbc:	69b8      	ldr	r0, [r7, #24]
 8000bbe:	f7ff fdad 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000bd4:	e034      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d12f      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d927      	bls.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fc9e 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff fd43 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000c04:	fba3 1302 	umull	r1, r3, r3, r2
 8000c08:	0899      	lsrs	r1, r3, #2
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2200      	movs	r2, #0
 8000c24:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c26:	69b8      	ldr	r0, [r7, #24]
 8000c28:	f7ff fd78 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000c3e:	e7ff      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	aaaaaaab 	.word	0xaaaaaaab

08000c4c <Player_Reading_Card_Trap>:

void Player_Reading_Card_Trap(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3328      	adds	r3, #40	; 0x28
 8000c5c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2358      	movs	r3, #88	; 0x58
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	3328      	adds	r3, #40	; 0x28
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3318      	adds	r3, #24
 8000c76:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c7e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3308      	adds	r3, #8
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	f040 8088 	bne.w	8000da6 <Player_Reading_Card_Trap+0x15a>
	{


		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e017      	b.n	8000ccc <Player_Reading_Card_Trap+0x80>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 3
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10b      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d107      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
					&&ptrYugiohCard_played->actionPoint_Eff > 0) {
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <Player_Reading_Card_Trap+0x74>
				flag_played = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000cbe:	e008      	b.n	8000cd2 <Player_Reading_Card_Trap+0x86>
			}
			ptrYugiohCard_played++;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3310      	adds	r3, #16
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	dde4      	ble.n	8000c9c <Player_Reading_Card_Trap+0x50>
		}

		if (player->turn == first && flag_played == 0) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12f      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>
 8000cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>

			if (ptrYugiohCard_src->standPosition < 6)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d85c      	bhi.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fc20 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff fcc5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	799a      	ldrb	r2, [r3, #6]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	0899      	lsrs	r1, r3, #2
 8000d06:	460b      	mov	r3, r1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f7ff fcfa 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d3a:	e034      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12f      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d12b      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	799b      	ldrb	r3, [r3, #6]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d927      	bls.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fbeb 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff fc90 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	799a      	ldrb	r2, [r3, #6]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	0899      	lsrs	r1, r3, #2
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2200      	movs	r2, #0
 8000d84:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f7ff fcc5 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2200      	movs	r2, #0
 8000d96:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000da4:	e7ff      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	aaaaaaab 	.word	0xaaaaaaab

08000db4 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3328      	adds	r3, #40	; 0x28
 8000dc4:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2358      	movs	r3, #88	; 0x58
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	3328      	adds	r3, #40	; 0x28
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000de6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d17d      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d12f      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>
 8000e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12b      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d85c      	bhi.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fb75 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	69f8      	ldr	r0, [r7, #28]
 8000e4c:	f7ff fc1a 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	799a      	ldrb	r2, [r3, #6]
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0899      	lsrs	r1, r3, #2
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000e78:	6a38      	ldr	r0, [r7, #32]
 8000e7a:	f7ff fc4f 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2200      	movs	r2, #0
 8000e82:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000e90:	e034      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d12f      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12b      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d927      	bls.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fb40 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f7ff fbe5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	799a      	ldrb	r2, [r3, #6]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec4:	0899      	lsrs	r1, r3, #2
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ee2:	6a38      	ldr	r0, [r7, #32]
 8000ee4:	f7ff fc1a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	2200      	movs	r2, #0
 8000eec:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000efa:	e7ff      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	aaaaaaab 	.word	0xaaaaaaab

08000f08 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3328      	adds	r3, #40	; 0x28
 8000f18:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2358      	movs	r3, #88	; 0x58
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	3328      	adds	r3, #40	; 0x28
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3318      	adds	r3, #24
 8000f32:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f3a:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8083 	bne.w	8001058 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3368      	adds	r3, #104	; 0x68
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	e00f      	b.n	8000f7e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d103      	bne.n	8000f72 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000f70:	e008      	b.n	8000f84 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3310      	adds	r3, #16
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2b13      	cmp	r3, #19
 8000f82:	ddec      	ble.n	8000f5e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d12f      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	799b      	ldrb	r3, [r3, #6]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d85c      	bhi.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fac7 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff fb6c 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	799a      	ldrb	r2, [r3, #6]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	0899      	lsrs	r1, r3, #2
 8000fb8:	460b      	mov	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fd4:	69b8      	ldr	r0, [r7, #24]
 8000fd6:	f7ff fba1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000fec:	e034      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12f      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8000ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d12b      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d927      	bls.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fa92 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fb37 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	799a      	ldrb	r2, [r3, #6]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	0899      	lsrs	r1, r3, #2
 8001022:	460b      	mov	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	440b      	add	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2201      	movs	r2, #1
 800103c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb6c 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2200      	movs	r2, #0
 8001048:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001056:	e7ff      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	aaaaaaab 	.word	0xaaaaaaab

08001064 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3328      	adds	r3, #40	; 0x28
 8001074:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	2358      	movs	r3, #88	; 0x58
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	3328      	adds	r3, #40	; 0x28
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3318      	adds	r3, #24
 800108e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001096:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80cb 	bne.w	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e013      	b.n	80010dc <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d107      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80010ce:	e008      	b.n	80010e2 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	3310      	adds	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dde8      	ble.n	80010b4 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d102      	bne.n	80010fc <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3368      	adds	r3, #104	; 0x68
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	e00f      	b.n	8001128 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800111a:	e008      	b.n	800112e <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	3310      	adds	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	3301      	adds	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b13      	cmp	r3, #19
 800112c:	ddec      	ble.n	8001108 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e00f      	b.n	800115c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800114e:	e008      	b.n	8001162 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	3310      	adds	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b04      	cmp	r3, #4
 8001160:	ddec      	ble.n	800113c <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d902      	bls.n	8001170 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12f      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12b      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d85c      	bhi.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9d1 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff fa76 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	799a      	ldrb	r2, [r3, #6]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0899      	lsrs	r1, r3, #2
 80011a4:	460b      	mov	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2200      	movs	r2, #0
 80011b8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2201      	movs	r2, #1
 80011be:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faab 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2200      	movs	r2, #0
 80011ca:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80011d8:	e034      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d12f      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 80011e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12b      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d927      	bls.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f99c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff fa41 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	799a      	ldrb	r2, [r3, #6]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	0899      	lsrs	r1, r3, #2
 800120e:	460b      	mov	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2201      	movs	r2, #1
 8001228:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f7ff fa76 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001242:	e7ff      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	aaaaaaab 	.word	0xaaaaaaab

08001250 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3328      	adds	r3, #40	; 0x28
 8001260:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	2358      	movs	r3, #88	; 0x58
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	3328      	adds	r3, #40	; 0x28
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3318      	adds	r3, #24
 800127a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001282:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3308      	adds	r3, #8
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 80c7 	bne.w	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e00f      	b.n	80012c0 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80012b2:	e008      	b.n	80012c6 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3310      	adds	r3, #16
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	ddec      	ble.n	80012a0 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d102      	bne.n	80012d4 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3368      	adds	r3, #104	; 0x68
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	e00f      	b.n	800131a <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800130c:	e008      	b.n	8001320 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3310      	adds	r3, #16
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3301      	adds	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b13      	cmp	r3, #19
 800131e:	ddec      	ble.n	80012fa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	e00f      	b.n	800134e <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d103      	bne.n	8001342 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001340:	e008      	b.n	8001354 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3310      	adds	r3, #16
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	ddec      	ble.n	800132e <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12f      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>
 800135e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001362:	2b00      	cmp	r3, #0
 8001364:	d12b      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	799b      	ldrb	r3, [r3, #6]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d85c      	bhi.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8df 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff f984 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	799a      	ldrb	r2, [r3, #6]
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	0899      	lsrs	r1, r3, #2
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2200      	movs	r2, #0
 800139c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2201      	movs	r2, #1
 80013a2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f7ff f9b9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2200      	movs	r2, #0
 80013ae:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80013bc:	e034      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d12f      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 80013c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d12b      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d927      	bls.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f8aa 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff f94f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	799a      	ldrb	r2, [r3, #6]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	0899      	lsrs	r1, r3, #2
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2201      	movs	r2, #1
 800140c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800140e:	69b8      	ldr	r0, [r7, #24]
 8001410:	f7ff f984 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001426:	e7ff      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	aaaaaaab 	.word	0xaaaaaaab

08001434 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001450:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	76fb      	strb	r3, [r7, #27]
 8001456:	e00b      	b.n	8001470 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	69f9      	ldr	r1, [r7, #28]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f910 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3310      	adds	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800146a:	7efb      	ldrb	r3, [r7, #27]
 800146c:	3301      	adds	r3, #1
 800146e:	76fb      	strb	r3, [r7, #27]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d9f0      	bls.n	8001458 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800149c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800149e:	2300      	movs	r3, #0
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	e00b      	b.n	80014bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f8ea 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3310      	adds	r3, #16
 80014b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80014b6:	7efb      	ldrb	r3, [r7, #27]
 80014b8:	3301      	adds	r3, #1
 80014ba:	76fb      	strb	r3, [r7, #27]
 80014bc:	7efb      	ldrb	r3, [r7, #27]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d9f0      	bls.n	80014a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3368      	adds	r3, #104	; 0x68
 80014c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00b      	b.n	80014e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f8d5 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3310      	adds	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014e0:	7ebb      	ldrb	r3, [r7, #26]
 80014e2:	3301      	adds	r3, #1
 80014e4:	76bb      	strb	r3, [r7, #26]
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	d9f0      	bls.n	80014ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3308      	adds	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80014f2:	2300      	movs	r3, #0
 80014f4:	767b      	strb	r3, [r7, #25]
 80014f6:	e00b      	b.n	8001510 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8c0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3310      	adds	r3, #16
 8001508:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800150a:	7e7b      	ldrb	r3, [r7, #25]
 800150c:	3301      	adds	r3, #1
 800150e:	767b      	strb	r3, [r7, #25]
 8001510:	7e7b      	ldrb	r3, [r7, #25]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9f0      	bls.n	80014f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f8ad 	bl	8000684 <YUGIOH_card_copy>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001540:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001548:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001550:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001558:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800155a:	2306      	movs	r3, #6
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00c      	b.n	800157a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff f88e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b10      	subs	r3, #16
 800156c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	3b10      	subs	r3, #16
 8001572:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dcef      	bgt.n	8001560 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001598:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80015a0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80015a8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80015b0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80015b2:	2306      	movs	r3, #6
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e02c      	b.n	8001612 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff f862 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3b02      	subs	r3, #2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	1e50      	subs	r0, r2, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b02      	subs	r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	1e50      	subs	r0, r2, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3b10      	subs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3b10      	subs	r3, #16
 800160a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dccf      	bgt.n	80015b8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3368      	adds	r3, #104	; 0x68
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3368      	adds	r3, #104	; 0x68
 800164c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001654:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001656:	2314      	movs	r3, #20
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e00c      	b.n	8001676 <YUGIOH_To_GY+0x54>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001660:	f7ff f810 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3b10      	subs	r3, #16
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3b10      	subs	r3, #16
 800166e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dcef      	bgt.n	800165c <YUGIOH_To_GY+0x3a>
	}
	ptrYugiohCard_Buffer_src = card;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3368      	adds	r3, #104	; 0x68
 8001684:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	f7fe fffb 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f7fe fff4 	bl	8000684 <YUGIOH_card_copy>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	72fb      	strb	r3, [r7, #11]
 80016b6:	e00d      	b.n	80016d4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffad 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3310      	adds	r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	3301      	adds	r3, #1
 80016d2:	72fb      	strb	r3, [r7, #11]
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9ee      	bls.n	80016b8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3308      	adds	r3, #8
 80016f2:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3338      	adds	r3, #56	; 0x38
 80016f8:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3308      	adds	r3, #8
 80016fe:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3338      	adds	r3, #56	; 0x38
 8001704:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e00d      	b.n	8001728 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8001714:	6979      	ldr	r1, [r7, #20]
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff83 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3310      	adds	r3, #16
 8001720:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d9ee      	bls.n	800170c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	e00d      	b.n	8001750 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	6838      	ldr	r0, [r7, #0]
 8001740:	f7ff ff6f 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	3310      	adds	r3, #16
 8001748:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	3301      	adds	r3, #1
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d9ee      	bls.n	8001734 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001776:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3368      	adds	r3, #104	; 0x68
 800177c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3368      	adds	r3, #104	; 0x68
 8001782:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8001784:	2300      	movs	r3, #0
 8001786:	74fb      	strb	r3, [r7, #19]
 8001788:	e010      	b.n	80017ac <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	429a      	cmp	r2, r3
 8001794:	d104      	bne.n	80017a0 <YUGIOH_Reborn+0x40>
			flag = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	77bb      	strb	r3, [r7, #30]
			break;
 800179e:	e008      	b.n	80017b2 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3310      	adds	r3, #16
 80017a4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	3301      	adds	r3, #1
 80017aa:	74fb      	strb	r3, [r7, #19]
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b13      	cmp	r3, #19
 80017b0:	d9eb      	bls.n	800178a <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80017b8:	7ffb      	ldrb	r3, [r7, #31]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d134      	bne.n	8001828 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	799a      	ldrb	r2, [r3, #6]
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <YUGIOH_Reborn+0xd0>)
 80017c4:	fba3 1302 	umull	r1, r3, r3, r2
 80017c8:	0899      	lsrs	r1, r3, #2
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	3308      	adds	r3, #8
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	69b8      	ldr	r0, [r7, #24]
 80017e4:	f7fe ff4e 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80017e8:	7fbb      	ldrb	r3, [r7, #30]
 80017ea:	3301      	adds	r3, #1
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	3368      	adds	r3, #104	; 0x68
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	3368      	adds	r3, #104	; 0x68
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8001802:	7fbb      	ldrb	r3, [r7, #30]
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e00c      	b.n	8001822 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	69b8      	ldr	r0, [r7, #24]
 800180c:	f7fe ff3a 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3310      	adds	r3, #16
 8001814:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3310      	adds	r3, #16
 800181a:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b13      	cmp	r3, #19
 8001826:	ddef      	ble.n	8001808 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	aaaaaaab 	.word	0xaaaaaaab

08001834 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001842:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800184a:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	799a      	ldrb	r2, [r3, #6]
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <YUGIOH_Ancient_Rules+0x54>)
 8001852:	fba3 1302 	umull	r1, r3, r3, r2
 8001856:	0899      	lsrs	r1, r3, #2
 8001858:	460b      	mov	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	440b      	add	r3, r1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3308      	adds	r3, #8
 8001868:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	3308      	adds	r3, #8
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7fe ff03 	bl	8000684 <YUGIOH_card_copy>

}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	aaaaaaab 	.word	0xaaaaaaab

0800188c <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3308      	adds	r3, #8
 800189a:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3308      	adds	r3, #8
 80018a6:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3338      	adds	r3, #56	; 0x38
 80018ac:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	73bb      	strb	r3, [r7, #14]
 80018b6:	e00c      	b.n	80018d2 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3310      	adds	r3, #16
 80018ca:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73bb      	strb	r3, [r7, #14]
 80018d2:	7bbb      	ldrb	r3, [r7, #14]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d9ef      	bls.n	80018b8 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018d8:	2300      	movs	r3, #0
 80018da:	737b      	strb	r3, [r7, #13]
 80018dc:	e00c      	b.n	80018f8 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	785b      	ldrb	r3, [r3, #1]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3301      	adds	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3310      	adds	r3, #16
 80018f0:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	3301      	adds	r3, #1
 80018f6:	737b      	strb	r3, [r7, #13]
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d9ef      	bls.n	80018de <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	889a      	ldrh	r2, [r3, #4]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	0089      	lsls	r1, r1, #2
 800190a:	440b      	add	r3, r1
 800190c:	4619      	mov	r1, r3
 800190e:	0109      	lsls	r1, r1, #4
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	809a      	strh	r2, [r3, #4]

}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800193c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001944:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	799a      	ldrb	r2, [r3, #6]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <YUGIOH_Stop_Defense+0x68>)
 800194c:	fba3 1302 	umull	r1, r3, r3, r2
 8001950:	0899      	lsrs	r1, r3, #2
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3308      	adds	r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8001964:	7cfb      	ldrb	r3, [r7, #19]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	3308      	adds	r3, #8
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <YUGIOH_Stop_Defense+0x5a>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	709a      	strb	r2, [r3, #2]
	}

}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab

08001998 <YUGIOH_Clear_Card_In_Main_To_GY>:

void YUGIOH_Clear_Card_In_Main_To_GY(Player *player,YUGIOH_Card *card)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck = &player->cardOnBoard[0];;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3308      	adds	r3, #8
 80019a6:	60fb      	str	r3, [r7, #12]
	uint8_t idx = 255;
 80019a8:	23ff      	movs	r3, #255	; 0xff
 80019aa:	72fb      	strb	r3, [r7, #11]

	for (uint8_t i = 0; i < 6; ++i)
 80019ac:	2300      	movs	r3, #0
 80019ae:	72bb      	strb	r3, [r7, #10]
 80019b0:	e00e      	b.n	80019d0 <YUGIOH_Clear_Card_In_Main_To_GY+0x38>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d102      	bne.n	80019c4 <YUGIOH_Clear_Card_In_Main_To_GY+0x2c>
		{
			idx = i;
 80019be:	7abb      	ldrb	r3, [r7, #10]
 80019c0:	72fb      	strb	r3, [r7, #11]
			break;
 80019c2:	e008      	b.n	80019d6 <YUGIOH_Clear_Card_In_Main_To_GY+0x3e>
		}
		ptrCardCheck++;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	3310      	adds	r3, #16
 80019c8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < 6; ++i)
 80019ca:	7abb      	ldrb	r3, [r7, #10]
 80019cc:	3301      	adds	r3, #1
 80019ce:	72bb      	strb	r3, [r7, #10]
 80019d0:	7abb      	ldrb	r3, [r7, #10]
 80019d2:	2b05      	cmp	r3, #5
 80019d4:	d9ed      	bls.n	80019b2 <YUGIOH_Clear_Card_In_Main_To_GY+0x1a>
	}

	if (idx != 255) {
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	2bff      	cmp	r3, #255	; 0xff
 80019da:	d009      	beq.n	80019f0 <YUGIOH_Clear_Card_In_Main_To_GY+0x58>

		ptrCardCheck = &player->cardOnBoard[idx];
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	011b      	lsls	r3, r3, #4
 80019e0:	3308      	adds	r3, #8
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
		YUGIOH_To_GY(player, ptrCardCheck);
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7ff fe19 	bl	8001622 <YUGIOH_To_GY>
	}

}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}

080019f8 <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3308      	adds	r3, #8
 8001a06:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
 8001a0c:	e016      	b.n	8001a3c <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d10a      	bne.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	7a5b      	ldrb	r3, [r3, #9]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d006      	beq.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	785b      	ldrb	r3, [r3, #1]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d102      	bne.n	8001a30 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	e009      	b.n	8001a44 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3310      	adds	r3, #16
 8001a34:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	dde5      	ble.n	8001a0e <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 8001a42:	23ff      	movs	r3, #255	; 0xff
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	3308      	adds	r3, #8
 8001a5e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	e016      	b.n	8001a94 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d10a      	bne.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	7a5b      	ldrb	r3, [r3, #9]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	785b      	ldrb	r3, [r3, #1]
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d102      	bne.n	8001a88 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	e009      	b.n	8001a9c <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3310      	adds	r3, #16
 8001a8c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	3301      	adds	r3, #1
 8001a92:	60bb      	str	r3, [r7, #8]
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	dde5      	ble.n	8001a66 <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8001a9a:	23ff      	movs	r3, #255	; 0xff
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	3308      	adds	r3, #8
 8001ab4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	e00c      	b.n	8001ad6 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d002      	beq.n	8001aca <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	3310      	adds	r3, #16
 8001ace:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	ddef      	ble.n	8001abc <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3338      	adds	r3, #56	; 0x38
 8001af6:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001af8:	2303      	movs	r3, #3
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	e00c      	b.n	8001b18 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d002      	beq.n	8001b0c <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3310      	adds	r3, #16
 8001b10:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	3301      	adds	r3, #1
 8001b16:	60bb      	str	r3, [r7, #8]
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	ddef      	ble.n	8001afe <YUGIOH_Monster_Activated+0x14>
	}
}
 8001b1e:	bf00      	nop
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <MainGUI>:
void MainGUI()
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001b32:	4b55      	ldr	r3, [pc, #340]	; (8001c88 <MainGUI+0x15c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	9202      	str	r2, [sp, #8]
 8001b38:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001b3c:	9201      	str	r2, [sp, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	9200      	str	r2, [sp, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <MainGUI+0x160>)
 8001b46:	2105      	movs	r1, #5
 8001b48:	2005      	movs	r0, #5
 8001b4a:	f005 f9fe 	bl	8006f4a <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b4e:	4b4e      	ldr	r3, [pc, #312]	; (8001c88 <MainGUI+0x15c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	9202      	str	r2, [sp, #8]
 8001b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b58:	9201      	str	r2, [sp, #4]
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	9200      	str	r2, [sp, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a4b      	ldr	r2, [pc, #300]	; (8001c90 <MainGUI+0x164>)
 8001b62:	2114      	movs	r1, #20
 8001b64:	2005      	movs	r0, #5
 8001b66:	f005 f9f0 	bl	8006f4a <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b6a:	4b47      	ldr	r3, [pc, #284]	; (8001c88 <MainGUI+0x15c>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	9202      	str	r2, [sp, #8]
 8001b70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b74:	9201      	str	r2, [sp, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	9200      	str	r2, [sp, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a45      	ldr	r2, [pc, #276]	; (8001c94 <MainGUI+0x168>)
 8001b7e:	2123      	movs	r1, #35	; 0x23
 8001b80:	2005      	movs	r0, #5
 8001b82:	f005 f9e2 	bl	8006f4a <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b86:	4b40      	ldr	r3, [pc, #256]	; (8001c88 <MainGUI+0x15c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	9202      	str	r2, [sp, #8]
 8001b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b90:	9201      	str	r2, [sp, #4]
 8001b92:	685a      	ldr	r2, [r3, #4]
 8001b94:	9200      	str	r2, [sp, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3f      	ldr	r2, [pc, #252]	; (8001c98 <MainGUI+0x16c>)
 8001b9a:	2123      	movs	r1, #35	; 0x23
 8001b9c:	203c      	movs	r0, #60	; 0x3c
 8001b9e:	f005 f98a 	bl	8006eb6 <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ba2:	4b39      	ldr	r3, [pc, #228]	; (8001c88 <MainGUI+0x15c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	9202      	str	r2, [sp, #8]
 8001ba8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bac:	9201      	str	r2, [sp, #4]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	9200      	str	r2, [sp, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <MainGUI+0x170>)
 8001bb6:	2132      	movs	r1, #50	; 0x32
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f005 f9c6 	bl	8006f4a <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <MainGUI+0x15c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	9202      	str	r2, [sp, #8]
 8001bc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a33      	ldr	r2, [pc, #204]	; (8001ca0 <MainGUI+0x174>)
 8001bd2:	213c      	movs	r1, #60	; 0x3c
 8001bd4:	2000      	movs	r0, #0
 8001bd6:	f005 f9b8 	bl	8006f4a <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001bda:	4b2b      	ldr	r3, [pc, #172]	; (8001c88 <MainGUI+0x15c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	9202      	str	r2, [sp, #8]
 8001be0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001be4:	9201      	str	r2, [sp, #4]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	9200      	str	r2, [sp, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a2d      	ldr	r2, [pc, #180]	; (8001ca4 <MainGUI+0x178>)
 8001bee:	2105      	movs	r1, #5
 8001bf0:	2005      	movs	r0, #5
 8001bf2:	f005 f960 	bl	8006eb6 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bf6:	4b24      	ldr	r3, [pc, #144]	; (8001c88 <MainGUI+0x15c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	9202      	str	r2, [sp, #8]
 8001bfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c00:	9201      	str	r2, [sp, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	9200      	str	r2, [sp, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <MainGUI+0x164>)
 8001c0a:	2114      	movs	r1, #20
 8001c0c:	2005      	movs	r0, #5
 8001c0e:	f005 f952 	bl	8006eb6 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c12:	4b1d      	ldr	r3, [pc, #116]	; (8001c88 <MainGUI+0x15c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	9202      	str	r2, [sp, #8]
 8001c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c1c:	9201      	str	r2, [sp, #4]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	9200      	str	r2, [sp, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a20      	ldr	r2, [pc, #128]	; (8001ca8 <MainGUI+0x17c>)
 8001c26:	2123      	movs	r1, #35	; 0x23
 8001c28:	2005      	movs	r0, #5
 8001c2a:	f005 f944 	bl	8006eb6 <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c2e:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <MainGUI+0x15c>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	9202      	str	r2, [sp, #8]
 8001c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c38:	9201      	str	r2, [sp, #4]
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	9200      	str	r2, [sp, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <MainGUI+0x16c>)
 8001c42:	2123      	movs	r1, #35	; 0x23
 8001c44:	203c      	movs	r0, #60	; 0x3c
 8001c46:	f005 f980 	bl	8006f4a <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <MainGUI+0x15c>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	9202      	str	r2, [sp, #8]
 8001c50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c54:	9201      	str	r2, [sp, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	9200      	str	r2, [sp, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <MainGUI+0x170>)
 8001c5e:	2132      	movs	r1, #50	; 0x32
 8001c60:	2000      	movs	r0, #0
 8001c62:	f005 f928 	bl	8006eb6 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MainGUI+0x15c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	9202      	str	r2, [sp, #8]
 8001c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c70:	9201      	str	r2, [sp, #4]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	9200      	str	r2, [sp, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a09      	ldr	r2, [pc, #36]	; (8001ca0 <MainGUI+0x174>)
 8001c7a:	213c      	movs	r1, #60	; 0x3c
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f005 f91a 	bl	8006eb6 <ST7735_WriteString>
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	2400000c 	.word	0x2400000c
 8001c8c:	08011104 	.word	0x08011104
 8001c90:	08011110 	.word	0x08011110
 8001c94:	08011120 	.word	0x08011120
 8001c98:	08011128 	.word	0x08011128
 8001c9c:	08011130 	.word	0x08011130
 8001ca0:	08011144 	.word	0x08011144
 8001ca4:	08011158 	.word	0x08011158
 8001ca8:	08011164 	.word	0x08011164

08001cac <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b088      	sub	sp, #32
 8001cb0:	af04      	add	r7, sp, #16
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8001cba:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <LCDvalue+0x134>)
 8001cbc:	881a      	ldrh	r2, [r3, #0]
 8001cbe:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <LCDvalue+0x138>)
 8001cc0:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8001cc2:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <LCDvalue+0x13c>)
 8001cc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cc8:	4a48      	ldr	r2, [pc, #288]	; (8001dec <LCDvalue+0x140>)
 8001cca:	f04f 0300 	mov.w	r3, #0
 8001cce:	f7fe fb57 	bl	8000380 <__aeabi_uldivmod>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	817b      	strh	r3, [r7, #10]
	time -= a;
 8001cda:	4b42      	ldr	r3, [pc, #264]	; (8001de4 <LCDvalue+0x138>)
 8001cdc:	881a      	ldrh	r2, [r3, #0]
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <LCDvalue+0x138>)
 8001ce6:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <LCDvalue+0x138>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	4940      	ldr	r1, [pc, #256]	; (8001df0 <LCDvalue+0x144>)
 8001cf0:	4840      	ldr	r0, [pc, #256]	; (8001df4 <LCDvalue+0x148>)
 8001cf2:	f00e fe7d 	bl	80109f0 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	e012      	b.n	8001d22 <LCDvalue+0x76>
		if(t_c[i] == 0){
 8001cfc:	4a3d      	ldr	r2, [pc, #244]	; (8001df4 <LCDvalue+0x148>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <LCDvalue+0x70>
			t_c[i] = 32;
 8001d08:	4a3a      	ldr	r2, [pc, #232]	; (8001df4 <LCDvalue+0x148>)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	2220      	movs	r2, #32
 8001d10:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	3301      	adds	r3, #1
 8001d16:	4a37      	ldr	r2, [pc, #220]	; (8001df4 <LCDvalue+0x148>)
 8001d18:	2120      	movs	r1, #32
 8001d1a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	dde9      	ble.n	8001cfc <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8001d28:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <LCDvalue+0x138>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f040 811d 	bne.w	8001f6c <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001d32:	4831      	ldr	r0, [pc, #196]	; (8001df8 <LCDvalue+0x14c>)
 8001d34:	f00c fa80 	bl	800e238 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8001d38:	4b2a      	ldr	r3, [pc, #168]	; (8001de4 <LCDvalue+0x138>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f005 fb20 	bl	8007384 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8001d44:	2000      	movs	r0, #0
 8001d46:	f005 fb2e 	bl	80073a6 <ST7735_FillScreen1>
		while(time == 0){
 8001d4a:	e10a      	b.n	8001f62 <LCDvalue+0x2b6>
			uint8_t credit = 1;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 8001d50:	7a7b      	ldrb	r3, [r7, #9]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d15e      	bne.n	8001e14 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b28      	ldr	r3, [pc, #160]	; (8001dfc <LCDvalue+0x150>)
 8001d5c:	9203      	str	r2, [sp, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	9202      	str	r2, [sp, #8]
 8001d62:	221f      	movs	r2, #31
 8001d64:	9201      	str	r2, [sp, #4]
 8001d66:	685a      	ldr	r2, [r3, #4]
 8001d68:	9200      	str	r2, [sp, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a24      	ldr	r2, [pc, #144]	; (8001e00 <LCDvalue+0x154>)
 8001d6e:	2123      	movs	r1, #35	; 0x23
 8001d70:	200f      	movs	r0, #15
 8001d72:	f005 f934 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	781a      	ldrb	r2, [r3, #0]
 8001d7a:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <LCDvalue+0x158>)
 8001d7c:	9203      	str	r2, [sp, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	9202      	str	r2, [sp, #8]
 8001d82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d86:	9201      	str	r2, [sp, #4]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	9200      	str	r2, [sp, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a1e      	ldr	r2, [pc, #120]	; (8001e08 <LCDvalue+0x15c>)
 8001d90:	213c      	movs	r1, #60	; 0x3c
 8001d92:	2005      	movs	r0, #5
 8001d94:	f005 f923 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	781a      	ldrb	r2, [r3, #0]
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <LCDvalue+0x150>)
 8001d9e:	9203      	str	r2, [sp, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	9202      	str	r2, [sp, #8]
 8001da4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	9200      	str	r2, [sp, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a16      	ldr	r2, [pc, #88]	; (8001e0c <LCDvalue+0x160>)
 8001db2:	2123      	movs	r1, #35	; 0x23
 8001db4:	2014      	movs	r0, #20
 8001db6:	f005 f912 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	781a      	ldrb	r2, [r3, #0]
 8001dbe:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <LCDvalue+0x158>)
 8001dc0:	9203      	str	r2, [sp, #12]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	9202      	str	r2, [sp, #8]
 8001dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a0f      	ldr	r2, [pc, #60]	; (8001e10 <LCDvalue+0x164>)
 8001dd4:	213c      	movs	r1, #60	; 0x3c
 8001dd6:	2000      	movs	r0, #0
 8001dd8:	f005 f901 	bl	8006fde <ST7735_WriteStringNSS>
 8001ddc:	e0c1      	b.n	8001f62 <LCDvalue+0x2b6>
 8001dde:	bf00      	nop
 8001de0:	24000000 	.word	0x24000000
 8001de4:	24000174 	.word	0x24000174
 8001de8:	24000ea0 	.word	0x24000ea0
 8001dec:	000f4240 	.word	0x000f4240
 8001df0:	0801116c 	.word	0x0801116c
 8001df4:	24000170 	.word	0x24000170
 8001df8:	240002e8 	.word	0x240002e8
 8001dfc:	24000014 	.word	0x24000014
 8001e00:	08011170 	.word	0x08011170
 8001e04:	2400000c 	.word	0x2400000c
 8001e08:	0801117c 	.word	0x0801117c
 8001e0c:	08011190 	.word	0x08011190
 8001e10:	08011198 	.word	0x08011198
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 8001e14:	7a7b      	ldrb	r3, [r7, #9]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	f040 80a3 	bne.w	8001f62 <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	781a      	ldrb	r2, [r3, #0]
 8001e20:	4ba1      	ldr	r3, [pc, #644]	; (80020a8 <LCDvalue+0x3fc>)
 8001e22:	9203      	str	r2, [sp, #12]
 8001e24:	2200      	movs	r2, #0
 8001e26:	9202      	str	r2, [sp, #8]
 8001e28:	221f      	movs	r2, #31
 8001e2a:	9201      	str	r2, [sp, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	9200      	str	r2, [sp, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a9e      	ldr	r2, [pc, #632]	; (80020ac <LCDvalue+0x400>)
 8001e34:	2119      	movs	r1, #25
 8001e36:	200f      	movs	r0, #15
 8001e38:	f005 f8d1 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	781a      	ldrb	r2, [r3, #0]
 8001e40:	4b9b      	ldr	r3, [pc, #620]	; (80020b0 <LCDvalue+0x404>)
 8001e42:	9203      	str	r2, [sp, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	9202      	str	r2, [sp, #8]
 8001e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e4c:	9201      	str	r2, [sp, #4]
 8001e4e:	685a      	ldr	r2, [r3, #4]
 8001e50:	9200      	str	r2, [sp, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a97      	ldr	r2, [pc, #604]	; (80020b4 <LCDvalue+0x408>)
 8001e56:	2132      	movs	r1, #50	; 0x32
 8001e58:	2005      	movs	r0, #5
 8001e5a:	f005 f8c0 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b91      	ldr	r3, [pc, #580]	; (80020a8 <LCDvalue+0x3fc>)
 8001e64:	9203      	str	r2, [sp, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	9202      	str	r2, [sp, #8]
 8001e6a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e6e:	9201      	str	r2, [sp, #4]
 8001e70:	685a      	ldr	r2, [r3, #4]
 8001e72:	9200      	str	r2, [sp, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a90      	ldr	r2, [pc, #576]	; (80020b8 <LCDvalue+0x40c>)
 8001e78:	2119      	movs	r1, #25
 8001e7a:	2014      	movs	r0, #20
 8001e7c:	f005 f8af 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	781a      	ldrb	r2, [r3, #0]
 8001e84:	4b8a      	ldr	r3, [pc, #552]	; (80020b0 <LCDvalue+0x404>)
 8001e86:	9203      	str	r2, [sp, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	9202      	str	r2, [sp, #8]
 8001e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	9200      	str	r2, [sp, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a88      	ldr	r2, [pc, #544]	; (80020bc <LCDvalue+0x410>)
 8001e9a:	2132      	movs	r1, #50	; 0x32
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f005 f89e 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 8001ea2:	4b83      	ldr	r3, [pc, #524]	; (80020b0 <LCDvalue+0x404>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	9203      	str	r2, [sp, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a81      	ldr	r2, [pc, #516]	; (80020c0 <LCDvalue+0x414>)
 8001eba:	2141      	movs	r1, #65	; 0x41
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f005 f88e 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 8001ec2:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <LCDvalue+0x404>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	9203      	str	r2, [sp, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	9202      	str	r2, [sp, #8]
 8001ecc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a79      	ldr	r2, [pc, #484]	; (80020c0 <LCDvalue+0x414>)
 8001eda:	2141      	movs	r1, #65	; 0x41
 8001edc:	2000      	movs	r0, #0
 8001ede:	f005 f87e 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 8001ee2:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <LCDvalue+0x404>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	9203      	str	r2, [sp, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	9202      	str	r2, [sp, #8]
 8001eec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ef0:	9201      	str	r2, [sp, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	9200      	str	r2, [sp, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a72      	ldr	r2, [pc, #456]	; (80020c4 <LCDvalue+0x418>)
 8001efa:	2164      	movs	r1, #100	; 0x64
 8001efc:	2000      	movs	r0, #0
 8001efe:	f005 f86e 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8001f02:	4b6b      	ldr	r3, [pc, #428]	; (80020b0 <LCDvalue+0x404>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	9203      	str	r2, [sp, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	9202      	str	r2, [sp, #8]
 8001f0c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f10:	9201      	str	r2, [sp, #4]
 8001f12:	685a      	ldr	r2, [r3, #4]
 8001f14:	9200      	str	r2, [sp, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6b      	ldr	r2, [pc, #428]	; (80020c8 <LCDvalue+0x41c>)
 8001f1a:	2173      	movs	r1, #115	; 0x73
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f005 f85e 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <LCDvalue+0x404>)
 8001f24:	2201      	movs	r2, #1
 8001f26:	9203      	str	r2, [sp, #12]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	9202      	str	r2, [sp, #8]
 8001f2c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f30:	9201      	str	r2, [sp, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	9200      	str	r2, [sp, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a64      	ldr	r2, [pc, #400]	; (80020cc <LCDvalue+0x420>)
 8001f3a:	2173      	movs	r1, #115	; 0x73
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f005 f84e 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 8001f42:	4b5b      	ldr	r3, [pc, #364]	; (80020b0 <LCDvalue+0x404>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	9203      	str	r2, [sp, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a5d      	ldr	r2, [pc, #372]	; (80020d0 <LCDvalue+0x424>)
 8001f5a:	215a      	movs	r1, #90	; 0x5a
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f005 f83e 	bl	8006fde <ST7735_WriteStringNSS>
		while(time == 0){
 8001f62:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <LCDvalue+0x428>)
 8001f64:	881b      	ldrh	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f43f aef0 	beq.w	8001d4c <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	889b      	ldrh	r3, [r3, #4]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4959      	ldr	r1, [pc, #356]	; (80020d8 <LCDvalue+0x42c>)
 8001f74:	4859      	ldr	r0, [pc, #356]	; (80020dc <LCDvalue+0x430>)
 8001f76:	f00e fd3b 	bl	80109f0 <siprintf>
	if(C_LP_ATK[3] == 0){
 8001f7a:	4b58      	ldr	r3, [pc, #352]	; (80020dc <LCDvalue+0x430>)
 8001f7c:	78db      	ldrb	r3, [r3, #3]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10e      	bne.n	8001fa0 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8001f82:	4b56      	ldr	r3, [pc, #344]	; (80020dc <LCDvalue+0x430>)
 8001f84:	789a      	ldrb	r2, [r3, #2]
 8001f86:	4b55      	ldr	r3, [pc, #340]	; (80020dc <LCDvalue+0x430>)
 8001f88:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8001f8a:	4b54      	ldr	r3, [pc, #336]	; (80020dc <LCDvalue+0x430>)
 8001f8c:	785a      	ldrb	r2, [r3, #1]
 8001f8e:	4b53      	ldr	r3, [pc, #332]	; (80020dc <LCDvalue+0x430>)
 8001f90:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8001f92:	4b52      	ldr	r3, [pc, #328]	; (80020dc <LCDvalue+0x430>)
 8001f94:	781a      	ldrb	r2, [r3, #0]
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <LCDvalue+0x430>)
 8001f98:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8001f9a:	4b50      	ldr	r3, [pc, #320]	; (80020dc <LCDvalue+0x430>)
 8001f9c:	2220      	movs	r2, #32
 8001f9e:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <LCDvalue+0x404>)
 8001fa6:	9203      	str	r2, [sp, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	9202      	str	r2, [sp, #8]
 8001fac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fb0:	9201      	str	r2, [sp, #4]
 8001fb2:	685a      	ldr	r2, [r3, #4]
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a48      	ldr	r2, [pc, #288]	; (80020dc <LCDvalue+0x430>)
 8001fba:	2114      	movs	r1, #20
 8001fbc:	205a      	movs	r0, #90	; 0x5a
 8001fbe:	f005 f80e 	bl	8006fde <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <LCDvalue+0x404>)
 8001fc8:	9203      	str	r2, [sp, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	9202      	str	r2, [sp, #8]
 8001fce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fd2:	9201      	str	r2, [sp, #4]
 8001fd4:	685a      	ldr	r2, [r3, #4]
 8001fd6:	9200      	str	r2, [sp, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a41      	ldr	r2, [pc, #260]	; (80020e0 <LCDvalue+0x434>)
 8001fdc:	2132      	movs	r1, #50	; 0x32
 8001fde:	2069      	movs	r0, #105	; 0x69
 8001fe0:	f004 fffd 	bl	8006fde <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	889b      	ldrh	r3, [r3, #4]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	493b      	ldr	r1, [pc, #236]	; (80020d8 <LCDvalue+0x42c>)
 8001fec:	483d      	ldr	r0, [pc, #244]	; (80020e4 <LCDvalue+0x438>)
 8001fee:	f00e fcff 	bl	80109f0 <siprintf>
	if(C_LP_DEF[3] == 0){
 8001ff2:	4b3c      	ldr	r3, [pc, #240]	; (80020e4 <LCDvalue+0x438>)
 8001ff4:	78db      	ldrb	r3, [r3, #3]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10e      	bne.n	8002018 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8001ffa:	4b3a      	ldr	r3, [pc, #232]	; (80020e4 <LCDvalue+0x438>)
 8001ffc:	789a      	ldrb	r2, [r3, #2]
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <LCDvalue+0x438>)
 8002000:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <LCDvalue+0x438>)
 8002004:	785a      	ldrb	r2, [r3, #1]
 8002006:	4b37      	ldr	r3, [pc, #220]	; (80020e4 <LCDvalue+0x438>)
 8002008:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 800200a:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <LCDvalue+0x438>)
 800200c:	781a      	ldrb	r2, [r3, #0]
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <LCDvalue+0x438>)
 8002010:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8002012:	4b34      	ldr	r3, [pc, #208]	; (80020e4 <LCDvalue+0x438>)
 8002014:	2220      	movs	r2, #32
 8002016:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	781a      	ldrb	r2, [r3, #0]
 800201c:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <LCDvalue+0x404>)
 800201e:	9203      	str	r2, [sp, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	9202      	str	r2, [sp, #8]
 8002024:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002028:	9201      	str	r2, [sp, #4]
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	9200      	str	r2, [sp, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <LCDvalue+0x438>)
 8002032:	2114      	movs	r1, #20
 8002034:	205a      	movs	r0, #90	; 0x5a
 8002036:	f004 ffd2 	bl	8006fde <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	781a      	ldrb	r2, [r3, #0]
 800203e:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <LCDvalue+0x404>)
 8002040:	9203      	str	r2, [sp, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	9202      	str	r2, [sp, #8]
 8002046:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800204a:	9201      	str	r2, [sp, #4]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	9200      	str	r2, [sp, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a25      	ldr	r2, [pc, #148]	; (80020e8 <LCDvalue+0x43c>)
 8002054:	2132      	movs	r1, #50	; 0x32
 8002056:	2069      	movs	r0, #105	; 0x69
 8002058:	f004 ffc1 	bl	8006fde <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 800205c:	4b23      	ldr	r3, [pc, #140]	; (80020ec <LCDvalue+0x440>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	461a      	mov	r2, r3
 8002062:	491d      	ldr	r1, [pc, #116]	; (80020d8 <LCDvalue+0x42c>)
 8002064:	4822      	ldr	r0, [pc, #136]	; (80020f0 <LCDvalue+0x444>)
 8002066:	f00e fcc3 	bl	80109f0 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <LCDvalue+0x404>)
 800206c:	2200      	movs	r2, #0
 800206e:	9203      	str	r2, [sp, #12]
 8002070:	2200      	movs	r2, #0
 8002072:	9202      	str	r2, [sp, #8]
 8002074:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002078:	9201      	str	r2, [sp, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	9200      	str	r2, [sp, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a1b      	ldr	r2, [pc, #108]	; (80020f0 <LCDvalue+0x444>)
 8002082:	2123      	movs	r1, #35	; 0x23
 8002084:	2032      	movs	r0, #50	; 0x32
 8002086:	f004 ffaa 	bl	8006fde <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <LCDvalue+0x404>)
 800208c:	2201      	movs	r2, #1
 800208e:	9203      	str	r2, [sp, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	9202      	str	r2, [sp, #8]
 8002094:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002098:	9201      	str	r2, [sp, #4]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	9200      	str	r2, [sp, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a13      	ldr	r2, [pc, #76]	; (80020f0 <LCDvalue+0x444>)
 80020a2:	2123      	movs	r1, #35	; 0x23
 80020a4:	2032      	movs	r0, #50	; 0x32
 80020a6:	e025      	b.n	80020f4 <LCDvalue+0x448>
 80020a8:	24000014 	.word	0x24000014
 80020ac:	08011170 	.word	0x08011170
 80020b0:	2400000c 	.word	0x2400000c
 80020b4:	0801117c 	.word	0x0801117c
 80020b8:	08011190 	.word	0x08011190
 80020bc:	08011198 	.word	0x08011198
 80020c0:	08011144 	.word	0x08011144
 80020c4:	080111ac 	.word	0x080111ac
 80020c8:	080111b8 	.word	0x080111b8
 80020cc:	080111c8 	.word	0x080111c8
 80020d0:	080111d4 	.word	0x080111d4
 80020d4:	24000174 	.word	0x24000174
 80020d8:	0801116c 	.word	0x0801116c
 80020dc:	24000164 	.word	0x24000164
 80020e0:	24000170 	.word	0x24000170
 80020e4:	24000168 	.word	0x24000168
 80020e8:	080111e4 	.word	0x080111e4
 80020ec:	24000176 	.word	0x24000176
 80020f0:	2400016c 	.word	0x2400016c
 80020f4:	f004 ff73 	bl	8006fde <ST7735_WriteStringNSS>

}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af04      	add	r7, sp, #16
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	3304      	adds	r3, #4
 800210e:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	3304      	adds	r3, #4
 8002114:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	3304      	adds	r3, #4
 800211a:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002122:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	2201      	movs	r2, #1
 8002130:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2200      	movs	r2, #0
 800213e:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8002140:	2108      	movs	r1, #8
 8002142:	48ad      	ldr	r0, [pc, #692]	; (80023f8 <GAME_PLAY_Management+0x2f8>)
 8002144:	f008 fe7a 	bl	800ae3c <HAL_GPIO_ReadPin>
 8002148:	4603      	mov	r3, r0
 800214a:	461a      	mov	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8002150:	2102      	movs	r1, #2
 8002152:	48aa      	ldr	r0, [pc, #680]	; (80023fc <GAME_PLAY_Management+0x2fc>)
 8002154:	f008 fe72 	bl	800ae3c <HAL_GPIO_ReadPin>
 8002158:	4603      	mov	r3, r0
 800215a:	461a      	mov	r2, r3
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8002160:	2104      	movs	r1, #4
 8002162:	48a5      	ldr	r0, [pc, #660]	; (80023f8 <GAME_PLAY_Management+0x2f8>)
 8002164:	f008 fe6a 	bl	800ae3c <HAL_GPIO_ReadPin>
 8002168:	4603      	mov	r3, r0
 800216a:	461a      	mov	r2, r3
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8002170:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002174:	48a2      	ldr	r0, [pc, #648]	; (8002400 <GAME_PLAY_Management+0x300>)
 8002176:	f008 fe61 	bl	800ae3c <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	461a      	mov	r2, r3
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8002188:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	3304      	adds	r3, #4
 800218e:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	3304      	adds	r3, #4
 8002194:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8002196:	7dfb      	ldrb	r3, [r7, #23]
 8002198:	2b04      	cmp	r3, #4
 800219a:	f200 829b 	bhi.w	80026d4 <GAME_PLAY_Management+0x5d4>
 800219e:	a201      	add	r2, pc, #4	; (adr r2, 80021a4 <GAME_PLAY_Management+0xa4>)
 80021a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a4:	080021b9 	.word	0x080021b9
 80021a8:	08002435 	.word	0x08002435
 80021ac:	08002593 	.word	0x08002593
 80021b0:	08002611 	.word	0x08002611
 80021b4:	0800268f 	.word	0x0800268f
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021b8:	4b92      	ldr	r3, [pc, #584]	; (8002404 <GAME_PLAY_Management+0x304>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	9202      	str	r2, [sp, #8]
 80021be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021c2:	9201      	str	r2, [sp, #4]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	9200      	str	r2, [sp, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a8f      	ldr	r2, [pc, #572]	; (8002408 <GAME_PLAY_Management+0x308>)
 80021cc:	2105      	movs	r1, #5
 80021ce:	2005      	movs	r0, #5
 80021d0:	f004 fe71 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021d4:	4b8b      	ldr	r3, [pc, #556]	; (8002404 <GAME_PLAY_Management+0x304>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	9202      	str	r2, [sp, #8]
 80021da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021de:	9201      	str	r2, [sp, #4]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	9200      	str	r2, [sp, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a89      	ldr	r2, [pc, #548]	; (800240c <GAME_PLAY_Management+0x30c>)
 80021e8:	210f      	movs	r1, #15
 80021ea:	2000      	movs	r0, #0
 80021ec:	f004 fe63 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80021f0:	4b87      	ldr	r3, [pc, #540]	; (8002410 <GAME_PLAY_Management+0x310>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	9202      	str	r2, [sp, #8]
 80021f6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80021fa:	9201      	str	r2, [sp, #4]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	9200      	str	r2, [sp, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a84      	ldr	r2, [pc, #528]	; (8002414 <GAME_PLAY_Management+0x314>)
 8002204:	2123      	movs	r1, #35	; 0x23
 8002206:	2008      	movs	r0, #8
 8002208:	f004 fe55 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800220c:	4b80      	ldr	r3, [pc, #512]	; (8002410 <GAME_PLAY_Management+0x310>)
 800220e:	2200      	movs	r2, #0
 8002210:	9202      	str	r2, [sp, #8]
 8002212:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002216:	9201      	str	r2, [sp, #4]
 8002218:	685a      	ldr	r2, [r3, #4]
 800221a:	9200      	str	r2, [sp, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a7e      	ldr	r2, [pc, #504]	; (8002418 <GAME_PLAY_Management+0x318>)
 8002220:	213c      	movs	r1, #60	; 0x3c
 8002222:	2019      	movs	r0, #25
 8002224:	f004 fe47 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002228:	4b76      	ldr	r3, [pc, #472]	; (8002404 <GAME_PLAY_Management+0x304>)
 800222a:	2200      	movs	r2, #0
 800222c:	9202      	str	r2, [sp, #8]
 800222e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002232:	9201      	str	r2, [sp, #4]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	9200      	str	r2, [sp, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a74      	ldr	r2, [pc, #464]	; (800240c <GAME_PLAY_Management+0x30c>)
 800223c:	214b      	movs	r1, #75	; 0x4b
 800223e:	2000      	movs	r0, #0
 8002240:	f004 fe39 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002244:	4b6f      	ldr	r3, [pc, #444]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002246:	2200      	movs	r2, #0
 8002248:	9202      	str	r2, [sp, #8]
 800224a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800224e:	9201      	str	r2, [sp, #4]
 8002250:	685a      	ldr	r2, [r3, #4]
 8002252:	9200      	str	r2, [sp, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a71      	ldr	r2, [pc, #452]	; (800241c <GAME_PLAY_Management+0x31c>)
 8002258:	215a      	movs	r1, #90	; 0x5a
 800225a:	2000      	movs	r0, #0
 800225c:	f004 fe2b 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002260:	4b68      	ldr	r3, [pc, #416]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002262:	2200      	movs	r2, #0
 8002264:	9202      	str	r2, [sp, #8]
 8002266:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800226a:	9201      	str	r2, [sp, #4]
 800226c:	685a      	ldr	r2, [r3, #4]
 800226e:	9200      	str	r2, [sp, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6b      	ldr	r2, [pc, #428]	; (8002420 <GAME_PLAY_Management+0x320>)
 8002274:	215a      	movs	r1, #90	; 0x5a
 8002276:	205d      	movs	r0, #93	; 0x5d
 8002278:	f004 fe1d 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800227c:	4b61      	ldr	r3, [pc, #388]	; (8002404 <GAME_PLAY_Management+0x304>)
 800227e:	2200      	movs	r2, #0
 8002280:	9202      	str	r2, [sp, #8]
 8002282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a65      	ldr	r2, [pc, #404]	; (8002424 <GAME_PLAY_Management+0x324>)
 8002290:	2169      	movs	r1, #105	; 0x69
 8002292:	2000      	movs	r0, #0
 8002294:	f004 fe0f 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002298:	4b5a      	ldr	r3, [pc, #360]	; (8002404 <GAME_PLAY_Management+0x304>)
 800229a:	2200      	movs	r2, #0
 800229c:	9202      	str	r2, [sp, #8]
 800229e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	9200      	str	r2, [sp, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a5f      	ldr	r2, [pc, #380]	; (8002428 <GAME_PLAY_Management+0x328>)
 80022ac:	2169      	movs	r1, #105	; 0x69
 80022ae:	2064      	movs	r0, #100	; 0x64
 80022b0:	f004 fe01 	bl	8006eb6 <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022b4:	4b53      	ldr	r3, [pc, #332]	; (8002404 <GAME_PLAY_Management+0x304>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	9202      	str	r2, [sp, #8]
 80022ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022be:	9201      	str	r2, [sp, #4]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	9200      	str	r2, [sp, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a59      	ldr	r2, [pc, #356]	; (800242c <GAME_PLAY_Management+0x32c>)
 80022c8:	2105      	movs	r1, #5
 80022ca:	2005      	movs	r0, #5
 80022cc:	f004 fe3d 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022d0:	4b4c      	ldr	r3, [pc, #304]	; (8002404 <GAME_PLAY_Management+0x304>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a4a      	ldr	r2, [pc, #296]	; (800240c <GAME_PLAY_Management+0x30c>)
 80022e4:	210f      	movs	r1, #15
 80022e6:	2000      	movs	r0, #0
 80022e8:	f004 fe2f 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80022ec:	4b48      	ldr	r3, [pc, #288]	; (8002410 <GAME_PLAY_Management+0x310>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	9202      	str	r2, [sp, #8]
 80022f2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80022f6:	9201      	str	r2, [sp, #4]
 80022f8:	685a      	ldr	r2, [r3, #4]
 80022fa:	9200      	str	r2, [sp, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a45      	ldr	r2, [pc, #276]	; (8002414 <GAME_PLAY_Management+0x314>)
 8002300:	2123      	movs	r1, #35	; 0x23
 8002302:	2008      	movs	r0, #8
 8002304:	f004 fe21 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002308:	4b41      	ldr	r3, [pc, #260]	; (8002410 <GAME_PLAY_Management+0x310>)
 800230a:	2200      	movs	r2, #0
 800230c:	9202      	str	r2, [sp, #8]
 800230e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002312:	9201      	str	r2, [sp, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	9200      	str	r2, [sp, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a3f      	ldr	r2, [pc, #252]	; (8002418 <GAME_PLAY_Management+0x318>)
 800231c:	213c      	movs	r1, #60	; 0x3c
 800231e:	2014      	movs	r0, #20
 8002320:	f004 fe13 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002324:	4b37      	ldr	r3, [pc, #220]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002326:	2200      	movs	r2, #0
 8002328:	9202      	str	r2, [sp, #8]
 800232a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232e:	9201      	str	r2, [sp, #4]
 8002330:	685a      	ldr	r2, [r3, #4]
 8002332:	9200      	str	r2, [sp, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a35      	ldr	r2, [pc, #212]	; (800240c <GAME_PLAY_Management+0x30c>)
 8002338:	214b      	movs	r1, #75	; 0x4b
 800233a:	2000      	movs	r0, #0
 800233c:	f004 fe05 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002340:	4b30      	ldr	r3, [pc, #192]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002342:	2200      	movs	r2, #0
 8002344:	9202      	str	r2, [sp, #8]
 8002346:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234a:	9201      	str	r2, [sp, #4]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	9200      	str	r2, [sp, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a32      	ldr	r2, [pc, #200]	; (800241c <GAME_PLAY_Management+0x31c>)
 8002354:	215a      	movs	r1, #90	; 0x5a
 8002356:	2000      	movs	r0, #0
 8002358:	f004 fdf7 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800235c:	4b29      	ldr	r3, [pc, #164]	; (8002404 <GAME_PLAY_Management+0x304>)
 800235e:	2200      	movs	r2, #0
 8002360:	9202      	str	r2, [sp, #8]
 8002362:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002366:	9201      	str	r2, [sp, #4]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	9200      	str	r2, [sp, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a2c      	ldr	r2, [pc, #176]	; (8002420 <GAME_PLAY_Management+0x320>)
 8002370:	215a      	movs	r1, #90	; 0x5a
 8002372:	205d      	movs	r0, #93	; 0x5d
 8002374:	f004 fde9 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <GAME_PLAY_Management+0x304>)
 800237a:	2200      	movs	r2, #0
 800237c:	9202      	str	r2, [sp, #8]
 800237e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002382:	9201      	str	r2, [sp, #4]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	9200      	str	r2, [sp, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a26      	ldr	r2, [pc, #152]	; (8002424 <GAME_PLAY_Management+0x324>)
 800238c:	2169      	movs	r1, #105	; 0x69
 800238e:	2000      	movs	r0, #0
 8002390:	f004 fddb 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <GAME_PLAY_Management+0x304>)
 8002396:	2200      	movs	r2, #0
 8002398:	9202      	str	r2, [sp, #8]
 800239a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800239e:	9201      	str	r2, [sp, #4]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	9200      	str	r2, [sp, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a20      	ldr	r2, [pc, #128]	; (8002428 <GAME_PLAY_Management+0x328>)
 80023a8:	2169      	movs	r1, #105	; 0x69
 80023aa:	2064      	movs	r0, #100	; 0x64
 80023ac:	f004 fdcd 	bl	8006f4a <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 80023b0:	2108      	movs	r1, #8
 80023b2:	481f      	ldr	r0, [pc, #124]	; (8002430 <GAME_PLAY_Management+0x330>)
 80023b4:	f008 fd42 	bl	800ae3c <HAL_GPIO_ReadPin>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80023be:	2000      	movs	r0, #0
 80023c0:	f004 ffe0 	bl	8007384 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80023c4:	2000      	movs	r0, #0
 80023c6:	f004 ffee 	bl	80073a6 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80023d2:	e17f      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
			state_game->PlyerAction_State = PS_AFK;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80023f4:	e16e      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
 80023f6:	bf00      	nop
 80023f8:	58020800 	.word	0x58020800
 80023fc:	58020400 	.word	0x58020400
 8002400:	58021400 	.word	0x58021400
 8002404:	2400000c 	.word	0x2400000c
 8002408:	08011158 	.word	0x08011158
 800240c:	08011144 	.word	0x08011144
 8002410:	24000014 	.word	0x24000014
 8002414:	080111e8 	.word	0x080111e8
 8002418:	080111f4 	.word	0x080111f4
 800241c:	080111fc 	.word	0x080111fc
 8002420:	0801120c 	.word	0x0801120c
 8002424:	08011214 	.word	0x08011214
 8002428:	080111e4 	.word	0x080111e4
 800242c:	08011104 	.word	0x08011104
 8002430:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002434:	4ba9      	ldr	r3, [pc, #676]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 8002436:	2200      	movs	r2, #0
 8002438:	9202      	str	r2, [sp, #8]
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	9201      	str	r2, [sp, #4]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	9200      	str	r2, [sp, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4aa6      	ldr	r2, [pc, #664]	; (80026e0 <GAME_PLAY_Management+0x5e0>)
 8002448:	2105      	movs	r1, #5
 800244a:	2005      	movs	r0, #5
 800244c:	f004 fd33 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002450:	4ba2      	ldr	r3, [pc, #648]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 8002452:	2200      	movs	r2, #0
 8002454:	9202      	str	r2, [sp, #8]
 8002456:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	9200      	str	r2, [sp, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4aa0      	ldr	r2, [pc, #640]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002464:	210f      	movs	r1, #15
 8002466:	2000      	movs	r0, #0
 8002468:	f004 fd25 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800246c:	4b9e      	ldr	r3, [pc, #632]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 800246e:	2200      	movs	r2, #0
 8002470:	9202      	str	r2, [sp, #8]
 8002472:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002476:	9201      	str	r2, [sp, #4]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	9200      	str	r2, [sp, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a9b      	ldr	r2, [pc, #620]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 8002480:	2123      	movs	r1, #35	; 0x23
 8002482:	2019      	movs	r0, #25
 8002484:	f004 fd17 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002488:	4b97      	ldr	r3, [pc, #604]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 800248a:	2200      	movs	r2, #0
 800248c:	9202      	str	r2, [sp, #8]
 800248e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002492:	9201      	str	r2, [sp, #4]
 8002494:	685a      	ldr	r2, [r3, #4]
 8002496:	9200      	str	r2, [sp, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a95      	ldr	r2, [pc, #596]	; (80026f0 <GAME_PLAY_Management+0x5f0>)
 800249c:	213c      	movs	r1, #60	; 0x3c
 800249e:	2021      	movs	r0, #33	; 0x21
 80024a0:	f004 fd09 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024a4:	4b8d      	ldr	r3, [pc, #564]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	9202      	str	r2, [sp, #8]
 80024aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ae:	9201      	str	r2, [sp, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	9200      	str	r2, [sp, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a8b      	ldr	r2, [pc, #556]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024b8:	214b      	movs	r1, #75	; 0x4b
 80024ba:	2000      	movs	r0, #0
 80024bc:	f004 fcfb 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024c0:	4b86      	ldr	r3, [pc, #536]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	9202      	str	r2, [sp, #8]
 80024c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ca:	9201      	str	r2, [sp, #4]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	9200      	str	r2, [sp, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a88      	ldr	r2, [pc, #544]	; (80026f4 <GAME_PLAY_Management+0x5f4>)
 80024d4:	2105      	movs	r1, #5
 80024d6:	2005      	movs	r0, #5
 80024d8:	f004 fd37 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024dc:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 80024de:	2200      	movs	r2, #0
 80024e0:	9202      	str	r2, [sp, #8]
 80024e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024e6:	9201      	str	r2, [sp, #4]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	9200      	str	r2, [sp, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7d      	ldr	r2, [pc, #500]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 80024f0:	210f      	movs	r1, #15
 80024f2:	2000      	movs	r0, #0
 80024f4:	f004 fd29 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80024f8:	4b7b      	ldr	r3, [pc, #492]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	9202      	str	r2, [sp, #8]
 80024fe:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002502:	9201      	str	r2, [sp, #4]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	9200      	str	r2, [sp, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a78      	ldr	r2, [pc, #480]	; (80026ec <GAME_PLAY_Management+0x5ec>)
 800250c:	2123      	movs	r1, #35	; 0x23
 800250e:	2019      	movs	r0, #25
 8002510:	f004 fd1b 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002514:	4b74      	ldr	r3, [pc, #464]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 8002516:	2200      	movs	r2, #0
 8002518:	9202      	str	r2, [sp, #8]
 800251a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800251e:	9201      	str	r2, [sp, #4]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	9200      	str	r2, [sp, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a74      	ldr	r2, [pc, #464]	; (80026f8 <GAME_PLAY_Management+0x5f8>)
 8002528:	213c      	movs	r1, #60	; 0x3c
 800252a:	2025      	movs	r0, #37	; 0x25
 800252c:	f004 fd0d 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002530:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <GAME_PLAY_Management+0x5dc>)
 8002532:	2200      	movs	r2, #0
 8002534:	9202      	str	r2, [sp, #8]
 8002536:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800253a:	9201      	str	r2, [sp, #4]
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	9200      	str	r2, [sp, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a68      	ldr	r2, [pc, #416]	; (80026e4 <GAME_PLAY_Management+0x5e4>)
 8002544:	214b      	movs	r1, #75	; 0x4b
 8002546:	2000      	movs	r0, #0
 8002548:	f004 fcff 	bl	8006f4a <ST7735_WriteString1>
		HAL_Delay(1500);
 800254c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002550:	f005 fb26 	bl	8007ba0 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8002554:	2000      	movs	r0, #0
 8002556:	f004 ff15 	bl	8007384 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 800255a:	2000      	movs	r0, #0
 800255c:	f004 ff23 	bl	80073a6 <ST7735_FillScreen1>
		MainGUI();
 8002560:	f7ff fae4 	bl	8001b2c <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800256a:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002572:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8002574:	69f8      	ldr	r0, [r7, #28]
 8002576:	f7fe ff83 	bl	8001480 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 800257a:	69b8      	ldr	r0, [r7, #24]
 800257c:	f7fe ff80 	bl	8001480 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2202      	movs	r2, #2
 8002584:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8002590:	e0a0      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
	case first_player:
		if (state_game -> F_flag == 0){
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8002598:	2b00      	cmp	r3, #0
 800259a:	d12b      	bne.n	80025f4 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 800259c:	4b52      	ldr	r3, [pc, #328]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 800259e:	2200      	movs	r2, #0
 80025a0:	9202      	str	r2, [sp, #8]
 80025a2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80025a6:	9201      	str	r2, [sp, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	9200      	str	r2, [sp, #0]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a53      	ldr	r2, [pc, #332]	; (80026fc <GAME_PLAY_Management+0x5fc>)
 80025b0:	215a      	movs	r1, #90	; 0x5a
 80025b2:	200f      	movs	r0, #15
 80025b4:	f004 fcc9 	bl	8006f4a <ST7735_WriteString1>
			HAL_Delay(1500);
 80025b8:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025bc:	f005 faf0 	bl	8007ba0 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 80025c0:	2300      	movs	r3, #0
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2326      	movs	r3, #38	; 0x26
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	215a      	movs	r1, #90	; 0x5a
 80025ca:	2000      	movs	r0, #0
 80025cc:	f004 fddc 	bl	8007188 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80025d6:	3301      	adds	r3, #1
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2200      	movs	r2, #0
 80025e4:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 80025e8:	4b45      	ldr	r3, [pc, #276]	; (8002700 <GAME_PLAY_Management+0x600>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	3301      	adds	r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <GAME_PLAY_Management+0x600>)
 80025f2:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	3304      	adds	r3, #4
 80025f8:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002600:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	6839      	ldr	r1, [r7, #0]
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f87d 	bl	8002708 <GAME_PLAY_Phase_Management>
		break;
 800260e:	e061      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
	case second_player:
		if (state_game -> S_flag == 0){
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8002616:	2b00      	cmp	r3, #0
 8002618:	d12b      	bne.n	8002672 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 800261a:	4b33      	ldr	r3, [pc, #204]	; (80026e8 <GAME_PLAY_Management+0x5e8>)
 800261c:	2200      	movs	r2, #0
 800261e:	9202      	str	r2, [sp, #8]
 8002620:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002624:	9201      	str	r2, [sp, #4]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	9200      	str	r2, [sp, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a33      	ldr	r2, [pc, #204]	; (80026fc <GAME_PLAY_Management+0x5fc>)
 800262e:	215a      	movs	r1, #90	; 0x5a
 8002630:	200f      	movs	r0, #15
 8002632:	f004 fc40 	bl	8006eb6 <ST7735_WriteString>
			HAL_Delay(1500);
 8002636:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800263a:	f005 fab1 	bl	8007ba0 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 800263e:	2300      	movs	r3, #0
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2326      	movs	r3, #38	; 0x26
 8002644:	2280      	movs	r2, #128	; 0x80
 8002646:	215a      	movs	r1, #90	; 0x5a
 8002648:	2000      	movs	r0, #0
 800264a:	f004 fd29 	bl	80070a0 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8002654:	3301      	adds	r3, #1
 8002656:	b2da      	uxtb	r2, r3
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 8002666:	4b26      	ldr	r3, [pc, #152]	; (8002700 <GAME_PLAY_Management+0x600>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	3301      	adds	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	4b24      	ldr	r3, [pc, #144]	; (8002700 <GAME_PLAY_Management+0x600>)
 8002670:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002678:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3304      	adds	r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	6839      	ldr	r1, [r7, #0]
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f83e 	bl	8002708 <GAME_PLAY_Phase_Management>
		break;
 800268c:	e022      	b.n	80026d4 <GAME_PLAY_Management+0x5d4>
	case Game_Ended:
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 800268e:	2108      	movs	r1, #8
 8002690:	481c      	ldr	r0, [pc, #112]	; (8002704 <GAME_PLAY_Management+0x604>)
 8002692:	f008 fbd3 	bl	800ae3c <HAL_GPIO_ReadPin>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <GAME_PLAY_Management+0x5b2>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800269c:	2000      	movs	r0, #0
 800269e:	f004 fe71 	bl	8007384 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 80026a2:	2000      	movs	r0, #0
 80026a4:	f004 fe7f 	bl	80073a6 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 80026b0:	e00f      	b.n	80026d2 <GAME_PLAY_Management+0x5d2>
			state_game->PlyerAction_State = PS_AFK;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	2200      	movs	r2, #0
 80026b6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 80026d2:	bf00      	nop
	}
}
 80026d4:	bf00      	nop
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	2400000c 	.word	0x2400000c
 80026e0:	08011158 	.word	0x08011158
 80026e4:	08011144 	.word	0x08011144
 80026e8:	24000014 	.word	0x24000014
 80026ec:	08011224 	.word	0x08011224
 80026f0:	0801122c 	.word	0x0801122c
 80026f4:	08011104 	.word	0x08011104
 80026f8:	08011234 	.word	0x08011234
 80026fc:	0801123c 	.word	0x0801123c
 8002700:	24000176 	.word	0x24000176
 8002704:	58020000 	.word	0x58020000

08002708 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8002708:	b590      	push	{r4, r7, lr}
 800270a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 800270e:	af04      	add	r7, sp, #16
 8002710:	f507 7418 	add.w	r4, r7, #608	; 0x260
 8002714:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 8002718:	6020      	str	r0, [r4, #0]
 800271a:	f507 7018 	add.w	r0, r7, #608	; 0x260
 800271e:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 8002722:	6001      	str	r1, [r0, #0]
 8002724:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8002728:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 800272c:	600a      	str	r2, [r1, #0]
 800272e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002732:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002736:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8002738:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800273c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8002746:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 800274a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800274e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8002758:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 800275c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002760:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800276a:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 800276e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002772:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002776:	4618      	mov	r0, r3
 8002778:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800277c:	461a      	mov	r2, r3
 800277e:	2100      	movs	r1, #0
 8002780:	f00e f83e 	bl	8010800 <memset>

	switch (PAS) {
 8002784:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002788:	2b03      	cmp	r3, #3
 800278a:	f203 854d 	bhi.w	8006228 <GAME_PLAY_Phase_Management+0x3b20>
 800278e:	a201      	add	r2, pc, #4	; (adr r2, 8002794 <GAME_PLAY_Phase_Management+0x8c>)
 8002790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002794:	0800621b 	.word	0x0800621b
 8002798:	080027a5 	.word	0x080027a5
 800279c:	080028fd 	.word	0x080028fd
 80027a0:	08004d45 	.word	0x08004d45
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 80027a4:	48b5      	ldr	r0, [pc, #724]	; (8002a7c <GAME_PLAY_Phase_Management+0x374>)
 80027a6:	f00b fccf 	bl	800e148 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 80027aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027ae:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80027b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027ba:	6811      	ldr	r1, [r2, #0]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	f7ff fa75 	bl	8001cac <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80027c2:	4baf      	ldr	r3, [pc, #700]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	9202      	str	r2, [sp, #8]
 80027c8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027cc:	9201      	str	r2, [sp, #4]
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4aab      	ldr	r2, [pc, #684]	; (8002a84 <GAME_PLAY_Phase_Management+0x37c>)
 80027d6:	2123      	movs	r1, #35	; 0x23
 80027d8:	206e      	movs	r0, #110	; 0x6e
 80027da:	f004 fb6c 	bl	8006eb6 <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80027de:	4ba8      	ldr	r3, [pc, #672]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	9202      	str	r2, [sp, #8]
 80027e4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80027e8:	9201      	str	r2, [sp, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	9200      	str	r2, [sp, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4aa4      	ldr	r2, [pc, #656]	; (8002a84 <GAME_PLAY_Phase_Management+0x37c>)
 80027f2:	2123      	movs	r1, #35	; 0x23
 80027f4:	206e      	movs	r0, #110	; 0x6e
 80027f6:	f004 fba8 	bl	8006f4a <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80027fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027fe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	781a      	ldrb	r2, [r3, #0]
 8002806:	4b9e      	ldr	r3, [pc, #632]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002808:	9203      	str	r2, [sp, #12]
 800280a:	2200      	movs	r2, #0
 800280c:	9202      	str	r2, [sp, #8]
 800280e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002812:	9201      	str	r2, [sp, #4]
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	9200      	str	r2, [sp, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a9b      	ldr	r2, [pc, #620]	; (8002a88 <GAME_PLAY_Phase_Management+0x380>)
 800281c:	215a      	movs	r1, #90	; 0x5a
 800281e:	2005      	movs	r0, #5
 8002820:	f004 fbdd 	bl	8006fde <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002824:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002828:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	4b93      	ldr	r3, [pc, #588]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002832:	9203      	str	r2, [sp, #12]
 8002834:	2200      	movs	r2, #0
 8002836:	9202      	str	r2, [sp, #8]
 8002838:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800283c:	9201      	str	r2, [sp, #4]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	9200      	str	r2, [sp, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a91      	ldr	r2, [pc, #580]	; (8002a8c <GAME_PLAY_Phase_Management+0x384>)
 8002846:	215a      	movs	r1, #90	; 0x5a
 8002848:	2005      	movs	r0, #5
 800284a:	f004 fbc8 	bl	8006fde <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800284e:	2101      	movs	r1, #1
 8002850:	488f      	ldr	r0, [pc, #572]	; (8002a90 <GAME_PLAY_Phase_Management+0x388>)
 8002852:	f008 faf3 	bl	800ae3c <HAL_GPIO_ReadPin>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	f043 84e0 	bne.w	800621e <GAME_PLAY_Phase_Management+0x3b16>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800285e:	2000      	movs	r0, #0
 8002860:	f004 fd90 	bl	8007384 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8002864:	2000      	movs	r0, #0
 8002866:	f004 fd9e 	bl	80073a6 <ST7735_FillScreen1>
			MainGUI();
 800286a:	f7ff f95f 	bl	8001b2c <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 800286e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002872:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2202      	movs	r2, #2
 800287a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800287e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002882:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 800288e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002892:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800289c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028a0:	f005 f97e 	bl	8007ba0 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80028a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028a8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	4b73      	ldr	r3, [pc, #460]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 80028b2:	9203      	str	r2, [sp, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	9202      	str	r2, [sp, #8]
 80028b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028bc:	9201      	str	r2, [sp, #4]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	9200      	str	r2, [sp, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a70      	ldr	r2, [pc, #448]	; (8002a88 <GAME_PLAY_Phase_Management+0x380>)
 80028c6:	215a      	movs	r1, #90	; 0x5a
 80028c8:	2005      	movs	r0, #5
 80028ca:	f004 fb88 	bl	8006fde <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80028ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	781a      	ldrb	r2, [r3, #0]
 80028da:	4b69      	ldr	r3, [pc, #420]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 80028dc:	9203      	str	r2, [sp, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	9202      	str	r2, [sp, #8]
 80028e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028e6:	9201      	str	r2, [sp, #4]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	9200      	str	r2, [sp, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a69      	ldr	r2, [pc, #420]	; (8002a94 <GAME_PLAY_Phase_Management+0x38c>)
 80028f0:	215a      	movs	r1, #90	; 0x5a
 80028f2:	2005      	movs	r0, #5
 80028f4:	f004 fb73 	bl	8006fde <ST7735_WriteStringNSS>
		}
		break;
 80028f8:	f003 bc91 	b.w	800621e <GAME_PLAY_Phase_Management+0x3b16>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 80028fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002900:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8002904:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002908:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800290c:	6811      	ldr	r1, [r2, #0]
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	f7ff f9cc 	bl	8001cac <LCDvalue>

		switch (PMS)
 8002914:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8002918:	2b07      	cmp	r3, #7
 800291a:	f203 8482 	bhi.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
 800291e:	a201      	add	r2, pc, #4	; (adr r2, 8002924 <GAME_PLAY_Phase_Management+0x21c>)
 8002920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002924:	08004d15 	.word	0x08004d15
 8002928:	08002945 	.word	0x08002945
 800292c:	08002af9 	.word	0x08002af9
 8002930:	08002c63 	.word	0x08002c63
 8002934:	080032ed 	.word	0x080032ed
 8002938:	08003c9f 	.word	0x08003c9f
 800293c:	08003a8f 	.word	0x08003a8f
 8002940:	0800388d 	.word	0x0800388d
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 8002944:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002948:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f040 80a7 	bne.w	8002aa4 <GAME_PLAY_Phase_Management+0x39c>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002956:	4b4a      	ldr	r3, [pc, #296]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002958:	2200      	movs	r2, #0
 800295a:	9202      	str	r2, [sp, #8]
 800295c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002960:	9201      	str	r2, [sp, #4]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	9200      	str	r2, [sp, #0]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a4b      	ldr	r2, [pc, #300]	; (8002a98 <GAME_PLAY_Phase_Management+0x390>)
 800296a:	2123      	movs	r1, #35	; 0x23
 800296c:	206e      	movs	r0, #110	; 0x6e
 800296e:	f004 faa2 	bl	8006eb6 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002972:	4b43      	ldr	r3, [pc, #268]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002974:	2200      	movs	r2, #0
 8002976:	9202      	str	r2, [sp, #8]
 8002978:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800297c:	9201      	str	r2, [sp, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	9200      	str	r2, [sp, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a44      	ldr	r2, [pc, #272]	; (8002a98 <GAME_PLAY_Phase_Management+0x390>)
 8002986:	2123      	movs	r1, #35	; 0x23
 8002988:	206e      	movs	r0, #110	; 0x6e
 800298a:	f004 fade 	bl	8006f4a <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800298e:	2101      	movs	r1, #1
 8002990:	483f      	ldr	r0, [pc, #252]	; (8002a90 <GAME_PLAY_Phase_Management+0x388>)
 8002992:	f008 fa53 	bl	800ae3c <HAL_GPIO_ReadPin>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d15b      	bne.n	8002a54 <GAME_PLAY_Phase_Management+0x34c>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 800299c:	2000      	movs	r0, #0
 800299e:	f004 fcf1 	bl	8007384 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f004 fcff 	bl	80073a6 <ST7735_FillScreen1>
					MainGUI();
 80029a8:	f7ff f8c0 	bl	8001b2c <MainGUI>
					state_game->action = 50;
 80029ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2232      	movs	r2, #50	; 0x32
 80029b8:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 80029ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 80029ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029d2:	6818      	ldr	r0, [r3, #0]
 80029d4:	f7ff f889 	bl	8001aea <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 80029d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2203      	movs	r2, #3
 80029e4:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80029e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 80029f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029fc:	f005 f8d0 	bl	8007ba0 <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8002a00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a04:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	781a      	ldrb	r2, [r3, #0]
 8002a0c:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002a0e:	9203      	str	r2, [sp, #12]
 8002a10:	2200      	movs	r2, #0
 8002a12:	9202      	str	r2, [sp, #8]
 8002a14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a18:	9201      	str	r2, [sp, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	9200      	str	r2, [sp, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1e      	ldr	r2, [pc, #120]	; (8002a9c <GAME_PLAY_Phase_Management+0x394>)
 8002a22:	215a      	movs	r1, #90	; 0x5a
 8002a24:	2005      	movs	r0, #5
 8002a26:	f004 fada 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8002a2a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a2e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <GAME_PLAY_Phase_Management+0x378>)
 8002a38:	9203      	str	r2, [sp, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	9202      	str	r2, [sp, #8]
 8002a3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a42:	9201      	str	r2, [sp, #4]
 8002a44:	685a      	ldr	r2, [r3, #4]
 8002a46:	9200      	str	r2, [sp, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <GAME_PLAY_Phase_Management+0x398>)
 8002a4c:	215a      	movs	r1, #90	; 0x5a
 8002a4e:	2005      	movs	r0, #5
 8002a50:	f004 fac5 	bl	8006fde <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002a54:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a58:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002a5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a60:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002a64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a68:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	6809      	ldr	r1, [r1, #0]
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	f7fd fe6f 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8002a76:	f002 b950 	b.w	8004d1a <GAME_PLAY_Phase_Management+0x2612>
 8002a7a:	bf00      	nop
 8002a7c:	240002e8 	.word	0x240002e8
 8002a80:	2400000c 	.word	0x2400000c
 8002a84:	08011248 	.word	0x08011248
 8002a88:	0801124c 	.word	0x0801124c
 8002a8c:	0801125c 	.word	0x0801125c
 8002a90:	58020800 	.word	0x58020800
 8002a94:	08011268 	.word	0x08011268
 8002a98:	08011278 	.word	0x08011278
 8002a9c:	0801127c 	.word	0x0801127c
 8002aa0:	0801128c 	.word	0x0801128c
			else if (state_game->action == 1)
 8002aa4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aa8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	f042 8132 	bne.w	8004d1a <GAME_PLAY_Phase_Management+0x2612>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002ab6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	9301      	str	r3, [sp, #4]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2326      	movs	r3, #38	; 0x26
 8002aca:	2280      	movs	r2, #128	; 0x80
 8002acc:	215a      	movs	r1, #90	; 0x5a
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f004 fbce 	bl	8007270 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8002ad4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ad8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8002ae4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ae8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002af4:	f002 b911 	b.w	8004d1a <GAME_PLAY_Phase_Management+0x2612>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002af8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002afc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	781a      	ldrb	r2, [r3, #0]
 8002b04:	4ba6      	ldr	r3, [pc, #664]	; (8002da0 <GAME_PLAY_Phase_Management+0x698>)
 8002b06:	9203      	str	r2, [sp, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	9202      	str	r2, [sp, #8]
 8002b0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b10:	9201      	str	r2, [sp, #4]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	9200      	str	r2, [sp, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4aa2      	ldr	r2, [pc, #648]	; (8002da4 <GAME_PLAY_Phase_Management+0x69c>)
 8002b1a:	215a      	movs	r1, #90	; 0x5a
 8002b1c:	2005      	movs	r0, #5
 8002b1e:	f004 fa5e 	bl	8006fde <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002b22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b26:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002b30:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8002b34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b38:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b42:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8002b46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b4a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d147      	bne.n	8002be6 <GAME_PLAY_Phase_Management+0x4de>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8002b56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	789b      	ldrb	r3, [r3, #2]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10c      	bne.n	8002b80 <GAME_PLAY_Phase_Management+0x478>
					ptrYugiohCard_src->cardState = 0;
 8002b66:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002b6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8002b7c:	f002 b8d0 	b.w	8004d20 <GAME_PLAY_Phase_Management+0x2618>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8002b80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	785b      	ldrb	r3, [r3, #1]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f042 80c7 	bne.w	8004d20 <GAME_PLAY_Phase_Management+0x2618>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8002b92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b9a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	f7fe ff56 	bl	8001a50 <YUGIOH_Check_Spell_On_board>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
					if (idxC != 255) {
 8002baa:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002bae:	2bff      	cmp	r3, #255	; 0xff
 8002bb0:	d00c      	beq.n	8002bcc <GAME_PLAY_Phase_Management+0x4c4>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8002bb2:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002bb6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002bba:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fd fd93 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8002bcc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002bd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bd8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2202      	movs	r2, #2
 8002be0:	701a      	strb	r2, [r3, #0]
			break;
 8002be2:	f002 b89d 	b.w	8004d20 <GAME_PLAY_Phase_Management+0x2618>
			else if (state_game->action == 2)
 8002be6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	f042 8094 	bne.w	8004d20 <GAME_PLAY_Phase_Management+0x2618>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002bf8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bfc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	9301      	str	r3, [sp, #4]
 8002c06:	2300      	movs	r3, #0
 8002c08:	9300      	str	r3, [sp, #0]
 8002c0a:	2326      	movs	r3, #38	; 0x26
 8002c0c:	2280      	movs	r2, #128	; 0x80
 8002c0e:	215a      	movs	r1, #90	; 0x5a
 8002c10:	2000      	movs	r0, #0
 8002c12:	f004 fb2d 	bl	8007270 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002c16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c1a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2326      	movs	r3, #38	; 0x26
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	215a      	movs	r1, #90	; 0x5a
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f004 fb1e 	bl	8007270 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002c34:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002c38:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002c3c:	f7fd fd22 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8002c40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c44:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8002c4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2203      	movs	r2, #3
 8002c5a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002c5e:	f002 b85f 	b.w	8004d20 <GAME_PLAY_Phase_Management+0x2618>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8002c62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c66:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c70:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 3)
 8002c74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b03      	cmp	r3, #3
 8002c82:	f042 8050 	bne.w	8004d26 <GAME_PLAY_Phase_Management+0x261e>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8002c86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	f040 8093 	bne.w	8002db8 <GAME_PLAY_Phase_Management+0x6b0>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002c92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	781a      	ldrb	r2, [r3, #0]
 8002c9e:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <GAME_PLAY_Phase_Management+0x698>)
 8002ca0:	9203      	str	r2, [sp, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	9202      	str	r2, [sp, #8]
 8002ca6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002caa:	9201      	str	r2, [sp, #4]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	9200      	str	r2, [sp, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a3d      	ldr	r2, [pc, #244]	; (8002da8 <GAME_PLAY_Phase_Management+0x6a0>)
 8002cb4:	215a      	movs	r1, #90	; 0x5a
 8002cb6:	2005      	movs	r0, #5
 8002cb8:	f004 f991 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002cbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cc0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	781a      	ldrb	r2, [r3, #0]
 8002cc8:	4b35      	ldr	r3, [pc, #212]	; (8002da0 <GAME_PLAY_Phase_Management+0x698>)
 8002cca:	9203      	str	r2, [sp, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	9202      	str	r2, [sp, #8]
 8002cd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cd4:	9201      	str	r2, [sp, #4]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	9200      	str	r2, [sp, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a33      	ldr	r2, [pc, #204]	; (8002dac <GAME_PLAY_Phase_Management+0x6a4>)
 8002cde:	215a      	movs	r1, #90	; 0x5a
 8002ce0:	2005      	movs	r0, #5
 8002ce2:	f004 f97c 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002ce6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	781a      	ldrb	r2, [r3, #0]
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <GAME_PLAY_Phase_Management+0x698>)
 8002cf4:	9203      	str	r2, [sp, #12]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	9202      	str	r2, [sp, #8]
 8002cfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cfe:	9201      	str	r2, [sp, #4]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	9200      	str	r2, [sp, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <GAME_PLAY_Phase_Management+0x6a8>)
 8002d08:	2169      	movs	r1, #105	; 0x69
 8002d0a:	2005      	movs	r0, #5
 8002d0c:	f004 f967 	bl	8006fde <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8002d10:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002d14:	2200      	movs	r2, #0
 8002d16:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002d18:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002d1c:	799a      	ldrb	r2, [r3, #6]
 8002d1e:	4b25      	ldr	r3, [pc, #148]	; (8002db4 <GAME_PLAY_Phase_Management+0x6ac>)
 8002d20:	fba3 1302 	umull	r1, r3, r3, r2
 8002d24:	0899      	lsrs	r1, r3, #2
 8002d26:	460b      	mov	r3, r1
 8002d28:	005b      	lsls	r3, r3, #1
 8002d2a:	440b      	add	r3, r1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002d34:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8002d38:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002d3c:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	3308      	adds	r3, #8
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002d4c:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002d50:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002d54:	f7fd fc96 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002d58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d5c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	f7fe fb67 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002d66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d6a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002d74:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fc83 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8002d7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002d8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8002d9c:	f001 bfc3 	b.w	8004d26 <GAME_PLAY_Phase_Management+0x261e>
 8002da0:	2400000c 	.word	0x2400000c
 8002da4:	0801129c 	.word	0x0801129c
 8002da8:	080112ac 	.word	0x080112ac
 8002dac:	080112bc 	.word	0x080112bc
 8002db0:	080112cc 	.word	0x080112cc
 8002db4:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 2)
 8002db8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002dbc:	785b      	ldrb	r3, [r3, #1]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	f040 8146 	bne.w	8003050 <GAME_PLAY_Phase_Management+0x948>
					state_game->count_chain = 1;
 8002dc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8002dd2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002dd6:	789b      	ldrb	r3, [r3, #2]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	f040 80a7 	bne.w	8002f2c <GAME_PLAY_Phase_Management+0x824>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002dde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002de2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	4b92      	ldr	r3, [pc, #584]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	9202      	str	r2, [sp, #8]
 8002df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df6:	9201      	str	r2, [sp, #4]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	9200      	str	r2, [sp, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a8e      	ldr	r2, [pc, #568]	; (8003038 <GAME_PLAY_Phase_Management+0x930>)
 8002e00:	215a      	movs	r1, #90	; 0x5a
 8002e02:	2005      	movs	r0, #5
 8002e04:	f004 f8eb 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002e08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e0c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	781a      	ldrb	r2, [r3, #0]
 8002e14:	4b87      	ldr	r3, [pc, #540]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002e16:	9203      	str	r2, [sp, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	9202      	str	r2, [sp, #8]
 8002e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e20:	9201      	str	r2, [sp, #4]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	9200      	str	r2, [sp, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a84      	ldr	r2, [pc, #528]	; (800303c <GAME_PLAY_Phase_Management+0x934>)
 8002e2a:	215a      	movs	r1, #90	; 0x5a
 8002e2c:	2005      	movs	r0, #5
 8002e2e:	f004 f8d6 	bl	8006fde <ST7735_WriteStringNSS>
						state_game->action = 4;
 8002e32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e36:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2204      	movs	r2, #4
 8002e3e:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8002e40:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e44:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	f7fe fb9e 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8002e4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002e62:	f7fd fc0f 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8002e66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e6a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e74:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8002e7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e8c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002e90:	6812      	ldr	r2, [r2, #0]
 8002e92:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8002e96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002eb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eba:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	2326      	movs	r3, #38	; 0x26
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	215a      	movs	r1, #90	; 0x5a
 8002ece:	2000      	movs	r0, #0
 8002ed0:	f004 f9ce 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002ed4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ed8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	9301      	str	r3, [sp, #4]
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	2326      	movs	r3, #38	; 0x26
 8002ee8:	2280      	movs	r2, #128	; 0x80
 8002eea:	215a      	movs	r1, #90	; 0x5a
 8002eec:	2000      	movs	r0, #0
 8002eee:	f004 f9bf 	bl	8007270 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002ef2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ef6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002efa:	6818      	ldr	r0, [r3, #0]
 8002efc:	f7fe fa9a 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002f00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f04:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002f0e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002f12:	4618      	mov	r0, r3
 8002f14:	f7fd fbb6 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8002f18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f1c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2207      	movs	r2, #7
 8002f24:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002f28:	f001 befd 	b.w	8004d26 <GAME_PLAY_Phase_Management+0x261e>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002f2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f30:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	781a      	ldrb	r2, [r3, #0]
 8002f38:	4b3e      	ldr	r3, [pc, #248]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002f3a:	9203      	str	r2, [sp, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	9202      	str	r2, [sp, #8]
 8002f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f44:	9201      	str	r2, [sp, #4]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	9200      	str	r2, [sp, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a3c      	ldr	r2, [pc, #240]	; (8003040 <GAME_PLAY_Phase_Management+0x938>)
 8002f4e:	215a      	movs	r1, #90	; 0x5a
 8002f50:	2005      	movs	r0, #5
 8002f52:	f004 f844 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002f56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f5a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	781a      	ldrb	r2, [r3, #0]
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002f64:	9203      	str	r2, [sp, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	9202      	str	r2, [sp, #8]
 8002f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	9200      	str	r2, [sp, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a33      	ldr	r2, [pc, #204]	; (8003044 <GAME_PLAY_Phase_Management+0x93c>)
 8002f78:	215a      	movs	r1, #90	; 0x5a
 8002f7a:	2005      	movs	r0, #5
 8002f7c:	f004 f82f 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002f80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f84:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	781a      	ldrb	r2, [r3, #0]
 8002f8c:	4b29      	ldr	r3, [pc, #164]	; (8003034 <GAME_PLAY_Phase_Management+0x92c>)
 8002f8e:	9203      	str	r2, [sp, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	9202      	str	r2, [sp, #8]
 8002f94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f98:	9201      	str	r2, [sp, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	9200      	str	r2, [sp, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a29      	ldr	r2, [pc, #164]	; (8003048 <GAME_PLAY_Phase_Management+0x940>)
 8002fa2:	2169      	movs	r1, #105	; 0x69
 8002fa4:	2005      	movs	r0, #5
 8002fa6:	f004 f81a 	bl	8006fde <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002faa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002fae:	799a      	ldrb	r2, [r3, #6]
 8002fb0:	4b26      	ldr	r3, [pc, #152]	; (800304c <GAME_PLAY_Phase_Management+0x944>)
 8002fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8002fb6:	0899      	lsrs	r1, r3, #2
 8002fb8:	460b      	mov	r3, r1
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	440b      	add	r3, r1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002fc6:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8002fca:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002fce:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	3308      	adds	r3, #8
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	4413      	add	r3, r2
 8002fda:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002fde:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002fe2:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002fe6:	f7fd fb4d 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002fea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	f7fe fa1e 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002ff8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ffc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003006:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fb3a 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8003010:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003014:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800301e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003022:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800302e:	f001 be7a 	b.w	8004d26 <GAME_PLAY_Phase_Management+0x261e>
 8003032:	bf00      	nop
 8003034:	2400000c 	.word	0x2400000c
 8003038:	080112d4 	.word	0x080112d4
 800303c:	080112ec 	.word	0x080112ec
 8003040:	080112ac 	.word	0x080112ac
 8003044:	080112bc 	.word	0x080112bc
 8003048:	080112cc 	.word	0x080112cc
 800304c:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 8003050:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003054:	785b      	ldrb	r3, [r3, #1]
 8003056:	2b01      	cmp	r3, #1
 8003058:	f041 8665 	bne.w	8004d26 <GAME_PLAY_Phase_Management+0x261e>
					state_game->test = 2;
 800305c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003060:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 800306c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003070:	78db      	ldrb	r3, [r3, #3]
 8003072:	2b06      	cmp	r3, #6
 8003074:	f200 80a0 	bhi.w	80031b8 <GAME_PLAY_Phase_Management+0xab0>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003078:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800307c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	4b91      	ldr	r3, [pc, #580]	; (80032cc <GAME_PLAY_Phase_Management+0xbc4>)
 8003086:	9203      	str	r2, [sp, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	9202      	str	r2, [sp, #8]
 800308c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	9200      	str	r2, [sp, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a8d      	ldr	r2, [pc, #564]	; (80032d0 <GAME_PLAY_Phase_Management+0xbc8>)
 800309a:	215a      	movs	r1, #90	; 0x5a
 800309c:	2005      	movs	r0, #5
 800309e:	f003 ff9e 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80030a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	4b87      	ldr	r3, [pc, #540]	; (80032cc <GAME_PLAY_Phase_Management+0xbc4>)
 80030b0:	9203      	str	r2, [sp, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	9202      	str	r2, [sp, #8]
 80030b6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80030ba:	9201      	str	r2, [sp, #4]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	9200      	str	r2, [sp, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a84      	ldr	r2, [pc, #528]	; (80032d4 <GAME_PLAY_Phase_Management+0xbcc>)
 80030c4:	2169      	movs	r1, #105	; 0x69
 80030c6:	2005      	movs	r0, #5
 80030c8:	f003 ff89 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80030cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030d0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	781a      	ldrb	r2, [r3, #0]
 80030d8:	4b7c      	ldr	r3, [pc, #496]	; (80032cc <GAME_PLAY_Phase_Management+0xbc4>)
 80030da:	9203      	str	r2, [sp, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	9202      	str	r2, [sp, #8]
 80030e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e4:	9201      	str	r2, [sp, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	9200      	str	r2, [sp, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a7a      	ldr	r2, [pc, #488]	; (80032d8 <GAME_PLAY_Phase_Management+0xbd0>)
 80030ee:	215a      	movs	r1, #90	; 0x5a
 80030f0:	2005      	movs	r0, #5
 80030f2:	f003 ff74 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80030f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030fa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	4b72      	ldr	r3, [pc, #456]	; (80032cc <GAME_PLAY_Phase_Management+0xbc4>)
 8003104:	9203      	str	r2, [sp, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	9202      	str	r2, [sp, #8]
 800310a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800310e:	9201      	str	r2, [sp, #4]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	9200      	str	r2, [sp, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6f      	ldr	r2, [pc, #444]	; (80032d4 <GAME_PLAY_Phase_Management+0xbcc>)
 8003118:	2169      	movs	r1, #105	; 0x69
 800311a:	2005      	movs	r0, #5
 800311c:	f003 ff5f 	bl	8006fde <ST7735_WriteStringNSS>
						state_game->test = 1;
 8003120:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003124:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8003130:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003134:	799a      	ldrb	r2, [r3, #6]
 8003136:	4b69      	ldr	r3, [pc, #420]	; (80032dc <GAME_PLAY_Phase_Management+0xbd4>)
 8003138:	fba3 1302 	umull	r1, r3, r3, r2
 800313c:	0899      	lsrs	r1, r3, #2
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	005b      	lsls	r3, r3, #1
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 800314c:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 8003150:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003154:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	3308      	adds	r3, #8
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	4413      	add	r3, r2
 8003160:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003164:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003168:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800316c:	f7fd fa8a 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003170:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003174:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003178:	6818      	ldr	r0, [r3, #0]
 800317a:	f7fe f95b 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800317e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003182:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800318c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003190:	4618      	mov	r0, r3
 8003192:	f7fd fa77 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8003196:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800319a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80031a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80031b4:	f001 bdb7 	b.w	8004d26 <GAME_PLAY_Phase_Management+0x261e>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80031b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2326      	movs	r3, #38	; 0x26
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	215a      	movs	r1, #90	; 0x5a
 80031d0:	2000      	movs	r0, #0
 80031d2:	f004 f84d 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80031d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031da:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	9301      	str	r3, [sp, #4]
 80031e4:	2300      	movs	r3, #0
 80031e6:	9300      	str	r3, [sp, #0]
 80031e8:	2326      	movs	r3, #38	; 0x26
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	215a      	movs	r1, #90	; 0x5a
 80031ee:	2000      	movs	r0, #0
 80031f0:	f004 f83e 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(5, 90, "You advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80031f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031f8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	781a      	ldrb	r2, [r3, #0]
 8003200:	4b32      	ldr	r3, [pc, #200]	; (80032cc <GAME_PLAY_Phase_Management+0xbc4>)
 8003202:	9203      	str	r2, [sp, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	9202      	str	r2, [sp, #8]
 8003208:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800320c:	9201      	str	r2, [sp, #4]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	9200      	str	r2, [sp, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a32      	ldr	r2, [pc, #200]	; (80032e0 <GAME_PLAY_Phase_Management+0xbd8>)
 8003216:	215a      	movs	r1, #90	; 0x5a
 8003218:	2005      	movs	r0, #5
 800321a:	f003 fee0 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800321e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003222:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	781a      	ldrb	r2, [r3, #0]
 800322a:	4b28      	ldr	r3, [pc, #160]	; (80032cc <GAME_PLAY_Phase_Management+0xbc4>)
 800322c:	9203      	str	r2, [sp, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	9202      	str	r2, [sp, #8]
 8003232:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003236:	9201      	str	r2, [sp, #4]
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	9200      	str	r2, [sp, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a29      	ldr	r2, [pc, #164]	; (80032e4 <GAME_PLAY_Phase_Management+0xbdc>)
 8003240:	2169      	movs	r1, #105	; 0x69
 8003242:	2005      	movs	r0, #5
 8003244:	f003 fecb 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003248:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800324c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	781a      	ldrb	r2, [r3, #0]
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <GAME_PLAY_Phase_Management+0xbc4>)
 8003256:	9203      	str	r2, [sp, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	9202      	str	r2, [sp, #8]
 800325c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003260:	9201      	str	r2, [sp, #4]
 8003262:	685a      	ldr	r2, [r3, #4]
 8003264:	9200      	str	r2, [sp, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a1f      	ldr	r2, [pc, #124]	; (80032e8 <GAME_PLAY_Phase_Management+0xbe0>)
 800326a:	215a      	movs	r1, #90	; 0x5a
 800326c:	2005      	movs	r0, #5
 800326e:	f003 feb6 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003272:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003276:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	781a      	ldrb	r2, [r3, #0]
 800327e:	4b13      	ldr	r3, [pc, #76]	; (80032cc <GAME_PLAY_Phase_Management+0xbc4>)
 8003280:	9203      	str	r2, [sp, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	9202      	str	r2, [sp, #8]
 8003286:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	685a      	ldr	r2, [r3, #4]
 800328e:	9200      	str	r2, [sp, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a14      	ldr	r2, [pc, #80]	; (80032e4 <GAME_PLAY_Phase_Management+0xbdc>)
 8003294:	2169      	movs	r1, #105	; 0x69
 8003296:	2005      	movs	r0, #5
 8003298:	f003 fea1 	bl	8006fde <ST7735_WriteStringNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800329c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	f7fe f8c5 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 80032aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2204      	movs	r2, #4
 80032b6:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 80032b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2204      	movs	r2, #4
 80032c4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80032c8:	f001 bd2d 	b.w	8004d26 <GAME_PLAY_Phase_Management+0x261e>
 80032cc:	2400000c 	.word	0x2400000c
 80032d0:	08011300 	.word	0x08011300
 80032d4:	0801130c 	.word	0x0801130c
 80032d8:	08011318 	.word	0x08011318
 80032dc:	aaaaaaab 	.word	0xaaaaaaab
 80032e0:	08011328 	.word	0x08011328
 80032e4:	08011334 	.word	0x08011334
 80032e8:	0801133c 	.word	0x0801133c
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80032ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032f0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80032fa:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (playerAtk->noBTN == GPIO_PIN_RESET)
 80032fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003302:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	789b      	ldrb	r3, [r3, #2]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d11f      	bne.n	800334e <GAME_PLAY_Phase_Management+0xc46>
			{
				state_game->action = 0;
 800330e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003312:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800331c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003320:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800332c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003330:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	f7fe f87d 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_clear(&playerAtk->CardInPlayed);
 800333a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800333e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003348:	4618      	mov	r0, r3
 800334a:	f7fd f9d2 	bl	80006f2 <YUGIOH_card_clear>
			}

			if (state_game->action == 4)
 800334e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003352:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b04      	cmp	r3, #4
 800335c:	d166      	bne.n	800342c <GAME_PLAY_Phase_Management+0xd24>
			{
				// Reading Until RFID action += 1 Mean Card Detected

				ST7735_WriteStringNSS(5, 90, "Add 2 monster", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800335e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003362:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	781a      	ldrb	r2, [r3, #0]
 800336a:	4b68      	ldr	r3, [pc, #416]	; (800350c <GAME_PLAY_Phase_Management+0xe04>)
 800336c:	9203      	str	r2, [sp, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	9202      	str	r2, [sp, #8]
 8003372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003376:	9201      	str	r2, [sp, #4]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	9200      	str	r2, [sp, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a64      	ldr	r2, [pc, #400]	; (8003510 <GAME_PLAY_Phase_Management+0xe08>)
 8003380:	215a      	movs	r1, #90	; 0x5a
 8003382:	2005      	movs	r0, #5
 8003384:	f003 fe2b 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "to summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003388:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800338c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	781a      	ldrb	r2, [r3, #0]
 8003394:	4b5d      	ldr	r3, [pc, #372]	; (800350c <GAME_PLAY_Phase_Management+0xe04>)
 8003396:	9203      	str	r2, [sp, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	9202      	str	r2, [sp, #8]
 800339c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80033a0:	9201      	str	r2, [sp, #4]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	9200      	str	r2, [sp, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a5a      	ldr	r2, [pc, #360]	; (8003514 <GAME_PLAY_Phase_Management+0xe0c>)
 80033aa:	2169      	movs	r1, #105	; 0x69
 80033ac:	2005      	movs	r0, #5
 80033ae:	f003 fe16 	bl	8006fde <ST7735_WriteStringNSS>

				ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80033b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033b6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	4b53      	ldr	r3, [pc, #332]	; (800350c <GAME_PLAY_Phase_Management+0xe04>)
 80033c0:	9203      	str	r2, [sp, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	9202      	str	r2, [sp, #8]
 80033c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ca:	9201      	str	r2, [sp, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	9200      	str	r2, [sp, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a51      	ldr	r2, [pc, #324]	; (8003518 <GAME_PLAY_Phase_Management+0xe10>)
 80033d4:	215a      	movs	r1, #90	; 0x5a
 80033d6:	2005      	movs	r0, #5
 80033d8:	f003 fe01 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80033dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033e0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	4b48      	ldr	r3, [pc, #288]	; (800350c <GAME_PLAY_Phase_Management+0xe04>)
 80033ea:	9203      	str	r2, [sp, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	9202      	str	r2, [sp, #8]
 80033f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80033f4:	9201      	str	r2, [sp, #4]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	9200      	str	r2, [sp, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a47      	ldr	r2, [pc, #284]	; (800351c <GAME_PLAY_Phase_Management+0xe14>)
 80033fe:	2169      	movs	r1, #105	; 0x69
 8003400:	2005      	movs	r0, #5
 8003402:	f003 fdec 	bl	8006fde <ST7735_WriteStringNSS>

				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 8003406:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800340a:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 800340e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003412:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003416:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800341a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	6809      	ldr	r1, [r1, #0]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	f7fd faa6 	bl	8000974 <Player_Reading_Card_Monster_SPS>

					state_game->action = 0;
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
				}
			}
			break;
 8003428:	f001 bc80 	b.w	8004d2c <GAME_PLAY_Phase_Management+0x2624>
			else if (state_game->action == 5)
 800342c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003430:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b05      	cmp	r3, #5
 800343a:	d173      	bne.n	8003524 <GAME_PLAY_Phase_Management+0xe1c>
				ST7735_WriteStringNSS(5, 90, "Add 1 monster", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800343c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003440:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	781a      	ldrb	r2, [r3, #0]
 8003448:	4b30      	ldr	r3, [pc, #192]	; (800350c <GAME_PLAY_Phase_Management+0xe04>)
 800344a:	9203      	str	r2, [sp, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	9202      	str	r2, [sp, #8]
 8003450:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003454:	9201      	str	r2, [sp, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	9200      	str	r2, [sp, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <GAME_PLAY_Phase_Management+0xe18>)
 800345e:	215a      	movs	r1, #90	; 0x5a
 8003460:	2005      	movs	r0, #5
 8003462:	f003 fdbc 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "to summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003466:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800346a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	4b26      	ldr	r3, [pc, #152]	; (800350c <GAME_PLAY_Phase_Management+0xe04>)
 8003474:	9203      	str	r2, [sp, #12]
 8003476:	2200      	movs	r2, #0
 8003478:	9202      	str	r2, [sp, #8]
 800347a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800347e:	9201      	str	r2, [sp, #4]
 8003480:	685a      	ldr	r2, [r3, #4]
 8003482:	9200      	str	r2, [sp, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a23      	ldr	r2, [pc, #140]	; (8003514 <GAME_PLAY_Phase_Management+0xe0c>)
 8003488:	2169      	movs	r1, #105	; 0x69
 800348a:	2005      	movs	r0, #5
 800348c:	f003 fda7 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Opt advance", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003490:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003494:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	781a      	ldrb	r2, [r3, #0]
 800349c:	4b1b      	ldr	r3, [pc, #108]	; (800350c <GAME_PLAY_Phase_Management+0xe04>)
 800349e:	9203      	str	r2, [sp, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	9202      	str	r2, [sp, #8]
 80034a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a8:	9201      	str	r2, [sp, #4]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	9200      	str	r2, [sp, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a19      	ldr	r2, [pc, #100]	; (8003518 <GAME_PLAY_Phase_Management+0xe10>)
 80034b2:	215a      	movs	r1, #90	; 0x5a
 80034b4:	2005      	movs	r0, #5
 80034b6:	f003 fd92 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80034ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034be:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	4b11      	ldr	r3, [pc, #68]	; (800350c <GAME_PLAY_Phase_Management+0xe04>)
 80034c8:	9203      	str	r2, [sp, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	9202      	str	r2, [sp, #8]
 80034ce:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80034d2:	9201      	str	r2, [sp, #4]
 80034d4:	685a      	ldr	r2, [r3, #4]
 80034d6:	9200      	str	r2, [sp, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a10      	ldr	r2, [pc, #64]	; (800351c <GAME_PLAY_Phase_Management+0xe14>)
 80034dc:	2169      	movs	r1, #105	; 0x69
 80034de:	2005      	movs	r0, #5
 80034e0:	f003 fd7d 	bl	8006fde <ST7735_WriteStringNSS>
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 80034e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034e8:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80034ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034f0:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80034f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034f8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80034fc:	6812      	ldr	r2, [r2, #0]
 80034fe:	6809      	ldr	r1, [r1, #0]
 8003500:	6818      	ldr	r0, [r3, #0]
 8003502:	f7fd fa37 	bl	8000974 <Player_Reading_Card_Monster_SPS>
			break;
 8003506:	f001 bc11 	b.w	8004d2c <GAME_PLAY_Phase_Management+0x2624>
 800350a:	bf00      	nop
 800350c:	2400000c 	.word	0x2400000c
 8003510:	08011348 	.word	0x08011348
 8003514:	08011358 	.word	0x08011358
 8003518:	0801133c 	.word	0x0801133c
 800351c:	08011334 	.word	0x08011334
 8003520:	08011364 	.word	0x08011364
			else if (state_game->action == 6)
 8003524:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003528:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b06      	cmp	r3, #6
 8003532:	f041 83fb 	bne.w	8004d2c <GAME_PLAY_Phase_Management+0x2624>
				uint8_t monsterflag = 0 ;
 8003536:	2300      	movs	r3, #0
 8003538:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 800353c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003540:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800354a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800354e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003552:	78db      	ldrb	r3, [r3, #3]
 8003554:	2b04      	cmp	r3, #4
 8003556:	d804      	bhi.n	8003562 <GAME_PLAY_Phase_Management+0xe5a>
					monsterflag += 1;
 8003558:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800355c:	3301      	adds	r3, #1
 800355e:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst++;
 8003562:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003566:	3310      	adds	r3, #16
 8003568:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800356c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003570:	78db      	ldrb	r3, [r3, #3]
 8003572:	2b04      	cmp	r3, #4
 8003574:	d804      	bhi.n	8003580 <GAME_PLAY_Phase_Management+0xe78>
					monsterflag += 1;
 8003576:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800357a:	3301      	adds	r3, #1
 800357c:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				if (monsterflag == 2)
 8003580:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8003584:	2b02      	cmp	r3, #2
 8003586:	f040 80d4 	bne.w	8003732 <GAME_PLAY_Phase_Management+0x102a>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800358a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800358e:	799a      	ldrb	r2, [r3, #6]
 8003590:	4bb6      	ldr	r3, [pc, #728]	; (800386c <GAME_PLAY_Phase_Management+0x1164>)
 8003592:	fba3 1302 	umull	r1, r3, r3, r2
 8003596:	0899      	lsrs	r1, r3, #2
 8003598:	460b      	mov	r3, r1
 800359a:	005b      	lsls	r3, r3, #1
 800359c:	440b      	add	r3, r1
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80035a6:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 80035aa:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80035ae:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	3308      	adds	r3, #8
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	4413      	add	r3, r2
 80035ba:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80035be:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80035c2:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80035c6:	f7fd f85d 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 80035ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80035d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035dc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80035e0:	4611      	mov	r1, r2
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	f7fe f81d 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 80035e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035ec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 80035f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035fa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80035fe:	4611      	mov	r1, r2
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	f7fe f80e 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003606:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800360a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	f7fd ff10 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8003614:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003618:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003622:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003626:	4618      	mov	r0, r3
 8003628:	f7fd f82c 	bl	8000684 <YUGIOH_card_copy>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800362c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003630:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	2300      	movs	r3, #0
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2326      	movs	r3, #38	; 0x26
 8003640:	2280      	movs	r2, #128	; 0x80
 8003642:	215a      	movs	r1, #90	; 0x5a
 8003644:	2000      	movs	r0, #0
 8003646:	f003 fe13 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800364a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800364e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	9301      	str	r3, [sp, #4]
 8003658:	2300      	movs	r3, #0
 800365a:	9300      	str	r3, [sp, #0]
 800365c:	2326      	movs	r3, #38	; 0x26
 800365e:	2280      	movs	r2, #128	; 0x80
 8003660:	215a      	movs	r1, #90	; 0x5a
 8003662:	2000      	movs	r0, #0
 8003664:	f003 fe04 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003668:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800366c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	781a      	ldrb	r2, [r3, #0]
 8003674:	4b7e      	ldr	r3, [pc, #504]	; (8003870 <GAME_PLAY_Phase_Management+0x1168>)
 8003676:	9203      	str	r2, [sp, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	9202      	str	r2, [sp, #8]
 800367c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003680:	9201      	str	r2, [sp, #4]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	9200      	str	r2, [sp, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a7a      	ldr	r2, [pc, #488]	; (8003874 <GAME_PLAY_Phase_Management+0x116c>)
 800368a:	215a      	movs	r1, #90	; 0x5a
 800368c:	2005      	movs	r0, #5
 800368e:	f003 fca6 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a MONSTER!!", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003692:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003696:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	4b74      	ldr	r3, [pc, #464]	; (8003870 <GAME_PLAY_Phase_Management+0x1168>)
 80036a0:	9203      	str	r2, [sp, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	9202      	str	r2, [sp, #8]
 80036a6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80036aa:	9201      	str	r2, [sp, #4]
 80036ac:	685a      	ldr	r2, [r3, #4]
 80036ae:	9200      	str	r2, [sp, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a71      	ldr	r2, [pc, #452]	; (8003878 <GAME_PLAY_Phase_Management+0x1170>)
 80036b4:	2169      	movs	r1, #105	; 0x69
 80036b6:	2005      	movs	r0, #5
 80036b8:	f003 fc91 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80036bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036c0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	4b69      	ldr	r3, [pc, #420]	; (8003870 <GAME_PLAY_Phase_Management+0x1168>)
 80036ca:	9203      	str	r2, [sp, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	9202      	str	r2, [sp, #8]
 80036d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d4:	9201      	str	r2, [sp, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	9200      	str	r2, [sp, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a67      	ldr	r2, [pc, #412]	; (800387c <GAME_PLAY_Phase_Management+0x1174>)
 80036de:	215a      	movs	r1, #90	; 0x5a
 80036e0:	2005      	movs	r0, #5
 80036e2:	f003 fc7c 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a MONSTER!!", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80036e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036ea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	781a      	ldrb	r2, [r3, #0]
 80036f2:	4b5f      	ldr	r3, [pc, #380]	; (8003870 <GAME_PLAY_Phase_Management+0x1168>)
 80036f4:	9203      	str	r2, [sp, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	9202      	str	r2, [sp, #8]
 80036fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80036fe:	9201      	str	r2, [sp, #4]
 8003700:	685a      	ldr	r2, [r3, #4]
 8003702:	9200      	str	r2, [sp, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a5c      	ldr	r2, [pc, #368]	; (8003878 <GAME_PLAY_Phase_Management+0x1170>)
 8003708:	2169      	movs	r1, #105	; 0x69
 800370a:	2005      	movs	r0, #5
 800370c:	f003 fc67 	bl	8006fde <ST7735_WriteStringNSS>
					state_game->action = 0;
 8003710:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003714:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2200      	movs	r2, #0
 800371c:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800371e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003722:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800372e:	f001 bafd 	b.w	8004d2c <GAME_PLAY_Phase_Management+0x2624>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003732:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003736:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	2300      	movs	r3, #0
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2326      	movs	r3, #38	; 0x26
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	215a      	movs	r1, #90	; 0x5a
 800374a:	2000      	movs	r0, #0
 800374c:	f003 fd90 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003750:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003754:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	9301      	str	r3, [sp, #4]
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2326      	movs	r3, #38	; 0x26
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	215a      	movs	r1, #90	; 0x5a
 8003768:	2000      	movs	r0, #0
 800376a:	f003 fd81 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "You Fail", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800376e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003772:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	4b3d      	ldr	r3, [pc, #244]	; (8003870 <GAME_PLAY_Phase_Management+0x1168>)
 800377c:	9203      	str	r2, [sp, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	9202      	str	r2, [sp, #8]
 8003782:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003786:	9201      	str	r2, [sp, #4]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	9200      	str	r2, [sp, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3c      	ldr	r2, [pc, #240]	; (8003880 <GAME_PLAY_Phase_Management+0x1178>)
 8003790:	215a      	movs	r1, #90	; 0x5a
 8003792:	2005      	movs	r0, #5
 8003794:	f003 fc23 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003798:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800379c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	4b32      	ldr	r3, [pc, #200]	; (8003870 <GAME_PLAY_Phase_Management+0x1168>)
 80037a6:	9203      	str	r2, [sp, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	9202      	str	r2, [sp, #8]
 80037ac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80037b0:	9201      	str	r2, [sp, #4]
 80037b2:	685a      	ldr	r2, [r3, #4]
 80037b4:	9200      	str	r2, [sp, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a32      	ldr	r2, [pc, #200]	; (8003884 <GAME_PLAY_Phase_Management+0x117c>)
 80037ba:	2169      	movs	r1, #105	; 0x69
 80037bc:	2005      	movs	r0, #5
 80037be:	f003 fc0e 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent Fail", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80037c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	781a      	ldrb	r2, [r3, #0]
 80037ce:	4b28      	ldr	r3, [pc, #160]	; (8003870 <GAME_PLAY_Phase_Management+0x1168>)
 80037d0:	9203      	str	r2, [sp, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	9202      	str	r2, [sp, #8]
 80037d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037da:	9201      	str	r2, [sp, #4]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	9200      	str	r2, [sp, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a29      	ldr	r2, [pc, #164]	; (8003888 <GAME_PLAY_Phase_Management+0x1180>)
 80037e4:	215a      	movs	r1, #90	; 0x5a
 80037e6:	2005      	movs	r0, #5
 80037e8:	f003 fbf9 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "summon", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80037ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037f0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	781a      	ldrb	r2, [r3, #0]
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <GAME_PLAY_Phase_Management+0x1168>)
 80037fa:	9203      	str	r2, [sp, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	9202      	str	r2, [sp, #8]
 8003800:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003804:	9201      	str	r2, [sp, #4]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	9200      	str	r2, [sp, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a1d      	ldr	r2, [pc, #116]	; (8003884 <GAME_PLAY_Phase_Management+0x117c>)
 800380e:	2169      	movs	r1, #105	; 0x69
 8003810:	2005      	movs	r0, #5
 8003812:	f003 fbe4 	bl	8006fde <ST7735_WriteStringNSS>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003816:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800381a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	f7fd fe08 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8003824:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003828:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8003832:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003836:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f7fc ff1e 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 8003848:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800384c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2200      	movs	r2, #0
 8003854:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8003856:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800385a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003866:	f001 ba61 	b.w	8004d2c <GAME_PLAY_Phase_Management+0x2624>
 800386a:	bf00      	nop
 800386c:	aaaaaaab 	.word	0xaaaaaaab
 8003870:	2400000c 	.word	0x2400000c
 8003874:	08011300 	.word	0x08011300
 8003878:	08011374 	.word	0x08011374
 800387c:	08011318 	.word	0x08011318
 8003880:	08011380 	.word	0x08011380
 8003884:	08011334 	.word	0x08011334
 8003888:	0801138c 	.word	0x0801138c
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800388c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003890:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	781a      	ldrb	r2, [r3, #0]
 8003898:	4bba      	ldr	r3, [pc, #744]	; (8003b84 <GAME_PLAY_Phase_Management+0x147c>)
 800389a:	9203      	str	r2, [sp, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	9202      	str	r2, [sp, #8]
 80038a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038a4:	9201      	str	r2, [sp, #4]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	9200      	str	r2, [sp, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4ab6      	ldr	r2, [pc, #728]	; (8003b88 <GAME_PLAY_Phase_Management+0x1480>)
 80038ae:	215a      	movs	r1, #90	; 0x5a
 80038b0:	2005      	movs	r0, #5
 80038b2:	f003 fb94 	bl	8006fde <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80038b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038ba:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	4bb0      	ldr	r3, [pc, #704]	; (8003b84 <GAME_PLAY_Phase_Management+0x147c>)
 80038c4:	9203      	str	r2, [sp, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	9202      	str	r2, [sp, #8]
 80038ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038ce:	9201      	str	r2, [sp, #4]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	9200      	str	r2, [sp, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4aad      	ldr	r2, [pc, #692]	; (8003b8c <GAME_PLAY_Phase_Management+0x1484>)
 80038d8:	215a      	movs	r1, #90	; 0x5a
 80038da:	2005      	movs	r0, #5
 80038dc:	f003 fb7f 	bl	8006fde <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 80038e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d138      	bne.n	8003962 <GAME_PLAY_Phase_Management+0x125a>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 80038f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038f4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	789b      	ldrb	r3, [r3, #2]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11d      	bne.n	800393c <GAME_PLAY_Phase_Management+0x1234>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003900:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003904:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	9301      	str	r3, [sp, #4]
 800390e:	2300      	movs	r3, #0
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	2326      	movs	r3, #38	; 0x26
 8003914:	2280      	movs	r2, #128	; 0x80
 8003916:	215a      	movs	r1, #90	; 0x5a
 8003918:	2000      	movs	r0, #0
 800391a:	f003 fca9 	bl	8007270 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 800391e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003922:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	2205      	movs	r2, #5
 800392a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800392e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003932:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2200      	movs	r2, #0
 800393a:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800393c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003940:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003944:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003948:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800394c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003950:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	6809      	ldr	r1, [r1, #0]
 8003958:	6818      	ldr	r0, [r3, #0]
 800395a:	f7fd f977 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 800395e:	f001 b9e8 	b.w	8004d32 <GAME_PLAY_Phase_Management+0x262a>
			else if ((state_game->action == 5 )){
 8003962:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003966:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b05      	cmp	r3, #5
 8003970:	f041 81df 	bne.w	8004d32 <GAME_PLAY_Phase_Management+0x262a>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003974:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003978:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	9301      	str	r3, [sp, #4]
 8003982:	2300      	movs	r3, #0
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	2326      	movs	r3, #38	; 0x26
 8003988:	2280      	movs	r2, #128	; 0x80
 800398a:	215a      	movs	r1, #90	; 0x5a
 800398c:	2000      	movs	r0, #0
 800398e:	f003 fc6f 	bl	8007270 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003992:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003996:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80039a0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 80039a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039a8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80039ac:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	f7fe f821 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
				if (idx != 255)
 80039bc:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80039c0:	2bff      	cmp	r3, #255	; 0xff
 80039c2:	d05b      	beq.n	8003a7c <GAME_PLAY_Phase_Management+0x1374>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 80039c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039cc:	6818      	ldr	r0, [r3, #0]
 80039ce:	f7fd fddc 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80039d2:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80039d6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80039da:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	3308      	adds	r3, #8
 80039e2:	6812      	ldr	r2, [r2, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80039ea:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80039ee:	2200      	movs	r2, #0
 80039f0:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80039f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003a00:	4619      	mov	r1, r3
 8003a02:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003a06:	f7fc fe3d 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8003a0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a0e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003a18:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8003a22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003a30:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8003a3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a3e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003a48:	3301      	adds	r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8003a5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a5e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2206      	movs	r2, #6
 8003a66:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8003a6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2204      	movs	r2, #4
 8003a76:	701a      	strb	r2, [r3, #0]
			break;
 8003a78:	f001 b95b 	b.w	8004d32 <GAME_PLAY_Phase_Management+0x262a>
					state_game->action = 4;
 8003a7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2204      	movs	r2, #4
 8003a88:	701a      	strb	r2, [r3, #0]
			break;
 8003a8a:	f001 b952 	b.w	8004d32 <GAME_PLAY_Phase_Management+0x262a>
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003a8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	4b3a      	ldr	r3, [pc, #232]	; (8003b84 <GAME_PLAY_Phase_Management+0x147c>)
 8003a9c:	9203      	str	r2, [sp, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	9202      	str	r2, [sp, #8]
 8003aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003aa6:	9201      	str	r2, [sp, #4]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	9200      	str	r2, [sp, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a37      	ldr	r2, [pc, #220]	; (8003b8c <GAME_PLAY_Phase_Management+0x1484>)
 8003ab0:	215a      	movs	r1, #90	; 0x5a
 8003ab2:	2005      	movs	r0, #5
 8003ab4:	f003 fa93 	bl	8006fde <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003ab8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003abc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	781a      	ldrb	r2, [r3, #0]
 8003ac4:	4b2f      	ldr	r3, [pc, #188]	; (8003b84 <GAME_PLAY_Phase_Management+0x147c>)
 8003ac6:	9203      	str	r2, [sp, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	9202      	str	r2, [sp, #8]
 8003acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad0:	9201      	str	r2, [sp, #4]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	9200      	str	r2, [sp, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a2b      	ldr	r2, [pc, #172]	; (8003b88 <GAME_PLAY_Phase_Management+0x1480>)
 8003ada:	215a      	movs	r1, #90	; 0x5a
 8003adc:	2005      	movs	r0, #5
 8003ade:	f003 fa7e 	bl	8006fde <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8003ae2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ae6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	2b04      	cmp	r3, #4
 8003af0:	d14e      	bne.n	8003b90 <GAME_PLAY_Phase_Management+0x1488>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8003af2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003af6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	789b      	ldrb	r3, [r3, #2]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d12c      	bne.n	8003b5c <GAME_PLAY_Phase_Management+0x1454>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003b02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	9301      	str	r3, [sp, #4]
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2326      	movs	r3, #38	; 0x26
 8003b16:	2280      	movs	r2, #128	; 0x80
 8003b18:	215a      	movs	r1, #90	; 0x5a
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	f003 fba8 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003b20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b24:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	9301      	str	r3, [sp, #4]
 8003b2e:	2300      	movs	r3, #0
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	2326      	movs	r3, #38	; 0x26
 8003b34:	2280      	movs	r2, #128	; 0x80
 8003b36:	215a      	movs	r1, #90	; 0x5a
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f003 fb99 	bl	8007270 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8003b3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b42:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2205      	movs	r2, #5
 8003b4a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8003b4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerAtk);
 8003b5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b60:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003b64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b68:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003b6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b70:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003b74:	6812      	ldr	r2, [r2, #0]
 8003b76:	6809      	ldr	r1, [r1, #0]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	f7fd f867 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8003b7e:	f001 b8db 	b.w	8004d38 <GAME_PLAY_Phase_Management+0x2630>
 8003b82:	bf00      	nop
 8003b84:	2400000c 	.word	0x2400000c
 8003b88:	0801139c 	.word	0x0801139c
 8003b8c:	080113b4 	.word	0x080113b4
			else if ((state_game->action == 5 )){
 8003b90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b94:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	f041 80cb 	bne.w	8004d38 <GAME_PLAY_Phase_Management+0x2630>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8003ba2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ba6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003bb0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8003bb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bb8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003bbc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003bc0:	6818      	ldr	r0, [r3, #0]
 8003bc2:	f7fd ff19 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
				if (idx != 255)
 8003bcc:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8003bd0:	2bff      	cmp	r3, #255	; 0xff
 8003bd2:	d05b      	beq.n	8003c8c <GAME_PLAY_Phase_Management+0x1584>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8003bd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003bd8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	f7fd fcd4 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8003be2:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8003be6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003bea:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	3308      	adds	r3, #8
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8003bfa:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003bfe:	2200      	movs	r2, #0
 8003c00:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8003c02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c06:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003c10:	4619      	mov	r1, r3
 8003c12:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003c16:	f7fc fd35 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8003c1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c1e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003c28:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8003c32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c36:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003c40:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8003c4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003c58:	3301      	adds	r3, #1
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c60:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8003c6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2206      	movs	r2, #6
 8003c76:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8003c7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2204      	movs	r2, #4
 8003c86:	701a      	strb	r2, [r3, #0]
			break;
 8003c88:	f001 b856 	b.w	8004d38 <GAME_PLAY_Phase_Management+0x2630>
					state_game->action = 4;
 8003c8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2204      	movs	r2, #4
 8003c98:	701a      	strb	r2, [r3, #0]
			break;
 8003c9a:	f001 b84d 	b.w	8004d38 <GAME_PLAY_Phase_Management+0x2630>
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003c9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ca2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	781a      	ldrb	r2, [r3, #0]
 8003caa:	4b9b      	ldr	r3, [pc, #620]	; (8003f18 <GAME_PLAY_Phase_Management+0x1810>)
 8003cac:	9203      	str	r2, [sp, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	9202      	str	r2, [sp, #8]
 8003cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cb6:	9201      	str	r2, [sp, #4]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	9200      	str	r2, [sp, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a97      	ldr	r2, [pc, #604]	; (8003f1c <GAME_PLAY_Phase_Management+0x1814>)
 8003cc0:	215a      	movs	r1, #90	; 0x5a
 8003cc2:	2005      	movs	r0, #5
 8003cc4:	f003 f98b 	bl	8006fde <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8003cc8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ccc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	781a      	ldrb	r2, [r3, #0]
 8003cd4:	4b90      	ldr	r3, [pc, #576]	; (8003f18 <GAME_PLAY_Phase_Management+0x1810>)
 8003cd6:	9203      	str	r2, [sp, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	9202      	str	r2, [sp, #8]
 8003cdc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003ce0:	9201      	str	r2, [sp, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	9200      	str	r2, [sp, #0]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a8d      	ldr	r2, [pc, #564]	; (8003f20 <GAME_PLAY_Phase_Management+0x1818>)
 8003cea:	2169      	movs	r1, #105	; 0x69
 8003cec:	2005      	movs	r0, #5
 8003cee:	f003 f976 	bl	8006fde <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003cf2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cf6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	4b86      	ldr	r3, [pc, #536]	; (8003f18 <GAME_PLAY_Phase_Management+0x1810>)
 8003d00:	9203      	str	r2, [sp, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	9202      	str	r2, [sp, #8]
 8003d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d0a:	9201      	str	r2, [sp, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	9200      	str	r2, [sp, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a84      	ldr	r2, [pc, #528]	; (8003f24 <GAME_PLAY_Phase_Management+0x181c>)
 8003d14:	215a      	movs	r1, #90	; 0x5a
 8003d16:	2005      	movs	r0, #5
 8003d18:	f003 f961 	bl	8006fde <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8003d1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d20:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	781a      	ldrb	r2, [r3, #0]
 8003d28:	4b7b      	ldr	r3, [pc, #492]	; (8003f18 <GAME_PLAY_Phase_Management+0x1810>)
 8003d2a:	9203      	str	r2, [sp, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	9202      	str	r2, [sp, #8]
 8003d30:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003d34:	9201      	str	r2, [sp, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	9200      	str	r2, [sp, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a78      	ldr	r2, [pc, #480]	; (8003f20 <GAME_PLAY_Phase_Management+0x1818>)
 8003d3e:	2169      	movs	r1, #105	; 0x69
 8003d40:	2005      	movs	r0, #5
 8003d42:	f003 f94c 	bl	8006fde <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8003d46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d4a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	785b      	ldrb	r3, [r3, #1]
 8003d52:	4619      	mov	r1, r3
 8003d54:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d58:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003d5c:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	6812      	ldr	r2, [r2, #0]
 8003d64:	4413      	add	r3, r2
 8003d66:	3304      	adds	r3, #4
 8003d68:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8003d6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d70:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	785b      	ldrb	r3, [r3, #1]
 8003d78:	4619      	mov	r1, r3
 8003d7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d7e:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003d82:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	6812      	ldr	r2, [r2, #0]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

			if(state_game->action == 4)
 8003d92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003d96:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	f040 82ce 	bne.w	8004340 <GAME_PLAY_Phase_Management+0x1c38>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8003da4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003da8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	785a      	ldrb	r2, [r3, #1]
 8003db0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003db4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	f080 825e 	bcs.w	8004280 <GAME_PLAY_Phase_Management+0x1b78>
				{
					state_game->test = 165;
 8003dc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	22a5      	movs	r2, #165	; 0xa5
 8003dd0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8003dd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dd8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	4619      	mov	r1, r3
 8003de2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003de6:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003dea:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003dee:	011b      	lsls	r3, r3, #4
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	3304      	adds	r3, #4
 8003df6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

					if (ptrYugiohCard_src->cardSignature == 11)
 8003dfa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b0b      	cmp	r3, #11
 8003e02:	f040 8097 	bne.w	8003f34 <GAME_PLAY_Phase_Management+0x182c>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8003e06:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fd fc49 	bl	80016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8003e12:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fd fdbb 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
//						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
						state_game->count_chain++;
 8003e22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e36:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003e3e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	781a      	ldrb	r2, [r3, #0]
 8003e46:	4b34      	ldr	r3, [pc, #208]	; (8003f18 <GAME_PLAY_Phase_Management+0x1810>)
 8003e48:	9203      	str	r2, [sp, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	9202      	str	r2, [sp, #8]
 8003e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e52:	9201      	str	r2, [sp, #4]
 8003e54:	685a      	ldr	r2, [r3, #4]
 8003e56:	9200      	str	r2, [sp, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a33      	ldr	r2, [pc, #204]	; (8003f28 <GAME_PLAY_Phase_Management+0x1820>)
 8003e5c:	215a      	movs	r1, #90	; 0x5a
 8003e5e:	2005      	movs	r0, #5
 8003e60:	f003 f8bd 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003e64:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	781a      	ldrb	r2, [r3, #0]
 8003e6c:	4b2a      	ldr	r3, [pc, #168]	; (8003f18 <GAME_PLAY_Phase_Management+0x1810>)
 8003e6e:	9203      	str	r2, [sp, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	9202      	str	r2, [sp, #8]
 8003e74:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e78:	9201      	str	r2, [sp, #4]
 8003e7a:	685a      	ldr	r2, [r3, #4]
 8003e7c:	9200      	str	r2, [sp, #0]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	; (8003f2c <GAME_PLAY_Phase_Management+0x1824>)
 8003e82:	2169      	movs	r1, #105	; 0x69
 8003e84:	2005      	movs	r0, #5
 8003e86:	f003 f8aa 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003e8a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	781a      	ldrb	r2, [r3, #0]
 8003e92:	4b21      	ldr	r3, [pc, #132]	; (8003f18 <GAME_PLAY_Phase_Management+0x1810>)
 8003e94:	9203      	str	r2, [sp, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	9202      	str	r2, [sp, #8]
 8003e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e9e:	9201      	str	r2, [sp, #4]
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	9200      	str	r2, [sp, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <GAME_PLAY_Phase_Management+0x1828>)
 8003ea8:	215a      	movs	r1, #90	; 0x5a
 8003eaa:	2005      	movs	r0, #5
 8003eac:	f003 f897 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003eb0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	4b17      	ldr	r3, [pc, #92]	; (8003f18 <GAME_PLAY_Phase_Management+0x1810>)
 8003eba:	9203      	str	r2, [sp, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	9202      	str	r2, [sp, #8]
 8003ec0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003ec4:	9201      	str	r2, [sp, #4]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	9200      	str	r2, [sp, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a14      	ldr	r2, [pc, #80]	; (8003f20 <GAME_PLAY_Phase_Management+0x1818>)
 8003ece:	2169      	movs	r1, #105	; 0x69
 8003ed0:	2005      	movs	r0, #5
 8003ed2:	f003 f884 	bl	8006fde <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003ed6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eda:	f003 fe61 	bl	8007ba0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003ede:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	2326      	movs	r3, #38	; 0x26
 8003eee:	2280      	movs	r2, #128	; 0x80
 8003ef0:	215a      	movs	r1, #90	; 0x5a
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	f003 f9bc 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003ef8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	9301      	str	r3, [sp, #4]
 8003f02:	2300      	movs	r3, #0
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	2326      	movs	r3, #38	; 0x26
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	215a      	movs	r1, #90	; 0x5a
 8003f0c:	2000      	movs	r0, #0
 8003f0e:	f003 f9af 	bl	8007270 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 8003f12:	f000 bf14 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
 8003f16:	bf00      	nop
 8003f18:	2400000c 	.word	0x2400000c
 8003f1c:	080113d0 	.word	0x080113d0
 8003f20:	080113e0 	.word	0x080113e0
 8003f24:	080113f0 	.word	0x080113f0
 8003f28:	08011404 	.word	0x08011404
 8003f2c:	08011414 	.word	0x08011414
 8003f30:	0801141c 	.word	0x0801141c
					else if (ptrYugiohCard_src->cardSignature == 12)
 8003f34:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	2b0c      	cmp	r3, #12
 8003f3c:	f040 808c 	bne.w	8004058 <GAME_PLAY_Phase_Management+0x1950>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8003f40:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f7fd fbc8 	bl	80016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 8003f54:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd fd1a 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8003f64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f68:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	3301      	adds	r3, #1
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003f80:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	781a      	ldrb	r2, [r3, #0]
 8003f88:	4bb5      	ldr	r3, [pc, #724]	; (8004260 <GAME_PLAY_Phase_Management+0x1b58>)
 8003f8a:	9203      	str	r2, [sp, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	9202      	str	r2, [sp, #8]
 8003f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f94:	9201      	str	r2, [sp, #4]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	9200      	str	r2, [sp, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4ab1      	ldr	r2, [pc, #708]	; (8004264 <GAME_PLAY_Phase_Management+0x1b5c>)
 8003f9e:	215a      	movs	r1, #90	; 0x5a
 8003fa0:	2005      	movs	r0, #5
 8003fa2:	f003 f81c 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003fa6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	781a      	ldrb	r2, [r3, #0]
 8003fae:	4bac      	ldr	r3, [pc, #688]	; (8004260 <GAME_PLAY_Phase_Management+0x1b58>)
 8003fb0:	9203      	str	r2, [sp, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	9202      	str	r2, [sp, #8]
 8003fb6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003fba:	9201      	str	r2, [sp, #4]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	9200      	str	r2, [sp, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4aa9      	ldr	r2, [pc, #676]	; (8004268 <GAME_PLAY_Phase_Management+0x1b60>)
 8003fc4:	2169      	movs	r1, #105	; 0x69
 8003fc6:	2005      	movs	r0, #5
 8003fc8:	f003 f809 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003fcc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	781a      	ldrb	r2, [r3, #0]
 8003fd4:	4ba2      	ldr	r3, [pc, #648]	; (8004260 <GAME_PLAY_Phase_Management+0x1b58>)
 8003fd6:	9203      	str	r2, [sp, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	9202      	str	r2, [sp, #8]
 8003fdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fe0:	9201      	str	r2, [sp, #4]
 8003fe2:	685a      	ldr	r2, [r3, #4]
 8003fe4:	9200      	str	r2, [sp, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4aa0      	ldr	r2, [pc, #640]	; (800426c <GAME_PLAY_Phase_Management+0x1b64>)
 8003fea:	215a      	movs	r1, #90	; 0x5a
 8003fec:	2005      	movs	r0, #5
 8003fee:	f002 fff6 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003ff2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	4b99      	ldr	r3, [pc, #612]	; (8004260 <GAME_PLAY_Phase_Management+0x1b58>)
 8003ffc:	9203      	str	r2, [sp, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	9202      	str	r2, [sp, #8]
 8004002:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004006:	9201      	str	r2, [sp, #4]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	9200      	str	r2, [sp, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a98      	ldr	r2, [pc, #608]	; (8004270 <GAME_PLAY_Phase_Management+0x1b68>)
 8004010:	2169      	movs	r1, #105	; 0x69
 8004012:	2005      	movs	r0, #5
 8004014:	f002 ffe3 	bl	8006fde <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800401c:	f003 fdc0 	bl	8007ba0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004020:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	2300      	movs	r3, #0
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	2326      	movs	r3, #38	; 0x26
 8004030:	2280      	movs	r2, #128	; 0x80
 8004032:	215a      	movs	r1, #90	; 0x5a
 8004034:	2000      	movs	r0, #0
 8004036:	f003 f91b 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800403a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	2300      	movs	r3, #0
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2326      	movs	r3, #38	; 0x26
 800404a:	2280      	movs	r2, #128	; 0x80
 800404c:	215a      	movs	r1, #90	; 0x5a
 800404e:	2000      	movs	r0, #0
 8004050:	f003 f90e 	bl	8007270 <ST7735_FillRectangleNSS>
			break;
 8004054:	f000 be73 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8004058:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b0d      	cmp	r3, #13
 8004060:	d110      	bne.n	8004084 <GAME_PLAY_Phase_Management+0x197c>
						state_game->test = 166;
 8004062:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004066:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	22a6      	movs	r2, #166	; 0xa6
 800406e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8004072:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004076:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2205      	movs	r2, #5
 800407e:	701a      	strb	r2, [r3, #0]
			break;
 8004080:	f000 be5d 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8004084:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b0e      	cmp	r3, #14
 800408c:	d005      	beq.n	800409a <GAME_PLAY_Phase_Management+0x1992>
 800408e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	f040 8094 	bne.w	80041c2 <GAME_PLAY_Phase_Management+0x1aba>
						state_game->test = 133;
 800409a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800409e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2285      	movs	r2, #133	; 0x85
 80040a6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80040aa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f7fd fbe7 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser, ptrYugiohCard_src);
 80040be:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fd fc65 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 80040ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	3301      	adds	r3, #1
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040e2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80040ea:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	4b5b      	ldr	r3, [pc, #364]	; (8004260 <GAME_PLAY_Phase_Management+0x1b58>)
 80040f4:	9203      	str	r2, [sp, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	9202      	str	r2, [sp, #8]
 80040fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80040fe:	9201      	str	r2, [sp, #4]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	9200      	str	r2, [sp, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a5b      	ldr	r2, [pc, #364]	; (8004274 <GAME_PLAY_Phase_Management+0x1b6c>)
 8004108:	215a      	movs	r1, #90	; 0x5a
 800410a:	2005      	movs	r0, #5
 800410c:	f002 ff67 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004110:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	781a      	ldrb	r2, [r3, #0]
 8004118:	4b51      	ldr	r3, [pc, #324]	; (8004260 <GAME_PLAY_Phase_Management+0x1b58>)
 800411a:	9203      	str	r2, [sp, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	9202      	str	r2, [sp, #8]
 8004120:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8004124:	9201      	str	r2, [sp, #4]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	9200      	str	r2, [sp, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a52      	ldr	r2, [pc, #328]	; (8004278 <GAME_PLAY_Phase_Management+0x1b70>)
 800412e:	2169      	movs	r1, #105	; 0x69
 8004130:	2005      	movs	r0, #5
 8004132:	f002 ff54 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004136:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	781a      	ldrb	r2, [r3, #0]
 800413e:	4b48      	ldr	r3, [pc, #288]	; (8004260 <GAME_PLAY_Phase_Management+0x1b58>)
 8004140:	9203      	str	r2, [sp, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	9202      	str	r2, [sp, #8]
 8004146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800414a:	9201      	str	r2, [sp, #4]
 800414c:	685a      	ldr	r2, [r3, #4]
 800414e:	9200      	str	r2, [sp, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a46      	ldr	r2, [pc, #280]	; (800426c <GAME_PLAY_Phase_Management+0x1b64>)
 8004154:	215a      	movs	r1, #90	; 0x5a
 8004156:	2005      	movs	r0, #5
 8004158:	f002 ff41 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800415c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	781a      	ldrb	r2, [r3, #0]
 8004164:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <GAME_PLAY_Phase_Management+0x1b58>)
 8004166:	9203      	str	r2, [sp, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	9202      	str	r2, [sp, #8]
 800416c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8004170:	9201      	str	r2, [sp, #4]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	9200      	str	r2, [sp, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a40      	ldr	r2, [pc, #256]	; (800427c <GAME_PLAY_Phase_Management+0x1b74>)
 800417a:	2169      	movs	r1, #105	; 0x69
 800417c:	2005      	movs	r0, #5
 800417e:	f002 ff2e 	bl	8006fde <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004182:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004186:	f003 fd0b 	bl	8007ba0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800418a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	2300      	movs	r3, #0
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	2326      	movs	r3, #38	; 0x26
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	215a      	movs	r1, #90	; 0x5a
 800419e:	2000      	movs	r0, #0
 80041a0:	f003 f866 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80041a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	2300      	movs	r3, #0
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2326      	movs	r3, #38	; 0x26
 80041b4:	2280      	movs	r2, #128	; 0x80
 80041b6:	215a      	movs	r1, #90	; 0x5a
 80041b8:	2000      	movs	r0, #0
 80041ba:	f003 f859 	bl	8007270 <ST7735_FillRectangleNSS>
			break;
 80041be:	f000 bdbe 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
					else if(ptrYugiohCard_src->cardSignature == 16)
 80041c2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b10      	cmp	r3, #16
 80041ca:	d110      	bne.n	80041ee <GAME_PLAY_Phase_Management+0x1ae6>
						state_game->test = 124;
 80041cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041d0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	227c      	movs	r2, #124	; 0x7c
 80041d8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80041dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	2205      	movs	r2, #5
 80041e8:	701a      	strb	r2, [r3, #0]
			break;
 80041ea:	f000 bda8 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
					else if(ptrYugiohCard_src->cardSignature == 17)
 80041ee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	2b11      	cmp	r3, #17
 80041f6:	d108      	bne.n	800420a <GAME_PLAY_Phase_Management+0x1b02>
						state_game->action = 5;
 80041f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041fc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2205      	movs	r2, #5
 8004204:	701a      	strb	r2, [r3, #0]
			break;
 8004206:	f000 bd9a 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 800420a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	2b12      	cmp	r3, #18
 8004212:	d005      	beq.n	8004220 <GAME_PLAY_Phase_Management+0x1b18>
 8004214:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	2b13      	cmp	r3, #19
 800421c:	f040 858f 	bne.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8004220:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	785b      	ldrb	r3, [r3, #1]
 8004228:	2b00      	cmp	r3, #0
 800422a:	f040 8588 	bne.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800422e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004238:	4618      	mov	r0, r3
 800423a:	f7fd f9f2 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 800423e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004242:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	785b      	ldrb	r3, [r3, #1]
 800424a:	3301      	adds	r3, #1
 800424c:	b2da      	uxtb	r2, r3
 800424e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004252:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	705a      	strb	r2, [r3, #1]
			break;
 800425a:	f000 bd70 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
 800425e:	bf00      	nop
 8004260:	2400000c 	.word	0x2400000c
 8004264:	08011404 	.word	0x08011404
 8004268:	0801142c 	.word	0x0801142c
 800426c:	0801141c 	.word	0x0801141c
 8004270:	080113e0 	.word	0x080113e0
 8004274:	08011438 	.word	0x08011438
 8004278:	08011448 	.word	0x08011448
 800427c:	08011458 	.word	0x08011458
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004280:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004284:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	781b      	ldrb	r3, [r3, #0]
 800428c:	9301      	str	r3, [sp, #4]
 800428e:	2300      	movs	r3, #0
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	2326      	movs	r3, #38	; 0x26
 8004294:	2280      	movs	r2, #128	; 0x80
 8004296:	215a      	movs	r1, #90	; 0x5a
 8004298:	2000      	movs	r0, #0
 800429a:	f002 ffe9 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800429e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042a2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	2300      	movs	r3, #0
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	2326      	movs	r3, #38	; 0x26
 80042b2:	2280      	movs	r2, #128	; 0x80
 80042b4:	215a      	movs	r1, #90	; 0x5a
 80042b6:	2000      	movs	r0, #0
 80042b8:	f002 ffda 	bl	8007270 <ST7735_FillRectangleNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80042bc:	2300      	movs	r3, #0
 80042be:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80042c2:	e020      	b.n	8004306 <GAME_PLAY_Phase_Management+0x1bfe>
						state_game->ptrChainUser[i] = &dummyPlayer;
 80042c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80042d2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	f107 0210 	add.w	r2, r7, #16
 80042de:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 80042e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80042ee:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	f107 0210 	add.w	r2, r7, #16
 80042fa:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80042fc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8004300:	3301      	adds	r3, #1
 8004302:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8004306:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800430a:	2b05      	cmp	r3, #5
 800430c:	ddda      	ble.n	80042c4 <GAME_PLAY_Phase_Management+0x1bbc>
					state_game->ChainCount = 0;
 800430e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004312:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2200      	movs	r2, #0
 800431a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 800431e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004322:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800432c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004330:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800433c:	f000 bcff 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
			else if (state_game->action == 5)
 8004340:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004344:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b05      	cmp	r3, #5
 800434e:	f040 80c1 	bne.w	80044d4 <GAME_PLAY_Phase_Management+0x1dcc>
				state_game->test = 167;
 8004352:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004356:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	22a7      	movs	r2, #167	; 0xa7
 800435e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8004362:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004366:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	785b      	ldrb	r3, [r3, #1]
 800436e:	4619      	mov	r1, r3
 8004370:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004374:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004378:	f101 0344 	add.w	r3, r1, #68	; 0x44
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	6812      	ldr	r2, [r2, #0]
 8004380:	4413      	add	r3, r2
 8004382:	3304      	adds	r3, #4
 8004384:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 8004388:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	789b      	ldrb	r3, [r3, #2]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d123      	bne.n	80043dc <GAME_PLAY_Phase_Management+0x1cd4>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8004394:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f7fd f84a 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 80043a0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043aa:	4618      	mov	r0, r3
 80043ac:	f7fc f9a1 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 80043b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2204      	movs	r2, #4
 80043bc:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 80043be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043c2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	785b      	ldrb	r3, [r3, #1]
 80043ca:	3301      	adds	r3, #1
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	705a      	strb	r2, [r3, #1]
 80043da:	e028      	b.n	800442e <GAME_PLAY_Phase_Management+0x1d26>
				else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 80043dc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	785b      	ldrb	r3, [r3, #1]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d122      	bne.n	800442e <GAME_PLAY_Phase_Management+0x1d26>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 80043e8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fd f820 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 80043f4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc f977 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 8004404:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004408:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2204      	movs	r2, #4
 8004410:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8004412:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004416:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	785b      	ldrb	r3, [r3, #1]
 800441e:	3301      	adds	r3, #1
 8004420:	b2da      	uxtb	r2, r3
 8004422:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004426:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 800442e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b0d      	cmp	r3, #13
 8004436:	d110      	bne.n	800445a <GAME_PLAY_Phase_Management+0x1d52>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 8004438:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004442:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004446:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800444a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800444e:	6809      	ldr	r1, [r1, #0]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	f7fc fd59 	bl	8000f08 <Player_Reading_Card_Reborn>
			break;
 8004456:	f000 bc72 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
				else if(ptrYugiohCard_src->cardSignature == 16){
 800445a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b10      	cmp	r3, #16
 8004462:	d110      	bne.n	8004486 <GAME_PLAY_Phase_Management+0x1d7e>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 8004464:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800446e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004472:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004476:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800447a:	6809      	ldr	r1, [r1, #0]
 800447c:	6818      	ldr	r0, [r3, #0]
 800447e:	f7fc fdf1 	bl	8001064 <Player_Reading_Card_Ancient_Rule>
			break;
 8004482:	f000 bc5c 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
				else if (ptrYugiohCard_src->cardSignature == 17)
 8004486:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b11      	cmp	r3, #17
 800448e:	d110      	bne.n	80044b2 <GAME_PLAY_Phase_Management+0x1daa>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 8004490:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800449a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800449e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80044a6:	6809      	ldr	r1, [r1, #0]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	f7fc fc83 	bl	8000db4 <Player_Reading_Card_Stopdef>
			break;
 80044ae:	f000 bc46 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 80044b2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044bc:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80044c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044c4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80044c8:	6809      	ldr	r1, [r1, #0]
 80044ca:	6818      	ldr	r0, [r3, #0]
 80044cc:	f7fc f942 	bl	8000754 <Player_Reading_Card>
			break;
 80044d0:	f000 bc35 	b.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
			else if (state_game->action == 6)
 80044d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044d8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	f040 842c 	bne.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
				state_game->test = 169;
 80044e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	22a9      	movs	r2, #169	; 0xa9
 80044f2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80044f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044fa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	785b      	ldrb	r3, [r3, #1]
 8004502:	4619      	mov	r1, r3
 8004504:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004508:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800450c:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	4413      	add	r3, r2
 8004516:	3304      	adds	r3, #4
 8004518:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (ptrYugiohCard_src->cardSignature == 13){
 800451c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	2b0d      	cmp	r3, #13
 8004524:	f040 819d 	bne.w	8004862 <GAME_PLAY_Phase_Management+0x215a>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004528:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	781a      	ldrb	r2, [r3, #0]
 8004530:	4b66      	ldr	r3, [pc, #408]	; (80046cc <GAME_PLAY_Phase_Management+0x1fc4>)
 8004532:	9203      	str	r2, [sp, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	9202      	str	r2, [sp, #8]
 8004538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800453c:	9201      	str	r2, [sp, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	9200      	str	r2, [sp, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a62      	ldr	r2, [pc, #392]	; (80046d0 <GAME_PLAY_Phase_Management+0x1fc8>)
 8004546:	215a      	movs	r1, #90	; 0x5a
 8004548:	2005      	movs	r0, #5
 800454a:	f002 fd48 	bl	8006fde <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 800454e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	789b      	ldrb	r3, [r3, #2]
 8004556:	2b00      	cmp	r3, #0
 8004558:	f040 80c4 	bne.w	80046e4 <GAME_PLAY_Phase_Management+0x1fdc>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800455c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	9301      	str	r3, [sp, #4]
 8004566:	2300      	movs	r3, #0
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	2326      	movs	r3, #38	; 0x26
 800456c:	2280      	movs	r2, #128	; 0x80
 800456e:	215a      	movs	r1, #90	; 0x5a
 8004570:	2000      	movs	r0, #0
 8004572:	f002 fe7d 	bl	8007270 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8004576:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800457a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	22aa      	movs	r2, #170	; 0xaa
 8004582:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004586:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004590:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8004594:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004598:	2200      	movs	r2, #0
 800459a:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 800459c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045a6:	4619      	mov	r1, r3
 80045a8:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80045ac:	f7fc f86a 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80045b0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd f8d2 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 80045bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2204      	movs	r2, #4
 80045c8:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 80045ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fd f9df 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 80045da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045de:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	785b      	ldrb	r3, [r3, #1]
 80045e6:	3301      	adds	r3, #1
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045ee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80045f6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	781a      	ldrb	r2, [r3, #0]
 80045fe:	4b33      	ldr	r3, [pc, #204]	; (80046cc <GAME_PLAY_Phase_Management+0x1fc4>)
 8004600:	9203      	str	r2, [sp, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	9202      	str	r2, [sp, #8]
 8004606:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800460a:	9201      	str	r2, [sp, #4]
 800460c:	685a      	ldr	r2, [r3, #4]
 800460e:	9200      	str	r2, [sp, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a30      	ldr	r2, [pc, #192]	; (80046d4 <GAME_PLAY_Phase_Management+0x1fcc>)
 8004614:	215a      	movs	r1, #90	; 0x5a
 8004616:	2005      	movs	r0, #5
 8004618:	f002 fce1 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800461c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	781a      	ldrb	r2, [r3, #0]
 8004624:	4b29      	ldr	r3, [pc, #164]	; (80046cc <GAME_PLAY_Phase_Management+0x1fc4>)
 8004626:	9203      	str	r2, [sp, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	9202      	str	r2, [sp, #8]
 800462c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004630:	9201      	str	r2, [sp, #4]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	9200      	str	r2, [sp, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <GAME_PLAY_Phase_Management+0x1fd0>)
 800463a:	2169      	movs	r1, #105	; 0x69
 800463c:	2005      	movs	r0, #5
 800463e:	f002 fcce 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004642:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	781a      	ldrb	r2, [r3, #0]
 800464a:	4b20      	ldr	r3, [pc, #128]	; (80046cc <GAME_PLAY_Phase_Management+0x1fc4>)
 800464c:	9203      	str	r2, [sp, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	9202      	str	r2, [sp, #8]
 8004652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004656:	9201      	str	r2, [sp, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	9200      	str	r2, [sp, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1f      	ldr	r2, [pc, #124]	; (80046dc <GAME_PLAY_Phase_Management+0x1fd4>)
 8004660:	215a      	movs	r1, #90	; 0x5a
 8004662:	2005      	movs	r0, #5
 8004664:	f002 fcbb 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004668:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	4b16      	ldr	r3, [pc, #88]	; (80046cc <GAME_PLAY_Phase_Management+0x1fc4>)
 8004672:	9203      	str	r2, [sp, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	9202      	str	r2, [sp, #8]
 8004678:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800467c:	9201      	str	r2, [sp, #4]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	9200      	str	r2, [sp, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a16      	ldr	r2, [pc, #88]	; (80046e0 <GAME_PLAY_Phase_Management+0x1fd8>)
 8004686:	2169      	movs	r1, #105	; 0x69
 8004688:	2005      	movs	r0, #5
 800468a:	f002 fca8 	bl	8006fde <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 800468e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004692:	f003 fa85 	bl	8007ba0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004696:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	781b      	ldrb	r3, [r3, #0]
 800469e:	9301      	str	r3, [sp, #4]
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2326      	movs	r3, #38	; 0x26
 80046a6:	2280      	movs	r2, #128	; 0x80
 80046a8:	215a      	movs	r1, #90	; 0x5a
 80046aa:	2000      	movs	r0, #0
 80046ac:	f002 fde0 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80046b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2326      	movs	r3, #38	; 0x26
 80046c0:	2280      	movs	r2, #128	; 0x80
 80046c2:	215a      	movs	r1, #90	; 0x5a
 80046c4:	2000      	movs	r0, #0
 80046c6:	f002 fdd3 	bl	8007270 <ST7735_FillRectangleNSS>
			break;
 80046ca:	e338      	b.n	8004d3e <GAME_PLAY_Phase_Management+0x2636>
 80046cc:	2400000c 	.word	0x2400000c
 80046d0:	0801129c 	.word	0x0801129c
 80046d4:	08011404 	.word	0x08011404
 80046d8:	08011464 	.word	0x08011464
 80046dc:	0801141c 	.word	0x0801141c
 80046e0:	080113e0 	.word	0x080113e0
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 80046e4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	785b      	ldrb	r3, [r3, #1]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f040 8326 	bne.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80046f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	9301      	str	r3, [sp, #4]
 80046fc:	2300      	movs	r3, #0
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2326      	movs	r3, #38	; 0x26
 8004702:	2280      	movs	r2, #128	; 0x80
 8004704:	215a      	movs	r1, #90	; 0x5a
 8004706:	2000      	movs	r0, #0
 8004708:	f002 fdb2 	bl	8007270 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 800470c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004710:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	22ab      	movs	r2, #171	; 0xab
 8004718:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 800471c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004726:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 800472a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800472e:	2201      	movs	r2, #1
 8004730:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004732:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800473c:	4619      	mov	r1, r3
 800473e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004742:	f7fb ff9f 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8004746:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4618      	mov	r0, r3
 800474e:	f7fd f807 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 8004752:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004756:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2204      	movs	r2, #4
 800475e:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004760:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800476a:	4618      	mov	r0, r3
 800476c:	f7fd f914 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004770:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004774:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	785b      	ldrb	r3, [r3, #1]
 800477c:	3301      	adds	r3, #1
 800477e:	b2da      	uxtb	r2, r3
 8004780:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004784:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800478c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	781a      	ldrb	r2, [r3, #0]
 8004794:	4ba5      	ldr	r3, [pc, #660]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 8004796:	9203      	str	r2, [sp, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	9202      	str	r2, [sp, #8]
 800479c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047a0:	9201      	str	r2, [sp, #4]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	9200      	str	r2, [sp, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4aa1      	ldr	r2, [pc, #644]	; (8004a30 <GAME_PLAY_Phase_Management+0x2328>)
 80047aa:	215a      	movs	r1, #90	; 0x5a
 80047ac:	2005      	movs	r0, #5
 80047ae:	f002 fc16 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80047b2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	4b9c      	ldr	r3, [pc, #624]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 80047bc:	9203      	str	r2, [sp, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80047c6:	9201      	str	r2, [sp, #4]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	9200      	str	r2, [sp, #0]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a99      	ldr	r2, [pc, #612]	; (8004a34 <GAME_PLAY_Phase_Management+0x232c>)
 80047d0:	2169      	movs	r1, #105	; 0x69
 80047d2:	2005      	movs	r0, #5
 80047d4:	f002 fc03 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80047d8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	781a      	ldrb	r2, [r3, #0]
 80047e0:	4b92      	ldr	r3, [pc, #584]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 80047e2:	9203      	str	r2, [sp, #12]
 80047e4:	2200      	movs	r2, #0
 80047e6:	9202      	str	r2, [sp, #8]
 80047e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ec:	9201      	str	r2, [sp, #4]
 80047ee:	685a      	ldr	r2, [r3, #4]
 80047f0:	9200      	str	r2, [sp, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a90      	ldr	r2, [pc, #576]	; (8004a38 <GAME_PLAY_Phase_Management+0x2330>)
 80047f6:	215a      	movs	r1, #90	; 0x5a
 80047f8:	2005      	movs	r0, #5
 80047fa:	f002 fbf0 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80047fe:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	4b89      	ldr	r3, [pc, #548]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 8004808:	9203      	str	r2, [sp, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	9202      	str	r2, [sp, #8]
 800480e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004812:	9201      	str	r2, [sp, #4]
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	9200      	str	r2, [sp, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a88      	ldr	r2, [pc, #544]	; (8004a3c <GAME_PLAY_Phase_Management+0x2334>)
 800481c:	2169      	movs	r1, #105	; 0x69
 800481e:	2005      	movs	r0, #5
 8004820:	f002 fbdd 	bl	8006fde <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004828:	f003 f9ba 	bl	8007ba0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800482c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	9301      	str	r3, [sp, #4]
 8004836:	2300      	movs	r3, #0
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	2326      	movs	r3, #38	; 0x26
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	215a      	movs	r1, #90	; 0x5a
 8004840:	2000      	movs	r0, #0
 8004842:	f002 fd15 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004846:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	9301      	str	r3, [sp, #4]
 8004850:	2300      	movs	r3, #0
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	2326      	movs	r3, #38	; 0x26
 8004856:	2280      	movs	r2, #128	; 0x80
 8004858:	215a      	movs	r1, #90	; 0x5a
 800485a:	2000      	movs	r0, #0
 800485c:	f002 fd08 	bl	8007270 <ST7735_FillRectangleNSS>
			break;
 8004860:	e26d      	b.n	8004d3e <GAME_PLAY_Phase_Management+0x2636>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8004862:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	2b10      	cmp	r3, #16
 800486a:	f040 81aa 	bne.w	8004bc2 <GAME_PLAY_Phase_Management+0x24ba>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800486e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	9301      	str	r3, [sp, #4]
 8004878:	2300      	movs	r3, #0
 800487a:	9300      	str	r3, [sp, #0]
 800487c:	2326      	movs	r3, #38	; 0x26
 800487e:	2280      	movs	r2, #128	; 0x80
 8004880:	215a      	movs	r1, #90	; 0x5a
 8004882:	2000      	movs	r0, #0
 8004884:	f002 fcf4 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004888:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	781a      	ldrb	r2, [r3, #0]
 8004890:	4b66      	ldr	r3, [pc, #408]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 8004892:	9203      	str	r2, [sp, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	9202      	str	r2, [sp, #8]
 8004898:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800489c:	9201      	str	r2, [sp, #4]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	9200      	str	r2, [sp, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a66      	ldr	r2, [pc, #408]	; (8004a40 <GAME_PLAY_Phase_Management+0x2338>)
 80048a6:	215a      	movs	r1, #90	; 0x5a
 80048a8:	2005      	movs	r0, #5
 80048aa:	f002 fb98 	bl	8006fde <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80048ae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	789b      	ldrb	r3, [r3, #2]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f040 80c4 	bne.w	8004a44 <GAME_PLAY_Phase_Management+0x233c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80048bc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	9301      	str	r3, [sp, #4]
 80048c6:	2300      	movs	r3, #0
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	2326      	movs	r3, #38	; 0x26
 80048cc:	2280      	movs	r2, #128	; 0x80
 80048ce:	215a      	movs	r1, #90	; 0x5a
 80048d0:	2000      	movs	r0, #0
 80048d2:	f002 fccd 	bl	8007270 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 80048d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	22aa      	movs	r2, #170	; 0xaa
 80048e2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80048e6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80048f0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 80048f4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80048f8:	2200      	movs	r2, #0
 80048fa:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80048fc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004906:	4619      	mov	r1, r3
 8004908:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800490c:	f7fb feba 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8004910:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4618      	mov	r0, r3
 8004918:	f7fc ff8c 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 800491c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004920:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2204      	movs	r2, #4
 8004928:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 800492a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004934:	4618      	mov	r0, r3
 8004936:	f7fd f82f 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 800493a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800493e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	3301      	adds	r3, #1
 8004948:	b2da      	uxtb	r2, r3
 800494a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800494e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004956:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	4b33      	ldr	r3, [pc, #204]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 8004960:	9203      	str	r2, [sp, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	9202      	str	r2, [sp, #8]
 8004966:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800496a:	9201      	str	r2, [sp, #4]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	9200      	str	r2, [sp, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2f      	ldr	r2, [pc, #188]	; (8004a30 <GAME_PLAY_Phase_Management+0x2328>)
 8004974:	215a      	movs	r1, #90	; 0x5a
 8004976:	2005      	movs	r0, #5
 8004978:	f002 fb31 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800497c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	781a      	ldrb	r2, [r3, #0]
 8004984:	4b29      	ldr	r3, [pc, #164]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 8004986:	9203      	str	r2, [sp, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	9202      	str	r2, [sp, #8]
 800498c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004990:	9201      	str	r2, [sp, #4]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	9200      	str	r2, [sp, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a26      	ldr	r2, [pc, #152]	; (8004a34 <GAME_PLAY_Phase_Management+0x232c>)
 800499a:	2169      	movs	r1, #105	; 0x69
 800499c:	2005      	movs	r0, #5
 800499e:	f002 fb1e 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80049a2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	4b20      	ldr	r3, [pc, #128]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 80049ac:	9203      	str	r2, [sp, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	9202      	str	r2, [sp, #8]
 80049b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b6:	9201      	str	r2, [sp, #4]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	9200      	str	r2, [sp, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1e      	ldr	r2, [pc, #120]	; (8004a38 <GAME_PLAY_Phase_Management+0x2330>)
 80049c0:	215a      	movs	r1, #90	; 0x5a
 80049c2:	2005      	movs	r0, #5
 80049c4:	f002 fb0b 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80049c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	781a      	ldrb	r2, [r3, #0]
 80049d0:	4b16      	ldr	r3, [pc, #88]	; (8004a2c <GAME_PLAY_Phase_Management+0x2324>)
 80049d2:	9203      	str	r2, [sp, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	9202      	str	r2, [sp, #8]
 80049d8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80049dc:	9201      	str	r2, [sp, #4]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	9200      	str	r2, [sp, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a15      	ldr	r2, [pc, #84]	; (8004a3c <GAME_PLAY_Phase_Management+0x2334>)
 80049e6:	2169      	movs	r1, #105	; 0x69
 80049e8:	2005      	movs	r0, #5
 80049ea:	f002 faf8 	bl	8006fde <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80049ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049f2:	f003 f8d5 	bl	8007ba0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80049f6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	9301      	str	r3, [sp, #4]
 8004a00:	2300      	movs	r3, #0
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	2326      	movs	r3, #38	; 0x26
 8004a06:	2280      	movs	r2, #128	; 0x80
 8004a08:	215a      	movs	r1, #90	; 0x5a
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f002 fc30 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004a10:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	9301      	str	r3, [sp, #4]
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	2326      	movs	r3, #38	; 0x26
 8004a20:	2280      	movs	r2, #128	; 0x80
 8004a22:	215a      	movs	r1, #90	; 0x5a
 8004a24:	2000      	movs	r0, #0
 8004a26:	f002 fc23 	bl	8007270 <ST7735_FillRectangleNSS>
			break;
 8004a2a:	e188      	b.n	8004d3e <GAME_PLAY_Phase_Management+0x2636>
 8004a2c:	2400000c 	.word	0x2400000c
 8004a30:	08011404 	.word	0x08011404
 8004a34:	08011464 	.word	0x08011464
 8004a38:	0801141c 	.word	0x0801141c
 8004a3c:	080113e0 	.word	0x080113e0
 8004a40:	0801129c 	.word	0x0801129c
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8004a44:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f040 8176 	bne.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004a52:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	9301      	str	r3, [sp, #4]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	9300      	str	r3, [sp, #0]
 8004a60:	2326      	movs	r3, #38	; 0x26
 8004a62:	2280      	movs	r2, #128	; 0x80
 8004a64:	215a      	movs	r1, #90	; 0x5a
 8004a66:	2000      	movs	r0, #0
 8004a68:	f002 fc02 	bl	8007270 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8004a6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a70:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	22ab      	movs	r2, #171	; 0xab
 8004a78:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004a7c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004a86:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8004a8a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004a8e:	2201      	movs	r2, #1
 8004a90:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004a92:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004aa2:	f7fb fdef 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8004aa6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fc fec1 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8004ab2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ab6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2204      	movs	r2, #4
 8004abe:	701a      	strb	r2, [r3, #0]
						YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004ac0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fc ff64 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
						state_game->count_chain++;
 8004ad0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ad4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	785b      	ldrb	r3, [r3, #1]
 8004adc:	3301      	adds	r3, #1
 8004ade:	b2da      	uxtb	r2, r3
 8004ae0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ae4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004aec:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	781a      	ldrb	r2, [r3, #0]
 8004af4:	4ba4      	ldr	r3, [pc, #656]	; (8004d88 <GAME_PLAY_Phase_Management+0x2680>)
 8004af6:	9203      	str	r2, [sp, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	9202      	str	r2, [sp, #8]
 8004afc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b00:	9201      	str	r2, [sp, #4]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	9200      	str	r2, [sp, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4aa0      	ldr	r2, [pc, #640]	; (8004d8c <GAME_PLAY_Phase_Management+0x2684>)
 8004b0a:	215a      	movs	r1, #90	; 0x5a
 8004b0c:	2005      	movs	r0, #5
 8004b0e:	f002 fa66 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004b12:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	781a      	ldrb	r2, [r3, #0]
 8004b1a:	4b9b      	ldr	r3, [pc, #620]	; (8004d88 <GAME_PLAY_Phase_Management+0x2680>)
 8004b1c:	9203      	str	r2, [sp, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	9202      	str	r2, [sp, #8]
 8004b22:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b26:	9201      	str	r2, [sp, #4]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	9200      	str	r2, [sp, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a98      	ldr	r2, [pc, #608]	; (8004d90 <GAME_PLAY_Phase_Management+0x2688>)
 8004b30:	2169      	movs	r1, #105	; 0x69
 8004b32:	2005      	movs	r0, #5
 8004b34:	f002 fa53 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004b38:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	781a      	ldrb	r2, [r3, #0]
 8004b40:	4b91      	ldr	r3, [pc, #580]	; (8004d88 <GAME_PLAY_Phase_Management+0x2680>)
 8004b42:	9203      	str	r2, [sp, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	9202      	str	r2, [sp, #8]
 8004b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b4c:	9201      	str	r2, [sp, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	9200      	str	r2, [sp, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a8f      	ldr	r2, [pc, #572]	; (8004d94 <GAME_PLAY_Phase_Management+0x268c>)
 8004b56:	215a      	movs	r1, #90	; 0x5a
 8004b58:	2005      	movs	r0, #5
 8004b5a:	f002 fa40 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004b5e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	781a      	ldrb	r2, [r3, #0]
 8004b66:	4b88      	ldr	r3, [pc, #544]	; (8004d88 <GAME_PLAY_Phase_Management+0x2680>)
 8004b68:	9203      	str	r2, [sp, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	9202      	str	r2, [sp, #8]
 8004b6e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004b72:	9201      	str	r2, [sp, #4]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	9200      	str	r2, [sp, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a87      	ldr	r2, [pc, #540]	; (8004d98 <GAME_PLAY_Phase_Management+0x2690>)
 8004b7c:	2169      	movs	r1, #105	; 0x69
 8004b7e:	2005      	movs	r0, #5
 8004b80:	f002 fa2d 	bl	8006fde <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004b88:	f003 f80a 	bl	8007ba0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004b8c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	9301      	str	r3, [sp, #4]
 8004b96:	2300      	movs	r3, #0
 8004b98:	9300      	str	r3, [sp, #0]
 8004b9a:	2326      	movs	r3, #38	; 0x26
 8004b9c:	2280      	movs	r2, #128	; 0x80
 8004b9e:	215a      	movs	r1, #90	; 0x5a
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f002 fb65 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004ba6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	2326      	movs	r3, #38	; 0x26
 8004bb6:	2280      	movs	r2, #128	; 0x80
 8004bb8:	215a      	movs	r1, #90	; 0x5a
 8004bba:	2000      	movs	r0, #0
 8004bbc:	f002 fb58 	bl	8007270 <ST7735_FillRectangleNSS>
			break;
 8004bc0:	e0bd      	b.n	8004d3e <GAME_PLAY_Phase_Management+0x2636>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8004bc2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b11      	cmp	r3, #17
 8004bca:	f040 80b8 	bne.w	8004d3e <GAME_PLAY_Phase_Management+0x2636>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 8004bce:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004bd8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8004bdc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004be6:	4619      	mov	r1, r3
 8004be8:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004bec:	f7fb fd4a 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8004bf0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4610      	mov	r0, r2
 8004c00:	f7fc fe94 	bl	800192c <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8004c04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c08:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2204      	movs	r2, #4
 8004c10:	701a      	strb	r2, [r3, #0]
					YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8004c12:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fc febb 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
					state_game->count_chain++;
 8004c22:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c26:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	785b      	ldrb	r3, [r3, #1]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c36:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004c3e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	781a      	ldrb	r2, [r3, #0]
 8004c46:	4b50      	ldr	r3, [pc, #320]	; (8004d88 <GAME_PLAY_Phase_Management+0x2680>)
 8004c48:	9203      	str	r2, [sp, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	9202      	str	r2, [sp, #8]
 8004c4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c52:	9201      	str	r2, [sp, #4]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	9200      	str	r2, [sp, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a4c      	ldr	r2, [pc, #304]	; (8004d8c <GAME_PLAY_Phase_Management+0x2684>)
 8004c5c:	215a      	movs	r1, #90	; 0x5a
 8004c5e:	2005      	movs	r0, #5
 8004c60:	f002 f9bd 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004c64:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	4b46      	ldr	r3, [pc, #280]	; (8004d88 <GAME_PLAY_Phase_Management+0x2680>)
 8004c6e:	9203      	str	r2, [sp, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	9202      	str	r2, [sp, #8]
 8004c74:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004c78:	9201      	str	r2, [sp, #4]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	9200      	str	r2, [sp, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a46      	ldr	r2, [pc, #280]	; (8004d9c <GAME_PLAY_Phase_Management+0x2694>)
 8004c82:	2169      	movs	r1, #105	; 0x69
 8004c84:	2005      	movs	r0, #5
 8004c86:	f002 f9aa 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004c8a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	4b3d      	ldr	r3, [pc, #244]	; (8004d88 <GAME_PLAY_Phase_Management+0x2680>)
 8004c94:	9203      	str	r2, [sp, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	9202      	str	r2, [sp, #8]
 8004c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c9e:	9201      	str	r2, [sp, #4]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	9200      	str	r2, [sp, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a3b      	ldr	r2, [pc, #236]	; (8004d94 <GAME_PLAY_Phase_Management+0x268c>)
 8004ca8:	215a      	movs	r1, #90	; 0x5a
 8004caa:	2005      	movs	r0, #5
 8004cac:	f002 f997 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004cb0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	781a      	ldrb	r2, [r3, #0]
 8004cb8:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <GAME_PLAY_Phase_Management+0x2680>)
 8004cba:	9203      	str	r2, [sp, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	9202      	str	r2, [sp, #8]
 8004cc0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004cc4:	9201      	str	r2, [sp, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	9200      	str	r2, [sp, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a32      	ldr	r2, [pc, #200]	; (8004d98 <GAME_PLAY_Phase_Management+0x2690>)
 8004cce:	2169      	movs	r1, #105	; 0x69
 8004cd0:	2005      	movs	r0, #5
 8004cd2:	f002 f984 	bl	8006fde <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8004cd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004cda:	f002 ff61 	bl	8007ba0 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004cde:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	9301      	str	r3, [sp, #4]
 8004ce8:	2300      	movs	r3, #0
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	2326      	movs	r3, #38	; 0x26
 8004cee:	2280      	movs	r2, #128	; 0x80
 8004cf0:	215a      	movs	r1, #90	; 0x5a
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f002 fabc 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004cf8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	9301      	str	r3, [sp, #4]
 8004d02:	2300      	movs	r3, #0
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	2326      	movs	r3, #38	; 0x26
 8004d08:	2280      	movs	r2, #128	; 0x80
 8004d0a:	215a      	movs	r1, #90	; 0x5a
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f002 faaf 	bl	8007270 <ST7735_FillRectangleNSS>
			break;
 8004d12:	e014      	b.n	8004d3e <GAME_PLAY_Phase_Management+0x2636>
			break;
 8004d14:	bf00      	nop
 8004d16:	f001 ba84 	b.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
			break;
 8004d1a:	bf00      	nop
 8004d1c:	f001 ba81 	b.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
			break;
 8004d20:	bf00      	nop
 8004d22:	f001 ba7e 	b.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
			break;
 8004d26:	bf00      	nop
 8004d28:	f001 ba7b 	b.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
			break;
 8004d2c:	bf00      	nop
 8004d2e:	f001 ba78 	b.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
			break;
 8004d32:	bf00      	nop
 8004d34:	f001 ba75 	b.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
			break;
 8004d38:	bf00      	nop
 8004d3a:	f001 ba72 	b.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
			break;
 8004d3e:	bf00      	nop
		}
		break;
 8004d40:	f001 ba6f 	b.w	8006222 <GAME_PLAY_Phase_Management+0x3b1a>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8004d44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d48:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004d4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004d54:	6811      	ldr	r1, [r2, #0]
 8004d56:	6818      	ldr	r0, [r3, #0]
 8004d58:	f7fc ffa8 	bl	8001cac <LCDvalue>
			switch(PBS){
 8004d5c:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 8004d60:	2b06      	cmp	r3, #6
 8004d62:	f201 8260 	bhi.w	8006226 <GAME_PLAY_Phase_Management+0x3b1e>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <GAME_PLAY_Phase_Management+0x2664>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08006203 	.word	0x08006203
 8004d70:	08004da1 	.word	0x08004da1
 8004d74:	080054d1 	.word	0x080054d1
 8004d78:	0800519b 	.word	0x0800519b
 8004d7c:	08005805 	.word	0x08005805
 8004d80:	08005ae5 	.word	0x08005ae5
 8004d84:	08006029 	.word	0x08006029
 8004d88:	2400000c 	.word	0x2400000c
 8004d8c:	08011404 	.word	0x08011404
 8004d90:	08011464 	.word	0x08011464
 8004d94:	0801141c 	.word	0x0801141c
 8004d98:	080113e0 	.word	0x080113e0
 8004d9c:	08011474 	.word	0x08011474
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8004da0:	4ba2      	ldr	r3, [pc, #648]	; (800502c <GAME_PLAY_Phase_Management+0x2924>)
 8004da2:	2200      	movs	r2, #0
 8004da4:	9202      	str	r2, [sp, #8]
 8004da6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004daa:	9201      	str	r2, [sp, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	9200      	str	r2, [sp, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a9f      	ldr	r2, [pc, #636]	; (8005030 <GAME_PLAY_Phase_Management+0x2928>)
 8004db4:	2123      	movs	r1, #35	; 0x23
 8004db6:	206e      	movs	r0, #110	; 0x6e
 8004db8:	f002 f87d 	bl	8006eb6 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8004dbc:	4b9b      	ldr	r3, [pc, #620]	; (800502c <GAME_PLAY_Phase_Management+0x2924>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	9202      	str	r2, [sp, #8]
 8004dc2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004dc6:	9201      	str	r2, [sp, #4]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	9200      	str	r2, [sp, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a98      	ldr	r2, [pc, #608]	; (8005030 <GAME_PLAY_Phase_Management+0x2928>)
 8004dd0:	2123      	movs	r1, #35	; 0x23
 8004dd2:	206e      	movs	r0, #110	; 0x6e
 8004dd4:	f002 f8b9 	bl	8006f4a <ST7735_WriteString1>
				if(state_game->action == 50){
 8004dd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ddc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	781b      	ldrb	r3, [r3, #0]
 8004de4:	2b32      	cmp	r3, #50	; 0x32
 8004de6:	f040 809b 	bne.w	8004f20 <GAME_PLAY_Phase_Management+0x2818>
					Player_Reading_Card_Monster_Battle(RFIDmain, state_game, playerDef);
 8004dea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dee:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004df2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004df6:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004dfa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dfe:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004e02:	6812      	ldr	r2, [r2, #0]
 8004e04:	6809      	ldr	r1, [r1, #0]
 8004e06:	6818      	ldr	r0, [r3, #0]
 8004e08:	f7fb fe78 	bl	8000afc <Player_Reading_Card_Monster_Battle>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8004e0c:	2101      	movs	r1, #1
 8004e0e:	4889      	ldr	r0, [pc, #548]	; (8005034 <GAME_PLAY_Phase_Management+0x292c>)
 8004e10:	f006 f814 	bl	800ae3c <HAL_GPIO_ReadPin>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f041 81f5 	bne.w	8006206 <GAME_PLAY_Phase_Management+0x3afe>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8004e1c:	4886      	ldr	r0, [pc, #536]	; (8005038 <GAME_PLAY_Phase_Management+0x2930>)
 8004e1e:	f009 fa0b 	bl	800e238 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8004e22:	4986      	ldr	r1, [pc, #536]	; (800503c <GAME_PLAY_Phase_Management+0x2934>)
 8004e24:	f04f 0200 	mov.w	r2, #0
 8004e28:	f04f 0300 	mov.w	r3, #0
 8004e2c:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004e30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e34:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	9301      	str	r3, [sp, #4]
 8004e3e:	2300      	movs	r3, #0
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	2326      	movs	r3, #38	; 0x26
 8004e44:	2280      	movs	r2, #128	; 0x80
 8004e46:	215a      	movs	r1, #90	; 0x5a
 8004e48:	2000      	movs	r0, #0
 8004e4a:	f002 fa11 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004e4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e52:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	781a      	ldrb	r2, [r3, #0]
 8004e5a:	4b79      	ldr	r3, [pc, #484]	; (8005040 <GAME_PLAY_Phase_Management+0x2938>)
 8004e5c:	9203      	str	r2, [sp, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	9202      	str	r2, [sp, #8]
 8004e62:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004e66:	9201      	str	r2, [sp, #4]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	9200      	str	r2, [sp, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a75      	ldr	r2, [pc, #468]	; (8005044 <GAME_PLAY_Phase_Management+0x293c>)
 8004e70:	215a      	movs	r1, #90	; 0x5a
 8004e72:	200f      	movs	r0, #15
 8004e74:	f002 f8b3 	bl	8006fde <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8004e78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004e7c:	f002 fe90 	bl	8007ba0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004e80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	9301      	str	r3, [sp, #4]
 8004e8e:	2300      	movs	r3, #0
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	2326      	movs	r3, #38	; 0x26
 8004e94:	2280      	movs	r2, #128	; 0x80
 8004e96:	215a      	movs	r1, #90	; 0x5a
 8004e98:	2000      	movs	r0, #0
 8004e9a:	f002 f9e9 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004e9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ea2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	9301      	str	r3, [sp, #4]
 8004eac:	2300      	movs	r3, #0
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	2326      	movs	r3, #38	; 0x26
 8004eb2:	2280      	movs	r2, #128	; 0x80
 8004eb4:	215a      	movs	r1, #90	; 0x5a
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f002 f9da 	bl	8007270 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8004ebc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ec0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8004eca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ece:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ed2:	6818      	ldr	r0, [r3, #0]
 8004ed4:	f7fc fde8 	bl	8001aa8 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8004ed8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004edc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8004ee6:	2b02      	cmp	r3, #2
 8004ee8:	d108      	bne.n	8004efc <GAME_PLAY_Phase_Management+0x27f4>
							state_game->MainGame_State = second_player;
 8004eea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004eee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8004efa:	e007      	b.n	8004f0c <GAME_PLAY_Phase_Management+0x2804>
						}
						else{
							state_game->MainGame_State = first_player;
 8004efc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f00:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2202      	movs	r2, #2
 8004f08:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8004f0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f10:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8004f1c:	f001 b973 	b.w	8006206 <GAME_PLAY_Phase_Management+0x3afe>
				else if(state_game->action == 51){
 8004f20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f24:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	2b33      	cmp	r3, #51	; 0x33
 8004f2e:	f041 816a 	bne.w	8006206 <GAME_PLAY_Phase_Management+0x3afe>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004f32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	9301      	str	r3, [sp, #4]
 8004f40:	2300      	movs	r3, #0
 8004f42:	9300      	str	r3, [sp, #0]
 8004f44:	2326      	movs	r3, #38	; 0x26
 8004f46:	2280      	movs	r2, #128	; 0x80
 8004f48:	215a      	movs	r1, #90	; 0x5a
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f002 f990 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004f50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f54:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	9301      	str	r3, [sp, #4]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	2326      	movs	r3, #38	; 0x26
 8004f64:	2280      	movs	r2, #128	; 0x80
 8004f66:	215a      	movs	r1, #90	; 0x5a
 8004f68:	2000      	movs	r0, #0
 8004f6a:	f002 f981 	bl	8007270 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004f74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f78:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f82:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 8004f86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004f8a:	799b      	ldrb	r3, [r3, #6]
 8004f8c:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8004f90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f94:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3338      	adds	r3, #56	; 0x38
 8004f9c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8004fa6:	e013      	b.n	8004fd0 <GAME_PLAY_Phase_Management+0x28c8>
						if(ptrYugiohCard_dst->cardData == 0){
 8004fa8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d104      	bne.n	8004fbc <GAME_PLAY_Phase_Management+0x28b4>
							check_def_mon++;
 8004fb2:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 8004fbc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004fc0:	3310      	adds	r3, #16
 8004fc2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8004fc6:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8004fca:	3301      	adds	r3, #1
 8004fcc:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8004fd0:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d9e7      	bls.n	8004fa8 <GAME_PLAY_Phase_Management+0x28a0>
					uint8_t flag_can_atk = 0;
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004fde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fe2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004fec:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8004ff0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ff4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3338      	adds	r3, #56	; 0x38
 8004ffc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8005000:	2300      	movs	r3, #0
 8005002:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8005006:	e02c      	b.n	8005062 <GAME_PLAY_Phase_Management+0x295a>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8005008:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800500c:	68da      	ldr	r2, [r3, #12]
 800500e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	429a      	cmp	r2, r3
 8005016:	d11a      	bne.n	800504e <GAME_PLAY_Phase_Management+0x2946>
							if(ptrYugiohCard_dst->cardState == 1){
 8005018:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800501c:	789b      	ldrb	r3, [r3, #2]
 800501e:	2b01      	cmp	r3, #1
 8005020:	d112      	bne.n	8005048 <GAME_PLAY_Phase_Management+0x2940>
								flag_can_atk = 2;
 8005022:	2302      	movs	r3, #2
 8005024:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 8005028:	e01f      	b.n	800506a <GAME_PLAY_Phase_Management+0x2962>
 800502a:	bf00      	nop
 800502c:	2400000c 	.word	0x2400000c
 8005030:	08011484 	.word	0x08011484
 8005034:	58020800 	.word	0x58020800
 8005038:	240002e8 	.word	0x240002e8
 800503c:	24000ea0 	.word	0x24000ea0
 8005040:	24000014 	.word	0x24000014
 8005044:	08011488 	.word	0x08011488
								flag_can_atk = 1;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 800504e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005052:	3310      	adds	r3, #16
 8005054:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8005058:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 800505c:	3301      	adds	r3, #1
 800505e:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8005062:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8005066:	2b02      	cmp	r3, #2
 8005068:	d9ce      	bls.n	8005008 <GAME_PLAY_Phase_Management+0x2900>
					if (check_def_mon < 3)
 800506a:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800506e:	2b02      	cmp	r3, #2
 8005070:	d810      	bhi.n	8005094 <GAME_PLAY_Phase_Management+0x298c>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8005072:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 8005076:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800507a:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	3301      	adds	r3, #1
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	4413      	add	r3, r2
 8005086:	3304      	adds	r3, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <GAME_PLAY_Phase_Management+0x298c>
							flag_can_atk = 1;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 8005094:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 8005098:	2b02      	cmp	r3, #2
 800509a:	d165      	bne.n	8005168 <GAME_PLAY_Phase_Management+0x2a60>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 800509c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80050a0:	7a1b      	ldrb	r3, [r3, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d047      	beq.n	8005136 <GAME_PLAY_Phase_Management+0x2a2e>
 80050a6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80050aa:	789b      	ldrb	r3, [r3, #2]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d142      	bne.n	8005136 <GAME_PLAY_Phase_Management+0x2a2e>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 80050b0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80050b4:	7a1b      	ldrb	r3, [r3, #8]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80050be:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 80050c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050ce:	4619      	mov	r1, r3
 80050d0:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80050d4:	f7fb fad6 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 80050d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050dc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80050e6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 80050ea:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d104      	bne.n	80050fc <GAME_PLAY_Phase_Management+0x29f4>
								ptrYugiohCard_dst->targetPosition = 99;
 80050f2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80050f6:	2263      	movs	r2, #99	; 0x63
 80050f8:	71da      	strb	r2, [r3, #7]
 80050fa:	e004      	b.n	8005106 <GAME_PLAY_Phase_Management+0x29fe>
								ptrYugiohCard_dst->targetPosition = targetpos;
 80050fc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005100:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 8005104:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8005106:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800510a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	f7fc f990 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8005114:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005118:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2234      	movs	r2, #52	; 0x34
 8005120:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8005122:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005126:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2203      	movs	r2, #3
 800512e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005132:	f001 b868 	b.w	8006206 <GAME_PLAY_Phase_Management+0x3afe>
							state_game->test = 222;
 8005136:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800513a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	22de      	movs	r2, #222	; 0xde
 8005142:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 8005146:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800514a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	2232      	movs	r2, #50	; 0x32
 8005152:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8005154:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005158:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005164:	f001 b84f 	b.w	8006206 <GAME_PLAY_Phase_Management+0x3afe>
						state_game->test = 223;
 8005168:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800516c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	22df      	movs	r2, #223	; 0xdf
 8005174:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8005178:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800517c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2232      	movs	r2, #50	; 0x32
 8005184:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8005186:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800518a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2201      	movs	r2, #1
 8005192:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005196:	f001 b836 	b.w	8006206 <GAME_PLAY_Phase_Management+0x3afe>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800519a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800519e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	781a      	ldrb	r2, [r3, #0]
 80051a6:	4bc5      	ldr	r3, [pc, #788]	; (80054bc <GAME_PLAY_Phase_Management+0x2db4>)
 80051a8:	9203      	str	r2, [sp, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	9202      	str	r2, [sp, #8]
 80051ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051b2:	9201      	str	r2, [sp, #4]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	9200      	str	r2, [sp, #0]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4ac1      	ldr	r2, [pc, #772]	; (80054c0 <GAME_PLAY_Phase_Management+0x2db8>)
 80051bc:	215a      	movs	r1, #90	; 0x5a
 80051be:	2005      	movs	r0, #5
 80051c0:	f001 ff0d 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80051c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	781a      	ldrb	r2, [r3, #0]
 80051d0:	4bba      	ldr	r3, [pc, #744]	; (80054bc <GAME_PLAY_Phase_Management+0x2db4>)
 80051d2:	9203      	str	r2, [sp, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	9202      	str	r2, [sp, #8]
 80051d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051dc:	9201      	str	r2, [sp, #4]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	9200      	str	r2, [sp, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4ab7      	ldr	r2, [pc, #732]	; (80054c4 <GAME_PLAY_Phase_Management+0x2dbc>)
 80051e6:	2169      	movs	r1, #105	; 0x69
 80051e8:	2005      	movs	r0, #5
 80051ea:	f001 fef8 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80051ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051f2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	4bb0      	ldr	r3, [pc, #704]	; (80054bc <GAME_PLAY_Phase_Management+0x2db4>)
 80051fc:	9203      	str	r2, [sp, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	9202      	str	r2, [sp, #8]
 8005202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005206:	9201      	str	r2, [sp, #4]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	9200      	str	r2, [sp, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4aae      	ldr	r2, [pc, #696]	; (80054c8 <GAME_PLAY_Phase_Management+0x2dc0>)
 8005210:	215a      	movs	r1, #90	; 0x5a
 8005212:	2005      	movs	r0, #5
 8005214:	f001 fee3 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005218:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800521c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	781a      	ldrb	r2, [r3, #0]
 8005224:	4ba5      	ldr	r3, [pc, #660]	; (80054bc <GAME_PLAY_Phase_Management+0x2db4>)
 8005226:	9203      	str	r2, [sp, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	9202      	str	r2, [sp, #8]
 800522c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005230:	9201      	str	r2, [sp, #4]
 8005232:	685a      	ldr	r2, [r3, #4]
 8005234:	9200      	str	r2, [sp, #0]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4aa4      	ldr	r2, [pc, #656]	; (80054cc <GAME_PLAY_Phase_Management+0x2dc4>)
 800523a:	2169      	movs	r1, #105	; 0x69
 800523c:	2005      	movs	r0, #5
 800523e:	f001 fece 	bl	8006fde <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8005242:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005246:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b34      	cmp	r3, #52	; 0x34
 8005250:	d141      	bne.n	80052d6 <GAME_PLAY_Phase_Management+0x2bce>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8005252:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005256:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	789b      	ldrb	r3, [r3, #2]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d115      	bne.n	800528e <GAME_PLAY_Phase_Management+0x2b86>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8005262:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005266:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2204      	movs	r2, #4
 800526e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 8005272:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005276:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2236      	movs	r2, #54	; 0x36
 800527e:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 8005280:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005284:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	2200      	movs	r2, #0
 800528c:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800528e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005292:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005296:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800529a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800529e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052a2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80052a6:	6812      	ldr	r2, [r2, #0]
 80052a8:	6809      	ldr	r1, [r1, #0]
 80052aa:	6818      	ldr	r0, [r3, #0]
 80052ac:	f7fb fcce 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 80052b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052b4:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80052b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052bc:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80052c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052c4:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80052c8:	6812      	ldr	r2, [r2, #0]
 80052ca:	6809      	ldr	r1, [r1, #0]
 80052cc:	6818      	ldr	r0, [r3, #0]
 80052ce:	f7fb ffbf 	bl	8001250 <Player_Reading_Card_Monster_Effect>





				break;
 80052d2:	f000 bf9a 	b.w	800620a <GAME_PLAY_Phase_Management+0x3b02>
				else if ((state_game->action == 53 ))
 80052d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	2b35      	cmp	r3, #53	; 0x35
 80052e4:	f040 8791 	bne.w	800620a <GAME_PLAY_Phase_Management+0x3b02>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80052e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052ec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	9301      	str	r3, [sp, #4]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	2326      	movs	r3, #38	; 0x26
 80052fc:	2280      	movs	r2, #128	; 0x80
 80052fe:	215a      	movs	r1, #90	; 0x5a
 8005300:	2000      	movs	r0, #0
 8005302:	f001 ffb5 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005306:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800530a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	9301      	str	r3, [sp, #4]
 8005314:	2300      	movs	r3, #0
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	2326      	movs	r3, #38	; 0x26
 800531a:	2280      	movs	r2, #128	; 0x80
 800531c:	215a      	movs	r1, #90	; 0x5a
 800531e:	2000      	movs	r0, #0
 8005320:	f001 ffa6 	bl	8007270 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8005324:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005328:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005332:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8005336:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800533a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800533e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005342:	6818      	ldr	r0, [r3, #0]
 8005344:	f7fc fb58 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 8005348:	4603      	mov	r3, r0
 800534a:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					if(ptrYugiohCard_src->cardSignature == 3){
 800534e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b03      	cmp	r3, #3
 8005356:	d14f      	bne.n	80053f8 <GAME_PLAY_Phase_Management+0x2cf0>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8005358:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800535c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005360:	6818      	ldr	r0, [r3, #0]
 8005362:	f7fc f912 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8005366:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800536a:	2200      	movs	r2, #0
 800536c:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800536e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005372:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800537c:	4619      	mov	r1, r3
 800537e:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8005382:	f7fb f97f 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 8005386:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800538a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005394:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 800539e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053a2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80053ac:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80053b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80053c4:	3301      	adds	r3, #1
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053cc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 80053d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2202      	movs	r2, #2
 80053e2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80053e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2234      	movs	r2, #52	; 0x34
 80053f2:	701a      	strb	r2, [r3, #0]
				break;
 80053f4:	f000 bf09 	b.w	800620a <GAME_PLAY_Phase_Management+0x3b02>
						if (idx != 255)
 80053f8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80053fc:	2bff      	cmp	r3, #255	; 0xff
 80053fe:	f000 8704 	beq.w	800620a <GAME_PLAY_Phase_Management+0x3b02>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8005402:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005406:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	f7fc f8bd 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8005410:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8005414:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005418:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	3308      	adds	r3, #8
 8005420:	6812      	ldr	r2, [r2, #0]
 8005422:	4413      	add	r3, r2
 8005424:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8005428:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800542c:	2200      	movs	r2, #0
 800542e:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8005430:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005434:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800543e:	4619      	mov	r1, r3
 8005440:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8005444:	f7fb f91e 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8005448:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800544c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005456:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 8005460:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005464:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800546e:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8005472:	6812      	ldr	r2, [r2, #0]
 8005474:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8005478:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800547c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8005486:	3301      	adds	r3, #1
 8005488:	b2da      	uxtb	r2, r3
 800548a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800548e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8005498:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800549c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2202      	movs	r2, #2
 80054a4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 80054a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	2234      	movs	r2, #52	; 0x34
 80054b4:	701a      	strb	r2, [r3, #0]
				break;
 80054b6:	f000 bea8 	b.w	800620a <GAME_PLAY_Phase_Management+0x3b02>
 80054ba:	bf00      	nop
 80054bc:	2400000c 	.word	0x2400000c
 80054c0:	08011494 	.word	0x08011494
 80054c4:	080114a4 	.word	0x080114a4
 80054c8:	080114b0 	.word	0x080114b0
 80054cc:	080114c0 	.word	0x080114c0
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80054d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	781a      	ldrb	r2, [r3, #0]
 80054dc:	4bc4      	ldr	r3, [pc, #784]	; (80057f0 <GAME_PLAY_Phase_Management+0x30e8>)
 80054de:	9203      	str	r2, [sp, #12]
 80054e0:	2200      	movs	r2, #0
 80054e2:	9202      	str	r2, [sp, #8]
 80054e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054e8:	9201      	str	r2, [sp, #4]
 80054ea:	685a      	ldr	r2, [r3, #4]
 80054ec:	9200      	str	r2, [sp, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4ac0      	ldr	r2, [pc, #768]	; (80057f4 <GAME_PLAY_Phase_Management+0x30ec>)
 80054f2:	215a      	movs	r1, #90	; 0x5a
 80054f4:	2005      	movs	r0, #5
 80054f6:	f001 fd72 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80054fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	781a      	ldrb	r2, [r3, #0]
 8005506:	4bba      	ldr	r3, [pc, #744]	; (80057f0 <GAME_PLAY_Phase_Management+0x30e8>)
 8005508:	9203      	str	r2, [sp, #12]
 800550a:	2200      	movs	r2, #0
 800550c:	9202      	str	r2, [sp, #8]
 800550e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005512:	9201      	str	r2, [sp, #4]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	9200      	str	r2, [sp, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4ab7      	ldr	r2, [pc, #732]	; (80057f8 <GAME_PLAY_Phase_Management+0x30f0>)
 800551c:	2169      	movs	r1, #105	; 0x69
 800551e:	2005      	movs	r0, #5
 8005520:	f001 fd5d 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005524:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005528:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	781a      	ldrb	r2, [r3, #0]
 8005530:	4baf      	ldr	r3, [pc, #700]	; (80057f0 <GAME_PLAY_Phase_Management+0x30e8>)
 8005532:	9203      	str	r2, [sp, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	9202      	str	r2, [sp, #8]
 8005538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800553c:	9201      	str	r2, [sp, #4]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	9200      	str	r2, [sp, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4aad      	ldr	r2, [pc, #692]	; (80057fc <GAME_PLAY_Phase_Management+0x30f4>)
 8005546:	215a      	movs	r1, #90	; 0x5a
 8005548:	2005      	movs	r0, #5
 800554a:	f001 fd48 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800554e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005552:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	4ba5      	ldr	r3, [pc, #660]	; (80057f0 <GAME_PLAY_Phase_Management+0x30e8>)
 800555c:	9203      	str	r2, [sp, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	9202      	str	r2, [sp, #8]
 8005562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005566:	9201      	str	r2, [sp, #4]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	9200      	str	r2, [sp, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4aa4      	ldr	r2, [pc, #656]	; (8005800 <GAME_PLAY_Phase_Management+0x30f8>)
 8005570:	2169      	movs	r1, #105	; 0x69
 8005572:	2005      	movs	r0, #5
 8005574:	f001 fd33 	bl	8006fde <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8005578:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800557c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	2b34      	cmp	r3, #52	; 0x34
 8005586:	d141      	bne.n	800560c <GAME_PLAY_Phase_Management+0x2f04>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8005588:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800558c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	789b      	ldrb	r3, [r3, #2]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d115      	bne.n	80055c4 <GAME_PLAY_Phase_Management+0x2ebc>
						//affect
						state_game->action = 54;
 8005598:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800559c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2236      	movs	r2, #54	; 0x36
 80055a4:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 80055a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055aa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2204      	movs	r2, #4
 80055b2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 80055b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2200      	movs	r2, #0
 80055c2:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 80055c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055c8:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80055cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055d0:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80055d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055d8:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80055dc:	6812      	ldr	r2, [r2, #0]
 80055de:	6809      	ldr	r1, [r1, #0]
 80055e0:	6818      	ldr	r0, [r3, #0]
 80055e2:	f7fb fb33 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 80055e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055ea:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80055ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055f2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80055f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055fa:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80055fe:	6812      	ldr	r2, [r2, #0]
 8005600:	6809      	ldr	r1, [r1, #0]
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	f7fb fe24 	bl	8001250 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 8005608:	f000 be01 	b.w	800620e <GAME_PLAY_Phase_Management+0x3b06>
				else if ((state_game->action == 53 )){
 800560c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005610:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b35      	cmp	r3, #53	; 0x35
 800561a:	f040 85f8 	bne.w	800620e <GAME_PLAY_Phase_Management+0x3b06>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800561e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005622:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	9301      	str	r3, [sp, #4]
 800562c:	2300      	movs	r3, #0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	2326      	movs	r3, #38	; 0x26
 8005632:	2280      	movs	r2, #128	; 0x80
 8005634:	215a      	movs	r1, #90	; 0x5a
 8005636:	2000      	movs	r0, #0
 8005638:	f001 fe1a 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800563c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005640:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	9301      	str	r3, [sp, #4]
 800564a:	2300      	movs	r3, #0
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	2326      	movs	r3, #38	; 0x26
 8005650:	2280      	movs	r2, #128	; 0x80
 8005652:	215a      	movs	r1, #90	; 0x5a
 8005654:	2000      	movs	r0, #0
 8005656:	f001 fe0b 	bl	8007270 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 800565a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800565e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005668:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 800566c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005670:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005674:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	f7fc f9bd 	bl	80019f8 <YUGIOH_Check_Trap_On_board>
 800567e:	4603      	mov	r3, r0
 8005680:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					if(ptrYugiohCard_src->cardSignature == 3){
 8005684:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b03      	cmp	r3, #3
 800568c:	d14f      	bne.n	800572e <GAME_PLAY_Phase_Management+0x3026>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800568e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005692:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005696:	6818      	ldr	r0, [r3, #0]
 8005698:	f7fb ff77 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 800569c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80056a0:	2200      	movs	r2, #0
 80056a2:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 80056a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80056b2:	4619      	mov	r1, r3
 80056b4:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80056b8:	f7fa ffe4 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 80056bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80056ca:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 80056d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056d8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80056e2:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80056e6:	6812      	ldr	r2, [r2, #0]
 80056e8:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80056ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80056fa:	3301      	adds	r3, #1
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005702:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 800570c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005710:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2203      	movs	r2, #3
 8005718:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 800571c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005720:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2234      	movs	r2, #52	; 0x34
 8005728:	701a      	strb	r2, [r3, #0]
				break;
 800572a:	f000 bd70 	b.w	800620e <GAME_PLAY_Phase_Management+0x3b06>
						if (idx != 255)
 800572e:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8005732:	2bff      	cmp	r3, #255	; 0xff
 8005734:	f000 856b 	beq.w	800620e <GAME_PLAY_Phase_Management+0x3b06>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8005738:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800573c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	f7fb ff22 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8005746:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800574a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800574e:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005752:	011b      	lsls	r3, r3, #4
 8005754:	3308      	adds	r3, #8
 8005756:	6812      	ldr	r2, [r2, #0]
 8005758:	4413      	add	r3, r2
 800575a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800575e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005762:	2200      	movs	r2, #0
 8005764:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8005766:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800576a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005774:	4619      	mov	r1, r3
 8005776:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800577a:	f7fa ff83 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 800577e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005782:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800578c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005790:	6812      	ldr	r2, [r2, #0]
 8005792:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 8005796:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800579a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80057a4:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 80057ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80057bc:	3301      	adds	r3, #1
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 80057ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2202      	movs	r2, #2
 80057da:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 80057de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057e2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2234      	movs	r2, #52	; 0x34
 80057ea:	701a      	strb	r2, [r3, #0]
				break;
 80057ec:	f000 bd0f 	b.w	800620e <GAME_PLAY_Phase_Management+0x3b06>
 80057f0:	2400000c 	.word	0x2400000c
 80057f4:	080114b0 	.word	0x080114b0
 80057f8:	080114cc 	.word	0x080114cc
 80057fc:	080114d4 	.word	0x080114d4
 8005800:	080114e4 	.word	0x080114e4
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005804:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005808:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	781a      	ldrb	r2, [r3, #0]
 8005810:	4bb2      	ldr	r3, [pc, #712]	; (8005adc <GAME_PLAY_Phase_Management+0x33d4>)
 8005812:	9203      	str	r2, [sp, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	9202      	str	r2, [sp, #8]
 8005818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800581c:	9201      	str	r2, [sp, #4]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	9200      	str	r2, [sp, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4aae      	ldr	r2, [pc, #696]	; (8005ae0 <GAME_PLAY_Phase_Management+0x33d8>)
 8005826:	215a      	movs	r1, #90	; 0x5a
 8005828:	2005      	movs	r0, #5
 800582a:	f001 fbd8 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800582e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005832:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	781a      	ldrb	r2, [r3, #0]
 800583a:	4ba8      	ldr	r3, [pc, #672]	; (8005adc <GAME_PLAY_Phase_Management+0x33d4>)
 800583c:	9203      	str	r2, [sp, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	9202      	str	r2, [sp, #8]
 8005842:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005846:	9201      	str	r2, [sp, #4]
 8005848:	685a      	ldr	r2, [r3, #4]
 800584a:	9200      	str	r2, [sp, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4aa4      	ldr	r2, [pc, #656]	; (8005ae0 <GAME_PLAY_Phase_Management+0x33d8>)
 8005850:	215a      	movs	r1, #90	; 0x5a
 8005852:	2005      	movs	r0, #5
 8005854:	f001 fbc3 	bl	8006fde <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8005858:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800585c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	4619      	mov	r1, r3
 8005866:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800586a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800586e:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	6812      	ldr	r2, [r2, #0]
 8005876:	4413      	add	r3, r2
 8005878:	3304      	adds	r3, #4
 800587a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 800587e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005882:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	785b      	ldrb	r3, [r3, #1]
 800588a:	4619      	mov	r1, r3
 800588c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005890:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8005894:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	4413      	add	r3, r2
 800589e:	3304      	adds	r3, #4
 80058a0:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

				if(state_game->action == 54)
 80058a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2b36      	cmp	r3, #54	; 0x36
 80058b2:	f040 84ae 	bne.w	8006212 <GAME_PLAY_Phase_Management+0x3b0a>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 80058b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	785a      	ldrb	r2, [r3, #1]
 80058c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80058d0:	429a      	cmp	r2, r3
 80058d2:	f080 80a3 	bcs.w	8005a1c <GAME_PLAY_Phase_Management+0x3314>
					{
						state_game->test = 165;
 80058d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	22a5      	movs	r2, #165	; 0xa5
 80058e2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80058e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	785b      	ldrb	r3, [r3, #1]
 80058f2:	4619      	mov	r1, r3
 80058f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058f8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80058fc:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	4413      	add	r3, r2
 8005906:	3304      	adds	r3, #4
 8005908:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

						if (ptrYugiohCard_src->cardSignature == 3)
 800590c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	2b03      	cmp	r3, #3
 8005914:	d11d      	bne.n	8005952 <GAME_PLAY_Phase_Management+0x324a>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 8005916:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2262      	movs	r2, #98	; 0x62
 800591e:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 8005922:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800592c:	4618      	mov	r0, r3
 800592e:	f7fc f833 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
//							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
							state_game->count_chain++;
 8005932:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005936:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	785b      	ldrb	r3, [r3, #1]
 800593e:	3301      	adds	r3, #1
 8005940:	b2da      	uxtb	r2, r3
 8005942:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005946:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 800594e:	f000 bc60 	b.w	8006212 <GAME_PLAY_Phase_Management+0x3b0a>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8005952:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	2b0e      	cmp	r3, #14
 800595a:	d004      	beq.n	8005966 <GAME_PLAY_Phase_Management+0x325e>
 800595c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b0f      	cmp	r3, #15
 8005964:	d129      	bne.n	80059ba <GAME_PLAY_Phase_Management+0x32b2>
							state_game->test = 133;
 8005966:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800596a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2285      	movs	r2, #133	; 0x85
 8005972:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8005976:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fb ff81 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 800598a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005994:	4618      	mov	r0, r3
 8005996:	f7fb ffff 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							state_game->count_chain++;
 800599a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800599e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	785b      	ldrb	r3, [r3, #1]
 80059a6:	3301      	adds	r3, #1
 80059a8:	b2da      	uxtb	r2, r3
 80059aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	705a      	strb	r2, [r3, #1]
				break;
 80059b6:	f000 bc2c 	b.w	8006212 <GAME_PLAY_Phase_Management+0x3b0a>
						else if(ptrYugiohCard_src->cardSignature == 20){
 80059ba:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	2b14      	cmp	r3, #20
 80059c2:	f040 8426 	bne.w	8006212 <GAME_PLAY_Phase_Management+0x3b0a>
							YUGIOH_Clear_Card_In_Main_To_GY(*ptrUser,ptrYugiohCard_src);
 80059c6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fb ffe1 	bl	8001998 <YUGIOH_Clear_Card_In_Main_To_GY>
							if(state_game->MainGame_State == first_player){
 80059d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d108      	bne.n	80059fa <GAME_PLAY_Phase_Management+0x32f2>
								state_game->MainGame_State = second_player;
 80059e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2203      	movs	r2, #3
 80059f4:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 80059f8:	e007      	b.n	8005a0a <GAME_PLAY_Phase_Management+0x3302>
								state_game->MainGame_State = first_player;
 80059fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2202      	movs	r2, #2
 8005a06:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 8005a0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a0e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2201      	movs	r2, #1
 8005a16:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 8005a1a:	e3fa      	b.n	8006212 <GAME_PLAY_Phase_Management+0x3b0a>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005a1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a20:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	781b      	ldrb	r3, [r3, #0]
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	2326      	movs	r3, #38	; 0x26
 8005a30:	2280      	movs	r2, #128	; 0x80
 8005a32:	215a      	movs	r1, #90	; 0x5a
 8005a34:	2000      	movs	r0, #0
 8005a36:	f001 fc1b 	bl	8007270 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005a3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a3e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	9301      	str	r3, [sp, #4]
 8005a48:	2300      	movs	r3, #0
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2326      	movs	r3, #38	; 0x26
 8005a4e:	2280      	movs	r2, #128	; 0x80
 8005a50:	215a      	movs	r1, #90	; 0x5a
 8005a52:	2000      	movs	r0, #0
 8005a54:	f001 fc0c 	bl	8007270 <ST7735_FillRectangleNSS>
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8005a58:	2300      	movs	r3, #0
 8005a5a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005a5e:	e020      	b.n	8005aa2 <GAME_PLAY_Phase_Management+0x339a>
							state_game->ptrChainUser[i] = &dummyPlayer;
 8005a60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005a6e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4413      	add	r3, r2
 8005a76:	f107 0210 	add.w	r2, r7, #16
 8005a7a:	605a      	str	r2, [r3, #4]
							state_game->ptrChainOpponent[i] = &dummyPlayer;
 8005a7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a80:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005a8a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	f107 0210 	add.w	r2, r7, #16
 8005a96:	605a      	str	r2, [r3, #4]
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8005a98:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005aa2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005aa6:	2b05      	cmp	r3, #5
 8005aa8:	ddda      	ble.n	8005a60 <GAME_PLAY_Phase_Management+0x3358>
						state_game->ChainCount = 0;
 8005aaa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005aae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->action = 50;
 8005aba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005abe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2232      	movs	r2, #50	; 0x32
 8005ac6:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8005ac8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005acc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2205      	movs	r2, #5
 8005ad4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005ad8:	e39b      	b.n	8006212 <GAME_PLAY_Phase_Management+0x3b0a>
 8005ada:	bf00      	nop
 8005adc:	2400000c 	.word	0x2400000c
 8005ae0:	080114f4 	.word	0x080114f4
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8005ae4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ae8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005af2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8005af6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005afa:	791b      	ldrb	r3, [r3, #4]
 8005afc:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243

				if(ptrYugiohCard_src->targetPosition == 99)
 8005b00:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b04:	79db      	ldrb	r3, [r3, #7]
 8005b06:	2b63      	cmp	r3, #99	; 0x63
 8005b08:	d122      	bne.n	8005b50 <GAME_PLAY_Phase_Management+0x3448>
				{
					playerDef->life_point -= atk*100;
 8005b0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b0e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	889a      	ldrh	r2, [r3, #4]
 8005b16:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	0249      	lsls	r1, r1, #9
 8005b20:	1ac9      	subs	r1, r1, r3
 8005b22:	0089      	lsls	r1, r1, #2
 8005b24:	4419      	add	r1, r3
 8005b26:	00c9      	lsls	r1, r1, #3
 8005b28:	1acb      	subs	r3, r1, r3
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	4413      	add	r3, r2
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b36:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005b3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b42:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	2206      	movs	r2, #6
 8005b4a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->PlyerAction_Battle_Substate = after_calculate;
						}

					}
				}
				break;
 8005b4e:	e362      	b.n	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
				else if(ptrYugiohCard_src->targetPosition == 98)
 8005b50:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b54:	79db      	ldrb	r3, [r3, #7]
 8005b56:	2b62      	cmp	r3, #98	; 0x62
 8005b58:	d108      	bne.n	8005b6c <GAME_PLAY_Phase_Management+0x3464>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005b5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b5e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2206      	movs	r2, #6
 8005b66:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005b6a:	e354      	b.n	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8005b6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b70:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3308      	adds	r3, #8
 8005b78:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8005b7c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b80:	79db      	ldrb	r3, [r3, #7]
 8005b82:	4619      	mov	r1, r3
 8005b84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b88:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005b8c:	010b      	lsls	r3, r1, #4
 8005b8e:	3308      	adds	r3, #8
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	4413      	add	r3, r2
 8005b94:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 8005b98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b9c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2236      	movs	r2, #54	; 0x36
 8005ba4:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8005ba8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005bac:	789b      	ldrb	r3, [r3, #2]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 8100 	bne.w	8005db4 <GAME_PLAY_Phase_Management+0x36ac>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005bb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bb8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	781a      	ldrb	r2, [r3, #0]
 8005bc0:	4b77      	ldr	r3, [pc, #476]	; (8005da0 <GAME_PLAY_Phase_Management+0x3698>)
 8005bc2:	9203      	str	r2, [sp, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	9202      	str	r2, [sp, #8]
 8005bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005bcc:	9201      	str	r2, [sp, #4]
 8005bce:	685a      	ldr	r2, [r3, #4]
 8005bd0:	9200      	str	r2, [sp, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a73      	ldr	r2, [pc, #460]	; (8005da4 <GAME_PLAY_Phase_Management+0x369c>)
 8005bd6:	215a      	movs	r1, #90	; 0x5a
 8005bd8:	2005      	movs	r0, #5
 8005bda:	f001 fa00 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8005bde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005be2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	781a      	ldrb	r2, [r3, #0]
 8005bea:	4b6d      	ldr	r3, [pc, #436]	; (8005da0 <GAME_PLAY_Phase_Management+0x3698>)
 8005bec:	9203      	str	r2, [sp, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	9202      	str	r2, [sp, #8]
 8005bf2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005bf6:	9201      	str	r2, [sp, #4]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	9200      	str	r2, [sp, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a6a      	ldr	r2, [pc, #424]	; (8005da8 <GAME_PLAY_Phase_Management+0x36a0>)
 8005c00:	2169      	movs	r1, #105	; 0x69
 8005c02:	2005      	movs	r0, #5
 8005c04:	f001 f9eb 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005c08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c0c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	781a      	ldrb	r2, [r3, #0]
 8005c14:	4b62      	ldr	r3, [pc, #392]	; (8005da0 <GAME_PLAY_Phase_Management+0x3698>)
 8005c16:	9203      	str	r2, [sp, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	9202      	str	r2, [sp, #8]
 8005c1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c20:	9201      	str	r2, [sp, #4]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	9200      	str	r2, [sp, #0]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a60      	ldr	r2, [pc, #384]	; (8005dac <GAME_PLAY_Phase_Management+0x36a4>)
 8005c2a:	215a      	movs	r1, #90	; 0x5a
 8005c2c:	2005      	movs	r0, #5
 8005c2e:	f001 f9d6 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005c32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c36:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	781a      	ldrb	r2, [r3, #0]
 8005c3e:	4b58      	ldr	r3, [pc, #352]	; (8005da0 <GAME_PLAY_Phase_Management+0x3698>)
 8005c40:	9203      	str	r2, [sp, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	9202      	str	r2, [sp, #8]
 8005c46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005c4a:	9201      	str	r2, [sp, #4]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	9200      	str	r2, [sp, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a57      	ldr	r2, [pc, #348]	; (8005db0 <GAME_PLAY_Phase_Management+0x36a8>)
 8005c54:	2169      	movs	r1, #105	; 0x69
 8005c56:	2005      	movs	r0, #5
 8005c58:	f001 f9c1 	bl	8006fde <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 8005c5c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005c60:	795b      	ldrb	r3, [r3, #5]
 8005c62:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
						if(atk < def){
 8005c66:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005c6a:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d25e      	bcs.n	8005d30 <GAME_PLAY_Phase_Management+0x3628>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005c72:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c76:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	2300      	movs	r3, #0
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	2326      	movs	r3, #38	; 0x26
 8005c86:	2280      	movs	r2, #128	; 0x80
 8005c88:	215a      	movs	r1, #90	; 0x5a
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f001 faf0 	bl	8007270 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005c90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c94:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	9301      	str	r3, [sp, #4]
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	9300      	str	r3, [sp, #0]
 8005ca2:	2326      	movs	r3, #38	; 0x26
 8005ca4:	2280      	movs	r2, #128	; 0x80
 8005ca6:	215a      	movs	r1, #90	; 0x5a
 8005ca8:	2000      	movs	r0, #0
 8005caa:	f001 fae1 	bl	8007270 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 8005cae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	889a      	ldrh	r2, [r3, #4]
 8005cba:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
 8005cbe:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005cc2:	1acb      	subs	r3, r1, r3
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	0249      	lsls	r1, r1, #9
 8005cca:	1ac9      	subs	r1, r1, r3
 8005ccc:	0089      	lsls	r1, r1, #2
 8005cce:	4419      	add	r1, r3
 8005cd0:	00c9      	lsls	r1, r1, #3
 8005cd2:	1acb      	subs	r3, r1, r3
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	4413      	add	r3, r2
 8005cda:	b29a      	uxth	r2, r3
 8005cdc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ce0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8005ce8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005cec:	799b      	ldrb	r3, [r3, #6]
 8005cee:	4619      	mov	r1, r3
 8005cf0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005cf4:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8005cf8:	010b      	lsls	r3, r1, #4
 8005cfa:	3308      	adds	r3, #8
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	441a      	add	r2, r3
 8005d00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d04:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d08:	4611      	mov	r1, r2
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	f7fb fc89 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005d10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d14:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d18:	6818      	ldr	r0, [r3, #0]
 8005d1a:	f7fb fb8b 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005d1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2206      	movs	r2, #6
 8005d2a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005d2e:	e272      	b.n	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
						else if(atk > def){
 8005d30:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005d34:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	f240 826c 	bls.w	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005d3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d42:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2326      	movs	r3, #38	; 0x26
 8005d52:	2280      	movs	r2, #128	; 0x80
 8005d54:	215a      	movs	r1, #90	; 0x5a
 8005d56:	2000      	movs	r0, #0
 8005d58:	f001 fa8a 	bl	8007270 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005d5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d60:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	2326      	movs	r3, #38	; 0x26
 8005d70:	2280      	movs	r2, #128	; 0x80
 8005d72:	215a      	movs	r1, #90	; 0x5a
 8005d74:	2000      	movs	r0, #0
 8005d76:	f001 fa7b 	bl	8007270 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8005d7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d7e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d82:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	f7fb fc4b 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005d8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2206      	movs	r2, #6
 8005d98:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005d9c:	e23b      	b.n	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
 8005d9e:	bf00      	nop
 8005da0:	2400000c 	.word	0x2400000c
 8005da4:	08011504 	.word	0x08011504
 8005da8:	08011514 	.word	0x08011514
 8005dac:	08011524 	.word	0x08011524
 8005db0:	08011534 	.word	0x08011534
					else if(ptrYugiohCard_dst->cardState == 1){
 8005db4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005db8:	789b      	ldrb	r3, [r3, #2]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	f040 822b 	bne.w	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005dc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dc4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	4b91      	ldr	r3, [pc, #580]	; (8006014 <GAME_PLAY_Phase_Management+0x390c>)
 8005dce:	9203      	str	r2, [sp, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	9202      	str	r2, [sp, #8]
 8005dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd8:	9201      	str	r2, [sp, #4]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	9200      	str	r2, [sp, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a8d      	ldr	r2, [pc, #564]	; (8006018 <GAME_PLAY_Phase_Management+0x3910>)
 8005de2:	215a      	movs	r1, #90	; 0x5a
 8005de4:	2005      	movs	r0, #5
 8005de6:	f001 f8fa 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8005dea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	781a      	ldrb	r2, [r3, #0]
 8005df6:	4b87      	ldr	r3, [pc, #540]	; (8006014 <GAME_PLAY_Phase_Management+0x390c>)
 8005df8:	9203      	str	r2, [sp, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	9202      	str	r2, [sp, #8]
 8005dfe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005e02:	9201      	str	r2, [sp, #4]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	9200      	str	r2, [sp, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a84      	ldr	r2, [pc, #528]	; (800601c <GAME_PLAY_Phase_Management+0x3914>)
 8005e0c:	2169      	movs	r1, #105	; 0x69
 8005e0e:	2005      	movs	r0, #5
 8005e10:	f001 f8e5 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005e14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e18:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	4b7c      	ldr	r3, [pc, #496]	; (8006014 <GAME_PLAY_Phase_Management+0x390c>)
 8005e22:	9203      	str	r2, [sp, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	9202      	str	r2, [sp, #8]
 8005e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e2c:	9201      	str	r2, [sp, #4]
 8005e2e:	685a      	ldr	r2, [r3, #4]
 8005e30:	9200      	str	r2, [sp, #0]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a7a      	ldr	r2, [pc, #488]	; (8006020 <GAME_PLAY_Phase_Management+0x3918>)
 8005e36:	215a      	movs	r1, #90	; 0x5a
 8005e38:	2005      	movs	r0, #5
 8005e3a:	f001 f8d0 	bl	8006fde <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005e3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e42:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	781a      	ldrb	r2, [r3, #0]
 8005e4a:	4b72      	ldr	r3, [pc, #456]	; (8006014 <GAME_PLAY_Phase_Management+0x390c>)
 8005e4c:	9203      	str	r2, [sp, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	9202      	str	r2, [sp, #8]
 8005e52:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005e56:	9201      	str	r2, [sp, #4]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	9200      	str	r2, [sp, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a71      	ldr	r2, [pc, #452]	; (8006024 <GAME_PLAY_Phase_Management+0x391c>)
 8005e60:	2169      	movs	r1, #105	; 0x69
 8005e62:	2005      	movs	r0, #5
 8005e64:	f001 f8bb 	bl	8006fde <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8005e68:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005e6c:	791b      	ldrb	r3, [r3, #4]
 8005e6e:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
						state_game->test = 60;
 8005e72:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e76:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	223c      	movs	r2, #60	; 0x3c
 8005e7e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 8005e82:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005e86:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d266      	bcs.n	8005f5c <GAME_PLAY_Phase_Management+0x3854>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005e8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005e92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	9301      	str	r3, [sp, #4]
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	9300      	str	r3, [sp, #0]
 8005ea0:	2326      	movs	r3, #38	; 0x26
 8005ea2:	2280      	movs	r2, #128	; 0x80
 8005ea4:	215a      	movs	r1, #90	; 0x5a
 8005ea6:	2000      	movs	r0, #0
 8005ea8:	f001 f9e2 	bl	8007270 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005eac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005eb0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	9301      	str	r3, [sp, #4]
 8005eba:	2300      	movs	r3, #0
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	2326      	movs	r3, #38	; 0x26
 8005ec0:	2280      	movs	r2, #128	; 0x80
 8005ec2:	215a      	movs	r1, #90	; 0x5a
 8005ec4:	2000      	movs	r0, #0
 8005ec6:	f001 f9d3 	bl	8007270 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8005eca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ece:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	223d      	movs	r2, #61	; 0x3d
 8005ed6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 8005eda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ede:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	889a      	ldrh	r2, [r3, #4]
 8005ee6:	f897 1242 	ldrb.w	r1, [r7, #578]	; 0x242
 8005eea:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005eee:	1acb      	subs	r3, r1, r3
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	0249      	lsls	r1, r1, #9
 8005ef6:	1ac9      	subs	r1, r1, r3
 8005ef8:	0089      	lsls	r1, r1, #2
 8005efa:	4419      	add	r1, r3
 8005efc:	00c9      	lsls	r1, r1, #3
 8005efe:	1acb      	subs	r3, r1, r3
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	4413      	add	r3, r2
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f0c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8005f14:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005f18:	799b      	ldrb	r3, [r3, #6]
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f20:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8005f24:	010b      	lsls	r3, r1, #4
 8005f26:	3308      	adds	r3, #8
 8005f28:	6812      	ldr	r2, [r2, #0]
 8005f2a:	441a      	add	r2, r3
 8005f2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f30:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005f34:	4611      	mov	r1, r2
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	f7fb fb73 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005f3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f40:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005f44:	6818      	ldr	r0, [r3, #0]
 8005f46:	f7fb fa75 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005f4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2206      	movs	r2, #6
 8005f56:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005f5a:	e15c      	b.n	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
						else if(atk > atk2){
 8005f5c:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005f60:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005f64:	429a      	cmp	r2, r3
 8005f66:	f240 8156 	bls.w	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005f6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f6e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	2326      	movs	r3, #38	; 0x26
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	215a      	movs	r1, #90	; 0x5a
 8005f82:	2000      	movs	r0, #0
 8005f84:	f001 f974 	bl	8007270 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005f88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005f8c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	9301      	str	r3, [sp, #4]
 8005f96:	2300      	movs	r3, #0
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	2326      	movs	r3, #38	; 0x26
 8005f9c:	2280      	movs	r2, #128	; 0x80
 8005f9e:	215a      	movs	r1, #90	; 0x5a
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f001 f965 	bl	8007270 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 8005fa6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005faa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2246      	movs	r2, #70	; 0x46
 8005fb2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8005fb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005fba:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	889a      	ldrh	r2, [r3, #4]
 8005fc2:	f897 1243 	ldrb.w	r1, [r7, #579]	; 0x243
 8005fc6:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005fca:	1acb      	subs	r3, r1, r3
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	4619      	mov	r1, r3
 8005fd0:	0249      	lsls	r1, r1, #9
 8005fd2:	1ac9      	subs	r1, r1, r3
 8005fd4:	0089      	lsls	r1, r1, #2
 8005fd6:	4419      	add	r1, r3
 8005fd8:	00c9      	lsls	r1, r1, #3
 8005fda:	1acb      	subs	r3, r1, r3
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	b29a      	uxth	r2, r3
 8005fe4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005fe8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8005ff0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ff4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005ff8:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f7fb fb10 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8006002:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006006:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	2206      	movs	r2, #6
 800600e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8006012:	e100      	b.n	8006216 <GAME_PLAY_Phase_Management+0x3b0e>
 8006014:	2400000c 	.word	0x2400000c
 8006018:	08011504 	.word	0x08011504
 800601c:	08011548 	.word	0x08011548
 8006020:	08011524 	.word	0x08011524
 8006024:	08011558 	.word	0x08011558
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8006028:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800602c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	781a      	ldrb	r2, [r3, #0]
 8006034:	4b7f      	ldr	r3, [pc, #508]	; (8006234 <GAME_PLAY_Phase_Management+0x3b2c>)
 8006036:	9203      	str	r2, [sp, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	9202      	str	r2, [sp, #8]
 800603c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006040:	9201      	str	r2, [sp, #4]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	9200      	str	r2, [sp, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a7b      	ldr	r2, [pc, #492]	; (8006238 <GAME_PLAY_Phase_Management+0x3b30>)
 800604a:	215a      	movs	r1, #90	; 0x5a
 800604c:	2005      	movs	r0, #5
 800604e:	f000 ffc6 	bl	8006fde <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8006052:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006056:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	781a      	ldrb	r2, [r3, #0]
 800605e:	4b75      	ldr	r3, [pc, #468]	; (8006234 <GAME_PLAY_Phase_Management+0x3b2c>)
 8006060:	9203      	str	r2, [sp, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	9202      	str	r2, [sp, #8]
 8006066:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800606a:	9201      	str	r2, [sp, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	9200      	str	r2, [sp, #0]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a72      	ldr	r2, [pc, #456]	; (800623c <GAME_PLAY_Phase_Management+0x3b34>)
 8006074:	215a      	movs	r1, #90	; 0x5a
 8006076:	2005      	movs	r0, #5
 8006078:	f000 ffb1 	bl	8006fde <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 800607c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006080:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800608a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				YUGIOH_card_clear(ptrYugiohCard_src);
 800608e:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8006092:	f7fa fb2e 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8006096:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800609a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	889b      	ldrh	r3, [r3, #4]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d009      	beq.n	80060ba <GAME_PLAY_Phase_Management+0x39b2>
 80060a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060aa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	889b      	ldrh	r3, [r3, #4]
 80060b2:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d94b      	bls.n	8006152 <GAME_PLAY_Phase_Management+0x3a4a>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 80060ba:	2301      	movs	r3, #1
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	2300      	movs	r3, #0
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	2326      	movs	r3, #38	; 0x26
 80060c4:	2280      	movs	r2, #128	; 0x80
 80060c6:	215a      	movs	r1, #90	; 0x5a
 80060c8:	2000      	movs	r0, #0
 80060ca:	f001 f8d1 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 80060ce:	2300      	movs	r3, #0
 80060d0:	9301      	str	r3, [sp, #4]
 80060d2:	2300      	movs	r3, #0
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	2326      	movs	r3, #38	; 0x26
 80060d8:	2280      	movs	r2, #128	; 0x80
 80060da:	215a      	movs	r1, #90	; 0x5a
 80060dc:	2000      	movs	r0, #0
 80060de:	f001 f8c7 	bl	8007270 <ST7735_FillRectangleNSS>
					HAL_Delay(200);
 80060e2:	20c8      	movs	r0, #200	; 0xc8
 80060e4:	f001 fd5c 	bl	8007ba0 <HAL_Delay>
					ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,playerAtk->displayNSS);
 80060e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80060ec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	781a      	ldrb	r2, [r3, #0]
 80060f4:	4b52      	ldr	r3, [pc, #328]	; (8006240 <GAME_PLAY_Phase_Management+0x3b38>)
 80060f6:	9203      	str	r2, [sp, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	9202      	str	r2, [sp, #8]
 80060fc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8006100:	9201      	str	r2, [sp, #4]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	9200      	str	r2, [sp, #0]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a4e      	ldr	r2, [pc, #312]	; (8006244 <GAME_PLAY_Phase_Management+0x3b3c>)
 800610a:	215a      	movs	r1, #90	; 0x5a
 800610c:	2014      	movs	r0, #20
 800610e:	f000 ff66 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerDef->displayNSS);
 8006112:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006116:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	781a      	ldrb	r2, [r3, #0]
 800611e:	4b48      	ldr	r3, [pc, #288]	; (8006240 <GAME_PLAY_Phase_Management+0x3b38>)
 8006120:	9203      	str	r2, [sp, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	9202      	str	r2, [sp, #8]
 8006126:	221f      	movs	r2, #31
 8006128:	9201      	str	r2, [sp, #4]
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	9200      	str	r2, [sp, #0]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a45      	ldr	r2, [pc, #276]	; (8006248 <GAME_PLAY_Phase_Management+0x3b40>)
 8006132:	215a      	movs	r1, #90	; 0x5a
 8006134:	200f      	movs	r0, #15
 8006136:	f000 ff52 	bl	8006fde <ST7735_WriteStringNSS>
					HAL_Delay(200);
 800613a:	20c8      	movs	r0, #200	; 0xc8
 800613c:	f001 fd30 	bl	8007ba0 <HAL_Delay>
					state_game->MainGame_State = Game_Ended;
 8006140:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006144:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2204      	movs	r2, #4
 800614c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8006150:	e062      	b.n	8006218 <GAME_PLAY_Phase_Management+0x3b10>
					state_game->action = 50;
 8006152:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006156:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2232      	movs	r2, #50	; 0x32
 800615e:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8006160:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006164:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	2300      	movs	r3, #0
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	2326      	movs	r3, #38	; 0x26
 8006174:	2280      	movs	r2, #128	; 0x80
 8006176:	215a      	movs	r1, #90	; 0x5a
 8006178:	2000      	movs	r0, #0
 800617a:	f001 f879 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800617e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8006182:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	9301      	str	r3, [sp, #4]
 800618c:	2300      	movs	r3, #0
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	2326      	movs	r3, #38	; 0x26
 8006192:	2280      	movs	r2, #128	; 0x80
 8006194:	215a      	movs	r1, #90	; 0x5a
 8006196:	2000      	movs	r0, #0
 8006198:	f001 f86a 	bl	8007270 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800619c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	781a      	ldrb	r2, [r3, #0]
 80061a8:	4b22      	ldr	r3, [pc, #136]	; (8006234 <GAME_PLAY_Phase_Management+0x3b2c>)
 80061aa:	9203      	str	r2, [sp, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	9202      	str	r2, [sp, #8]
 80061b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061b4:	9201      	str	r2, [sp, #4]
 80061b6:	685a      	ldr	r2, [r3, #4]
 80061b8:	9200      	str	r2, [sp, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a1e      	ldr	r2, [pc, #120]	; (8006238 <GAME_PLAY_Phase_Management+0x3b30>)
 80061be:	215a      	movs	r1, #90	; 0x5a
 80061c0:	2005      	movs	r0, #5
 80061c2:	f000 ff0c 	bl	8006fde <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80061c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061ca:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	781a      	ldrb	r2, [r3, #0]
 80061d2:	4b18      	ldr	r3, [pc, #96]	; (8006234 <GAME_PLAY_Phase_Management+0x3b2c>)
 80061d4:	9203      	str	r2, [sp, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	9202      	str	r2, [sp, #8]
 80061da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061de:	9201      	str	r2, [sp, #4]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	9200      	str	r2, [sp, #0]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a15      	ldr	r2, [pc, #84]	; (800623c <GAME_PLAY_Phase_Management+0x3b34>)
 80061e8:	215a      	movs	r1, #90	; 0x5a
 80061ea:	2005      	movs	r0, #5
 80061ec:	f000 fef7 	bl	8006fde <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80061f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80061f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8006200:	e00a      	b.n	8006218 <GAME_PLAY_Phase_Management+0x3b10>
				break;
 8006202:	bf00      	nop
 8006204:	e00f      	b.n	8006226 <GAME_PLAY_Phase_Management+0x3b1e>
				break;
 8006206:	bf00      	nop
 8006208:	e00d      	b.n	8006226 <GAME_PLAY_Phase_Management+0x3b1e>
				break;
 800620a:	bf00      	nop
 800620c:	e00b      	b.n	8006226 <GAME_PLAY_Phase_Management+0x3b1e>
				break;
 800620e:	bf00      	nop
 8006210:	e009      	b.n	8006226 <GAME_PLAY_Phase_Management+0x3b1e>
				break;
 8006212:	bf00      	nop
 8006214:	e007      	b.n	8006226 <GAME_PLAY_Phase_Management+0x3b1e>
				break;
 8006216:	bf00      	nop
			}
			break;
 8006218:	e005      	b.n	8006226 <GAME_PLAY_Phase_Management+0x3b1e>
		break;
 800621a:	bf00      	nop
 800621c:	e004      	b.n	8006228 <GAME_PLAY_Phase_Management+0x3b20>
		break;
 800621e:	bf00      	nop
 8006220:	e002      	b.n	8006228 <GAME_PLAY_Phase_Management+0x3b20>
		break;
 8006222:	bf00      	nop
 8006224:	e000      	b.n	8006228 <GAME_PLAY_Phase_Management+0x3b20>
			break;
 8006226:	bf00      	nop

	}
}
 8006228:	bf00      	nop
 800622a:	f507 7719 	add.w	r7, r7, #612	; 0x264
 800622e:	46bd      	mov	sp, r7
 8006230:	bd90      	pop	{r4, r7, pc}
 8006232:	bf00      	nop
 8006234:	2400000c 	.word	0x2400000c
 8006238:	0801156c 	.word	0x0801156c
 800623c:	0801157c 	.word	0x0801157c
 8006240:	24000014 	.word	0x24000014
 8006244:	08011190 	.word	0x08011190
 8006248:	08011170 	.word	0x08011170

0800624c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006250:	4b3d      	ldr	r3, [pc, #244]	; (8006348 <SystemInit+0xfc>)
 8006252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006256:	4a3c      	ldr	r2, [pc, #240]	; (8006348 <SystemInit+0xfc>)
 8006258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800625c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006260:	4b39      	ldr	r3, [pc, #228]	; (8006348 <SystemInit+0xfc>)
 8006262:	691b      	ldr	r3, [r3, #16]
 8006264:	4a38      	ldr	r2, [pc, #224]	; (8006348 <SystemInit+0xfc>)
 8006266:	f043 0310 	orr.w	r3, r3, #16
 800626a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800626c:	4b37      	ldr	r3, [pc, #220]	; (800634c <SystemInit+0x100>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	2b06      	cmp	r3, #6
 8006276:	d807      	bhi.n	8006288 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006278:	4b34      	ldr	r3, [pc, #208]	; (800634c <SystemInit+0x100>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f023 030f 	bic.w	r3, r3, #15
 8006280:	4a32      	ldr	r2, [pc, #200]	; (800634c <SystemInit+0x100>)
 8006282:	f043 0307 	orr.w	r3, r3, #7
 8006286:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006288:	4b31      	ldr	r3, [pc, #196]	; (8006350 <SystemInit+0x104>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a30      	ldr	r2, [pc, #192]	; (8006350 <SystemInit+0x104>)
 800628e:	f043 0301 	orr.w	r3, r3, #1
 8006292:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006294:	4b2e      	ldr	r3, [pc, #184]	; (8006350 <SystemInit+0x104>)
 8006296:	2200      	movs	r2, #0
 8006298:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800629a:	4b2d      	ldr	r3, [pc, #180]	; (8006350 <SystemInit+0x104>)
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	492c      	ldr	r1, [pc, #176]	; (8006350 <SystemInit+0x104>)
 80062a0:	4b2c      	ldr	r3, [pc, #176]	; (8006354 <SystemInit+0x108>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80062a6:	4b29      	ldr	r3, [pc, #164]	; (800634c <SystemInit+0x100>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0308 	and.w	r3, r3, #8
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d007      	beq.n	80062c2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80062b2:	4b26      	ldr	r3, [pc, #152]	; (800634c <SystemInit+0x100>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f023 030f 	bic.w	r3, r3, #15
 80062ba:	4a24      	ldr	r2, [pc, #144]	; (800634c <SystemInit+0x100>)
 80062bc:	f043 0307 	orr.w	r3, r3, #7
 80062c0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80062c2:	4b23      	ldr	r3, [pc, #140]	; (8006350 <SystemInit+0x104>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80062c8:	4b21      	ldr	r3, [pc, #132]	; (8006350 <SystemInit+0x104>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80062ce:	4b20      	ldr	r3, [pc, #128]	; (8006350 <SystemInit+0x104>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80062d4:	4b1e      	ldr	r3, [pc, #120]	; (8006350 <SystemInit+0x104>)
 80062d6:	4a20      	ldr	r2, [pc, #128]	; (8006358 <SystemInit+0x10c>)
 80062d8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80062da:	4b1d      	ldr	r3, [pc, #116]	; (8006350 <SystemInit+0x104>)
 80062dc:	4a1f      	ldr	r2, [pc, #124]	; (800635c <SystemInit+0x110>)
 80062de:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80062e0:	4b1b      	ldr	r3, [pc, #108]	; (8006350 <SystemInit+0x104>)
 80062e2:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <SystemInit+0x114>)
 80062e4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80062e6:	4b1a      	ldr	r3, [pc, #104]	; (8006350 <SystemInit+0x104>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80062ec:	4b18      	ldr	r3, [pc, #96]	; (8006350 <SystemInit+0x104>)
 80062ee:	4a1c      	ldr	r2, [pc, #112]	; (8006360 <SystemInit+0x114>)
 80062f0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80062f2:	4b17      	ldr	r3, [pc, #92]	; (8006350 <SystemInit+0x104>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80062f8:	4b15      	ldr	r3, [pc, #84]	; (8006350 <SystemInit+0x104>)
 80062fa:	4a19      	ldr	r2, [pc, #100]	; (8006360 <SystemInit+0x114>)
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80062fe:	4b14      	ldr	r3, [pc, #80]	; (8006350 <SystemInit+0x104>)
 8006300:	2200      	movs	r2, #0
 8006302:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <SystemInit+0x104>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a11      	ldr	r2, [pc, #68]	; (8006350 <SystemInit+0x104>)
 800630a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800630e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8006310:	4b0f      	ldr	r3, [pc, #60]	; (8006350 <SystemInit+0x104>)
 8006312:	2200      	movs	r2, #0
 8006314:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8006316:	4b13      	ldr	r3, [pc, #76]	; (8006364 <SystemInit+0x118>)
 8006318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800631a:	4a12      	ldr	r2, [pc, #72]	; (8006364 <SystemInit+0x118>)
 800631c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006320:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8006322:	4b11      	ldr	r3, [pc, #68]	; (8006368 <SystemInit+0x11c>)
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4b11      	ldr	r3, [pc, #68]	; (800636c <SystemInit+0x120>)
 8006328:	4013      	ands	r3, r2
 800632a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800632e:	d202      	bcs.n	8006336 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <SystemInit+0x124>)
 8006332:	2201      	movs	r2, #1
 8006334:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8006336:	4b0f      	ldr	r3, [pc, #60]	; (8006374 <SystemInit+0x128>)
 8006338:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800633c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800633e:	bf00      	nop
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	e000ed00 	.word	0xe000ed00
 800634c:	52002000 	.word	0x52002000
 8006350:	58024400 	.word	0x58024400
 8006354:	eaf6ed7f 	.word	0xeaf6ed7f
 8006358:	02020200 	.word	0x02020200
 800635c:	01ff0000 	.word	0x01ff0000
 8006360:	01010280 	.word	0x01010280
 8006364:	580000c0 	.word	0x580000c0
 8006368:	5c001000 	.word	0x5c001000
 800636c:	ffff0000 	.word	0xffff0000
 8006370:	51008108 	.word	0x51008108
 8006374:	52004000 	.word	0x52004000

08006378 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800637e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006382:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8006384:	bf00      	nop
 8006386:	4b37      	ldr	r3, [pc, #220]	; (8006464 <main+0xec>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d004      	beq.n	800639c <main+0x24>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	1e5a      	subs	r2, r3, #1
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	dcf4      	bgt.n	8006386 <main+0xe>
	if ( timeout < 0 )
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da01      	bge.n	80063a6 <main+0x2e>
	{
		Error_Handler();
 80063a2:	f000 fbeb 	bl	8006b7c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063a6:	f001 fb69 	bl	8007a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063aa:	f000 f863 	bl	8006474 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80063ae:	f000 f8e5 	bl	800657c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80063b2:	4b2c      	ldr	r3, [pc, #176]	; (8006464 <main+0xec>)
 80063b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063b8:	4a2a      	ldr	r2, [pc, #168]	; (8006464 <main+0xec>)
 80063ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80063c2:	4b28      	ldr	r3, [pc, #160]	; (8006464 <main+0xec>)
 80063c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063cc:	603b      	str	r3, [r7, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80063d0:	2000      	movs	r0, #0
 80063d2:	f004 fd7f 	bl	800aed4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80063d6:	2100      	movs	r1, #0
 80063d8:	2000      	movs	r0, #0
 80063da:	f004 fd95 	bl	800af08 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80063de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80063e2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80063e4:	bf00      	nop
 80063e6:	4b1f      	ldr	r3, [pc, #124]	; (8006464 <main+0xec>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d104      	bne.n	80063fc <main+0x84>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	1e5a      	subs	r2, r3, #1
 80063f6:	607a      	str	r2, [r7, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	dcf4      	bgt.n	80063e6 <main+0x6e>
	if ( timeout < 0 )
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da01      	bge.n	8006406 <main+0x8e>
	{
		Error_Handler();
 8006402:	f000 fbbb 	bl	8006b7c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006406:	f000 fa6d 	bl	80068e4 <MX_GPIO_Init>
  MX_ETH_Init();
 800640a:	f000 f8e9 	bl	80065e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800640e:	f000 f9c1 	bl	8006794 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8006412:	f000 fa3f 	bl	8006894 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8006416:	f000 fa0b 	bl	8006830 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 800641a:	f000 f92d 	bl	8006678 <MX_SPI3_Init>
  MX_TIM7_Init();
 800641e:	f000 f983 	bl	8006728 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8006422:	f000 fcb3 	bl	8006d8c <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8006426:	2000      	movs	r0, #0
 8006428:	f000 ffbd 	bl	80073a6 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 800642c:	2000      	movs	r0, #0
 800642e:	f000 ffa9 	bl	8007384 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8006432:	f001 fba9 	bl	8007b88 <HAL_GetTick>
 8006436:	4602      	mov	r2, r0
 8006438:	4b0b      	ldr	r3, [pc, #44]	; (8006468 <main+0xf0>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2bc8      	cmp	r3, #200	; 0xc8
 8006440:	d9f7      	bls.n	8006432 <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8006442:	f001 fba1 	bl	8007b88 <HAL_GetTick>
 8006446:	4603      	mov	r3, r0
 8006448:	4a07      	ldr	r2, [pc, #28]	; (8006468 <main+0xf0>)
 800644a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800644c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006450:	4806      	ldr	r0, [pc, #24]	; (800646c <main+0xf4>)
 8006452:	f004 fd24 	bl	800ae9e <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8006456:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800645a:	4905      	ldr	r1, [pc, #20]	; (8006470 <main+0xf8>)
 800645c:	4618      	mov	r0, r3
 800645e:	f7fb fe4f 	bl	8002100 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8006462:	e7e6      	b.n	8006432 <main+0xba>
 8006464:	58024400 	.word	0x58024400
 8006468:	24000e98 	.word	0x24000e98
 800646c:	58020400 	.word	0x58020400
 8006470:	240009c0 	.word	0x240009c0

08006474 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b09c      	sub	sp, #112	; 0x70
 8006478:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800647a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800647e:	224c      	movs	r2, #76	; 0x4c
 8006480:	2100      	movs	r1, #0
 8006482:	4618      	mov	r0, r3
 8006484:	f00a f9bc 	bl	8010800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006488:	1d3b      	adds	r3, r7, #4
 800648a:	2220      	movs	r2, #32
 800648c:	2100      	movs	r1, #0
 800648e:	4618      	mov	r0, r3
 8006490:	f00a f9b6 	bl	8010800 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8006494:	2004      	movs	r0, #4
 8006496:	f004 fe93 	bl	800b1c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800649a:	2300      	movs	r3, #0
 800649c:	603b      	str	r3, [r7, #0]
 800649e:	4b34      	ldr	r3, [pc, #208]	; (8006570 <SystemClock_Config+0xfc>)
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	4a33      	ldr	r2, [pc, #204]	; (8006570 <SystemClock_Config+0xfc>)
 80064a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80064a8:	6193      	str	r3, [r2, #24]
 80064aa:	4b31      	ldr	r3, [pc, #196]	; (8006570 <SystemClock_Config+0xfc>)
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80064b2:	603b      	str	r3, [r7, #0]
 80064b4:	4b2f      	ldr	r3, [pc, #188]	; (8006574 <SystemClock_Config+0x100>)
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	4a2e      	ldr	r2, [pc, #184]	; (8006574 <SystemClock_Config+0x100>)
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064c0:	4b2c      	ldr	r3, [pc, #176]	; (8006574 <SystemClock_Config+0x100>)
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	f003 0301 	and.w	r3, r3, #1
 80064c8:	603b      	str	r3, [r7, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80064cc:	bf00      	nop
 80064ce:	4b28      	ldr	r3, [pc, #160]	; (8006570 <SystemClock_Config+0xfc>)
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064da:	d1f8      	bne.n	80064ce <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80064dc:	4b26      	ldr	r3, [pc, #152]	; (8006578 <SystemClock_Config+0x104>)
 80064de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e0:	f023 0303 	bic.w	r3, r3, #3
 80064e4:	4a24      	ldr	r2, [pc, #144]	; (8006578 <SystemClock_Config+0x104>)
 80064e6:	f043 0302 	orr.w	r3, r3, #2
 80064ea:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80064f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80064f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80064f6:	2302      	movs	r3, #2
 80064f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80064fa:	2302      	movs	r3, #2
 80064fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80064fe:	2301      	movs	r3, #1
 8006500:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8006502:	2378      	movs	r3, #120	; 0x78
 8006504:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006506:	2302      	movs	r3, #2
 8006508:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800650a:	2302      	movs	r3, #2
 800650c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800650e:	2302      	movs	r3, #2
 8006510:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006512:	230c      	movs	r3, #12
 8006514:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006516:	2300      	movs	r3, #0
 8006518:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800651a:	2300      	movs	r3, #0
 800651c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800651e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006522:	4618      	mov	r0, r3
 8006524:	f004 feb6 	bl	800b294 <HAL_RCC_OscConfig>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d001      	beq.n	8006532 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800652e:	f000 fb25 	bl	8006b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006532:	233f      	movs	r3, #63	; 0x3f
 8006534:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006536:	2303      	movs	r3, #3
 8006538:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800653a:	2300      	movs	r3, #0
 800653c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800653e:	2308      	movs	r3, #8
 8006540:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006542:	2340      	movs	r3, #64	; 0x40
 8006544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800654a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800654e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006550:	2340      	movs	r3, #64	; 0x40
 8006552:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006554:	1d3b      	adds	r3, r7, #4
 8006556:	2104      	movs	r1, #4
 8006558:	4618      	mov	r0, r3
 800655a:	f005 fac9 	bl	800baf0 <HAL_RCC_ClockConfig>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8006564:	f000 fb0a 	bl	8006b7c <Error_Handler>
  }
}
 8006568:	bf00      	nop
 800656a:	3770      	adds	r7, #112	; 0x70
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}
 8006570:	58024800 	.word	0x58024800
 8006574:	58000400 	.word	0x58000400
 8006578:	58024400 	.word	0x58024400

0800657c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b0b0      	sub	sp, #192	; 0xc0
 8006580:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	22bc      	movs	r2, #188	; 0xbc
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f00a f939 	bl	8010800 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 800658e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8006592:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8006594:	2301      	movs	r3, #1
 8006596:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8006598:	2318      	movs	r3, #24
 800659a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800659c:	2302      	movs	r3, #2
 800659e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80065a0:	2304      	movs	r3, #4
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80065a4:	2302      	movs	r3, #2
 80065a6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80065a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80065ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80065ae:	2300      	movs	r3, #0
 80065b0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80065b2:	2300      	movs	r3, #0
 80065b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80065b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80065ba:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80065bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80065c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065c4:	1d3b      	adds	r3, r7, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f005 fe1e 	bl	800c208 <HAL_RCCEx_PeriphCLKConfig>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d001      	beq.n	80065d6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80065d2:	f000 fad3 	bl	8006b7c <Error_Handler>
  }
}
 80065d6:	bf00      	nop
 80065d8:	37c0      	adds	r7, #192	; 0xc0
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80065e4:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <MX_ETH_Init+0x80>)
 80065e6:	4a1f      	ldr	r2, [pc, #124]	; (8006664 <MX_ETH_Init+0x84>)
 80065e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80065ea:	4b1f      	ldr	r3, [pc, #124]	; (8006668 <MX_ETH_Init+0x88>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80065f0:	4b1d      	ldr	r3, [pc, #116]	; (8006668 <MX_ETH_Init+0x88>)
 80065f2:	2280      	movs	r2, #128	; 0x80
 80065f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80065f6:	4b1c      	ldr	r3, [pc, #112]	; (8006668 <MX_ETH_Init+0x88>)
 80065f8:	22e1      	movs	r2, #225	; 0xe1
 80065fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80065fc:	4b1a      	ldr	r3, [pc, #104]	; (8006668 <MX_ETH_Init+0x88>)
 80065fe:	2200      	movs	r2, #0
 8006600:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8006602:	4b19      	ldr	r3, [pc, #100]	; (8006668 <MX_ETH_Init+0x88>)
 8006604:	2200      	movs	r2, #0
 8006606:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8006608:	4b17      	ldr	r3, [pc, #92]	; (8006668 <MX_ETH_Init+0x88>)
 800660a:	2200      	movs	r2, #0
 800660c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800660e:	4b14      	ldr	r3, [pc, #80]	; (8006660 <MX_ETH_Init+0x80>)
 8006610:	4a15      	ldr	r2, [pc, #84]	; (8006668 <MX_ETH_Init+0x88>)
 8006612:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006614:	4b12      	ldr	r3, [pc, #72]	; (8006660 <MX_ETH_Init+0x80>)
 8006616:	2201      	movs	r2, #1
 8006618:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800661a:	4b11      	ldr	r3, [pc, #68]	; (8006660 <MX_ETH_Init+0x80>)
 800661c:	4a13      	ldr	r2, [pc, #76]	; (800666c <MX_ETH_Init+0x8c>)
 800661e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006620:	4b0f      	ldr	r3, [pc, #60]	; (8006660 <MX_ETH_Init+0x80>)
 8006622:	4a13      	ldr	r2, [pc, #76]	; (8006670 <MX_ETH_Init+0x90>)
 8006624:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8006626:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <MX_ETH_Init+0x80>)
 8006628:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800662c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800662e:	480c      	ldr	r0, [pc, #48]	; (8006660 <MX_ETH_Init+0x80>)
 8006630:	f003 fe30 	bl	800a294 <HAL_ETH_Init>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d001      	beq.n	800663e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800663a:	f000 fa9f 	bl	8006b7c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800663e:	2238      	movs	r2, #56	; 0x38
 8006640:	2100      	movs	r1, #0
 8006642:	480c      	ldr	r0, [pc, #48]	; (8006674 <MX_ETH_Init+0x94>)
 8006644:	f00a f8dc 	bl	8010800 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006648:	4b0a      	ldr	r3, [pc, #40]	; (8006674 <MX_ETH_Init+0x94>)
 800664a:	2221      	movs	r2, #33	; 0x21
 800664c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800664e:	4b09      	ldr	r3, [pc, #36]	; (8006674 <MX_ETH_Init+0x94>)
 8006650:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006654:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006656:	4b07      	ldr	r3, [pc, #28]	; (8006674 <MX_ETH_Init+0x94>)
 8006658:	2200      	movs	r2, #0
 800665a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800665c:	bf00      	nop
 800665e:	bd80      	pop	{r7, pc}
 8006660:	240001b0 	.word	0x240001b0
 8006664:	40028000 	.word	0x40028000
 8006668:	24000ea8 	.word	0x24000ea8
 800666c:	240000e8 	.word	0x240000e8
 8006670:	24000088 	.word	0x24000088
 8006674:	24000178 	.word	0x24000178

08006678 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800667c:	4b28      	ldr	r3, [pc, #160]	; (8006720 <MX_SPI3_Init+0xa8>)
 800667e:	4a29      	ldr	r2, [pc, #164]	; (8006724 <MX_SPI3_Init+0xac>)
 8006680:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006682:	4b27      	ldr	r3, [pc, #156]	; (8006720 <MX_SPI3_Init+0xa8>)
 8006684:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006688:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800668a:	4b25      	ldr	r3, [pc, #148]	; (8006720 <MX_SPI3_Init+0xa8>)
 800668c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006690:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006692:	4b23      	ldr	r3, [pc, #140]	; (8006720 <MX_SPI3_Init+0xa8>)
 8006694:	2207      	movs	r2, #7
 8006696:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006698:	4b21      	ldr	r3, [pc, #132]	; (8006720 <MX_SPI3_Init+0xa8>)
 800669a:	2200      	movs	r2, #0
 800669c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800669e:	4b20      	ldr	r3, [pc, #128]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066a0:	2200      	movs	r2, #0
 80066a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80066a4:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80066aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80066ac:	4b1c      	ldr	r3, [pc, #112]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066b2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80066b4:	4b1a      	ldr	r3, [pc, #104]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066b6:	2200      	movs	r2, #0
 80066b8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80066ba:	4b19      	ldr	r3, [pc, #100]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066bc:	2200      	movs	r2, #0
 80066be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066c0:	4b17      	ldr	r3, [pc, #92]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066c2:	2200      	movs	r2, #0
 80066c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80066c6:	4b16      	ldr	r3, [pc, #88]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066c8:	2200      	movs	r2, #0
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80066cc:	4b14      	ldr	r3, [pc, #80]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80066d2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80066d4:	4b12      	ldr	r3, [pc, #72]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066d6:	2200      	movs	r2, #0
 80066d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80066da:	4b11      	ldr	r3, [pc, #68]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066dc:	2200      	movs	r2, #0
 80066de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80066e0:	4b0f      	ldr	r3, [pc, #60]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80066e6:	4b0e      	ldr	r3, [pc, #56]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80066ec:	4b0c      	ldr	r3, [pc, #48]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80066f2:	4b0b      	ldr	r3, [pc, #44]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80066f8:	4b09      	ldr	r3, [pc, #36]	; (8006720 <MX_SPI3_Init+0xa8>)
 80066fa:	2200      	movs	r2, #0
 80066fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80066fe:	4b08      	ldr	r3, [pc, #32]	; (8006720 <MX_SPI3_Init+0xa8>)
 8006700:	2200      	movs	r2, #0
 8006702:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006704:	4b06      	ldr	r3, [pc, #24]	; (8006720 <MX_SPI3_Init+0xa8>)
 8006706:	2200      	movs	r2, #0
 8006708:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800670a:	4805      	ldr	r0, [pc, #20]	; (8006720 <MX_SPI3_Init+0xa8>)
 800670c:	f007 f8e4 	bl	800d8d8 <HAL_SPI_Init>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8006716:	f000 fa31 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800671a:	bf00      	nop
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	24000260 	.word	0x24000260
 8006724:	40003c00 	.word	0x40003c00

08006728 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800672e:	1d3b      	adds	r3, r7, #4
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006738:	4b14      	ldr	r3, [pc, #80]	; (800678c <MX_TIM7_Init+0x64>)
 800673a:	4a15      	ldr	r2, [pc, #84]	; (8006790 <MX_TIM7_Init+0x68>)
 800673c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <MX_TIM7_Init+0x64>)
 8006740:	22ef      	movs	r2, #239	; 0xef
 8006742:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006744:	4b11      	ldr	r3, [pc, #68]	; (800678c <MX_TIM7_Init+0x64>)
 8006746:	2200      	movs	r2, #0
 8006748:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800674a:	4b10      	ldr	r3, [pc, #64]	; (800678c <MX_TIM7_Init+0x64>)
 800674c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006750:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006752:	4b0e      	ldr	r3, [pc, #56]	; (800678c <MX_TIM7_Init+0x64>)
 8006754:	2200      	movs	r2, #0
 8006756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006758:	480c      	ldr	r0, [pc, #48]	; (800678c <MX_TIM7_Init+0x64>)
 800675a:	f007 fc9e 	bl	800e09a <HAL_TIM_Base_Init>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8006764:	f000 fa0a 	bl	8006b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006768:	2300      	movs	r3, #0
 800676a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006770:	1d3b      	adds	r3, r7, #4
 8006772:	4619      	mov	r1, r3
 8006774:	4805      	ldr	r0, [pc, #20]	; (800678c <MX_TIM7_Init+0x64>)
 8006776:	f007 ff6f 	bl	800e658 <HAL_TIMEx_MasterConfigSynchronization>
 800677a:	4603      	mov	r3, r0
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006780:	f000 f9fc 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006784:	bf00      	nop
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	240002e8 	.word	0x240002e8
 8006790:	40001400 	.word	0x40001400

08006794 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006798:	4b22      	ldr	r3, [pc, #136]	; (8006824 <MX_USART3_UART_Init+0x90>)
 800679a:	4a23      	ldr	r2, [pc, #140]	; (8006828 <MX_USART3_UART_Init+0x94>)
 800679c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 800679e:	4b21      	ldr	r3, [pc, #132]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067a0:	4a22      	ldr	r2, [pc, #136]	; (800682c <MX_USART3_UART_Init+0x98>)
 80067a2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80067a4:	4b1f      	ldr	r3, [pc, #124]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80067aa:	4b1e      	ldr	r3, [pc, #120]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80067b0:	4b1c      	ldr	r3, [pc, #112]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067b2:	2200      	movs	r2, #0
 80067b4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80067b6:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067b8:	220c      	movs	r2, #12
 80067ba:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80067bc:	4b19      	ldr	r3, [pc, #100]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067be:	2200      	movs	r2, #0
 80067c0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80067c2:	4b18      	ldr	r3, [pc, #96]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80067c8:	4b16      	ldr	r3, [pc, #88]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80067ce:	4b15      	ldr	r3, [pc, #84]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80067d4:	4b13      	ldr	r3, [pc, #76]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80067da:	4812      	ldr	r0, [pc, #72]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067dc:	f007 ffe8 	bl	800e7b0 <HAL_UART_Init>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80067e6:	f000 f9c9 	bl	8006b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80067ea:	2100      	movs	r1, #0
 80067ec:	480d      	ldr	r0, [pc, #52]	; (8006824 <MX_USART3_UART_Init+0x90>)
 80067ee:	f009 fc09 	bl	8010004 <HAL_UARTEx_SetTxFifoThreshold>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80067f8:	f000 f9c0 	bl	8006b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80067fc:	2100      	movs	r1, #0
 80067fe:	4809      	ldr	r0, [pc, #36]	; (8006824 <MX_USART3_UART_Init+0x90>)
 8006800:	f009 fc3e 	bl	8010080 <HAL_UARTEx_SetRxFifoThreshold>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800680a:	f000 f9b7 	bl	8006b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800680e:	4805      	ldr	r0, [pc, #20]	; (8006824 <MX_USART3_UART_Init+0x90>)
 8006810:	f009 fbbf 	bl	800ff92 <HAL_UARTEx_DisableFifoMode>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800681a:	f000 f9af 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800681e:	bf00      	nop
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	24000334 	.word	0x24000334
 8006828:	40004800 	.word	0x40004800
 800682c:	0005dc00 	.word	0x0005dc00

08006830 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006834:	4b15      	ldr	r3, [pc, #84]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006836:	4a16      	ldr	r2, [pc, #88]	; (8006890 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8006838:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800683c:	2209      	movs	r2, #9
 800683e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006840:	4b12      	ldr	r3, [pc, #72]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006842:	2202      	movs	r2, #2
 8006844:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006846:	4b11      	ldr	r3, [pc, #68]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006848:	2200      	movs	r2, #0
 800684a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800684c:	4b0f      	ldr	r3, [pc, #60]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800684e:	2202      	movs	r2, #2
 8006850:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006852:	4b0e      	ldr	r3, [pc, #56]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006854:	2200      	movs	r2, #0
 8006856:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006858:	4b0c      	ldr	r3, [pc, #48]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800685a:	2200      	movs	r2, #0
 800685c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800685e:	4b0b      	ldr	r3, [pc, #44]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006860:	2200      	movs	r2, #0
 8006862:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8006864:	4b09      	ldr	r3, [pc, #36]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006866:	2201      	movs	r2, #1
 8006868:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800686c:	2201      	movs	r2, #1
 800686e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006870:	4b06      	ldr	r3, [pc, #24]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006872:	2200      	movs	r2, #0
 8006874:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006876:	4805      	ldr	r0, [pc, #20]	; (800688c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006878:	f004 fb5a 	bl	800af30 <HAL_PCD_Init>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d001      	beq.n	8006886 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8006882:	f000 f97b 	bl	8006b7c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006886:	bf00      	nop
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	240004b4 	.word	0x240004b4
 8006890:	40080000 	.word	0x40080000

08006894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800689a:	4b11      	ldr	r3, [pc, #68]	; (80068e0 <MX_DMA_Init+0x4c>)
 800689c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80068a0:	4a0f      	ldr	r2, [pc, #60]	; (80068e0 <MX_DMA_Init+0x4c>)
 80068a2:	f043 0301 	orr.w	r3, r3, #1
 80068a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80068aa:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <MX_DMA_Init+0x4c>)
 80068ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	607b      	str	r3, [r7, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80068b8:	2200      	movs	r2, #0
 80068ba:	2100      	movs	r1, #0
 80068bc:	200c      	movs	r0, #12
 80068be:	f001 fa8e 	bl	8007dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80068c2:	200c      	movs	r0, #12
 80068c4:	f001 faa5 	bl	8007e12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80068c8:	2200      	movs	r2, #0
 80068ca:	2100      	movs	r1, #0
 80068cc:	200f      	movs	r0, #15
 80068ce:	f001 fa86 	bl	8007dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80068d2:	200f      	movs	r0, #15
 80068d4:	f001 fa9d 	bl	8007e12 <HAL_NVIC_EnableIRQ>

}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}
 80068e0:	58024400 	.word	0x58024400

080068e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08e      	sub	sp, #56	; 0x38
 80068e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]
 80068f2:	605a      	str	r2, [r3, #4]
 80068f4:	609a      	str	r2, [r3, #8]
 80068f6:	60da      	str	r2, [r3, #12]
 80068f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80068fa:	4b8a      	ldr	r3, [pc, #552]	; (8006b24 <MX_GPIO_Init+0x240>)
 80068fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006900:	4a88      	ldr	r2, [pc, #544]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006902:	f043 0304 	orr.w	r3, r3, #4
 8006906:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800690a:	4b86      	ldr	r3, [pc, #536]	; (8006b24 <MX_GPIO_Init+0x240>)
 800690c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006910:	f003 0304 	and.w	r3, r3, #4
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006918:	4b82      	ldr	r3, [pc, #520]	; (8006b24 <MX_GPIO_Init+0x240>)
 800691a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800691e:	4a81      	ldr	r2, [pc, #516]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006924:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006928:	4b7e      	ldr	r3, [pc, #504]	; (8006b24 <MX_GPIO_Init+0x240>)
 800692a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800692e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006936:	4b7b      	ldr	r3, [pc, #492]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800693c:	4a79      	ldr	r2, [pc, #484]	; (8006b24 <MX_GPIO_Init+0x240>)
 800693e:	f043 0301 	orr.w	r3, r3, #1
 8006942:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006946:	4b77      	ldr	r3, [pc, #476]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006954:	4b73      	ldr	r3, [pc, #460]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800695a:	4a72      	ldr	r2, [pc, #456]	; (8006b24 <MX_GPIO_Init+0x240>)
 800695c:	f043 0302 	orr.w	r3, r3, #2
 8006960:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006964:	4b6f      	ldr	r3, [pc, #444]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800696a:	f003 0302 	and.w	r3, r3, #2
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006972:	4b6c      	ldr	r3, [pc, #432]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006978:	4a6a      	ldr	r2, [pc, #424]	; (8006b24 <MX_GPIO_Init+0x240>)
 800697a:	f043 0320 	orr.w	r3, r3, #32
 800697e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006982:	4b68      	ldr	r3, [pc, #416]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006988:	f003 0320 	and.w	r3, r3, #32
 800698c:	613b      	str	r3, [r7, #16]
 800698e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006990:	4b64      	ldr	r3, [pc, #400]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006996:	4a63      	ldr	r2, [pc, #396]	; (8006b24 <MX_GPIO_Init+0x240>)
 8006998:	f043 0310 	orr.w	r3, r3, #16
 800699c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069a0:	4b60      	ldr	r3, [pc, #384]	; (8006b24 <MX_GPIO_Init+0x240>)
 80069a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069a6:	f003 0310 	and.w	r3, r3, #16
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80069ae:	4b5d      	ldr	r3, [pc, #372]	; (8006b24 <MX_GPIO_Init+0x240>)
 80069b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069b4:	4a5b      	ldr	r2, [pc, #364]	; (8006b24 <MX_GPIO_Init+0x240>)
 80069b6:	f043 0308 	orr.w	r3, r3, #8
 80069ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069be:	4b59      	ldr	r3, [pc, #356]	; (8006b24 <MX_GPIO_Init+0x240>)
 80069c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80069cc:	4b55      	ldr	r3, [pc, #340]	; (8006b24 <MX_GPIO_Init+0x240>)
 80069ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d2:	4a54      	ldr	r2, [pc, #336]	; (8006b24 <MX_GPIO_Init+0x240>)
 80069d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80069dc:	4b51      	ldr	r3, [pc, #324]	; (8006b24 <MX_GPIO_Init+0x240>)
 80069de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 80069ea:	2201      	movs	r2, #1
 80069ec:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80069f0:	484d      	ldr	r0, [pc, #308]	; (8006b28 <MX_GPIO_Init+0x244>)
 80069f2:	f004 fa3b 	bl	800ae6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 80069f6:	2200      	movs	r2, #0
 80069f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80069fc:	484a      	ldr	r0, [pc, #296]	; (8006b28 <MX_GPIO_Init+0x244>)
 80069fe:	f004 fa35 	bl	800ae6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006a02:	2200      	movs	r2, #0
 8006a04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a08:	4848      	ldr	r0, [pc, #288]	; (8006b2c <MX_GPIO_Init+0x248>)
 8006a0a:	f004 fa2f 	bl	800ae6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a14:	4846      	ldr	r0, [pc, #280]	; (8006b30 <MX_GPIO_Init+0x24c>)
 8006a16:	f004 fa29 	bl	800ae6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a20:	4844      	ldr	r0, [pc, #272]	; (8006b34 <MX_GPIO_Init+0x250>)
 8006a22:	f004 fa23 	bl	800ae6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8006a26:	230d      	movs	r3, #13
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2e:	2300      	movs	r3, #0
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a36:	4619      	mov	r1, r3
 8006a38:	483f      	ldr	r0, [pc, #252]	; (8006b38 <MX_GPIO_Init+0x254>)
 8006a3a:	f004 f84f 	bl	800aadc <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8006a3e:	2308      	movs	r3, #8
 8006a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a42:	2300      	movs	r3, #0
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006a4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a4e:	4619      	mov	r1, r3
 8006a50:	483a      	ldr	r0, [pc, #232]	; (8006b3c <MX_GPIO_Init+0x258>)
 8006a52:	f004 f843 	bl	800aadc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8006a56:	2302      	movs	r3, #2
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8006a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a66:	4619      	mov	r1, r3
 8006a68:	4830      	ldr	r0, [pc, #192]	; (8006b2c <MX_GPIO_Init+0x248>)
 8006a6a:	f004 f837 	bl	800aadc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8006a6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a74:	2300      	movs	r3, #0
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8006a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a80:	4619      	mov	r1, r3
 8006a82:	482f      	ldr	r0, [pc, #188]	; (8006b40 <MX_GPIO_Init+0x25c>)
 8006a84:	f004 f82a 	bl	800aadc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8006a88:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a92:	2300      	movs	r3, #0
 8006a94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a96:	2300      	movs	r3, #0
 8006a98:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	4821      	ldr	r0, [pc, #132]	; (8006b28 <MX_GPIO_Init+0x244>)
 8006aa2:	f004 f81b 	bl	800aadc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8006aa6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aac:	2301      	movs	r3, #1
 8006aae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8006ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006abc:	4619      	mov	r1, r3
 8006abe:	481b      	ldr	r0, [pc, #108]	; (8006b2c <MX_GPIO_Init+0x248>)
 8006ac0:	f004 f80c 	bl	800aadc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8006ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aca:	2301      	movs	r3, #1
 8006acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8006ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ada:	4619      	mov	r1, r3
 8006adc:	4814      	ldr	r0, [pc, #80]	; (8006b30 <MX_GPIO_Init+0x24c>)
 8006ade:	f003 fffd 	bl	800aadc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8006ae2:	2380      	movs	r3, #128	; 0x80
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006ae6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8006af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006af4:	4619      	mov	r1, r3
 8006af6:	480f      	ldr	r0, [pc, #60]	; (8006b34 <MX_GPIO_Init+0x250>)
 8006af8:	f003 fff0 	bl	800aadc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8006afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b02:	2301      	movs	r3, #1
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b06:	2300      	movs	r3, #0
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8006b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b12:	4619      	mov	r1, r3
 8006b14:	4807      	ldr	r0, [pc, #28]	; (8006b34 <MX_GPIO_Init+0x250>)
 8006b16:	f003 ffe1 	bl	800aadc <HAL_GPIO_Init>

}
 8006b1a:	bf00      	nop
 8006b1c:	3738      	adds	r7, #56	; 0x38
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}
 8006b22:	bf00      	nop
 8006b24:	58024400 	.word	0x58024400
 8006b28:	58021000 	.word	0x58021000
 8006b2c:	58020400 	.word	0x58020400
 8006b30:	58020c00 	.word	0x58020c00
 8006b34:	58021800 	.word	0x58021800
 8006b38:	58020800 	.word	0x58020800
 8006b3c:	58020000 	.word	0x58020000
 8006b40:	58021400 	.word	0x58021400

08006b44 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006b44:	b4b0      	push	{r4, r5, r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a09      	ldr	r2, [pc, #36]	; (8006b74 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d10a      	bne.n	8006b6a <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8006b54:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006b5e:	1854      	adds	r4, r2, r1
 8006b60:	f143 0500 	adc.w	r5, r3, #0
 8006b64:	4b04      	ldr	r3, [pc, #16]	; (8006b78 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006b66:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bcb0      	pop	{r4, r5, r7}
 8006b72:	4770      	bx	lr
 8006b74:	240002e8 	.word	0x240002e8
 8006b78:	24000ea0 	.word	0x24000ea0

08006b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006b80:	b672      	cpsid	i
}
 8006b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006b84:	e7fe      	b.n	8006b84 <Error_Handler+0x8>
	...

08006b88 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b92:	4802      	ldr	r0, [pc, #8]	; (8006b9c <ST7735_Select+0x14>)
 8006b94:	f004 f96a 	bl	800ae6c <HAL_GPIO_WritePin>
}
 8006b98:	bf00      	nop
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	58021000 	.word	0x58021000

08006ba0 <ST7735_Unselect>:

void ST7735_Unselect() {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006baa:	4802      	ldr	r0, [pc, #8]	; (8006bb4 <ST7735_Unselect+0x14>)
 8006bac:	f004 f95e 	bl	800ae6c <HAL_GPIO_WritePin>
}
 8006bb0:	bf00      	nop
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	58021000 	.word	0x58021000

08006bb8 <ST7735_Select1>:
static void ST7735_Select1() {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bc2:	4802      	ldr	r0, [pc, #8]	; (8006bcc <ST7735_Select1+0x14>)
 8006bc4:	f004 f952 	bl	800ae6c <HAL_GPIO_WritePin>
}
 8006bc8:	bf00      	nop
 8006bca:	bd80      	pop	{r7, pc}
 8006bcc:	58021000 	.word	0x58021000

08006bd0 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bda:	4802      	ldr	r0, [pc, #8]	; (8006be4 <ST7735_Unselect1+0x14>)
 8006bdc:	f004 f946 	bl	800ae6c <HAL_GPIO_WritePin>
}
 8006be0:	bf00      	nop
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	58021000 	.word	0x58021000

08006be8 <ST7735_Reset>:

static void ST7735_Reset() {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8006bec:	2200      	movs	r2, #0
 8006bee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006bf2:	4807      	ldr	r0, [pc, #28]	; (8006c10 <ST7735_Reset+0x28>)
 8006bf4:	f004 f93a 	bl	800ae6c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8006bf8:	2005      	movs	r0, #5
 8006bfa:	f000 ffd1 	bl	8007ba0 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c04:	4802      	ldr	r0, [pc, #8]	; (8006c10 <ST7735_Reset+0x28>)
 8006c06:	f004 f931 	bl	800ae6c <HAL_GPIO_WritePin>
}
 8006c0a:	bf00      	nop
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	58021000 	.word	0x58021000

08006c14 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c24:	4806      	ldr	r0, [pc, #24]	; (8006c40 <ST7735_WriteCommand+0x2c>)
 8006c26:	f004 f921 	bl	800ae6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006c2a:	1df9      	adds	r1, r7, #7
 8006c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c30:	2201      	movs	r2, #1
 8006c32:	4804      	ldr	r0, [pc, #16]	; (8006c44 <ST7735_WriteCommand+0x30>)
 8006c34:	f006 ff56 	bl	800dae4 <HAL_SPI_Transmit>
}
 8006c38:	bf00      	nop
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	58021800 	.word	0x58021800
 8006c44:	24000260 	.word	0x24000260

08006c48 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006c52:	2201      	movs	r2, #1
 8006c54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c58:	4807      	ldr	r0, [pc, #28]	; (8006c78 <ST7735_WriteData+0x30>)
 8006c5a:	f004 f907 	bl	800ae6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	b29a      	uxth	r2, r3
 8006c62:	f04f 33ff 	mov.w	r3, #4294967295
 8006c66:	6879      	ldr	r1, [r7, #4]
 8006c68:	4804      	ldr	r0, [pc, #16]	; (8006c7c <ST7735_WriteData+0x34>)
 8006c6a:	f006 ff3b 	bl	800dae4 <HAL_SPI_Transmit>
}
 8006c6e:	bf00      	nop
 8006c70:	3708      	adds	r7, #8
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	58021800 	.word	0x58021800
 8006c7c:	24000260 	.word	0x24000260

08006c80 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b084      	sub	sp, #16
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	607a      	str	r2, [r7, #4]
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8006c92:	e034      	b.n	8006cfe <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	1c5a      	adds	r2, r3, #1
 8006c98:	607a      	str	r2, [r7, #4]
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 8006c9e:	7afb      	ldrb	r3, [r7, #11]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff ffb7 	bl	8006c14 <ST7735_WriteCommand>

		numArgs = *addr++;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 8006cb0:	7abb      	ldrb	r3, [r7, #10]
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb8:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 8006cba:	7abb      	ldrb	r3, [r7, #10]
 8006cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cc0:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 8006cc2:	7abb      	ldrb	r3, [r7, #10]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d008      	beq.n	8006cda <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 8006cc8:	7abb      	ldrb	r3, [r7, #10]
 8006cca:	4619      	mov	r1, r3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f7ff ffbb 	bl	8006c48 <ST7735_WriteData>
			addr += numArgs;
 8006cd2:	7abb      	ldrb	r3, [r7, #10]
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 8006cda:	89bb      	ldrh	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00e      	beq.n	8006cfe <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	1c5a      	adds	r2, r3, #1
 8006ce4:	607a      	str	r2, [r7, #4]
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 8006cea:	89bb      	ldrh	r3, [r7, #12]
 8006cec:	2bff      	cmp	r3, #255	; 0xff
 8006cee:	d102      	bne.n	8006cf6 <ST7735_ExecuteCommandList+0x76>
 8006cf0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006cf4:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 8006cf6:	89bb      	ldrh	r3, [r7, #12]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f000 ff51 	bl	8007ba0 <HAL_Delay>
	while(numCommands--) {
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	1e5a      	subs	r2, r3, #1
 8006d02:	73fa      	strb	r2, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d1c5      	bne.n	8006c94 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006d08:	bf00      	nop
 8006d0a:	bf00      	nop
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8006d12:	b590      	push	{r4, r7, lr}
 8006d14:	b085      	sub	sp, #20
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	4604      	mov	r4, r0
 8006d1a:	4608      	mov	r0, r1
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	461a      	mov	r2, r3
 8006d20:	4623      	mov	r3, r4
 8006d22:	71fb      	strb	r3, [r7, #7]
 8006d24:	4603      	mov	r3, r0
 8006d26:	71bb      	strb	r3, [r7, #6]
 8006d28:	460b      	mov	r3, r1
 8006d2a:	717b      	strb	r3, [r7, #5]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8006d30:	202a      	movs	r0, #42	; 0x2a
 8006d32:	f7ff ff6f 	bl	8006c14 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8006d36:	2300      	movs	r3, #0
 8006d38:	733b      	strb	r3, [r7, #12]
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	3302      	adds	r3, #2
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	737b      	strb	r3, [r7, #13]
 8006d42:	2300      	movs	r3, #0
 8006d44:	73bb      	strb	r3, [r7, #14]
 8006d46:	797b      	ldrb	r3, [r7, #5]
 8006d48:	3302      	adds	r3, #2
 8006d4a:	b2db      	uxtb	r3, r3
 8006d4c:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006d4e:	f107 030c 	add.w	r3, r7, #12
 8006d52:	2104      	movs	r1, #4
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7ff ff77 	bl	8006c48 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 8006d5a:	202b      	movs	r0, #43	; 0x2b
 8006d5c:	f7ff ff5a 	bl	8006c14 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8006d60:	79bb      	ldrb	r3, [r7, #6]
 8006d62:	3301      	adds	r3, #1
 8006d64:	b2db      	uxtb	r3, r3
 8006d66:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8006d68:	793b      	ldrb	r3, [r7, #4]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006d70:	f107 030c 	add.w	r3, r7, #12
 8006d74:	2104      	movs	r1, #4
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7ff ff66 	bl	8006c48 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8006d7c:	202c      	movs	r0, #44	; 0x2c
 8006d7e:	f7ff ff49 	bl	8006c14 <ST7735_WriteCommand>
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd90      	pop	{r4, r7, pc}
	...

08006d8c <ST7735_Init>:

void ST7735_Init() {
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
	ST7735_Select();
 8006d90:	f7ff fefa 	bl	8006b88 <ST7735_Select>
	ST7735_Select1();
 8006d94:	f7ff ff10 	bl	8006bb8 <ST7735_Select1>
	ST7735_Reset();
 8006d98:	f7ff ff26 	bl	8006be8 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 8006d9c:	4807      	ldr	r0, [pc, #28]	; (8006dbc <ST7735_Init+0x30>)
 8006d9e:	f7ff ff6f 	bl	8006c80 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 8006da2:	4807      	ldr	r0, [pc, #28]	; (8006dc0 <ST7735_Init+0x34>)
 8006da4:	f7ff ff6c 	bl	8006c80 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 8006da8:	4806      	ldr	r0, [pc, #24]	; (8006dc4 <ST7735_Init+0x38>)
 8006daa:	f7ff ff69 	bl	8006c80 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 8006dae:	f7ff fef7 	bl	8006ba0 <ST7735_Unselect>
	ST7735_Unselect1();
 8006db2:	f7ff ff0d 	bl	8006bd0 <ST7735_Unselect1>
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	08012a64 	.word	0x08012a64
 8006dc0:	08012aa0 	.word	0x08012aa0
 8006dc4:	08012ab0 	.word	0x08012ab0

08006dc8 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006dc8:	b082      	sub	sp, #8
 8006dca:	b590      	push	{r4, r7, lr}
 8006dcc:	b089      	sub	sp, #36	; 0x24
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	80fb      	strh	r3, [r7, #6]
 8006dd6:	460b      	mov	r3, r1
 8006dd8:	80bb      	strh	r3, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8006dde:	88fb      	ldrh	r3, [r7, #6]
 8006de0:	b2d8      	uxtb	r0, r3
 8006de2:	88bb      	ldrh	r3, [r7, #4]
 8006de4:	b2d9      	uxtb	r1, r3
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006dee:	4413      	add	r3, r2
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	b2dc      	uxtb	r4, r3
 8006df6:	88bb      	ldrh	r3, [r7, #4]
 8006df8:	b2da      	uxtb	r2, r3
 8006dfa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006dfe:	4413      	add	r3, r2
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	3b01      	subs	r3, #1
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	4622      	mov	r2, r4
 8006e08:	f7ff ff83 	bl	8006d12 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	e043      	b.n	8006e9a <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8006e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	3b20      	subs	r3, #32
 8006e18:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006e1c:	fb01 f303 	mul.w	r3, r1, r3
 8006e20:	4619      	mov	r1, r3
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	440b      	add	r3, r1
 8006e26:	005b      	lsls	r3, r3, #1
 8006e28:	4413      	add	r3, r2
 8006e2a:	881b      	ldrh	r3, [r3, #0]
 8006e2c:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8006e2e:	2300      	movs	r3, #0
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	e029      	b.n	8006e88 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	fa02 f303 	lsl.w	r3, r2, r3
 8006e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00e      	beq.n	8006e62 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8006e44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	b29b      	uxth	r3, r3
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	743b      	strb	r3, [r7, #16]
 8006e4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8006e54:	f107 0310 	add.w	r3, r7, #16
 8006e58:	2102      	movs	r1, #2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7ff fef4 	bl	8006c48 <ST7735_WriteData>
 8006e60:	e00f      	b.n	8006e82 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8006e62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e66:	0a1b      	lsrs	r3, r3, #8
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	733b      	strb	r3, [r7, #12]
 8006e6e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8006e76:	f107 030c 	add.w	r3, r7, #12
 8006e7a:	2102      	movs	r1, #2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7ff fee3 	bl	8006c48 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	3301      	adds	r3, #1
 8006e86:	61bb      	str	r3, [r7, #24]
 8006e88:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	69bb      	ldr	r3, [r7, #24]
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d3cf      	bcc.n	8006e34 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	3301      	adds	r3, #1
 8006e98:	61fb      	str	r3, [r7, #28]
 8006e9a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d3b5      	bcc.n	8006e12 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8006ea6:	bf00      	nop
 8006ea8:	bf00      	nop
 8006eaa:	3724      	adds	r7, #36	; 0x24
 8006eac:	46bd      	mov	sp, r7
 8006eae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006eb2:	b002      	add	sp, #8
 8006eb4:	4770      	bx	lr

08006eb6 <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af04      	add	r7, sp, #16
 8006ebe:	603a      	str	r2, [r7, #0]
 8006ec0:	617b      	str	r3, [r7, #20]
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	80fb      	strh	r3, [r7, #6]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8006eca:	f7ff fe5d 	bl	8006b88 <ST7735_Select>

	while(*str) {
 8006ece:	e02d      	b.n	8006f2c <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	7d3a      	ldrb	r2, [r7, #20]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ed8:	dd13      	ble.n	8006f02 <ST7735_WriteString+0x4c>
			x = 0;
 8006eda:	2300      	movs	r3, #0
 8006edc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006ede:	7d7b      	ldrb	r3, [r7, #21]
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	88bb      	ldrh	r3, [r7, #4]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006ee8:	88bb      	ldrh	r3, [r7, #4]
 8006eea:	7d7a      	ldrb	r2, [r7, #21]
 8006eec:	4413      	add	r3, r2
 8006eee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef0:	dc21      	bgt.n	8006f36 <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	d103      	bne.n	8006f02 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	3301      	adds	r3, #1
 8006efe:	603b      	str	r3, [r7, #0]
				continue;
 8006f00:	e014      	b.n	8006f2c <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	88b9      	ldrh	r1, [r7, #4]
 8006f08:	88f8      	ldrh	r0, [r7, #6]
 8006f0a:	8c3b      	ldrh	r3, [r7, #32]
 8006f0c:	9302      	str	r3, [sp, #8]
 8006f0e:	8bbb      	ldrh	r3, [r7, #28]
 8006f10:	9301      	str	r3, [sp, #4]
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f7ff ff56 	bl	8006dc8 <ST7735_WriteChar>
		x += font.width;
 8006f1c:	7d3b      	ldrb	r3, [r7, #20]
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	88fb      	ldrh	r3, [r7, #6]
 8006f22:	4413      	add	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
		str++;
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d1cd      	bne.n	8006ed0 <ST7735_WriteString+0x1a>
 8006f34:	e000      	b.n	8006f38 <ST7735_WriteString+0x82>
				break;
 8006f36:	bf00      	nop
	}

	ST7735_Unselect();
 8006f38:	f7ff fe32 	bl	8006ba0 <ST7735_Unselect>
}
 8006f3c:	bf00      	nop
 8006f3e:	3708      	adds	r7, #8
 8006f40:	46bd      	mov	sp, r7
 8006f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f46:	b002      	add	sp, #8
 8006f48:	4770      	bx	lr

08006f4a <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b086      	sub	sp, #24
 8006f50:	af04      	add	r7, sp, #16
 8006f52:	603a      	str	r2, [r7, #0]
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	4603      	mov	r3, r0
 8006f58:	80fb      	strh	r3, [r7, #6]
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8006f5e:	f7ff fe2b 	bl	8006bb8 <ST7735_Select1>

	while(*str) {
 8006f62:	e02d      	b.n	8006fc0 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006f64:	88fb      	ldrh	r3, [r7, #6]
 8006f66:	7d3a      	ldrb	r2, [r7, #20]
 8006f68:	4413      	add	r3, r2
 8006f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f6c:	dd13      	ble.n	8006f96 <ST7735_WriteString1+0x4c>
			x = 0;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006f72:	7d7b      	ldrb	r3, [r7, #21]
 8006f74:	b29a      	uxth	r2, r3
 8006f76:	88bb      	ldrh	r3, [r7, #4]
 8006f78:	4413      	add	r3, r2
 8006f7a:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006f7c:	88bb      	ldrh	r3, [r7, #4]
 8006f7e:	7d7a      	ldrb	r2, [r7, #21]
 8006f80:	4413      	add	r3, r2
 8006f82:	2b7f      	cmp	r3, #127	; 0x7f
 8006f84:	dc21      	bgt.n	8006fca <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d103      	bne.n	8006f96 <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	3301      	adds	r3, #1
 8006f92:	603b      	str	r3, [r7, #0]
				continue;
 8006f94:	e014      	b.n	8006fc0 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	88b9      	ldrh	r1, [r7, #4]
 8006f9c:	88f8      	ldrh	r0, [r7, #6]
 8006f9e:	8c3b      	ldrh	r3, [r7, #32]
 8006fa0:	9302      	str	r3, [sp, #8]
 8006fa2:	8bbb      	ldrh	r3, [r7, #28]
 8006fa4:	9301      	str	r3, [sp, #4]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	9300      	str	r3, [sp, #0]
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f7ff ff0c 	bl	8006dc8 <ST7735_WriteChar>
		x += font.width;
 8006fb0:	7d3b      	ldrb	r3, [r7, #20]
 8006fb2:	b29a      	uxth	r2, r3
 8006fb4:	88fb      	ldrh	r3, [r7, #6]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	80fb      	strh	r3, [r7, #6]
		str++;
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	781b      	ldrb	r3, [r3, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d1cd      	bne.n	8006f64 <ST7735_WriteString1+0x1a>
 8006fc8:	e000      	b.n	8006fcc <ST7735_WriteString1+0x82>
				break;
 8006fca:	bf00      	nop
	}

	ST7735_Unselect1();
 8006fcc:	f7ff fe00 	bl	8006bd0 <ST7735_Unselect1>
}
 8006fd0:	bf00      	nop
 8006fd2:	3708      	adds	r7, #8
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fda:	b002      	add	sp, #8
 8006fdc:	4770      	bx	lr

08006fde <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8006fde:	b082      	sub	sp, #8
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af04      	add	r7, sp, #16
 8006fe6:	603a      	str	r2, [r7, #0]
 8006fe8:	617b      	str	r3, [r7, #20]
 8006fea:	4603      	mov	r3, r0
 8006fec:	80fb      	strh	r3, [r7, #6]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8006ff2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8006ffa:	f7ff fdc5 	bl	8006b88 <ST7735_Select>
 8006ffe:	e034      	b.n	800706a <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8007000:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007004:	2b01      	cmp	r3, #1
 8007006:	d130      	bne.n	800706a <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8007008:	f7ff fdd6 	bl	8006bb8 <ST7735_Select1>

	}


	while(*str) {
 800700c:	e02d      	b.n	800706a <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 800700e:	88fb      	ldrh	r3, [r7, #6]
 8007010:	7d3a      	ldrb	r2, [r7, #20]
 8007012:	4413      	add	r3, r2
 8007014:	2b7f      	cmp	r3, #127	; 0x7f
 8007016:	dd13      	ble.n	8007040 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800701c:	7d7b      	ldrb	r3, [r7, #21]
 800701e:	b29a      	uxth	r2, r3
 8007020:	88bb      	ldrh	r3, [r7, #4]
 8007022:	4413      	add	r3, r2
 8007024:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8007026:	88bb      	ldrh	r3, [r7, #4]
 8007028:	7d7a      	ldrb	r2, [r7, #21]
 800702a:	4413      	add	r3, r2
 800702c:	2b7f      	cmp	r3, #127	; 0x7f
 800702e:	dc21      	bgt.n	8007074 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b20      	cmp	r3, #32
 8007036:	d103      	bne.n	8007040 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	3301      	adds	r3, #1
 800703c:	603b      	str	r3, [r7, #0]
				continue;
 800703e:	e014      	b.n	800706a <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	88b9      	ldrh	r1, [r7, #4]
 8007046:	88f8      	ldrh	r0, [r7, #6]
 8007048:	8c3b      	ldrh	r3, [r7, #32]
 800704a:	9302      	str	r3, [sp, #8]
 800704c:	8bbb      	ldrh	r3, [r7, #28]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f7ff feb7 	bl	8006dc8 <ST7735_WriteChar>
		x += font.width;
 800705a:	7d3b      	ldrb	r3, [r7, #20]
 800705c:	b29a      	uxth	r2, r3
 800705e:	88fb      	ldrh	r3, [r7, #6]
 8007060:	4413      	add	r3, r2
 8007062:	80fb      	strh	r3, [r7, #6]
		str++;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	603b      	str	r3, [r7, #0]
	while(*str) {
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1cd      	bne.n	800700e <ST7735_WriteStringNSS+0x30>
 8007072:	e000      	b.n	8007076 <ST7735_WriteStringNSS+0x98>
				break;
 8007074:	bf00      	nop
	}
	if(NSS == 0){
 8007076:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800707a:	2b00      	cmp	r3, #0
 800707c:	d102      	bne.n	8007084 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 800707e:	f7ff fd8f 	bl	8006ba0 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8007082:	e005      	b.n	8007090 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8007084:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 800708c:	f7ff fda0 	bl	8006bd0 <ST7735_Unselect1>
}
 8007090:	bf00      	nop
 8007092:	3708      	adds	r7, #8
 8007094:	46bd      	mov	sp, r7
 8007096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800709a:	b002      	add	sp, #8
 800709c:	4770      	bx	lr
	...

080070a0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80070a0:	b590      	push	{r4, r7, lr}
 80070a2:	b085      	sub	sp, #20
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4604      	mov	r4, r0
 80070a8:	4608      	mov	r0, r1
 80070aa:	4611      	mov	r1, r2
 80070ac:	461a      	mov	r2, r3
 80070ae:	4623      	mov	r3, r4
 80070b0:	80fb      	strh	r3, [r7, #6]
 80070b2:	4603      	mov	r3, r0
 80070b4:	80bb      	strh	r3, [r7, #4]
 80070b6:	460b      	mov	r3, r1
 80070b8:	807b      	strh	r3, [r7, #2]
 80070ba:	4613      	mov	r3, r2
 80070bc:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	2b7f      	cmp	r3, #127	; 0x7f
 80070c2:	d858      	bhi.n	8007176 <ST7735_FillRectangle+0xd6>
 80070c4:	88bb      	ldrh	r3, [r7, #4]
 80070c6:	2b7f      	cmp	r3, #127	; 0x7f
 80070c8:	d855      	bhi.n	8007176 <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80070ca:	88fa      	ldrh	r2, [r7, #6]
 80070cc:	887b      	ldrh	r3, [r7, #2]
 80070ce:	4413      	add	r3, r2
 80070d0:	2b80      	cmp	r3, #128	; 0x80
 80070d2:	dd03      	ble.n	80070dc <ST7735_FillRectangle+0x3c>
 80070d4:	88fb      	ldrh	r3, [r7, #6]
 80070d6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80070da:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80070dc:	88ba      	ldrh	r2, [r7, #4]
 80070de:	883b      	ldrh	r3, [r7, #0]
 80070e0:	4413      	add	r3, r2
 80070e2:	2b80      	cmp	r3, #128	; 0x80
 80070e4:	dd03      	ble.n	80070ee <ST7735_FillRectangle+0x4e>
 80070e6:	88bb      	ldrh	r3, [r7, #4]
 80070e8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80070ec:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 80070ee:	f7ff fd4b 	bl	8006b88 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80070f2:	88fb      	ldrh	r3, [r7, #6]
 80070f4:	b2d8      	uxtb	r0, r3
 80070f6:	88bb      	ldrh	r3, [r7, #4]
 80070f8:	b2d9      	uxtb	r1, r3
 80070fa:	88fb      	ldrh	r3, [r7, #6]
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	887b      	ldrh	r3, [r7, #2]
 8007100:	b2db      	uxtb	r3, r3
 8007102:	4413      	add	r3, r2
 8007104:	b2db      	uxtb	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b2dc      	uxtb	r4, r3
 800710a:	88bb      	ldrh	r3, [r7, #4]
 800710c:	b2da      	uxtb	r2, r3
 800710e:	883b      	ldrh	r3, [r7, #0]
 8007110:	b2db      	uxtb	r3, r3
 8007112:	4413      	add	r3, r2
 8007114:	b2db      	uxtb	r3, r3
 8007116:	3b01      	subs	r3, #1
 8007118:	b2db      	uxtb	r3, r3
 800711a:	4622      	mov	r2, r4
 800711c:	f7ff fdf9 	bl	8006d12 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8007120:	8c3b      	ldrh	r3, [r7, #32]
 8007122:	0a1b      	lsrs	r3, r3, #8
 8007124:	b29b      	uxth	r3, r3
 8007126:	b2db      	uxtb	r3, r3
 8007128:	733b      	strb	r3, [r7, #12]
 800712a:	8c3b      	ldrh	r3, [r7, #32]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8007130:	2201      	movs	r2, #1
 8007132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007136:	4812      	ldr	r0, [pc, #72]	; (8007180 <ST7735_FillRectangle+0xe0>)
 8007138:	f003 fe98 	bl	800ae6c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 800713c:	883b      	ldrh	r3, [r7, #0]
 800713e:	80bb      	strh	r3, [r7, #4]
 8007140:	e013      	b.n	800716a <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8007142:	887b      	ldrh	r3, [r7, #2]
 8007144:	80fb      	strh	r3, [r7, #6]
 8007146:	e00a      	b.n	800715e <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8007148:	f107 010c 	add.w	r1, r7, #12
 800714c:	f04f 33ff 	mov.w	r3, #4294967295
 8007150:	2202      	movs	r2, #2
 8007152:	480c      	ldr	r0, [pc, #48]	; (8007184 <ST7735_FillRectangle+0xe4>)
 8007154:	f006 fcc6 	bl	800dae4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8007158:	88fb      	ldrh	r3, [r7, #6]
 800715a:	3b01      	subs	r3, #1
 800715c:	80fb      	strh	r3, [r7, #6]
 800715e:	88fb      	ldrh	r3, [r7, #6]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1f1      	bne.n	8007148 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8007164:	88bb      	ldrh	r3, [r7, #4]
 8007166:	3b01      	subs	r3, #1
 8007168:	80bb      	strh	r3, [r7, #4]
 800716a:	88bb      	ldrh	r3, [r7, #4]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1e8      	bne.n	8007142 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8007170:	f7ff fd16 	bl	8006ba0 <ST7735_Unselect>
 8007174:	e000      	b.n	8007178 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8007176:	bf00      	nop
}
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	bd90      	pop	{r4, r7, pc}
 800717e:	bf00      	nop
 8007180:	58021800 	.word	0x58021800
 8007184:	24000260 	.word	0x24000260

08007188 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8007188:	b590      	push	{r4, r7, lr}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	4604      	mov	r4, r0
 8007190:	4608      	mov	r0, r1
 8007192:	4611      	mov	r1, r2
 8007194:	461a      	mov	r2, r3
 8007196:	4623      	mov	r3, r4
 8007198:	80fb      	strh	r3, [r7, #6]
 800719a:	4603      	mov	r3, r0
 800719c:	80bb      	strh	r3, [r7, #4]
 800719e:	460b      	mov	r3, r1
 80071a0:	807b      	strh	r3, [r7, #2]
 80071a2:	4613      	mov	r3, r2
 80071a4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80071a6:	88fb      	ldrh	r3, [r7, #6]
 80071a8:	2b7f      	cmp	r3, #127	; 0x7f
 80071aa:	d858      	bhi.n	800725e <ST7735_FillRectangle1+0xd6>
 80071ac:	88bb      	ldrh	r3, [r7, #4]
 80071ae:	2b7f      	cmp	r3, #127	; 0x7f
 80071b0:	d855      	bhi.n	800725e <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80071b2:	88fa      	ldrh	r2, [r7, #6]
 80071b4:	887b      	ldrh	r3, [r7, #2]
 80071b6:	4413      	add	r3, r2
 80071b8:	2b80      	cmp	r3, #128	; 0x80
 80071ba:	dd03      	ble.n	80071c4 <ST7735_FillRectangle1+0x3c>
 80071bc:	88fb      	ldrh	r3, [r7, #6]
 80071be:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80071c2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80071c4:	88ba      	ldrh	r2, [r7, #4]
 80071c6:	883b      	ldrh	r3, [r7, #0]
 80071c8:	4413      	add	r3, r2
 80071ca:	2b80      	cmp	r3, #128	; 0x80
 80071cc:	dd03      	ble.n	80071d6 <ST7735_FillRectangle1+0x4e>
 80071ce:	88bb      	ldrh	r3, [r7, #4]
 80071d0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80071d4:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 80071d6:	f7ff fcef 	bl	8006bb8 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80071da:	88fb      	ldrh	r3, [r7, #6]
 80071dc:	b2d8      	uxtb	r0, r3
 80071de:	88bb      	ldrh	r3, [r7, #4]
 80071e0:	b2d9      	uxtb	r1, r3
 80071e2:	88fb      	ldrh	r3, [r7, #6]
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	887b      	ldrh	r3, [r7, #2]
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	4413      	add	r3, r2
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	3b01      	subs	r3, #1
 80071f0:	b2dc      	uxtb	r4, r3
 80071f2:	88bb      	ldrh	r3, [r7, #4]
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	883b      	ldrh	r3, [r7, #0]
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	4413      	add	r3, r2
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	4622      	mov	r2, r4
 8007204:	f7ff fd85 	bl	8006d12 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8007208:	8c3b      	ldrh	r3, [r7, #32]
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	b29b      	uxth	r3, r3
 800720e:	b2db      	uxtb	r3, r3
 8007210:	733b      	strb	r3, [r7, #12]
 8007212:	8c3b      	ldrh	r3, [r7, #32]
 8007214:	b2db      	uxtb	r3, r3
 8007216:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8007218:	2201      	movs	r2, #1
 800721a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800721e:	4812      	ldr	r0, [pc, #72]	; (8007268 <ST7735_FillRectangle1+0xe0>)
 8007220:	f003 fe24 	bl	800ae6c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8007224:	883b      	ldrh	r3, [r7, #0]
 8007226:	80bb      	strh	r3, [r7, #4]
 8007228:	e013      	b.n	8007252 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 800722a:	887b      	ldrh	r3, [r7, #2]
 800722c:	80fb      	strh	r3, [r7, #6]
 800722e:	e00a      	b.n	8007246 <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8007230:	f107 010c 	add.w	r1, r7, #12
 8007234:	f04f 33ff 	mov.w	r3, #4294967295
 8007238:	2202      	movs	r2, #2
 800723a:	480c      	ldr	r0, [pc, #48]	; (800726c <ST7735_FillRectangle1+0xe4>)
 800723c:	f006 fc52 	bl	800dae4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8007240:	88fb      	ldrh	r3, [r7, #6]
 8007242:	3b01      	subs	r3, #1
 8007244:	80fb      	strh	r3, [r7, #6]
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f1      	bne.n	8007230 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 800724c:	88bb      	ldrh	r3, [r7, #4]
 800724e:	3b01      	subs	r3, #1
 8007250:	80bb      	strh	r3, [r7, #4]
 8007252:	88bb      	ldrh	r3, [r7, #4]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1e8      	bne.n	800722a <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8007258:	f7ff fcba 	bl	8006bd0 <ST7735_Unselect1>
 800725c:	e000      	b.n	8007260 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800725e:	bf00      	nop
}
 8007260:	3714      	adds	r7, #20
 8007262:	46bd      	mov	sp, r7
 8007264:	bd90      	pop	{r4, r7, pc}
 8007266:	bf00      	nop
 8007268:	58021800 	.word	0x58021800
 800726c:	24000260 	.word	0x24000260

08007270 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	4604      	mov	r4, r0
 8007278:	4608      	mov	r0, r1
 800727a:	4611      	mov	r1, r2
 800727c:	461a      	mov	r2, r3
 800727e:	4623      	mov	r3, r4
 8007280:	80fb      	strh	r3, [r7, #6]
 8007282:	4603      	mov	r3, r0
 8007284:	80bb      	strh	r3, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	807b      	strh	r3, [r7, #2]
 800728a:	4613      	mov	r3, r2
 800728c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	2b7f      	cmp	r3, #127	; 0x7f
 8007292:	d86e      	bhi.n	8007372 <ST7735_FillRectangleNSS+0x102>
 8007294:	88bb      	ldrh	r3, [r7, #4]
 8007296:	2b7f      	cmp	r3, #127	; 0x7f
 8007298:	d86b      	bhi.n	8007372 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	887b      	ldrh	r3, [r7, #2]
 800729e:	4413      	add	r3, r2
 80072a0:	2b80      	cmp	r3, #128	; 0x80
 80072a2:	dd03      	ble.n	80072ac <ST7735_FillRectangleNSS+0x3c>
 80072a4:	88fb      	ldrh	r3, [r7, #6]
 80072a6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80072aa:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80072ac:	88ba      	ldrh	r2, [r7, #4]
 80072ae:	883b      	ldrh	r3, [r7, #0]
 80072b0:	4413      	add	r3, r2
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	dd03      	ble.n	80072be <ST7735_FillRectangleNSS+0x4e>
 80072b6:	88bb      	ldrh	r3, [r7, #4]
 80072b8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80072bc:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 80072be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d102      	bne.n	80072cc <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 80072c6:	f7ff fc5f 	bl	8006b88 <ST7735_Select>
 80072ca:	e005      	b.n	80072d8 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 80072cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 80072d4:	f7ff fc70 	bl	8006bb8 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80072d8:	88fb      	ldrh	r3, [r7, #6]
 80072da:	b2d8      	uxtb	r0, r3
 80072dc:	88bb      	ldrh	r3, [r7, #4]
 80072de:	b2d9      	uxtb	r1, r3
 80072e0:	88fb      	ldrh	r3, [r7, #6]
 80072e2:	b2da      	uxtb	r2, r3
 80072e4:	887b      	ldrh	r3, [r7, #2]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	4413      	add	r3, r2
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	3b01      	subs	r3, #1
 80072ee:	b2dc      	uxtb	r4, r3
 80072f0:	88bb      	ldrh	r3, [r7, #4]
 80072f2:	b2da      	uxtb	r2, r3
 80072f4:	883b      	ldrh	r3, [r7, #0]
 80072f6:	b2db      	uxtb	r3, r3
 80072f8:	4413      	add	r3, r2
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b2db      	uxtb	r3, r3
 8007300:	4622      	mov	r2, r4
 8007302:	f7ff fd06 	bl	8006d12 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8007306:	8c3b      	ldrh	r3, [r7, #32]
 8007308:	0a1b      	lsrs	r3, r3, #8
 800730a:	b29b      	uxth	r3, r3
 800730c:	b2db      	uxtb	r3, r3
 800730e:	733b      	strb	r3, [r7, #12]
 8007310:	8c3b      	ldrh	r3, [r7, #32]
 8007312:	b2db      	uxtb	r3, r3
 8007314:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8007316:	2201      	movs	r2, #1
 8007318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800731c:	4817      	ldr	r0, [pc, #92]	; (800737c <ST7735_FillRectangleNSS+0x10c>)
 800731e:	f003 fda5 	bl	800ae6c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8007322:	883b      	ldrh	r3, [r7, #0]
 8007324:	80bb      	strh	r3, [r7, #4]
 8007326:	e013      	b.n	8007350 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8007328:	887b      	ldrh	r3, [r7, #2]
 800732a:	80fb      	strh	r3, [r7, #6]
 800732c:	e00a      	b.n	8007344 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800732e:	f107 010c 	add.w	r1, r7, #12
 8007332:	f04f 33ff 	mov.w	r3, #4294967295
 8007336:	2202      	movs	r2, #2
 8007338:	4811      	ldr	r0, [pc, #68]	; (8007380 <ST7735_FillRectangleNSS+0x110>)
 800733a:	f006 fbd3 	bl	800dae4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	3b01      	subs	r3, #1
 8007342:	80fb      	strh	r3, [r7, #6]
 8007344:	88fb      	ldrh	r3, [r7, #6]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d1f1      	bne.n	800732e <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 800734a:	88bb      	ldrh	r3, [r7, #4]
 800734c:	3b01      	subs	r3, #1
 800734e:	80bb      	strh	r3, [r7, #4]
 8007350:	88bb      	ldrh	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1e8      	bne.n	8007328 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8007356:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800735a:	2b00      	cmp	r3, #0
 800735c:	d102      	bne.n	8007364 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 800735e:	f7ff fc1f 	bl	8006ba0 <ST7735_Unselect>
 8007362:	e007      	b.n	8007374 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8007364:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007368:	2b01      	cmp	r3, #1
 800736a:	d103      	bne.n	8007374 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 800736c:	f7ff fc30 	bl	8006bd0 <ST7735_Unselect1>
 8007370:	e000      	b.n	8007374 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8007372:	bf00      	nop
	}
}
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	bd90      	pop	{r4, r7, pc}
 800737a:	bf00      	nop
 800737c:	58021800 	.word	0x58021800
 8007380:	24000260 	.word	0x24000260

08007384 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af02      	add	r7, sp, #8
 800738a:	4603      	mov	r3, r0
 800738c:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	2280      	movs	r2, #128	; 0x80
 8007396:	2100      	movs	r1, #0
 8007398:	2000      	movs	r0, #0
 800739a:	f7ff fe81 	bl	80070a0 <ST7735_FillRectangle>
}
 800739e:	bf00      	nop
 80073a0:	3708      	adds	r7, #8
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af02      	add	r7, sp, #8
 80073ac:	4603      	mov	r3, r0
 80073ae:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80073b0:	88fb      	ldrh	r3, [r7, #6]
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	2380      	movs	r3, #128	; 0x80
 80073b6:	2280      	movs	r2, #128	; 0x80
 80073b8:	2100      	movs	r1, #0
 80073ba:	2000      	movs	r0, #0
 80073bc:	f7ff fee4 	bl	8007188 <ST7735_FillRectangle1>
}
 80073c0:	bf00      	nop
 80073c2:	3708      	adds	r7, #8
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073ce:	4b0a      	ldr	r3, [pc, #40]	; (80073f8 <HAL_MspInit+0x30>)
 80073d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073d4:	4a08      	ldr	r2, [pc, #32]	; (80073f8 <HAL_MspInit+0x30>)
 80073d6:	f043 0302 	orr.w	r3, r3, #2
 80073da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80073de:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <HAL_MspInit+0x30>)
 80073e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073e4:	f003 0302 	and.w	r3, r3, #2
 80073e8:	607b      	str	r3, [r7, #4]
 80073ea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	58024400 	.word	0x58024400

080073fc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b08e      	sub	sp, #56	; 0x38
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007408:	2200      	movs	r2, #0
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	605a      	str	r2, [r3, #4]
 800740e:	609a      	str	r2, [r3, #8]
 8007410:	60da      	str	r2, [r3, #12]
 8007412:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a59      	ldr	r2, [pc, #356]	; (8007580 <HAL_ETH_MspInit+0x184>)
 800741a:	4293      	cmp	r3, r2
 800741c:	f040 80ab 	bne.w	8007576 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007420:	4b58      	ldr	r3, [pc, #352]	; (8007584 <HAL_ETH_MspInit+0x188>)
 8007422:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007426:	4a57      	ldr	r2, [pc, #348]	; (8007584 <HAL_ETH_MspInit+0x188>)
 8007428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800742c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007430:	4b54      	ldr	r3, [pc, #336]	; (8007584 <HAL_ETH_MspInit+0x188>)
 8007432:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800743a:	623b      	str	r3, [r7, #32]
 800743c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800743e:	4b51      	ldr	r3, [pc, #324]	; (8007584 <HAL_ETH_MspInit+0x188>)
 8007440:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007444:	4a4f      	ldr	r2, [pc, #316]	; (8007584 <HAL_ETH_MspInit+0x188>)
 8007446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800744a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800744e:	4b4d      	ldr	r3, [pc, #308]	; (8007584 <HAL_ETH_MspInit+0x188>)
 8007450:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007458:	61fb      	str	r3, [r7, #28]
 800745a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800745c:	4b49      	ldr	r3, [pc, #292]	; (8007584 <HAL_ETH_MspInit+0x188>)
 800745e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007462:	4a48      	ldr	r2, [pc, #288]	; (8007584 <HAL_ETH_MspInit+0x188>)
 8007464:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007468:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800746c:	4b45      	ldr	r3, [pc, #276]	; (8007584 <HAL_ETH_MspInit+0x188>)
 800746e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007476:	61bb      	str	r3, [r7, #24]
 8007478:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800747a:	4b42      	ldr	r3, [pc, #264]	; (8007584 <HAL_ETH_MspInit+0x188>)
 800747c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007480:	4a40      	ldr	r2, [pc, #256]	; (8007584 <HAL_ETH_MspInit+0x188>)
 8007482:	f043 0304 	orr.w	r3, r3, #4
 8007486:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800748a:	4b3e      	ldr	r3, [pc, #248]	; (8007584 <HAL_ETH_MspInit+0x188>)
 800748c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007490:	f003 0304 	and.w	r3, r3, #4
 8007494:	617b      	str	r3, [r7, #20]
 8007496:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007498:	4b3a      	ldr	r3, [pc, #232]	; (8007584 <HAL_ETH_MspInit+0x188>)
 800749a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800749e:	4a39      	ldr	r2, [pc, #228]	; (8007584 <HAL_ETH_MspInit+0x188>)
 80074a0:	f043 0301 	orr.w	r3, r3, #1
 80074a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074a8:	4b36      	ldr	r3, [pc, #216]	; (8007584 <HAL_ETH_MspInit+0x188>)
 80074aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074ae:	f003 0301 	and.w	r3, r3, #1
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074b6:	4b33      	ldr	r3, [pc, #204]	; (8007584 <HAL_ETH_MspInit+0x188>)
 80074b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074bc:	4a31      	ldr	r2, [pc, #196]	; (8007584 <HAL_ETH_MspInit+0x188>)
 80074be:	f043 0302 	orr.w	r3, r3, #2
 80074c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074c6:	4b2f      	ldr	r3, [pc, #188]	; (8007584 <HAL_ETH_MspInit+0x188>)
 80074c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074cc:	f003 0302 	and.w	r3, r3, #2
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80074d4:	4b2b      	ldr	r3, [pc, #172]	; (8007584 <HAL_ETH_MspInit+0x188>)
 80074d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074da:	4a2a      	ldr	r2, [pc, #168]	; (8007584 <HAL_ETH_MspInit+0x188>)
 80074dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80074e4:	4b27      	ldr	r3, [pc, #156]	; (8007584 <HAL_ETH_MspInit+0x188>)
 80074e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ee:	60bb      	str	r3, [r7, #8]
 80074f0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80074f2:	2332      	movs	r3, #50	; 0x32
 80074f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f6:	2302      	movs	r3, #2
 80074f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074fe:	2300      	movs	r3, #0
 8007500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007502:	230b      	movs	r3, #11
 8007504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800750a:	4619      	mov	r1, r3
 800750c:	481e      	ldr	r0, [pc, #120]	; (8007588 <HAL_ETH_MspInit+0x18c>)
 800750e:	f003 fae5 	bl	800aadc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007512:	2386      	movs	r3, #134	; 0x86
 8007514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007516:	2302      	movs	r3, #2
 8007518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751a:	2300      	movs	r3, #0
 800751c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800751e:	2300      	movs	r3, #0
 8007520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007522:	230b      	movs	r3, #11
 8007524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800752a:	4619      	mov	r1, r3
 800752c:	4817      	ldr	r0, [pc, #92]	; (800758c <HAL_ETH_MspInit+0x190>)
 800752e:	f003 fad5 	bl	800aadc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007532:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007538:	2302      	movs	r3, #2
 800753a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800753c:	2300      	movs	r3, #0
 800753e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007540:	2300      	movs	r3, #0
 8007542:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007544:	230b      	movs	r3, #11
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800754c:	4619      	mov	r1, r3
 800754e:	4810      	ldr	r0, [pc, #64]	; (8007590 <HAL_ETH_MspInit+0x194>)
 8007550:	f003 fac4 	bl	800aadc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007554:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007558:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800755a:	2302      	movs	r3, #2
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800755e:	2300      	movs	r3, #0
 8007560:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007562:	2300      	movs	r3, #0
 8007564:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007566:	230b      	movs	r3, #11
 8007568:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800756a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800756e:	4619      	mov	r1, r3
 8007570:	4808      	ldr	r0, [pc, #32]	; (8007594 <HAL_ETH_MspInit+0x198>)
 8007572:	f003 fab3 	bl	800aadc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8007576:	bf00      	nop
 8007578:	3738      	adds	r7, #56	; 0x38
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	40028000 	.word	0x40028000
 8007584:	58024400 	.word	0x58024400
 8007588:	58020800 	.word	0x58020800
 800758c:	58020000 	.word	0x58020000
 8007590:	58020400 	.word	0x58020400
 8007594:	58021800 	.word	0x58021800

08007598 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	; 0x28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075a0:	f107 0314 	add.w	r3, r7, #20
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]
 80075a8:	605a      	str	r2, [r3, #4]
 80075aa:	609a      	str	r2, [r3, #8]
 80075ac:	60da      	str	r2, [r3, #12]
 80075ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a2a      	ldr	r2, [pc, #168]	; (8007660 <HAL_SPI_MspInit+0xc8>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d14d      	bne.n	8007656 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80075ba:	4b2a      	ldr	r3, [pc, #168]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 80075bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075c0:	4a28      	ldr	r2, [pc, #160]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 80075c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80075ca:	4b26      	ldr	r3, [pc, #152]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 80075cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80075d8:	4b22      	ldr	r3, [pc, #136]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 80075da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075de:	4a21      	ldr	r2, [pc, #132]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 80075e0:	f043 0302 	orr.w	r3, r3, #2
 80075e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80075e8:	4b1e      	ldr	r3, [pc, #120]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 80075ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075ee:	f003 0302 	and.w	r3, r3, #2
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075f6:	4b1b      	ldr	r3, [pc, #108]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 80075f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075fc:	4a19      	ldr	r2, [pc, #100]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 80075fe:	f043 0304 	orr.w	r3, r3, #4
 8007602:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007606:	4b17      	ldr	r3, [pc, #92]	; (8007664 <HAL_SPI_MspInit+0xcc>)
 8007608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007614:	2304      	movs	r3, #4
 8007616:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007618:	2302      	movs	r3, #2
 800761a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800761c:	2302      	movs	r3, #2
 800761e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007620:	2300      	movs	r3, #0
 8007622:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007624:	2307      	movs	r3, #7
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007628:	f107 0314 	add.w	r3, r7, #20
 800762c:	4619      	mov	r1, r3
 800762e:	480e      	ldr	r0, [pc, #56]	; (8007668 <HAL_SPI_MspInit+0xd0>)
 8007630:	f003 fa54 	bl	800aadc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800763a:	2302      	movs	r3, #2
 800763c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800763e:	2302      	movs	r3, #2
 8007640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007642:	2300      	movs	r3, #0
 8007644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007646:	2306      	movs	r3, #6
 8007648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800764a:	f107 0314 	add.w	r3, r7, #20
 800764e:	4619      	mov	r1, r3
 8007650:	4806      	ldr	r0, [pc, #24]	; (800766c <HAL_SPI_MspInit+0xd4>)
 8007652:	f003 fa43 	bl	800aadc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007656:	bf00      	nop
 8007658:	3728      	adds	r7, #40	; 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40003c00 	.word	0x40003c00
 8007664:	58024400 	.word	0x58024400
 8007668:	58020400 	.word	0x58020400
 800766c:	58020800 	.word	0x58020800

08007670 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a0e      	ldr	r2, [pc, #56]	; (80076b8 <HAL_TIM_Base_MspInit+0x48>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d116      	bne.n	80076b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007682:	4b0e      	ldr	r3, [pc, #56]	; (80076bc <HAL_TIM_Base_MspInit+0x4c>)
 8007684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007688:	4a0c      	ldr	r2, [pc, #48]	; (80076bc <HAL_TIM_Base_MspInit+0x4c>)
 800768a:	f043 0320 	orr.w	r3, r3, #32
 800768e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007692:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <HAL_TIM_Base_MspInit+0x4c>)
 8007694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007698:	f003 0320 	and.w	r3, r3, #32
 800769c:	60fb      	str	r3, [r7, #12]
 800769e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80076a0:	2200      	movs	r2, #0
 80076a2:	2100      	movs	r1, #0
 80076a4:	2037      	movs	r0, #55	; 0x37
 80076a6:	f000 fb9a 	bl	8007dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80076aa:	2037      	movs	r0, #55	; 0x37
 80076ac:	f000 fbb1 	bl	8007e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	40001400 	.word	0x40001400
 80076bc:	58024400 	.word	0x58024400

080076c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b0b8      	sub	sp, #224	; 0xe0
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80076cc:	2200      	movs	r2, #0
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	605a      	str	r2, [r3, #4]
 80076d2:	609a      	str	r2, [r3, #8]
 80076d4:	60da      	str	r2, [r3, #12]
 80076d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80076d8:	f107 0310 	add.w	r3, r7, #16
 80076dc:	22bc      	movs	r2, #188	; 0xbc
 80076de:	2100      	movs	r1, #0
 80076e0:	4618      	mov	r0, r3
 80076e2:	f009 f88d 	bl	8010800 <memset>
  if(huart->Instance==USART3)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	4a57      	ldr	r2, [pc, #348]	; (8007848 <HAL_UART_MspInit+0x188>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	f040 80a6 	bne.w	800783e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80076f2:	2302      	movs	r3, #2
 80076f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80076f6:	2300      	movs	r3, #0
 80076f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80076fc:	f107 0310 	add.w	r3, r7, #16
 8007700:	4618      	mov	r0, r3
 8007702:	f004 fd81 	bl	800c208 <HAL_RCCEx_PeriphCLKConfig>
 8007706:	4603      	mov	r3, r0
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800770c:	f7ff fa36 	bl	8006b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007710:	4b4e      	ldr	r3, [pc, #312]	; (800784c <HAL_UART_MspInit+0x18c>)
 8007712:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007716:	4a4d      	ldr	r2, [pc, #308]	; (800784c <HAL_UART_MspInit+0x18c>)
 8007718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800771c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007720:	4b4a      	ldr	r3, [pc, #296]	; (800784c <HAL_UART_MspInit+0x18c>)
 8007722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800772e:	4b47      	ldr	r3, [pc, #284]	; (800784c <HAL_UART_MspInit+0x18c>)
 8007730:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007734:	4a45      	ldr	r2, [pc, #276]	; (800784c <HAL_UART_MspInit+0x18c>)
 8007736:	f043 0308 	orr.w	r3, r3, #8
 800773a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800773e:	4b43      	ldr	r3, [pc, #268]	; (800784c <HAL_UART_MspInit+0x18c>)
 8007740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007744:	f003 0308 	and.w	r3, r3, #8
 8007748:	60bb      	str	r3, [r7, #8]
 800774a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800774c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007750:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007754:	2302      	movs	r3, #2
 8007756:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800775a:	2300      	movs	r3, #0
 800775c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007760:	2300      	movs	r3, #0
 8007762:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007766:	2307      	movs	r3, #7
 8007768:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800776c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007770:	4619      	mov	r1, r3
 8007772:	4837      	ldr	r0, [pc, #220]	; (8007850 <HAL_UART_MspInit+0x190>)
 8007774:	f003 f9b2 	bl	800aadc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007778:	4b36      	ldr	r3, [pc, #216]	; (8007854 <HAL_UART_MspInit+0x194>)
 800777a:	4a37      	ldr	r2, [pc, #220]	; (8007858 <HAL_UART_MspInit+0x198>)
 800777c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800777e:	4b35      	ldr	r3, [pc, #212]	; (8007854 <HAL_UART_MspInit+0x194>)
 8007780:	222d      	movs	r2, #45	; 0x2d
 8007782:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007784:	4b33      	ldr	r3, [pc, #204]	; (8007854 <HAL_UART_MspInit+0x194>)
 8007786:	2200      	movs	r2, #0
 8007788:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800778a:	4b32      	ldr	r3, [pc, #200]	; (8007854 <HAL_UART_MspInit+0x194>)
 800778c:	2200      	movs	r2, #0
 800778e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007790:	4b30      	ldr	r3, [pc, #192]	; (8007854 <HAL_UART_MspInit+0x194>)
 8007792:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007796:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007798:	4b2e      	ldr	r3, [pc, #184]	; (8007854 <HAL_UART_MspInit+0x194>)
 800779a:	2200      	movs	r2, #0
 800779c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800779e:	4b2d      	ldr	r3, [pc, #180]	; (8007854 <HAL_UART_MspInit+0x194>)
 80077a0:	2200      	movs	r2, #0
 80077a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80077a4:	4b2b      	ldr	r3, [pc, #172]	; (8007854 <HAL_UART_MspInit+0x194>)
 80077a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80077aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80077ac:	4b29      	ldr	r3, [pc, #164]	; (8007854 <HAL_UART_MspInit+0x194>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80077b2:	4b28      	ldr	r3, [pc, #160]	; (8007854 <HAL_UART_MspInit+0x194>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80077b8:	4826      	ldr	r0, [pc, #152]	; (8007854 <HAL_UART_MspInit+0x194>)
 80077ba:	f000 fb45 	bl	8007e48 <HAL_DMA_Init>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80077c4:	f7ff f9da 	bl	8006b7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a22      	ldr	r2, [pc, #136]	; (8007854 <HAL_UART_MspInit+0x194>)
 80077cc:	67da      	str	r2, [r3, #124]	; 0x7c
 80077ce:	4a21      	ldr	r2, [pc, #132]	; (8007854 <HAL_UART_MspInit+0x194>)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80077d4:	4b21      	ldr	r3, [pc, #132]	; (800785c <HAL_UART_MspInit+0x19c>)
 80077d6:	4a22      	ldr	r2, [pc, #136]	; (8007860 <HAL_UART_MspInit+0x1a0>)
 80077d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80077da:	4b20      	ldr	r3, [pc, #128]	; (800785c <HAL_UART_MspInit+0x19c>)
 80077dc:	222e      	movs	r2, #46	; 0x2e
 80077de:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80077e0:	4b1e      	ldr	r3, [pc, #120]	; (800785c <HAL_UART_MspInit+0x19c>)
 80077e2:	2240      	movs	r2, #64	; 0x40
 80077e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80077e6:	4b1d      	ldr	r3, [pc, #116]	; (800785c <HAL_UART_MspInit+0x19c>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80077ec:	4b1b      	ldr	r3, [pc, #108]	; (800785c <HAL_UART_MspInit+0x19c>)
 80077ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80077f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80077f4:	4b19      	ldr	r3, [pc, #100]	; (800785c <HAL_UART_MspInit+0x19c>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80077fa:	4b18      	ldr	r3, [pc, #96]	; (800785c <HAL_UART_MspInit+0x19c>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007800:	4b16      	ldr	r3, [pc, #88]	; (800785c <HAL_UART_MspInit+0x19c>)
 8007802:	2200      	movs	r2, #0
 8007804:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007806:	4b15      	ldr	r3, [pc, #84]	; (800785c <HAL_UART_MspInit+0x19c>)
 8007808:	2200      	movs	r2, #0
 800780a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800780c:	4b13      	ldr	r3, [pc, #76]	; (800785c <HAL_UART_MspInit+0x19c>)
 800780e:	2200      	movs	r2, #0
 8007810:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8007812:	4812      	ldr	r0, [pc, #72]	; (800785c <HAL_UART_MspInit+0x19c>)
 8007814:	f000 fb18 	bl	8007e48 <HAL_DMA_Init>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d001      	beq.n	8007822 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800781e:	f7ff f9ad 	bl	8006b7c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a0d      	ldr	r2, [pc, #52]	; (800785c <HAL_UART_MspInit+0x19c>)
 8007826:	679a      	str	r2, [r3, #120]	; 0x78
 8007828:	4a0c      	ldr	r2, [pc, #48]	; (800785c <HAL_UART_MspInit+0x19c>)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800782e:	2200      	movs	r2, #0
 8007830:	2100      	movs	r1, #0
 8007832:	2027      	movs	r0, #39	; 0x27
 8007834:	f000 fad3 	bl	8007dde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007838:	2027      	movs	r0, #39	; 0x27
 800783a:	f000 faea 	bl	8007e12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800783e:	bf00      	nop
 8007840:	37e0      	adds	r7, #224	; 0xe0
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	40004800 	.word	0x40004800
 800784c:	58024400 	.word	0x58024400
 8007850:	58020c00 	.word	0x58020c00
 8007854:	240003c4 	.word	0x240003c4
 8007858:	40020028 	.word	0x40020028
 800785c:	2400043c 	.word	0x2400043c
 8007860:	40020070 	.word	0x40020070

08007864 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08a      	sub	sp, #40	; 0x28
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800786c:	f107 0314 	add.w	r3, r7, #20
 8007870:	2200      	movs	r2, #0
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	605a      	str	r2, [r3, #4]
 8007876:	609a      	str	r2, [r3, #8]
 8007878:	60da      	str	r2, [r3, #12]
 800787a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a22      	ldr	r2, [pc, #136]	; (800790c <HAL_PCD_MspInit+0xa8>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d13d      	bne.n	8007902 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8007886:	f003 fcf5 	bl	800b274 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800788a:	4b21      	ldr	r3, [pc, #132]	; (8007910 <HAL_PCD_MspInit+0xac>)
 800788c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007890:	4a1f      	ldr	r2, [pc, #124]	; (8007910 <HAL_PCD_MspInit+0xac>)
 8007892:	f043 0301 	orr.w	r3, r3, #1
 8007896:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800789a:	4b1d      	ldr	r3, [pc, #116]	; (8007910 <HAL_PCD_MspInit+0xac>)
 800789c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078a0:	f003 0301 	and.w	r3, r3, #1
 80078a4:	613b      	str	r3, [r7, #16]
 80078a6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80078a8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80078ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ae:	2302      	movs	r3, #2
 80078b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078b6:	2300      	movs	r3, #0
 80078b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80078ba:	230a      	movs	r3, #10
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078be:	f107 0314 	add.w	r3, r7, #20
 80078c2:	4619      	mov	r1, r3
 80078c4:	4813      	ldr	r0, [pc, #76]	; (8007914 <HAL_PCD_MspInit+0xb0>)
 80078c6:	f003 f909 	bl	800aadc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80078ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80078ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078d0:	2300      	movs	r3, #0
 80078d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078d4:	2300      	movs	r3, #0
 80078d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078d8:	f107 0314 	add.w	r3, r7, #20
 80078dc:	4619      	mov	r1, r3
 80078de:	480d      	ldr	r0, [pc, #52]	; (8007914 <HAL_PCD_MspInit+0xb0>)
 80078e0:	f003 f8fc 	bl	800aadc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078e4:	4b0a      	ldr	r3, [pc, #40]	; (8007910 <HAL_PCD_MspInit+0xac>)
 80078e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80078ea:	4a09      	ldr	r2, [pc, #36]	; (8007910 <HAL_PCD_MspInit+0xac>)
 80078ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80078f4:	4b06      	ldr	r3, [pc, #24]	; (8007910 <HAL_PCD_MspInit+0xac>)
 80078f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80078fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80078fe:	60fb      	str	r3, [r7, #12]
 8007900:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007902:	bf00      	nop
 8007904:	3728      	adds	r7, #40	; 0x28
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	40080000 	.word	0x40080000
 8007910:	58024400 	.word	0x58024400
 8007914:	58020000 	.word	0x58020000

08007918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007918:	b480      	push	{r7}
 800791a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800791c:	e7fe      	b.n	800791c <NMI_Handler+0x4>

0800791e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800791e:	b480      	push	{r7}
 8007920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007922:	e7fe      	b.n	8007922 <HardFault_Handler+0x4>

08007924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007928:	e7fe      	b.n	8007928 <MemManage_Handler+0x4>

0800792a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800792a:	b480      	push	{r7}
 800792c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800792e:	e7fe      	b.n	800792e <BusFault_Handler+0x4>

08007930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007934:	e7fe      	b.n	8007934 <UsageFault_Handler+0x4>

08007936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007936:	b480      	push	{r7}
 8007938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800793a:	bf00      	nop
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007948:	bf00      	nop
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr

08007952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007952:	b480      	push	{r7}
 8007954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007956:	bf00      	nop
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007964:	f000 f8fc 	bl	8007b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007968:	bf00      	nop
 800796a:	bd80      	pop	{r7, pc}

0800796c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007970:	4802      	ldr	r0, [pc, #8]	; (800797c <DMA1_Stream1_IRQHandler+0x10>)
 8007972:	f001 fb29 	bl	8008fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007976:	bf00      	nop
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	240003c4 	.word	0x240003c4

08007980 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007984:	4802      	ldr	r0, [pc, #8]	; (8007990 <DMA1_Stream4_IRQHandler+0x10>)
 8007986:	f001 fb1f 	bl	8008fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800798a:	bf00      	nop
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	2400043c 	.word	0x2400043c

08007994 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007998:	4802      	ldr	r0, [pc, #8]	; (80079a4 <USART3_IRQHandler+0x10>)
 800799a:	f006 ff59 	bl	800e850 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800799e:	bf00      	nop
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	24000334 	.word	0x24000334

080079a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80079ac:	4802      	ldr	r0, [pc, #8]	; (80079b8 <TIM7_IRQHandler+0x10>)
 80079ae:	f006 fc72 	bl	800e296 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80079b2:	bf00      	nop
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	240002e8 	.word	0x240002e8

080079bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80079c4:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <_sbrk+0x5c>)
 80079c6:	4b15      	ldr	r3, [pc, #84]	; (8007a1c <_sbrk+0x60>)
 80079c8:	1ad3      	subs	r3, r2, r3
 80079ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80079d0:	4b13      	ldr	r3, [pc, #76]	; (8007a20 <_sbrk+0x64>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d102      	bne.n	80079de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <_sbrk+0x64>)
 80079da:	4a12      	ldr	r2, [pc, #72]	; (8007a24 <_sbrk+0x68>)
 80079dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80079de:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <_sbrk+0x64>)
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	4413      	add	r3, r2
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d207      	bcs.n	80079fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80079ec:	f008 fede 	bl	80107ac <__errno>
 80079f0:	4603      	mov	r3, r0
 80079f2:	220c      	movs	r2, #12
 80079f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80079f6:	f04f 33ff 	mov.w	r3, #4294967295
 80079fa:	e009      	b.n	8007a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80079fc:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <_sbrk+0x64>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007a02:	4b07      	ldr	r3, [pc, #28]	; (8007a20 <_sbrk+0x64>)
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	4413      	add	r3, r2
 8007a0a:	4a05      	ldr	r2, [pc, #20]	; (8007a20 <_sbrk+0x64>)
 8007a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3718      	adds	r7, #24
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	24080000 	.word	0x24080000
 8007a1c:	00000400 	.word	0x00000400
 8007a20:	24000eb0 	.word	0x24000eb0
 8007a24:	24000ec8 	.word	0x24000ec8

08007a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007a28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007a60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007a2c:	f7fe fc0e 	bl	800624c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007a30:	480c      	ldr	r0, [pc, #48]	; (8007a64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007a32:	490d      	ldr	r1, [pc, #52]	; (8007a68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007a34:	4a0d      	ldr	r2, [pc, #52]	; (8007a6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007a38:	e002      	b.n	8007a40 <LoopCopyDataInit>

08007a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a3e:	3304      	adds	r3, #4

08007a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007a44:	d3f9      	bcc.n	8007a3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007a46:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007a48:	4c0a      	ldr	r4, [pc, #40]	; (8007a74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007a4c:	e001      	b.n	8007a52 <LoopFillZerobss>

08007a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007a50:	3204      	adds	r2, #4

08007a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007a54:	d3fb      	bcc.n	8007a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007a56:	f008 feaf 	bl	80107b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007a5a:	f7fe fc8d 	bl	8006378 <main>
  bx  lr
 8007a5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007a60:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007a64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007a68:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8007a6c:	08012b50 	.word	0x08012b50
  ldr r2, =_sbss
 8007a70:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8007a74:	24000ec8 	.word	0x24000ec8

08007a78 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007a78:	e7fe      	b.n	8007a78 <ADC3_IRQHandler>
	...

08007a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a82:	2003      	movs	r0, #3
 8007a84:	f000 f9a0 	bl	8007dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a88:	f004 f9e8 	bl	800be5c <HAL_RCC_GetSysClockFreq>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	4b15      	ldr	r3, [pc, #84]	; (8007ae4 <HAL_Init+0x68>)
 8007a90:	699b      	ldr	r3, [r3, #24]
 8007a92:	0a1b      	lsrs	r3, r3, #8
 8007a94:	f003 030f 	and.w	r3, r3, #15
 8007a98:	4913      	ldr	r1, [pc, #76]	; (8007ae8 <HAL_Init+0x6c>)
 8007a9a:	5ccb      	ldrb	r3, [r1, r3]
 8007a9c:	f003 031f 	and.w	r3, r3, #31
 8007aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8007aa4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007aa6:	4b0f      	ldr	r3, [pc, #60]	; (8007ae4 <HAL_Init+0x68>)
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	f003 030f 	and.w	r3, r3, #15
 8007aae:	4a0e      	ldr	r2, [pc, #56]	; (8007ae8 <HAL_Init+0x6c>)
 8007ab0:	5cd3      	ldrb	r3, [r2, r3]
 8007ab2:	f003 031f 	and.w	r3, r3, #31
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8007abc:	4a0b      	ldr	r2, [pc, #44]	; (8007aec <HAL_Init+0x70>)
 8007abe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007ac0:	4a0b      	ldr	r2, [pc, #44]	; (8007af0 <HAL_Init+0x74>)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007ac6:	2000      	movs	r0, #0
 8007ac8:	f000 f814 	bl	8007af4 <HAL_InitTick>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e002      	b.n	8007adc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007ad6:	f7ff fc77 	bl	80073c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3708      	adds	r7, #8
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}
 8007ae4:	58024400 	.word	0x58024400
 8007ae8:	0801158c 	.word	0x0801158c
 8007aec:	24000008 	.word	0x24000008
 8007af0:	24000004 	.word	0x24000004

08007af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007afc:	4b15      	ldr	r3, [pc, #84]	; (8007b54 <HAL_InitTick+0x60>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d101      	bne.n	8007b08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e021      	b.n	8007b4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007b08:	4b13      	ldr	r3, [pc, #76]	; (8007b58 <HAL_InitTick+0x64>)
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	4b11      	ldr	r3, [pc, #68]	; (8007b54 <HAL_InitTick+0x60>)
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	4619      	mov	r1, r3
 8007b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8007b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f000 f985 	bl	8007e2e <HAL_SYSTICK_Config>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e00e      	b.n	8007b4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2b0f      	cmp	r3, #15
 8007b32:	d80a      	bhi.n	8007b4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007b34:	2200      	movs	r2, #0
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3c:	f000 f94f 	bl	8007dde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007b40:	4a06      	ldr	r2, [pc, #24]	; (8007b5c <HAL_InitTick+0x68>)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e000      	b.n	8007b4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007b4a:	2301      	movs	r3, #1
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3708      	adds	r7, #8
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	24000020 	.word	0x24000020
 8007b58:	24000004 	.word	0x24000004
 8007b5c:	2400001c 	.word	0x2400001c

08007b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007b64:	4b06      	ldr	r3, [pc, #24]	; (8007b80 <HAL_IncTick+0x20>)
 8007b66:	781b      	ldrb	r3, [r3, #0]
 8007b68:	461a      	mov	r2, r3
 8007b6a:	4b06      	ldr	r3, [pc, #24]	; (8007b84 <HAL_IncTick+0x24>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4413      	add	r3, r2
 8007b70:	4a04      	ldr	r2, [pc, #16]	; (8007b84 <HAL_IncTick+0x24>)
 8007b72:	6013      	str	r3, [r2, #0]
}
 8007b74:	bf00      	nop
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	24000020 	.word	0x24000020
 8007b84:	24000eb4 	.word	0x24000eb4

08007b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8007b8c:	4b03      	ldr	r3, [pc, #12]	; (8007b9c <HAL_GetTick+0x14>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
 8007b9a:	bf00      	nop
 8007b9c:	24000eb4 	.word	0x24000eb4

08007ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007ba8:	f7ff ffee 	bl	8007b88 <HAL_GetTick>
 8007bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb8:	d005      	beq.n	8007bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007bba:	4b0a      	ldr	r3, [pc, #40]	; (8007be4 <HAL_Delay+0x44>)
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	4413      	add	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007bc6:	bf00      	nop
 8007bc8:	f7ff ffde 	bl	8007b88 <HAL_GetTick>
 8007bcc:	4602      	mov	r2, r0
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	1ad3      	subs	r3, r2, r3
 8007bd2:	68fa      	ldr	r2, [r7, #12]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d8f7      	bhi.n	8007bc8 <HAL_Delay+0x28>
  {
  }
}
 8007bd8:	bf00      	nop
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	24000020 	.word	0x24000020

08007be8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007bec:	4b03      	ldr	r3, [pc, #12]	; (8007bfc <HAL_GetREVID+0x14>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	0c1b      	lsrs	r3, r3, #16
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfa:	4770      	bx	lr
 8007bfc:	5c001000 	.word	0x5c001000

08007c00 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007c08:	4b06      	ldr	r3, [pc, #24]	; (8007c24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007c10:	4904      	ldr	r1, [pc, #16]	; (8007c24 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	604b      	str	r3, [r1, #4]
}
 8007c18:	bf00      	nop
 8007c1a:	370c      	adds	r7, #12
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr
 8007c24:	58000400 	.word	0x58000400

08007c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f003 0307 	and.w	r3, r3, #7
 8007c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007c38:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <__NVIC_SetPriorityGrouping+0x40>)
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007c44:	4013      	ands	r3, r2
 8007c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007c50:	4b06      	ldr	r3, [pc, #24]	; (8007c6c <__NVIC_SetPriorityGrouping+0x44>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007c56:	4a04      	ldr	r2, [pc, #16]	; (8007c68 <__NVIC_SetPriorityGrouping+0x40>)
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	60d3      	str	r3, [r2, #12]
}
 8007c5c:	bf00      	nop
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	e000ed00 	.word	0xe000ed00
 8007c6c:	05fa0000 	.word	0x05fa0000

08007c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007c74:	4b04      	ldr	r3, [pc, #16]	; (8007c88 <__NVIC_GetPriorityGrouping+0x18>)
 8007c76:	68db      	ldr	r3, [r3, #12]
 8007c78:	0a1b      	lsrs	r3, r3, #8
 8007c7a:	f003 0307 	and.w	r3, r3, #7
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	e000ed00 	.word	0xe000ed00

08007c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007c96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	db0b      	blt.n	8007cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c9e:	88fb      	ldrh	r3, [r7, #6]
 8007ca0:	f003 021f 	and.w	r2, r3, #31
 8007ca4:	4907      	ldr	r1, [pc, #28]	; (8007cc4 <__NVIC_EnableIRQ+0x38>)
 8007ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007caa:	095b      	lsrs	r3, r3, #5
 8007cac:	2001      	movs	r0, #1
 8007cae:	fa00 f202 	lsl.w	r2, r0, r2
 8007cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	e000e100 	.word	0xe000e100

08007cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007cd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	db0a      	blt.n	8007cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	b2da      	uxtb	r2, r3
 8007ce0:	490c      	ldr	r1, [pc, #48]	; (8007d14 <__NVIC_SetPriority+0x4c>)
 8007ce2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007ce6:	0112      	lsls	r2, r2, #4
 8007ce8:	b2d2      	uxtb	r2, r2
 8007cea:	440b      	add	r3, r1
 8007cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cf0:	e00a      	b.n	8007d08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	b2da      	uxtb	r2, r3
 8007cf6:	4908      	ldr	r1, [pc, #32]	; (8007d18 <__NVIC_SetPriority+0x50>)
 8007cf8:	88fb      	ldrh	r3, [r7, #6]
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	3b04      	subs	r3, #4
 8007d00:	0112      	lsls	r2, r2, #4
 8007d02:	b2d2      	uxtb	r2, r2
 8007d04:	440b      	add	r3, r1
 8007d06:	761a      	strb	r2, [r3, #24]
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr
 8007d14:	e000e100 	.word	0xe000e100
 8007d18:	e000ed00 	.word	0xe000ed00

08007d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b089      	sub	sp, #36	; 0x24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d30:	69fb      	ldr	r3, [r7, #28]
 8007d32:	f1c3 0307 	rsb	r3, r3, #7
 8007d36:	2b04      	cmp	r3, #4
 8007d38:	bf28      	it	cs
 8007d3a:	2304      	movcs	r3, #4
 8007d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	3304      	adds	r3, #4
 8007d42:	2b06      	cmp	r3, #6
 8007d44:	d902      	bls.n	8007d4c <NVIC_EncodePriority+0x30>
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	3b03      	subs	r3, #3
 8007d4a:	e000      	b.n	8007d4e <NVIC_EncodePriority+0x32>
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d50:	f04f 32ff 	mov.w	r2, #4294967295
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	43da      	mvns	r2, r3
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	401a      	ands	r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d64:	f04f 31ff 	mov.w	r1, #4294967295
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d6e:	43d9      	mvns	r1, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d74:	4313      	orrs	r3, r2
         );
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3724      	adds	r7, #36	; 0x24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
	...

08007d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d94:	d301      	bcc.n	8007d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007d96:	2301      	movs	r3, #1
 8007d98:	e00f      	b.n	8007dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007d9a:	4a0a      	ldr	r2, [pc, #40]	; (8007dc4 <SysTick_Config+0x40>)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007da2:	210f      	movs	r1, #15
 8007da4:	f04f 30ff 	mov.w	r0, #4294967295
 8007da8:	f7ff ff8e 	bl	8007cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007dac:	4b05      	ldr	r3, [pc, #20]	; (8007dc4 <SysTick_Config+0x40>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007db2:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <SysTick_Config+0x40>)
 8007db4:	2207      	movs	r2, #7
 8007db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007db8:	2300      	movs	r3, #0
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3708      	adds	r7, #8
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	e000e010 	.word	0xe000e010

08007dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff ff29 	bl	8007c28 <__NVIC_SetPriorityGrouping>
}
 8007dd6:	bf00      	nop
 8007dd8:	3708      	adds	r7, #8
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007dde:	b580      	push	{r7, lr}
 8007de0:	b086      	sub	sp, #24
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	4603      	mov	r3, r0
 8007de6:	60b9      	str	r1, [r7, #8]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007dec:	f7ff ff40 	bl	8007c70 <__NVIC_GetPriorityGrouping>
 8007df0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007df2:	687a      	ldr	r2, [r7, #4]
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	6978      	ldr	r0, [r7, #20]
 8007df8:	f7ff ff90 	bl	8007d1c <NVIC_EncodePriority>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007e02:	4611      	mov	r1, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7ff ff5f 	bl	8007cc8 <__NVIC_SetPriority>
}
 8007e0a:	bf00      	nop
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b082      	sub	sp, #8
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	4603      	mov	r3, r0
 8007e1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007e1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7ff ff33 	bl	8007c8c <__NVIC_EnableIRQ>
}
 8007e26:	bf00      	nop
 8007e28:	3708      	adds	r7, #8
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}

08007e2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007e2e:	b580      	push	{r7, lr}
 8007e30:	b082      	sub	sp, #8
 8007e32:	af00      	add	r7, sp, #0
 8007e34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7ff ffa4 	bl	8007d84 <SysTick_Config>
 8007e3c:	4603      	mov	r3, r0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
	...

08007e48 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007e50:	f7ff fe9a 	bl	8007b88 <HAL_GetTick>
 8007e54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d101      	bne.n	8007e60 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e316      	b.n	800848e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a66      	ldr	r2, [pc, #408]	; (8008000 <HAL_DMA_Init+0x1b8>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d04a      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a65      	ldr	r2, [pc, #404]	; (8008004 <HAL_DMA_Init+0x1bc>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d045      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a63      	ldr	r2, [pc, #396]	; (8008008 <HAL_DMA_Init+0x1c0>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d040      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a62      	ldr	r2, [pc, #392]	; (800800c <HAL_DMA_Init+0x1c4>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d03b      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a60      	ldr	r2, [pc, #384]	; (8008010 <HAL_DMA_Init+0x1c8>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d036      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a5f      	ldr	r2, [pc, #380]	; (8008014 <HAL_DMA_Init+0x1cc>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d031      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a5d      	ldr	r2, [pc, #372]	; (8008018 <HAL_DMA_Init+0x1d0>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d02c      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a5c      	ldr	r2, [pc, #368]	; (800801c <HAL_DMA_Init+0x1d4>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d027      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a5a      	ldr	r2, [pc, #360]	; (8008020 <HAL_DMA_Init+0x1d8>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d022      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a59      	ldr	r2, [pc, #356]	; (8008024 <HAL_DMA_Init+0x1dc>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d01d      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a57      	ldr	r2, [pc, #348]	; (8008028 <HAL_DMA_Init+0x1e0>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d018      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a56      	ldr	r2, [pc, #344]	; (800802c <HAL_DMA_Init+0x1e4>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d013      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a54      	ldr	r2, [pc, #336]	; (8008030 <HAL_DMA_Init+0x1e8>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d00e      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a53      	ldr	r2, [pc, #332]	; (8008034 <HAL_DMA_Init+0x1ec>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d009      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a51      	ldr	r2, [pc, #324]	; (8008038 <HAL_DMA_Init+0x1f0>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d004      	beq.n	8007f00 <HAL_DMA_Init+0xb8>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a50      	ldr	r2, [pc, #320]	; (800803c <HAL_DMA_Init+0x1f4>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d101      	bne.n	8007f04 <HAL_DMA_Init+0xbc>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e000      	b.n	8007f06 <HAL_DMA_Init+0xbe>
 8007f04:	2300      	movs	r3, #0
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 813b 	beq.w	8008182 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2202      	movs	r2, #2
 8007f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a37      	ldr	r2, [pc, #220]	; (8008000 <HAL_DMA_Init+0x1b8>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d04a      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a36      	ldr	r2, [pc, #216]	; (8008004 <HAL_DMA_Init+0x1bc>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d045      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a34      	ldr	r2, [pc, #208]	; (8008008 <HAL_DMA_Init+0x1c0>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d040      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a33      	ldr	r2, [pc, #204]	; (800800c <HAL_DMA_Init+0x1c4>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d03b      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a31      	ldr	r2, [pc, #196]	; (8008010 <HAL_DMA_Init+0x1c8>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d036      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a30      	ldr	r2, [pc, #192]	; (8008014 <HAL_DMA_Init+0x1cc>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d031      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a2e      	ldr	r2, [pc, #184]	; (8008018 <HAL_DMA_Init+0x1d0>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d02c      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a2d      	ldr	r2, [pc, #180]	; (800801c <HAL_DMA_Init+0x1d4>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d027      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a2b      	ldr	r2, [pc, #172]	; (8008020 <HAL_DMA_Init+0x1d8>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d022      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a2a      	ldr	r2, [pc, #168]	; (8008024 <HAL_DMA_Init+0x1dc>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d01d      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	4a28      	ldr	r2, [pc, #160]	; (8008028 <HAL_DMA_Init+0x1e0>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d018      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a27      	ldr	r2, [pc, #156]	; (800802c <HAL_DMA_Init+0x1e4>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d013      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a25      	ldr	r2, [pc, #148]	; (8008030 <HAL_DMA_Init+0x1e8>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d00e      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a24      	ldr	r2, [pc, #144]	; (8008034 <HAL_DMA_Init+0x1ec>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d009      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a22      	ldr	r2, [pc, #136]	; (8008038 <HAL_DMA_Init+0x1f0>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d004      	beq.n	8007fbc <HAL_DMA_Init+0x174>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a21      	ldr	r2, [pc, #132]	; (800803c <HAL_DMA_Init+0x1f4>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d108      	bne.n	8007fce <HAL_DMA_Init+0x186>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0201 	bic.w	r2, r2, #1
 8007fca:	601a      	str	r2, [r3, #0]
 8007fcc:	e007      	b.n	8007fde <HAL_DMA_Init+0x196>
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0201 	bic.w	r2, r2, #1
 8007fdc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007fde:	e02f      	b.n	8008040 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007fe0:	f7ff fdd2 	bl	8007b88 <HAL_GetTick>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	2b05      	cmp	r3, #5
 8007fec:	d928      	bls.n	8008040 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2220      	movs	r2, #32
 8007ff2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2203      	movs	r2, #3
 8007ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e246      	b.n	800848e <HAL_DMA_Init+0x646>
 8008000:	40020010 	.word	0x40020010
 8008004:	40020028 	.word	0x40020028
 8008008:	40020040 	.word	0x40020040
 800800c:	40020058 	.word	0x40020058
 8008010:	40020070 	.word	0x40020070
 8008014:	40020088 	.word	0x40020088
 8008018:	400200a0 	.word	0x400200a0
 800801c:	400200b8 	.word	0x400200b8
 8008020:	40020410 	.word	0x40020410
 8008024:	40020428 	.word	0x40020428
 8008028:	40020440 	.word	0x40020440
 800802c:	40020458 	.word	0x40020458
 8008030:	40020470 	.word	0x40020470
 8008034:	40020488 	.word	0x40020488
 8008038:	400204a0 	.word	0x400204a0
 800803c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1c8      	bne.n	8007fe0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	4b83      	ldr	r3, [pc, #524]	; (8008268 <HAL_DMA_Init+0x420>)
 800805a:	4013      	ands	r3, r2
 800805c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008066:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008072:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800807e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008086:	697a      	ldr	r2, [r7, #20]
 8008088:	4313      	orrs	r3, r2
 800808a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008090:	2b04      	cmp	r3, #4
 8008092:	d107      	bne.n	80080a4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809c:	4313      	orrs	r3, r2
 800809e:	697a      	ldr	r2, [r7, #20]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80080a4:	4b71      	ldr	r3, [pc, #452]	; (800826c <HAL_DMA_Init+0x424>)
 80080a6:	681a      	ldr	r2, [r3, #0]
 80080a8:	4b71      	ldr	r3, [pc, #452]	; (8008270 <HAL_DMA_Init+0x428>)
 80080aa:	4013      	ands	r3, r2
 80080ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80080b0:	d328      	bcc.n	8008104 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	2b28      	cmp	r3, #40	; 0x28
 80080b8:	d903      	bls.n	80080c2 <HAL_DMA_Init+0x27a>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	2b2e      	cmp	r3, #46	; 0x2e
 80080c0:	d917      	bls.n	80080f2 <HAL_DMA_Init+0x2aa>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	2b3e      	cmp	r3, #62	; 0x3e
 80080c8:	d903      	bls.n	80080d2 <HAL_DMA_Init+0x28a>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2b42      	cmp	r3, #66	; 0x42
 80080d0:	d90f      	bls.n	80080f2 <HAL_DMA_Init+0x2aa>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	2b46      	cmp	r3, #70	; 0x46
 80080d8:	d903      	bls.n	80080e2 <HAL_DMA_Init+0x29a>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	2b48      	cmp	r3, #72	; 0x48
 80080e0:	d907      	bls.n	80080f2 <HAL_DMA_Init+0x2aa>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b4e      	cmp	r3, #78	; 0x4e
 80080e8:	d905      	bls.n	80080f6 <HAL_DMA_Init+0x2ae>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	2b52      	cmp	r3, #82	; 0x52
 80080f0:	d801      	bhi.n	80080f6 <HAL_DMA_Init+0x2ae>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e000      	b.n	80080f8 <HAL_DMA_Init+0x2b0>
 80080f6:	2300      	movs	r3, #0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008102:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f023 0307 	bic.w	r3, r3, #7
 800811a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	2b04      	cmp	r3, #4
 800812c:	d117      	bne.n	800815e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	697a      	ldr	r2, [r7, #20]
 8008134:	4313      	orrs	r3, r2
 8008136:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813c:	2b00      	cmp	r3, #0
 800813e:	d00e      	beq.n	800815e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f001 ff1d 	bl	8009f80 <DMA_CheckFifoParam>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d008      	beq.n	800815e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2240      	movs	r2, #64	; 0x40
 8008150:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800815a:	2301      	movs	r3, #1
 800815c:	e197      	b.n	800848e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	697a      	ldr	r2, [r7, #20]
 8008164:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 fe58 	bl	8009e1c <DMA_CalcBaseAndBitshift>
 800816c:	4603      	mov	r3, r0
 800816e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008174:	f003 031f 	and.w	r3, r3, #31
 8008178:	223f      	movs	r2, #63	; 0x3f
 800817a:	409a      	lsls	r2, r3
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	609a      	str	r2, [r3, #8]
 8008180:	e0cd      	b.n	800831e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a3b      	ldr	r2, [pc, #236]	; (8008274 <HAL_DMA_Init+0x42c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d022      	beq.n	80081d2 <HAL_DMA_Init+0x38a>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a39      	ldr	r2, [pc, #228]	; (8008278 <HAL_DMA_Init+0x430>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d01d      	beq.n	80081d2 <HAL_DMA_Init+0x38a>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a38      	ldr	r2, [pc, #224]	; (800827c <HAL_DMA_Init+0x434>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d018      	beq.n	80081d2 <HAL_DMA_Init+0x38a>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a36      	ldr	r2, [pc, #216]	; (8008280 <HAL_DMA_Init+0x438>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d013      	beq.n	80081d2 <HAL_DMA_Init+0x38a>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a35      	ldr	r2, [pc, #212]	; (8008284 <HAL_DMA_Init+0x43c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d00e      	beq.n	80081d2 <HAL_DMA_Init+0x38a>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a33      	ldr	r2, [pc, #204]	; (8008288 <HAL_DMA_Init+0x440>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d009      	beq.n	80081d2 <HAL_DMA_Init+0x38a>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a32      	ldr	r2, [pc, #200]	; (800828c <HAL_DMA_Init+0x444>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d004      	beq.n	80081d2 <HAL_DMA_Init+0x38a>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a30      	ldr	r2, [pc, #192]	; (8008290 <HAL_DMA_Init+0x448>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d101      	bne.n	80081d6 <HAL_DMA_Init+0x38e>
 80081d2:	2301      	movs	r3, #1
 80081d4:	e000      	b.n	80081d8 <HAL_DMA_Init+0x390>
 80081d6:	2300      	movs	r3, #0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	f000 8097 	beq.w	800830c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a24      	ldr	r2, [pc, #144]	; (8008274 <HAL_DMA_Init+0x42c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d021      	beq.n	800822c <HAL_DMA_Init+0x3e4>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a22      	ldr	r2, [pc, #136]	; (8008278 <HAL_DMA_Init+0x430>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d01c      	beq.n	800822c <HAL_DMA_Init+0x3e4>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a21      	ldr	r2, [pc, #132]	; (800827c <HAL_DMA_Init+0x434>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d017      	beq.n	800822c <HAL_DMA_Init+0x3e4>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a1f      	ldr	r2, [pc, #124]	; (8008280 <HAL_DMA_Init+0x438>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d012      	beq.n	800822c <HAL_DMA_Init+0x3e4>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a1e      	ldr	r2, [pc, #120]	; (8008284 <HAL_DMA_Init+0x43c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00d      	beq.n	800822c <HAL_DMA_Init+0x3e4>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a1c      	ldr	r2, [pc, #112]	; (8008288 <HAL_DMA_Init+0x440>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d008      	beq.n	800822c <HAL_DMA_Init+0x3e4>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a1b      	ldr	r2, [pc, #108]	; (800828c <HAL_DMA_Init+0x444>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d003      	beq.n	800822c <HAL_DMA_Init+0x3e4>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a19      	ldr	r2, [pc, #100]	; (8008290 <HAL_DMA_Init+0x448>)
 800822a:	4293      	cmp	r3, r2
 800822c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2202      	movs	r2, #2
 8008232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4b12      	ldr	r3, [pc, #72]	; (8008294 <HAL_DMA_Init+0x44c>)
 800824a:	4013      	ands	r3, r2
 800824c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	2b40      	cmp	r3, #64	; 0x40
 8008254:	d020      	beq.n	8008298 <HAL_DMA_Init+0x450>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b80      	cmp	r3, #128	; 0x80
 800825c:	d102      	bne.n	8008264 <HAL_DMA_Init+0x41c>
 800825e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008262:	e01a      	b.n	800829a <HAL_DMA_Init+0x452>
 8008264:	2300      	movs	r3, #0
 8008266:	e018      	b.n	800829a <HAL_DMA_Init+0x452>
 8008268:	fe10803f 	.word	0xfe10803f
 800826c:	5c001000 	.word	0x5c001000
 8008270:	ffff0000 	.word	0xffff0000
 8008274:	58025408 	.word	0x58025408
 8008278:	5802541c 	.word	0x5802541c
 800827c:	58025430 	.word	0x58025430
 8008280:	58025444 	.word	0x58025444
 8008284:	58025458 	.word	0x58025458
 8008288:	5802546c 	.word	0x5802546c
 800828c:	58025480 	.word	0x58025480
 8008290:	58025494 	.word	0x58025494
 8008294:	fffe000f 	.word	0xfffe000f
 8008298:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	68d2      	ldr	r2, [r2, #12]
 800829e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80082a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	691b      	ldr	r3, [r3, #16]
 80082a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80082a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80082b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80082b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80082c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a1b      	ldr	r3, [r3, #32]
 80082c6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80082c8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	461a      	mov	r2, r3
 80082de:	4b6e      	ldr	r3, [pc, #440]	; (8008498 <HAL_DMA_Init+0x650>)
 80082e0:	4413      	add	r3, r2
 80082e2:	4a6e      	ldr	r2, [pc, #440]	; (800849c <HAL_DMA_Init+0x654>)
 80082e4:	fba2 2303 	umull	r2, r3, r2, r3
 80082e8:	091b      	lsrs	r3, r3, #4
 80082ea:	009a      	lsls	r2, r3, #2
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 fd93 	bl	8009e1c <DMA_CalcBaseAndBitshift>
 80082f6:	4603      	mov	r3, r0
 80082f8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	2201      	movs	r2, #1
 8008304:	409a      	lsls	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	605a      	str	r2, [r3, #4]
 800830a:	e008      	b.n	800831e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2240      	movs	r2, #64	; 0x40
 8008310:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	2203      	movs	r2, #3
 8008316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	e0b7      	b.n	800848e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a5f      	ldr	r2, [pc, #380]	; (80084a0 <HAL_DMA_Init+0x658>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d072      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a5d      	ldr	r2, [pc, #372]	; (80084a4 <HAL_DMA_Init+0x65c>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d06d      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a5c      	ldr	r2, [pc, #368]	; (80084a8 <HAL_DMA_Init+0x660>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d068      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a5a      	ldr	r2, [pc, #360]	; (80084ac <HAL_DMA_Init+0x664>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d063      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a59      	ldr	r2, [pc, #356]	; (80084b0 <HAL_DMA_Init+0x668>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d05e      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a57      	ldr	r2, [pc, #348]	; (80084b4 <HAL_DMA_Init+0x66c>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d059      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a56      	ldr	r2, [pc, #344]	; (80084b8 <HAL_DMA_Init+0x670>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d054      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a54      	ldr	r2, [pc, #336]	; (80084bc <HAL_DMA_Init+0x674>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d04f      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a53      	ldr	r2, [pc, #332]	; (80084c0 <HAL_DMA_Init+0x678>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d04a      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a51      	ldr	r2, [pc, #324]	; (80084c4 <HAL_DMA_Init+0x67c>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d045      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a50      	ldr	r2, [pc, #320]	; (80084c8 <HAL_DMA_Init+0x680>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d040      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a4e      	ldr	r2, [pc, #312]	; (80084cc <HAL_DMA_Init+0x684>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d03b      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a4d      	ldr	r2, [pc, #308]	; (80084d0 <HAL_DMA_Init+0x688>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d036      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a4b      	ldr	r2, [pc, #300]	; (80084d4 <HAL_DMA_Init+0x68c>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d031      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a4a      	ldr	r2, [pc, #296]	; (80084d8 <HAL_DMA_Init+0x690>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d02c      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a48      	ldr	r2, [pc, #288]	; (80084dc <HAL_DMA_Init+0x694>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d027      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a47      	ldr	r2, [pc, #284]	; (80084e0 <HAL_DMA_Init+0x698>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d022      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a45      	ldr	r2, [pc, #276]	; (80084e4 <HAL_DMA_Init+0x69c>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01d      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a44      	ldr	r2, [pc, #272]	; (80084e8 <HAL_DMA_Init+0x6a0>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d018      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a42      	ldr	r2, [pc, #264]	; (80084ec <HAL_DMA_Init+0x6a4>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d013      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a41      	ldr	r2, [pc, #260]	; (80084f0 <HAL_DMA_Init+0x6a8>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d00e      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a3f      	ldr	r2, [pc, #252]	; (80084f4 <HAL_DMA_Init+0x6ac>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d009      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a3e      	ldr	r2, [pc, #248]	; (80084f8 <HAL_DMA_Init+0x6b0>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d004      	beq.n	800840e <HAL_DMA_Init+0x5c6>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a3c      	ldr	r2, [pc, #240]	; (80084fc <HAL_DMA_Init+0x6b4>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d101      	bne.n	8008412 <HAL_DMA_Init+0x5ca>
 800840e:	2301      	movs	r3, #1
 8008410:	e000      	b.n	8008414 <HAL_DMA_Init+0x5cc>
 8008412:	2300      	movs	r3, #0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d032      	beq.n	800847e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 fe2d 	bl	800a078 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	2b80      	cmp	r3, #128	; 0x80
 8008424:	d102      	bne.n	800842c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008434:	b2d2      	uxtb	r2, r2
 8008436:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008440:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d010      	beq.n	800846c <HAL_DMA_Init+0x624>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	2b08      	cmp	r3, #8
 8008450:	d80c      	bhi.n	800846c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f001 feaa 	bl	800a1ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008468:	605a      	str	r2, [r3, #4]
 800846a:	e008      	b.n	800847e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
 8008496:	bf00      	nop
 8008498:	a7fdabf8 	.word	0xa7fdabf8
 800849c:	cccccccd 	.word	0xcccccccd
 80084a0:	40020010 	.word	0x40020010
 80084a4:	40020028 	.word	0x40020028
 80084a8:	40020040 	.word	0x40020040
 80084ac:	40020058 	.word	0x40020058
 80084b0:	40020070 	.word	0x40020070
 80084b4:	40020088 	.word	0x40020088
 80084b8:	400200a0 	.word	0x400200a0
 80084bc:	400200b8 	.word	0x400200b8
 80084c0:	40020410 	.word	0x40020410
 80084c4:	40020428 	.word	0x40020428
 80084c8:	40020440 	.word	0x40020440
 80084cc:	40020458 	.word	0x40020458
 80084d0:	40020470 	.word	0x40020470
 80084d4:	40020488 	.word	0x40020488
 80084d8:	400204a0 	.word	0x400204a0
 80084dc:	400204b8 	.word	0x400204b8
 80084e0:	58025408 	.word	0x58025408
 80084e4:	5802541c 	.word	0x5802541c
 80084e8:	58025430 	.word	0x58025430
 80084ec:	58025444 	.word	0x58025444
 80084f0:	58025458 	.word	0x58025458
 80084f4:	5802546c 	.word	0x5802546c
 80084f8:	58025480 	.word	0x58025480
 80084fc:	58025494 	.word	0x58025494

08008500 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008508:	f7ff fb3e 	bl	8007b88 <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008514:	2301      	movs	r3, #1
 8008516:	e2dc      	b.n	8008ad2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800851e:	b2db      	uxtb	r3, r3
 8008520:	2b02      	cmp	r3, #2
 8008522:	d008      	beq.n	8008536 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2280      	movs	r2, #128	; 0x80
 8008528:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e2cd      	b.n	8008ad2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a76      	ldr	r2, [pc, #472]	; (8008714 <HAL_DMA_Abort+0x214>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d04a      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a74      	ldr	r2, [pc, #464]	; (8008718 <HAL_DMA_Abort+0x218>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d045      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a73      	ldr	r2, [pc, #460]	; (800871c <HAL_DMA_Abort+0x21c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d040      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a71      	ldr	r2, [pc, #452]	; (8008720 <HAL_DMA_Abort+0x220>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d03b      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a70      	ldr	r2, [pc, #448]	; (8008724 <HAL_DMA_Abort+0x224>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d036      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4a6e      	ldr	r2, [pc, #440]	; (8008728 <HAL_DMA_Abort+0x228>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d031      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a6d      	ldr	r2, [pc, #436]	; (800872c <HAL_DMA_Abort+0x22c>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d02c      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a6b      	ldr	r2, [pc, #428]	; (8008730 <HAL_DMA_Abort+0x230>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d027      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4a6a      	ldr	r2, [pc, #424]	; (8008734 <HAL_DMA_Abort+0x234>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d022      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a68      	ldr	r2, [pc, #416]	; (8008738 <HAL_DMA_Abort+0x238>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d01d      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a67      	ldr	r2, [pc, #412]	; (800873c <HAL_DMA_Abort+0x23c>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d018      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a65      	ldr	r2, [pc, #404]	; (8008740 <HAL_DMA_Abort+0x240>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d013      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4a64      	ldr	r2, [pc, #400]	; (8008744 <HAL_DMA_Abort+0x244>)
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d00e      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a62      	ldr	r2, [pc, #392]	; (8008748 <HAL_DMA_Abort+0x248>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d009      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a61      	ldr	r2, [pc, #388]	; (800874c <HAL_DMA_Abort+0x24c>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	d004      	beq.n	80085d6 <HAL_DMA_Abort+0xd6>
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a5f      	ldr	r2, [pc, #380]	; (8008750 <HAL_DMA_Abort+0x250>)
 80085d2:	4293      	cmp	r3, r2
 80085d4:	d101      	bne.n	80085da <HAL_DMA_Abort+0xda>
 80085d6:	2301      	movs	r3, #1
 80085d8:	e000      	b.n	80085dc <HAL_DMA_Abort+0xdc>
 80085da:	2300      	movs	r3, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d013      	beq.n	8008608 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f022 021e 	bic.w	r2, r2, #30
 80085ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	695a      	ldr	r2, [r3, #20]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80085fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	617b      	str	r3, [r7, #20]
 8008606:	e00a      	b.n	800861e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f022 020e 	bic.w	r2, r2, #14
 8008616:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a3c      	ldr	r2, [pc, #240]	; (8008714 <HAL_DMA_Abort+0x214>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d072      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a3a      	ldr	r2, [pc, #232]	; (8008718 <HAL_DMA_Abort+0x218>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d06d      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a39      	ldr	r2, [pc, #228]	; (800871c <HAL_DMA_Abort+0x21c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d068      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a37      	ldr	r2, [pc, #220]	; (8008720 <HAL_DMA_Abort+0x220>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d063      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a36      	ldr	r2, [pc, #216]	; (8008724 <HAL_DMA_Abort+0x224>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d05e      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a34      	ldr	r2, [pc, #208]	; (8008728 <HAL_DMA_Abort+0x228>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d059      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a33      	ldr	r2, [pc, #204]	; (800872c <HAL_DMA_Abort+0x22c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d054      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a31      	ldr	r2, [pc, #196]	; (8008730 <HAL_DMA_Abort+0x230>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d04f      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a30      	ldr	r2, [pc, #192]	; (8008734 <HAL_DMA_Abort+0x234>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d04a      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a2e      	ldr	r2, [pc, #184]	; (8008738 <HAL_DMA_Abort+0x238>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d045      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a2d      	ldr	r2, [pc, #180]	; (800873c <HAL_DMA_Abort+0x23c>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d040      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a2b      	ldr	r2, [pc, #172]	; (8008740 <HAL_DMA_Abort+0x240>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d03b      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a2a      	ldr	r2, [pc, #168]	; (8008744 <HAL_DMA_Abort+0x244>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d036      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a28      	ldr	r2, [pc, #160]	; (8008748 <HAL_DMA_Abort+0x248>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d031      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a27      	ldr	r2, [pc, #156]	; (800874c <HAL_DMA_Abort+0x24c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d02c      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a25      	ldr	r2, [pc, #148]	; (8008750 <HAL_DMA_Abort+0x250>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d027      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a24      	ldr	r2, [pc, #144]	; (8008754 <HAL_DMA_Abort+0x254>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d022      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a22      	ldr	r2, [pc, #136]	; (8008758 <HAL_DMA_Abort+0x258>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d01d      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a21      	ldr	r2, [pc, #132]	; (800875c <HAL_DMA_Abort+0x25c>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d018      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a1f      	ldr	r2, [pc, #124]	; (8008760 <HAL_DMA_Abort+0x260>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d013      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a1e      	ldr	r2, [pc, #120]	; (8008764 <HAL_DMA_Abort+0x264>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00e      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a1c      	ldr	r2, [pc, #112]	; (8008768 <HAL_DMA_Abort+0x268>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d009      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a1b      	ldr	r2, [pc, #108]	; (800876c <HAL_DMA_Abort+0x26c>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d004      	beq.n	800870e <HAL_DMA_Abort+0x20e>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a19      	ldr	r2, [pc, #100]	; (8008770 <HAL_DMA_Abort+0x270>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d132      	bne.n	8008774 <HAL_DMA_Abort+0x274>
 800870e:	2301      	movs	r3, #1
 8008710:	e031      	b.n	8008776 <HAL_DMA_Abort+0x276>
 8008712:	bf00      	nop
 8008714:	40020010 	.word	0x40020010
 8008718:	40020028 	.word	0x40020028
 800871c:	40020040 	.word	0x40020040
 8008720:	40020058 	.word	0x40020058
 8008724:	40020070 	.word	0x40020070
 8008728:	40020088 	.word	0x40020088
 800872c:	400200a0 	.word	0x400200a0
 8008730:	400200b8 	.word	0x400200b8
 8008734:	40020410 	.word	0x40020410
 8008738:	40020428 	.word	0x40020428
 800873c:	40020440 	.word	0x40020440
 8008740:	40020458 	.word	0x40020458
 8008744:	40020470 	.word	0x40020470
 8008748:	40020488 	.word	0x40020488
 800874c:	400204a0 	.word	0x400204a0
 8008750:	400204b8 	.word	0x400204b8
 8008754:	58025408 	.word	0x58025408
 8008758:	5802541c 	.word	0x5802541c
 800875c:	58025430 	.word	0x58025430
 8008760:	58025444 	.word	0x58025444
 8008764:	58025458 	.word	0x58025458
 8008768:	5802546c 	.word	0x5802546c
 800876c:	58025480 	.word	0x58025480
 8008770:	58025494 	.word	0x58025494
 8008774:	2300      	movs	r3, #0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d007      	beq.n	800878a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800877e:	681a      	ldr	r2, [r3, #0]
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008784:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008788:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a6d      	ldr	r2, [pc, #436]	; (8008944 <HAL_DMA_Abort+0x444>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d04a      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a6b      	ldr	r2, [pc, #428]	; (8008948 <HAL_DMA_Abort+0x448>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d045      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a6a      	ldr	r2, [pc, #424]	; (800894c <HAL_DMA_Abort+0x44c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d040      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a68      	ldr	r2, [pc, #416]	; (8008950 <HAL_DMA_Abort+0x450>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d03b      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a67      	ldr	r2, [pc, #412]	; (8008954 <HAL_DMA_Abort+0x454>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d036      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a65      	ldr	r2, [pc, #404]	; (8008958 <HAL_DMA_Abort+0x458>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d031      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a64      	ldr	r2, [pc, #400]	; (800895c <HAL_DMA_Abort+0x45c>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d02c      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a62      	ldr	r2, [pc, #392]	; (8008960 <HAL_DMA_Abort+0x460>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d027      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a61      	ldr	r2, [pc, #388]	; (8008964 <HAL_DMA_Abort+0x464>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d022      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4a5f      	ldr	r2, [pc, #380]	; (8008968 <HAL_DMA_Abort+0x468>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d01d      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a5e      	ldr	r2, [pc, #376]	; (800896c <HAL_DMA_Abort+0x46c>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d018      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a5c      	ldr	r2, [pc, #368]	; (8008970 <HAL_DMA_Abort+0x470>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d013      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a5b      	ldr	r2, [pc, #364]	; (8008974 <HAL_DMA_Abort+0x474>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d00e      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	4a59      	ldr	r2, [pc, #356]	; (8008978 <HAL_DMA_Abort+0x478>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d009      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a58      	ldr	r2, [pc, #352]	; (800897c <HAL_DMA_Abort+0x47c>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d004      	beq.n	800882a <HAL_DMA_Abort+0x32a>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a56      	ldr	r2, [pc, #344]	; (8008980 <HAL_DMA_Abort+0x480>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d108      	bne.n	800883c <HAL_DMA_Abort+0x33c>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f022 0201 	bic.w	r2, r2, #1
 8008838:	601a      	str	r2, [r3, #0]
 800883a:	e007      	b.n	800884c <HAL_DMA_Abort+0x34c>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	681a      	ldr	r2, [r3, #0]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f022 0201 	bic.w	r2, r2, #1
 800884a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800884c:	e013      	b.n	8008876 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800884e:	f7ff f99b 	bl	8007b88 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	2b05      	cmp	r3, #5
 800885a:	d90c      	bls.n	8008876 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2220      	movs	r2, #32
 8008860:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2203      	movs	r2, #3
 8008866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e12d      	b.n	8008ad2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f003 0301 	and.w	r3, r3, #1
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1e5      	bne.n	800884e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a2f      	ldr	r2, [pc, #188]	; (8008944 <HAL_DMA_Abort+0x444>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d04a      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a2d      	ldr	r2, [pc, #180]	; (8008948 <HAL_DMA_Abort+0x448>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d045      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a2c      	ldr	r2, [pc, #176]	; (800894c <HAL_DMA_Abort+0x44c>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d040      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	4a2a      	ldr	r2, [pc, #168]	; (8008950 <HAL_DMA_Abort+0x450>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d03b      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4a29      	ldr	r2, [pc, #164]	; (8008954 <HAL_DMA_Abort+0x454>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d036      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	4a27      	ldr	r2, [pc, #156]	; (8008958 <HAL_DMA_Abort+0x458>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d031      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	4a26      	ldr	r2, [pc, #152]	; (800895c <HAL_DMA_Abort+0x45c>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d02c      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	4a24      	ldr	r2, [pc, #144]	; (8008960 <HAL_DMA_Abort+0x460>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d027      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a23      	ldr	r2, [pc, #140]	; (8008964 <HAL_DMA_Abort+0x464>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d022      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a21      	ldr	r2, [pc, #132]	; (8008968 <HAL_DMA_Abort+0x468>)
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d01d      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	4a20      	ldr	r2, [pc, #128]	; (800896c <HAL_DMA_Abort+0x46c>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d018      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <HAL_DMA_Abort+0x470>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d013      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	4a1d      	ldr	r2, [pc, #116]	; (8008974 <HAL_DMA_Abort+0x474>)
 8008900:	4293      	cmp	r3, r2
 8008902:	d00e      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a1b      	ldr	r2, [pc, #108]	; (8008978 <HAL_DMA_Abort+0x478>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d009      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a1a      	ldr	r2, [pc, #104]	; (800897c <HAL_DMA_Abort+0x47c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d004      	beq.n	8008922 <HAL_DMA_Abort+0x422>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4a18      	ldr	r2, [pc, #96]	; (8008980 <HAL_DMA_Abort+0x480>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d101      	bne.n	8008926 <HAL_DMA_Abort+0x426>
 8008922:	2301      	movs	r3, #1
 8008924:	e000      	b.n	8008928 <HAL_DMA_Abort+0x428>
 8008926:	2300      	movs	r3, #0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d02b      	beq.n	8008984 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008930:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008936:	f003 031f 	and.w	r3, r3, #31
 800893a:	223f      	movs	r2, #63	; 0x3f
 800893c:	409a      	lsls	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	609a      	str	r2, [r3, #8]
 8008942:	e02a      	b.n	800899a <HAL_DMA_Abort+0x49a>
 8008944:	40020010 	.word	0x40020010
 8008948:	40020028 	.word	0x40020028
 800894c:	40020040 	.word	0x40020040
 8008950:	40020058 	.word	0x40020058
 8008954:	40020070 	.word	0x40020070
 8008958:	40020088 	.word	0x40020088
 800895c:	400200a0 	.word	0x400200a0
 8008960:	400200b8 	.word	0x400200b8
 8008964:	40020410 	.word	0x40020410
 8008968:	40020428 	.word	0x40020428
 800896c:	40020440 	.word	0x40020440
 8008970:	40020458 	.word	0x40020458
 8008974:	40020470 	.word	0x40020470
 8008978:	40020488 	.word	0x40020488
 800897c:	400204a0 	.word	0x400204a0
 8008980:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008988:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898e:	f003 031f 	and.w	r3, r3, #31
 8008992:	2201      	movs	r2, #1
 8008994:	409a      	lsls	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a4f      	ldr	r2, [pc, #316]	; (8008adc <HAL_DMA_Abort+0x5dc>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d072      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a4d      	ldr	r2, [pc, #308]	; (8008ae0 <HAL_DMA_Abort+0x5e0>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d06d      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a4c      	ldr	r2, [pc, #304]	; (8008ae4 <HAL_DMA_Abort+0x5e4>)
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d068      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4a4a      	ldr	r2, [pc, #296]	; (8008ae8 <HAL_DMA_Abort+0x5e8>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d063      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a49      	ldr	r2, [pc, #292]	; (8008aec <HAL_DMA_Abort+0x5ec>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d05e      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	4a47      	ldr	r2, [pc, #284]	; (8008af0 <HAL_DMA_Abort+0x5f0>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d059      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4a46      	ldr	r2, [pc, #280]	; (8008af4 <HAL_DMA_Abort+0x5f4>)
 80089dc:	4293      	cmp	r3, r2
 80089de:	d054      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4a44      	ldr	r2, [pc, #272]	; (8008af8 <HAL_DMA_Abort+0x5f8>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d04f      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a43      	ldr	r2, [pc, #268]	; (8008afc <HAL_DMA_Abort+0x5fc>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d04a      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a41      	ldr	r2, [pc, #260]	; (8008b00 <HAL_DMA_Abort+0x600>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d045      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a40      	ldr	r2, [pc, #256]	; (8008b04 <HAL_DMA_Abort+0x604>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d040      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a3e      	ldr	r2, [pc, #248]	; (8008b08 <HAL_DMA_Abort+0x608>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d03b      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a3d      	ldr	r2, [pc, #244]	; (8008b0c <HAL_DMA_Abort+0x60c>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d036      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4a3b      	ldr	r2, [pc, #236]	; (8008b10 <HAL_DMA_Abort+0x610>)
 8008a22:	4293      	cmp	r3, r2
 8008a24:	d031      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a3a      	ldr	r2, [pc, #232]	; (8008b14 <HAL_DMA_Abort+0x614>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d02c      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a38      	ldr	r2, [pc, #224]	; (8008b18 <HAL_DMA_Abort+0x618>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d027      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a37      	ldr	r2, [pc, #220]	; (8008b1c <HAL_DMA_Abort+0x61c>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d022      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a35      	ldr	r2, [pc, #212]	; (8008b20 <HAL_DMA_Abort+0x620>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d01d      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a34      	ldr	r2, [pc, #208]	; (8008b24 <HAL_DMA_Abort+0x624>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d018      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4a32      	ldr	r2, [pc, #200]	; (8008b28 <HAL_DMA_Abort+0x628>)
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d013      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a31      	ldr	r2, [pc, #196]	; (8008b2c <HAL_DMA_Abort+0x62c>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00e      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	4a2f      	ldr	r2, [pc, #188]	; (8008b30 <HAL_DMA_Abort+0x630>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d009      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a2e      	ldr	r2, [pc, #184]	; (8008b34 <HAL_DMA_Abort+0x634>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d004      	beq.n	8008a8a <HAL_DMA_Abort+0x58a>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a2c      	ldr	r2, [pc, #176]	; (8008b38 <HAL_DMA_Abort+0x638>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d101      	bne.n	8008a8e <HAL_DMA_Abort+0x58e>
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e000      	b.n	8008a90 <HAL_DMA_Abort+0x590>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d015      	beq.n	8008ac0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008a9c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d00c      	beq.n	8008ac0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008aaa:	681a      	ldr	r2, [r3, #0]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ab4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008abe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8008ad0:	2300      	movs	r3, #0
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3718      	adds	r7, #24
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	40020010 	.word	0x40020010
 8008ae0:	40020028 	.word	0x40020028
 8008ae4:	40020040 	.word	0x40020040
 8008ae8:	40020058 	.word	0x40020058
 8008aec:	40020070 	.word	0x40020070
 8008af0:	40020088 	.word	0x40020088
 8008af4:	400200a0 	.word	0x400200a0
 8008af8:	400200b8 	.word	0x400200b8
 8008afc:	40020410 	.word	0x40020410
 8008b00:	40020428 	.word	0x40020428
 8008b04:	40020440 	.word	0x40020440
 8008b08:	40020458 	.word	0x40020458
 8008b0c:	40020470 	.word	0x40020470
 8008b10:	40020488 	.word	0x40020488
 8008b14:	400204a0 	.word	0x400204a0
 8008b18:	400204b8 	.word	0x400204b8
 8008b1c:	58025408 	.word	0x58025408
 8008b20:	5802541c 	.word	0x5802541c
 8008b24:	58025430 	.word	0x58025430
 8008b28:	58025444 	.word	0x58025444
 8008b2c:	58025458 	.word	0x58025458
 8008b30:	5802546c 	.word	0x5802546c
 8008b34:	58025480 	.word	0x58025480
 8008b38:	58025494 	.word	0x58025494

08008b3c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d101      	bne.n	8008b4e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e237      	b.n	8008fbe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d004      	beq.n	8008b64 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2280      	movs	r2, #128	; 0x80
 8008b5e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	e22c      	b.n	8008fbe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a5c      	ldr	r2, [pc, #368]	; (8008cdc <HAL_DMA_Abort_IT+0x1a0>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d04a      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4a5b      	ldr	r2, [pc, #364]	; (8008ce0 <HAL_DMA_Abort_IT+0x1a4>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d045      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4a59      	ldr	r2, [pc, #356]	; (8008ce4 <HAL_DMA_Abort_IT+0x1a8>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d040      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4a58      	ldr	r2, [pc, #352]	; (8008ce8 <HAL_DMA_Abort_IT+0x1ac>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d03b      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a56      	ldr	r2, [pc, #344]	; (8008cec <HAL_DMA_Abort_IT+0x1b0>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d036      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4a55      	ldr	r2, [pc, #340]	; (8008cf0 <HAL_DMA_Abort_IT+0x1b4>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d031      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4a53      	ldr	r2, [pc, #332]	; (8008cf4 <HAL_DMA_Abort_IT+0x1b8>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d02c      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4a52      	ldr	r2, [pc, #328]	; (8008cf8 <HAL_DMA_Abort_IT+0x1bc>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d027      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4a50      	ldr	r2, [pc, #320]	; (8008cfc <HAL_DMA_Abort_IT+0x1c0>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d022      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4a4f      	ldr	r2, [pc, #316]	; (8008d00 <HAL_DMA_Abort_IT+0x1c4>)
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	d01d      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4a4d      	ldr	r2, [pc, #308]	; (8008d04 <HAL_DMA_Abort_IT+0x1c8>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d018      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4a4c      	ldr	r2, [pc, #304]	; (8008d08 <HAL_DMA_Abort_IT+0x1cc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d013      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a4a      	ldr	r2, [pc, #296]	; (8008d0c <HAL_DMA_Abort_IT+0x1d0>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d00e      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a49      	ldr	r2, [pc, #292]	; (8008d10 <HAL_DMA_Abort_IT+0x1d4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d009      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	4a47      	ldr	r2, [pc, #284]	; (8008d14 <HAL_DMA_Abort_IT+0x1d8>)
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d004      	beq.n	8008c04 <HAL_DMA_Abort_IT+0xc8>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4a46      	ldr	r2, [pc, #280]	; (8008d18 <HAL_DMA_Abort_IT+0x1dc>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d101      	bne.n	8008c08 <HAL_DMA_Abort_IT+0xcc>
 8008c04:	2301      	movs	r3, #1
 8008c06:	e000      	b.n	8008c0a <HAL_DMA_Abort_IT+0xce>
 8008c08:	2300      	movs	r3, #0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 8086 	beq.w	8008d1c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2204      	movs	r2, #4
 8008c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a2f      	ldr	r2, [pc, #188]	; (8008cdc <HAL_DMA_Abort_IT+0x1a0>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d04a      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a2e      	ldr	r2, [pc, #184]	; (8008ce0 <HAL_DMA_Abort_IT+0x1a4>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d045      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a2c      	ldr	r2, [pc, #176]	; (8008ce4 <HAL_DMA_Abort_IT+0x1a8>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d040      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	4a2b      	ldr	r2, [pc, #172]	; (8008ce8 <HAL_DMA_Abort_IT+0x1ac>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d03b      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a29      	ldr	r2, [pc, #164]	; (8008cec <HAL_DMA_Abort_IT+0x1b0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d036      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a28      	ldr	r2, [pc, #160]	; (8008cf0 <HAL_DMA_Abort_IT+0x1b4>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d031      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a26      	ldr	r2, [pc, #152]	; (8008cf4 <HAL_DMA_Abort_IT+0x1b8>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d02c      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	4a25      	ldr	r2, [pc, #148]	; (8008cf8 <HAL_DMA_Abort_IT+0x1bc>)
 8008c64:	4293      	cmp	r3, r2
 8008c66:	d027      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a23      	ldr	r2, [pc, #140]	; (8008cfc <HAL_DMA_Abort_IT+0x1c0>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d022      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4a22      	ldr	r2, [pc, #136]	; (8008d00 <HAL_DMA_Abort_IT+0x1c4>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d01d      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a20      	ldr	r2, [pc, #128]	; (8008d04 <HAL_DMA_Abort_IT+0x1c8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d018      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1f      	ldr	r2, [pc, #124]	; (8008d08 <HAL_DMA_Abort_IT+0x1cc>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d013      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	4a1d      	ldr	r2, [pc, #116]	; (8008d0c <HAL_DMA_Abort_IT+0x1d0>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d00e      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a1c      	ldr	r2, [pc, #112]	; (8008d10 <HAL_DMA_Abort_IT+0x1d4>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d009      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a1a      	ldr	r2, [pc, #104]	; (8008d14 <HAL_DMA_Abort_IT+0x1d8>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d004      	beq.n	8008cb8 <HAL_DMA_Abort_IT+0x17c>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	4a19      	ldr	r2, [pc, #100]	; (8008d18 <HAL_DMA_Abort_IT+0x1dc>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d108      	bne.n	8008cca <HAL_DMA_Abort_IT+0x18e>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0201 	bic.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]
 8008cc8:	e178      	b.n	8008fbc <HAL_DMA_Abort_IT+0x480>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f022 0201 	bic.w	r2, r2, #1
 8008cd8:	601a      	str	r2, [r3, #0]
 8008cda:	e16f      	b.n	8008fbc <HAL_DMA_Abort_IT+0x480>
 8008cdc:	40020010 	.word	0x40020010
 8008ce0:	40020028 	.word	0x40020028
 8008ce4:	40020040 	.word	0x40020040
 8008ce8:	40020058 	.word	0x40020058
 8008cec:	40020070 	.word	0x40020070
 8008cf0:	40020088 	.word	0x40020088
 8008cf4:	400200a0 	.word	0x400200a0
 8008cf8:	400200b8 	.word	0x400200b8
 8008cfc:	40020410 	.word	0x40020410
 8008d00:	40020428 	.word	0x40020428
 8008d04:	40020440 	.word	0x40020440
 8008d08:	40020458 	.word	0x40020458
 8008d0c:	40020470 	.word	0x40020470
 8008d10:	40020488 	.word	0x40020488
 8008d14:	400204a0 	.word	0x400204a0
 8008d18:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f022 020e 	bic.w	r2, r2, #14
 8008d2a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a6c      	ldr	r2, [pc, #432]	; (8008ee4 <HAL_DMA_Abort_IT+0x3a8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d04a      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a6b      	ldr	r2, [pc, #428]	; (8008ee8 <HAL_DMA_Abort_IT+0x3ac>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d045      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a69      	ldr	r2, [pc, #420]	; (8008eec <HAL_DMA_Abort_IT+0x3b0>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d040      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a68      	ldr	r2, [pc, #416]	; (8008ef0 <HAL_DMA_Abort_IT+0x3b4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d03b      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a66      	ldr	r2, [pc, #408]	; (8008ef4 <HAL_DMA_Abort_IT+0x3b8>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d036      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a65      	ldr	r2, [pc, #404]	; (8008ef8 <HAL_DMA_Abort_IT+0x3bc>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d031      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a63      	ldr	r2, [pc, #396]	; (8008efc <HAL_DMA_Abort_IT+0x3c0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d02c      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a62      	ldr	r2, [pc, #392]	; (8008f00 <HAL_DMA_Abort_IT+0x3c4>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d027      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a60      	ldr	r2, [pc, #384]	; (8008f04 <HAL_DMA_Abort_IT+0x3c8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d022      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a5f      	ldr	r2, [pc, #380]	; (8008f08 <HAL_DMA_Abort_IT+0x3cc>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d01d      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a5d      	ldr	r2, [pc, #372]	; (8008f0c <HAL_DMA_Abort_IT+0x3d0>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d018      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a5c      	ldr	r2, [pc, #368]	; (8008f10 <HAL_DMA_Abort_IT+0x3d4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d013      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a5a      	ldr	r2, [pc, #360]	; (8008f14 <HAL_DMA_Abort_IT+0x3d8>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00e      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a59      	ldr	r2, [pc, #356]	; (8008f18 <HAL_DMA_Abort_IT+0x3dc>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d009      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a57      	ldr	r2, [pc, #348]	; (8008f1c <HAL_DMA_Abort_IT+0x3e0>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d004      	beq.n	8008dcc <HAL_DMA_Abort_IT+0x290>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a56      	ldr	r2, [pc, #344]	; (8008f20 <HAL_DMA_Abort_IT+0x3e4>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d108      	bne.n	8008dde <HAL_DMA_Abort_IT+0x2a2>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0201 	bic.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	e007      	b.n	8008dee <HAL_DMA_Abort_IT+0x2b2>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0201 	bic.w	r2, r2, #1
 8008dec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	4a3c      	ldr	r2, [pc, #240]	; (8008ee4 <HAL_DMA_Abort_IT+0x3a8>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d072      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4a3a      	ldr	r2, [pc, #232]	; (8008ee8 <HAL_DMA_Abort_IT+0x3ac>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d06d      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4a39      	ldr	r2, [pc, #228]	; (8008eec <HAL_DMA_Abort_IT+0x3b0>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d068      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	4a37      	ldr	r2, [pc, #220]	; (8008ef0 <HAL_DMA_Abort_IT+0x3b4>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d063      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	4a36      	ldr	r2, [pc, #216]	; (8008ef4 <HAL_DMA_Abort_IT+0x3b8>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d05e      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a34      	ldr	r2, [pc, #208]	; (8008ef8 <HAL_DMA_Abort_IT+0x3bc>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d059      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a33      	ldr	r2, [pc, #204]	; (8008efc <HAL_DMA_Abort_IT+0x3c0>)
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d054      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	4a31      	ldr	r2, [pc, #196]	; (8008f00 <HAL_DMA_Abort_IT+0x3c4>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d04f      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4a30      	ldr	r2, [pc, #192]	; (8008f04 <HAL_DMA_Abort_IT+0x3c8>)
 8008e44:	4293      	cmp	r3, r2
 8008e46:	d04a      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	4a2e      	ldr	r2, [pc, #184]	; (8008f08 <HAL_DMA_Abort_IT+0x3cc>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d045      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a2d      	ldr	r2, [pc, #180]	; (8008f0c <HAL_DMA_Abort_IT+0x3d0>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d040      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a2b      	ldr	r2, [pc, #172]	; (8008f10 <HAL_DMA_Abort_IT+0x3d4>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d03b      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a2a      	ldr	r2, [pc, #168]	; (8008f14 <HAL_DMA_Abort_IT+0x3d8>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d036      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a28      	ldr	r2, [pc, #160]	; (8008f18 <HAL_DMA_Abort_IT+0x3dc>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d031      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a27      	ldr	r2, [pc, #156]	; (8008f1c <HAL_DMA_Abort_IT+0x3e0>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d02c      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a25      	ldr	r2, [pc, #148]	; (8008f20 <HAL_DMA_Abort_IT+0x3e4>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d027      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a24      	ldr	r2, [pc, #144]	; (8008f24 <HAL_DMA_Abort_IT+0x3e8>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d022      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a22      	ldr	r2, [pc, #136]	; (8008f28 <HAL_DMA_Abort_IT+0x3ec>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d01d      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a21      	ldr	r2, [pc, #132]	; (8008f2c <HAL_DMA_Abort_IT+0x3f0>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d018      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <HAL_DMA_Abort_IT+0x3f4>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d013      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a1e      	ldr	r2, [pc, #120]	; (8008f34 <HAL_DMA_Abort_IT+0x3f8>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d00e      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a1c      	ldr	r2, [pc, #112]	; (8008f38 <HAL_DMA_Abort_IT+0x3fc>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d009      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a1b      	ldr	r2, [pc, #108]	; (8008f3c <HAL_DMA_Abort_IT+0x400>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d004      	beq.n	8008ede <HAL_DMA_Abort_IT+0x3a2>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a19      	ldr	r2, [pc, #100]	; (8008f40 <HAL_DMA_Abort_IT+0x404>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d132      	bne.n	8008f44 <HAL_DMA_Abort_IT+0x408>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	e031      	b.n	8008f46 <HAL_DMA_Abort_IT+0x40a>
 8008ee2:	bf00      	nop
 8008ee4:	40020010 	.word	0x40020010
 8008ee8:	40020028 	.word	0x40020028
 8008eec:	40020040 	.word	0x40020040
 8008ef0:	40020058 	.word	0x40020058
 8008ef4:	40020070 	.word	0x40020070
 8008ef8:	40020088 	.word	0x40020088
 8008efc:	400200a0 	.word	0x400200a0
 8008f00:	400200b8 	.word	0x400200b8
 8008f04:	40020410 	.word	0x40020410
 8008f08:	40020428 	.word	0x40020428
 8008f0c:	40020440 	.word	0x40020440
 8008f10:	40020458 	.word	0x40020458
 8008f14:	40020470 	.word	0x40020470
 8008f18:	40020488 	.word	0x40020488
 8008f1c:	400204a0 	.word	0x400204a0
 8008f20:	400204b8 	.word	0x400204b8
 8008f24:	58025408 	.word	0x58025408
 8008f28:	5802541c 	.word	0x5802541c
 8008f2c:	58025430 	.word	0x58025430
 8008f30:	58025444 	.word	0x58025444
 8008f34:	58025458 	.word	0x58025458
 8008f38:	5802546c 	.word	0x5802546c
 8008f3c:	58025480 	.word	0x58025480
 8008f40:	58025494 	.word	0x58025494
 8008f44:	2300      	movs	r3, #0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d028      	beq.n	8008f9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f64:	f003 031f 	and.w	r3, r3, #31
 8008f68:	2201      	movs	r2, #1
 8008f6a:	409a      	lsls	r2, r3
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008f78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00c      	beq.n	8008f9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008f9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	3710      	adds	r7, #16
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop

08008fc8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008fd4:	4b67      	ldr	r3, [pc, #412]	; (8009174 <HAL_DMA_IRQHandler+0x1ac>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a67      	ldr	r2, [pc, #412]	; (8009178 <HAL_DMA_IRQHandler+0x1b0>)
 8008fda:	fba2 2303 	umull	r2, r3, r2, r3
 8008fde:	0a9b      	lsrs	r3, r3, #10
 8008fe0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fe6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008fee:	6a3b      	ldr	r3, [r7, #32]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008ff4:	69fb      	ldr	r3, [r7, #28]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a5f      	ldr	r2, [pc, #380]	; (800917c <HAL_DMA_IRQHandler+0x1b4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d04a      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a5d      	ldr	r2, [pc, #372]	; (8009180 <HAL_DMA_IRQHandler+0x1b8>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d045      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a5c      	ldr	r2, [pc, #368]	; (8009184 <HAL_DMA_IRQHandler+0x1bc>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d040      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a5a      	ldr	r2, [pc, #360]	; (8009188 <HAL_DMA_IRQHandler+0x1c0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d03b      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a59      	ldr	r2, [pc, #356]	; (800918c <HAL_DMA_IRQHandler+0x1c4>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d036      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a57      	ldr	r2, [pc, #348]	; (8009190 <HAL_DMA_IRQHandler+0x1c8>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d031      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a56      	ldr	r2, [pc, #344]	; (8009194 <HAL_DMA_IRQHandler+0x1cc>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d02c      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a54      	ldr	r2, [pc, #336]	; (8009198 <HAL_DMA_IRQHandler+0x1d0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d027      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a53      	ldr	r2, [pc, #332]	; (800919c <HAL_DMA_IRQHandler+0x1d4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d022      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a51      	ldr	r2, [pc, #324]	; (80091a0 <HAL_DMA_IRQHandler+0x1d8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d01d      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a50      	ldr	r2, [pc, #320]	; (80091a4 <HAL_DMA_IRQHandler+0x1dc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d018      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a4e      	ldr	r2, [pc, #312]	; (80091a8 <HAL_DMA_IRQHandler+0x1e0>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d013      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a4d      	ldr	r2, [pc, #308]	; (80091ac <HAL_DMA_IRQHandler+0x1e4>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00e      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a4b      	ldr	r2, [pc, #300]	; (80091b0 <HAL_DMA_IRQHandler+0x1e8>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d009      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a4a      	ldr	r2, [pc, #296]	; (80091b4 <HAL_DMA_IRQHandler+0x1ec>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d004      	beq.n	800909a <HAL_DMA_IRQHandler+0xd2>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a48      	ldr	r2, [pc, #288]	; (80091b8 <HAL_DMA_IRQHandler+0x1f0>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d101      	bne.n	800909e <HAL_DMA_IRQHandler+0xd6>
 800909a:	2301      	movs	r3, #1
 800909c:	e000      	b.n	80090a0 <HAL_DMA_IRQHandler+0xd8>
 800909e:	2300      	movs	r3, #0
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 842b 	beq.w	80098fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090aa:	f003 031f 	and.w	r3, r3, #31
 80090ae:	2208      	movs	r2, #8
 80090b0:	409a      	lsls	r2, r3
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	4013      	ands	r3, r2
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 80a2 	beq.w	8009200 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a2e      	ldr	r2, [pc, #184]	; (800917c <HAL_DMA_IRQHandler+0x1b4>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d04a      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a2d      	ldr	r2, [pc, #180]	; (8009180 <HAL_DMA_IRQHandler+0x1b8>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d045      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a2b      	ldr	r2, [pc, #172]	; (8009184 <HAL_DMA_IRQHandler+0x1bc>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d040      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a2a      	ldr	r2, [pc, #168]	; (8009188 <HAL_DMA_IRQHandler+0x1c0>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d03b      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a28      	ldr	r2, [pc, #160]	; (800918c <HAL_DMA_IRQHandler+0x1c4>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d036      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a27      	ldr	r2, [pc, #156]	; (8009190 <HAL_DMA_IRQHandler+0x1c8>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d031      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a25      	ldr	r2, [pc, #148]	; (8009194 <HAL_DMA_IRQHandler+0x1cc>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d02c      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a24      	ldr	r2, [pc, #144]	; (8009198 <HAL_DMA_IRQHandler+0x1d0>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d027      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a22      	ldr	r2, [pc, #136]	; (800919c <HAL_DMA_IRQHandler+0x1d4>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d022      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a21      	ldr	r2, [pc, #132]	; (80091a0 <HAL_DMA_IRQHandler+0x1d8>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d01d      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a1f      	ldr	r2, [pc, #124]	; (80091a4 <HAL_DMA_IRQHandler+0x1dc>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d018      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	4a1e      	ldr	r2, [pc, #120]	; (80091a8 <HAL_DMA_IRQHandler+0x1e0>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d013      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	4a1c      	ldr	r2, [pc, #112]	; (80091ac <HAL_DMA_IRQHandler+0x1e4>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d00e      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4a1b      	ldr	r2, [pc, #108]	; (80091b0 <HAL_DMA_IRQHandler+0x1e8>)
 8009144:	4293      	cmp	r3, r2
 8009146:	d009      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	4a19      	ldr	r2, [pc, #100]	; (80091b4 <HAL_DMA_IRQHandler+0x1ec>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d004      	beq.n	800915c <HAL_DMA_IRQHandler+0x194>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <HAL_DMA_IRQHandler+0x1f0>)
 8009158:	4293      	cmp	r3, r2
 800915a:	d12f      	bne.n	80091bc <HAL_DMA_IRQHandler+0x1f4>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b00      	cmp	r3, #0
 8009168:	bf14      	ite	ne
 800916a:	2301      	movne	r3, #1
 800916c:	2300      	moveq	r3, #0
 800916e:	b2db      	uxtb	r3, r3
 8009170:	e02e      	b.n	80091d0 <HAL_DMA_IRQHandler+0x208>
 8009172:	bf00      	nop
 8009174:	24000004 	.word	0x24000004
 8009178:	1b4e81b5 	.word	0x1b4e81b5
 800917c:	40020010 	.word	0x40020010
 8009180:	40020028 	.word	0x40020028
 8009184:	40020040 	.word	0x40020040
 8009188:	40020058 	.word	0x40020058
 800918c:	40020070 	.word	0x40020070
 8009190:	40020088 	.word	0x40020088
 8009194:	400200a0 	.word	0x400200a0
 8009198:	400200b8 	.word	0x400200b8
 800919c:	40020410 	.word	0x40020410
 80091a0:	40020428 	.word	0x40020428
 80091a4:	40020440 	.word	0x40020440
 80091a8:	40020458 	.word	0x40020458
 80091ac:	40020470 	.word	0x40020470
 80091b0:	40020488 	.word	0x40020488
 80091b4:	400204a0 	.word	0x400204a0
 80091b8:	400204b8 	.word	0x400204b8
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	bf14      	ite	ne
 80091ca:	2301      	movne	r3, #1
 80091cc:	2300      	moveq	r3, #0
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d015      	beq.n	8009200 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f022 0204 	bic.w	r2, r2, #4
 80091e2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e8:	f003 031f 	and.w	r3, r3, #31
 80091ec:	2208      	movs	r2, #8
 80091ee:	409a      	lsls	r2, r3
 80091f0:	6a3b      	ldr	r3, [r7, #32]
 80091f2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f8:	f043 0201 	orr.w	r2, r3, #1
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009204:	f003 031f 	and.w	r3, r3, #31
 8009208:	69ba      	ldr	r2, [r7, #24]
 800920a:	fa22 f303 	lsr.w	r3, r2, r3
 800920e:	f003 0301 	and.w	r3, r3, #1
 8009212:	2b00      	cmp	r3, #0
 8009214:	d06e      	beq.n	80092f4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a69      	ldr	r2, [pc, #420]	; (80093c0 <HAL_DMA_IRQHandler+0x3f8>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d04a      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	4a67      	ldr	r2, [pc, #412]	; (80093c4 <HAL_DMA_IRQHandler+0x3fc>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d045      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a66      	ldr	r2, [pc, #408]	; (80093c8 <HAL_DMA_IRQHandler+0x400>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d040      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a64      	ldr	r2, [pc, #400]	; (80093cc <HAL_DMA_IRQHandler+0x404>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d03b      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	4a63      	ldr	r2, [pc, #396]	; (80093d0 <HAL_DMA_IRQHandler+0x408>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d036      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4a61      	ldr	r2, [pc, #388]	; (80093d4 <HAL_DMA_IRQHandler+0x40c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d031      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a60      	ldr	r2, [pc, #384]	; (80093d8 <HAL_DMA_IRQHandler+0x410>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d02c      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4a5e      	ldr	r2, [pc, #376]	; (80093dc <HAL_DMA_IRQHandler+0x414>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d027      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a5d      	ldr	r2, [pc, #372]	; (80093e0 <HAL_DMA_IRQHandler+0x418>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d022      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	4a5b      	ldr	r2, [pc, #364]	; (80093e4 <HAL_DMA_IRQHandler+0x41c>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d01d      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	4a5a      	ldr	r2, [pc, #360]	; (80093e8 <HAL_DMA_IRQHandler+0x420>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d018      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a58      	ldr	r2, [pc, #352]	; (80093ec <HAL_DMA_IRQHandler+0x424>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d013      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	4a57      	ldr	r2, [pc, #348]	; (80093f0 <HAL_DMA_IRQHandler+0x428>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d00e      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4a55      	ldr	r2, [pc, #340]	; (80093f4 <HAL_DMA_IRQHandler+0x42c>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d009      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a54      	ldr	r2, [pc, #336]	; (80093f8 <HAL_DMA_IRQHandler+0x430>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d004      	beq.n	80092b6 <HAL_DMA_IRQHandler+0x2ee>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a52      	ldr	r2, [pc, #328]	; (80093fc <HAL_DMA_IRQHandler+0x434>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d10a      	bne.n	80092cc <HAL_DMA_IRQHandler+0x304>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	695b      	ldr	r3, [r3, #20]
 80092bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	bf14      	ite	ne
 80092c4:	2301      	movne	r3, #1
 80092c6:	2300      	moveq	r3, #0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	e003      	b.n	80092d4 <HAL_DMA_IRQHandler+0x30c>
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	2300      	movs	r3, #0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d00d      	beq.n	80092f4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092dc:	f003 031f 	and.w	r3, r3, #31
 80092e0:	2201      	movs	r2, #1
 80092e2:	409a      	lsls	r2, r3
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ec:	f043 0202 	orr.w	r2, r3, #2
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092f8:	f003 031f 	and.w	r3, r3, #31
 80092fc:	2204      	movs	r2, #4
 80092fe:	409a      	lsls	r2, r3
 8009300:	69bb      	ldr	r3, [r7, #24]
 8009302:	4013      	ands	r3, r2
 8009304:	2b00      	cmp	r3, #0
 8009306:	f000 808f 	beq.w	8009428 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a2c      	ldr	r2, [pc, #176]	; (80093c0 <HAL_DMA_IRQHandler+0x3f8>)
 8009310:	4293      	cmp	r3, r2
 8009312:	d04a      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a2a      	ldr	r2, [pc, #168]	; (80093c4 <HAL_DMA_IRQHandler+0x3fc>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d045      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a29      	ldr	r2, [pc, #164]	; (80093c8 <HAL_DMA_IRQHandler+0x400>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d040      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a27      	ldr	r2, [pc, #156]	; (80093cc <HAL_DMA_IRQHandler+0x404>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d03b      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a26      	ldr	r2, [pc, #152]	; (80093d0 <HAL_DMA_IRQHandler+0x408>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d036      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4a24      	ldr	r2, [pc, #144]	; (80093d4 <HAL_DMA_IRQHandler+0x40c>)
 8009342:	4293      	cmp	r3, r2
 8009344:	d031      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a23      	ldr	r2, [pc, #140]	; (80093d8 <HAL_DMA_IRQHandler+0x410>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d02c      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a21      	ldr	r2, [pc, #132]	; (80093dc <HAL_DMA_IRQHandler+0x414>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d027      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a20      	ldr	r2, [pc, #128]	; (80093e0 <HAL_DMA_IRQHandler+0x418>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d022      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a1e      	ldr	r2, [pc, #120]	; (80093e4 <HAL_DMA_IRQHandler+0x41c>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d01d      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a1d      	ldr	r2, [pc, #116]	; (80093e8 <HAL_DMA_IRQHandler+0x420>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d018      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1b      	ldr	r2, [pc, #108]	; (80093ec <HAL_DMA_IRQHandler+0x424>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d013      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	4a1a      	ldr	r2, [pc, #104]	; (80093f0 <HAL_DMA_IRQHandler+0x428>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d00e      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a18      	ldr	r2, [pc, #96]	; (80093f4 <HAL_DMA_IRQHandler+0x42c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d009      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a17      	ldr	r2, [pc, #92]	; (80093f8 <HAL_DMA_IRQHandler+0x430>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d004      	beq.n	80093aa <HAL_DMA_IRQHandler+0x3e2>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a15      	ldr	r2, [pc, #84]	; (80093fc <HAL_DMA_IRQHandler+0x434>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d12a      	bne.n	8009400 <HAL_DMA_IRQHandler+0x438>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0302 	and.w	r3, r3, #2
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bf14      	ite	ne
 80093b8:	2301      	movne	r3, #1
 80093ba:	2300      	moveq	r3, #0
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	e023      	b.n	8009408 <HAL_DMA_IRQHandler+0x440>
 80093c0:	40020010 	.word	0x40020010
 80093c4:	40020028 	.word	0x40020028
 80093c8:	40020040 	.word	0x40020040
 80093cc:	40020058 	.word	0x40020058
 80093d0:	40020070 	.word	0x40020070
 80093d4:	40020088 	.word	0x40020088
 80093d8:	400200a0 	.word	0x400200a0
 80093dc:	400200b8 	.word	0x400200b8
 80093e0:	40020410 	.word	0x40020410
 80093e4:	40020428 	.word	0x40020428
 80093e8:	40020440 	.word	0x40020440
 80093ec:	40020458 	.word	0x40020458
 80093f0:	40020470 	.word	0x40020470
 80093f4:	40020488 	.word	0x40020488
 80093f8:	400204a0 	.word	0x400204a0
 80093fc:	400204b8 	.word	0x400204b8
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2300      	movs	r3, #0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00d      	beq.n	8009428 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009410:	f003 031f 	and.w	r3, r3, #31
 8009414:	2204      	movs	r2, #4
 8009416:	409a      	lsls	r2, r3
 8009418:	6a3b      	ldr	r3, [r7, #32]
 800941a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009420:	f043 0204 	orr.w	r2, r3, #4
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800942c:	f003 031f 	and.w	r3, r3, #31
 8009430:	2210      	movs	r2, #16
 8009432:	409a      	lsls	r2, r3
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	4013      	ands	r3, r2
 8009438:	2b00      	cmp	r3, #0
 800943a:	f000 80a6 	beq.w	800958a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a85      	ldr	r2, [pc, #532]	; (8009658 <HAL_DMA_IRQHandler+0x690>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d04a      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a83      	ldr	r2, [pc, #524]	; (800965c <HAL_DMA_IRQHandler+0x694>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d045      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a82      	ldr	r2, [pc, #520]	; (8009660 <HAL_DMA_IRQHandler+0x698>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d040      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	4a80      	ldr	r2, [pc, #512]	; (8009664 <HAL_DMA_IRQHandler+0x69c>)
 8009462:	4293      	cmp	r3, r2
 8009464:	d03b      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a7f      	ldr	r2, [pc, #508]	; (8009668 <HAL_DMA_IRQHandler+0x6a0>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d036      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	4a7d      	ldr	r2, [pc, #500]	; (800966c <HAL_DMA_IRQHandler+0x6a4>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d031      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	4a7c      	ldr	r2, [pc, #496]	; (8009670 <HAL_DMA_IRQHandler+0x6a8>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d02c      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a7a      	ldr	r2, [pc, #488]	; (8009674 <HAL_DMA_IRQHandler+0x6ac>)
 800948a:	4293      	cmp	r3, r2
 800948c:	d027      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	4a79      	ldr	r2, [pc, #484]	; (8009678 <HAL_DMA_IRQHandler+0x6b0>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d022      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	4a77      	ldr	r2, [pc, #476]	; (800967c <HAL_DMA_IRQHandler+0x6b4>)
 800949e:	4293      	cmp	r3, r2
 80094a0:	d01d      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	4a76      	ldr	r2, [pc, #472]	; (8009680 <HAL_DMA_IRQHandler+0x6b8>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d018      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	4a74      	ldr	r2, [pc, #464]	; (8009684 <HAL_DMA_IRQHandler+0x6bc>)
 80094b2:	4293      	cmp	r3, r2
 80094b4:	d013      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a73      	ldr	r2, [pc, #460]	; (8009688 <HAL_DMA_IRQHandler+0x6c0>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d00e      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a71      	ldr	r2, [pc, #452]	; (800968c <HAL_DMA_IRQHandler+0x6c4>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d009      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a70      	ldr	r2, [pc, #448]	; (8009690 <HAL_DMA_IRQHandler+0x6c8>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d004      	beq.n	80094de <HAL_DMA_IRQHandler+0x516>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a6e      	ldr	r2, [pc, #440]	; (8009694 <HAL_DMA_IRQHandler+0x6cc>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d10a      	bne.n	80094f4 <HAL_DMA_IRQHandler+0x52c>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 0308 	and.w	r3, r3, #8
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	bf14      	ite	ne
 80094ec:	2301      	movne	r3, #1
 80094ee:	2300      	moveq	r3, #0
 80094f0:	b2db      	uxtb	r3, r3
 80094f2:	e009      	b.n	8009508 <HAL_DMA_IRQHandler+0x540>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0304 	and.w	r3, r3, #4
 80094fe:	2b00      	cmp	r3, #0
 8009500:	bf14      	ite	ne
 8009502:	2301      	movne	r3, #1
 8009504:	2300      	moveq	r3, #0
 8009506:	b2db      	uxtb	r3, r3
 8009508:	2b00      	cmp	r3, #0
 800950a:	d03e      	beq.n	800958a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009510:	f003 031f 	and.w	r3, r3, #31
 8009514:	2210      	movs	r2, #16
 8009516:	409a      	lsls	r2, r3
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d018      	beq.n	800955c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d108      	bne.n	800954a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800953c:	2b00      	cmp	r3, #0
 800953e:	d024      	beq.n	800958a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	4798      	blx	r3
 8009548:	e01f      	b.n	800958a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800954e:	2b00      	cmp	r3, #0
 8009550:	d01b      	beq.n	800958a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	4798      	blx	r3
 800955a:	e016      	b.n	800958a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009566:	2b00      	cmp	r3, #0
 8009568:	d107      	bne.n	800957a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681a      	ldr	r2, [r3, #0]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	f022 0208 	bic.w	r2, r2, #8
 8009578:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	2b00      	cmp	r3, #0
 8009580:	d003      	beq.n	800958a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800958e:	f003 031f 	and.w	r3, r3, #31
 8009592:	2220      	movs	r2, #32
 8009594:	409a      	lsls	r2, r3
 8009596:	69bb      	ldr	r3, [r7, #24]
 8009598:	4013      	ands	r3, r2
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 8110 	beq.w	80097c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a2c      	ldr	r2, [pc, #176]	; (8009658 <HAL_DMA_IRQHandler+0x690>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d04a      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4a2b      	ldr	r2, [pc, #172]	; (800965c <HAL_DMA_IRQHandler+0x694>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d045      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	4a29      	ldr	r2, [pc, #164]	; (8009660 <HAL_DMA_IRQHandler+0x698>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d040      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a28      	ldr	r2, [pc, #160]	; (8009664 <HAL_DMA_IRQHandler+0x69c>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d03b      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a26      	ldr	r2, [pc, #152]	; (8009668 <HAL_DMA_IRQHandler+0x6a0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d036      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a25      	ldr	r2, [pc, #148]	; (800966c <HAL_DMA_IRQHandler+0x6a4>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d031      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a23      	ldr	r2, [pc, #140]	; (8009670 <HAL_DMA_IRQHandler+0x6a8>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d02c      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a22      	ldr	r2, [pc, #136]	; (8009674 <HAL_DMA_IRQHandler+0x6ac>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d027      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a20      	ldr	r2, [pc, #128]	; (8009678 <HAL_DMA_IRQHandler+0x6b0>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d022      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a1f      	ldr	r2, [pc, #124]	; (800967c <HAL_DMA_IRQHandler+0x6b4>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d01d      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	4a1d      	ldr	r2, [pc, #116]	; (8009680 <HAL_DMA_IRQHandler+0x6b8>)
 800960a:	4293      	cmp	r3, r2
 800960c:	d018      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	4a1c      	ldr	r2, [pc, #112]	; (8009684 <HAL_DMA_IRQHandler+0x6bc>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d013      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a1a      	ldr	r2, [pc, #104]	; (8009688 <HAL_DMA_IRQHandler+0x6c0>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d00e      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4a19      	ldr	r2, [pc, #100]	; (800968c <HAL_DMA_IRQHandler+0x6c4>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d009      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4a17      	ldr	r2, [pc, #92]	; (8009690 <HAL_DMA_IRQHandler+0x6c8>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d004      	beq.n	8009640 <HAL_DMA_IRQHandler+0x678>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	4a16      	ldr	r2, [pc, #88]	; (8009694 <HAL_DMA_IRQHandler+0x6cc>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d12b      	bne.n	8009698 <HAL_DMA_IRQHandler+0x6d0>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0310 	and.w	r3, r3, #16
 800964a:	2b00      	cmp	r3, #0
 800964c:	bf14      	ite	ne
 800964e:	2301      	movne	r3, #1
 8009650:	2300      	moveq	r3, #0
 8009652:	b2db      	uxtb	r3, r3
 8009654:	e02a      	b.n	80096ac <HAL_DMA_IRQHandler+0x6e4>
 8009656:	bf00      	nop
 8009658:	40020010 	.word	0x40020010
 800965c:	40020028 	.word	0x40020028
 8009660:	40020040 	.word	0x40020040
 8009664:	40020058 	.word	0x40020058
 8009668:	40020070 	.word	0x40020070
 800966c:	40020088 	.word	0x40020088
 8009670:	400200a0 	.word	0x400200a0
 8009674:	400200b8 	.word	0x400200b8
 8009678:	40020410 	.word	0x40020410
 800967c:	40020428 	.word	0x40020428
 8009680:	40020440 	.word	0x40020440
 8009684:	40020458 	.word	0x40020458
 8009688:	40020470 	.word	0x40020470
 800968c:	40020488 	.word	0x40020488
 8009690:	400204a0 	.word	0x400204a0
 8009694:	400204b8 	.word	0x400204b8
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0302 	and.w	r3, r3, #2
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	bf14      	ite	ne
 80096a6:	2301      	movne	r3, #1
 80096a8:	2300      	moveq	r3, #0
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	f000 8087 	beq.w	80097c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096b6:	f003 031f 	and.w	r3, r3, #31
 80096ba:	2220      	movs	r2, #32
 80096bc:	409a      	lsls	r2, r3
 80096be:	6a3b      	ldr	r3, [r7, #32]
 80096c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80096c8:	b2db      	uxtb	r3, r3
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d139      	bne.n	8009742 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681a      	ldr	r2, [r3, #0]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f022 0216 	bic.w	r2, r2, #22
 80096dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	695a      	ldr	r2, [r3, #20]
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d103      	bne.n	80096fe <HAL_DMA_IRQHandler+0x736>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d007      	beq.n	800970e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f022 0208 	bic.w	r2, r2, #8
 800970c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009712:	f003 031f 	and.w	r3, r3, #31
 8009716:	223f      	movs	r2, #63	; 0x3f
 8009718:	409a      	lsls	r2, r3
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009732:	2b00      	cmp	r3, #0
 8009734:	f000 834a 	beq.w	8009dcc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	4798      	blx	r3
          }
          return;
 8009740:	e344      	b.n	8009dcc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800974c:	2b00      	cmp	r3, #0
 800974e:	d018      	beq.n	8009782 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800975a:	2b00      	cmp	r3, #0
 800975c:	d108      	bne.n	8009770 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009762:	2b00      	cmp	r3, #0
 8009764:	d02c      	beq.n	80097c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	4798      	blx	r3
 800976e:	e027      	b.n	80097c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009774:	2b00      	cmp	r3, #0
 8009776:	d023      	beq.n	80097c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	4798      	blx	r3
 8009780:	e01e      	b.n	80097c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10f      	bne.n	80097b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0210 	bic.w	r2, r2, #16
 800979e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d003      	beq.n	80097c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	f000 8306 	beq.w	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f000 8088 	beq.w	80098e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2204      	movs	r2, #4
 80097dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a7a      	ldr	r2, [pc, #488]	; (80099d0 <HAL_DMA_IRQHandler+0xa08>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d04a      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a79      	ldr	r2, [pc, #484]	; (80099d4 <HAL_DMA_IRQHandler+0xa0c>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d045      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a77      	ldr	r2, [pc, #476]	; (80099d8 <HAL_DMA_IRQHandler+0xa10>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d040      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a76      	ldr	r2, [pc, #472]	; (80099dc <HAL_DMA_IRQHandler+0xa14>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d03b      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a74      	ldr	r2, [pc, #464]	; (80099e0 <HAL_DMA_IRQHandler+0xa18>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d036      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a73      	ldr	r2, [pc, #460]	; (80099e4 <HAL_DMA_IRQHandler+0xa1c>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d031      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a71      	ldr	r2, [pc, #452]	; (80099e8 <HAL_DMA_IRQHandler+0xa20>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d02c      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a70      	ldr	r2, [pc, #448]	; (80099ec <HAL_DMA_IRQHandler+0xa24>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d027      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a6e      	ldr	r2, [pc, #440]	; (80099f0 <HAL_DMA_IRQHandler+0xa28>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d022      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4a6d      	ldr	r2, [pc, #436]	; (80099f4 <HAL_DMA_IRQHandler+0xa2c>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d01d      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a6b      	ldr	r2, [pc, #428]	; (80099f8 <HAL_DMA_IRQHandler+0xa30>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d018      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a6a      	ldr	r2, [pc, #424]	; (80099fc <HAL_DMA_IRQHandler+0xa34>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d013      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a68      	ldr	r2, [pc, #416]	; (8009a00 <HAL_DMA_IRQHandler+0xa38>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00e      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a67      	ldr	r2, [pc, #412]	; (8009a04 <HAL_DMA_IRQHandler+0xa3c>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d009      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a65      	ldr	r2, [pc, #404]	; (8009a08 <HAL_DMA_IRQHandler+0xa40>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d004      	beq.n	8009880 <HAL_DMA_IRQHandler+0x8b8>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a64      	ldr	r2, [pc, #400]	; (8009a0c <HAL_DMA_IRQHandler+0xa44>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d108      	bne.n	8009892 <HAL_DMA_IRQHandler+0x8ca>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 0201 	bic.w	r2, r2, #1
 800988e:	601a      	str	r2, [r3, #0]
 8009890:	e007      	b.n	80098a2 <HAL_DMA_IRQHandler+0x8da>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f022 0201 	bic.w	r2, r2, #1
 80098a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3301      	adds	r3, #1
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d307      	bcc.n	80098be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	f003 0301 	and.w	r3, r3, #1
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d1f2      	bne.n	80098a2 <HAL_DMA_IRQHandler+0x8da>
 80098bc:	e000      	b.n	80098c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80098be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0301 	and.w	r3, r3, #1
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d004      	beq.n	80098d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2203      	movs	r2, #3
 80098d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80098d6:	e003      	b.n	80098e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2201      	movs	r2, #1
 80098dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 8272 	beq.w	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	4798      	blx	r3
 80098fa:	e26c      	b.n	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a43      	ldr	r2, [pc, #268]	; (8009a10 <HAL_DMA_IRQHandler+0xa48>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d022      	beq.n	800994c <HAL_DMA_IRQHandler+0x984>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a42      	ldr	r2, [pc, #264]	; (8009a14 <HAL_DMA_IRQHandler+0xa4c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d01d      	beq.n	800994c <HAL_DMA_IRQHandler+0x984>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a40      	ldr	r2, [pc, #256]	; (8009a18 <HAL_DMA_IRQHandler+0xa50>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d018      	beq.n	800994c <HAL_DMA_IRQHandler+0x984>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a3f      	ldr	r2, [pc, #252]	; (8009a1c <HAL_DMA_IRQHandler+0xa54>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d013      	beq.n	800994c <HAL_DMA_IRQHandler+0x984>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a3d      	ldr	r2, [pc, #244]	; (8009a20 <HAL_DMA_IRQHandler+0xa58>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d00e      	beq.n	800994c <HAL_DMA_IRQHandler+0x984>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a3c      	ldr	r2, [pc, #240]	; (8009a24 <HAL_DMA_IRQHandler+0xa5c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d009      	beq.n	800994c <HAL_DMA_IRQHandler+0x984>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a3a      	ldr	r2, [pc, #232]	; (8009a28 <HAL_DMA_IRQHandler+0xa60>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d004      	beq.n	800994c <HAL_DMA_IRQHandler+0x984>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a39      	ldr	r2, [pc, #228]	; (8009a2c <HAL_DMA_IRQHandler+0xa64>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d101      	bne.n	8009950 <HAL_DMA_IRQHandler+0x988>
 800994c:	2301      	movs	r3, #1
 800994e:	e000      	b.n	8009952 <HAL_DMA_IRQHandler+0x98a>
 8009950:	2300      	movs	r3, #0
 8009952:	2b00      	cmp	r3, #0
 8009954:	f000 823f 	beq.w	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009964:	f003 031f 	and.w	r3, r3, #31
 8009968:	2204      	movs	r2, #4
 800996a:	409a      	lsls	r2, r3
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	4013      	ands	r3, r2
 8009970:	2b00      	cmp	r3, #0
 8009972:	f000 80cd 	beq.w	8009b10 <HAL_DMA_IRQHandler+0xb48>
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	f003 0304 	and.w	r3, r3, #4
 800997c:	2b00      	cmp	r3, #0
 800997e:	f000 80c7 	beq.w	8009b10 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009986:	f003 031f 	and.w	r3, r3, #31
 800998a:	2204      	movs	r2, #4
 800998c:	409a      	lsls	r2, r3
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009998:	2b00      	cmp	r3, #0
 800999a:	d049      	beq.n	8009a30 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 8210 	beq.w	8009dd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099b8:	e20a      	b.n	8009dd0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f000 8206 	beq.w	8009dd0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099cc:	e200      	b.n	8009dd0 <HAL_DMA_IRQHandler+0xe08>
 80099ce:	bf00      	nop
 80099d0:	40020010 	.word	0x40020010
 80099d4:	40020028 	.word	0x40020028
 80099d8:	40020040 	.word	0x40020040
 80099dc:	40020058 	.word	0x40020058
 80099e0:	40020070 	.word	0x40020070
 80099e4:	40020088 	.word	0x40020088
 80099e8:	400200a0 	.word	0x400200a0
 80099ec:	400200b8 	.word	0x400200b8
 80099f0:	40020410 	.word	0x40020410
 80099f4:	40020428 	.word	0x40020428
 80099f8:	40020440 	.word	0x40020440
 80099fc:	40020458 	.word	0x40020458
 8009a00:	40020470 	.word	0x40020470
 8009a04:	40020488 	.word	0x40020488
 8009a08:	400204a0 	.word	0x400204a0
 8009a0c:	400204b8 	.word	0x400204b8
 8009a10:	58025408 	.word	0x58025408
 8009a14:	5802541c 	.word	0x5802541c
 8009a18:	58025430 	.word	0x58025430
 8009a1c:	58025444 	.word	0x58025444
 8009a20:	58025458 	.word	0x58025458
 8009a24:	5802546c 	.word	0x5802546c
 8009a28:	58025480 	.word	0x58025480
 8009a2c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f003 0320 	and.w	r3, r3, #32
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d160      	bne.n	8009afc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a7f      	ldr	r2, [pc, #508]	; (8009c3c <HAL_DMA_IRQHandler+0xc74>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d04a      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a7d      	ldr	r2, [pc, #500]	; (8009c40 <HAL_DMA_IRQHandler+0xc78>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d045      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a7c      	ldr	r2, [pc, #496]	; (8009c44 <HAL_DMA_IRQHandler+0xc7c>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d040      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a7a      	ldr	r2, [pc, #488]	; (8009c48 <HAL_DMA_IRQHandler+0xc80>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d03b      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a79      	ldr	r2, [pc, #484]	; (8009c4c <HAL_DMA_IRQHandler+0xc84>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d036      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a77      	ldr	r2, [pc, #476]	; (8009c50 <HAL_DMA_IRQHandler+0xc88>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d031      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a76      	ldr	r2, [pc, #472]	; (8009c54 <HAL_DMA_IRQHandler+0xc8c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d02c      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a74      	ldr	r2, [pc, #464]	; (8009c58 <HAL_DMA_IRQHandler+0xc90>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d027      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a73      	ldr	r2, [pc, #460]	; (8009c5c <HAL_DMA_IRQHandler+0xc94>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d022      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a71      	ldr	r2, [pc, #452]	; (8009c60 <HAL_DMA_IRQHandler+0xc98>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d01d      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a70      	ldr	r2, [pc, #448]	; (8009c64 <HAL_DMA_IRQHandler+0xc9c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d018      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a6e      	ldr	r2, [pc, #440]	; (8009c68 <HAL_DMA_IRQHandler+0xca0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d013      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a6d      	ldr	r2, [pc, #436]	; (8009c6c <HAL_DMA_IRQHandler+0xca4>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00e      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a6b      	ldr	r2, [pc, #428]	; (8009c70 <HAL_DMA_IRQHandler+0xca8>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d009      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a6a      	ldr	r2, [pc, #424]	; (8009c74 <HAL_DMA_IRQHandler+0xcac>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d004      	beq.n	8009ada <HAL_DMA_IRQHandler+0xb12>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a68      	ldr	r2, [pc, #416]	; (8009c78 <HAL_DMA_IRQHandler+0xcb0>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d108      	bne.n	8009aec <HAL_DMA_IRQHandler+0xb24>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	681a      	ldr	r2, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f022 0208 	bic.w	r2, r2, #8
 8009ae8:	601a      	str	r2, [r3, #0]
 8009aea:	e007      	b.n	8009afc <HAL_DMA_IRQHandler+0xb34>
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	681a      	ldr	r2, [r3, #0]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	f022 0204 	bic.w	r2, r2, #4
 8009afa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 8165 	beq.w	8009dd0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b0e:	e15f      	b.n	8009dd0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b14:	f003 031f 	and.w	r3, r3, #31
 8009b18:	2202      	movs	r2, #2
 8009b1a:	409a      	lsls	r2, r3
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	4013      	ands	r3, r2
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	f000 80c5 	beq.w	8009cb0 <HAL_DMA_IRQHandler+0xce8>
 8009b26:	693b      	ldr	r3, [r7, #16]
 8009b28:	f003 0302 	and.w	r3, r3, #2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	f000 80bf 	beq.w	8009cb0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b36:	f003 031f 	and.w	r3, r3, #31
 8009b3a:	2202      	movs	r2, #2
 8009b3c:	409a      	lsls	r2, r3
 8009b3e:	69fb      	ldr	r3, [r7, #28]
 8009b40:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d018      	beq.n	8009b7e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d109      	bne.n	8009b6a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	f000 813a 	beq.w	8009dd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b68:	e134      	b.n	8009dd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	f000 8130 	beq.w	8009dd4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b7c:	e12a      	b.n	8009dd4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f003 0320 	and.w	r3, r3, #32
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f040 8089 	bne.w	8009c9c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	4a2b      	ldr	r2, [pc, #172]	; (8009c3c <HAL_DMA_IRQHandler+0xc74>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d04a      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a29      	ldr	r2, [pc, #164]	; (8009c40 <HAL_DMA_IRQHandler+0xc78>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d045      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a28      	ldr	r2, [pc, #160]	; (8009c44 <HAL_DMA_IRQHandler+0xc7c>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d040      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a26      	ldr	r2, [pc, #152]	; (8009c48 <HAL_DMA_IRQHandler+0xc80>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d03b      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a25      	ldr	r2, [pc, #148]	; (8009c4c <HAL_DMA_IRQHandler+0xc84>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d036      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a23      	ldr	r2, [pc, #140]	; (8009c50 <HAL_DMA_IRQHandler+0xc88>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d031      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a22      	ldr	r2, [pc, #136]	; (8009c54 <HAL_DMA_IRQHandler+0xc8c>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d02c      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a20      	ldr	r2, [pc, #128]	; (8009c58 <HAL_DMA_IRQHandler+0xc90>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d027      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a1f      	ldr	r2, [pc, #124]	; (8009c5c <HAL_DMA_IRQHandler+0xc94>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d022      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	4a1d      	ldr	r2, [pc, #116]	; (8009c60 <HAL_DMA_IRQHandler+0xc98>)
 8009bea:	4293      	cmp	r3, r2
 8009bec:	d01d      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a1c      	ldr	r2, [pc, #112]	; (8009c64 <HAL_DMA_IRQHandler+0xc9c>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d018      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a1a      	ldr	r2, [pc, #104]	; (8009c68 <HAL_DMA_IRQHandler+0xca0>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d013      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a19      	ldr	r2, [pc, #100]	; (8009c6c <HAL_DMA_IRQHandler+0xca4>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d00e      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4a17      	ldr	r2, [pc, #92]	; (8009c70 <HAL_DMA_IRQHandler+0xca8>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d009      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	4a16      	ldr	r2, [pc, #88]	; (8009c74 <HAL_DMA_IRQHandler+0xcac>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d004      	beq.n	8009c2a <HAL_DMA_IRQHandler+0xc62>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	4a14      	ldr	r2, [pc, #80]	; (8009c78 <HAL_DMA_IRQHandler+0xcb0>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d128      	bne.n	8009c7c <HAL_DMA_IRQHandler+0xcb4>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	681a      	ldr	r2, [r3, #0]
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	f022 0214 	bic.w	r2, r2, #20
 8009c38:	601a      	str	r2, [r3, #0]
 8009c3a:	e027      	b.n	8009c8c <HAL_DMA_IRQHandler+0xcc4>
 8009c3c:	40020010 	.word	0x40020010
 8009c40:	40020028 	.word	0x40020028
 8009c44:	40020040 	.word	0x40020040
 8009c48:	40020058 	.word	0x40020058
 8009c4c:	40020070 	.word	0x40020070
 8009c50:	40020088 	.word	0x40020088
 8009c54:	400200a0 	.word	0x400200a0
 8009c58:	400200b8 	.word	0x400200b8
 8009c5c:	40020410 	.word	0x40020410
 8009c60:	40020428 	.word	0x40020428
 8009c64:	40020440 	.word	0x40020440
 8009c68:	40020458 	.word	0x40020458
 8009c6c:	40020470 	.word	0x40020470
 8009c70:	40020488 	.word	0x40020488
 8009c74:	400204a0 	.word	0x400204a0
 8009c78:	400204b8 	.word	0x400204b8
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	f022 020a 	bic.w	r2, r2, #10
 8009c8a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2201      	movs	r2, #1
 8009c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f000 8097 	beq.w	8009dd4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cae:	e091      	b.n	8009dd4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cb4:	f003 031f 	and.w	r3, r3, #31
 8009cb8:	2208      	movs	r2, #8
 8009cba:	409a      	lsls	r2, r3
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	4013      	ands	r3, r2
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8088 	beq.w	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f003 0308 	and.w	r3, r3, #8
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	f000 8082 	beq.w	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a41      	ldr	r2, [pc, #260]	; (8009ddc <HAL_DMA_IRQHandler+0xe14>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d04a      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a3f      	ldr	r2, [pc, #252]	; (8009de0 <HAL_DMA_IRQHandler+0xe18>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d045      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a3e      	ldr	r2, [pc, #248]	; (8009de4 <HAL_DMA_IRQHandler+0xe1c>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d040      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a3c      	ldr	r2, [pc, #240]	; (8009de8 <HAL_DMA_IRQHandler+0xe20>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d03b      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a3b      	ldr	r2, [pc, #236]	; (8009dec <HAL_DMA_IRQHandler+0xe24>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d036      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a39      	ldr	r2, [pc, #228]	; (8009df0 <HAL_DMA_IRQHandler+0xe28>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d031      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a38      	ldr	r2, [pc, #224]	; (8009df4 <HAL_DMA_IRQHandler+0xe2c>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d02c      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4a36      	ldr	r2, [pc, #216]	; (8009df8 <HAL_DMA_IRQHandler+0xe30>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d027      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a35      	ldr	r2, [pc, #212]	; (8009dfc <HAL_DMA_IRQHandler+0xe34>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d022      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a33      	ldr	r2, [pc, #204]	; (8009e00 <HAL_DMA_IRQHandler+0xe38>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d01d      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a32      	ldr	r2, [pc, #200]	; (8009e04 <HAL_DMA_IRQHandler+0xe3c>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d018      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a30      	ldr	r2, [pc, #192]	; (8009e08 <HAL_DMA_IRQHandler+0xe40>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d013      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a2f      	ldr	r2, [pc, #188]	; (8009e0c <HAL_DMA_IRQHandler+0xe44>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d00e      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	4a2d      	ldr	r2, [pc, #180]	; (8009e10 <HAL_DMA_IRQHandler+0xe48>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d009      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a2c      	ldr	r2, [pc, #176]	; (8009e14 <HAL_DMA_IRQHandler+0xe4c>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d004      	beq.n	8009d72 <HAL_DMA_IRQHandler+0xdaa>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a2a      	ldr	r2, [pc, #168]	; (8009e18 <HAL_DMA_IRQHandler+0xe50>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d108      	bne.n	8009d84 <HAL_DMA_IRQHandler+0xdbc>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	681a      	ldr	r2, [r3, #0]
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 021c 	bic.w	r2, r2, #28
 8009d80:	601a      	str	r2, [r3, #0]
 8009d82:	e007      	b.n	8009d94 <HAL_DMA_IRQHandler+0xdcc>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f022 020e 	bic.w	r2, r2, #14
 8009d92:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d98:	f003 031f 	and.w	r3, r3, #31
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	409a      	lsls	r2, r3
 8009da0:	69fb      	ldr	r3, [r7, #28]
 8009da2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d009      	beq.n	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	4798      	blx	r3
 8009dca:	e004      	b.n	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009dcc:	bf00      	nop
 8009dce:	e002      	b.n	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009dd0:	bf00      	nop
 8009dd2:	e000      	b.n	8009dd6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009dd4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009dd6:	3728      	adds	r7, #40	; 0x28
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	40020010 	.word	0x40020010
 8009de0:	40020028 	.word	0x40020028
 8009de4:	40020040 	.word	0x40020040
 8009de8:	40020058 	.word	0x40020058
 8009dec:	40020070 	.word	0x40020070
 8009df0:	40020088 	.word	0x40020088
 8009df4:	400200a0 	.word	0x400200a0
 8009df8:	400200b8 	.word	0x400200b8
 8009dfc:	40020410 	.word	0x40020410
 8009e00:	40020428 	.word	0x40020428
 8009e04:	40020440 	.word	0x40020440
 8009e08:	40020458 	.word	0x40020458
 8009e0c:	40020470 	.word	0x40020470
 8009e10:	40020488 	.word	0x40020488
 8009e14:	400204a0 	.word	0x400204a0
 8009e18:	400204b8 	.word	0x400204b8

08009e1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	b085      	sub	sp, #20
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a42      	ldr	r2, [pc, #264]	; (8009f34 <DMA_CalcBaseAndBitshift+0x118>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d04a      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a41      	ldr	r2, [pc, #260]	; (8009f38 <DMA_CalcBaseAndBitshift+0x11c>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d045      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a3f      	ldr	r2, [pc, #252]	; (8009f3c <DMA_CalcBaseAndBitshift+0x120>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d040      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a3e      	ldr	r2, [pc, #248]	; (8009f40 <DMA_CalcBaseAndBitshift+0x124>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d03b      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a3c      	ldr	r2, [pc, #240]	; (8009f44 <DMA_CalcBaseAndBitshift+0x128>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d036      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a3b      	ldr	r2, [pc, #236]	; (8009f48 <DMA_CalcBaseAndBitshift+0x12c>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d031      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a39      	ldr	r2, [pc, #228]	; (8009f4c <DMA_CalcBaseAndBitshift+0x130>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d02c      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a38      	ldr	r2, [pc, #224]	; (8009f50 <DMA_CalcBaseAndBitshift+0x134>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d027      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a36      	ldr	r2, [pc, #216]	; (8009f54 <DMA_CalcBaseAndBitshift+0x138>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d022      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a35      	ldr	r2, [pc, #212]	; (8009f58 <DMA_CalcBaseAndBitshift+0x13c>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d01d      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a33      	ldr	r2, [pc, #204]	; (8009f5c <DMA_CalcBaseAndBitshift+0x140>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d018      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a32      	ldr	r2, [pc, #200]	; (8009f60 <DMA_CalcBaseAndBitshift+0x144>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d013      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a30      	ldr	r2, [pc, #192]	; (8009f64 <DMA_CalcBaseAndBitshift+0x148>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d00e      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a2f      	ldr	r2, [pc, #188]	; (8009f68 <DMA_CalcBaseAndBitshift+0x14c>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d009      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a2d      	ldr	r2, [pc, #180]	; (8009f6c <DMA_CalcBaseAndBitshift+0x150>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d004      	beq.n	8009ec4 <DMA_CalcBaseAndBitshift+0xa8>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a2c      	ldr	r2, [pc, #176]	; (8009f70 <DMA_CalcBaseAndBitshift+0x154>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d101      	bne.n	8009ec8 <DMA_CalcBaseAndBitshift+0xac>
 8009ec4:	2301      	movs	r3, #1
 8009ec6:	e000      	b.n	8009eca <DMA_CalcBaseAndBitshift+0xae>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d024      	beq.n	8009f18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	b2db      	uxtb	r3, r3
 8009ed4:	3b10      	subs	r3, #16
 8009ed6:	4a27      	ldr	r2, [pc, #156]	; (8009f74 <DMA_CalcBaseAndBitshift+0x158>)
 8009ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8009edc:	091b      	lsrs	r3, r3, #4
 8009ede:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f003 0307 	and.w	r3, r3, #7
 8009ee6:	4a24      	ldr	r2, [pc, #144]	; (8009f78 <DMA_CalcBaseAndBitshift+0x15c>)
 8009ee8:	5cd3      	ldrb	r3, [r2, r3]
 8009eea:	461a      	mov	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	2b03      	cmp	r3, #3
 8009ef4:	d908      	bls.n	8009f08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	461a      	mov	r2, r3
 8009efc:	4b1f      	ldr	r3, [pc, #124]	; (8009f7c <DMA_CalcBaseAndBitshift+0x160>)
 8009efe:	4013      	ands	r3, r2
 8009f00:	1d1a      	adds	r2, r3, #4
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	659a      	str	r2, [r3, #88]	; 0x58
 8009f06:	e00d      	b.n	8009f24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	461a      	mov	r2, r3
 8009f0e:	4b1b      	ldr	r3, [pc, #108]	; (8009f7c <DMA_CalcBaseAndBitshift+0x160>)
 8009f10:	4013      	ands	r3, r2
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	6593      	str	r3, [r2, #88]	; 0x58
 8009f16:	e005      	b.n	8009f24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	40020010 	.word	0x40020010
 8009f38:	40020028 	.word	0x40020028
 8009f3c:	40020040 	.word	0x40020040
 8009f40:	40020058 	.word	0x40020058
 8009f44:	40020070 	.word	0x40020070
 8009f48:	40020088 	.word	0x40020088
 8009f4c:	400200a0 	.word	0x400200a0
 8009f50:	400200b8 	.word	0x400200b8
 8009f54:	40020410 	.word	0x40020410
 8009f58:	40020428 	.word	0x40020428
 8009f5c:	40020440 	.word	0x40020440
 8009f60:	40020458 	.word	0x40020458
 8009f64:	40020470 	.word	0x40020470
 8009f68:	40020488 	.word	0x40020488
 8009f6c:	400204a0 	.word	0x400204a0
 8009f70:	400204b8 	.word	0x400204b8
 8009f74:	aaaaaaab 	.word	0xaaaaaaab
 8009f78:	08012adc 	.word	0x08012adc
 8009f7c:	fffffc00 	.word	0xfffffc00

08009f80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b085      	sub	sp, #20
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	699b      	ldr	r3, [r3, #24]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d120      	bne.n	8009fd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d858      	bhi.n	800a04e <DMA_CheckFifoParam+0xce>
 8009f9c:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <DMA_CheckFifoParam+0x24>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	08009fb5 	.word	0x08009fb5
 8009fa8:	08009fc7 	.word	0x08009fc7
 8009fac:	08009fb5 	.word	0x08009fb5
 8009fb0:	0800a04f 	.word	0x0800a04f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d048      	beq.n	800a052 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009fc4:	e045      	b.n	800a052 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009fce:	d142      	bne.n	800a056 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009fd4:	e03f      	b.n	800a056 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	699b      	ldr	r3, [r3, #24]
 8009fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fde:	d123      	bne.n	800a028 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d838      	bhi.n	800a05a <DMA_CheckFifoParam+0xda>
 8009fe8:	a201      	add	r2, pc, #4	; (adr r2, 8009ff0 <DMA_CheckFifoParam+0x70>)
 8009fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fee:	bf00      	nop
 8009ff0:	0800a001 	.word	0x0800a001
 8009ff4:	0800a007 	.word	0x0800a007
 8009ff8:	0800a001 	.word	0x0800a001
 8009ffc:	0800a019 	.word	0x0800a019
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
        break;
 800a004:	e030      	b.n	800a068 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d025      	beq.n	800a05e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a016:	e022      	b.n	800a05e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a020:	d11f      	bne.n	800a062 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a026:	e01c      	b.n	800a062 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a02c:	2b02      	cmp	r3, #2
 800a02e:	d902      	bls.n	800a036 <DMA_CheckFifoParam+0xb6>
 800a030:	2b03      	cmp	r3, #3
 800a032:	d003      	beq.n	800a03c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a034:	e018      	b.n	800a068 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	73fb      	strb	r3, [r7, #15]
        break;
 800a03a:	e015      	b.n	800a068 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00e      	beq.n	800a066 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	73fb      	strb	r3, [r7, #15]
    break;
 800a04c:	e00b      	b.n	800a066 <DMA_CheckFifoParam+0xe6>
        break;
 800a04e:	bf00      	nop
 800a050:	e00a      	b.n	800a068 <DMA_CheckFifoParam+0xe8>
        break;
 800a052:	bf00      	nop
 800a054:	e008      	b.n	800a068 <DMA_CheckFifoParam+0xe8>
        break;
 800a056:	bf00      	nop
 800a058:	e006      	b.n	800a068 <DMA_CheckFifoParam+0xe8>
        break;
 800a05a:	bf00      	nop
 800a05c:	e004      	b.n	800a068 <DMA_CheckFifoParam+0xe8>
        break;
 800a05e:	bf00      	nop
 800a060:	e002      	b.n	800a068 <DMA_CheckFifoParam+0xe8>
        break;
 800a062:	bf00      	nop
 800a064:	e000      	b.n	800a068 <DMA_CheckFifoParam+0xe8>
    break;
 800a066:	bf00      	nop
    }
  }

  return status;
 800a068:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop

0800a078 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a078:	b480      	push	{r7}
 800a07a:	b085      	sub	sp, #20
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	4a38      	ldr	r2, [pc, #224]	; (800a16c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a08c:	4293      	cmp	r3, r2
 800a08e:	d022      	beq.n	800a0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a36      	ldr	r2, [pc, #216]	; (800a170 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d01d      	beq.n	800a0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a35      	ldr	r2, [pc, #212]	; (800a174 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	d018      	beq.n	800a0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a33      	ldr	r2, [pc, #204]	; (800a178 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d013      	beq.n	800a0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a32      	ldr	r2, [pc, #200]	; (800a17c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d00e      	beq.n	800a0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a30      	ldr	r2, [pc, #192]	; (800a180 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d009      	beq.n	800a0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a2f      	ldr	r2, [pc, #188]	; (800a184 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d004      	beq.n	800a0d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a2d      	ldr	r2, [pc, #180]	; (800a188 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d101      	bne.n	800a0da <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	e000      	b.n	800a0dc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a0da:	2300      	movs	r3, #0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d01a      	beq.n	800a116 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	b2db      	uxtb	r3, r3
 800a0e6:	3b08      	subs	r3, #8
 800a0e8:	4a28      	ldr	r2, [pc, #160]	; (800a18c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a0ee:	091b      	lsrs	r3, r3, #4
 800a0f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a0f2:	68fa      	ldr	r2, [r7, #12]
 800a0f4:	4b26      	ldr	r3, [pc, #152]	; (800a190 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a0f6:	4413      	add	r3, r2
 800a0f8:	009b      	lsls	r3, r3, #2
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a24      	ldr	r2, [pc, #144]	; (800a194 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a104:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f003 031f 	and.w	r3, r3, #31
 800a10c:	2201      	movs	r2, #1
 800a10e:	409a      	lsls	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a114:	e024      	b.n	800a160 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	3b10      	subs	r3, #16
 800a11e:	4a1e      	ldr	r2, [pc, #120]	; (800a198 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a120:	fba2 2303 	umull	r2, r3, r2, r3
 800a124:	091b      	lsrs	r3, r3, #4
 800a126:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4a1c      	ldr	r2, [pc, #112]	; (800a19c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d806      	bhi.n	800a13e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4a1b      	ldr	r2, [pc, #108]	; (800a1a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d902      	bls.n	800a13e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	3308      	adds	r3, #8
 800a13c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	4b18      	ldr	r3, [pc, #96]	; (800a1a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a142:	4413      	add	r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	461a      	mov	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a16      	ldr	r2, [pc, #88]	; (800a1a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a150:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f003 031f 	and.w	r3, r3, #31
 800a158:	2201      	movs	r2, #1
 800a15a:	409a      	lsls	r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800a160:	bf00      	nop
 800a162:	3714      	adds	r7, #20
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	58025408 	.word	0x58025408
 800a170:	5802541c 	.word	0x5802541c
 800a174:	58025430 	.word	0x58025430
 800a178:	58025444 	.word	0x58025444
 800a17c:	58025458 	.word	0x58025458
 800a180:	5802546c 	.word	0x5802546c
 800a184:	58025480 	.word	0x58025480
 800a188:	58025494 	.word	0x58025494
 800a18c:	cccccccd 	.word	0xcccccccd
 800a190:	16009600 	.word	0x16009600
 800a194:	58025880 	.word	0x58025880
 800a198:	aaaaaaab 	.word	0xaaaaaaab
 800a19c:	400204b8 	.word	0x400204b8
 800a1a0:	4002040f 	.word	0x4002040f
 800a1a4:	10008200 	.word	0x10008200
 800a1a8:	40020880 	.word	0x40020880

0800a1ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	685b      	ldr	r3, [r3, #4]
 800a1b8:	b2db      	uxtb	r3, r3
 800a1ba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d04a      	beq.n	800a258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d847      	bhi.n	800a258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a25      	ldr	r2, [pc, #148]	; (800a264 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d022      	beq.n	800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a24      	ldr	r2, [pc, #144]	; (800a268 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d01d      	beq.n	800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a22      	ldr	r2, [pc, #136]	; (800a26c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d018      	beq.n	800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a21      	ldr	r2, [pc, #132]	; (800a270 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d013      	beq.n	800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a1f      	ldr	r2, [pc, #124]	; (800a274 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00e      	beq.n	800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a1e      	ldr	r2, [pc, #120]	; (800a278 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d009      	beq.n	800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a1c      	ldr	r2, [pc, #112]	; (800a27c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d004      	beq.n	800a218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a1b      	ldr	r2, [pc, #108]	; (800a280 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d101      	bne.n	800a21c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a218:	2301      	movs	r3, #1
 800a21a:	e000      	b.n	800a21e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a21c:	2300      	movs	r3, #0
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d00a      	beq.n	800a238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a222:	68fa      	ldr	r2, [r7, #12]
 800a224:	4b17      	ldr	r3, [pc, #92]	; (800a284 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a226:	4413      	add	r3, r2
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	461a      	mov	r2, r3
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a15      	ldr	r2, [pc, #84]	; (800a288 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a234:	671a      	str	r2, [r3, #112]	; 0x70
 800a236:	e009      	b.n	800a24c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	4b14      	ldr	r3, [pc, #80]	; (800a28c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a23c:	4413      	add	r3, r2
 800a23e:	009b      	lsls	r3, r3, #2
 800a240:	461a      	mov	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a11      	ldr	r2, [pc, #68]	; (800a290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a24a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	3b01      	subs	r3, #1
 800a250:	2201      	movs	r2, #1
 800a252:	409a      	lsls	r2, r3
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800a258:	bf00      	nop
 800a25a:	3714      	adds	r7, #20
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr
 800a264:	58025408 	.word	0x58025408
 800a268:	5802541c 	.word	0x5802541c
 800a26c:	58025430 	.word	0x58025430
 800a270:	58025444 	.word	0x58025444
 800a274:	58025458 	.word	0x58025458
 800a278:	5802546c 	.word	0x5802546c
 800a27c:	58025480 	.word	0x58025480
 800a280:	58025494 	.word	0x58025494
 800a284:	1600963f 	.word	0x1600963f
 800a288:	58025940 	.word	0x58025940
 800a28c:	1000823f 	.word	0x1000823f
 800a290:	40020940 	.word	0x40020940

0800a294 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d101      	bne.n	800a2a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a2a2:	2301      	movs	r3, #1
 800a2a4:	e0cf      	b.n	800a446 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d106      	bne.n	800a2be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2223      	movs	r2, #35	; 0x23
 800a2b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a2b8:	6878      	ldr	r0, [r7, #4]
 800a2ba:	f7fd f89f 	bl	80073fc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a2be:	4b64      	ldr	r3, [pc, #400]	; (800a450 <HAL_ETH_Init+0x1bc>)
 800a2c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2c4:	4a62      	ldr	r2, [pc, #392]	; (800a450 <HAL_ETH_Init+0x1bc>)
 800a2c6:	f043 0302 	orr.w	r3, r3, #2
 800a2ca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a2ce:	4b60      	ldr	r3, [pc, #384]	; (800a450 <HAL_ETH_Init+0x1bc>)
 800a2d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a2d4:	f003 0302 	and.w	r3, r3, #2
 800a2d8:	60bb      	str	r3, [r7, #8]
 800a2da:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	7a1b      	ldrb	r3, [r3, #8]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d103      	bne.n	800a2ec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	f7fd fc8b 	bl	8007c00 <HAL_SYSCFG_ETHInterfaceSelect>
 800a2ea:	e003      	b.n	800a2f4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800a2ec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a2f0:	f7fd fc86 	bl	8007c00 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800a2f4:	4b57      	ldr	r3, [pc, #348]	; (800a454 <HAL_ETH_Init+0x1c0>)
 800a2f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	6812      	ldr	r2, [r2, #0]
 800a306:	f043 0301 	orr.w	r3, r3, #1
 800a30a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a30e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a310:	f7fd fc3a 	bl	8007b88 <HAL_GetTick>
 800a314:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a316:	e011      	b.n	800a33c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a318:	f7fd fc36 	bl	8007b88 <HAL_GetTick>
 800a31c:	4602      	mov	r2, r0
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a326:	d909      	bls.n	800a33c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2204      	movs	r2, #4
 800a32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	22e0      	movs	r2, #224	; 0xe0
 800a334:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800a338:	2301      	movs	r3, #1
 800a33a:	e084      	b.n	800a446 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e4      	bne.n	800a318 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 f886 	bl	800a460 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800a354:	f001 fefc 	bl	800c150 <HAL_RCC_GetHCLKFreq>
 800a358:	4603      	mov	r3, r0
 800a35a:	4a3f      	ldr	r2, [pc, #252]	; (800a458 <HAL_ETH_Init+0x1c4>)
 800a35c:	fba2 2303 	umull	r2, r3, r2, r3
 800a360:	0c9a      	lsrs	r2, r3, #18
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	3a01      	subs	r2, #1
 800a368:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 fa71 	bl	800a854 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a37a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a37e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	6812      	ldr	r2, [r2, #0]
 800a386:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a38a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a38e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	f003 0303 	and.w	r3, r3, #3
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d009      	beq.n	800a3b2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	22e0      	movs	r2, #224	; 0xe0
 800a3aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e049      	b.n	800a446 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3ba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a3be:	4b27      	ldr	r3, [pc, #156]	; (800a45c <HAL_ETH_Init+0x1c8>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	6952      	ldr	r2, [r2, #20]
 800a3c6:	0051      	lsls	r1, r2, #1
 800a3c8:	687a      	ldr	r2, [r7, #4]
 800a3ca:	6812      	ldr	r2, [r2, #0]
 800a3cc:	430b      	orrs	r3, r1
 800a3ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3d2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f000 fad9 	bl	800a98e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f000 fb1f 	bl	800aa20 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	3305      	adds	r3, #5
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	021a      	lsls	r2, r3, #8
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	3304      	adds	r3, #4
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	430a      	orrs	r2, r1
 800a3fc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	3303      	adds	r3, #3
 800a406:	781b      	ldrb	r3, [r3, #0]
 800a408:	061a      	lsls	r2, r3, #24
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685b      	ldr	r3, [r3, #4]
 800a40e:	3302      	adds	r3, #2
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	041b      	lsls	r3, r3, #16
 800a414:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	3301      	adds	r3, #1
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a420:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685b      	ldr	r3, [r3, #4]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a42e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a430:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2210      	movs	r2, #16
 800a440:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a444:	2300      	movs	r3, #0
}
 800a446:	4618      	mov	r0, r3
 800a448:	3710      	adds	r7, #16
 800a44a:	46bd      	mov	sp, r7
 800a44c:	bd80      	pop	{r7, pc}
 800a44e:	bf00      	nop
 800a450:	58024400 	.word	0x58024400
 800a454:	58000400 	.word	0x58000400
 800a458:	431bde83 	.word	0x431bde83
 800a45c:	ffff8001 	.word	0xffff8001

0800a460 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b084      	sub	sp, #16
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a470:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a478:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a47a:	f001 fe69 	bl	800c150 <HAL_RCC_GetHCLKFreq>
 800a47e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4a1e      	ldr	r2, [pc, #120]	; (800a4fc <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d908      	bls.n	800a49a <HAL_ETH_SetMDIOClockRange+0x3a>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	4a1d      	ldr	r2, [pc, #116]	; (800a500 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d804      	bhi.n	800a49a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	e027      	b.n	800a4ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	4a18      	ldr	r2, [pc, #96]	; (800a500 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a49e:	4293      	cmp	r3, r2
 800a4a0:	d908      	bls.n	800a4b4 <HAL_ETH_SetMDIOClockRange+0x54>
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	4a17      	ldr	r2, [pc, #92]	; (800a504 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a4a6:	4293      	cmp	r3, r2
 800a4a8:	d204      	bcs.n	800a4b4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a4b0:	60fb      	str	r3, [r7, #12]
 800a4b2:	e01a      	b.n	800a4ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	4a13      	ldr	r2, [pc, #76]	; (800a504 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d303      	bcc.n	800a4c4 <HAL_ETH_SetMDIOClockRange+0x64>
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	4a12      	ldr	r2, [pc, #72]	; (800a508 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d911      	bls.n	800a4e8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4a10      	ldr	r2, [pc, #64]	; (800a508 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d908      	bls.n	800a4de <HAL_ETH_SetMDIOClockRange+0x7e>
 800a4cc:	68bb      	ldr	r3, [r7, #8]
 800a4ce:	4a0f      	ldr	r2, [pc, #60]	; (800a50c <HAL_ETH_SetMDIOClockRange+0xac>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d804      	bhi.n	800a4de <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e005      	b.n	800a4ea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4e4:	60fb      	str	r3, [r7, #12]
 800a4e6:	e000      	b.n	800a4ea <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a4e8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a4f4:	bf00      	nop
 800a4f6:	3710      	adds	r7, #16
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	01312cff 	.word	0x01312cff
 800a500:	02160ebf 	.word	0x02160ebf
 800a504:	03938700 	.word	0x03938700
 800a508:	05f5e0ff 	.word	0x05f5e0ff
 800a50c:	08f0d17f 	.word	0x08f0d17f

0800a510 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a510:	b480      	push	{r7}
 800a512:	b085      	sub	sp, #20
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
 800a518:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a522:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	791b      	ldrb	r3, [r3, #4]
 800a528:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a52a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	7b1b      	ldrb	r3, [r3, #12]
 800a530:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a532:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	7b5b      	ldrb	r3, [r3, #13]
 800a538:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a53a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	7b9b      	ldrb	r3, [r3, #14]
 800a540:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a542:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	7bdb      	ldrb	r3, [r3, #15]
 800a548:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a54a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	7c12      	ldrb	r2, [r2, #16]
 800a550:	2a00      	cmp	r2, #0
 800a552:	d102      	bne.n	800a55a <ETH_SetMACConfig+0x4a>
 800a554:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a558:	e000      	b.n	800a55c <ETH_SetMACConfig+0x4c>
 800a55a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a55c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	7c52      	ldrb	r2, [r2, #17]
 800a562:	2a00      	cmp	r2, #0
 800a564:	d102      	bne.n	800a56c <ETH_SetMACConfig+0x5c>
 800a566:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a56a:	e000      	b.n	800a56e <ETH_SetMACConfig+0x5e>
 800a56c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a56e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	7c9b      	ldrb	r3, [r3, #18]
 800a574:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a576:	431a      	orrs	r2, r3
               macconf->Speed |
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a57c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	7f1b      	ldrb	r3, [r3, #28]
 800a588:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a58a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	7f5b      	ldrb	r3, [r3, #29]
 800a590:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a592:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a594:	683a      	ldr	r2, [r7, #0]
 800a596:	7f92      	ldrb	r2, [r2, #30]
 800a598:	2a00      	cmp	r2, #0
 800a59a:	d102      	bne.n	800a5a2 <ETH_SetMACConfig+0x92>
 800a59c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a5a0:	e000      	b.n	800a5a4 <ETH_SetMACConfig+0x94>
 800a5a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a5a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	7fdb      	ldrb	r3, [r3, #31]
 800a5aa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a5ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a5ae:	683a      	ldr	r2, [r7, #0]
 800a5b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a5b4:	2a00      	cmp	r2, #0
 800a5b6:	d102      	bne.n	800a5be <ETH_SetMACConfig+0xae>
 800a5b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5bc:	e000      	b.n	800a5c0 <ETH_SetMACConfig+0xb0>
 800a5be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a5c0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a5c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a5ce:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a5d0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	4b56      	ldr	r3, [pc, #344]	; (800a73c <ETH_SetMACConfig+0x22c>)
 800a5e2:	4013      	ands	r3, r2
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	6812      	ldr	r2, [r2, #0]
 800a5e8:	68f9      	ldr	r1, [r7, #12]
 800a5ea:	430b      	orrs	r3, r1
 800a5ec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a5fa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a5fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a604:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a60e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a610:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a612:	683a      	ldr	r2, [r7, #0]
 800a614:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a618:	2a00      	cmp	r2, #0
 800a61a:	d102      	bne.n	800a622 <ETH_SetMACConfig+0x112>
 800a61c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a620:	e000      	b.n	800a624 <ETH_SetMACConfig+0x114>
 800a622:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a624:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a62a:	4313      	orrs	r3, r2
 800a62c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	685a      	ldr	r2, [r3, #4]
 800a634:	4b42      	ldr	r3, [pc, #264]	; (800a740 <ETH_SetMACConfig+0x230>)
 800a636:	4013      	ands	r3, r2
 800a638:	687a      	ldr	r2, [r7, #4]
 800a63a:	6812      	ldr	r2, [r2, #0]
 800a63c:	68f9      	ldr	r1, [r7, #12]
 800a63e:	430b      	orrs	r3, r1
 800a640:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a648:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a64e:	4313      	orrs	r3, r2
 800a650:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	4b3a      	ldr	r3, [pc, #232]	; (800a744 <ETH_SetMACConfig+0x234>)
 800a65a:	4013      	ands	r3, r2
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	6812      	ldr	r2, [r2, #0]
 800a660:	68f9      	ldr	r1, [r7, #12]
 800a662:	430b      	orrs	r3, r1
 800a664:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a66c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a672:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a674:	683a      	ldr	r2, [r7, #0]
 800a676:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800a67a:	2a00      	cmp	r2, #0
 800a67c:	d101      	bne.n	800a682 <ETH_SetMACConfig+0x172>
 800a67e:	2280      	movs	r2, #128	; 0x80
 800a680:	e000      	b.n	800a684 <ETH_SetMACConfig+0x174>
 800a682:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a684:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a68a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a696:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800a69a:	4013      	ands	r3, r2
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	6812      	ldr	r2, [r2, #0]
 800a6a0:	68f9      	ldr	r1, [r7, #12]
 800a6a2:	430b      	orrs	r3, r1
 800a6a4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a6ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a6b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a6b6:	4313      	orrs	r3, r2
 800a6b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6c2:	f023 0103 	bic.w	r1, r3, #3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	68fa      	ldr	r2, [r7, #12]
 800a6cc:	430a      	orrs	r2, r1
 800a6ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800a6da:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a6f0:	683a      	ldr	r2, [r7, #0]
 800a6f2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a6f6:	2a00      	cmp	r2, #0
 800a6f8:	d101      	bne.n	800a6fe <ETH_SetMACConfig+0x1ee>
 800a6fa:	2240      	movs	r2, #64	; 0x40
 800a6fc:	e000      	b.n	800a700 <ETH_SetMACConfig+0x1f0>
 800a6fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a700:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a702:	683b      	ldr	r3, [r7, #0]
 800a704:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a708:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a70a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a712:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a714:	4313      	orrs	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800a720:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	68fa      	ldr	r2, [r7, #12]
 800a72a:	430a      	orrs	r2, r1
 800a72c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800a730:	bf00      	nop
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr
 800a73c:	00048083 	.word	0x00048083
 800a740:	c0f88000 	.word	0xc0f88000
 800a744:	fffffef0 	.word	0xfffffef0

0800a748 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	4b38      	ldr	r3, [pc, #224]	; (800a840 <ETH_SetDMAConfig+0xf8>)
 800a75e:	4013      	ands	r3, r2
 800a760:	683a      	ldr	r2, [r7, #0]
 800a762:	6811      	ldr	r1, [r2, #0]
 800a764:	687a      	ldr	r2, [r7, #4]
 800a766:	6812      	ldr	r2, [r2, #0]
 800a768:	430b      	orrs	r3, r1
 800a76a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a76e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	791b      	ldrb	r3, [r3, #4]
 800a774:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a77a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	7b1b      	ldrb	r3, [r3, #12]
 800a780:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a782:	4313      	orrs	r3, r2
 800a784:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	4b2c      	ldr	r3, [pc, #176]	; (800a844 <ETH_SetDMAConfig+0xfc>)
 800a792:	4013      	ands	r3, r2
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	68f9      	ldr	r1, [r7, #12]
 800a79a:	430b      	orrs	r3, r1
 800a79c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7a0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	7b5b      	ldrb	r3, [r3, #13]
 800a7a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a7bc:	4b22      	ldr	r3, [pc, #136]	; (800a848 <ETH_SetDMAConfig+0x100>)
 800a7be:	4013      	ands	r3, r2
 800a7c0:	687a      	ldr	r2, [r7, #4]
 800a7c2:	6812      	ldr	r2, [r2, #0]
 800a7c4:	68f9      	ldr	r1, [r7, #12]
 800a7c6:	430b      	orrs	r3, r1
 800a7c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a7cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	7d1b      	ldrb	r3, [r3, #20]
 800a7d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a7da:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	7f5b      	ldrb	r3, [r3, #29]
 800a7e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a7ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a7f2:	4b16      	ldr	r3, [pc, #88]	; (800a84c <ETH_SetDMAConfig+0x104>)
 800a7f4:	4013      	ands	r3, r2
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	6812      	ldr	r2, [r2, #0]
 800a7fa:	68f9      	ldr	r1, [r7, #12]
 800a7fc:	430b      	orrs	r3, r1
 800a7fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a802:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	7f1b      	ldrb	r3, [r3, #28]
 800a80a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a810:	4313      	orrs	r3, r2
 800a812:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a81c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a820:	4b0b      	ldr	r3, [pc, #44]	; (800a850 <ETH_SetDMAConfig+0x108>)
 800a822:	4013      	ands	r3, r2
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	6812      	ldr	r2, [r2, #0]
 800a828:	68f9      	ldr	r1, [r7, #12]
 800a82a:	430b      	orrs	r3, r1
 800a82c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a830:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a834:	bf00      	nop
 800a836:	3714      	adds	r7, #20
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	ffff87fd 	.word	0xffff87fd
 800a844:	ffff2ffe 	.word	0xffff2ffe
 800a848:	fffec000 	.word	0xfffec000
 800a84c:	ffc0efef 	.word	0xffc0efef
 800a850:	7fc0ffff 	.word	0x7fc0ffff

0800a854 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b0a4      	sub	sp, #144	; 0x90
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a85c:	2301      	movs	r3, #1
 800a85e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a862:	2300      	movs	r3, #0
 800a864:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a866:	2300      	movs	r3, #0
 800a868:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a86c:	2300      	movs	r3, #0
 800a86e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a872:	2301      	movs	r3, #1
 800a874:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a878:	2301      	movs	r3, #1
 800a87a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a87e:	2301      	movs	r3, #1
 800a880:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a884:	2300      	movs	r3, #0
 800a886:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a88a:	2301      	movs	r3, #1
 800a88c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a894:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a896:	2300      	movs	r3, #0
 800a898:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a89c:	2300      	movs	r3, #0
 800a89e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a8ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800a8b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a8b8:	2300      	movs	r3, #0
 800a8ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a8ec:	2320      	movs	r3, #32
 800a8ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a8fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a904:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a908:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a90a:	2300      	movs	r3, #0
 800a90c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a910:	2302      	movs	r3, #2
 800a912:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a916:	2300      	movs	r3, #0
 800a918:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a91c:	2300      	movs	r3, #0
 800a91e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a922:	2300      	movs	r3, #0
 800a924:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a928:	2301      	movs	r3, #1
 800a92a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a92e:	2300      	movs	r3, #0
 800a930:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a932:	2301      	movs	r3, #1
 800a934:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a938:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a93c:	4619      	mov	r1, r3
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7ff fde6 	bl	800a510 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a944:	2301      	movs	r3, #1
 800a946:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a948:	2301      	movs	r3, #1
 800a94a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a94c:	2300      	movs	r3, #0
 800a94e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a950:	2300      	movs	r3, #0
 800a952:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a956:	2300      	movs	r3, #0
 800a958:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a95a:	2300      	movs	r3, #0
 800a95c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a95e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a962:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a964:	2300      	movs	r3, #0
 800a966:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a968:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a96c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a96e:	2300      	movs	r3, #0
 800a970:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a974:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a978:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a97a:	f107 0308 	add.w	r3, r7, #8
 800a97e:	4619      	mov	r1, r3
 800a980:	6878      	ldr	r0, [r7, #4]
 800a982:	f7ff fee1 	bl	800a748 <ETH_SetDMAConfig>
}
 800a986:	bf00      	nop
 800a988:	3790      	adds	r7, #144	; 0x90
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a98e:	b480      	push	{r7}
 800a990:	b085      	sub	sp, #20
 800a992:	af00      	add	r7, sp, #0
 800a994:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a996:	2300      	movs	r3, #0
 800a998:	60fb      	str	r3, [r7, #12]
 800a99a:	e01d      	b.n	800a9d8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68d9      	ldr	r1, [r3, #12]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	005b      	lsls	r3, r3, #1
 800a9a6:	4413      	add	r3, r2
 800a9a8:	00db      	lsls	r3, r3, #3
 800a9aa:	440b      	add	r3, r1
 800a9ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a9c6:	68b9      	ldr	r1, [r7, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	3206      	adds	r2, #6
 800a9ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	60fb      	str	r3, [r7, #12]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2b03      	cmp	r3, #3
 800a9dc:	d9de      	bls.n	800a99c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	2303      	movs	r3, #3
 800a9f0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	68da      	ldr	r2, [r3, #12]
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa00:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	68da      	ldr	r2, [r3, #12]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa10:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800aa14:	bf00      	nop
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	e023      	b.n	800aa76 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6919      	ldr	r1, [r3, #16]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4613      	mov	r3, r2
 800aa36:	005b      	lsls	r3, r3, #1
 800aa38:	4413      	add	r3, r2
 800aa3a:	00db      	lsls	r3, r3, #3
 800aa3c:	440b      	add	r3, r1
 800aa3e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800aa4c:	68bb      	ldr	r3, [r7, #8]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	2200      	movs	r2, #0
 800aa56:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	2200      	movs	r2, #0
 800aa62:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800aa64:	68b9      	ldr	r1, [r7, #8]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	3212      	adds	r2, #18
 800aa6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3301      	adds	r3, #1
 800aa74:	60fb      	str	r3, [r7, #12]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d9d8      	bls.n	800aa2e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2200      	movs	r2, #0
 800aa92:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	2303      	movs	r3, #3
 800aaa6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	691a      	ldr	r2, [r3, #16]
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aab6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aaca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800aace:	bf00      	nop
 800aad0:	3714      	adds	r7, #20
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
	...

0800aadc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aadc:	b480      	push	{r7}
 800aade:	b089      	sub	sp, #36	; 0x24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800aae6:	2300      	movs	r3, #0
 800aae8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800aaea:	4b89      	ldr	r3, [pc, #548]	; (800ad10 <HAL_GPIO_Init+0x234>)
 800aaec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aaee:	e194      	b.n	800ae1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	2101      	movs	r1, #1
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	fa01 f303 	lsl.w	r3, r1, r3
 800aafc:	4013      	ands	r3, r2
 800aafe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	f000 8186 	beq.w	800ae14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	f003 0303 	and.w	r3, r3, #3
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d005      	beq.n	800ab20 <HAL_GPIO_Init+0x44>
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	f003 0303 	and.w	r3, r3, #3
 800ab1c:	2b02      	cmp	r3, #2
 800ab1e:	d130      	bne.n	800ab82 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ab26:	69fb      	ldr	r3, [r7, #28]
 800ab28:	005b      	lsls	r3, r3, #1
 800ab2a:	2203      	movs	r2, #3
 800ab2c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab30:	43db      	mvns	r3, r3
 800ab32:	69ba      	ldr	r2, [r7, #24]
 800ab34:	4013      	ands	r3, r2
 800ab36:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	68da      	ldr	r2, [r3, #12]
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	005b      	lsls	r3, r3, #1
 800ab40:	fa02 f303 	lsl.w	r3, r2, r3
 800ab44:	69ba      	ldr	r2, [r7, #24]
 800ab46:	4313      	orrs	r3, r2
 800ab48:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69ba      	ldr	r2, [r7, #24]
 800ab4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ab56:	2201      	movs	r2, #1
 800ab58:	69fb      	ldr	r3, [r7, #28]
 800ab5a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5e:	43db      	mvns	r3, r3
 800ab60:	69ba      	ldr	r2, [r7, #24]
 800ab62:	4013      	ands	r3, r2
 800ab64:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	091b      	lsrs	r3, r3, #4
 800ab6c:	f003 0201 	and.w	r2, r3, #1
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	fa02 f303 	lsl.w	r3, r2, r3
 800ab76:	69ba      	ldr	r2, [r7, #24]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	f003 0303 	and.w	r3, r3, #3
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d017      	beq.n	800abbe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	005b      	lsls	r3, r3, #1
 800ab98:	2203      	movs	r2, #3
 800ab9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ab9e:	43db      	mvns	r3, r3
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	4013      	ands	r3, r2
 800aba4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	689a      	ldr	r2, [r3, #8]
 800abaa:	69fb      	ldr	r3, [r7, #28]
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	fa02 f303 	lsl.w	r3, r2, r3
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	69ba      	ldr	r2, [r7, #24]
 800abbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	f003 0303 	and.w	r3, r3, #3
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	d123      	bne.n	800ac12 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	08da      	lsrs	r2, r3, #3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3208      	adds	r2, #8
 800abd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800abd8:	69fb      	ldr	r3, [r7, #28]
 800abda:	f003 0307 	and.w	r3, r3, #7
 800abde:	009b      	lsls	r3, r3, #2
 800abe0:	220f      	movs	r2, #15
 800abe2:	fa02 f303 	lsl.w	r3, r2, r3
 800abe6:	43db      	mvns	r3, r3
 800abe8:	69ba      	ldr	r2, [r7, #24]
 800abea:	4013      	ands	r3, r2
 800abec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	691a      	ldr	r2, [r3, #16]
 800abf2:	69fb      	ldr	r3, [r7, #28]
 800abf4:	f003 0307 	and.w	r3, r3, #7
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	fa02 f303 	lsl.w	r3, r2, r3
 800abfe:	69ba      	ldr	r2, [r7, #24]
 800ac00:	4313      	orrs	r3, r2
 800ac02:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	08da      	lsrs	r2, r3, #3
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	3208      	adds	r2, #8
 800ac0c:	69b9      	ldr	r1, [r7, #24]
 800ac0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	2203      	movs	r2, #3
 800ac1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac22:	43db      	mvns	r3, r3
 800ac24:	69ba      	ldr	r2, [r7, #24]
 800ac26:	4013      	ands	r3, r2
 800ac28:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	f003 0203 	and.w	r2, r3, #3
 800ac32:	69fb      	ldr	r3, [r7, #28]
 800ac34:	005b      	lsls	r3, r3, #1
 800ac36:	fa02 f303 	lsl.w	r3, r2, r3
 800ac3a:	69ba      	ldr	r2, [r7, #24]
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	69ba      	ldr	r2, [r7, #24]
 800ac44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 80e0 	beq.w	800ae14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac54:	4b2f      	ldr	r3, [pc, #188]	; (800ad14 <HAL_GPIO_Init+0x238>)
 800ac56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac5a:	4a2e      	ldr	r2, [pc, #184]	; (800ad14 <HAL_GPIO_Init+0x238>)
 800ac5c:	f043 0302 	orr.w	r3, r3, #2
 800ac60:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ac64:	4b2b      	ldr	r3, [pc, #172]	; (800ad14 <HAL_GPIO_Init+0x238>)
 800ac66:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	60fb      	str	r3, [r7, #12]
 800ac70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ac72:	4a29      	ldr	r2, [pc, #164]	; (800ad18 <HAL_GPIO_Init+0x23c>)
 800ac74:	69fb      	ldr	r3, [r7, #28]
 800ac76:	089b      	lsrs	r3, r3, #2
 800ac78:	3302      	adds	r3, #2
 800ac7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ac80:	69fb      	ldr	r3, [r7, #28]
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	220f      	movs	r2, #15
 800ac8a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac8e:	43db      	mvns	r3, r3
 800ac90:	69ba      	ldr	r2, [r7, #24]
 800ac92:	4013      	ands	r3, r2
 800ac94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	4a20      	ldr	r2, [pc, #128]	; (800ad1c <HAL_GPIO_Init+0x240>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d052      	beq.n	800ad44 <HAL_GPIO_Init+0x268>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	4a1f      	ldr	r2, [pc, #124]	; (800ad20 <HAL_GPIO_Init+0x244>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	d031      	beq.n	800ad0a <HAL_GPIO_Init+0x22e>
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	4a1e      	ldr	r2, [pc, #120]	; (800ad24 <HAL_GPIO_Init+0x248>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d02b      	beq.n	800ad06 <HAL_GPIO_Init+0x22a>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4a1d      	ldr	r2, [pc, #116]	; (800ad28 <HAL_GPIO_Init+0x24c>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	d025      	beq.n	800ad02 <HAL_GPIO_Init+0x226>
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	4a1c      	ldr	r2, [pc, #112]	; (800ad2c <HAL_GPIO_Init+0x250>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	d01f      	beq.n	800acfe <HAL_GPIO_Init+0x222>
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4a1b      	ldr	r2, [pc, #108]	; (800ad30 <HAL_GPIO_Init+0x254>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d019      	beq.n	800acfa <HAL_GPIO_Init+0x21e>
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	4a1a      	ldr	r2, [pc, #104]	; (800ad34 <HAL_GPIO_Init+0x258>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d013      	beq.n	800acf6 <HAL_GPIO_Init+0x21a>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	4a19      	ldr	r2, [pc, #100]	; (800ad38 <HAL_GPIO_Init+0x25c>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d00d      	beq.n	800acf2 <HAL_GPIO_Init+0x216>
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4a18      	ldr	r2, [pc, #96]	; (800ad3c <HAL_GPIO_Init+0x260>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	d007      	beq.n	800acee <HAL_GPIO_Init+0x212>
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	4a17      	ldr	r2, [pc, #92]	; (800ad40 <HAL_GPIO_Init+0x264>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	d101      	bne.n	800acea <HAL_GPIO_Init+0x20e>
 800ace6:	2309      	movs	r3, #9
 800ace8:	e02d      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800acea:	230a      	movs	r3, #10
 800acec:	e02b      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800acee:	2308      	movs	r3, #8
 800acf0:	e029      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800acf2:	2307      	movs	r3, #7
 800acf4:	e027      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800acf6:	2306      	movs	r3, #6
 800acf8:	e025      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800acfa:	2305      	movs	r3, #5
 800acfc:	e023      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800acfe:	2304      	movs	r3, #4
 800ad00:	e021      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800ad02:	2303      	movs	r3, #3
 800ad04:	e01f      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800ad06:	2302      	movs	r3, #2
 800ad08:	e01d      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e01b      	b.n	800ad46 <HAL_GPIO_Init+0x26a>
 800ad0e:	bf00      	nop
 800ad10:	58000080 	.word	0x58000080
 800ad14:	58024400 	.word	0x58024400
 800ad18:	58000400 	.word	0x58000400
 800ad1c:	58020000 	.word	0x58020000
 800ad20:	58020400 	.word	0x58020400
 800ad24:	58020800 	.word	0x58020800
 800ad28:	58020c00 	.word	0x58020c00
 800ad2c:	58021000 	.word	0x58021000
 800ad30:	58021400 	.word	0x58021400
 800ad34:	58021800 	.word	0x58021800
 800ad38:	58021c00 	.word	0x58021c00
 800ad3c:	58022000 	.word	0x58022000
 800ad40:	58022400 	.word	0x58022400
 800ad44:	2300      	movs	r3, #0
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	f002 0203 	and.w	r2, r2, #3
 800ad4c:	0092      	lsls	r2, r2, #2
 800ad4e:	4093      	lsls	r3, r2
 800ad50:	69ba      	ldr	r2, [r7, #24]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad56:	4938      	ldr	r1, [pc, #224]	; (800ae38 <HAL_GPIO_Init+0x35c>)
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	089b      	lsrs	r3, r3, #2
 800ad5c:	3302      	adds	r3, #2
 800ad5e:	69ba      	ldr	r2, [r7, #24]
 800ad60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ad64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	43db      	mvns	r3, r3
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	4013      	ands	r3, r2
 800ad74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ad76:	683b      	ldr	r3, [r7, #0]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d003      	beq.n	800ad8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ad82:	69ba      	ldr	r2, [r7, #24]
 800ad84:	693b      	ldr	r3, [r7, #16]
 800ad86:	4313      	orrs	r3, r2
 800ad88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ad8a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ad92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	43db      	mvns	r3, r3
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	4013      	ands	r3, r2
 800ada2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800adac:	2b00      	cmp	r3, #0
 800adae:	d003      	beq.n	800adb8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800adb0:	69ba      	ldr	r2, [r7, #24]
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	4313      	orrs	r3, r2
 800adb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800adb8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800adbc:	69bb      	ldr	r3, [r7, #24]
 800adbe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800adc0:	697b      	ldr	r3, [r7, #20]
 800adc2:	685b      	ldr	r3, [r3, #4]
 800adc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	43db      	mvns	r3, r3
 800adca:	69ba      	ldr	r2, [r7, #24]
 800adcc:	4013      	ands	r3, r2
 800adce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	685b      	ldr	r3, [r3, #4]
 800add4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800add8:	2b00      	cmp	r3, #0
 800adda:	d003      	beq.n	800ade4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800addc:	69ba      	ldr	r2, [r7, #24]
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	4313      	orrs	r3, r2
 800ade2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	69ba      	ldr	r2, [r7, #24]
 800ade8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	43db      	mvns	r3, r3
 800adf4:	69ba      	ldr	r2, [r7, #24]
 800adf6:	4013      	ands	r3, r2
 800adf8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	685b      	ldr	r3, [r3, #4]
 800adfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800ae06:	69ba      	ldr	r2, [r7, #24]
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	69ba      	ldr	r2, [r7, #24]
 800ae12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	3301      	adds	r3, #1
 800ae18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	681a      	ldr	r2, [r3, #0]
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	fa22 f303 	lsr.w	r3, r2, r3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f47f ae63 	bne.w	800aaf0 <HAL_GPIO_Init+0x14>
  }
}
 800ae2a:	bf00      	nop
 800ae2c:	bf00      	nop
 800ae2e:	3724      	adds	r7, #36	; 0x24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	58000400 	.word	0x58000400

0800ae3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ae3c:	b480      	push	{r7}
 800ae3e:	b085      	sub	sp, #20
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	460b      	mov	r3, r1
 800ae46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	887b      	ldrh	r3, [r7, #2]
 800ae4e:	4013      	ands	r3, r2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ae54:	2301      	movs	r3, #1
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	e001      	b.n	800ae5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ae5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3714      	adds	r7, #20
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	460b      	mov	r3, r1
 800ae76:	807b      	strh	r3, [r7, #2]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ae7c:	787b      	ldrb	r3, [r7, #1]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d003      	beq.n	800ae8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ae82:	887a      	ldrh	r2, [r7, #2]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ae88:	e003      	b.n	800ae92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ae8a:	887b      	ldrh	r3, [r7, #2]
 800ae8c:	041a      	lsls	r2, r3, #16
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	619a      	str	r2, [r3, #24]
}
 800ae92:	bf00      	nop
 800ae94:	370c      	adds	r7, #12
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr

0800ae9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800ae9e:	b480      	push	{r7}
 800aea0:	b085      	sub	sp, #20
 800aea2:	af00      	add	r7, sp, #0
 800aea4:	6078      	str	r0, [r7, #4]
 800aea6:	460b      	mov	r3, r1
 800aea8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aeb0:	887a      	ldrh	r2, [r7, #2]
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	4013      	ands	r3, r2
 800aeb6:	041a      	lsls	r2, r3, #16
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	43d9      	mvns	r1, r3
 800aebc:	887b      	ldrh	r3, [r7, #2]
 800aebe:	400b      	ands	r3, r1
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	619a      	str	r2, [r3, #24]
}
 800aec6:	bf00      	nop
 800aec8:	3714      	adds	r7, #20
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
	...

0800aed4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b083      	sub	sp, #12
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800aedc:	4a08      	ldr	r2, [pc, #32]	; (800af00 <HAL_HSEM_FastTake+0x2c>)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	3320      	adds	r3, #32
 800aee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aee6:	4a07      	ldr	r2, [pc, #28]	; (800af04 <HAL_HSEM_FastTake+0x30>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d101      	bne.n	800aef0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800aeec:	2300      	movs	r3, #0
 800aeee:	e000      	b.n	800aef2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800aef0:	2301      	movs	r3, #1
}
 800aef2:	4618      	mov	r0, r3
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	58026400 	.word	0x58026400
 800af04:	80000300 	.word	0x80000300

0800af08 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800af12:	4906      	ldr	r1, [pc, #24]	; (800af2c <HAL_HSEM_Release+0x24>)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800af20:	bf00      	nop
 800af22:	370c      	adds	r7, #12
 800af24:	46bd      	mov	sp, r7
 800af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2a:	4770      	bx	lr
 800af2c:	58026400 	.word	0x58026400

0800af30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800af30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af32:	b08f      	sub	sp, #60	; 0x3c
 800af34:	af0a      	add	r7, sp, #40	; 0x28
 800af36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
 800af40:	e116      	b.n	800b170 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800af4e:	b2db      	uxtb	r3, r3
 800af50:	2b00      	cmp	r3, #0
 800af52:	d106      	bne.n	800af62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7fc fc81 	bl	8007864 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2203      	movs	r2, #3
 800af66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800af6a:	68bb      	ldr	r3, [r7, #8]
 800af6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af72:	2b00      	cmp	r3, #0
 800af74:	d102      	bne.n	800af7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	2200      	movs	r2, #0
 800af7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4618      	mov	r0, r3
 800af82:	f005 f977 	bl	8010274 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	603b      	str	r3, [r7, #0]
 800af8c:	687e      	ldr	r6, [r7, #4]
 800af8e:	466d      	mov	r5, sp
 800af90:	f106 0410 	add.w	r4, r6, #16
 800af94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800af9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800af9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800afa0:	e885 0003 	stmia.w	r5, {r0, r1}
 800afa4:	1d33      	adds	r3, r6, #4
 800afa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800afa8:	6838      	ldr	r0, [r7, #0]
 800afaa:	f005 f8f5 	bl	8010198 <USB_CoreInit>
 800afae:	4603      	mov	r3, r0
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d005      	beq.n	800afc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	e0d7      	b.n	800b170 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	2100      	movs	r1, #0
 800afc6:	4618      	mov	r0, r3
 800afc8:	f005 f965 	bl	8010296 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800afcc:	2300      	movs	r3, #0
 800afce:	73fb      	strb	r3, [r7, #15]
 800afd0:	e04a      	b.n	800b068 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800afd2:	7bfa      	ldrb	r2, [r7, #15]
 800afd4:	6879      	ldr	r1, [r7, #4]
 800afd6:	4613      	mov	r3, r2
 800afd8:	00db      	lsls	r3, r3, #3
 800afda:	4413      	add	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	440b      	add	r3, r1
 800afe0:	333d      	adds	r3, #61	; 0x3d
 800afe2:	2201      	movs	r2, #1
 800afe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800afe6:	7bfa      	ldrb	r2, [r7, #15]
 800afe8:	6879      	ldr	r1, [r7, #4]
 800afea:	4613      	mov	r3, r2
 800afec:	00db      	lsls	r3, r3, #3
 800afee:	4413      	add	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	440b      	add	r3, r1
 800aff4:	333c      	adds	r3, #60	; 0x3c
 800aff6:	7bfa      	ldrb	r2, [r7, #15]
 800aff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800affa:	7bfa      	ldrb	r2, [r7, #15]
 800affc:	7bfb      	ldrb	r3, [r7, #15]
 800affe:	b298      	uxth	r0, r3
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	4613      	mov	r3, r2
 800b004:	00db      	lsls	r3, r3, #3
 800b006:	4413      	add	r3, r2
 800b008:	009b      	lsls	r3, r3, #2
 800b00a:	440b      	add	r3, r1
 800b00c:	3344      	adds	r3, #68	; 0x44
 800b00e:	4602      	mov	r2, r0
 800b010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b012:	7bfa      	ldrb	r2, [r7, #15]
 800b014:	6879      	ldr	r1, [r7, #4]
 800b016:	4613      	mov	r3, r2
 800b018:	00db      	lsls	r3, r3, #3
 800b01a:	4413      	add	r3, r2
 800b01c:	009b      	lsls	r3, r3, #2
 800b01e:	440b      	add	r3, r1
 800b020:	3340      	adds	r3, #64	; 0x40
 800b022:	2200      	movs	r2, #0
 800b024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b026:	7bfa      	ldrb	r2, [r7, #15]
 800b028:	6879      	ldr	r1, [r7, #4]
 800b02a:	4613      	mov	r3, r2
 800b02c:	00db      	lsls	r3, r3, #3
 800b02e:	4413      	add	r3, r2
 800b030:	009b      	lsls	r3, r3, #2
 800b032:	440b      	add	r3, r1
 800b034:	3348      	adds	r3, #72	; 0x48
 800b036:	2200      	movs	r2, #0
 800b038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b03a:	7bfa      	ldrb	r2, [r7, #15]
 800b03c:	6879      	ldr	r1, [r7, #4]
 800b03e:	4613      	mov	r3, r2
 800b040:	00db      	lsls	r3, r3, #3
 800b042:	4413      	add	r3, r2
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	440b      	add	r3, r1
 800b048:	334c      	adds	r3, #76	; 0x4c
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b04e:	7bfa      	ldrb	r2, [r7, #15]
 800b050:	6879      	ldr	r1, [r7, #4]
 800b052:	4613      	mov	r3, r2
 800b054:	00db      	lsls	r3, r3, #3
 800b056:	4413      	add	r3, r2
 800b058:	009b      	lsls	r3, r3, #2
 800b05a:	440b      	add	r3, r1
 800b05c:	3354      	adds	r3, #84	; 0x54
 800b05e:	2200      	movs	r2, #0
 800b060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b062:	7bfb      	ldrb	r3, [r7, #15]
 800b064:	3301      	adds	r3, #1
 800b066:	73fb      	strb	r3, [r7, #15]
 800b068:	7bfa      	ldrb	r2, [r7, #15]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	429a      	cmp	r2, r3
 800b070:	d3af      	bcc.n	800afd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b072:	2300      	movs	r3, #0
 800b074:	73fb      	strb	r3, [r7, #15]
 800b076:	e044      	b.n	800b102 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b078:	7bfa      	ldrb	r2, [r7, #15]
 800b07a:	6879      	ldr	r1, [r7, #4]
 800b07c:	4613      	mov	r3, r2
 800b07e:	00db      	lsls	r3, r3, #3
 800b080:	4413      	add	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	440b      	add	r3, r1
 800b086:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b08a:	2200      	movs	r2, #0
 800b08c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b08e:	7bfa      	ldrb	r2, [r7, #15]
 800b090:	6879      	ldr	r1, [r7, #4]
 800b092:	4613      	mov	r3, r2
 800b094:	00db      	lsls	r3, r3, #3
 800b096:	4413      	add	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	440b      	add	r3, r1
 800b09c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b0a0:	7bfa      	ldrb	r2, [r7, #15]
 800b0a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b0a4:	7bfa      	ldrb	r2, [r7, #15]
 800b0a6:	6879      	ldr	r1, [r7, #4]
 800b0a8:	4613      	mov	r3, r2
 800b0aa:	00db      	lsls	r3, r3, #3
 800b0ac:	4413      	add	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	440b      	add	r3, r1
 800b0b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b0ba:	7bfa      	ldrb	r2, [r7, #15]
 800b0bc:	6879      	ldr	r1, [r7, #4]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	00db      	lsls	r3, r3, #3
 800b0c2:	4413      	add	r3, r2
 800b0c4:	009b      	lsls	r3, r3, #2
 800b0c6:	440b      	add	r3, r1
 800b0c8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b0d0:	7bfa      	ldrb	r2, [r7, #15]
 800b0d2:	6879      	ldr	r1, [r7, #4]
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	00db      	lsls	r3, r3, #3
 800b0d8:	4413      	add	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	440b      	add	r3, r1
 800b0de:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b0e6:	7bfa      	ldrb	r2, [r7, #15]
 800b0e8:	6879      	ldr	r1, [r7, #4]
 800b0ea:	4613      	mov	r3, r2
 800b0ec:	00db      	lsls	r3, r3, #3
 800b0ee:	4413      	add	r3, r2
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	440b      	add	r3, r1
 800b0f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	3301      	adds	r3, #1
 800b100:	73fb      	strb	r3, [r7, #15]
 800b102:	7bfa      	ldrb	r2, [r7, #15]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d3b5      	bcc.n	800b078 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	603b      	str	r3, [r7, #0]
 800b112:	687e      	ldr	r6, [r7, #4]
 800b114:	466d      	mov	r5, sp
 800b116:	f106 0410 	add.w	r4, r6, #16
 800b11a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b11c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b11e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b120:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b122:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b126:	e885 0003 	stmia.w	r5, {r0, r1}
 800b12a:	1d33      	adds	r3, r6, #4
 800b12c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b12e:	6838      	ldr	r0, [r7, #0]
 800b130:	f005 f8fe 	bl	8010330 <USB_DevInit>
 800b134:	4603      	mov	r3, r0
 800b136:	2b00      	cmp	r3, #0
 800b138:	d005      	beq.n	800b146 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2202      	movs	r2, #2
 800b13e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b142:	2301      	movs	r3, #1
 800b144:	e014      	b.n	800b170 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d102      	bne.n	800b164 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 f80a 	bl	800b178 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4618      	mov	r0, r3
 800b16a:	f005 fabc 	bl	80106e6 <USB_DevDisconnect>

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b178 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b178:	b480      	push	{r7}
 800b17a:	b085      	sub	sp, #20
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2201      	movs	r2, #1
 800b18a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b1a6:	4b05      	ldr	r3, [pc, #20]	; (800b1bc <HAL_PCDEx_ActivateLPM+0x44>)
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	68fa      	ldr	r2, [r7, #12]
 800b1ac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	10000003 	.word	0x10000003

0800b1c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b084      	sub	sp, #16
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b1c8:	4b29      	ldr	r3, [pc, #164]	; (800b270 <HAL_PWREx_ConfigSupply+0xb0>)
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	f003 0307 	and.w	r3, r3, #7
 800b1d0:	2b06      	cmp	r3, #6
 800b1d2:	d00a      	beq.n	800b1ea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b1d4:	4b26      	ldr	r3, [pc, #152]	; (800b270 <HAL_PWREx_ConfigSupply+0xb0>)
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1dc:	687a      	ldr	r2, [r7, #4]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d001      	beq.n	800b1e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b1e2:	2301      	movs	r3, #1
 800b1e4:	e040      	b.n	800b268 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	e03e      	b.n	800b268 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b1ea:	4b21      	ldr	r3, [pc, #132]	; (800b270 <HAL_PWREx_ConfigSupply+0xb0>)
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800b1f2:	491f      	ldr	r1, [pc, #124]	; (800b270 <HAL_PWREx_ConfigSupply+0xb0>)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800b1fa:	f7fc fcc5 	bl	8007b88 <HAL_GetTick>
 800b1fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b200:	e009      	b.n	800b216 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b202:	f7fc fcc1 	bl	8007b88 <HAL_GetTick>
 800b206:	4602      	mov	r2, r0
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	1ad3      	subs	r3, r2, r3
 800b20c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b210:	d901      	bls.n	800b216 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e028      	b.n	800b268 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b216:	4b16      	ldr	r3, [pc, #88]	; (800b270 <HAL_PWREx_ConfigSupply+0xb0>)
 800b218:	685b      	ldr	r3, [r3, #4]
 800b21a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b21e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b222:	d1ee      	bne.n	800b202 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2b1e      	cmp	r3, #30
 800b228:	d008      	beq.n	800b23c <HAL_PWREx_ConfigSupply+0x7c>
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b2e      	cmp	r3, #46	; 0x2e
 800b22e:	d005      	beq.n	800b23c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b1d      	cmp	r3, #29
 800b234:	d002      	beq.n	800b23c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b2d      	cmp	r3, #45	; 0x2d
 800b23a:	d114      	bne.n	800b266 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800b23c:	f7fc fca4 	bl	8007b88 <HAL_GetTick>
 800b240:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b242:	e009      	b.n	800b258 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b244:	f7fc fca0 	bl	8007b88 <HAL_GetTick>
 800b248:	4602      	mov	r2, r0
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	1ad3      	subs	r3, r2, r3
 800b24e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b252:	d901      	bls.n	800b258 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	e007      	b.n	800b268 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800b258:	4b05      	ldr	r3, [pc, #20]	; (800b270 <HAL_PWREx_ConfigSupply+0xb0>)
 800b25a:	68db      	ldr	r3, [r3, #12]
 800b25c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b264:	d1ee      	bne.n	800b244 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800b266:	2300      	movs	r3, #0
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}
 800b270:	58024800 	.word	0x58024800

0800b274 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800b274:	b480      	push	{r7}
 800b276:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800b278:	4b05      	ldr	r3, [pc, #20]	; (800b290 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	4a04      	ldr	r2, [pc, #16]	; (800b290 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800b27e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b282:	60d3      	str	r3, [r2, #12]
}
 800b284:	bf00      	nop
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	58024800 	.word	0x58024800

0800b294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b08c      	sub	sp, #48	; 0x30
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d102      	bne.n	800b2a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	f000 bc1d 	b.w	800bae2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 0301 	and.w	r3, r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	f000 8087 	beq.w	800b3c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b2b6:	4b99      	ldr	r3, [pc, #612]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b2b8:	691b      	ldr	r3, [r3, #16]
 800b2ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b2be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b2c0:	4b96      	ldr	r3, [pc, #600]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800b2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2c8:	2b10      	cmp	r3, #16
 800b2ca:	d007      	beq.n	800b2dc <HAL_RCC_OscConfig+0x48>
 800b2cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2ce:	2b18      	cmp	r3, #24
 800b2d0:	d110      	bne.n	800b2f4 <HAL_RCC_OscConfig+0x60>
 800b2d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	2b02      	cmp	r3, #2
 800b2da:	d10b      	bne.n	800b2f4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b2dc:	4b8f      	ldr	r3, [pc, #572]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d06c      	beq.n	800b3c2 <HAL_RCC_OscConfig+0x12e>
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	685b      	ldr	r3, [r3, #4]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d168      	bne.n	800b3c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	e3f6      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2fc:	d106      	bne.n	800b30c <HAL_RCC_OscConfig+0x78>
 800b2fe:	4b87      	ldr	r3, [pc, #540]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	4a86      	ldr	r2, [pc, #536]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b308:	6013      	str	r3, [r2, #0]
 800b30a:	e02e      	b.n	800b36a <HAL_RCC_OscConfig+0xd6>
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	685b      	ldr	r3, [r3, #4]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10c      	bne.n	800b32e <HAL_RCC_OscConfig+0x9a>
 800b314:	4b81      	ldr	r3, [pc, #516]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a80      	ldr	r2, [pc, #512]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b31a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	4b7e      	ldr	r3, [pc, #504]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4a7d      	ldr	r2, [pc, #500]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b326:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b32a:	6013      	str	r3, [r2, #0]
 800b32c:	e01d      	b.n	800b36a <HAL_RCC_OscConfig+0xd6>
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b336:	d10c      	bne.n	800b352 <HAL_RCC_OscConfig+0xbe>
 800b338:	4b78      	ldr	r3, [pc, #480]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	4a77      	ldr	r2, [pc, #476]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b33e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	4b75      	ldr	r3, [pc, #468]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a74      	ldr	r2, [pc, #464]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b34a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	e00b      	b.n	800b36a <HAL_RCC_OscConfig+0xd6>
 800b352:	4b72      	ldr	r3, [pc, #456]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4a71      	ldr	r2, [pc, #452]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b35c:	6013      	str	r3, [r2, #0]
 800b35e:	4b6f      	ldr	r3, [pc, #444]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a6e      	ldr	r2, [pc, #440]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b368:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d013      	beq.n	800b39a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b372:	f7fc fc09 	bl	8007b88 <HAL_GetTick>
 800b376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b378:	e008      	b.n	800b38c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b37a:	f7fc fc05 	bl	8007b88 <HAL_GetTick>
 800b37e:	4602      	mov	r2, r0
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	1ad3      	subs	r3, r2, r3
 800b384:	2b64      	cmp	r3, #100	; 0x64
 800b386:	d901      	bls.n	800b38c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800b388:	2303      	movs	r3, #3
 800b38a:	e3aa      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b38c:	4b63      	ldr	r3, [pc, #396]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b394:	2b00      	cmp	r3, #0
 800b396:	d0f0      	beq.n	800b37a <HAL_RCC_OscConfig+0xe6>
 800b398:	e014      	b.n	800b3c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b39a:	f7fc fbf5 	bl	8007b88 <HAL_GetTick>
 800b39e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b3a0:	e008      	b.n	800b3b4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b3a2:	f7fc fbf1 	bl	8007b88 <HAL_GetTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	2b64      	cmp	r3, #100	; 0x64
 800b3ae:	d901      	bls.n	800b3b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800b3b0:	2303      	movs	r3, #3
 800b3b2:	e396      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b3b4:	4b59      	ldr	r3, [pc, #356]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1f0      	bne.n	800b3a2 <HAL_RCC_OscConfig+0x10e>
 800b3c0:	e000      	b.n	800b3c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b3c2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	f003 0302 	and.w	r3, r3, #2
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 80cb 	beq.w	800b568 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b3d2:	4b52      	ldr	r3, [pc, #328]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3da:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b3dc:	4b4f      	ldr	r3, [pc, #316]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800b3e2:	6a3b      	ldr	r3, [r7, #32]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d007      	beq.n	800b3f8 <HAL_RCC_OscConfig+0x164>
 800b3e8:	6a3b      	ldr	r3, [r7, #32]
 800b3ea:	2b18      	cmp	r3, #24
 800b3ec:	d156      	bne.n	800b49c <HAL_RCC_OscConfig+0x208>
 800b3ee:	69fb      	ldr	r3, [r7, #28]
 800b3f0:	f003 0303 	and.w	r3, r3, #3
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d151      	bne.n	800b49c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b3f8:	4b48      	ldr	r3, [pc, #288]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f003 0304 	and.w	r3, r3, #4
 800b400:	2b00      	cmp	r3, #0
 800b402:	d005      	beq.n	800b410 <HAL_RCC_OscConfig+0x17c>
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e368      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b410:	4b42      	ldr	r3, [pc, #264]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f023 0219 	bic.w	r2, r3, #25
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	493f      	ldr	r1, [pc, #252]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b41e:	4313      	orrs	r3, r2
 800b420:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b422:	f7fc fbb1 	bl	8007b88 <HAL_GetTick>
 800b426:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b428:	e008      	b.n	800b43c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b42a:	f7fc fbad 	bl	8007b88 <HAL_GetTick>
 800b42e:	4602      	mov	r2, r0
 800b430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b432:	1ad3      	subs	r3, r2, r3
 800b434:	2b02      	cmp	r3, #2
 800b436:	d901      	bls.n	800b43c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800b438:	2303      	movs	r3, #3
 800b43a:	e352      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b43c:	4b37      	ldr	r3, [pc, #220]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f003 0304 	and.w	r3, r3, #4
 800b444:	2b00      	cmp	r3, #0
 800b446:	d0f0      	beq.n	800b42a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b448:	f7fc fbce 	bl	8007be8 <HAL_GetREVID>
 800b44c:	4603      	mov	r3, r0
 800b44e:	f241 0203 	movw	r2, #4099	; 0x1003
 800b452:	4293      	cmp	r3, r2
 800b454:	d817      	bhi.n	800b486 <HAL_RCC_OscConfig+0x1f2>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	2b40      	cmp	r3, #64	; 0x40
 800b45c:	d108      	bne.n	800b470 <HAL_RCC_OscConfig+0x1dc>
 800b45e:	4b2f      	ldr	r3, [pc, #188]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b466:	4a2d      	ldr	r2, [pc, #180]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b468:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b46c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b46e:	e07b      	b.n	800b568 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b470:	4b2a      	ldr	r3, [pc, #168]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b472:	685b      	ldr	r3, [r3, #4]
 800b474:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	031b      	lsls	r3, r3, #12
 800b47e:	4927      	ldr	r1, [pc, #156]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b480:	4313      	orrs	r3, r2
 800b482:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b484:	e070      	b.n	800b568 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b486:	4b25      	ldr	r3, [pc, #148]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b488:	685b      	ldr	r3, [r3, #4]
 800b48a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	691b      	ldr	r3, [r3, #16]
 800b492:	061b      	lsls	r3, r3, #24
 800b494:	4921      	ldr	r1, [pc, #132]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b496:	4313      	orrs	r3, r2
 800b498:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b49a:	e065      	b.n	800b568 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d048      	beq.n	800b536 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b4a4:	4b1d      	ldr	r3, [pc, #116]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f023 0219 	bic.w	r2, r3, #25
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	68db      	ldr	r3, [r3, #12]
 800b4b0:	491a      	ldr	r1, [pc, #104]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4b6:	f7fc fb67 	bl	8007b88 <HAL_GetTick>
 800b4ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4bc:	e008      	b.n	800b4d0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b4be:	f7fc fb63 	bl	8007b88 <HAL_GetTick>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	2b02      	cmp	r3, #2
 800b4ca:	d901      	bls.n	800b4d0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e308      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b4d0:	4b12      	ldr	r3, [pc, #72]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d0f0      	beq.n	800b4be <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4dc:	f7fc fb84 	bl	8007be8 <HAL_GetREVID>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	f241 0203 	movw	r2, #4099	; 0x1003
 800b4e6:	4293      	cmp	r3, r2
 800b4e8:	d81a      	bhi.n	800b520 <HAL_RCC_OscConfig+0x28c>
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	691b      	ldr	r3, [r3, #16]
 800b4ee:	2b40      	cmp	r3, #64	; 0x40
 800b4f0:	d108      	bne.n	800b504 <HAL_RCC_OscConfig+0x270>
 800b4f2:	4b0a      	ldr	r3, [pc, #40]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b4fa:	4a08      	ldr	r2, [pc, #32]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b4fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b500:	6053      	str	r3, [r2, #4]
 800b502:	e031      	b.n	800b568 <HAL_RCC_OscConfig+0x2d4>
 800b504:	4b05      	ldr	r3, [pc, #20]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b506:	685b      	ldr	r3, [r3, #4]
 800b508:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	691b      	ldr	r3, [r3, #16]
 800b510:	031b      	lsls	r3, r3, #12
 800b512:	4902      	ldr	r1, [pc, #8]	; (800b51c <HAL_RCC_OscConfig+0x288>)
 800b514:	4313      	orrs	r3, r2
 800b516:	604b      	str	r3, [r1, #4]
 800b518:	e026      	b.n	800b568 <HAL_RCC_OscConfig+0x2d4>
 800b51a:	bf00      	nop
 800b51c:	58024400 	.word	0x58024400
 800b520:	4b9a      	ldr	r3, [pc, #616]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	061b      	lsls	r3, r3, #24
 800b52e:	4997      	ldr	r1, [pc, #604]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b530:	4313      	orrs	r3, r2
 800b532:	604b      	str	r3, [r1, #4]
 800b534:	e018      	b.n	800b568 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b536:	4b95      	ldr	r3, [pc, #596]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a94      	ldr	r2, [pc, #592]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b53c:	f023 0301 	bic.w	r3, r3, #1
 800b540:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b542:	f7fc fb21 	bl	8007b88 <HAL_GetTick>
 800b546:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b548:	e008      	b.n	800b55c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b54a:	f7fc fb1d 	bl	8007b88 <HAL_GetTick>
 800b54e:	4602      	mov	r2, r0
 800b550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	2b02      	cmp	r3, #2
 800b556:	d901      	bls.n	800b55c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b558:	2303      	movs	r3, #3
 800b55a:	e2c2      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b55c:	4b8b      	ldr	r3, [pc, #556]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1f0      	bne.n	800b54a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	f000 80a9 	beq.w	800b6c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b576:	4b85      	ldr	r3, [pc, #532]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b57e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b580:	4b82      	ldr	r3, [pc, #520]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b584:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	2b08      	cmp	r3, #8
 800b58a:	d007      	beq.n	800b59c <HAL_RCC_OscConfig+0x308>
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	2b18      	cmp	r3, #24
 800b590:	d13a      	bne.n	800b608 <HAL_RCC_OscConfig+0x374>
 800b592:	697b      	ldr	r3, [r7, #20]
 800b594:	f003 0303 	and.w	r3, r3, #3
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d135      	bne.n	800b608 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b59c:	4b7b      	ldr	r3, [pc, #492]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <HAL_RCC_OscConfig+0x320>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	69db      	ldr	r3, [r3, #28]
 800b5ac:	2b80      	cmp	r3, #128	; 0x80
 800b5ae:	d001      	beq.n	800b5b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	e296      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5b4:	f7fc fb18 	bl	8007be8 <HAL_GetREVID>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f241 0203 	movw	r2, #4099	; 0x1003
 800b5be:	4293      	cmp	r3, r2
 800b5c0:	d817      	bhi.n	800b5f2 <HAL_RCC_OscConfig+0x35e>
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6a1b      	ldr	r3, [r3, #32]
 800b5c6:	2b20      	cmp	r3, #32
 800b5c8:	d108      	bne.n	800b5dc <HAL_RCC_OscConfig+0x348>
 800b5ca:	4b70      	ldr	r3, [pc, #448]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b5cc:	685b      	ldr	r3, [r3, #4]
 800b5ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b5d2:	4a6e      	ldr	r2, [pc, #440]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b5d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5da:	e075      	b.n	800b6c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5dc:	4b6b      	ldr	r3, [pc, #428]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6a1b      	ldr	r3, [r3, #32]
 800b5e8:	069b      	lsls	r3, r3, #26
 800b5ea:	4968      	ldr	r1, [pc, #416]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b5f0:	e06a      	b.n	800b6c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b5f2:	4b66      	ldr	r3, [pc, #408]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b5f4:	68db      	ldr	r3, [r3, #12]
 800b5f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6a1b      	ldr	r3, [r3, #32]
 800b5fe:	061b      	lsls	r3, r3, #24
 800b600:	4962      	ldr	r1, [pc, #392]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b602:	4313      	orrs	r3, r2
 800b604:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b606:	e05f      	b.n	800b6c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	69db      	ldr	r3, [r3, #28]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d042      	beq.n	800b696 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b610:	4b5e      	ldr	r3, [pc, #376]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	4a5d      	ldr	r2, [pc, #372]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b61a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b61c:	f7fc fab4 	bl	8007b88 <HAL_GetTick>
 800b620:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b622:	e008      	b.n	800b636 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b624:	f7fc fab0 	bl	8007b88 <HAL_GetTick>
 800b628:	4602      	mov	r2, r0
 800b62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b62c:	1ad3      	subs	r3, r2, r3
 800b62e:	2b02      	cmp	r3, #2
 800b630:	d901      	bls.n	800b636 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b632:	2303      	movs	r3, #3
 800b634:	e255      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b636:	4b55      	ldr	r3, [pc, #340]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d0f0      	beq.n	800b624 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b642:	f7fc fad1 	bl	8007be8 <HAL_GetREVID>
 800b646:	4603      	mov	r3, r0
 800b648:	f241 0203 	movw	r2, #4099	; 0x1003
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d817      	bhi.n	800b680 <HAL_RCC_OscConfig+0x3ec>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	2b20      	cmp	r3, #32
 800b656:	d108      	bne.n	800b66a <HAL_RCC_OscConfig+0x3d6>
 800b658:	4b4c      	ldr	r3, [pc, #304]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b660:	4a4a      	ldr	r2, [pc, #296]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b662:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b666:	6053      	str	r3, [r2, #4]
 800b668:	e02e      	b.n	800b6c8 <HAL_RCC_OscConfig+0x434>
 800b66a:	4b48      	ldr	r3, [pc, #288]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a1b      	ldr	r3, [r3, #32]
 800b676:	069b      	lsls	r3, r3, #26
 800b678:	4944      	ldr	r1, [pc, #272]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b67a:	4313      	orrs	r3, r2
 800b67c:	604b      	str	r3, [r1, #4]
 800b67e:	e023      	b.n	800b6c8 <HAL_RCC_OscConfig+0x434>
 800b680:	4b42      	ldr	r3, [pc, #264]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6a1b      	ldr	r3, [r3, #32]
 800b68c:	061b      	lsls	r3, r3, #24
 800b68e:	493f      	ldr	r1, [pc, #252]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b690:	4313      	orrs	r3, r2
 800b692:	60cb      	str	r3, [r1, #12]
 800b694:	e018      	b.n	800b6c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b696:	4b3d      	ldr	r3, [pc, #244]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	4a3c      	ldr	r2, [pc, #240]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b69c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b6a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6a2:	f7fc fa71 	bl	8007b88 <HAL_GetTick>
 800b6a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b6a8:	e008      	b.n	800b6bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b6aa:	f7fc fa6d 	bl	8007b88 <HAL_GetTick>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d901      	bls.n	800b6bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b6b8:	2303      	movs	r3, #3
 800b6ba:	e212      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b6bc:	4b33      	ldr	r3, [pc, #204]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d1f0      	bne.n	800b6aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f003 0308 	and.w	r3, r3, #8
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d036      	beq.n	800b742 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	695b      	ldr	r3, [r3, #20]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d019      	beq.n	800b710 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b6dc:	4b2b      	ldr	r3, [pc, #172]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b6de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e0:	4a2a      	ldr	r2, [pc, #168]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b6e2:	f043 0301 	orr.w	r3, r3, #1
 800b6e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b6e8:	f7fc fa4e 	bl	8007b88 <HAL_GetTick>
 800b6ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b6ee:	e008      	b.n	800b702 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b6f0:	f7fc fa4a 	bl	8007b88 <HAL_GetTick>
 800b6f4:	4602      	mov	r2, r0
 800b6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d901      	bls.n	800b702 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b6fe:	2303      	movs	r3, #3
 800b700:	e1ef      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b702:	4b22      	ldr	r3, [pc, #136]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b706:	f003 0302 	and.w	r3, r3, #2
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d0f0      	beq.n	800b6f0 <HAL_RCC_OscConfig+0x45c>
 800b70e:	e018      	b.n	800b742 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b710:	4b1e      	ldr	r3, [pc, #120]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b712:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b714:	4a1d      	ldr	r2, [pc, #116]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b716:	f023 0301 	bic.w	r3, r3, #1
 800b71a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b71c:	f7fc fa34 	bl	8007b88 <HAL_GetTick>
 800b720:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b722:	e008      	b.n	800b736 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b724:	f7fc fa30 	bl	8007b88 <HAL_GetTick>
 800b728:	4602      	mov	r2, r0
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	2b02      	cmp	r3, #2
 800b730:	d901      	bls.n	800b736 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b732:	2303      	movs	r3, #3
 800b734:	e1d5      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b736:	4b15      	ldr	r3, [pc, #84]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b73a:	f003 0302 	and.w	r3, r3, #2
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1f0      	bne.n	800b724 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f003 0320 	and.w	r3, r3, #32
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d039      	beq.n	800b7c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d01c      	beq.n	800b790 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b756:	4b0d      	ldr	r3, [pc, #52]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a0c      	ldr	r2, [pc, #48]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b75c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b760:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b762:	f7fc fa11 	bl	8007b88 <HAL_GetTick>
 800b766:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b768:	e008      	b.n	800b77c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b76a:	f7fc fa0d 	bl	8007b88 <HAL_GetTick>
 800b76e:	4602      	mov	r2, r0
 800b770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	2b02      	cmp	r3, #2
 800b776:	d901      	bls.n	800b77c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	e1b2      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b77c:	4b03      	ldr	r3, [pc, #12]	; (800b78c <HAL_RCC_OscConfig+0x4f8>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0f0      	beq.n	800b76a <HAL_RCC_OscConfig+0x4d6>
 800b788:	e01b      	b.n	800b7c2 <HAL_RCC_OscConfig+0x52e>
 800b78a:	bf00      	nop
 800b78c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b790:	4b9b      	ldr	r3, [pc, #620]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	4a9a      	ldr	r2, [pc, #616]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b796:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b79a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b79c:	f7fc f9f4 	bl	8007b88 <HAL_GetTick>
 800b7a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b7a2:	e008      	b.n	800b7b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b7a4:	f7fc f9f0 	bl	8007b88 <HAL_GetTick>
 800b7a8:	4602      	mov	r2, r0
 800b7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ac:	1ad3      	subs	r3, r2, r3
 800b7ae:	2b02      	cmp	r3, #2
 800b7b0:	d901      	bls.n	800b7b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b7b2:	2303      	movs	r3, #3
 800b7b4:	e195      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b7b6:	4b92      	ldr	r3, [pc, #584]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d1f0      	bne.n	800b7a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	f003 0304 	and.w	r3, r3, #4
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	f000 8081 	beq.w	800b8d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b7d0:	4b8c      	ldr	r3, [pc, #560]	; (800ba04 <HAL_RCC_OscConfig+0x770>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	4a8b      	ldr	r2, [pc, #556]	; (800ba04 <HAL_RCC_OscConfig+0x770>)
 800b7d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b7dc:	f7fc f9d4 	bl	8007b88 <HAL_GetTick>
 800b7e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7e2:	e008      	b.n	800b7f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b7e4:	f7fc f9d0 	bl	8007b88 <HAL_GetTick>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ec:	1ad3      	subs	r3, r2, r3
 800b7ee:	2b64      	cmp	r3, #100	; 0x64
 800b7f0:	d901      	bls.n	800b7f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b7f2:	2303      	movs	r3, #3
 800b7f4:	e175      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7f6:	4b83      	ldr	r3, [pc, #524]	; (800ba04 <HAL_RCC_OscConfig+0x770>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d0f0      	beq.n	800b7e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	689b      	ldr	r3, [r3, #8]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d106      	bne.n	800b818 <HAL_RCC_OscConfig+0x584>
 800b80a:	4b7d      	ldr	r3, [pc, #500]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b80c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b80e:	4a7c      	ldr	r2, [pc, #496]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b810:	f043 0301 	orr.w	r3, r3, #1
 800b814:	6713      	str	r3, [r2, #112]	; 0x70
 800b816:	e02d      	b.n	800b874 <HAL_RCC_OscConfig+0x5e0>
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d10c      	bne.n	800b83a <HAL_RCC_OscConfig+0x5a6>
 800b820:	4b77      	ldr	r3, [pc, #476]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b824:	4a76      	ldr	r2, [pc, #472]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b826:	f023 0301 	bic.w	r3, r3, #1
 800b82a:	6713      	str	r3, [r2, #112]	; 0x70
 800b82c:	4b74      	ldr	r3, [pc, #464]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b82e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b830:	4a73      	ldr	r2, [pc, #460]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b832:	f023 0304 	bic.w	r3, r3, #4
 800b836:	6713      	str	r3, [r2, #112]	; 0x70
 800b838:	e01c      	b.n	800b874 <HAL_RCC_OscConfig+0x5e0>
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	2b05      	cmp	r3, #5
 800b840:	d10c      	bne.n	800b85c <HAL_RCC_OscConfig+0x5c8>
 800b842:	4b6f      	ldr	r3, [pc, #444]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b846:	4a6e      	ldr	r2, [pc, #440]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b848:	f043 0304 	orr.w	r3, r3, #4
 800b84c:	6713      	str	r3, [r2, #112]	; 0x70
 800b84e:	4b6c      	ldr	r3, [pc, #432]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b852:	4a6b      	ldr	r2, [pc, #428]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b854:	f043 0301 	orr.w	r3, r3, #1
 800b858:	6713      	str	r3, [r2, #112]	; 0x70
 800b85a:	e00b      	b.n	800b874 <HAL_RCC_OscConfig+0x5e0>
 800b85c:	4b68      	ldr	r3, [pc, #416]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b860:	4a67      	ldr	r2, [pc, #412]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b862:	f023 0301 	bic.w	r3, r3, #1
 800b866:	6713      	str	r3, [r2, #112]	; 0x70
 800b868:	4b65      	ldr	r3, [pc, #404]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b86c:	4a64      	ldr	r2, [pc, #400]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b86e:	f023 0304 	bic.w	r3, r3, #4
 800b872:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d015      	beq.n	800b8a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b87c:	f7fc f984 	bl	8007b88 <HAL_GetTick>
 800b880:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b882:	e00a      	b.n	800b89a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b884:	f7fc f980 	bl	8007b88 <HAL_GetTick>
 800b888:	4602      	mov	r2, r0
 800b88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b892:	4293      	cmp	r3, r2
 800b894:	d901      	bls.n	800b89a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b896:	2303      	movs	r3, #3
 800b898:	e123      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b89a:	4b59      	ldr	r3, [pc, #356]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b89c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b89e:	f003 0302 	and.w	r3, r3, #2
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d0ee      	beq.n	800b884 <HAL_RCC_OscConfig+0x5f0>
 800b8a6:	e014      	b.n	800b8d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b8a8:	f7fc f96e 	bl	8007b88 <HAL_GetTick>
 800b8ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b8ae:	e00a      	b.n	800b8c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b8b0:	f7fc f96a 	bl	8007b88 <HAL_GetTick>
 800b8b4:	4602      	mov	r2, r0
 800b8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8b8:	1ad3      	subs	r3, r2, r3
 800b8ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d901      	bls.n	800b8c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b8c2:	2303      	movs	r3, #3
 800b8c4:	e10d      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b8c6:	4b4e      	ldr	r3, [pc, #312]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b8c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b8ca:	f003 0302 	and.w	r3, r3, #2
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1ee      	bne.n	800b8b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 8102 	beq.w	800bae0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b8dc:	4b48      	ldr	r3, [pc, #288]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b8de:	691b      	ldr	r3, [r3, #16]
 800b8e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b8e4:	2b18      	cmp	r3, #24
 800b8e6:	f000 80bd 	beq.w	800ba64 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ee:	2b02      	cmp	r3, #2
 800b8f0:	f040 809e 	bne.w	800ba30 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8f4:	4b42      	ldr	r3, [pc, #264]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a41      	ldr	r2, [pc, #260]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b8fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b8fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b900:	f7fc f942 	bl	8007b88 <HAL_GetTick>
 800b904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b906:	e008      	b.n	800b91a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b908:	f7fc f93e 	bl	8007b88 <HAL_GetTick>
 800b90c:	4602      	mov	r2, r0
 800b90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b910:	1ad3      	subs	r3, r2, r3
 800b912:	2b02      	cmp	r3, #2
 800b914:	d901      	bls.n	800b91a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b916:	2303      	movs	r3, #3
 800b918:	e0e3      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b91a:	4b39      	ldr	r3, [pc, #228]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b922:	2b00      	cmp	r3, #0
 800b924:	d1f0      	bne.n	800b908 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b926:	4b36      	ldr	r3, [pc, #216]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b92a:	4b37      	ldr	r3, [pc, #220]	; (800ba08 <HAL_RCC_OscConfig+0x774>)
 800b92c:	4013      	ands	r3, r2
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b932:	687a      	ldr	r2, [r7, #4]
 800b934:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b936:	0112      	lsls	r2, r2, #4
 800b938:	430a      	orrs	r2, r1
 800b93a:	4931      	ldr	r1, [pc, #196]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b93c:	4313      	orrs	r3, r2
 800b93e:	628b      	str	r3, [r1, #40]	; 0x28
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b944:	3b01      	subs	r3, #1
 800b946:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94e:	3b01      	subs	r3, #1
 800b950:	025b      	lsls	r3, r3, #9
 800b952:	b29b      	uxth	r3, r3
 800b954:	431a      	orrs	r2, r3
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95a:	3b01      	subs	r3, #1
 800b95c:	041b      	lsls	r3, r3, #16
 800b95e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b962:	431a      	orrs	r2, r3
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b968:	3b01      	subs	r3, #1
 800b96a:	061b      	lsls	r3, r3, #24
 800b96c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b970:	4923      	ldr	r1, [pc, #140]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b972:	4313      	orrs	r3, r2
 800b974:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b976:	4b22      	ldr	r3, [pc, #136]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b97a:	4a21      	ldr	r2, [pc, #132]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b97c:	f023 0301 	bic.w	r3, r3, #1
 800b980:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b982:	4b1f      	ldr	r3, [pc, #124]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b986:	4b21      	ldr	r3, [pc, #132]	; (800ba0c <HAL_RCC_OscConfig+0x778>)
 800b988:	4013      	ands	r3, r2
 800b98a:	687a      	ldr	r2, [r7, #4]
 800b98c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b98e:	00d2      	lsls	r2, r2, #3
 800b990:	491b      	ldr	r1, [pc, #108]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b992:	4313      	orrs	r3, r2
 800b994:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b996:	4b1a      	ldr	r3, [pc, #104]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99a:	f023 020c 	bic.w	r2, r3, #12
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9a2:	4917      	ldr	r1, [pc, #92]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9a4:	4313      	orrs	r3, r2
 800b9a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b9a8:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ac:	f023 0202 	bic.w	r2, r3, #2
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9b4:	4912      	ldr	r1, [pc, #72]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b9ba:	4b11      	ldr	r3, [pc, #68]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9be:	4a10      	ldr	r2, [pc, #64]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9c6:	4b0e      	ldr	r3, [pc, #56]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9ca:	4a0d      	ldr	r2, [pc, #52]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b9d2:	4b0b      	ldr	r3, [pc, #44]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9d6:	4a0a      	ldr	r2, [pc, #40]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b9dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b9de:	4b08      	ldr	r3, [pc, #32]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e2:	4a07      	ldr	r2, [pc, #28]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9e4:	f043 0301 	orr.w	r3, r3, #1
 800b9e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b9ea:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	4a04      	ldr	r2, [pc, #16]	; (800ba00 <HAL_RCC_OscConfig+0x76c>)
 800b9f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b9f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9f6:	f7fc f8c7 	bl	8007b88 <HAL_GetTick>
 800b9fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b9fc:	e011      	b.n	800ba22 <HAL_RCC_OscConfig+0x78e>
 800b9fe:	bf00      	nop
 800ba00:	58024400 	.word	0x58024400
 800ba04:	58024800 	.word	0x58024800
 800ba08:	fffffc0c 	.word	0xfffffc0c
 800ba0c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba10:	f7fc f8ba 	bl	8007b88 <HAL_GetTick>
 800ba14:	4602      	mov	r2, r0
 800ba16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d901      	bls.n	800ba22 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800ba1e:	2303      	movs	r3, #3
 800ba20:	e05f      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ba22:	4b32      	ldr	r3, [pc, #200]	; (800baec <HAL_RCC_OscConfig+0x858>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0f0      	beq.n	800ba10 <HAL_RCC_OscConfig+0x77c>
 800ba2e:	e057      	b.n	800bae0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba30:	4b2e      	ldr	r3, [pc, #184]	; (800baec <HAL_RCC_OscConfig+0x858>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	4a2d      	ldr	r2, [pc, #180]	; (800baec <HAL_RCC_OscConfig+0x858>)
 800ba36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ba3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba3c:	f7fc f8a4 	bl	8007b88 <HAL_GetTick>
 800ba40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba42:	e008      	b.n	800ba56 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ba44:	f7fc f8a0 	bl	8007b88 <HAL_GetTick>
 800ba48:	4602      	mov	r2, r0
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	1ad3      	subs	r3, r2, r3
 800ba4e:	2b02      	cmp	r3, #2
 800ba50:	d901      	bls.n	800ba56 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800ba52:	2303      	movs	r3, #3
 800ba54:	e045      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ba56:	4b25      	ldr	r3, [pc, #148]	; (800baec <HAL_RCC_OscConfig+0x858>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1f0      	bne.n	800ba44 <HAL_RCC_OscConfig+0x7b0>
 800ba62:	e03d      	b.n	800bae0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ba64:	4b21      	ldr	r3, [pc, #132]	; (800baec <HAL_RCC_OscConfig+0x858>)
 800ba66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba68:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ba6a:	4b20      	ldr	r3, [pc, #128]	; (800baec <HAL_RCC_OscConfig+0x858>)
 800ba6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba6e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d031      	beq.n	800badc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	f003 0203 	and.w	r2, r3, #3
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ba82:	429a      	cmp	r2, r3
 800ba84:	d12a      	bne.n	800badc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	091b      	lsrs	r3, r3, #4
 800ba8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d122      	bne.n	800badc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baa0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800baa2:	429a      	cmp	r2, r3
 800baa4:	d11a      	bne.n	800badc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	0a5b      	lsrs	r3, r3, #9
 800baaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bab2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d111      	bne.n	800badc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	0c1b      	lsrs	r3, r3, #16
 800babc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bac4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bac6:	429a      	cmp	r2, r3
 800bac8:	d108      	bne.n	800badc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	0e1b      	lsrs	r3, r3, #24
 800bace:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bad8:	429a      	cmp	r2, r3
 800bada:	d001      	beq.n	800bae0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800badc:	2301      	movs	r3, #1
 800bade:	e000      	b.n	800bae2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	3730      	adds	r7, #48	; 0x30
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}
 800baea:	bf00      	nop
 800baec:	58024400 	.word	0x58024400

0800baf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d101      	bne.n	800bb04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bb00:	2301      	movs	r3, #1
 800bb02:	e19c      	b.n	800be3e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bb04:	4b8a      	ldr	r3, [pc, #552]	; (800bd30 <HAL_RCC_ClockConfig+0x240>)
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 030f 	and.w	r3, r3, #15
 800bb0c:	683a      	ldr	r2, [r7, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d910      	bls.n	800bb34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb12:	4b87      	ldr	r3, [pc, #540]	; (800bd30 <HAL_RCC_ClockConfig+0x240>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f023 020f 	bic.w	r2, r3, #15
 800bb1a:	4985      	ldr	r1, [pc, #532]	; (800bd30 <HAL_RCC_ClockConfig+0x240>)
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb22:	4b83      	ldr	r3, [pc, #524]	; (800bd30 <HAL_RCC_ClockConfig+0x240>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	f003 030f 	and.w	r3, r3, #15
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d001      	beq.n	800bb34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800bb30:	2301      	movs	r3, #1
 800bb32:	e184      	b.n	800be3e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f003 0304 	and.w	r3, r3, #4
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d010      	beq.n	800bb62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	691a      	ldr	r2, [r3, #16]
 800bb44:	4b7b      	ldr	r3, [pc, #492]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bb46:	699b      	ldr	r3, [r3, #24]
 800bb48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d908      	bls.n	800bb62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bb50:	4b78      	ldr	r3, [pc, #480]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bb52:	699b      	ldr	r3, [r3, #24]
 800bb54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	691b      	ldr	r3, [r3, #16]
 800bb5c:	4975      	ldr	r1, [pc, #468]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f003 0308 	and.w	r3, r3, #8
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d010      	beq.n	800bb90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	695a      	ldr	r2, [r3, #20]
 800bb72:	4b70      	ldr	r3, [pc, #448]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bb74:	69db      	ldr	r3, [r3, #28]
 800bb76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bb7a:	429a      	cmp	r2, r3
 800bb7c:	d908      	bls.n	800bb90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bb7e:	4b6d      	ldr	r3, [pc, #436]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bb80:	69db      	ldr	r3, [r3, #28]
 800bb82:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	695b      	ldr	r3, [r3, #20]
 800bb8a:	496a      	ldr	r1, [pc, #424]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bb8c:	4313      	orrs	r3, r2
 800bb8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0310 	and.w	r3, r3, #16
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d010      	beq.n	800bbbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	699a      	ldr	r2, [r3, #24]
 800bba0:	4b64      	ldr	r3, [pc, #400]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bba2:	69db      	ldr	r3, [r3, #28]
 800bba4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d908      	bls.n	800bbbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bbac:	4b61      	ldr	r3, [pc, #388]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bbae:	69db      	ldr	r3, [r3, #28]
 800bbb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	699b      	ldr	r3, [r3, #24]
 800bbb8:	495e      	ldr	r1, [pc, #376]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f003 0320 	and.w	r3, r3, #32
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d010      	beq.n	800bbec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	69da      	ldr	r2, [r3, #28]
 800bbce:	4b59      	ldr	r3, [pc, #356]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d908      	bls.n	800bbec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bbda:	4b56      	ldr	r3, [pc, #344]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bbdc:	6a1b      	ldr	r3, [r3, #32]
 800bbde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	4953      	ldr	r1, [pc, #332]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bbe8:	4313      	orrs	r3, r2
 800bbea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 0302 	and.w	r3, r3, #2
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d010      	beq.n	800bc1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	68da      	ldr	r2, [r3, #12]
 800bbfc:	4b4d      	ldr	r3, [pc, #308]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bbfe:	699b      	ldr	r3, [r3, #24]
 800bc00:	f003 030f 	and.w	r3, r3, #15
 800bc04:	429a      	cmp	r2, r3
 800bc06:	d908      	bls.n	800bc1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bc08:	4b4a      	ldr	r3, [pc, #296]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc0a:	699b      	ldr	r3, [r3, #24]
 800bc0c:	f023 020f 	bic.w	r2, r3, #15
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	68db      	ldr	r3, [r3, #12]
 800bc14:	4947      	ldr	r1, [pc, #284]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc16:	4313      	orrs	r3, r2
 800bc18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	f003 0301 	and.w	r3, r3, #1
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d055      	beq.n	800bcd2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800bc26:	4b43      	ldr	r3, [pc, #268]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	4940      	ldr	r1, [pc, #256]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc34:	4313      	orrs	r3, r2
 800bc36:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	685b      	ldr	r3, [r3, #4]
 800bc3c:	2b02      	cmp	r3, #2
 800bc3e:	d107      	bne.n	800bc50 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bc40:	4b3c      	ldr	r3, [pc, #240]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d121      	bne.n	800bc90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e0f6      	b.n	800be3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	685b      	ldr	r3, [r3, #4]
 800bc54:	2b03      	cmp	r3, #3
 800bc56:	d107      	bne.n	800bc68 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bc58:	4b36      	ldr	r3, [pc, #216]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d115      	bne.n	800bc90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	e0ea      	b.n	800be3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	685b      	ldr	r3, [r3, #4]
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d107      	bne.n	800bc80 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bc70:	4b30      	ldr	r3, [pc, #192]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d109      	bne.n	800bc90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	e0de      	b.n	800be3e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc80:	4b2c      	ldr	r3, [pc, #176]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f003 0304 	and.w	r3, r3, #4
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	e0d6      	b.n	800be3e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bc90:	4b28      	ldr	r3, [pc, #160]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	f023 0207 	bic.w	r2, r3, #7
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	4925      	ldr	r1, [pc, #148]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bc9e:	4313      	orrs	r3, r2
 800bca0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bca2:	f7fb ff71 	bl	8007b88 <HAL_GetTick>
 800bca6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bca8:	e00a      	b.n	800bcc0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bcaa:	f7fb ff6d 	bl	8007b88 <HAL_GetTick>
 800bcae:	4602      	mov	r2, r0
 800bcb0:	697b      	ldr	r3, [r7, #20]
 800bcb2:	1ad3      	subs	r3, r2, r3
 800bcb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	d901      	bls.n	800bcc0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800bcbc:	2303      	movs	r3, #3
 800bcbe:	e0be      	b.n	800be3e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bcc0:	4b1c      	ldr	r3, [pc, #112]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bcc2:	691b      	ldr	r3, [r3, #16]
 800bcc4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	00db      	lsls	r3, r3, #3
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d1eb      	bne.n	800bcaa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	f003 0302 	and.w	r3, r3, #2
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d010      	beq.n	800bd00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	68da      	ldr	r2, [r3, #12]
 800bce2:	4b14      	ldr	r3, [pc, #80]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bce4:	699b      	ldr	r3, [r3, #24]
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d208      	bcs.n	800bd00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bcee:	4b11      	ldr	r3, [pc, #68]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bcf0:	699b      	ldr	r3, [r3, #24]
 800bcf2:	f023 020f 	bic.w	r2, r3, #15
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	68db      	ldr	r3, [r3, #12]
 800bcfa:	490e      	ldr	r1, [pc, #56]	; (800bd34 <HAL_RCC_ClockConfig+0x244>)
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bd00:	4b0b      	ldr	r3, [pc, #44]	; (800bd30 <HAL_RCC_ClockConfig+0x240>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 030f 	and.w	r3, r3, #15
 800bd08:	683a      	ldr	r2, [r7, #0]
 800bd0a:	429a      	cmp	r2, r3
 800bd0c:	d214      	bcs.n	800bd38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bd0e:	4b08      	ldr	r3, [pc, #32]	; (800bd30 <HAL_RCC_ClockConfig+0x240>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	f023 020f 	bic.w	r2, r3, #15
 800bd16:	4906      	ldr	r1, [pc, #24]	; (800bd30 <HAL_RCC_ClockConfig+0x240>)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	4313      	orrs	r3, r2
 800bd1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bd1e:	4b04      	ldr	r3, [pc, #16]	; (800bd30 <HAL_RCC_ClockConfig+0x240>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 030f 	and.w	r3, r3, #15
 800bd26:	683a      	ldr	r2, [r7, #0]
 800bd28:	429a      	cmp	r2, r3
 800bd2a:	d005      	beq.n	800bd38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	e086      	b.n	800be3e <HAL_RCC_ClockConfig+0x34e>
 800bd30:	52002000 	.word	0x52002000
 800bd34:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	f003 0304 	and.w	r3, r3, #4
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d010      	beq.n	800bd66 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	4b3f      	ldr	r3, [pc, #252]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d208      	bcs.n	800bd66 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800bd54:	4b3c      	ldr	r3, [pc, #240]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	691b      	ldr	r3, [r3, #16]
 800bd60:	4939      	ldr	r1, [pc, #228]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bd62:	4313      	orrs	r3, r2
 800bd64:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	f003 0308 	and.w	r3, r3, #8
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d010      	beq.n	800bd94 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	695a      	ldr	r2, [r3, #20]
 800bd76:	4b34      	ldr	r3, [pc, #208]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bd78:	69db      	ldr	r3, [r3, #28]
 800bd7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d208      	bcs.n	800bd94 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800bd82:	4b31      	ldr	r3, [pc, #196]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bd84:	69db      	ldr	r3, [r3, #28]
 800bd86:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	695b      	ldr	r3, [r3, #20]
 800bd8e:	492e      	ldr	r1, [pc, #184]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bd90:	4313      	orrs	r3, r2
 800bd92:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f003 0310 	and.w	r3, r3, #16
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d010      	beq.n	800bdc2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	699a      	ldr	r2, [r3, #24]
 800bda4:	4b28      	ldr	r3, [pc, #160]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bda6:	69db      	ldr	r3, [r3, #28]
 800bda8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdac:	429a      	cmp	r2, r3
 800bdae:	d208      	bcs.n	800bdc2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800bdb0:	4b25      	ldr	r3, [pc, #148]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bdb2:	69db      	ldr	r3, [r3, #28]
 800bdb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	4922      	ldr	r1, [pc, #136]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 0320 	and.w	r3, r3, #32
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d010      	beq.n	800bdf0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	69da      	ldr	r2, [r3, #28]
 800bdd2:	4b1d      	ldr	r3, [pc, #116]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bdd4:	6a1b      	ldr	r3, [r3, #32]
 800bdd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800bdda:	429a      	cmp	r2, r3
 800bddc:	d208      	bcs.n	800bdf0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800bdde:	4b1a      	ldr	r3, [pc, #104]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bde0:	6a1b      	ldr	r3, [r3, #32]
 800bde2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	69db      	ldr	r3, [r3, #28]
 800bdea:	4917      	ldr	r1, [pc, #92]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bdec:	4313      	orrs	r3, r2
 800bdee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800bdf0:	f000 f834 	bl	800be5c <HAL_RCC_GetSysClockFreq>
 800bdf4:	4602      	mov	r2, r0
 800bdf6:	4b14      	ldr	r3, [pc, #80]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800bdf8:	699b      	ldr	r3, [r3, #24]
 800bdfa:	0a1b      	lsrs	r3, r3, #8
 800bdfc:	f003 030f 	and.w	r3, r3, #15
 800be00:	4912      	ldr	r1, [pc, #72]	; (800be4c <HAL_RCC_ClockConfig+0x35c>)
 800be02:	5ccb      	ldrb	r3, [r1, r3]
 800be04:	f003 031f 	and.w	r3, r3, #31
 800be08:	fa22 f303 	lsr.w	r3, r2, r3
 800be0c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800be0e:	4b0e      	ldr	r3, [pc, #56]	; (800be48 <HAL_RCC_ClockConfig+0x358>)
 800be10:	699b      	ldr	r3, [r3, #24]
 800be12:	f003 030f 	and.w	r3, r3, #15
 800be16:	4a0d      	ldr	r2, [pc, #52]	; (800be4c <HAL_RCC_ClockConfig+0x35c>)
 800be18:	5cd3      	ldrb	r3, [r2, r3]
 800be1a:	f003 031f 	and.w	r3, r3, #31
 800be1e:	693a      	ldr	r2, [r7, #16]
 800be20:	fa22 f303 	lsr.w	r3, r2, r3
 800be24:	4a0a      	ldr	r2, [pc, #40]	; (800be50 <HAL_RCC_ClockConfig+0x360>)
 800be26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800be28:	4a0a      	ldr	r2, [pc, #40]	; (800be54 <HAL_RCC_ClockConfig+0x364>)
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800be2e:	4b0a      	ldr	r3, [pc, #40]	; (800be58 <HAL_RCC_ClockConfig+0x368>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4618      	mov	r0, r3
 800be34:	f7fb fe5e 	bl	8007af4 <HAL_InitTick>
 800be38:	4603      	mov	r3, r0
 800be3a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800be3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3718      	adds	r7, #24
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	58024400 	.word	0x58024400
 800be4c:	0801158c 	.word	0x0801158c
 800be50:	24000008 	.word	0x24000008
 800be54:	24000004 	.word	0x24000004
 800be58:	2400001c 	.word	0x2400001c

0800be5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b089      	sub	sp, #36	; 0x24
 800be60:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be62:	4bb3      	ldr	r3, [pc, #716]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800be64:	691b      	ldr	r3, [r3, #16]
 800be66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800be6a:	2b18      	cmp	r3, #24
 800be6c:	f200 8155 	bhi.w	800c11a <HAL_RCC_GetSysClockFreq+0x2be>
 800be70:	a201      	add	r2, pc, #4	; (adr r2, 800be78 <HAL_RCC_GetSysClockFreq+0x1c>)
 800be72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be76:	bf00      	nop
 800be78:	0800bedd 	.word	0x0800bedd
 800be7c:	0800c11b 	.word	0x0800c11b
 800be80:	0800c11b 	.word	0x0800c11b
 800be84:	0800c11b 	.word	0x0800c11b
 800be88:	0800c11b 	.word	0x0800c11b
 800be8c:	0800c11b 	.word	0x0800c11b
 800be90:	0800c11b 	.word	0x0800c11b
 800be94:	0800c11b 	.word	0x0800c11b
 800be98:	0800bf03 	.word	0x0800bf03
 800be9c:	0800c11b 	.word	0x0800c11b
 800bea0:	0800c11b 	.word	0x0800c11b
 800bea4:	0800c11b 	.word	0x0800c11b
 800bea8:	0800c11b 	.word	0x0800c11b
 800beac:	0800c11b 	.word	0x0800c11b
 800beb0:	0800c11b 	.word	0x0800c11b
 800beb4:	0800c11b 	.word	0x0800c11b
 800beb8:	0800bf09 	.word	0x0800bf09
 800bebc:	0800c11b 	.word	0x0800c11b
 800bec0:	0800c11b 	.word	0x0800c11b
 800bec4:	0800c11b 	.word	0x0800c11b
 800bec8:	0800c11b 	.word	0x0800c11b
 800becc:	0800c11b 	.word	0x0800c11b
 800bed0:	0800c11b 	.word	0x0800c11b
 800bed4:	0800c11b 	.word	0x0800c11b
 800bed8:	0800bf0f 	.word	0x0800bf0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bedc:	4b94      	ldr	r3, [pc, #592]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0320 	and.w	r3, r3, #32
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d009      	beq.n	800befc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bee8:	4b91      	ldr	r3, [pc, #580]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	08db      	lsrs	r3, r3, #3
 800beee:	f003 0303 	and.w	r3, r3, #3
 800bef2:	4a90      	ldr	r2, [pc, #576]	; (800c134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bef4:	fa22 f303 	lsr.w	r3, r2, r3
 800bef8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800befa:	e111      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800befc:	4b8d      	ldr	r3, [pc, #564]	; (800c134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800befe:	61bb      	str	r3, [r7, #24]
    break;
 800bf00:	e10e      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800bf02:	4b8d      	ldr	r3, [pc, #564]	; (800c138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bf04:	61bb      	str	r3, [r7, #24]
    break;
 800bf06:	e10b      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800bf08:	4b8c      	ldr	r3, [pc, #560]	; (800c13c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bf0a:	61bb      	str	r3, [r7, #24]
    break;
 800bf0c:	e108      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bf0e:	4b88      	ldr	r3, [pc, #544]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bf18:	4b85      	ldr	r3, [pc, #532]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1c:	091b      	lsrs	r3, r3, #4
 800bf1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bf24:	4b82      	ldr	r3, [pc, #520]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf28:	f003 0301 	and.w	r3, r3, #1
 800bf2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bf2e:	4b80      	ldr	r3, [pc, #512]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf32:	08db      	lsrs	r3, r3, #3
 800bf34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bf38:	68fa      	ldr	r2, [r7, #12]
 800bf3a:	fb02 f303 	mul.w	r3, r2, r3
 800bf3e:	ee07 3a90 	vmov	s15, r3
 800bf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	f000 80e1 	beq.w	800c114 <HAL_RCC_GetSysClockFreq+0x2b8>
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	f000 8083 	beq.w	800c060 <HAL_RCC_GetSysClockFreq+0x204>
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	f200 80a1 	bhi.w	800c0a4 <HAL_RCC_GetSysClockFreq+0x248>
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d003      	beq.n	800bf70 <HAL_RCC_GetSysClockFreq+0x114>
 800bf68:	697b      	ldr	r3, [r7, #20]
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d056      	beq.n	800c01c <HAL_RCC_GetSysClockFreq+0x1c0>
 800bf6e:	e099      	b.n	800c0a4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf70:	4b6f      	ldr	r3, [pc, #444]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	f003 0320 	and.w	r3, r3, #32
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d02d      	beq.n	800bfd8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf7c:	4b6c      	ldr	r3, [pc, #432]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	08db      	lsrs	r3, r3, #3
 800bf82:	f003 0303 	and.w	r3, r3, #3
 800bf86:	4a6b      	ldr	r2, [pc, #428]	; (800c134 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bf88:	fa22 f303 	lsr.w	r3, r2, r3
 800bf8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	ee07 3a90 	vmov	s15, r3
 800bf94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	ee07 3a90 	vmov	s15, r3
 800bf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfa6:	4b62      	ldr	r3, [pc, #392]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfae:	ee07 3a90 	vmov	s15, r3
 800bfb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfb6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bfba:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bfbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bfd6:	e087      	b.n	800c0e8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfd8:	693b      	ldr	r3, [r7, #16]
 800bfda:	ee07 3a90 	vmov	s15, r3
 800bfde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c144 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bfe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfea:	4b51      	ldr	r3, [pc, #324]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff2:	ee07 3a90 	vmov	s15, r3
 800bff6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bffa:	ed97 6a02 	vldr	s12, [r7, #8]
 800bffe:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c002:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c006:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c00a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c00e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c012:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c016:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c01a:	e065      	b.n	800c0e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	ee07 3a90 	vmov	s15, r3
 800c022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c026:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c148 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c02a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c02e:	4b40      	ldr	r3, [pc, #256]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c032:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c036:	ee07 3a90 	vmov	s15, r3
 800c03a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c042:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c046:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c04a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c04e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c052:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c05e:	e043      	b.n	800c0e8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	ee07 3a90 	vmov	s15, r3
 800c066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c06a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c14c <HAL_RCC_GetSysClockFreq+0x2f0>
 800c06e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c072:	4b2f      	ldr	r3, [pc, #188]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c082:	ed97 6a02 	vldr	s12, [r7, #8]
 800c086:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c08a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c08e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c092:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c096:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c09a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c09e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0a2:	e021      	b.n	800c0e8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	ee07 3a90 	vmov	s15, r3
 800c0aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ae:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c148 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c0b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0b6:	4b1e      	ldr	r3, [pc, #120]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0be:	ee07 3a90 	vmov	s15, r3
 800c0c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c0ca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c140 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c0ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c0da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0e6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c0e8:	4b11      	ldr	r3, [pc, #68]	; (800c130 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c0ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0ec:	0a5b      	lsrs	r3, r3, #9
 800c0ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	ee07 3a90 	vmov	s15, r3
 800c0fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c100:	edd7 6a07 	vldr	s13, [r7, #28]
 800c104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c10c:	ee17 3a90 	vmov	r3, s15
 800c110:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c112:	e005      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c114:	2300      	movs	r3, #0
 800c116:	61bb      	str	r3, [r7, #24]
    break;
 800c118:	e002      	b.n	800c120 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c11a:	4b07      	ldr	r3, [pc, #28]	; (800c138 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c11c:	61bb      	str	r3, [r7, #24]
    break;
 800c11e:	bf00      	nop
  }

  return sysclockfreq;
 800c120:	69bb      	ldr	r3, [r7, #24]
}
 800c122:	4618      	mov	r0, r3
 800c124:	3724      	adds	r7, #36	; 0x24
 800c126:	46bd      	mov	sp, r7
 800c128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12c:	4770      	bx	lr
 800c12e:	bf00      	nop
 800c130:	58024400 	.word	0x58024400
 800c134:	03d09000 	.word	0x03d09000
 800c138:	003d0900 	.word	0x003d0900
 800c13c:	007a1200 	.word	0x007a1200
 800c140:	46000000 	.word	0x46000000
 800c144:	4c742400 	.word	0x4c742400
 800c148:	4a742400 	.word	0x4a742400
 800c14c:	4af42400 	.word	0x4af42400

0800c150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c156:	f7ff fe81 	bl	800be5c <HAL_RCC_GetSysClockFreq>
 800c15a:	4602      	mov	r2, r0
 800c15c:	4b10      	ldr	r3, [pc, #64]	; (800c1a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	0a1b      	lsrs	r3, r3, #8
 800c162:	f003 030f 	and.w	r3, r3, #15
 800c166:	490f      	ldr	r1, [pc, #60]	; (800c1a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c168:	5ccb      	ldrb	r3, [r1, r3]
 800c16a:	f003 031f 	and.w	r3, r3, #31
 800c16e:	fa22 f303 	lsr.w	r3, r2, r3
 800c172:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c174:	4b0a      	ldr	r3, [pc, #40]	; (800c1a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c176:	699b      	ldr	r3, [r3, #24]
 800c178:	f003 030f 	and.w	r3, r3, #15
 800c17c:	4a09      	ldr	r2, [pc, #36]	; (800c1a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c17e:	5cd3      	ldrb	r3, [r2, r3]
 800c180:	f003 031f 	and.w	r3, r3, #31
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	fa22 f303 	lsr.w	r3, r2, r3
 800c18a:	4a07      	ldr	r2, [pc, #28]	; (800c1a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c18c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c18e:	4a07      	ldr	r2, [pc, #28]	; (800c1ac <HAL_RCC_GetHCLKFreq+0x5c>)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c194:	4b04      	ldr	r3, [pc, #16]	; (800c1a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c196:	681b      	ldr	r3, [r3, #0]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3708      	adds	r7, #8
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	58024400 	.word	0x58024400
 800c1a4:	0801158c 	.word	0x0801158c
 800c1a8:	24000008 	.word	0x24000008
 800c1ac:	24000004 	.word	0x24000004

0800c1b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c1b4:	f7ff ffcc 	bl	800c150 <HAL_RCC_GetHCLKFreq>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	4b06      	ldr	r3, [pc, #24]	; (800c1d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c1bc:	69db      	ldr	r3, [r3, #28]
 800c1be:	091b      	lsrs	r3, r3, #4
 800c1c0:	f003 0307 	and.w	r3, r3, #7
 800c1c4:	4904      	ldr	r1, [pc, #16]	; (800c1d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c1c6:	5ccb      	ldrb	r3, [r1, r3]
 800c1c8:	f003 031f 	and.w	r3, r3, #31
 800c1cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	58024400 	.word	0x58024400
 800c1d8:	0801158c 	.word	0x0801158c

0800c1dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800c1e0:	f7ff ffb6 	bl	800c150 <HAL_RCC_GetHCLKFreq>
 800c1e4:	4602      	mov	r2, r0
 800c1e6:	4b06      	ldr	r3, [pc, #24]	; (800c200 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c1e8:	69db      	ldr	r3, [r3, #28]
 800c1ea:	0a1b      	lsrs	r3, r3, #8
 800c1ec:	f003 0307 	and.w	r3, r3, #7
 800c1f0:	4904      	ldr	r1, [pc, #16]	; (800c204 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c1f2:	5ccb      	ldrb	r3, [r1, r3]
 800c1f4:	f003 031f 	and.w	r3, r3, #31
 800c1f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	bd80      	pop	{r7, pc}
 800c200:	58024400 	.word	0x58024400
 800c204:	0801158c 	.word	0x0801158c

0800c208 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b086      	sub	sp, #24
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c210:	2300      	movs	r3, #0
 800c212:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c214:	2300      	movs	r3, #0
 800c216:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c220:	2b00      	cmp	r3, #0
 800c222:	d03f      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c228:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c22c:	d02a      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800c22e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c232:	d824      	bhi.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c234:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c238:	d018      	beq.n	800c26c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800c23a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c23e:	d81e      	bhi.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800c240:	2b00      	cmp	r3, #0
 800c242:	d003      	beq.n	800c24c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c244:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c248:	d007      	beq.n	800c25a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800c24a:	e018      	b.n	800c27e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c24c:	4ba3      	ldr	r3, [pc, #652]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c24e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c250:	4aa2      	ldr	r2, [pc, #648]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c256:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c258:	e015      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	3304      	adds	r3, #4
 800c25e:	2102      	movs	r1, #2
 800c260:	4618      	mov	r0, r3
 800c262:	f001 f9d5 	bl	800d610 <RCCEx_PLL2_Config>
 800c266:	4603      	mov	r3, r0
 800c268:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c26a:	e00c      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3324      	adds	r3, #36	; 0x24
 800c270:	2102      	movs	r1, #2
 800c272:	4618      	mov	r0, r3
 800c274:	f001 fa7e 	bl	800d774 <RCCEx_PLL3_Config>
 800c278:	4603      	mov	r3, r0
 800c27a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800c27c:	e003      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c27e:	2301      	movs	r3, #1
 800c280:	75fb      	strb	r3, [r7, #23]
      break;
 800c282:	e000      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800c284:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c286:	7dfb      	ldrb	r3, [r7, #23]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d109      	bne.n	800c2a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c28c:	4b93      	ldr	r3, [pc, #588]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c28e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c290:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c298:	4990      	ldr	r1, [pc, #576]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c29a:	4313      	orrs	r3, r2
 800c29c:	650b      	str	r3, [r1, #80]	; 0x50
 800c29e:	e001      	b.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a0:	7dfb      	ldrb	r3, [r7, #23]
 800c2a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d03d      	beq.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2b4:	2b04      	cmp	r3, #4
 800c2b6:	d826      	bhi.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800c2b8:	a201      	add	r2, pc, #4	; (adr r2, 800c2c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800c2ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2be:	bf00      	nop
 800c2c0:	0800c2d5 	.word	0x0800c2d5
 800c2c4:	0800c2e3 	.word	0x0800c2e3
 800c2c8:	0800c2f5 	.word	0x0800c2f5
 800c2cc:	0800c30d 	.word	0x0800c30d
 800c2d0:	0800c30d 	.word	0x0800c30d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2d4:	4b81      	ldr	r3, [pc, #516]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2d8:	4a80      	ldr	r2, [pc, #512]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c2da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c2e0:	e015      	b.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	3304      	adds	r3, #4
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f001 f991 	bl	800d610 <RCCEx_PLL2_Config>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c2f2:	e00c      	b.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3324      	adds	r3, #36	; 0x24
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f001 fa3a 	bl	800d774 <RCCEx_PLL3_Config>
 800c300:	4603      	mov	r3, r0
 800c302:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c304:	e003      	b.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c306:	2301      	movs	r3, #1
 800c308:	75fb      	strb	r3, [r7, #23]
      break;
 800c30a:	e000      	b.n	800c30e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800c30c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c30e:	7dfb      	ldrb	r3, [r7, #23]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d109      	bne.n	800c328 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c314:	4b71      	ldr	r3, [pc, #452]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c318:	f023 0207 	bic.w	r2, r3, #7
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c320:	496e      	ldr	r1, [pc, #440]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c322:	4313      	orrs	r3, r2
 800c324:	650b      	str	r3, [r1, #80]	; 0x50
 800c326:	e001      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c328:	7dfb      	ldrb	r3, [r7, #23]
 800c32a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c334:	2b00      	cmp	r3, #0
 800c336:	d042      	beq.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c33c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c340:	d02b      	beq.n	800c39a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800c342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c346:	d825      	bhi.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c348:	2bc0      	cmp	r3, #192	; 0xc0
 800c34a:	d028      	beq.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c34c:	2bc0      	cmp	r3, #192	; 0xc0
 800c34e:	d821      	bhi.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c350:	2b80      	cmp	r3, #128	; 0x80
 800c352:	d016      	beq.n	800c382 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800c354:	2b80      	cmp	r3, #128	; 0x80
 800c356:	d81d      	bhi.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d002      	beq.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800c35c:	2b40      	cmp	r3, #64	; 0x40
 800c35e:	d007      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800c360:	e018      	b.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c362:	4b5e      	ldr	r3, [pc, #376]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c366:	4a5d      	ldr	r2, [pc, #372]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c36c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c36e:	e017      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	3304      	adds	r3, #4
 800c374:	2100      	movs	r1, #0
 800c376:	4618      	mov	r0, r3
 800c378:	f001 f94a 	bl	800d610 <RCCEx_PLL2_Config>
 800c37c:	4603      	mov	r3, r0
 800c37e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c380:	e00e      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	3324      	adds	r3, #36	; 0x24
 800c386:	2100      	movs	r1, #0
 800c388:	4618      	mov	r0, r3
 800c38a:	f001 f9f3 	bl	800d774 <RCCEx_PLL3_Config>
 800c38e:	4603      	mov	r3, r0
 800c390:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800c392:	e005      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c394:	2301      	movs	r3, #1
 800c396:	75fb      	strb	r3, [r7, #23]
      break;
 800c398:	e002      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c39a:	bf00      	nop
 800c39c:	e000      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800c39e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c3a0:	7dfb      	ldrb	r3, [r7, #23]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d109      	bne.n	800c3ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800c3a6:	4b4d      	ldr	r3, [pc, #308]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3aa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3b2:	494a      	ldr	r1, [pc, #296]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c3b4:	4313      	orrs	r3, r2
 800c3b6:	650b      	str	r3, [r1, #80]	; 0x50
 800c3b8:	e001      	b.n	800c3be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3ba:	7dfb      	ldrb	r3, [r7, #23]
 800c3bc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d049      	beq.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c3d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3d4:	d030      	beq.n	800c438 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800c3d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3da:	d82a      	bhi.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c3dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3e0:	d02c      	beq.n	800c43c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800c3e2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3e6:	d824      	bhi.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c3e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3ec:	d018      	beq.n	800c420 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800c3ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3f2:	d81e      	bhi.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d003      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800c3f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c3fc:	d007      	beq.n	800c40e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800c3fe:	e018      	b.n	800c432 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c400:	4b36      	ldr	r3, [pc, #216]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c404:	4a35      	ldr	r2, [pc, #212]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c40a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c40c:	e017      	b.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3304      	adds	r3, #4
 800c412:	2100      	movs	r1, #0
 800c414:	4618      	mov	r0, r3
 800c416:	f001 f8fb 	bl	800d610 <RCCEx_PLL2_Config>
 800c41a:	4603      	mov	r3, r0
 800c41c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c41e:	e00e      	b.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3324      	adds	r3, #36	; 0x24
 800c424:	2100      	movs	r1, #0
 800c426:	4618      	mov	r0, r3
 800c428:	f001 f9a4 	bl	800d774 <RCCEx_PLL3_Config>
 800c42c:	4603      	mov	r3, r0
 800c42e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c430:	e005      	b.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	75fb      	strb	r3, [r7, #23]
      break;
 800c436:	e002      	b.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c438:	bf00      	nop
 800c43a:	e000      	b.n	800c43e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c43c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c444:	4b25      	ldr	r3, [pc, #148]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c448:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c452:	4922      	ldr	r1, [pc, #136]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c454:	4313      	orrs	r3, r2
 800c456:	658b      	str	r3, [r1, #88]	; 0x58
 800c458:	e001      	b.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c45a:	7dfb      	ldrb	r3, [r7, #23]
 800c45c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c466:	2b00      	cmp	r3, #0
 800c468:	d04b      	beq.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c474:	d030      	beq.n	800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c476:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c47a:	d82a      	bhi.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c47c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c480:	d02e      	beq.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800c482:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c486:	d824      	bhi.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c48c:	d018      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c48e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c492:	d81e      	bhi.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c498:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c49c:	d007      	beq.n	800c4ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c49e:	e018      	b.n	800c4d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4a0:	4b0e      	ldr	r3, [pc, #56]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	4a0d      	ldr	r2, [pc, #52]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c4a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c4aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4ac:	e019      	b.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	3304      	adds	r3, #4
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f001 f8ab 	bl	800d610 <RCCEx_PLL2_Config>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c4be:	e010      	b.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	3324      	adds	r3, #36	; 0x24
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f001 f954 	bl	800d774 <RCCEx_PLL3_Config>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c4d0:	e007      	b.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800c4d6:	e004      	b.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800c4d8:	bf00      	nop
 800c4da:	e002      	b.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c4dc:	58024400 	.word	0x58024400
      break;
 800c4e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c4e2:	7dfb      	ldrb	r3, [r7, #23]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d10a      	bne.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c4e8:	4b99      	ldr	r3, [pc, #612]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c4ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4ec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c4f6:	4996      	ldr	r1, [pc, #600]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c4f8:	4313      	orrs	r3, r2
 800c4fa:	658b      	str	r3, [r1, #88]	; 0x58
 800c4fc:	e001      	b.n	800c502 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4fe:	7dfb      	ldrb	r3, [r7, #23]
 800c500:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d032      	beq.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c512:	2b30      	cmp	r3, #48	; 0x30
 800c514:	d01c      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c516:	2b30      	cmp	r3, #48	; 0x30
 800c518:	d817      	bhi.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c51a:	2b20      	cmp	r3, #32
 800c51c:	d00c      	beq.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c51e:	2b20      	cmp	r3, #32
 800c520:	d813      	bhi.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c522:	2b00      	cmp	r3, #0
 800c524:	d016      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c526:	2b10      	cmp	r3, #16
 800c528:	d10f      	bne.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c52a:	4b89      	ldr	r3, [pc, #548]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c52c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52e:	4a88      	ldr	r2, [pc, #544]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c534:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c536:	e00e      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	3304      	adds	r3, #4
 800c53c:	2102      	movs	r1, #2
 800c53e:	4618      	mov	r0, r3
 800c540:	f001 f866 	bl	800d610 <RCCEx_PLL2_Config>
 800c544:	4603      	mov	r3, r0
 800c546:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c548:	e005      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	75fb      	strb	r3, [r7, #23]
      break;
 800c54e:	e002      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c550:	bf00      	nop
 800c552:	e000      	b.n	800c556 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c554:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c556:	7dfb      	ldrb	r3, [r7, #23]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d109      	bne.n	800c570 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c55c:	4b7c      	ldr	r3, [pc, #496]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c55e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c560:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c568:	4979      	ldr	r1, [pc, #484]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c56a:	4313      	orrs	r3, r2
 800c56c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c56e:	e001      	b.n	800c574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c570:	7dfb      	ldrb	r3, [r7, #23]
 800c572:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d047      	beq.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c588:	d030      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c58a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c58e:	d82a      	bhi.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c594:	d02c      	beq.n	800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c596:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c59a:	d824      	bhi.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c59c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5a0:	d018      	beq.n	800c5d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c5a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c5a6:	d81e      	bhi.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d003      	beq.n	800c5b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c5ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c5b0:	d007      	beq.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c5b2:	e018      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5b4:	4b66      	ldr	r3, [pc, #408]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b8:	4a65      	ldr	r2, [pc, #404]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c5ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c5be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c5c0:	e017      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	3304      	adds	r3, #4
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f001 f821 	bl	800d610 <RCCEx_PLL2_Config>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c5d2:	e00e      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	3324      	adds	r3, #36	; 0x24
 800c5d8:	2100      	movs	r1, #0
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f001 f8ca 	bl	800d774 <RCCEx_PLL3_Config>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c5e4:	e005      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5e6:	2301      	movs	r3, #1
 800c5e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c5ea:	e002      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c5ec:	bf00      	nop
 800c5ee:	e000      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c5f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5f2:	7dfb      	ldrb	r3, [r7, #23]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d109      	bne.n	800c60c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c5f8:	4b55      	ldr	r3, [pc, #340]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c5fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c604:	4952      	ldr	r1, [pc, #328]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c606:	4313      	orrs	r3, r2
 800c608:	650b      	str	r3, [r1, #80]	; 0x50
 800c60a:	e001      	b.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c60c:	7dfb      	ldrb	r3, [r7, #23]
 800c60e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d049      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c624:	d02e      	beq.n	800c684 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c62a:	d828      	bhi.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c62c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c630:	d02a      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c632:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c636:	d822      	bhi.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c638:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c63c:	d026      	beq.n	800c68c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c63e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c642:	d81c      	bhi.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c648:	d010      	beq.n	800c66c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800c64a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c64e:	d816      	bhi.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c650:	2b00      	cmp	r3, #0
 800c652:	d01d      	beq.n	800c690 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c658:	d111      	bne.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	3304      	adds	r3, #4
 800c65e:	2101      	movs	r1, #1
 800c660:	4618      	mov	r0, r3
 800c662:	f000 ffd5 	bl	800d610 <RCCEx_PLL2_Config>
 800c666:	4603      	mov	r3, r0
 800c668:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c66a:	e012      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	3324      	adds	r3, #36	; 0x24
 800c670:	2101      	movs	r1, #1
 800c672:	4618      	mov	r0, r3
 800c674:	f001 f87e 	bl	800d774 <RCCEx_PLL3_Config>
 800c678:	4603      	mov	r3, r0
 800c67a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c67c:	e009      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c67e:	2301      	movs	r3, #1
 800c680:	75fb      	strb	r3, [r7, #23]
      break;
 800c682:	e006      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c684:	bf00      	nop
 800c686:	e004      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c688:	bf00      	nop
 800c68a:	e002      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c68c:	bf00      	nop
 800c68e:	e000      	b.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c690:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c692:	7dfb      	ldrb	r3, [r7, #23]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d109      	bne.n	800c6ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c698:	4b2d      	ldr	r3, [pc, #180]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c69a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c69c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c6a4:	492a      	ldr	r1, [pc, #168]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c6a6:	4313      	orrs	r3, r2
 800c6a8:	650b      	str	r3, [r1, #80]	; 0x50
 800c6aa:	e001      	b.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
 800c6ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d04d      	beq.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c6c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6c6:	d02e      	beq.n	800c726 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c6c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6cc:	d828      	bhi.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6d2:	d02a      	beq.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6d8:	d822      	bhi.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c6da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6de:	d026      	beq.n	800c72e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800c6e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c6e4:	d81c      	bhi.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c6e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6ea:	d010      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c6ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6f0:	d816      	bhi.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d01d      	beq.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800c6f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6fa:	d111      	bne.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	3304      	adds	r3, #4
 800c700:	2101      	movs	r1, #1
 800c702:	4618      	mov	r0, r3
 800c704:	f000 ff84 	bl	800d610 <RCCEx_PLL2_Config>
 800c708:	4603      	mov	r3, r0
 800c70a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c70c:	e012      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	3324      	adds	r3, #36	; 0x24
 800c712:	2101      	movs	r1, #1
 800c714:	4618      	mov	r0, r3
 800c716:	f001 f82d 	bl	800d774 <RCCEx_PLL3_Config>
 800c71a:	4603      	mov	r3, r0
 800c71c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c71e:	e009      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	75fb      	strb	r3, [r7, #23]
      break;
 800c724:	e006      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c726:	bf00      	nop
 800c728:	e004      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c72a:	bf00      	nop
 800c72c:	e002      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c72e:	bf00      	nop
 800c730:	e000      	b.n	800c734 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c732:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c734:	7dfb      	ldrb	r3, [r7, #23]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d10c      	bne.n	800c754 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c73a:	4b05      	ldr	r3, [pc, #20]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c73c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c73e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c748:	4901      	ldr	r1, [pc, #4]	; (800c750 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c74a:	4313      	orrs	r3, r2
 800c74c:	658b      	str	r3, [r1, #88]	; 0x58
 800c74e:	e003      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c750:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c754:	7dfb      	ldrb	r3, [r7, #23]
 800c756:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d02f      	beq.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c76c:	d00e      	beq.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800c76e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c772:	d814      	bhi.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x596>
 800c774:	2b00      	cmp	r3, #0
 800c776:	d015      	beq.n	800c7a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800c778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c77c:	d10f      	bne.n	800c79e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c77e:	4baf      	ldr	r3, [pc, #700]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c782:	4aae      	ldr	r2, [pc, #696]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c784:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c788:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c78a:	e00c      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	3304      	adds	r3, #4
 800c790:	2101      	movs	r1, #1
 800c792:	4618      	mov	r0, r3
 800c794:	f000 ff3c 	bl	800d610 <RCCEx_PLL2_Config>
 800c798:	4603      	mov	r3, r0
 800c79a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c79c:	e003      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c7a2:	e000      	b.n	800c7a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800c7a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d109      	bne.n	800c7c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c7ac:	4ba3      	ldr	r3, [pc, #652]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c7ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7b8:	49a0      	ldr	r1, [pc, #640]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	650b      	str	r3, [r1, #80]	; 0x50
 800c7be:	e001      	b.n	800c7c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7c0:	7dfb      	ldrb	r3, [r7, #23]
 800c7c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d032      	beq.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7d4:	2b03      	cmp	r3, #3
 800c7d6:	d81b      	bhi.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c7d8:	a201      	add	r2, pc, #4	; (adr r2, 800c7e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7de:	bf00      	nop
 800c7e0:	0800c817 	.word	0x0800c817
 800c7e4:	0800c7f1 	.word	0x0800c7f1
 800c7e8:	0800c7ff 	.word	0x0800c7ff
 800c7ec:	0800c817 	.word	0x0800c817
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c7f0:	4b92      	ldr	r3, [pc, #584]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7f4:	4a91      	ldr	r2, [pc, #580]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c7f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c7fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c7fc:	e00c      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	3304      	adds	r3, #4
 800c802:	2102      	movs	r1, #2
 800c804:	4618      	mov	r0, r3
 800c806:	f000 ff03 	bl	800d610 <RCCEx_PLL2_Config>
 800c80a:	4603      	mov	r3, r0
 800c80c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c80e:	e003      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	75fb      	strb	r3, [r7, #23]
      break;
 800c814:	e000      	b.n	800c818 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c816:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c818:	7dfb      	ldrb	r3, [r7, #23]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d109      	bne.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c81e:	4b87      	ldr	r3, [pc, #540]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c822:	f023 0203 	bic.w	r2, r3, #3
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c82a:	4984      	ldr	r1, [pc, #528]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c82c:	4313      	orrs	r3, r2
 800c82e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c830:	e001      	b.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c832:	7dfb      	ldrb	r3, [r7, #23]
 800c834:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c83e:	2b00      	cmp	r3, #0
 800c840:	f000 8086 	beq.w	800c950 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c844:	4b7e      	ldr	r3, [pc, #504]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4a7d      	ldr	r2, [pc, #500]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c84a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c84e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c850:	f7fb f99a 	bl	8007b88 <HAL_GetTick>
 800c854:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c856:	e009      	b.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c858:	f7fb f996 	bl	8007b88 <HAL_GetTick>
 800c85c:	4602      	mov	r2, r0
 800c85e:	693b      	ldr	r3, [r7, #16]
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	2b64      	cmp	r3, #100	; 0x64
 800c864:	d902      	bls.n	800c86c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c866:	2303      	movs	r3, #3
 800c868:	75fb      	strb	r3, [r7, #23]
        break;
 800c86a:	e005      	b.n	800c878 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c86c:	4b74      	ldr	r3, [pc, #464]	; (800ca40 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c874:	2b00      	cmp	r3, #0
 800c876:	d0ef      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c878:	7dfb      	ldrb	r3, [r7, #23]
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d166      	bne.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c87e:	4b6f      	ldr	r3, [pc, #444]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c888:	4053      	eors	r3, r2
 800c88a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d013      	beq.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c892:	4b6a      	ldr	r3, [pc, #424]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c89a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c89c:	4b67      	ldr	r3, [pc, #412]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c89e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8a0:	4a66      	ldr	r2, [pc, #408]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c8a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c8a8:	4b64      	ldr	r3, [pc, #400]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ac:	4a63      	ldr	r2, [pc, #396]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c8b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c8b4:	4a61      	ldr	r2, [pc, #388]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8c4:	d115      	bne.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8c6:	f7fb f95f 	bl	8007b88 <HAL_GetTick>
 800c8ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c8cc:	e00b      	b.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c8ce:	f7fb f95b 	bl	8007b88 <HAL_GetTick>
 800c8d2:	4602      	mov	r2, r0
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	1ad3      	subs	r3, r2, r3
 800c8d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8dc:	4293      	cmp	r3, r2
 800c8de:	d902      	bls.n	800c8e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c8e0:	2303      	movs	r3, #3
 800c8e2:	75fb      	strb	r3, [r7, #23]
            break;
 800c8e4:	e005      	b.n	800c8f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c8e6:	4b55      	ldr	r3, [pc, #340]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c8e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ea:	f003 0302 	and.w	r3, r3, #2
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0ed      	beq.n	800c8ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d126      	bne.n	800c946 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c8fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c906:	d10d      	bne.n	800c924 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c908:	4b4c      	ldr	r3, [pc, #304]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c916:	0919      	lsrs	r1, r3, #4
 800c918:	4b4a      	ldr	r3, [pc, #296]	; (800ca44 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800c91a:	400b      	ands	r3, r1
 800c91c:	4947      	ldr	r1, [pc, #284]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c91e:	4313      	orrs	r3, r2
 800c920:	610b      	str	r3, [r1, #16]
 800c922:	e005      	b.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c924:	4b45      	ldr	r3, [pc, #276]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	4a44      	ldr	r2, [pc, #272]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c92a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c92e:	6113      	str	r3, [r2, #16]
 800c930:	4b42      	ldr	r3, [pc, #264]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c93a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c93e:	493f      	ldr	r1, [pc, #252]	; (800ca3c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c940:	4313      	orrs	r3, r2
 800c942:	670b      	str	r3, [r1, #112]	; 0x70
 800c944:	e004      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	75bb      	strb	r3, [r7, #22]
 800c94a:	e001      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 0301 	and.w	r3, r3, #1
 800c958:	2b00      	cmp	r3, #0
 800c95a:	f000 8085 	beq.w	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c962:	2b28      	cmp	r3, #40	; 0x28
 800c964:	d866      	bhi.n	800ca34 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c966:	a201      	add	r2, pc, #4	; (adr r2, 800c96c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c96c:	0800ca49 	.word	0x0800ca49
 800c970:	0800ca35 	.word	0x0800ca35
 800c974:	0800ca35 	.word	0x0800ca35
 800c978:	0800ca35 	.word	0x0800ca35
 800c97c:	0800ca35 	.word	0x0800ca35
 800c980:	0800ca35 	.word	0x0800ca35
 800c984:	0800ca35 	.word	0x0800ca35
 800c988:	0800ca35 	.word	0x0800ca35
 800c98c:	0800ca11 	.word	0x0800ca11
 800c990:	0800ca35 	.word	0x0800ca35
 800c994:	0800ca35 	.word	0x0800ca35
 800c998:	0800ca35 	.word	0x0800ca35
 800c99c:	0800ca35 	.word	0x0800ca35
 800c9a0:	0800ca35 	.word	0x0800ca35
 800c9a4:	0800ca35 	.word	0x0800ca35
 800c9a8:	0800ca35 	.word	0x0800ca35
 800c9ac:	0800ca23 	.word	0x0800ca23
 800c9b0:	0800ca35 	.word	0x0800ca35
 800c9b4:	0800ca35 	.word	0x0800ca35
 800c9b8:	0800ca35 	.word	0x0800ca35
 800c9bc:	0800ca35 	.word	0x0800ca35
 800c9c0:	0800ca35 	.word	0x0800ca35
 800c9c4:	0800ca35 	.word	0x0800ca35
 800c9c8:	0800ca35 	.word	0x0800ca35
 800c9cc:	0800ca49 	.word	0x0800ca49
 800c9d0:	0800ca35 	.word	0x0800ca35
 800c9d4:	0800ca35 	.word	0x0800ca35
 800c9d8:	0800ca35 	.word	0x0800ca35
 800c9dc:	0800ca35 	.word	0x0800ca35
 800c9e0:	0800ca35 	.word	0x0800ca35
 800c9e4:	0800ca35 	.word	0x0800ca35
 800c9e8:	0800ca35 	.word	0x0800ca35
 800c9ec:	0800ca49 	.word	0x0800ca49
 800c9f0:	0800ca35 	.word	0x0800ca35
 800c9f4:	0800ca35 	.word	0x0800ca35
 800c9f8:	0800ca35 	.word	0x0800ca35
 800c9fc:	0800ca35 	.word	0x0800ca35
 800ca00:	0800ca35 	.word	0x0800ca35
 800ca04:	0800ca35 	.word	0x0800ca35
 800ca08:	0800ca35 	.word	0x0800ca35
 800ca0c:	0800ca49 	.word	0x0800ca49
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3304      	adds	r3, #4
 800ca14:	2101      	movs	r1, #1
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 fdfa 	bl	800d610 <RCCEx_PLL2_Config>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ca20:	e013      	b.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	3324      	adds	r3, #36	; 0x24
 800ca26:	2101      	movs	r1, #1
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 fea3 	bl	800d774 <RCCEx_PLL3_Config>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ca32:	e00a      	b.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	75fb      	strb	r3, [r7, #23]
      break;
 800ca38:	e007      	b.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800ca3a:	bf00      	nop
 800ca3c:	58024400 	.word	0x58024400
 800ca40:	58024800 	.word	0x58024800
 800ca44:	00ffffcf 	.word	0x00ffffcf
      break;
 800ca48:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d109      	bne.n	800ca64 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ca50:	4b96      	ldr	r3, [pc, #600]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ca52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca54:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ca5c:	4993      	ldr	r1, [pc, #588]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	654b      	str	r3, [r1, #84]	; 0x54
 800ca62:	e001      	b.n	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca64:	7dfb      	ldrb	r3, [r7, #23]
 800ca66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	f003 0302 	and.w	r3, r3, #2
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d038      	beq.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca78:	2b05      	cmp	r3, #5
 800ca7a:	d821      	bhi.n	800cac0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800ca7c:	a201      	add	r2, pc, #4	; (adr r2, 800ca84 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800ca7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca82:	bf00      	nop
 800ca84:	0800cac7 	.word	0x0800cac7
 800ca88:	0800ca9d 	.word	0x0800ca9d
 800ca8c:	0800caaf 	.word	0x0800caaf
 800ca90:	0800cac7 	.word	0x0800cac7
 800ca94:	0800cac7 	.word	0x0800cac7
 800ca98:	0800cac7 	.word	0x0800cac7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	3304      	adds	r3, #4
 800caa0:	2101      	movs	r1, #1
 800caa2:	4618      	mov	r0, r3
 800caa4:	f000 fdb4 	bl	800d610 <RCCEx_PLL2_Config>
 800caa8:	4603      	mov	r3, r0
 800caaa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800caac:	e00c      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	3324      	adds	r3, #36	; 0x24
 800cab2:	2101      	movs	r1, #1
 800cab4:	4618      	mov	r0, r3
 800cab6:	f000 fe5d 	bl	800d774 <RCCEx_PLL3_Config>
 800caba:	4603      	mov	r3, r0
 800cabc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800cabe:	e003      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cac0:	2301      	movs	r3, #1
 800cac2:	75fb      	strb	r3, [r7, #23]
      break;
 800cac4:	e000      	b.n	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800cac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d109      	bne.n	800cae2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800cace:	4b77      	ldr	r3, [pc, #476]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cad2:	f023 0207 	bic.w	r2, r3, #7
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cada:	4974      	ldr	r1, [pc, #464]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cadc:	4313      	orrs	r3, r2
 800cade:	654b      	str	r3, [r1, #84]	; 0x54
 800cae0:	e001      	b.n	800cae6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cae2:	7dfb      	ldrb	r3, [r7, #23]
 800cae4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f003 0304 	and.w	r3, r3, #4
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d03a      	beq.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caf8:	2b05      	cmp	r3, #5
 800cafa:	d821      	bhi.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800cafc:	a201      	add	r2, pc, #4	; (adr r2, 800cb04 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800cafe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb02:	bf00      	nop
 800cb04:	0800cb47 	.word	0x0800cb47
 800cb08:	0800cb1d 	.word	0x0800cb1d
 800cb0c:	0800cb2f 	.word	0x0800cb2f
 800cb10:	0800cb47 	.word	0x0800cb47
 800cb14:	0800cb47 	.word	0x0800cb47
 800cb18:	0800cb47 	.word	0x0800cb47
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	3304      	adds	r3, #4
 800cb20:	2101      	movs	r1, #1
 800cb22:	4618      	mov	r0, r3
 800cb24:	f000 fd74 	bl	800d610 <RCCEx_PLL2_Config>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cb2c:	e00c      	b.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	3324      	adds	r3, #36	; 0x24
 800cb32:	2101      	movs	r1, #1
 800cb34:	4618      	mov	r0, r3
 800cb36:	f000 fe1d 	bl	800d774 <RCCEx_PLL3_Config>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800cb3e:	e003      	b.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	75fb      	strb	r3, [r7, #23]
      break;
 800cb44:	e000      	b.n	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800cb46:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d10a      	bne.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800cb4e:	4b57      	ldr	r3, [pc, #348]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cb50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb52:	f023 0207 	bic.w	r2, r3, #7
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb5c:	4953      	ldr	r1, [pc, #332]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cb5e:	4313      	orrs	r3, r2
 800cb60:	658b      	str	r3, [r1, #88]	; 0x58
 800cb62:	e001      	b.n	800cb68 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb64:	7dfb      	ldrb	r3, [r7, #23]
 800cb66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f003 0320 	and.w	r3, r3, #32
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d04b      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cb7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb7e:	d02e      	beq.n	800cbde <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800cb80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cb84:	d828      	bhi.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cb86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb8a:	d02a      	beq.n	800cbe2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800cb8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb90:	d822      	bhi.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cb92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb96:	d026      	beq.n	800cbe6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800cb98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cb9c:	d81c      	bhi.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cb9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cba2:	d010      	beq.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800cba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cba8:	d816      	bhi.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d01d      	beq.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800cbae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cbb2:	d111      	bne.n	800cbd8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	3304      	adds	r3, #4
 800cbb8:	2100      	movs	r1, #0
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f000 fd28 	bl	800d610 <RCCEx_PLL2_Config>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cbc4:	e012      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3324      	adds	r3, #36	; 0x24
 800cbca:	2102      	movs	r1, #2
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f000 fdd1 	bl	800d774 <RCCEx_PLL3_Config>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800cbd6:	e009      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cbd8:	2301      	movs	r3, #1
 800cbda:	75fb      	strb	r3, [r7, #23]
      break;
 800cbdc:	e006      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cbde:	bf00      	nop
 800cbe0:	e004      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cbe2:	bf00      	nop
 800cbe4:	e002      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cbe6:	bf00      	nop
 800cbe8:	e000      	b.n	800cbec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800cbea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbec:	7dfb      	ldrb	r3, [r7, #23]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d10a      	bne.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cbf2:	4b2e      	ldr	r3, [pc, #184]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cbf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbf6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc00:	492a      	ldr	r1, [pc, #168]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc02:	4313      	orrs	r3, r2
 800cc04:	654b      	str	r3, [r1, #84]	; 0x54
 800cc06:	e001      	b.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc08:	7dfb      	ldrb	r3, [r7, #23]
 800cc0a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d04d      	beq.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cc1e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cc22:	d02e      	beq.n	800cc82 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800cc24:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800cc28:	d828      	bhi.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cc2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc2e:	d02a      	beq.n	800cc86 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800cc30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cc34:	d822      	bhi.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cc36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc3a:	d026      	beq.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800cc3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cc40:	d81c      	bhi.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cc42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc46:	d010      	beq.n	800cc6a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800cc48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cc4c:	d816      	bhi.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d01d      	beq.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800cc52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cc56:	d111      	bne.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	3304      	adds	r3, #4
 800cc5c:	2100      	movs	r1, #0
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f000 fcd6 	bl	800d610 <RCCEx_PLL2_Config>
 800cc64:	4603      	mov	r3, r0
 800cc66:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc68:	e012      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	3324      	adds	r3, #36	; 0x24
 800cc6e:	2102      	movs	r1, #2
 800cc70:	4618      	mov	r0, r3
 800cc72:	f000 fd7f 	bl	800d774 <RCCEx_PLL3_Config>
 800cc76:	4603      	mov	r3, r0
 800cc78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800cc7a:	e009      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	75fb      	strb	r3, [r7, #23]
      break;
 800cc80:	e006      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cc82:	bf00      	nop
 800cc84:	e004      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cc86:	bf00      	nop
 800cc88:	e002      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cc8a:	bf00      	nop
 800cc8c:	e000      	b.n	800cc90 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800cc8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc90:	7dfb      	ldrb	r3, [r7, #23]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d10c      	bne.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cc96:	4b05      	ldr	r3, [pc, #20]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cc98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800cca4:	4901      	ldr	r1, [pc, #4]	; (800ccac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800cca6:	4313      	orrs	r3, r2
 800cca8:	658b      	str	r3, [r1, #88]	; 0x58
 800ccaa:	e003      	b.n	800ccb4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800ccac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccb0:	7dfb      	ldrb	r3, [r7, #23]
 800ccb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d04b      	beq.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ccc6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ccca:	d02e      	beq.n	800cd2a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800cccc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ccd0:	d828      	bhi.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ccd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccd6:	d02a      	beq.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800ccd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccdc:	d822      	bhi.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ccde:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cce2:	d026      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800cce4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800cce8:	d81c      	bhi.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ccea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ccee:	d010      	beq.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800ccf0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ccf4:	d816      	bhi.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d01d      	beq.n	800cd36 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800ccfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccfe:	d111      	bne.n	800cd24 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3304      	adds	r3, #4
 800cd04:	2100      	movs	r1, #0
 800cd06:	4618      	mov	r0, r3
 800cd08:	f000 fc82 	bl	800d610 <RCCEx_PLL2_Config>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cd10:	e012      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	3324      	adds	r3, #36	; 0x24
 800cd16:	2102      	movs	r1, #2
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f000 fd2b 	bl	800d774 <RCCEx_PLL3_Config>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800cd22:	e009      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cd24:	2301      	movs	r3, #1
 800cd26:	75fb      	strb	r3, [r7, #23]
      break;
 800cd28:	e006      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800cd2a:	bf00      	nop
 800cd2c:	e004      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800cd2e:	bf00      	nop
 800cd30:	e002      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800cd32:	bf00      	nop
 800cd34:	e000      	b.n	800cd38 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800cd36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd38:	7dfb      	ldrb	r3, [r7, #23]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d10a      	bne.n	800cd54 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cd3e:	4b9d      	ldr	r3, [pc, #628]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cd40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800cd4c:	4999      	ldr	r1, [pc, #612]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cd4e:	4313      	orrs	r3, r2
 800cd50:	658b      	str	r3, [r1, #88]	; 0x58
 800cd52:	e001      	b.n	800cd58 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd54:	7dfb      	ldrb	r3, [r7, #23]
 800cd56:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f003 0308 	and.w	r3, r3, #8
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d01a      	beq.n	800cd9a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd6e:	d10a      	bne.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	3324      	adds	r3, #36	; 0x24
 800cd74:	2102      	movs	r1, #2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 fcfc 	bl	800d774 <RCCEx_PLL3_Config>
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800cd82:	2301      	movs	r3, #1
 800cd84:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cd86:	4b8b      	ldr	r3, [pc, #556]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cd88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd8a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cd94:	4987      	ldr	r1, [pc, #540]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cd96:	4313      	orrs	r3, r2
 800cd98:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	f003 0310 	and.w	r3, r3, #16
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d01a      	beq.n	800cddc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdb0:	d10a      	bne.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	3324      	adds	r3, #36	; 0x24
 800cdb6:	2102      	movs	r1, #2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 fcdb 	bl	800d774 <RCCEx_PLL3_Config>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d001      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cdc8:	4b7a      	ldr	r3, [pc, #488]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cdca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800cdd6:	4977      	ldr	r1, [pc, #476]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cdd8:	4313      	orrs	r3, r2
 800cdda:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d034      	beq.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800cdee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdf2:	d01d      	beq.n	800ce30 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800cdf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdf8:	d817      	bhi.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d003      	beq.n	800ce06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800cdfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce02:	d009      	beq.n	800ce18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800ce04:	e011      	b.n	800ce2a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	3304      	adds	r3, #4
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fbff 	bl	800d610 <RCCEx_PLL2_Config>
 800ce12:	4603      	mov	r3, r0
 800ce14:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ce16:	e00c      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	3324      	adds	r3, #36	; 0x24
 800ce1c:	2102      	movs	r1, #2
 800ce1e:	4618      	mov	r0, r3
 800ce20:	f000 fca8 	bl	800d774 <RCCEx_PLL3_Config>
 800ce24:	4603      	mov	r3, r0
 800ce26:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ce28:	e003      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce2a:	2301      	movs	r3, #1
 800ce2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ce2e:	e000      	b.n	800ce32 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800ce30:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce32:	7dfb      	ldrb	r3, [r7, #23]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d10a      	bne.n	800ce4e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ce38:	4b5e      	ldr	r3, [pc, #376]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ce46:	495b      	ldr	r1, [pc, #364]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce48:	4313      	orrs	r3, r2
 800ce4a:	658b      	str	r3, [r1, #88]	; 0x58
 800ce4c:	e001      	b.n	800ce52 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce4e:	7dfb      	ldrb	r3, [r7, #23]
 800ce50:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d033      	beq.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ce64:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce68:	d01c      	beq.n	800cea4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800ce6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ce6e:	d816      	bhi.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800ce70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ce74:	d003      	beq.n	800ce7e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ce76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ce7a:	d007      	beq.n	800ce8c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800ce7c:	e00f      	b.n	800ce9e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce7e:	4b4d      	ldr	r3, [pc, #308]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce82:	4a4c      	ldr	r2, [pc, #304]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ce84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ce88:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce8a:	e00c      	b.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	3324      	adds	r3, #36	; 0x24
 800ce90:	2101      	movs	r1, #1
 800ce92:	4618      	mov	r0, r3
 800ce94:	f000 fc6e 	bl	800d774 <RCCEx_PLL3_Config>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ce9c:	e003      	b.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	75fb      	strb	r3, [r7, #23]
      break;
 800cea2:	e000      	b.n	800cea6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800cea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cea6:	7dfb      	ldrb	r3, [r7, #23]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d10a      	bne.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ceac:	4b41      	ldr	r3, [pc, #260]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ceae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ceb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ceba:	493e      	ldr	r1, [pc, #248]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cebc:	4313      	orrs	r3, r2
 800cebe:	654b      	str	r3, [r1, #84]	; 0x54
 800cec0:	e001      	b.n	800cec6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d029      	beq.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d003      	beq.n	800cee2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800ceda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cede:	d007      	beq.n	800cef0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800cee0:	e00f      	b.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cee2:	4b34      	ldr	r3, [pc, #208]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee6:	4a33      	ldr	r2, [pc, #204]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ceec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ceee:	e00b      	b.n	800cf08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	3304      	adds	r3, #4
 800cef4:	2102      	movs	r1, #2
 800cef6:	4618      	mov	r0, r3
 800cef8:	f000 fb8a 	bl	800d610 <RCCEx_PLL2_Config>
 800cefc:	4603      	mov	r3, r0
 800cefe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cf00:	e002      	b.n	800cf08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	75fb      	strb	r3, [r7, #23]
      break;
 800cf06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf08:	7dfb      	ldrb	r3, [r7, #23]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d109      	bne.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cf0e:	4b29      	ldr	r3, [pc, #164]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf1a:	4926      	ldr	r1, [pc, #152]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf1c:	4313      	orrs	r3, r2
 800cf1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cf20:	e001      	b.n	800cf26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf22:	7dfb      	ldrb	r3, [r7, #23]
 800cf24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00a      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	3324      	adds	r3, #36	; 0x24
 800cf36:	2102      	movs	r1, #2
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f000 fc1b 	bl	800d774 <RCCEx_PLL3_Config>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d001      	beq.n	800cf48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800cf44:	2301      	movs	r3, #1
 800cf46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d033      	beq.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cf58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf5c:	d017      	beq.n	800cf8e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800cf5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf62:	d811      	bhi.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cf64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf68:	d013      	beq.n	800cf92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800cf6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf6e:	d80b      	bhi.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d010      	beq.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800cf74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf78:	d106      	bne.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf7a:	4b0e      	ldr	r3, [pc, #56]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf7e:	4a0d      	ldr	r2, [pc, #52]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cf80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cf84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cf86:	e007      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cf88:	2301      	movs	r3, #1
 800cf8a:	75fb      	strb	r3, [r7, #23]
      break;
 800cf8c:	e004      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cf8e:	bf00      	nop
 800cf90:	e002      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cf92:	bf00      	nop
 800cf94:	e000      	b.n	800cf98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cf96:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf98:	7dfb      	ldrb	r3, [r7, #23]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10c      	bne.n	800cfb8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cf9e:	4b05      	ldr	r3, [pc, #20]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cfa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfaa:	4902      	ldr	r1, [pc, #8]	; (800cfb4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cfac:	4313      	orrs	r3, r2
 800cfae:	654b      	str	r3, [r1, #84]	; 0x54
 800cfb0:	e004      	b.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800cfb2:	bf00      	nop
 800cfb4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfb8:	7dfb      	ldrb	r3, [r7, #23]
 800cfba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d008      	beq.n	800cfda <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cfc8:	4b31      	ldr	r3, [pc, #196]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfd4:	492e      	ldr	r1, [pc, #184]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d009      	beq.n	800cffa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cfe6:	4b2a      	ldr	r3, [pc, #168]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cfe8:	691b      	ldr	r3, [r3, #16]
 800cfea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cff4:	4926      	ldr	r1, [pc, #152]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cff6:	4313      	orrs	r3, r2
 800cff8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d002:	2b00      	cmp	r3, #0
 800d004:	d008      	beq.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d006:	4b22      	ldr	r3, [pc, #136]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d00a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d012:	491f      	ldr	r1, [pc, #124]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d014:	4313      	orrs	r3, r2
 800d016:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d020:	2b00      	cmp	r3, #0
 800d022:	d00d      	beq.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d024:	4b1a      	ldr	r3, [pc, #104]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d026:	691b      	ldr	r3, [r3, #16]
 800d028:	4a19      	ldr	r2, [pc, #100]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d02a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d02e:	6113      	str	r3, [r2, #16]
 800d030:	4b17      	ldr	r3, [pc, #92]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d032:	691a      	ldr	r2, [r3, #16]
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d03a:	4915      	ldr	r1, [pc, #84]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d03c:	4313      	orrs	r3, r2
 800d03e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	2b00      	cmp	r3, #0
 800d046:	da08      	bge.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d048:	4b11      	ldr	r3, [pc, #68]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d04a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d04c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d054:	490e      	ldr	r1, [pc, #56]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d056:	4313      	orrs	r3, r2
 800d058:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d062:	2b00      	cmp	r3, #0
 800d064:	d009      	beq.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d066:	4b0a      	ldr	r3, [pc, #40]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d06a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d074:	4906      	ldr	r1, [pc, #24]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d076:	4313      	orrs	r3, r2
 800d078:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d07a:	7dbb      	ldrb	r3, [r7, #22]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800d080:	2300      	movs	r3, #0
 800d082:	e000      	b.n	800d086 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800d084:	2301      	movs	r3, #1
}
 800d086:	4618      	mov	r0, r3
 800d088:	3718      	adds	r7, #24
 800d08a:	46bd      	mov	sp, r7
 800d08c:	bd80      	pop	{r7, pc}
 800d08e:	bf00      	nop
 800d090:	58024400 	.word	0x58024400

0800d094 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d098:	f7ff f85a 	bl	800c150 <HAL_RCC_GetHCLKFreq>
 800d09c:	4602      	mov	r2, r0
 800d09e:	4b06      	ldr	r3, [pc, #24]	; (800d0b8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	091b      	lsrs	r3, r3, #4
 800d0a4:	f003 0307 	and.w	r3, r3, #7
 800d0a8:	4904      	ldr	r1, [pc, #16]	; (800d0bc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d0aa:	5ccb      	ldrb	r3, [r1, r3]
 800d0ac:	f003 031f 	and.w	r3, r3, #31
 800d0b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	58024400 	.word	0x58024400
 800d0bc:	0801158c 	.word	0x0801158c

0800d0c0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	b089      	sub	sp, #36	; 0x24
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d0c8:	4ba1      	ldr	r3, [pc, #644]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0cc:	f003 0303 	and.w	r3, r3, #3
 800d0d0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d0d2:	4b9f      	ldr	r3, [pc, #636]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0d6:	0b1b      	lsrs	r3, r3, #12
 800d0d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0dc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d0de:	4b9c      	ldr	r3, [pc, #624]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e2:	091b      	lsrs	r3, r3, #4
 800d0e4:	f003 0301 	and.w	r3, r3, #1
 800d0e8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d0ea:	4b99      	ldr	r3, [pc, #612]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0ee:	08db      	lsrs	r3, r3, #3
 800d0f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	fb02 f303 	mul.w	r3, r2, r3
 800d0fa:	ee07 3a90 	vmov	s15, r3
 800d0fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d102:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 8111 	beq.w	800d330 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d10e:	69bb      	ldr	r3, [r7, #24]
 800d110:	2b02      	cmp	r3, #2
 800d112:	f000 8083 	beq.w	800d21c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d116:	69bb      	ldr	r3, [r7, #24]
 800d118:	2b02      	cmp	r3, #2
 800d11a:	f200 80a1 	bhi.w	800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d003      	beq.n	800d12c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	2b01      	cmp	r3, #1
 800d128:	d056      	beq.n	800d1d8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d12a:	e099      	b.n	800d260 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d12c:	4b88      	ldr	r3, [pc, #544]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	f003 0320 	and.w	r3, r3, #32
 800d134:	2b00      	cmp	r3, #0
 800d136:	d02d      	beq.n	800d194 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d138:	4b85      	ldr	r3, [pc, #532]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	08db      	lsrs	r3, r3, #3
 800d13e:	f003 0303 	and.w	r3, r3, #3
 800d142:	4a84      	ldr	r2, [pc, #528]	; (800d354 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d144:	fa22 f303 	lsr.w	r3, r2, r3
 800d148:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	ee07 3a90 	vmov	s15, r3
 800d150:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	ee07 3a90 	vmov	s15, r3
 800d15a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d15e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d162:	4b7b      	ldr	r3, [pc, #492]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d16a:	ee07 3a90 	vmov	s15, r3
 800d16e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d172:	ed97 6a03 	vldr	s12, [r7, #12]
 800d176:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d17a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d17e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d18a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d18e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d192:	e087      	b.n	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	ee07 3a90 	vmov	s15, r3
 800d19a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d19e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d35c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d1a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1a6:	4b6a      	ldr	r3, [pc, #424]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1ae:	ee07 3a90 	vmov	s15, r3
 800d1b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d1be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d1c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d1c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d1ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d1ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d1d6:	e065      	b.n	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	ee07 3a90 	vmov	s15, r3
 800d1de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d1e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d1ea:	4b59      	ldr	r3, [pc, #356]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d1f2:	ee07 3a90 	vmov	s15, r3
 800d1f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d1fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d1fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d20a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d20e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d212:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d216:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d21a:	e043      	b.n	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	ee07 3a90 	vmov	s15, r3
 800d222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d226:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d364 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d22a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d22e:	4b48      	ldr	r3, [pc, #288]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d236:	ee07 3a90 	vmov	s15, r3
 800d23a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d23e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d242:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d24a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d24e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d25a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d25e:	e021      	b.n	800d2a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d260:	697b      	ldr	r3, [r7, #20]
 800d262:	ee07 3a90 	vmov	s15, r3
 800d266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d26a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d360 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d26e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d272:	4b37      	ldr	r3, [pc, #220]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d27a:	ee07 3a90 	vmov	s15, r3
 800d27e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d282:	ed97 6a03 	vldr	s12, [r7, #12]
 800d286:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d358 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d28a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d28e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d292:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d29a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d2a2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800d2a4:	4b2a      	ldr	r3, [pc, #168]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a8:	0a5b      	lsrs	r3, r3, #9
 800d2aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2ae:	ee07 3a90 	vmov	s15, r3
 800d2b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2be:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2ca:	ee17 2a90 	vmov	r2, s15
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800d2d2:	4b1f      	ldr	r3, [pc, #124]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d2d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2d6:	0c1b      	lsrs	r3, r3, #16
 800d2d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2dc:	ee07 3a90 	vmov	s15, r3
 800d2e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d2e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d2ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800d2f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d2f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d2f8:	ee17 2a90 	vmov	r2, s15
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800d300:	4b13      	ldr	r3, [pc, #76]	; (800d350 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d304:	0e1b      	lsrs	r3, r3, #24
 800d306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d30a:	ee07 3a90 	vmov	s15, r3
 800d30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d31a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d31e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d326:	ee17 2a90 	vmov	r2, s15
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d32e:	e008      	b.n	800d342 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2200      	movs	r2, #0
 800d334:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	609a      	str	r2, [r3, #8]
}
 800d342:	bf00      	nop
 800d344:	3724      	adds	r7, #36	; 0x24
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
 800d34e:	bf00      	nop
 800d350:	58024400 	.word	0x58024400
 800d354:	03d09000 	.word	0x03d09000
 800d358:	46000000 	.word	0x46000000
 800d35c:	4c742400 	.word	0x4c742400
 800d360:	4a742400 	.word	0x4a742400
 800d364:	4af42400 	.word	0x4af42400

0800d368 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800d368:	b480      	push	{r7}
 800d36a:	b089      	sub	sp, #36	; 0x24
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d370:	4ba1      	ldr	r3, [pc, #644]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d374:	f003 0303 	and.w	r3, r3, #3
 800d378:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800d37a:	4b9f      	ldr	r3, [pc, #636]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37e:	0d1b      	lsrs	r3, r3, #20
 800d380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d384:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d386:	4b9c      	ldr	r3, [pc, #624]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38a:	0a1b      	lsrs	r3, r3, #8
 800d38c:	f003 0301 	and.w	r3, r3, #1
 800d390:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800d392:	4b99      	ldr	r3, [pc, #612]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d396:	08db      	lsrs	r3, r3, #3
 800d398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d39c:	693a      	ldr	r2, [r7, #16]
 800d39e:	fb02 f303 	mul.w	r3, r2, r3
 800d3a2:	ee07 3a90 	vmov	s15, r3
 800d3a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	f000 8111 	beq.w	800d5d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	f000 8083 	beq.w	800d4c4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	2b02      	cmp	r3, #2
 800d3c2:	f200 80a1 	bhi.w	800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d003      	beq.n	800d3d4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d3cc:	69bb      	ldr	r3, [r7, #24]
 800d3ce:	2b01      	cmp	r3, #1
 800d3d0:	d056      	beq.n	800d480 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d3d2:	e099      	b.n	800d508 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3d4:	4b88      	ldr	r3, [pc, #544]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f003 0320 	and.w	r3, r3, #32
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d02d      	beq.n	800d43c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d3e0:	4b85      	ldr	r3, [pc, #532]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	08db      	lsrs	r3, r3, #3
 800d3e6:	f003 0303 	and.w	r3, r3, #3
 800d3ea:	4a84      	ldr	r2, [pc, #528]	; (800d5fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d3ec:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	ee07 3a90 	vmov	s15, r3
 800d3f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d3fc:	697b      	ldr	r3, [r7, #20]
 800d3fe:	ee07 3a90 	vmov	s15, r3
 800d402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d40a:	4b7b      	ldr	r3, [pc, #492]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d40c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d40e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d412:	ee07 3a90 	vmov	s15, r3
 800d416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d41a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d41e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d42a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d42e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d432:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d436:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d43a:	e087      	b.n	800d54c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d43c:	697b      	ldr	r3, [r7, #20]
 800d43e:	ee07 3a90 	vmov	s15, r3
 800d442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d446:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d604 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d44a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d44e:	4b6a      	ldr	r3, [pc, #424]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d456:	ee07 3a90 	vmov	s15, r3
 800d45a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d45e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d462:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d46a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d46e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d47a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d47e:	e065      	b.n	800d54c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	ee07 3a90 	vmov	s15, r3
 800d486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d48a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d48e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d492:	4b59      	ldr	r3, [pc, #356]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d49a:	ee07 3a90 	vmov	s15, r3
 800d49e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4a6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d4c2:	e043      	b.n	800d54c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	ee07 3a90 	vmov	s15, r3
 800d4ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4ce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d60c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4d6:	4b48      	ldr	r3, [pc, #288]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d4d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4de:	ee07 3a90 	vmov	s15, r3
 800d4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4ea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d502:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d506:	e021      	b.n	800d54c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	ee07 3a90 	vmov	s15, r3
 800d50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d512:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d608 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d51a:	4b37      	ldr	r3, [pc, #220]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d51c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d522:	ee07 3a90 	vmov	s15, r3
 800d526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d52a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d52e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d600 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d53a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d546:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d54a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d54c:	4b2a      	ldr	r3, [pc, #168]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d54e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d550:	0a5b      	lsrs	r3, r3, #9
 800d552:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d556:	ee07 3a90 	vmov	s15, r3
 800d55a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d55e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d562:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d566:	edd7 6a07 	vldr	s13, [r7, #28]
 800d56a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d56e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d572:	ee17 2a90 	vmov	r2, s15
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d57a:	4b1f      	ldr	r3, [pc, #124]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d57c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d57e:	0c1b      	lsrs	r3, r3, #16
 800d580:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d584:	ee07 3a90 	vmov	s15, r3
 800d588:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d58c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d590:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d594:	edd7 6a07 	vldr	s13, [r7, #28]
 800d598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d59c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5a0:	ee17 2a90 	vmov	r2, s15
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d5a8:	4b13      	ldr	r3, [pc, #76]	; (800d5f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ac:	0e1b      	lsrs	r3, r3, #24
 800d5ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b2:	ee07 3a90 	vmov	s15, r3
 800d5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d5be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d5c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d5c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d5ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d5ce:	ee17 2a90 	vmov	r2, s15
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d5d6:	e008      	b.n	800d5ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	609a      	str	r2, [r3, #8]
}
 800d5ea:	bf00      	nop
 800d5ec:	3724      	adds	r7, #36	; 0x24
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f4:	4770      	bx	lr
 800d5f6:	bf00      	nop
 800d5f8:	58024400 	.word	0x58024400
 800d5fc:	03d09000 	.word	0x03d09000
 800d600:	46000000 	.word	0x46000000
 800d604:	4c742400 	.word	0x4c742400
 800d608:	4a742400 	.word	0x4a742400
 800d60c:	4af42400 	.word	0x4af42400

0800d610 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b084      	sub	sp, #16
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d61a:	2300      	movs	r3, #0
 800d61c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d61e:	4b53      	ldr	r3, [pc, #332]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d622:	f003 0303 	and.w	r3, r3, #3
 800d626:	2b03      	cmp	r3, #3
 800d628:	d101      	bne.n	800d62e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d62a:	2301      	movs	r3, #1
 800d62c:	e099      	b.n	800d762 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d62e:	4b4f      	ldr	r3, [pc, #316]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	4a4e      	ldr	r2, [pc, #312]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d634:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d638:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d63a:	f7fa faa5 	bl	8007b88 <HAL_GetTick>
 800d63e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d640:	e008      	b.n	800d654 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d642:	f7fa faa1 	bl	8007b88 <HAL_GetTick>
 800d646:	4602      	mov	r2, r0
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	1ad3      	subs	r3, r2, r3
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	d901      	bls.n	800d654 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d650:	2303      	movs	r3, #3
 800d652:	e086      	b.n	800d762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d654:	4b45      	ldr	r3, [pc, #276]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d1f0      	bne.n	800d642 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d660:	4b42      	ldr	r3, [pc, #264]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d664:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	031b      	lsls	r3, r3, #12
 800d66e:	493f      	ldr	r1, [pc, #252]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d670:	4313      	orrs	r3, r2
 800d672:	628b      	str	r3, [r1, #40]	; 0x28
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	685b      	ldr	r3, [r3, #4]
 800d678:	3b01      	subs	r3, #1
 800d67a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	3b01      	subs	r3, #1
 800d684:	025b      	lsls	r3, r3, #9
 800d686:	b29b      	uxth	r3, r3
 800d688:	431a      	orrs	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	68db      	ldr	r3, [r3, #12]
 800d68e:	3b01      	subs	r3, #1
 800d690:	041b      	lsls	r3, r3, #16
 800d692:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d696:	431a      	orrs	r2, r3
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	691b      	ldr	r3, [r3, #16]
 800d69c:	3b01      	subs	r3, #1
 800d69e:	061b      	lsls	r3, r3, #24
 800d6a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d6a4:	4931      	ldr	r1, [pc, #196]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d6aa:	4b30      	ldr	r3, [pc, #192]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	695b      	ldr	r3, [r3, #20]
 800d6b6:	492d      	ldr	r1, [pc, #180]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6b8:	4313      	orrs	r3, r2
 800d6ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d6bc:	4b2b      	ldr	r3, [pc, #172]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6c0:	f023 0220 	bic.w	r2, r3, #32
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	699b      	ldr	r3, [r3, #24]
 800d6c8:	4928      	ldr	r1, [pc, #160]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d6ce:	4b27      	ldr	r3, [pc, #156]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d2:	4a26      	ldr	r2, [pc, #152]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6d4:	f023 0310 	bic.w	r3, r3, #16
 800d6d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d6da:	4b24      	ldr	r3, [pc, #144]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6de:	4b24      	ldr	r3, [pc, #144]	; (800d770 <RCCEx_PLL2_Config+0x160>)
 800d6e0:	4013      	ands	r3, r2
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	69d2      	ldr	r2, [r2, #28]
 800d6e6:	00d2      	lsls	r2, r2, #3
 800d6e8:	4920      	ldr	r1, [pc, #128]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d6ee:	4b1f      	ldr	r3, [pc, #124]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6f2:	4a1e      	ldr	r2, [pc, #120]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d6f4:	f043 0310 	orr.w	r3, r3, #16
 800d6f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d106      	bne.n	800d70e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d700:	4b1a      	ldr	r3, [pc, #104]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d704:	4a19      	ldr	r2, [pc, #100]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d70a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d70c:	e00f      	b.n	800d72e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	2b01      	cmp	r3, #1
 800d712:	d106      	bne.n	800d722 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d714:	4b15      	ldr	r3, [pc, #84]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d718:	4a14      	ldr	r2, [pc, #80]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d71a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d71e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d720:	e005      	b.n	800d72e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d722:	4b12      	ldr	r3, [pc, #72]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d726:	4a11      	ldr	r2, [pc, #68]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d728:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d72c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d72e:	4b0f      	ldr	r3, [pc, #60]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a0e      	ldr	r2, [pc, #56]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d734:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d73a:	f7fa fa25 	bl	8007b88 <HAL_GetTick>
 800d73e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d740:	e008      	b.n	800d754 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d742:	f7fa fa21 	bl	8007b88 <HAL_GetTick>
 800d746:	4602      	mov	r2, r0
 800d748:	68bb      	ldr	r3, [r7, #8]
 800d74a:	1ad3      	subs	r3, r2, r3
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d901      	bls.n	800d754 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d750:	2303      	movs	r3, #3
 800d752:	e006      	b.n	800d762 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d754:	4b05      	ldr	r3, [pc, #20]	; (800d76c <RCCEx_PLL2_Config+0x15c>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d0f0      	beq.n	800d742 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d760:	7bfb      	ldrb	r3, [r7, #15]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	58024400 	.word	0x58024400
 800d770:	ffff0007 	.word	0xffff0007

0800d774 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d782:	4b53      	ldr	r3, [pc, #332]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d786:	f003 0303 	and.w	r3, r3, #3
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	d101      	bne.n	800d792 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d78e:	2301      	movs	r3, #1
 800d790:	e099      	b.n	800d8c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d792:	4b4f      	ldr	r3, [pc, #316]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a4e      	ldr	r2, [pc, #312]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d79c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d79e:	f7fa f9f3 	bl	8007b88 <HAL_GetTick>
 800d7a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7a4:	e008      	b.n	800d7b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d7a6:	f7fa f9ef 	bl	8007b88 <HAL_GetTick>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d901      	bls.n	800d7b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	e086      	b.n	800d8c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d7b8:	4b45      	ldr	r3, [pc, #276]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1f0      	bne.n	800d7a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d7c4:	4b42      	ldr	r3, [pc, #264]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	051b      	lsls	r3, r3, #20
 800d7d2:	493f      	ldr	r1, [pc, #252]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	628b      	str	r3, [r1, #40]	; 0x28
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	025b      	lsls	r3, r3, #9
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	431a      	orrs	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	041b      	lsls	r3, r3, #16
 800d7f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7fa:	431a      	orrs	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	3b01      	subs	r3, #1
 800d802:	061b      	lsls	r3, r3, #24
 800d804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d808:	4931      	ldr	r1, [pc, #196]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d80a:	4313      	orrs	r3, r2
 800d80c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d80e:	4b30      	ldr	r3, [pc, #192]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d812:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	492d      	ldr	r1, [pc, #180]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d81c:	4313      	orrs	r3, r2
 800d81e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d820:	4b2b      	ldr	r3, [pc, #172]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d824:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	699b      	ldr	r3, [r3, #24]
 800d82c:	4928      	ldr	r1, [pc, #160]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d82e:	4313      	orrs	r3, r2
 800d830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d832:	4b27      	ldr	r3, [pc, #156]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d836:	4a26      	ldr	r2, [pc, #152]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d83c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d83e:	4b24      	ldr	r3, [pc, #144]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d840:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d842:	4b24      	ldr	r3, [pc, #144]	; (800d8d4 <RCCEx_PLL3_Config+0x160>)
 800d844:	4013      	ands	r3, r2
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	69d2      	ldr	r2, [r2, #28]
 800d84a:	00d2      	lsls	r2, r2, #3
 800d84c:	4920      	ldr	r1, [pc, #128]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d84e:	4313      	orrs	r3, r2
 800d850:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d852:	4b1f      	ldr	r3, [pc, #124]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d856:	4a1e      	ldr	r2, [pc, #120]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d85c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d106      	bne.n	800d872 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d864:	4b1a      	ldr	r3, [pc, #104]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	4a19      	ldr	r2, [pc, #100]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d86a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d86e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d870:	e00f      	b.n	800d892 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d106      	bne.n	800d886 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d878:	4b15      	ldr	r3, [pc, #84]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	4a14      	ldr	r2, [pc, #80]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d87e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d882:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d884:	e005      	b.n	800d892 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d886:	4b12      	ldr	r3, [pc, #72]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88a:	4a11      	ldr	r2, [pc, #68]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d88c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d892:	4b0f      	ldr	r3, [pc, #60]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a0e      	ldr	r2, [pc, #56]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d89c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d89e:	f7fa f973 	bl	8007b88 <HAL_GetTick>
 800d8a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d8a4:	e008      	b.n	800d8b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d8a6:	f7fa f96f 	bl	8007b88 <HAL_GetTick>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d901      	bls.n	800d8b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	e006      	b.n	800d8c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d8b8:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <RCCEx_PLL3_Config+0x15c>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0f0      	beq.n	800d8a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	58024400 	.word	0x58024400
 800d8d4:	ffff0007 	.word	0xffff0007

0800d8d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d101      	bne.n	800d8ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d8e6:	2301      	movs	r3, #1
 800d8e8:	e0f1      	b.n	800dace <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	4a78      	ldr	r2, [pc, #480]	; (800dad8 <HAL_SPI_Init+0x200>)
 800d8f6:	4293      	cmp	r3, r2
 800d8f8:	d00f      	beq.n	800d91a <HAL_SPI_Init+0x42>
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	4a77      	ldr	r2, [pc, #476]	; (800dadc <HAL_SPI_Init+0x204>)
 800d900:	4293      	cmp	r3, r2
 800d902:	d00a      	beq.n	800d91a <HAL_SPI_Init+0x42>
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	4a75      	ldr	r2, [pc, #468]	; (800dae0 <HAL_SPI_Init+0x208>)
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d005      	beq.n	800d91a <HAL_SPI_Init+0x42>
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	68db      	ldr	r3, [r3, #12]
 800d912:	2b0f      	cmp	r3, #15
 800d914:	d901      	bls.n	800d91a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d916:	2301      	movs	r3, #1
 800d918:	e0d9      	b.n	800dace <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d91a:	6878      	ldr	r0, [r7, #4]
 800d91c:	f000 fba2 	bl	800e064 <SPI_GetPacketSize>
 800d920:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	4a6c      	ldr	r2, [pc, #432]	; (800dad8 <HAL_SPI_Init+0x200>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d00c      	beq.n	800d946 <HAL_SPI_Init+0x6e>
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	4a6a      	ldr	r2, [pc, #424]	; (800dadc <HAL_SPI_Init+0x204>)
 800d932:	4293      	cmp	r3, r2
 800d934:	d007      	beq.n	800d946 <HAL_SPI_Init+0x6e>
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	4a69      	ldr	r2, [pc, #420]	; (800dae0 <HAL_SPI_Init+0x208>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d002      	beq.n	800d946 <HAL_SPI_Init+0x6e>
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2b08      	cmp	r3, #8
 800d944:	d811      	bhi.n	800d96a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d94a:	4a63      	ldr	r2, [pc, #396]	; (800dad8 <HAL_SPI_Init+0x200>)
 800d94c:	4293      	cmp	r3, r2
 800d94e:	d009      	beq.n	800d964 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	4a61      	ldr	r2, [pc, #388]	; (800dadc <HAL_SPI_Init+0x204>)
 800d956:	4293      	cmp	r3, r2
 800d958:	d004      	beq.n	800d964 <HAL_SPI_Init+0x8c>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	4a60      	ldr	r2, [pc, #384]	; (800dae0 <HAL_SPI_Init+0x208>)
 800d960:	4293      	cmp	r3, r2
 800d962:	d104      	bne.n	800d96e <HAL_SPI_Init+0x96>
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	2b10      	cmp	r3, #16
 800d968:	d901      	bls.n	800d96e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d96a:	2301      	movs	r3, #1
 800d96c:	e0af      	b.n	800dace <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d974:	b2db      	uxtb	r3, r3
 800d976:	2b00      	cmp	r3, #0
 800d978:	d106      	bne.n	800d988 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f7f9 fe08 	bl	8007598 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2202      	movs	r2, #2
 800d98c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	f022 0201 	bic.w	r2, r2, #1
 800d99e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d9aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d9b4:	d119      	bne.n	800d9ea <HAL_SPI_Init+0x112>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d9be:	d103      	bne.n	800d9c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d008      	beq.n	800d9da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d10c      	bne.n	800d9ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d9d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d9d8:	d107      	bne.n	800d9ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	681a      	ldr	r2, [r3, #0]
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d9e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	69da      	ldr	r2, [r3, #28]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9f2:	431a      	orrs	r2, r3
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9fc:	ea42 0103 	orr.w	r1, r2, r3
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	68da      	ldr	r2, [r3, #12]
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	430a      	orrs	r2, r1
 800da0a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da14:	431a      	orrs	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1a:	431a      	orrs	r2, r3
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	699b      	ldr	r3, [r3, #24]
 800da20:	431a      	orrs	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	691b      	ldr	r3, [r3, #16]
 800da26:	431a      	orrs	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	695b      	ldr	r3, [r3, #20]
 800da2c:	431a      	orrs	r2, r3
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6a1b      	ldr	r3, [r3, #32]
 800da32:	431a      	orrs	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	431a      	orrs	r2, r3
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da3e:	431a      	orrs	r2, r3
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	431a      	orrs	r2, r3
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da4a:	ea42 0103 	orr.w	r1, r2, r3
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	430a      	orrs	r2, r1
 800da58:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	685b      	ldr	r3, [r3, #4]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d113      	bne.n	800da8a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	689b      	ldr	r3, [r3, #8]
 800da68:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800da74:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	689b      	ldr	r3, [r3, #8]
 800da7c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800da88:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f022 0201 	bic.w	r2, r2, #1
 800da98:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	685b      	ldr	r3, [r3, #4]
 800da9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00a      	beq.n	800dabc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	430a      	orrs	r2, r1
 800daba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dacc:	2300      	movs	r3, #0
}
 800dace:	4618      	mov	r0, r3
 800dad0:	3710      	adds	r7, #16
 800dad2:	46bd      	mov	sp, r7
 800dad4:	bd80      	pop	{r7, pc}
 800dad6:	bf00      	nop
 800dad8:	40013000 	.word	0x40013000
 800dadc:	40003800 	.word	0x40003800
 800dae0:	40003c00 	.word	0x40003c00

0800dae4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b08a      	sub	sp, #40	; 0x28
 800dae8:	af02      	add	r7, sp, #8
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	60b9      	str	r1, [r7, #8]
 800daee:	603b      	str	r3, [r7, #0]
 800daf0:	4613      	mov	r3, r2
 800daf2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	3320      	adds	r3, #32
 800dafa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dafc:	2300      	movs	r3, #0
 800dafe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800db06:	2b01      	cmp	r3, #1
 800db08:	d101      	bne.n	800db0e <HAL_SPI_Transmit+0x2a>
 800db0a:	2302      	movs	r3, #2
 800db0c:	e1d7      	b.n	800debe <HAL_SPI_Transmit+0x3da>
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	2201      	movs	r2, #1
 800db12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800db16:	f7fa f837 	bl	8007b88 <HAL_GetTick>
 800db1a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db22:	b2db      	uxtb	r3, r3
 800db24:	2b01      	cmp	r3, #1
 800db26:	d007      	beq.n	800db38 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800db28:	2302      	movs	r3, #2
 800db2a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	2200      	movs	r2, #0
 800db30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800db34:	7efb      	ldrb	r3, [r7, #27]
 800db36:	e1c2      	b.n	800debe <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800db38:	68bb      	ldr	r3, [r7, #8]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d002      	beq.n	800db44 <HAL_SPI_Transmit+0x60>
 800db3e:	88fb      	ldrh	r3, [r7, #6]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d107      	bne.n	800db54 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800db44:	2301      	movs	r3, #1
 800db46:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800db50:	7efb      	ldrb	r3, [r7, #27]
 800db52:	e1b4      	b.n	800debe <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2203      	movs	r2, #3
 800db58:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2200      	movs	r2, #0
 800db60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	68ba      	ldr	r2, [r7, #8]
 800db68:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	88fa      	ldrh	r2, [r7, #6]
 800db6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	88fa      	ldrh	r2, [r7, #6]
 800db76:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	2200      	movs	r2, #0
 800db7e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2200      	movs	r2, #0
 800db84:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	2200      	movs	r2, #0
 800db8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2200      	movs	r2, #0
 800db94:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	2200      	movs	r2, #0
 800db9a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dba4:	d107      	bne.n	800dbb6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	685a      	ldr	r2, [r3, #4]
 800dbbc:	4b96      	ldr	r3, [pc, #600]	; (800de18 <HAL_SPI_Transmit+0x334>)
 800dbbe:	4013      	ands	r3, r2
 800dbc0:	88f9      	ldrh	r1, [r7, #6]
 800dbc2:	68fa      	ldr	r2, [r7, #12]
 800dbc4:	6812      	ldr	r2, [r2, #0]
 800dbc6:	430b      	orrs	r3, r1
 800dbc8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	f042 0201 	orr.w	r2, r2, #1
 800dbd8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dbe2:	d107      	bne.n	800dbf4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	681a      	ldr	r2, [r3, #0]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	2b0f      	cmp	r3, #15
 800dbfa:	d947      	bls.n	800dc8c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dbfc:	e03f      	b.n	800dc7e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	695b      	ldr	r3, [r3, #20]
 800dc04:	f003 0302 	and.w	r3, r3, #2
 800dc08:	2b02      	cmp	r3, #2
 800dc0a:	d114      	bne.n	800dc36 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	6812      	ldr	r2, [r2, #0]
 800dc16:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc1c:	1d1a      	adds	r2, r3, #4
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc28:	b29b      	uxth	r3, r3
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dc34:	e023      	b.n	800dc7e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc36:	f7f9 ffa7 	bl	8007b88 <HAL_GetTick>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	683a      	ldr	r2, [r7, #0]
 800dc42:	429a      	cmp	r2, r3
 800dc44:	d803      	bhi.n	800dc4e <HAL_SPI_Transmit+0x16a>
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc4c:	d102      	bne.n	800dc54 <HAL_SPI_Transmit+0x170>
 800dc4e:	683b      	ldr	r3, [r7, #0]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d114      	bne.n	800dc7e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f000 f937 	bl	800dec8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dc68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	2201      	movs	r2, #1
 800dc76:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	e11f      	b.n	800debe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dc84:	b29b      	uxth	r3, r3
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d1b9      	bne.n	800dbfe <HAL_SPI_Transmit+0x11a>
 800dc8a:	e0f2      	b.n	800de72 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	2b07      	cmp	r3, #7
 800dc92:	f240 80e7 	bls.w	800de64 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800dc96:	e05d      	b.n	800dd54 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	695b      	ldr	r3, [r3, #20]
 800dc9e:	f003 0302 	and.w	r3, r3, #2
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	d132      	bne.n	800dd0c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d918      	bls.n	800dce4 <HAL_SPI_Transmit+0x200>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d014      	beq.n	800dce4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	6812      	ldr	r2, [r2, #0]
 800dcc4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcca:	1d1a      	adds	r2, r3, #4
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	3b02      	subs	r3, #2
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dce2:	e037      	b.n	800dd54 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dce8:	881a      	ldrh	r2, [r3, #0]
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dcf2:	1c9a      	adds	r2, r3, #2
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dcfe:	b29b      	uxth	r3, r3
 800dd00:	3b01      	subs	r3, #1
 800dd02:	b29a      	uxth	r2, r3
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dd0a:	e023      	b.n	800dd54 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dd0c:	f7f9 ff3c 	bl	8007b88 <HAL_GetTick>
 800dd10:	4602      	mov	r2, r0
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	683a      	ldr	r2, [r7, #0]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d803      	bhi.n	800dd24 <HAL_SPI_Transmit+0x240>
 800dd1c:	683b      	ldr	r3, [r7, #0]
 800dd1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd22:	d102      	bne.n	800dd2a <HAL_SPI_Transmit+0x246>
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d114      	bne.n	800dd54 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f000 f8cc 	bl	800dec8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2201      	movs	r2, #1
 800dd4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800dd50:	2303      	movs	r3, #3
 800dd52:	e0b4      	b.n	800debe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d19b      	bne.n	800dc98 <HAL_SPI_Transmit+0x1b4>
 800dd60:	e087      	b.n	800de72 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	695b      	ldr	r3, [r3, #20]
 800dd68:	f003 0302 	and.w	r3, r3, #2
 800dd6c:	2b02      	cmp	r3, #2
 800dd6e:	d155      	bne.n	800de1c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	2b03      	cmp	r3, #3
 800dd7a:	d918      	bls.n	800ddae <HAL_SPI_Transmit+0x2ca>
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd80:	2b40      	cmp	r3, #64	; 0x40
 800dd82:	d914      	bls.n	800ddae <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	6812      	ldr	r2, [r2, #0]
 800dd8e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd94:	1d1a      	adds	r2, r3, #4
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dda0:	b29b      	uxth	r3, r3
 800dda2:	3b04      	subs	r3, #4
 800dda4:	b29a      	uxth	r2, r3
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ddac:	e05a      	b.n	800de64 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	2b01      	cmp	r3, #1
 800ddb8:	d917      	bls.n	800ddea <HAL_SPI_Transmit+0x306>
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d013      	beq.n	800ddea <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddc6:	881a      	ldrh	r2, [r3, #0]
 800ddc8:	69fb      	ldr	r3, [r7, #28]
 800ddca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddd0:	1c9a      	adds	r2, r3, #2
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800dddc:	b29b      	uxth	r3, r3
 800ddde:	3b02      	subs	r3, #2
 800dde0:	b29a      	uxth	r2, r3
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800dde8:	e03c      	b.n	800de64 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	3320      	adds	r3, #32
 800ddf4:	7812      	ldrb	r2, [r2, #0]
 800ddf6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddfc:	1c5a      	adds	r2, r3, #1
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de08:	b29b      	uxth	r3, r3
 800de0a:	3b01      	subs	r3, #1
 800de0c:	b29a      	uxth	r2, r3
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800de14:	e026      	b.n	800de64 <HAL_SPI_Transmit+0x380>
 800de16:	bf00      	nop
 800de18:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de1c:	f7f9 feb4 	bl	8007b88 <HAL_GetTick>
 800de20:	4602      	mov	r2, r0
 800de22:	697b      	ldr	r3, [r7, #20]
 800de24:	1ad3      	subs	r3, r2, r3
 800de26:	683a      	ldr	r2, [r7, #0]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d803      	bhi.n	800de34 <HAL_SPI_Transmit+0x350>
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de32:	d102      	bne.n	800de3a <HAL_SPI_Transmit+0x356>
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d114      	bne.n	800de64 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de3a:	68f8      	ldr	r0, [r7, #12]
 800de3c:	f000 f844 	bl	800dec8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	2200      	movs	r2, #0
 800de44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de4e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	2201      	movs	r2, #1
 800de5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800de60:	2303      	movs	r3, #3
 800de62:	e02c      	b.n	800debe <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	f47f af78 	bne.w	800dd62 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	697b      	ldr	r3, [r7, #20]
 800de78:	2200      	movs	r2, #0
 800de7a:	2108      	movs	r1, #8
 800de7c:	68f8      	ldr	r0, [r7, #12]
 800de7e:	f000 f8c3 	bl	800e008 <SPI_WaitOnFlagUntilTimeout>
 800de82:	4603      	mov	r3, r0
 800de84:	2b00      	cmp	r3, #0
 800de86:	d007      	beq.n	800de98 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de8e:	f043 0220 	orr.w	r2, r3, #32
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f000 f815 	bl	800dec8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	2200      	movs	r2, #0
 800dea2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2201      	movs	r2, #1
 800deaa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d001      	beq.n	800debc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800deb8:	2301      	movs	r3, #1
 800deba:	e000      	b.n	800debe <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800debc:	7efb      	ldrb	r3, [r7, #27]
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3720      	adds	r7, #32
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop

0800dec8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800dec8:	b480      	push	{r7}
 800deca:	b085      	sub	sp, #20
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	695b      	ldr	r3, [r3, #20]
 800ded6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	699a      	ldr	r2, [r3, #24]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	f042 0208 	orr.w	r2, r2, #8
 800dee6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	699a      	ldr	r2, [r3, #24]
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f042 0210 	orr.w	r2, r2, #16
 800def6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	681a      	ldr	r2, [r3, #0]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f022 0201 	bic.w	r2, r2, #1
 800df06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	6919      	ldr	r1, [r3, #16]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	4b3c      	ldr	r3, [pc, #240]	; (800e004 <SPI_CloseTransfer+0x13c>)
 800df14:	400b      	ands	r3, r1
 800df16:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	689a      	ldr	r2, [r3, #8]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800df26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df2e:	b2db      	uxtb	r3, r3
 800df30:	2b04      	cmp	r3, #4
 800df32:	d014      	beq.n	800df5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f003 0320 	and.w	r3, r3, #32
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00f      	beq.n	800df5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	699a      	ldr	r2, [r3, #24]
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f042 0220 	orr.w	r2, r2, #32
 800df5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b03      	cmp	r3, #3
 800df68:	d014      	beq.n	800df94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df70:	2b00      	cmp	r3, #0
 800df72:	d00f      	beq.n	800df94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df7a:	f043 0204 	orr.w	r2, r3, #4
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	699a      	ldr	r2, [r3, #24]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d00f      	beq.n	800dfbe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfa4:	f043 0201 	orr.w	r2, r3, #1
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	699a      	ldr	r2, [r3, #24]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dfbc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dfbe:	68fb      	ldr	r3, [r7, #12]
 800dfc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d00f      	beq.n	800dfe8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfce:	f043 0208 	orr.w	r2, r3, #8
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	699a      	ldr	r2, [r3, #24]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfe6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	2200      	movs	r2, #0
 800dfec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800dff8:	bf00      	nop
 800dffa:	3714      	adds	r7, #20
 800dffc:	46bd      	mov	sp, r7
 800dffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e002:	4770      	bx	lr
 800e004:	fffffc90 	.word	0xfffffc90

0800e008 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b084      	sub	sp, #16
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	603b      	str	r3, [r7, #0]
 800e014:	4613      	mov	r3, r2
 800e016:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e018:	e010      	b.n	800e03c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e01a:	f7f9 fdb5 	bl	8007b88 <HAL_GetTick>
 800e01e:	4602      	mov	r2, r0
 800e020:	683b      	ldr	r3, [r7, #0]
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	69ba      	ldr	r2, [r7, #24]
 800e026:	429a      	cmp	r2, r3
 800e028:	d803      	bhi.n	800e032 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800e02a:	69bb      	ldr	r3, [r7, #24]
 800e02c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e030:	d102      	bne.n	800e038 <SPI_WaitOnFlagUntilTimeout+0x30>
 800e032:	69bb      	ldr	r3, [r7, #24]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d101      	bne.n	800e03c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800e038:	2303      	movs	r3, #3
 800e03a:	e00f      	b.n	800e05c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	695a      	ldr	r2, [r3, #20]
 800e042:	68bb      	ldr	r3, [r7, #8]
 800e044:	4013      	ands	r3, r2
 800e046:	68ba      	ldr	r2, [r7, #8]
 800e048:	429a      	cmp	r2, r3
 800e04a:	bf0c      	ite	eq
 800e04c:	2301      	moveq	r3, #1
 800e04e:	2300      	movne	r3, #0
 800e050:	b2db      	uxtb	r3, r3
 800e052:	461a      	mov	r2, r3
 800e054:	79fb      	ldrb	r3, [r7, #7]
 800e056:	429a      	cmp	r2, r3
 800e058:	d0df      	beq.n	800e01a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800e05a:	2300      	movs	r3, #0
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3710      	adds	r7, #16
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}

0800e064 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800e064:	b480      	push	{r7}
 800e066:	b085      	sub	sp, #20
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e070:	095b      	lsrs	r3, r3, #5
 800e072:	3301      	adds	r3, #1
 800e074:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	68db      	ldr	r3, [r3, #12]
 800e07a:	3301      	adds	r3, #1
 800e07c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e07e:	68bb      	ldr	r3, [r7, #8]
 800e080:	3307      	adds	r3, #7
 800e082:	08db      	lsrs	r3, r3, #3
 800e084:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	fb02 f303 	mul.w	r3, r2, r3
}
 800e08e:	4618      	mov	r0, r3
 800e090:	3714      	adds	r7, #20
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr

0800e09a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e09a:	b580      	push	{r7, lr}
 800e09c:	b082      	sub	sp, #8
 800e09e:	af00      	add	r7, sp, #0
 800e0a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d101      	bne.n	800e0ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	e049      	b.n	800e140 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d106      	bne.n	800e0c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f7f9 fad5 	bl	8007670 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2202      	movs	r2, #2
 800e0ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681a      	ldr	r2, [r3, #0]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	4619      	mov	r1, r3
 800e0d8:	4610      	mov	r0, r2
 800e0da:	f000 fa23 	bl	800e524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	2201      	movs	r2, #1
 800e0e2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2201      	movs	r2, #1
 800e0ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	2201      	movs	r2, #1
 800e0fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2201      	movs	r2, #1
 800e102:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2201      	movs	r2, #1
 800e10a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2201      	movs	r2, #1
 800e112:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2201      	movs	r2, #1
 800e11a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2201      	movs	r2, #1
 800e122:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2201      	movs	r2, #1
 800e132:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2201      	movs	r2, #1
 800e13a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e13e:	2300      	movs	r3, #0
}
 800e140:	4618      	mov	r0, r3
 800e142:	3708      	adds	r7, #8
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e148:	b480      	push	{r7}
 800e14a:	b085      	sub	sp, #20
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e156:	b2db      	uxtb	r3, r3
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d001      	beq.n	800e160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e15c:	2301      	movs	r3, #1
 800e15e:	e054      	b.n	800e20a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	2202      	movs	r2, #2
 800e164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	68da      	ldr	r2, [r3, #12]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	f042 0201 	orr.w	r2, r2, #1
 800e176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4a26      	ldr	r2, [pc, #152]	; (800e218 <HAL_TIM_Base_Start_IT+0xd0>)
 800e17e:	4293      	cmp	r3, r2
 800e180:	d022      	beq.n	800e1c8 <HAL_TIM_Base_Start_IT+0x80>
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e18a:	d01d      	beq.n	800e1c8 <HAL_TIM_Base_Start_IT+0x80>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a22      	ldr	r2, [pc, #136]	; (800e21c <HAL_TIM_Base_Start_IT+0xd4>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d018      	beq.n	800e1c8 <HAL_TIM_Base_Start_IT+0x80>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a21      	ldr	r2, [pc, #132]	; (800e220 <HAL_TIM_Base_Start_IT+0xd8>)
 800e19c:	4293      	cmp	r3, r2
 800e19e:	d013      	beq.n	800e1c8 <HAL_TIM_Base_Start_IT+0x80>
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	4a1f      	ldr	r2, [pc, #124]	; (800e224 <HAL_TIM_Base_Start_IT+0xdc>)
 800e1a6:	4293      	cmp	r3, r2
 800e1a8:	d00e      	beq.n	800e1c8 <HAL_TIM_Base_Start_IT+0x80>
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	4a1e      	ldr	r2, [pc, #120]	; (800e228 <HAL_TIM_Base_Start_IT+0xe0>)
 800e1b0:	4293      	cmp	r3, r2
 800e1b2:	d009      	beq.n	800e1c8 <HAL_TIM_Base_Start_IT+0x80>
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	4a1c      	ldr	r2, [pc, #112]	; (800e22c <HAL_TIM_Base_Start_IT+0xe4>)
 800e1ba:	4293      	cmp	r3, r2
 800e1bc:	d004      	beq.n	800e1c8 <HAL_TIM_Base_Start_IT+0x80>
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	4a1b      	ldr	r2, [pc, #108]	; (800e230 <HAL_TIM_Base_Start_IT+0xe8>)
 800e1c4:	4293      	cmp	r3, r2
 800e1c6:	d115      	bne.n	800e1f4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	689a      	ldr	r2, [r3, #8]
 800e1ce:	4b19      	ldr	r3, [pc, #100]	; (800e234 <HAL_TIM_Base_Start_IT+0xec>)
 800e1d0:	4013      	ands	r3, r2
 800e1d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	2b06      	cmp	r3, #6
 800e1d8:	d015      	beq.n	800e206 <HAL_TIM_Base_Start_IT+0xbe>
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e1e0:	d011      	beq.n	800e206 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	f042 0201 	orr.w	r2, r2, #1
 800e1f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e1f2:	e008      	b.n	800e206 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f042 0201 	orr.w	r2, r2, #1
 800e202:	601a      	str	r2, [r3, #0]
 800e204:	e000      	b.n	800e208 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e206:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	4618      	mov	r0, r3
 800e20c:	3714      	adds	r7, #20
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr
 800e216:	bf00      	nop
 800e218:	40010000 	.word	0x40010000
 800e21c:	40000400 	.word	0x40000400
 800e220:	40000800 	.word	0x40000800
 800e224:	40000c00 	.word	0x40000c00
 800e228:	40010400 	.word	0x40010400
 800e22c:	40001800 	.word	0x40001800
 800e230:	40014000 	.word	0x40014000
 800e234:	00010007 	.word	0x00010007

0800e238 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	68da      	ldr	r2, [r3, #12]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	f022 0201 	bic.w	r2, r2, #1
 800e24e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	6a1a      	ldr	r2, [r3, #32]
 800e256:	f241 1311 	movw	r3, #4369	; 0x1111
 800e25a:	4013      	ands	r3, r2
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d10f      	bne.n	800e280 <HAL_TIM_Base_Stop_IT+0x48>
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	6a1a      	ldr	r2, [r3, #32]
 800e266:	f240 4344 	movw	r3, #1092	; 0x444
 800e26a:	4013      	ands	r3, r2
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d107      	bne.n	800e280 <HAL_TIM_Base_Stop_IT+0x48>
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f022 0201 	bic.w	r2, r2, #1
 800e27e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2201      	movs	r2, #1
 800e284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800e288:	2300      	movs	r3, #0
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	370c      	adds	r7, #12
 800e28e:	46bd      	mov	sp, r7
 800e290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e294:	4770      	bx	lr

0800e296 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b082      	sub	sp, #8
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	691b      	ldr	r3, [r3, #16]
 800e2a4:	f003 0302 	and.w	r3, r3, #2
 800e2a8:	2b02      	cmp	r3, #2
 800e2aa:	d122      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	f003 0302 	and.w	r3, r3, #2
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d11b      	bne.n	800e2f2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f06f 0202 	mvn.w	r2, #2
 800e2c2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	699b      	ldr	r3, [r3, #24]
 800e2d0:	f003 0303 	and.w	r3, r3, #3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d003      	beq.n	800e2e0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 f905 	bl	800e4e8 <HAL_TIM_IC_CaptureCallback>
 800e2de:	e005      	b.n	800e2ec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f000 f8f7 	bl	800e4d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2e6:	6878      	ldr	r0, [r7, #4]
 800e2e8:	f000 f908 	bl	800e4fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	f003 0304 	and.w	r3, r3, #4
 800e2fc:	2b04      	cmp	r3, #4
 800e2fe:	d122      	bne.n	800e346 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	f003 0304 	and.w	r3, r3, #4
 800e30a:	2b04      	cmp	r3, #4
 800e30c:	d11b      	bne.n	800e346 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f06f 0204 	mvn.w	r2, #4
 800e316:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	2202      	movs	r2, #2
 800e31c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	699b      	ldr	r3, [r3, #24]
 800e324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d003      	beq.n	800e334 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 f8db 	bl	800e4e8 <HAL_TIM_IC_CaptureCallback>
 800e332:	e005      	b.n	800e340 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f000 f8cd 	bl	800e4d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f000 f8de 	bl	800e4fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	2200      	movs	r2, #0
 800e344:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	691b      	ldr	r3, [r3, #16]
 800e34c:	f003 0308 	and.w	r3, r3, #8
 800e350:	2b08      	cmp	r3, #8
 800e352:	d122      	bne.n	800e39a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68db      	ldr	r3, [r3, #12]
 800e35a:	f003 0308 	and.w	r3, r3, #8
 800e35e:	2b08      	cmp	r3, #8
 800e360:	d11b      	bne.n	800e39a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	f06f 0208 	mvn.w	r2, #8
 800e36a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2204      	movs	r2, #4
 800e370:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	69db      	ldr	r3, [r3, #28]
 800e378:	f003 0303 	and.w	r3, r3, #3
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d003      	beq.n	800e388 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 f8b1 	bl	800e4e8 <HAL_TIM_IC_CaptureCallback>
 800e386:	e005      	b.n	800e394 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f8a3 	bl	800e4d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e38e:	6878      	ldr	r0, [r7, #4]
 800e390:	f000 f8b4 	bl	800e4fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	2200      	movs	r2, #0
 800e398:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	691b      	ldr	r3, [r3, #16]
 800e3a0:	f003 0310 	and.w	r3, r3, #16
 800e3a4:	2b10      	cmp	r3, #16
 800e3a6:	d122      	bne.n	800e3ee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	f003 0310 	and.w	r3, r3, #16
 800e3b2:	2b10      	cmp	r3, #16
 800e3b4:	d11b      	bne.n	800e3ee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	f06f 0210 	mvn.w	r2, #16
 800e3be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	2208      	movs	r2, #8
 800e3c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	69db      	ldr	r3, [r3, #28]
 800e3cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d003      	beq.n	800e3dc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 f887 	bl	800e4e8 <HAL_TIM_IC_CaptureCallback>
 800e3da:	e005      	b.n	800e3e8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f879 	bl	800e4d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 f88a 	bl	800e4fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2200      	movs	r2, #0
 800e3ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	691b      	ldr	r3, [r3, #16]
 800e3f4:	f003 0301 	and.w	r3, r3, #1
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d10e      	bne.n	800e41a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	68db      	ldr	r3, [r3, #12]
 800e402:	f003 0301 	and.w	r3, r3, #1
 800e406:	2b01      	cmp	r3, #1
 800e408:	d107      	bne.n	800e41a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	f06f 0201 	mvn.w	r2, #1
 800e412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f7f8 fb95 	bl	8006b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	691b      	ldr	r3, [r3, #16]
 800e420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e424:	2b80      	cmp	r3, #128	; 0x80
 800e426:	d10e      	bne.n	800e446 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	68db      	ldr	r3, [r3, #12]
 800e42e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e432:	2b80      	cmp	r3, #128	; 0x80
 800e434:	d107      	bne.n	800e446 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e43e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f000 f9a1 	bl	800e788 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	691b      	ldr	r3, [r3, #16]
 800e44c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e450:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e454:	d10e      	bne.n	800e474 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68db      	ldr	r3, [r3, #12]
 800e45c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e460:	2b80      	cmp	r3, #128	; 0x80
 800e462:	d107      	bne.n	800e474 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e46c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 f994 	bl	800e79c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	691b      	ldr	r3, [r3, #16]
 800e47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e47e:	2b40      	cmp	r3, #64	; 0x40
 800e480:	d10e      	bne.n	800e4a0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	681b      	ldr	r3, [r3, #0]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e48c:	2b40      	cmp	r3, #64	; 0x40
 800e48e:	d107      	bne.n	800e4a0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f000 f838 	bl	800e510 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	f003 0320 	and.w	r3, r3, #32
 800e4aa:	2b20      	cmp	r3, #32
 800e4ac:	d10e      	bne.n	800e4cc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	68db      	ldr	r3, [r3, #12]
 800e4b4:	f003 0320 	and.w	r3, r3, #32
 800e4b8:	2b20      	cmp	r3, #32
 800e4ba:	d107      	bne.n	800e4cc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	f06f 0220 	mvn.w	r2, #32
 800e4c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4c6:	6878      	ldr	r0, [r7, #4]
 800e4c8:	f000 f954 	bl	800e774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4cc:	bf00      	nop
 800e4ce:	3708      	adds	r7, #8
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e4dc:	bf00      	nop
 800e4de:	370c      	adds	r7, #12
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e6:	4770      	bx	lr

0800e4e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e4f0:	bf00      	nop
 800e4f2:	370c      	adds	r7, #12
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fa:	4770      	bx	lr

0800e4fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b083      	sub	sp, #12
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e504:	bf00      	nop
 800e506:	370c      	adds	r7, #12
 800e508:	46bd      	mov	sp, r7
 800e50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50e:	4770      	bx	lr

0800e510 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
 800e516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e518:	bf00      	nop
 800e51a:	370c      	adds	r7, #12
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e524:	b480      	push	{r7}
 800e526:	b085      	sub	sp, #20
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	4a40      	ldr	r2, [pc, #256]	; (800e638 <TIM_Base_SetConfig+0x114>)
 800e538:	4293      	cmp	r3, r2
 800e53a:	d013      	beq.n	800e564 <TIM_Base_SetConfig+0x40>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e542:	d00f      	beq.n	800e564 <TIM_Base_SetConfig+0x40>
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	4a3d      	ldr	r2, [pc, #244]	; (800e63c <TIM_Base_SetConfig+0x118>)
 800e548:	4293      	cmp	r3, r2
 800e54a:	d00b      	beq.n	800e564 <TIM_Base_SetConfig+0x40>
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	4a3c      	ldr	r2, [pc, #240]	; (800e640 <TIM_Base_SetConfig+0x11c>)
 800e550:	4293      	cmp	r3, r2
 800e552:	d007      	beq.n	800e564 <TIM_Base_SetConfig+0x40>
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	4a3b      	ldr	r2, [pc, #236]	; (800e644 <TIM_Base_SetConfig+0x120>)
 800e558:	4293      	cmp	r3, r2
 800e55a:	d003      	beq.n	800e564 <TIM_Base_SetConfig+0x40>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	4a3a      	ldr	r2, [pc, #232]	; (800e648 <TIM_Base_SetConfig+0x124>)
 800e560:	4293      	cmp	r3, r2
 800e562:	d108      	bne.n	800e576 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e56a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	68fa      	ldr	r2, [r7, #12]
 800e572:	4313      	orrs	r3, r2
 800e574:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a2f      	ldr	r2, [pc, #188]	; (800e638 <TIM_Base_SetConfig+0x114>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d01f      	beq.n	800e5be <TIM_Base_SetConfig+0x9a>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e584:	d01b      	beq.n	800e5be <TIM_Base_SetConfig+0x9a>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a2c      	ldr	r2, [pc, #176]	; (800e63c <TIM_Base_SetConfig+0x118>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d017      	beq.n	800e5be <TIM_Base_SetConfig+0x9a>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a2b      	ldr	r2, [pc, #172]	; (800e640 <TIM_Base_SetConfig+0x11c>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d013      	beq.n	800e5be <TIM_Base_SetConfig+0x9a>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a2a      	ldr	r2, [pc, #168]	; (800e644 <TIM_Base_SetConfig+0x120>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d00f      	beq.n	800e5be <TIM_Base_SetConfig+0x9a>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	4a29      	ldr	r2, [pc, #164]	; (800e648 <TIM_Base_SetConfig+0x124>)
 800e5a2:	4293      	cmp	r3, r2
 800e5a4:	d00b      	beq.n	800e5be <TIM_Base_SetConfig+0x9a>
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a28      	ldr	r2, [pc, #160]	; (800e64c <TIM_Base_SetConfig+0x128>)
 800e5aa:	4293      	cmp	r3, r2
 800e5ac:	d007      	beq.n	800e5be <TIM_Base_SetConfig+0x9a>
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	4a27      	ldr	r2, [pc, #156]	; (800e650 <TIM_Base_SetConfig+0x12c>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d003      	beq.n	800e5be <TIM_Base_SetConfig+0x9a>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	4a26      	ldr	r2, [pc, #152]	; (800e654 <TIM_Base_SetConfig+0x130>)
 800e5ba:	4293      	cmp	r3, r2
 800e5bc:	d108      	bne.n	800e5d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e5c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e5c6:	683b      	ldr	r3, [r7, #0]
 800e5c8:	68db      	ldr	r3, [r3, #12]
 800e5ca:	68fa      	ldr	r2, [r7, #12]
 800e5cc:	4313      	orrs	r3, r2
 800e5ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e5d6:	683b      	ldr	r3, [r7, #0]
 800e5d8:	695b      	ldr	r3, [r3, #20]
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	689a      	ldr	r2, [r3, #8]
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	4a10      	ldr	r2, [pc, #64]	; (800e638 <TIM_Base_SetConfig+0x114>)
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	d00f      	beq.n	800e61c <TIM_Base_SetConfig+0xf8>
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	4a12      	ldr	r2, [pc, #72]	; (800e648 <TIM_Base_SetConfig+0x124>)
 800e600:	4293      	cmp	r3, r2
 800e602:	d00b      	beq.n	800e61c <TIM_Base_SetConfig+0xf8>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	4a11      	ldr	r2, [pc, #68]	; (800e64c <TIM_Base_SetConfig+0x128>)
 800e608:	4293      	cmp	r3, r2
 800e60a:	d007      	beq.n	800e61c <TIM_Base_SetConfig+0xf8>
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	4a10      	ldr	r2, [pc, #64]	; (800e650 <TIM_Base_SetConfig+0x12c>)
 800e610:	4293      	cmp	r3, r2
 800e612:	d003      	beq.n	800e61c <TIM_Base_SetConfig+0xf8>
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	4a0f      	ldr	r2, [pc, #60]	; (800e654 <TIM_Base_SetConfig+0x130>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d103      	bne.n	800e624 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e61c:	683b      	ldr	r3, [r7, #0]
 800e61e:	691a      	ldr	r2, [r3, #16]
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2201      	movs	r2, #1
 800e628:	615a      	str	r2, [r3, #20]
}
 800e62a:	bf00      	nop
 800e62c:	3714      	adds	r7, #20
 800e62e:	46bd      	mov	sp, r7
 800e630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e634:	4770      	bx	lr
 800e636:	bf00      	nop
 800e638:	40010000 	.word	0x40010000
 800e63c:	40000400 	.word	0x40000400
 800e640:	40000800 	.word	0x40000800
 800e644:	40000c00 	.word	0x40000c00
 800e648:	40010400 	.word	0x40010400
 800e64c:	40014000 	.word	0x40014000
 800e650:	40014400 	.word	0x40014400
 800e654:	40014800 	.word	0x40014800

0800e658 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e658:	b480      	push	{r7}
 800e65a:	b085      	sub	sp, #20
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
 800e660:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e668:	2b01      	cmp	r3, #1
 800e66a:	d101      	bne.n	800e670 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e66c:	2302      	movs	r3, #2
 800e66e:	e06d      	b.n	800e74c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	2202      	movs	r2, #2
 800e67c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	685b      	ldr	r3, [r3, #4]
 800e686:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	689b      	ldr	r3, [r3, #8]
 800e68e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a30      	ldr	r2, [pc, #192]	; (800e758 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d004      	beq.n	800e6a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	4a2f      	ldr	r2, [pc, #188]	; (800e75c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e6a0:	4293      	cmp	r3, r2
 800e6a2:	d108      	bne.n	800e6b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e6aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e6ac:	683b      	ldr	r3, [r7, #0]
 800e6ae:	685b      	ldr	r3, [r3, #4]
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	4313      	orrs	r3, r2
 800e6b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e6bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	68fa      	ldr	r2, [r7, #12]
 800e6c4:	4313      	orrs	r3, r2
 800e6c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a20      	ldr	r2, [pc, #128]	; (800e758 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d022      	beq.n	800e720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	681b      	ldr	r3, [r3, #0]
 800e6de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e6e2:	d01d      	beq.n	800e720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	4a1d      	ldr	r2, [pc, #116]	; (800e760 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e6ea:	4293      	cmp	r3, r2
 800e6ec:	d018      	beq.n	800e720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a1c      	ldr	r2, [pc, #112]	; (800e764 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d013      	beq.n	800e720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	4a1a      	ldr	r2, [pc, #104]	; (800e768 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e6fe:	4293      	cmp	r3, r2
 800e700:	d00e      	beq.n	800e720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a15      	ldr	r2, [pc, #84]	; (800e75c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d009      	beq.n	800e720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a16      	ldr	r2, [pc, #88]	; (800e76c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d004      	beq.n	800e720 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a15      	ldr	r2, [pc, #84]	; (800e770 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d10c      	bne.n	800e73a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e726:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	689b      	ldr	r3, [r3, #8]
 800e72c:	68ba      	ldr	r2, [r7, #8]
 800e72e:	4313      	orrs	r3, r2
 800e730:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2201      	movs	r2, #1
 800e73e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3714      	adds	r7, #20
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr
 800e758:	40010000 	.word	0x40010000
 800e75c:	40010400 	.word	0x40010400
 800e760:	40000400 	.word	0x40000400
 800e764:	40000800 	.word	0x40000800
 800e768:	40000c00 	.word	0x40000c00
 800e76c:	40001800 	.word	0x40001800
 800e770:	40014000 	.word	0x40014000

0800e774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e774:	b480      	push	{r7}
 800e776:	b083      	sub	sp, #12
 800e778:	af00      	add	r7, sp, #0
 800e77a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e77c:	bf00      	nop
 800e77e:	370c      	adds	r7, #12
 800e780:	46bd      	mov	sp, r7
 800e782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e786:	4770      	bx	lr

0800e788 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e788:	b480      	push	{r7}
 800e78a:	b083      	sub	sp, #12
 800e78c:	af00      	add	r7, sp, #0
 800e78e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e790:	bf00      	nop
 800e792:	370c      	adds	r7, #12
 800e794:	46bd      	mov	sp, r7
 800e796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79a:	4770      	bx	lr

0800e79c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e7a4:	bf00      	nop
 800e7a6:	370c      	adds	r7, #12
 800e7a8:	46bd      	mov	sp, r7
 800e7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ae:	4770      	bx	lr

0800e7b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d101      	bne.n	800e7c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e7be:	2301      	movs	r3, #1
 800e7c0:	e042      	b.n	800e848 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d106      	bne.n	800e7da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	f7f8 ff73 	bl	80076c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	2224      	movs	r2, #36	; 0x24
 800e7de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	681a      	ldr	r2, [r3, #0]
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	f022 0201 	bic.w	r2, r2, #1
 800e7f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e7f2:	6878      	ldr	r0, [r7, #4]
 800e7f4:	f000 fbea 	bl	800efcc <UART_SetConfig>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	2b01      	cmp	r3, #1
 800e7fc:	d101      	bne.n	800e802 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e7fe:	2301      	movs	r3, #1
 800e800:	e022      	b.n	800e848 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e806:	2b00      	cmp	r3, #0
 800e808:	d002      	beq.n	800e810 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e80a:	6878      	ldr	r0, [r7, #4]
 800e80c:	f001 f946 	bl	800fa9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	685a      	ldr	r2, [r3, #4]
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e81e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	689a      	ldr	r2, [r3, #8]
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e82e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f042 0201 	orr.w	r2, r2, #1
 800e83e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f001 f9cd 	bl	800fbe0 <UART_CheckIdleState>
 800e846:	4603      	mov	r3, r0
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}

0800e850 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e850:	b580      	push	{r7, lr}
 800e852:	b0ba      	sub	sp, #232	; 0xe8
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	69db      	ldr	r3, [r3, #28]
 800e85e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	689b      	ldr	r3, [r3, #8]
 800e872:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e876:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e87a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e87e:	4013      	ands	r3, r2
 800e880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e884:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d11b      	bne.n	800e8c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e88c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e890:	f003 0320 	and.w	r3, r3, #32
 800e894:	2b00      	cmp	r3, #0
 800e896:	d015      	beq.n	800e8c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e89c:	f003 0320 	and.w	r3, r3, #32
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d105      	bne.n	800e8b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e8a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e8a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d009      	beq.n	800e8c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f000 835a 	beq.w	800ef6e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	4798      	blx	r3
      }
      return;
 800e8c2:	e354      	b.n	800ef6e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e8c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f000 811f 	beq.w	800eb0c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e8ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e8d2:	4b8b      	ldr	r3, [pc, #556]	; (800eb00 <HAL_UART_IRQHandler+0x2b0>)
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d106      	bne.n	800e8e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e8da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e8de:	4b89      	ldr	r3, [pc, #548]	; (800eb04 <HAL_UART_IRQHandler+0x2b4>)
 800e8e0:	4013      	ands	r3, r2
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	f000 8112 	beq.w	800eb0c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e8e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e8ec:	f003 0301 	and.w	r3, r3, #1
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d011      	beq.n	800e918 <HAL_UART_IRQHandler+0xc8>
 800e8f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e8f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00b      	beq.n	800e918 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	2201      	movs	r2, #1
 800e906:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e90e:	f043 0201 	orr.w	r2, r3, #1
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e91c:	f003 0302 	and.w	r3, r3, #2
 800e920:	2b00      	cmp	r3, #0
 800e922:	d011      	beq.n	800e948 <HAL_UART_IRQHandler+0xf8>
 800e924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e928:	f003 0301 	and.w	r3, r3, #1
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00b      	beq.n	800e948 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	681b      	ldr	r3, [r3, #0]
 800e934:	2202      	movs	r2, #2
 800e936:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e93e:	f043 0204 	orr.w	r2, r3, #4
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e94c:	f003 0304 	and.w	r3, r3, #4
 800e950:	2b00      	cmp	r3, #0
 800e952:	d011      	beq.n	800e978 <HAL_UART_IRQHandler+0x128>
 800e954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e958:	f003 0301 	and.w	r3, r3, #1
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d00b      	beq.n	800e978 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	2204      	movs	r2, #4
 800e966:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e96e:	f043 0202 	orr.w	r2, r3, #2
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e97c:	f003 0308 	and.w	r3, r3, #8
 800e980:	2b00      	cmp	r3, #0
 800e982:	d017      	beq.n	800e9b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e988:	f003 0320 	and.w	r3, r3, #32
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d105      	bne.n	800e99c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e990:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e994:	4b5a      	ldr	r3, [pc, #360]	; (800eb00 <HAL_UART_IRQHandler+0x2b0>)
 800e996:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00b      	beq.n	800e9b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	2208      	movs	r2, #8
 800e9a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9aa:	f043 0208 	orr.w	r2, r3, #8
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e9b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d012      	beq.n	800e9e6 <HAL_UART_IRQHandler+0x196>
 800e9c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d00c      	beq.n	800e9e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9dc:	f043 0220 	orr.w	r2, r3, #32
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f000 82c0 	beq.w	800ef72 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e9f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9f6:	f003 0320 	and.w	r3, r3, #32
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d013      	beq.n	800ea26 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e9fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea02:	f003 0320 	and.w	r3, r3, #32
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d105      	bne.n	800ea16 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ea0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ea0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d007      	beq.n	800ea26 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d003      	beq.n	800ea26 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ea2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea3a:	2b40      	cmp	r3, #64	; 0x40
 800ea3c:	d005      	beq.n	800ea4a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ea3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ea42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d04f      	beq.n	800eaea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f001 f9dc 	bl	800fe08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	689b      	ldr	r3, [r3, #8]
 800ea56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea5a:	2b40      	cmp	r3, #64	; 0x40
 800ea5c:	d141      	bne.n	800eae2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	3308      	adds	r3, #8
 800ea64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ea6c:	e853 3f00 	ldrex	r3, [r3]
 800ea70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ea74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ea78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ea7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	3308      	adds	r3, #8
 800ea86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ea8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ea8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ea96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ea9a:	e841 2300 	strex	r3, r2, [r1]
 800ea9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800eaa2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d1d9      	bne.n	800ea5e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d013      	beq.n	800eada <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eab6:	4a14      	ldr	r2, [pc, #80]	; (800eb08 <HAL_UART_IRQHandler+0x2b8>)
 800eab8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7fa f83c 	bl	8008b3c <HAL_DMA_Abort_IT>
 800eac4:	4603      	mov	r3, r0
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d017      	beq.n	800eafa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800ead4:	4610      	mov	r0, r2
 800ead6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ead8:	e00f      	b.n	800eafa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f000 fa60 	bl	800efa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eae0:	e00b      	b.n	800eafa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 fa5c 	bl	800efa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eae8:	e007      	b.n	800eafa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fa58 	bl	800efa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800eaf8:	e23b      	b.n	800ef72 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eafa:	bf00      	nop
    return;
 800eafc:	e239      	b.n	800ef72 <HAL_UART_IRQHandler+0x722>
 800eafe:	bf00      	nop
 800eb00:	10000001 	.word	0x10000001
 800eb04:	04000120 	.word	0x04000120
 800eb08:	0800fed5 	.word	0x0800fed5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	f040 81ce 	bne.w	800eeb2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800eb16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb1a:	f003 0310 	and.w	r3, r3, #16
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	f000 81c7 	beq.w	800eeb2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800eb24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb28:	f003 0310 	and.w	r3, r3, #16
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f000 81c0 	beq.w	800eeb2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	2210      	movs	r2, #16
 800eb38:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	689b      	ldr	r3, [r3, #8]
 800eb40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb44:	2b40      	cmp	r3, #64	; 0x40
 800eb46:	f040 813b 	bne.w	800edc0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	4a8b      	ldr	r2, [pc, #556]	; (800ed80 <HAL_UART_IRQHandler+0x530>)
 800eb52:	4293      	cmp	r3, r2
 800eb54:	d059      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	4a89      	ldr	r2, [pc, #548]	; (800ed84 <HAL_UART_IRQHandler+0x534>)
 800eb5e:	4293      	cmp	r3, r2
 800eb60:	d053      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	4a87      	ldr	r2, [pc, #540]	; (800ed88 <HAL_UART_IRQHandler+0x538>)
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d04d      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4a85      	ldr	r2, [pc, #532]	; (800ed8c <HAL_UART_IRQHandler+0x53c>)
 800eb76:	4293      	cmp	r3, r2
 800eb78:	d047      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4a83      	ldr	r2, [pc, #524]	; (800ed90 <HAL_UART_IRQHandler+0x540>)
 800eb82:	4293      	cmp	r3, r2
 800eb84:	d041      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a81      	ldr	r2, [pc, #516]	; (800ed94 <HAL_UART_IRQHandler+0x544>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d03b      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	4a7f      	ldr	r2, [pc, #508]	; (800ed98 <HAL_UART_IRQHandler+0x548>)
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d035      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	4a7d      	ldr	r2, [pc, #500]	; (800ed9c <HAL_UART_IRQHandler+0x54c>)
 800eba6:	4293      	cmp	r3, r2
 800eba8:	d02f      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	4a7b      	ldr	r2, [pc, #492]	; (800eda0 <HAL_UART_IRQHandler+0x550>)
 800ebb2:	4293      	cmp	r3, r2
 800ebb4:	d029      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	4a79      	ldr	r2, [pc, #484]	; (800eda4 <HAL_UART_IRQHandler+0x554>)
 800ebbe:	4293      	cmp	r3, r2
 800ebc0:	d023      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a77      	ldr	r2, [pc, #476]	; (800eda8 <HAL_UART_IRQHandler+0x558>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d01d      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	4a75      	ldr	r2, [pc, #468]	; (800edac <HAL_UART_IRQHandler+0x55c>)
 800ebd6:	4293      	cmp	r3, r2
 800ebd8:	d017      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a73      	ldr	r2, [pc, #460]	; (800edb0 <HAL_UART_IRQHandler+0x560>)
 800ebe2:	4293      	cmp	r3, r2
 800ebe4:	d011      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	4a71      	ldr	r2, [pc, #452]	; (800edb4 <HAL_UART_IRQHandler+0x564>)
 800ebee:	4293      	cmp	r3, r2
 800ebf0:	d00b      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a6f      	ldr	r2, [pc, #444]	; (800edb8 <HAL_UART_IRQHandler+0x568>)
 800ebfa:	4293      	cmp	r3, r2
 800ebfc:	d005      	beq.n	800ec0a <HAL_UART_IRQHandler+0x3ba>
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a6d      	ldr	r2, [pc, #436]	; (800edbc <HAL_UART_IRQHandler+0x56c>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d105      	bne.n	800ec16 <HAL_UART_IRQHandler+0x3c6>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	b29b      	uxth	r3, r3
 800ec14:	e004      	b.n	800ec20 <HAL_UART_IRQHandler+0x3d0>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	685b      	ldr	r3, [r3, #4]
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ec24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 81a4 	beq.w	800ef76 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ec38:	429a      	cmp	r2, r3
 800ec3a:	f080 819c 	bcs.w	800ef76 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ec44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec4c:	69db      	ldr	r3, [r3, #28]
 800ec4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec52:	f000 8086 	beq.w	800ed62 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ec62:	e853 3f00 	ldrex	r3, [r3]
 800ec66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800ec6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ec6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ec72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ec80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ec84:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec88:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800ec8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800ec90:	e841 2300 	strex	r3, r2, [r1]
 800ec94:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800ec98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d1da      	bne.n	800ec56 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	3308      	adds	r3, #8
 800eca6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eca8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ecaa:	e853 3f00 	ldrex	r3, [r3]
 800ecae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800ecb0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecb2:	f023 0301 	bic.w	r3, r3, #1
 800ecb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	3308      	adds	r3, #8
 800ecc0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ecc4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ecc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800eccc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ecd0:	e841 2300 	strex	r3, r2, [r1]
 800ecd4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ecd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1e1      	bne.n	800eca0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	3308      	adds	r3, #8
 800ece2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ece4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ece6:	e853 3f00 	ldrex	r3, [r3]
 800ecea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ecec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ecf2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	3308      	adds	r3, #8
 800ecfc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ed00:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ed02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed04:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ed06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ed08:	e841 2300 	strex	r3, r2, [r1]
 800ed0c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ed0e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d1e3      	bne.n	800ecdc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2220      	movs	r2, #32
 800ed18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2200      	movs	r2, #0
 800ed20:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed2a:	e853 3f00 	ldrex	r3, [r3]
 800ed2e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ed30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed32:	f023 0310 	bic.w	r3, r3, #16
 800ed36:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	461a      	mov	r2, r3
 800ed40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ed44:	65bb      	str	r3, [r7, #88]	; 0x58
 800ed46:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed48:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ed4a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ed4c:	e841 2300 	strex	r3, r2, [r1]
 800ed50:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ed52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d1e4      	bne.n	800ed22 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7f9 fbcf 	bl	8008500 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ed6e:	b29b      	uxth	r3, r3
 800ed70:	1ad3      	subs	r3, r2, r3
 800ed72:	b29b      	uxth	r3, r3
 800ed74:	4619      	mov	r1, r3
 800ed76:	6878      	ldr	r0, [r7, #4]
 800ed78:	f000 f91c 	bl	800efb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ed7c:	e0fb      	b.n	800ef76 <HAL_UART_IRQHandler+0x726>
 800ed7e:	bf00      	nop
 800ed80:	40020010 	.word	0x40020010
 800ed84:	40020028 	.word	0x40020028
 800ed88:	40020040 	.word	0x40020040
 800ed8c:	40020058 	.word	0x40020058
 800ed90:	40020070 	.word	0x40020070
 800ed94:	40020088 	.word	0x40020088
 800ed98:	400200a0 	.word	0x400200a0
 800ed9c:	400200b8 	.word	0x400200b8
 800eda0:	40020410 	.word	0x40020410
 800eda4:	40020428 	.word	0x40020428
 800eda8:	40020440 	.word	0x40020440
 800edac:	40020458 	.word	0x40020458
 800edb0:	40020470 	.word	0x40020470
 800edb4:	40020488 	.word	0x40020488
 800edb8:	400204a0 	.word	0x400204a0
 800edbc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800edcc:	b29b      	uxth	r3, r3
 800edce:	1ad3      	subs	r3, r2, r3
 800edd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800edda:	b29b      	uxth	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f000 80cc 	beq.w	800ef7a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800ede2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	f000 80c7 	beq.w	800ef7a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf4:	e853 3f00 	ldrex	r3, [r3]
 800edf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800edfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800edfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ee00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	461a      	mov	r2, r3
 800ee0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ee0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ee10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee16:	e841 2300 	strex	r3, r2, [r1]
 800ee1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ee1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d1e4      	bne.n	800edec <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3308      	adds	r3, #8
 800ee28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2c:	e853 3f00 	ldrex	r3, [r3]
 800ee30:	623b      	str	r3, [r7, #32]
   return(result);
 800ee32:	6a3a      	ldr	r2, [r7, #32]
 800ee34:	4b54      	ldr	r3, [pc, #336]	; (800ef88 <HAL_UART_IRQHandler+0x738>)
 800ee36:	4013      	ands	r3, r2
 800ee38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	3308      	adds	r3, #8
 800ee42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ee46:	633a      	str	r2, [r7, #48]	; 0x30
 800ee48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ee4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee4e:	e841 2300 	strex	r3, r2, [r1]
 800ee52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ee54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1e3      	bne.n	800ee22 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2220      	movs	r2, #32
 800ee5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	e853 3f00 	ldrex	r3, [r3]
 800ee7a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f023 0310 	bic.w	r3, r3, #16
 800ee82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ee90:	61fb      	str	r3, [r7, #28]
 800ee92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee94:	69b9      	ldr	r1, [r7, #24]
 800ee96:	69fa      	ldr	r2, [r7, #28]
 800ee98:	e841 2300 	strex	r3, r2, [r1]
 800ee9c:	617b      	str	r3, [r7, #20]
   return(result);
 800ee9e:	697b      	ldr	r3, [r7, #20]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d1e4      	bne.n	800ee6e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800eea4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eea8:	4619      	mov	r1, r3
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 f882 	bl	800efb4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eeb0:	e063      	b.n	800ef7a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eeb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eeb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00e      	beq.n	800eedc <HAL_UART_IRQHandler+0x68c>
 800eebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d008      	beq.n	800eedc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eed2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eed4:	6878      	ldr	r0, [r7, #4]
 800eed6:	f001 f83e 	bl	800ff56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eeda:	e051      	b.n	800ef80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800eedc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d014      	beq.n	800ef12 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eeec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d105      	bne.n	800ef00 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eef4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eef8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d008      	beq.n	800ef12 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d03a      	beq.n	800ef7e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	4798      	blx	r3
    }
    return;
 800ef10:	e035      	b.n	800ef7e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ef12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d009      	beq.n	800ef32 <HAL_UART_IRQHandler+0x6e2>
 800ef1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d003      	beq.n	800ef32 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 ffe8 	bl	800ff00 <UART_EndTransmit_IT>
    return;
 800ef30:	e026      	b.n	800ef80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ef32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d009      	beq.n	800ef52 <HAL_UART_IRQHandler+0x702>
 800ef3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d003      	beq.n	800ef52 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f001 f817 	bl	800ff7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ef50:	e016      	b.n	800ef80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ef52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d010      	beq.n	800ef80 <HAL_UART_IRQHandler+0x730>
 800ef5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	da0c      	bge.n	800ef80 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 ffff 	bl	800ff6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ef6c:	e008      	b.n	800ef80 <HAL_UART_IRQHandler+0x730>
      return;
 800ef6e:	bf00      	nop
 800ef70:	e006      	b.n	800ef80 <HAL_UART_IRQHandler+0x730>
    return;
 800ef72:	bf00      	nop
 800ef74:	e004      	b.n	800ef80 <HAL_UART_IRQHandler+0x730>
      return;
 800ef76:	bf00      	nop
 800ef78:	e002      	b.n	800ef80 <HAL_UART_IRQHandler+0x730>
      return;
 800ef7a:	bf00      	nop
 800ef7c:	e000      	b.n	800ef80 <HAL_UART_IRQHandler+0x730>
    return;
 800ef7e:	bf00      	nop
  }
}
 800ef80:	37e8      	adds	r7, #232	; 0xe8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	effffffe 	.word	0xeffffffe

0800ef8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ef94:	bf00      	nop
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800efa8:	bf00      	nop
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b083      	sub	sp, #12
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	460b      	mov	r3, r1
 800efbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800efc0:	bf00      	nop
 800efc2:	370c      	adds	r7, #12
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800efcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800efd0:	b092      	sub	sp, #72	; 0x48
 800efd2:	af00      	add	r7, sp, #0
 800efd4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800efd6:	2300      	movs	r3, #0
 800efd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	689a      	ldr	r2, [r3, #8]
 800efe0:	697b      	ldr	r3, [r7, #20]
 800efe2:	691b      	ldr	r3, [r3, #16]
 800efe4:	431a      	orrs	r2, r3
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	695b      	ldr	r3, [r3, #20]
 800efea:	431a      	orrs	r2, r3
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	69db      	ldr	r3, [r3, #28]
 800eff0:	4313      	orrs	r3, r2
 800eff2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	4bbe      	ldr	r3, [pc, #760]	; (800f2f4 <UART_SetConfig+0x328>)
 800effc:	4013      	ands	r3, r2
 800effe:	697a      	ldr	r2, [r7, #20]
 800f000:	6812      	ldr	r2, [r2, #0]
 800f002:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f004:	430b      	orrs	r3, r1
 800f006:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f012:	697b      	ldr	r3, [r7, #20]
 800f014:	68da      	ldr	r2, [r3, #12]
 800f016:	697b      	ldr	r3, [r7, #20]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	430a      	orrs	r2, r1
 800f01c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	699b      	ldr	r3, [r3, #24]
 800f022:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4ab3      	ldr	r2, [pc, #716]	; (800f2f8 <UART_SetConfig+0x32c>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d004      	beq.n	800f038 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f02e:	697b      	ldr	r3, [r7, #20]
 800f030:	6a1b      	ldr	r3, [r3, #32]
 800f032:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f034:	4313      	orrs	r3, r2
 800f036:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	689a      	ldr	r2, [r3, #8]
 800f03e:	4baf      	ldr	r3, [pc, #700]	; (800f2fc <UART_SetConfig+0x330>)
 800f040:	4013      	ands	r3, r2
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	6812      	ldr	r2, [r2, #0]
 800f046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f048:	430b      	orrs	r3, r1
 800f04a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f052:	f023 010f 	bic.w	r1, r3, #15
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f05a:	697b      	ldr	r3, [r7, #20]
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	430a      	orrs	r2, r1
 800f060:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f062:	697b      	ldr	r3, [r7, #20]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	4aa6      	ldr	r2, [pc, #664]	; (800f300 <UART_SetConfig+0x334>)
 800f068:	4293      	cmp	r3, r2
 800f06a:	d177      	bne.n	800f15c <UART_SetConfig+0x190>
 800f06c:	4ba5      	ldr	r3, [pc, #660]	; (800f304 <UART_SetConfig+0x338>)
 800f06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f070:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f074:	2b28      	cmp	r3, #40	; 0x28
 800f076:	d86d      	bhi.n	800f154 <UART_SetConfig+0x188>
 800f078:	a201      	add	r2, pc, #4	; (adr r2, 800f080 <UART_SetConfig+0xb4>)
 800f07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07e:	bf00      	nop
 800f080:	0800f125 	.word	0x0800f125
 800f084:	0800f155 	.word	0x0800f155
 800f088:	0800f155 	.word	0x0800f155
 800f08c:	0800f155 	.word	0x0800f155
 800f090:	0800f155 	.word	0x0800f155
 800f094:	0800f155 	.word	0x0800f155
 800f098:	0800f155 	.word	0x0800f155
 800f09c:	0800f155 	.word	0x0800f155
 800f0a0:	0800f12d 	.word	0x0800f12d
 800f0a4:	0800f155 	.word	0x0800f155
 800f0a8:	0800f155 	.word	0x0800f155
 800f0ac:	0800f155 	.word	0x0800f155
 800f0b0:	0800f155 	.word	0x0800f155
 800f0b4:	0800f155 	.word	0x0800f155
 800f0b8:	0800f155 	.word	0x0800f155
 800f0bc:	0800f155 	.word	0x0800f155
 800f0c0:	0800f135 	.word	0x0800f135
 800f0c4:	0800f155 	.word	0x0800f155
 800f0c8:	0800f155 	.word	0x0800f155
 800f0cc:	0800f155 	.word	0x0800f155
 800f0d0:	0800f155 	.word	0x0800f155
 800f0d4:	0800f155 	.word	0x0800f155
 800f0d8:	0800f155 	.word	0x0800f155
 800f0dc:	0800f155 	.word	0x0800f155
 800f0e0:	0800f13d 	.word	0x0800f13d
 800f0e4:	0800f155 	.word	0x0800f155
 800f0e8:	0800f155 	.word	0x0800f155
 800f0ec:	0800f155 	.word	0x0800f155
 800f0f0:	0800f155 	.word	0x0800f155
 800f0f4:	0800f155 	.word	0x0800f155
 800f0f8:	0800f155 	.word	0x0800f155
 800f0fc:	0800f155 	.word	0x0800f155
 800f100:	0800f145 	.word	0x0800f145
 800f104:	0800f155 	.word	0x0800f155
 800f108:	0800f155 	.word	0x0800f155
 800f10c:	0800f155 	.word	0x0800f155
 800f110:	0800f155 	.word	0x0800f155
 800f114:	0800f155 	.word	0x0800f155
 800f118:	0800f155 	.word	0x0800f155
 800f11c:	0800f155 	.word	0x0800f155
 800f120:	0800f14d 	.word	0x0800f14d
 800f124:	2301      	movs	r3, #1
 800f126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f12a:	e222      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f12c:	2304      	movs	r3, #4
 800f12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f132:	e21e      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f134:	2308      	movs	r3, #8
 800f136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13a:	e21a      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f13c:	2310      	movs	r3, #16
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f142:	e216      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f144:	2320      	movs	r3, #32
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e212      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f14c:	2340      	movs	r3, #64	; 0x40
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e20e      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f154:	2380      	movs	r3, #128	; 0x80
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e20a      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	4a69      	ldr	r2, [pc, #420]	; (800f308 <UART_SetConfig+0x33c>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d130      	bne.n	800f1c8 <UART_SetConfig+0x1fc>
 800f166:	4b67      	ldr	r3, [pc, #412]	; (800f304 <UART_SetConfig+0x338>)
 800f168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f16a:	f003 0307 	and.w	r3, r3, #7
 800f16e:	2b05      	cmp	r3, #5
 800f170:	d826      	bhi.n	800f1c0 <UART_SetConfig+0x1f4>
 800f172:	a201      	add	r2, pc, #4	; (adr r2, 800f178 <UART_SetConfig+0x1ac>)
 800f174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f178:	0800f191 	.word	0x0800f191
 800f17c:	0800f199 	.word	0x0800f199
 800f180:	0800f1a1 	.word	0x0800f1a1
 800f184:	0800f1a9 	.word	0x0800f1a9
 800f188:	0800f1b1 	.word	0x0800f1b1
 800f18c:	0800f1b9 	.word	0x0800f1b9
 800f190:	2300      	movs	r3, #0
 800f192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f196:	e1ec      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f198:	2304      	movs	r3, #4
 800f19a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f19e:	e1e8      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f1a0:	2308      	movs	r3, #8
 800f1a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1a6:	e1e4      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f1a8:	2310      	movs	r3, #16
 800f1aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1ae:	e1e0      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f1b0:	2320      	movs	r3, #32
 800f1b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1b6:	e1dc      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f1b8:	2340      	movs	r3, #64	; 0x40
 800f1ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1be:	e1d8      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f1c0:	2380      	movs	r3, #128	; 0x80
 800f1c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f1c6:	e1d4      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	4a4f      	ldr	r2, [pc, #316]	; (800f30c <UART_SetConfig+0x340>)
 800f1ce:	4293      	cmp	r3, r2
 800f1d0:	d130      	bne.n	800f234 <UART_SetConfig+0x268>
 800f1d2:	4b4c      	ldr	r3, [pc, #304]	; (800f304 <UART_SetConfig+0x338>)
 800f1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f1d6:	f003 0307 	and.w	r3, r3, #7
 800f1da:	2b05      	cmp	r3, #5
 800f1dc:	d826      	bhi.n	800f22c <UART_SetConfig+0x260>
 800f1de:	a201      	add	r2, pc, #4	; (adr r2, 800f1e4 <UART_SetConfig+0x218>)
 800f1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e4:	0800f1fd 	.word	0x0800f1fd
 800f1e8:	0800f205 	.word	0x0800f205
 800f1ec:	0800f20d 	.word	0x0800f20d
 800f1f0:	0800f215 	.word	0x0800f215
 800f1f4:	0800f21d 	.word	0x0800f21d
 800f1f8:	0800f225 	.word	0x0800f225
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f202:	e1b6      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f204:	2304      	movs	r3, #4
 800f206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f20a:	e1b2      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f20c:	2308      	movs	r3, #8
 800f20e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f212:	e1ae      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f214:	2310      	movs	r3, #16
 800f216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f21a:	e1aa      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f21c:	2320      	movs	r3, #32
 800f21e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f222:	e1a6      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f224:	2340      	movs	r3, #64	; 0x40
 800f226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f22a:	e1a2      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f22c:	2380      	movs	r3, #128	; 0x80
 800f22e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f232:	e19e      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	4a35      	ldr	r2, [pc, #212]	; (800f310 <UART_SetConfig+0x344>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d130      	bne.n	800f2a0 <UART_SetConfig+0x2d4>
 800f23e:	4b31      	ldr	r3, [pc, #196]	; (800f304 <UART_SetConfig+0x338>)
 800f240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f242:	f003 0307 	and.w	r3, r3, #7
 800f246:	2b05      	cmp	r3, #5
 800f248:	d826      	bhi.n	800f298 <UART_SetConfig+0x2cc>
 800f24a:	a201      	add	r2, pc, #4	; (adr r2, 800f250 <UART_SetConfig+0x284>)
 800f24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f250:	0800f269 	.word	0x0800f269
 800f254:	0800f271 	.word	0x0800f271
 800f258:	0800f279 	.word	0x0800f279
 800f25c:	0800f281 	.word	0x0800f281
 800f260:	0800f289 	.word	0x0800f289
 800f264:	0800f291 	.word	0x0800f291
 800f268:	2300      	movs	r3, #0
 800f26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f26e:	e180      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f270:	2304      	movs	r3, #4
 800f272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f276:	e17c      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f278:	2308      	movs	r3, #8
 800f27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f27e:	e178      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f280:	2310      	movs	r3, #16
 800f282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f286:	e174      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f288:	2320      	movs	r3, #32
 800f28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f28e:	e170      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f290:	2340      	movs	r3, #64	; 0x40
 800f292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f296:	e16c      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f298:	2380      	movs	r3, #128	; 0x80
 800f29a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f29e:	e168      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f2a0:	697b      	ldr	r3, [r7, #20]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	4a1b      	ldr	r2, [pc, #108]	; (800f314 <UART_SetConfig+0x348>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d142      	bne.n	800f330 <UART_SetConfig+0x364>
 800f2aa:	4b16      	ldr	r3, [pc, #88]	; (800f304 <UART_SetConfig+0x338>)
 800f2ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f2ae:	f003 0307 	and.w	r3, r3, #7
 800f2b2:	2b05      	cmp	r3, #5
 800f2b4:	d838      	bhi.n	800f328 <UART_SetConfig+0x35c>
 800f2b6:	a201      	add	r2, pc, #4	; (adr r2, 800f2bc <UART_SetConfig+0x2f0>)
 800f2b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2bc:	0800f2d5 	.word	0x0800f2d5
 800f2c0:	0800f2dd 	.word	0x0800f2dd
 800f2c4:	0800f2e5 	.word	0x0800f2e5
 800f2c8:	0800f2ed 	.word	0x0800f2ed
 800f2cc:	0800f319 	.word	0x0800f319
 800f2d0:	0800f321 	.word	0x0800f321
 800f2d4:	2300      	movs	r3, #0
 800f2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2da:	e14a      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f2dc:	2304      	movs	r3, #4
 800f2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2e2:	e146      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f2e4:	2308      	movs	r3, #8
 800f2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2ea:	e142      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f2ec:	2310      	movs	r3, #16
 800f2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f2f2:	e13e      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f2f4:	cfff69f3 	.word	0xcfff69f3
 800f2f8:	58000c00 	.word	0x58000c00
 800f2fc:	11fff4ff 	.word	0x11fff4ff
 800f300:	40011000 	.word	0x40011000
 800f304:	58024400 	.word	0x58024400
 800f308:	40004400 	.word	0x40004400
 800f30c:	40004800 	.word	0x40004800
 800f310:	40004c00 	.word	0x40004c00
 800f314:	40005000 	.word	0x40005000
 800f318:	2320      	movs	r3, #32
 800f31a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f31e:	e128      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f320:	2340      	movs	r3, #64	; 0x40
 800f322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f326:	e124      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f328:	2380      	movs	r3, #128	; 0x80
 800f32a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f32e:	e120      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	4acb      	ldr	r2, [pc, #812]	; (800f664 <UART_SetConfig+0x698>)
 800f336:	4293      	cmp	r3, r2
 800f338:	d176      	bne.n	800f428 <UART_SetConfig+0x45c>
 800f33a:	4bcb      	ldr	r3, [pc, #812]	; (800f668 <UART_SetConfig+0x69c>)
 800f33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f33e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f342:	2b28      	cmp	r3, #40	; 0x28
 800f344:	d86c      	bhi.n	800f420 <UART_SetConfig+0x454>
 800f346:	a201      	add	r2, pc, #4	; (adr r2, 800f34c <UART_SetConfig+0x380>)
 800f348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f34c:	0800f3f1 	.word	0x0800f3f1
 800f350:	0800f421 	.word	0x0800f421
 800f354:	0800f421 	.word	0x0800f421
 800f358:	0800f421 	.word	0x0800f421
 800f35c:	0800f421 	.word	0x0800f421
 800f360:	0800f421 	.word	0x0800f421
 800f364:	0800f421 	.word	0x0800f421
 800f368:	0800f421 	.word	0x0800f421
 800f36c:	0800f3f9 	.word	0x0800f3f9
 800f370:	0800f421 	.word	0x0800f421
 800f374:	0800f421 	.word	0x0800f421
 800f378:	0800f421 	.word	0x0800f421
 800f37c:	0800f421 	.word	0x0800f421
 800f380:	0800f421 	.word	0x0800f421
 800f384:	0800f421 	.word	0x0800f421
 800f388:	0800f421 	.word	0x0800f421
 800f38c:	0800f401 	.word	0x0800f401
 800f390:	0800f421 	.word	0x0800f421
 800f394:	0800f421 	.word	0x0800f421
 800f398:	0800f421 	.word	0x0800f421
 800f39c:	0800f421 	.word	0x0800f421
 800f3a0:	0800f421 	.word	0x0800f421
 800f3a4:	0800f421 	.word	0x0800f421
 800f3a8:	0800f421 	.word	0x0800f421
 800f3ac:	0800f409 	.word	0x0800f409
 800f3b0:	0800f421 	.word	0x0800f421
 800f3b4:	0800f421 	.word	0x0800f421
 800f3b8:	0800f421 	.word	0x0800f421
 800f3bc:	0800f421 	.word	0x0800f421
 800f3c0:	0800f421 	.word	0x0800f421
 800f3c4:	0800f421 	.word	0x0800f421
 800f3c8:	0800f421 	.word	0x0800f421
 800f3cc:	0800f411 	.word	0x0800f411
 800f3d0:	0800f421 	.word	0x0800f421
 800f3d4:	0800f421 	.word	0x0800f421
 800f3d8:	0800f421 	.word	0x0800f421
 800f3dc:	0800f421 	.word	0x0800f421
 800f3e0:	0800f421 	.word	0x0800f421
 800f3e4:	0800f421 	.word	0x0800f421
 800f3e8:	0800f421 	.word	0x0800f421
 800f3ec:	0800f419 	.word	0x0800f419
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3f6:	e0bc      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f3f8:	2304      	movs	r3, #4
 800f3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f3fe:	e0b8      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f400:	2308      	movs	r3, #8
 800f402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f406:	e0b4      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f408:	2310      	movs	r3, #16
 800f40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f40e:	e0b0      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f410:	2320      	movs	r3, #32
 800f412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f416:	e0ac      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f418:	2340      	movs	r3, #64	; 0x40
 800f41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f41e:	e0a8      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f420:	2380      	movs	r3, #128	; 0x80
 800f422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f426:	e0a4      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f428:	697b      	ldr	r3, [r7, #20]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4a8f      	ldr	r2, [pc, #572]	; (800f66c <UART_SetConfig+0x6a0>)
 800f42e:	4293      	cmp	r3, r2
 800f430:	d130      	bne.n	800f494 <UART_SetConfig+0x4c8>
 800f432:	4b8d      	ldr	r3, [pc, #564]	; (800f668 <UART_SetConfig+0x69c>)
 800f434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f436:	f003 0307 	and.w	r3, r3, #7
 800f43a:	2b05      	cmp	r3, #5
 800f43c:	d826      	bhi.n	800f48c <UART_SetConfig+0x4c0>
 800f43e:	a201      	add	r2, pc, #4	; (adr r2, 800f444 <UART_SetConfig+0x478>)
 800f440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f444:	0800f45d 	.word	0x0800f45d
 800f448:	0800f465 	.word	0x0800f465
 800f44c:	0800f46d 	.word	0x0800f46d
 800f450:	0800f475 	.word	0x0800f475
 800f454:	0800f47d 	.word	0x0800f47d
 800f458:	0800f485 	.word	0x0800f485
 800f45c:	2300      	movs	r3, #0
 800f45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f462:	e086      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f464:	2304      	movs	r3, #4
 800f466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f46a:	e082      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f46c:	2308      	movs	r3, #8
 800f46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f472:	e07e      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f474:	2310      	movs	r3, #16
 800f476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f47a:	e07a      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f47c:	2320      	movs	r3, #32
 800f47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f482:	e076      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f484:	2340      	movs	r3, #64	; 0x40
 800f486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f48a:	e072      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f48c:	2380      	movs	r3, #128	; 0x80
 800f48e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f492:	e06e      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	4a75      	ldr	r2, [pc, #468]	; (800f670 <UART_SetConfig+0x6a4>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d130      	bne.n	800f500 <UART_SetConfig+0x534>
 800f49e:	4b72      	ldr	r3, [pc, #456]	; (800f668 <UART_SetConfig+0x69c>)
 800f4a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4a2:	f003 0307 	and.w	r3, r3, #7
 800f4a6:	2b05      	cmp	r3, #5
 800f4a8:	d826      	bhi.n	800f4f8 <UART_SetConfig+0x52c>
 800f4aa:	a201      	add	r2, pc, #4	; (adr r2, 800f4b0 <UART_SetConfig+0x4e4>)
 800f4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b0:	0800f4c9 	.word	0x0800f4c9
 800f4b4:	0800f4d1 	.word	0x0800f4d1
 800f4b8:	0800f4d9 	.word	0x0800f4d9
 800f4bc:	0800f4e1 	.word	0x0800f4e1
 800f4c0:	0800f4e9 	.word	0x0800f4e9
 800f4c4:	0800f4f1 	.word	0x0800f4f1
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ce:	e050      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f4d0:	2304      	movs	r3, #4
 800f4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4d6:	e04c      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f4d8:	2308      	movs	r3, #8
 800f4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4de:	e048      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f4e0:	2310      	movs	r3, #16
 800f4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4e6:	e044      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f4e8:	2320      	movs	r3, #32
 800f4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4ee:	e040      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f4f0:	2340      	movs	r3, #64	; 0x40
 800f4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4f6:	e03c      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f4f8:	2380      	movs	r3, #128	; 0x80
 800f4fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f4fe:	e038      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f500:	697b      	ldr	r3, [r7, #20]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	4a5b      	ldr	r2, [pc, #364]	; (800f674 <UART_SetConfig+0x6a8>)
 800f506:	4293      	cmp	r3, r2
 800f508:	d130      	bne.n	800f56c <UART_SetConfig+0x5a0>
 800f50a:	4b57      	ldr	r3, [pc, #348]	; (800f668 <UART_SetConfig+0x69c>)
 800f50c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f50e:	f003 0307 	and.w	r3, r3, #7
 800f512:	2b05      	cmp	r3, #5
 800f514:	d826      	bhi.n	800f564 <UART_SetConfig+0x598>
 800f516:	a201      	add	r2, pc, #4	; (adr r2, 800f51c <UART_SetConfig+0x550>)
 800f518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f51c:	0800f535 	.word	0x0800f535
 800f520:	0800f53d 	.word	0x0800f53d
 800f524:	0800f545 	.word	0x0800f545
 800f528:	0800f54d 	.word	0x0800f54d
 800f52c:	0800f555 	.word	0x0800f555
 800f530:	0800f55d 	.word	0x0800f55d
 800f534:	2302      	movs	r3, #2
 800f536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f53a:	e01a      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f53c:	2304      	movs	r3, #4
 800f53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f542:	e016      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f544:	2308      	movs	r3, #8
 800f546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f54a:	e012      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f54c:	2310      	movs	r3, #16
 800f54e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f552:	e00e      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f554:	2320      	movs	r3, #32
 800f556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f55a:	e00a      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f55c:	2340      	movs	r3, #64	; 0x40
 800f55e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f562:	e006      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f564:	2380      	movs	r3, #128	; 0x80
 800f566:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f56a:	e002      	b.n	800f572 <UART_SetConfig+0x5a6>
 800f56c:	2380      	movs	r3, #128	; 0x80
 800f56e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f572:	697b      	ldr	r3, [r7, #20]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	4a3f      	ldr	r2, [pc, #252]	; (800f674 <UART_SetConfig+0x6a8>)
 800f578:	4293      	cmp	r3, r2
 800f57a:	f040 80f8 	bne.w	800f76e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f57e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f582:	2b20      	cmp	r3, #32
 800f584:	dc46      	bgt.n	800f614 <UART_SetConfig+0x648>
 800f586:	2b02      	cmp	r3, #2
 800f588:	f2c0 8082 	blt.w	800f690 <UART_SetConfig+0x6c4>
 800f58c:	3b02      	subs	r3, #2
 800f58e:	2b1e      	cmp	r3, #30
 800f590:	d87e      	bhi.n	800f690 <UART_SetConfig+0x6c4>
 800f592:	a201      	add	r2, pc, #4	; (adr r2, 800f598 <UART_SetConfig+0x5cc>)
 800f594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f598:	0800f61b 	.word	0x0800f61b
 800f59c:	0800f691 	.word	0x0800f691
 800f5a0:	0800f623 	.word	0x0800f623
 800f5a4:	0800f691 	.word	0x0800f691
 800f5a8:	0800f691 	.word	0x0800f691
 800f5ac:	0800f691 	.word	0x0800f691
 800f5b0:	0800f633 	.word	0x0800f633
 800f5b4:	0800f691 	.word	0x0800f691
 800f5b8:	0800f691 	.word	0x0800f691
 800f5bc:	0800f691 	.word	0x0800f691
 800f5c0:	0800f691 	.word	0x0800f691
 800f5c4:	0800f691 	.word	0x0800f691
 800f5c8:	0800f691 	.word	0x0800f691
 800f5cc:	0800f691 	.word	0x0800f691
 800f5d0:	0800f643 	.word	0x0800f643
 800f5d4:	0800f691 	.word	0x0800f691
 800f5d8:	0800f691 	.word	0x0800f691
 800f5dc:	0800f691 	.word	0x0800f691
 800f5e0:	0800f691 	.word	0x0800f691
 800f5e4:	0800f691 	.word	0x0800f691
 800f5e8:	0800f691 	.word	0x0800f691
 800f5ec:	0800f691 	.word	0x0800f691
 800f5f0:	0800f691 	.word	0x0800f691
 800f5f4:	0800f691 	.word	0x0800f691
 800f5f8:	0800f691 	.word	0x0800f691
 800f5fc:	0800f691 	.word	0x0800f691
 800f600:	0800f691 	.word	0x0800f691
 800f604:	0800f691 	.word	0x0800f691
 800f608:	0800f691 	.word	0x0800f691
 800f60c:	0800f691 	.word	0x0800f691
 800f610:	0800f683 	.word	0x0800f683
 800f614:	2b40      	cmp	r3, #64	; 0x40
 800f616:	d037      	beq.n	800f688 <UART_SetConfig+0x6bc>
 800f618:	e03a      	b.n	800f690 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f61a:	f7fd fd3b 	bl	800d094 <HAL_RCCEx_GetD3PCLK1Freq>
 800f61e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f620:	e03c      	b.n	800f69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f626:	4618      	mov	r0, r3
 800f628:	f7fd fd4a 	bl	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f630:	e034      	b.n	800f69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f632:	f107 0318 	add.w	r3, r7, #24
 800f636:	4618      	mov	r0, r3
 800f638:	f7fd fe96 	bl	800d368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f63c:	69fb      	ldr	r3, [r7, #28]
 800f63e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f640:	e02c      	b.n	800f69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f642:	4b09      	ldr	r3, [pc, #36]	; (800f668 <UART_SetConfig+0x69c>)
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	f003 0320 	and.w	r3, r3, #32
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	d016      	beq.n	800f67c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f64e:	4b06      	ldr	r3, [pc, #24]	; (800f668 <UART_SetConfig+0x69c>)
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	08db      	lsrs	r3, r3, #3
 800f654:	f003 0303 	and.w	r3, r3, #3
 800f658:	4a07      	ldr	r2, [pc, #28]	; (800f678 <UART_SetConfig+0x6ac>)
 800f65a:	fa22 f303 	lsr.w	r3, r2, r3
 800f65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f660:	e01c      	b.n	800f69c <UART_SetConfig+0x6d0>
 800f662:	bf00      	nop
 800f664:	40011400 	.word	0x40011400
 800f668:	58024400 	.word	0x58024400
 800f66c:	40007800 	.word	0x40007800
 800f670:	40007c00 	.word	0x40007c00
 800f674:	58000c00 	.word	0x58000c00
 800f678:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f67c:	4b9d      	ldr	r3, [pc, #628]	; (800f8f4 <UART_SetConfig+0x928>)
 800f67e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f680:	e00c      	b.n	800f69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f682:	4b9d      	ldr	r3, [pc, #628]	; (800f8f8 <UART_SetConfig+0x92c>)
 800f684:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f686:	e009      	b.n	800f69c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f688:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f68e:	e005      	b.n	800f69c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f690:	2300      	movs	r3, #0
 800f692:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f694:	2301      	movs	r3, #1
 800f696:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f69a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f69c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f000 81de 	beq.w	800fa60 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f6a4:	697b      	ldr	r3, [r7, #20]
 800f6a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6a8:	4a94      	ldr	r2, [pc, #592]	; (800f8fc <UART_SetConfig+0x930>)
 800f6aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6ae:	461a      	mov	r2, r3
 800f6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6b8:	697b      	ldr	r3, [r7, #20]
 800f6ba:	685a      	ldr	r2, [r3, #4]
 800f6bc:	4613      	mov	r3, r2
 800f6be:	005b      	lsls	r3, r3, #1
 800f6c0:	4413      	add	r3, r2
 800f6c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d305      	bcc.n	800f6d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f6c8:	697b      	ldr	r3, [r7, #20]
 800f6ca:	685b      	ldr	r3, [r3, #4]
 800f6cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f6ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d903      	bls.n	800f6dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f6d4:	2301      	movs	r3, #1
 800f6d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f6da:	e1c1      	b.n	800fa60 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f6dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6de:	2200      	movs	r2, #0
 800f6e0:	60bb      	str	r3, [r7, #8]
 800f6e2:	60fa      	str	r2, [r7, #12]
 800f6e4:	697b      	ldr	r3, [r7, #20]
 800f6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6e8:	4a84      	ldr	r2, [pc, #528]	; (800f8fc <UART_SetConfig+0x930>)
 800f6ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6ee:	b29b      	uxth	r3, r3
 800f6f0:	2200      	movs	r2, #0
 800f6f2:	603b      	str	r3, [r7, #0]
 800f6f4:	607a      	str	r2, [r7, #4]
 800f6f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f6fe:	f7f0 fe3f 	bl	8000380 <__aeabi_uldivmod>
 800f702:	4602      	mov	r2, r0
 800f704:	460b      	mov	r3, r1
 800f706:	4610      	mov	r0, r2
 800f708:	4619      	mov	r1, r3
 800f70a:	f04f 0200 	mov.w	r2, #0
 800f70e:	f04f 0300 	mov.w	r3, #0
 800f712:	020b      	lsls	r3, r1, #8
 800f714:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f718:	0202      	lsls	r2, r0, #8
 800f71a:	6979      	ldr	r1, [r7, #20]
 800f71c:	6849      	ldr	r1, [r1, #4]
 800f71e:	0849      	lsrs	r1, r1, #1
 800f720:	2000      	movs	r0, #0
 800f722:	460c      	mov	r4, r1
 800f724:	4605      	mov	r5, r0
 800f726:	eb12 0804 	adds.w	r8, r2, r4
 800f72a:	eb43 0905 	adc.w	r9, r3, r5
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	2200      	movs	r2, #0
 800f734:	469a      	mov	sl, r3
 800f736:	4693      	mov	fp, r2
 800f738:	4652      	mov	r2, sl
 800f73a:	465b      	mov	r3, fp
 800f73c:	4640      	mov	r0, r8
 800f73e:	4649      	mov	r1, r9
 800f740:	f7f0 fe1e 	bl	8000380 <__aeabi_uldivmod>
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	4613      	mov	r3, r2
 800f74a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f74e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f752:	d308      	bcc.n	800f766 <UART_SetConfig+0x79a>
 800f754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f75a:	d204      	bcs.n	800f766 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f762:	60da      	str	r2, [r3, #12]
 800f764:	e17c      	b.n	800fa60 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f766:	2301      	movs	r3, #1
 800f768:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f76c:	e178      	b.n	800fa60 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	69db      	ldr	r3, [r3, #28]
 800f772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f776:	f040 80c5 	bne.w	800f904 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f77a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f77e:	2b20      	cmp	r3, #32
 800f780:	dc48      	bgt.n	800f814 <UART_SetConfig+0x848>
 800f782:	2b00      	cmp	r3, #0
 800f784:	db7b      	blt.n	800f87e <UART_SetConfig+0x8b2>
 800f786:	2b20      	cmp	r3, #32
 800f788:	d879      	bhi.n	800f87e <UART_SetConfig+0x8b2>
 800f78a:	a201      	add	r2, pc, #4	; (adr r2, 800f790 <UART_SetConfig+0x7c4>)
 800f78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f790:	0800f81b 	.word	0x0800f81b
 800f794:	0800f823 	.word	0x0800f823
 800f798:	0800f87f 	.word	0x0800f87f
 800f79c:	0800f87f 	.word	0x0800f87f
 800f7a0:	0800f82b 	.word	0x0800f82b
 800f7a4:	0800f87f 	.word	0x0800f87f
 800f7a8:	0800f87f 	.word	0x0800f87f
 800f7ac:	0800f87f 	.word	0x0800f87f
 800f7b0:	0800f83b 	.word	0x0800f83b
 800f7b4:	0800f87f 	.word	0x0800f87f
 800f7b8:	0800f87f 	.word	0x0800f87f
 800f7bc:	0800f87f 	.word	0x0800f87f
 800f7c0:	0800f87f 	.word	0x0800f87f
 800f7c4:	0800f87f 	.word	0x0800f87f
 800f7c8:	0800f87f 	.word	0x0800f87f
 800f7cc:	0800f87f 	.word	0x0800f87f
 800f7d0:	0800f84b 	.word	0x0800f84b
 800f7d4:	0800f87f 	.word	0x0800f87f
 800f7d8:	0800f87f 	.word	0x0800f87f
 800f7dc:	0800f87f 	.word	0x0800f87f
 800f7e0:	0800f87f 	.word	0x0800f87f
 800f7e4:	0800f87f 	.word	0x0800f87f
 800f7e8:	0800f87f 	.word	0x0800f87f
 800f7ec:	0800f87f 	.word	0x0800f87f
 800f7f0:	0800f87f 	.word	0x0800f87f
 800f7f4:	0800f87f 	.word	0x0800f87f
 800f7f8:	0800f87f 	.word	0x0800f87f
 800f7fc:	0800f87f 	.word	0x0800f87f
 800f800:	0800f87f 	.word	0x0800f87f
 800f804:	0800f87f 	.word	0x0800f87f
 800f808:	0800f87f 	.word	0x0800f87f
 800f80c:	0800f87f 	.word	0x0800f87f
 800f810:	0800f871 	.word	0x0800f871
 800f814:	2b40      	cmp	r3, #64	; 0x40
 800f816:	d02e      	beq.n	800f876 <UART_SetConfig+0x8aa>
 800f818:	e031      	b.n	800f87e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f81a:	f7fc fcc9 	bl	800c1b0 <HAL_RCC_GetPCLK1Freq>
 800f81e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f820:	e033      	b.n	800f88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f822:	f7fc fcdb 	bl	800c1dc <HAL_RCC_GetPCLK2Freq>
 800f826:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f828:	e02f      	b.n	800f88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f82a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fd fc46 	bl	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f836:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f838:	e027      	b.n	800f88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f83a:	f107 0318 	add.w	r3, r7, #24
 800f83e:	4618      	mov	r0, r3
 800f840:	f7fd fd92 	bl	800d368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f848:	e01f      	b.n	800f88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f84a:	4b2d      	ldr	r3, [pc, #180]	; (800f900 <UART_SetConfig+0x934>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f003 0320 	and.w	r3, r3, #32
 800f852:	2b00      	cmp	r3, #0
 800f854:	d009      	beq.n	800f86a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f856:	4b2a      	ldr	r3, [pc, #168]	; (800f900 <UART_SetConfig+0x934>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	08db      	lsrs	r3, r3, #3
 800f85c:	f003 0303 	and.w	r3, r3, #3
 800f860:	4a24      	ldr	r2, [pc, #144]	; (800f8f4 <UART_SetConfig+0x928>)
 800f862:	fa22 f303 	lsr.w	r3, r2, r3
 800f866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f868:	e00f      	b.n	800f88a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f86a:	4b22      	ldr	r3, [pc, #136]	; (800f8f4 <UART_SetConfig+0x928>)
 800f86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f86e:	e00c      	b.n	800f88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f870:	4b21      	ldr	r3, [pc, #132]	; (800f8f8 <UART_SetConfig+0x92c>)
 800f872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f874:	e009      	b.n	800f88a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f87c:	e005      	b.n	800f88a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f87e:	2300      	movs	r3, #0
 800f880:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f882:	2301      	movs	r3, #1
 800f884:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f888:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f88a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	f000 80e7 	beq.w	800fa60 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f896:	4a19      	ldr	r2, [pc, #100]	; (800f8fc <UART_SetConfig+0x930>)
 800f898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f89c:	461a      	mov	r2, r3
 800f89e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8a4:	005a      	lsls	r2, r3, #1
 800f8a6:	697b      	ldr	r3, [r7, #20]
 800f8a8:	685b      	ldr	r3, [r3, #4]
 800f8aa:	085b      	lsrs	r3, r3, #1
 800f8ac:	441a      	add	r2, r3
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	685b      	ldr	r3, [r3, #4]
 800f8b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f8b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8ba:	2b0f      	cmp	r3, #15
 800f8bc:	d916      	bls.n	800f8ec <UART_SetConfig+0x920>
 800f8be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f8c4:	d212      	bcs.n	800f8ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c8:	b29b      	uxth	r3, r3
 800f8ca:	f023 030f 	bic.w	r3, r3, #15
 800f8ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d2:	085b      	lsrs	r3, r3, #1
 800f8d4:	b29b      	uxth	r3, r3
 800f8d6:	f003 0307 	and.w	r3, r3, #7
 800f8da:	b29a      	uxth	r2, r3
 800f8dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f8de:	4313      	orrs	r3, r2
 800f8e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f8e8:	60da      	str	r2, [r3, #12]
 800f8ea:	e0b9      	b.n	800fa60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f8ec:	2301      	movs	r3, #1
 800f8ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f8f2:	e0b5      	b.n	800fa60 <UART_SetConfig+0xa94>
 800f8f4:	03d09000 	.word	0x03d09000
 800f8f8:	003d0900 	.word	0x003d0900
 800f8fc:	08012ae4 	.word	0x08012ae4
 800f900:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f904:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f908:	2b20      	cmp	r3, #32
 800f90a:	dc49      	bgt.n	800f9a0 <UART_SetConfig+0x9d4>
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	db7c      	blt.n	800fa0a <UART_SetConfig+0xa3e>
 800f910:	2b20      	cmp	r3, #32
 800f912:	d87a      	bhi.n	800fa0a <UART_SetConfig+0xa3e>
 800f914:	a201      	add	r2, pc, #4	; (adr r2, 800f91c <UART_SetConfig+0x950>)
 800f916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f91a:	bf00      	nop
 800f91c:	0800f9a7 	.word	0x0800f9a7
 800f920:	0800f9af 	.word	0x0800f9af
 800f924:	0800fa0b 	.word	0x0800fa0b
 800f928:	0800fa0b 	.word	0x0800fa0b
 800f92c:	0800f9b7 	.word	0x0800f9b7
 800f930:	0800fa0b 	.word	0x0800fa0b
 800f934:	0800fa0b 	.word	0x0800fa0b
 800f938:	0800fa0b 	.word	0x0800fa0b
 800f93c:	0800f9c7 	.word	0x0800f9c7
 800f940:	0800fa0b 	.word	0x0800fa0b
 800f944:	0800fa0b 	.word	0x0800fa0b
 800f948:	0800fa0b 	.word	0x0800fa0b
 800f94c:	0800fa0b 	.word	0x0800fa0b
 800f950:	0800fa0b 	.word	0x0800fa0b
 800f954:	0800fa0b 	.word	0x0800fa0b
 800f958:	0800fa0b 	.word	0x0800fa0b
 800f95c:	0800f9d7 	.word	0x0800f9d7
 800f960:	0800fa0b 	.word	0x0800fa0b
 800f964:	0800fa0b 	.word	0x0800fa0b
 800f968:	0800fa0b 	.word	0x0800fa0b
 800f96c:	0800fa0b 	.word	0x0800fa0b
 800f970:	0800fa0b 	.word	0x0800fa0b
 800f974:	0800fa0b 	.word	0x0800fa0b
 800f978:	0800fa0b 	.word	0x0800fa0b
 800f97c:	0800fa0b 	.word	0x0800fa0b
 800f980:	0800fa0b 	.word	0x0800fa0b
 800f984:	0800fa0b 	.word	0x0800fa0b
 800f988:	0800fa0b 	.word	0x0800fa0b
 800f98c:	0800fa0b 	.word	0x0800fa0b
 800f990:	0800fa0b 	.word	0x0800fa0b
 800f994:	0800fa0b 	.word	0x0800fa0b
 800f998:	0800fa0b 	.word	0x0800fa0b
 800f99c:	0800f9fd 	.word	0x0800f9fd
 800f9a0:	2b40      	cmp	r3, #64	; 0x40
 800f9a2:	d02e      	beq.n	800fa02 <UART_SetConfig+0xa36>
 800f9a4:	e031      	b.n	800fa0a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f9a6:	f7fc fc03 	bl	800c1b0 <HAL_RCC_GetPCLK1Freq>
 800f9aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9ac:	e033      	b.n	800fa16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f9ae:	f7fc fc15 	bl	800c1dc <HAL_RCC_GetPCLK2Freq>
 800f9b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f9b4:	e02f      	b.n	800fa16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f9b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fd fb80 	bl	800d0c0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9c4:	e027      	b.n	800fa16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f9c6:	f107 0318 	add.w	r3, r7, #24
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	f7fd fccc 	bl	800d368 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9d4:	e01f      	b.n	800fa16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f9d6:	4b2d      	ldr	r3, [pc, #180]	; (800fa8c <UART_SetConfig+0xac0>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f003 0320 	and.w	r3, r3, #32
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	d009      	beq.n	800f9f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f9e2:	4b2a      	ldr	r3, [pc, #168]	; (800fa8c <UART_SetConfig+0xac0>)
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	08db      	lsrs	r3, r3, #3
 800f9e8:	f003 0303 	and.w	r3, r3, #3
 800f9ec:	4a28      	ldr	r2, [pc, #160]	; (800fa90 <UART_SetConfig+0xac4>)
 800f9ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f9f4:	e00f      	b.n	800fa16 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f9f6:	4b26      	ldr	r3, [pc, #152]	; (800fa90 <UART_SetConfig+0xac4>)
 800f9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f9fa:	e00c      	b.n	800fa16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f9fc:	4b25      	ldr	r3, [pc, #148]	; (800fa94 <UART_SetConfig+0xac8>)
 800f9fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa00:	e009      	b.n	800fa16 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fa02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fa06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fa08:	e005      	b.n	800fa16 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fa0e:	2301      	movs	r3, #1
 800fa10:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fa14:	bf00      	nop
    }

    if (pclk != 0U)
 800fa16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d021      	beq.n	800fa60 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa20:	4a1d      	ldr	r2, [pc, #116]	; (800fa98 <UART_SetConfig+0xacc>)
 800fa22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fa26:	461a      	mov	r2, r3
 800fa28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fa2a:	fbb3 f2f2 	udiv	r2, r3, r2
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	685b      	ldr	r3, [r3, #4]
 800fa32:	085b      	lsrs	r3, r3, #1
 800fa34:	441a      	add	r2, r3
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	685b      	ldr	r3, [r3, #4]
 800fa3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fa3e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa42:	2b0f      	cmp	r3, #15
 800fa44:	d909      	bls.n	800fa5a <UART_SetConfig+0xa8e>
 800fa46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa4c:	d205      	bcs.n	800fa5a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800fa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa50:	b29a      	uxth	r2, r3
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	60da      	str	r2, [r3, #12]
 800fa58:	e002      	b.n	800fa60 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	2201      	movs	r2, #1
 800fa64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800fa70:	697b      	ldr	r3, [r7, #20]
 800fa72:	2200      	movs	r2, #0
 800fa74:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	2200      	movs	r2, #0
 800fa7a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800fa7c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3748      	adds	r7, #72	; 0x48
 800fa84:	46bd      	mov	sp, r7
 800fa86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800fa8a:	bf00      	nop
 800fa8c:	58024400 	.word	0x58024400
 800fa90:	03d09000 	.word	0x03d09000
 800fa94:	003d0900 	.word	0x003d0900
 800fa98:	08012ae4 	.word	0x08012ae4

0800fa9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	b083      	sub	sp, #12
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faa8:	f003 0301 	and.w	r3, r3, #1
 800faac:	2b00      	cmp	r3, #0
 800faae:	d00a      	beq.n	800fac6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	685b      	ldr	r3, [r3, #4]
 800fab6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	681b      	ldr	r3, [r3, #0]
 800fac2:	430a      	orrs	r2, r1
 800fac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faca:	f003 0302 	and.w	r3, r3, #2
 800face:	2b00      	cmp	r3, #0
 800fad0:	d00a      	beq.n	800fae8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	430a      	orrs	r2, r1
 800fae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800faec:	f003 0304 	and.w	r3, r3, #4
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d00a      	beq.n	800fb0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	685b      	ldr	r3, [r3, #4]
 800fafa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	430a      	orrs	r2, r1
 800fb08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb0e:	f003 0308 	and.w	r3, r3, #8
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d00a      	beq.n	800fb2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	430a      	orrs	r2, r1
 800fb2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb30:	f003 0310 	and.w	r3, r3, #16
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d00a      	beq.n	800fb4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	689b      	ldr	r3, [r3, #8]
 800fb3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	430a      	orrs	r2, r1
 800fb4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb52:	f003 0320 	and.w	r3, r3, #32
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d00a      	beq.n	800fb70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	689b      	ldr	r3, [r3, #8]
 800fb60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	430a      	orrs	r2, r1
 800fb6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d01a      	beq.n	800fbb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	430a      	orrs	r2, r1
 800fb90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fb96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb9a:	d10a      	bne.n	800fbb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	430a      	orrs	r2, r1
 800fbb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d00a      	beq.n	800fbd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	430a      	orrs	r2, r1
 800fbd2:	605a      	str	r2, [r3, #4]
  }
}
 800fbd4:	bf00      	nop
 800fbd6:	370c      	adds	r7, #12
 800fbd8:	46bd      	mov	sp, r7
 800fbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbde:	4770      	bx	lr

0800fbe0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800fbe0:	b580      	push	{r7, lr}
 800fbe2:	b086      	sub	sp, #24
 800fbe4:	af02      	add	r7, sp, #8
 800fbe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2200      	movs	r2, #0
 800fbec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800fbf0:	f7f7 ffca 	bl	8007b88 <HAL_GetTick>
 800fbf4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	f003 0308 	and.w	r3, r3, #8
 800fc00:	2b08      	cmp	r3, #8
 800fc02:	d10e      	bne.n	800fc22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc08:	9300      	str	r3, [sp, #0]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	2200      	movs	r2, #0
 800fc0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	f000 f82f 	bl	800fc76 <UART_WaitOnFlagUntilTimeout>
 800fc18:	4603      	mov	r3, r0
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d001      	beq.n	800fc22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc1e:	2303      	movs	r3, #3
 800fc20:	e025      	b.n	800fc6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f003 0304 	and.w	r3, r3, #4
 800fc2c:	2b04      	cmp	r3, #4
 800fc2e:	d10e      	bne.n	800fc4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800fc30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800fc34:	9300      	str	r3, [sp, #0]
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	2200      	movs	r2, #0
 800fc3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800fc3e:	6878      	ldr	r0, [r7, #4]
 800fc40:	f000 f819 	bl	800fc76 <UART_WaitOnFlagUntilTimeout>
 800fc44:	4603      	mov	r3, r0
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d001      	beq.n	800fc4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800fc4a:	2303      	movs	r3, #3
 800fc4c:	e00f      	b.n	800fc6e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	2220      	movs	r2, #32
 800fc52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	2220      	movs	r2, #32
 800fc5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2200      	movs	r2, #0
 800fc68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc6c:	2300      	movs	r3, #0
}
 800fc6e:	4618      	mov	r0, r3
 800fc70:	3710      	adds	r7, #16
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}

0800fc76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800fc76:	b580      	push	{r7, lr}
 800fc78:	b09c      	sub	sp, #112	; 0x70
 800fc7a:	af00      	add	r7, sp, #0
 800fc7c:	60f8      	str	r0, [r7, #12]
 800fc7e:	60b9      	str	r1, [r7, #8]
 800fc80:	603b      	str	r3, [r7, #0]
 800fc82:	4613      	mov	r3, r2
 800fc84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fc86:	e0a9      	b.n	800fddc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800fc88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc8e:	f000 80a5 	beq.w	800fddc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800fc92:	f7f7 ff79 	bl	8007b88 <HAL_GetTick>
 800fc96:	4602      	mov	r2, r0
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	1ad3      	subs	r3, r2, r3
 800fc9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800fc9e:	429a      	cmp	r2, r3
 800fca0:	d302      	bcc.n	800fca8 <UART_WaitOnFlagUntilTimeout+0x32>
 800fca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d140      	bne.n	800fd2a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fcb0:	e853 3f00 	ldrex	r3, [r3]
 800fcb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800fcb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fcbc:	667b      	str	r3, [r7, #100]	; 0x64
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fcc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fcc8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800fccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fcce:	e841 2300 	strex	r3, r2, [r1]
 800fcd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800fcd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d1e6      	bne.n	800fca8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	3308      	adds	r3, #8
 800fce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fce4:	e853 3f00 	ldrex	r3, [r3]
 800fce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcec:	f023 0301 	bic.w	r3, r3, #1
 800fcf0:	663b      	str	r3, [r7, #96]	; 0x60
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	3308      	adds	r3, #8
 800fcf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fcfa:	64ba      	str	r2, [r7, #72]	; 0x48
 800fcfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fd02:	e841 2300 	strex	r3, r2, [r1]
 800fd06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800fd08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1e5      	bne.n	800fcda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2220      	movs	r2, #32
 800fd12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	2220      	movs	r2, #32
 800fd1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800fd26:	2303      	movs	r3, #3
 800fd28:	e069      	b.n	800fdfe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f003 0304 	and.w	r3, r3, #4
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d051      	beq.n	800fddc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800fd38:	68fb      	ldr	r3, [r7, #12]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	69db      	ldr	r3, [r3, #28]
 800fd3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fd42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800fd46:	d149      	bne.n	800fddc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd5a:	e853 3f00 	ldrex	r3, [r3]
 800fd5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800fd66:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd70:	637b      	str	r3, [r7, #52]	; 0x34
 800fd72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd78:	e841 2300 	strex	r3, r2, [r1]
 800fd7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800fd7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d1e6      	bne.n	800fd52 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	3308      	adds	r3, #8
 800fd8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	e853 3f00 	ldrex	r3, [r3]
 800fd92:	613b      	str	r3, [r7, #16]
   return(result);
 800fd94:	693b      	ldr	r3, [r7, #16]
 800fd96:	f023 0301 	bic.w	r3, r3, #1
 800fd9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	3308      	adds	r3, #8
 800fda2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800fda4:	623a      	str	r2, [r7, #32]
 800fda6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fda8:	69f9      	ldr	r1, [r7, #28]
 800fdaa:	6a3a      	ldr	r2, [r7, #32]
 800fdac:	e841 2300 	strex	r3, r2, [r1]
 800fdb0:	61bb      	str	r3, [r7, #24]
   return(result);
 800fdb2:	69bb      	ldr	r3, [r7, #24]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d1e5      	bne.n	800fd84 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2220      	movs	r2, #32
 800fdbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	2220      	movs	r2, #32
 800fdc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	2220      	movs	r2, #32
 800fdcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	2200      	movs	r2, #0
 800fdd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800fdd8:	2303      	movs	r3, #3
 800fdda:	e010      	b.n	800fdfe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	69da      	ldr	r2, [r3, #28]
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	4013      	ands	r3, r2
 800fde6:	68ba      	ldr	r2, [r7, #8]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	bf0c      	ite	eq
 800fdec:	2301      	moveq	r3, #1
 800fdee:	2300      	movne	r3, #0
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	79fb      	ldrb	r3, [r7, #7]
 800fdf6:	429a      	cmp	r2, r3
 800fdf8:	f43f af46 	beq.w	800fc88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3770      	adds	r7, #112	; 0x70
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
	...

0800fe08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fe08:	b480      	push	{r7}
 800fe0a:	b095      	sub	sp, #84	; 0x54
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fe18:	e853 3f00 	ldrex	r3, [r3]
 800fe1c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fe1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fe24:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe2e:	643b      	str	r3, [r7, #64]	; 0x40
 800fe30:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe32:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe34:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fe36:	e841 2300 	strex	r3, r2, [r1]
 800fe3a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fe3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d1e6      	bne.n	800fe10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	681b      	ldr	r3, [r3, #0]
 800fe46:	3308      	adds	r3, #8
 800fe48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe4a:	6a3b      	ldr	r3, [r7, #32]
 800fe4c:	e853 3f00 	ldrex	r3, [r3]
 800fe50:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe52:	69fa      	ldr	r2, [r7, #28]
 800fe54:	4b1e      	ldr	r3, [pc, #120]	; (800fed0 <UART_EndRxTransfer+0xc8>)
 800fe56:	4013      	ands	r3, r2
 800fe58:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	681b      	ldr	r3, [r3, #0]
 800fe5e:	3308      	adds	r3, #8
 800fe60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fe62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fe64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fe68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fe6a:	e841 2300 	strex	r3, r2, [r1]
 800fe6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d1e5      	bne.n	800fe42 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d118      	bne.n	800feb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	e853 3f00 	ldrex	r3, [r3]
 800fe8a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	f023 0310 	bic.w	r3, r3, #16
 800fe92:	647b      	str	r3, [r7, #68]	; 0x44
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	461a      	mov	r2, r3
 800fe9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fe9c:	61bb      	str	r3, [r7, #24]
 800fe9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fea0:	6979      	ldr	r1, [r7, #20]
 800fea2:	69ba      	ldr	r2, [r7, #24]
 800fea4:	e841 2300 	strex	r3, r2, [r1]
 800fea8:	613b      	str	r3, [r7, #16]
   return(result);
 800feaa:	693b      	ldr	r3, [r7, #16]
 800feac:	2b00      	cmp	r3, #0
 800feae:	d1e6      	bne.n	800fe7e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	2220      	movs	r2, #32
 800feb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fec4:	bf00      	nop
 800fec6:	3754      	adds	r7, #84	; 0x54
 800fec8:	46bd      	mov	sp, r7
 800feca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fece:	4770      	bx	lr
 800fed0:	effffffe 	.word	0xeffffffe

0800fed4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b084      	sub	sp, #16
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fee0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	2200      	movs	r2, #0
 800fee6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	2200      	movs	r2, #0
 800feee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f7ff f854 	bl	800efa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fef8:	bf00      	nop
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b088      	sub	sp, #32
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	e853 3f00 	ldrex	r3, [r3]
 800ff14:	60bb      	str	r3, [r7, #8]
   return(result);
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff1c:	61fb      	str	r3, [r7, #28]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	461a      	mov	r2, r3
 800ff24:	69fb      	ldr	r3, [r7, #28]
 800ff26:	61bb      	str	r3, [r7, #24]
 800ff28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff2a:	6979      	ldr	r1, [r7, #20]
 800ff2c:	69ba      	ldr	r2, [r7, #24]
 800ff2e:	e841 2300 	strex	r3, r2, [r1]
 800ff32:	613b      	str	r3, [r7, #16]
   return(result);
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d1e6      	bne.n	800ff08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2220      	movs	r2, #32
 800ff3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	2200      	movs	r2, #0
 800ff46:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ff48:	6878      	ldr	r0, [r7, #4]
 800ff4a:	f7ff f81f 	bl	800ef8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ff4e:	bf00      	nop
 800ff50:	3720      	adds	r7, #32
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}

0800ff56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ff56:	b480      	push	{r7}
 800ff58:	b083      	sub	sp, #12
 800ff5a:	af00      	add	r7, sp, #0
 800ff5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ff5e:	bf00      	nop
 800ff60:	370c      	adds	r7, #12
 800ff62:	46bd      	mov	sp, r7
 800ff64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff68:	4770      	bx	lr

0800ff6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ff6a:	b480      	push	{r7}
 800ff6c:	b083      	sub	sp, #12
 800ff6e:	af00      	add	r7, sp, #0
 800ff70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ff72:	bf00      	nop
 800ff74:	370c      	adds	r7, #12
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ff7e:	b480      	push	{r7}
 800ff80:	b083      	sub	sp, #12
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ff86:	bf00      	nop
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr

0800ff92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ff92:	b480      	push	{r7}
 800ff94:	b085      	sub	sp, #20
 800ff96:	af00      	add	r7, sp, #0
 800ff98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ffa0:	2b01      	cmp	r3, #1
 800ffa2:	d101      	bne.n	800ffa8 <HAL_UARTEx_DisableFifoMode+0x16>
 800ffa4:	2302      	movs	r3, #2
 800ffa6:	e027      	b.n	800fff8 <HAL_UARTEx_DisableFifoMode+0x66>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2224      	movs	r2, #36	; 0x24
 800ffb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	681b      	ldr	r3, [r3, #0]
 800ffbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	681a      	ldr	r2, [r3, #0]
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	f022 0201 	bic.w	r2, r2, #1
 800ffce:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ffd6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2200      	movs	r2, #0
 800ffdc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	68fa      	ldr	r2, [r7, #12]
 800ffe4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	2220      	movs	r2, #32
 800ffea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fff6:	2300      	movs	r3, #0
}
 800fff8:	4618      	mov	r0, r3
 800fffa:	3714      	adds	r7, #20
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b084      	sub	sp, #16
 8010008:	af00      	add	r7, sp, #0
 801000a:	6078      	str	r0, [r7, #4]
 801000c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010014:	2b01      	cmp	r3, #1
 8010016:	d101      	bne.n	801001c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010018:	2302      	movs	r3, #2
 801001a:	e02d      	b.n	8010078 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	2201      	movs	r2, #1
 8010020:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	2224      	movs	r2, #36	; 0x24
 8010028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	681a      	ldr	r2, [r3, #0]
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	f022 0201 	bic.w	r2, r2, #1
 8010042:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	689b      	ldr	r3, [r3, #8]
 801004a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	681b      	ldr	r3, [r3, #0]
 8010052:	683a      	ldr	r2, [r7, #0]
 8010054:	430a      	orrs	r2, r1
 8010056:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f000 f84f 	bl	80100fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	68fa      	ldr	r2, [r7, #12]
 8010064:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	2220      	movs	r2, #32
 801006a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	2200      	movs	r2, #0
 8010072:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010076:	2300      	movs	r3, #0
}
 8010078:	4618      	mov	r0, r3
 801007a:	3710      	adds	r7, #16
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}

08010080 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010080:	b580      	push	{r7, lr}
 8010082:	b084      	sub	sp, #16
 8010084:	af00      	add	r7, sp, #0
 8010086:	6078      	str	r0, [r7, #4]
 8010088:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010090:	2b01      	cmp	r3, #1
 8010092:	d101      	bne.n	8010098 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010094:	2302      	movs	r3, #2
 8010096:	e02d      	b.n	80100f4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	2201      	movs	r2, #1
 801009c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	2224      	movs	r2, #36	; 0x24
 80100a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	681a      	ldr	r2, [r3, #0]
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	f022 0201 	bic.w	r2, r2, #1
 80100be:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	689b      	ldr	r3, [r3, #8]
 80100c6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	430a      	orrs	r2, r1
 80100d2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	f000 f811 	bl	80100fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	68fa      	ldr	r2, [r7, #12]
 80100e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	2220      	movs	r2, #32
 80100e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	2200      	movs	r2, #0
 80100ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	3710      	adds	r7, #16
 80100f8:	46bd      	mov	sp, r7
 80100fa:	bd80      	pop	{r7, pc}

080100fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80100fc:	b480      	push	{r7}
 80100fe:	b085      	sub	sp, #20
 8010100:	af00      	add	r7, sp, #0
 8010102:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010108:	2b00      	cmp	r3, #0
 801010a:	d108      	bne.n	801011e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2201      	movs	r2, #1
 8010110:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2201      	movs	r2, #1
 8010118:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801011c:	e031      	b.n	8010182 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801011e:	2310      	movs	r3, #16
 8010120:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010122:	2310      	movs	r3, #16
 8010124:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	681b      	ldr	r3, [r3, #0]
 801012a:	689b      	ldr	r3, [r3, #8]
 801012c:	0e5b      	lsrs	r3, r3, #25
 801012e:	b2db      	uxtb	r3, r3
 8010130:	f003 0307 	and.w	r3, r3, #7
 8010134:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	689b      	ldr	r3, [r3, #8]
 801013c:	0f5b      	lsrs	r3, r3, #29
 801013e:	b2db      	uxtb	r3, r3
 8010140:	f003 0307 	and.w	r3, r3, #7
 8010144:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010146:	7bbb      	ldrb	r3, [r7, #14]
 8010148:	7b3a      	ldrb	r2, [r7, #12]
 801014a:	4911      	ldr	r1, [pc, #68]	; (8010190 <UARTEx_SetNbDataToProcess+0x94>)
 801014c:	5c8a      	ldrb	r2, [r1, r2]
 801014e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010152:	7b3a      	ldrb	r2, [r7, #12]
 8010154:	490f      	ldr	r1, [pc, #60]	; (8010194 <UARTEx_SetNbDataToProcess+0x98>)
 8010156:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010158:	fb93 f3f2 	sdiv	r3, r3, r2
 801015c:	b29a      	uxth	r2, r3
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010164:	7bfb      	ldrb	r3, [r7, #15]
 8010166:	7b7a      	ldrb	r2, [r7, #13]
 8010168:	4909      	ldr	r1, [pc, #36]	; (8010190 <UARTEx_SetNbDataToProcess+0x94>)
 801016a:	5c8a      	ldrb	r2, [r1, r2]
 801016c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010170:	7b7a      	ldrb	r2, [r7, #13]
 8010172:	4908      	ldr	r1, [pc, #32]	; (8010194 <UARTEx_SetNbDataToProcess+0x98>)
 8010174:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010176:	fb93 f3f2 	sdiv	r3, r3, r2
 801017a:	b29a      	uxth	r2, r3
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010182:	bf00      	nop
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr
 801018e:	bf00      	nop
 8010190:	08012afc 	.word	0x08012afc
 8010194:	08012b04 	.word	0x08012b04

08010198 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010198:	b084      	sub	sp, #16
 801019a:	b580      	push	{r7, lr}
 801019c:	b084      	sub	sp, #16
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	f107 001c 	add.w	r0, r7, #28
 80101a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80101aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d120      	bne.n	80101f2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80101b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	68da      	ldr	r2, [r3, #12]
 80101c0:	4b2a      	ldr	r3, [pc, #168]	; (801026c <USB_CoreInit+0xd4>)
 80101c2:	4013      	ands	r3, r2
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80101d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d105      	bne.n	80101e6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 faac 	bl	8010744 <USB_CoreReset>
 80101ec:	4603      	mov	r3, r0
 80101ee:	73fb      	strb	r3, [r7, #15]
 80101f0:	e01a      	b.n	8010228 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80101fa:	687b      	ldr	r3, [r7, #4]
 80101fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f000 faa0 	bl	8010744 <USB_CoreReset>
 8010204:	4603      	mov	r3, r0
 8010206:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801020a:	2b00      	cmp	r3, #0
 801020c:	d106      	bne.n	801021c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010212:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	639a      	str	r2, [r3, #56]	; 0x38
 801021a:	e005      	b.n	8010228 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010220:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801022a:	2b01      	cmp	r3, #1
 801022c:	d116      	bne.n	801025c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010232:	b29a      	uxth	r2, r3
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801023c:	4b0c      	ldr	r3, [pc, #48]	; (8010270 <USB_CoreInit+0xd8>)
 801023e:	4313      	orrs	r3, r2
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	689b      	ldr	r3, [r3, #8]
 8010248:	f043 0206 	orr.w	r2, r3, #6
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	689b      	ldr	r3, [r3, #8]
 8010254:	f043 0220 	orr.w	r2, r3, #32
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801025c:	7bfb      	ldrb	r3, [r7, #15]
}
 801025e:	4618      	mov	r0, r3
 8010260:	3710      	adds	r7, #16
 8010262:	46bd      	mov	sp, r7
 8010264:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010268:	b004      	add	sp, #16
 801026a:	4770      	bx	lr
 801026c:	ffbdffbf 	.word	0xffbdffbf
 8010270:	03ee0000 	.word	0x03ee0000

08010274 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010274:	b480      	push	{r7}
 8010276:	b083      	sub	sp, #12
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	f023 0201 	bic.w	r2, r3, #1
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010288:	2300      	movs	r3, #0
}
 801028a:	4618      	mov	r0, r3
 801028c:	370c      	adds	r7, #12
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b084      	sub	sp, #16
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
 801029e:	460b      	mov	r3, r1
 80102a0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80102a2:	2300      	movs	r3, #0
 80102a4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80102b2:	78fb      	ldrb	r3, [r7, #3]
 80102b4:	2b01      	cmp	r3, #1
 80102b6:	d115      	bne.n	80102e4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80102c4:	2001      	movs	r0, #1
 80102c6:	f7f7 fc6b 	bl	8007ba0 <HAL_Delay>
      ms++;
 80102ca:	68fb      	ldr	r3, [r7, #12]
 80102cc:	3301      	adds	r3, #1
 80102ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f000 fa29 	bl	8010728 <USB_GetMode>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b01      	cmp	r3, #1
 80102da:	d01e      	beq.n	801031a <USB_SetCurrentMode+0x84>
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	2b31      	cmp	r3, #49	; 0x31
 80102e0:	d9f0      	bls.n	80102c4 <USB_SetCurrentMode+0x2e>
 80102e2:	e01a      	b.n	801031a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80102e4:	78fb      	ldrb	r3, [r7, #3]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d115      	bne.n	8010316 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80102f6:	2001      	movs	r0, #1
 80102f8:	f7f7 fc52 	bl	8007ba0 <HAL_Delay>
      ms++;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	3301      	adds	r3, #1
 8010300:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010302:	6878      	ldr	r0, [r7, #4]
 8010304:	f000 fa10 	bl	8010728 <USB_GetMode>
 8010308:	4603      	mov	r3, r0
 801030a:	2b00      	cmp	r3, #0
 801030c:	d005      	beq.n	801031a <USB_SetCurrentMode+0x84>
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	2b31      	cmp	r3, #49	; 0x31
 8010312:	d9f0      	bls.n	80102f6 <USB_SetCurrentMode+0x60>
 8010314:	e001      	b.n	801031a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010316:	2301      	movs	r3, #1
 8010318:	e005      	b.n	8010326 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	2b32      	cmp	r3, #50	; 0x32
 801031e:	d101      	bne.n	8010324 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010320:	2301      	movs	r3, #1
 8010322:	e000      	b.n	8010326 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	3710      	adds	r7, #16
 801032a:	46bd      	mov	sp, r7
 801032c:	bd80      	pop	{r7, pc}
	...

08010330 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010330:	b084      	sub	sp, #16
 8010332:	b580      	push	{r7, lr}
 8010334:	b086      	sub	sp, #24
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
 801033a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801033e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010342:	2300      	movs	r3, #0
 8010344:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801034a:	2300      	movs	r3, #0
 801034c:	613b      	str	r3, [r7, #16]
 801034e:	e009      	b.n	8010364 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	693b      	ldr	r3, [r7, #16]
 8010354:	3340      	adds	r3, #64	; 0x40
 8010356:	009b      	lsls	r3, r3, #2
 8010358:	4413      	add	r3, r2
 801035a:	2200      	movs	r2, #0
 801035c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	3301      	adds	r3, #1
 8010362:	613b      	str	r3, [r7, #16]
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	2b0e      	cmp	r3, #14
 8010368:	d9f2      	bls.n	8010350 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801036a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801036c:	2b00      	cmp	r3, #0
 801036e:	d11c      	bne.n	80103aa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	68fa      	ldr	r2, [r7, #12]
 801037a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801037e:	f043 0302 	orr.w	r3, r3, #2
 8010382:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010388:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	601a      	str	r2, [r3, #0]
 80103a8:	e005      	b.n	80103b6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103ae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80103bc:	461a      	mov	r2, r3
 80103be:	2300      	movs	r3, #0
 80103c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103c8:	4619      	mov	r1, r3
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103d0:	461a      	mov	r2, r3
 80103d2:	680b      	ldr	r3, [r1, #0]
 80103d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80103d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d8:	2b01      	cmp	r3, #1
 80103da:	d10c      	bne.n	80103f6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80103dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d104      	bne.n	80103ec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80103e2:	2100      	movs	r1, #0
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f000 f965 	bl	80106b4 <USB_SetDevSpeed>
 80103ea:	e008      	b.n	80103fe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80103ec:	2101      	movs	r1, #1
 80103ee:	6878      	ldr	r0, [r7, #4]
 80103f0:	f000 f960 	bl	80106b4 <USB_SetDevSpeed>
 80103f4:	e003      	b.n	80103fe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80103f6:	2103      	movs	r1, #3
 80103f8:	6878      	ldr	r0, [r7, #4]
 80103fa:	f000 f95b 	bl	80106b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80103fe:	2110      	movs	r1, #16
 8010400:	6878      	ldr	r0, [r7, #4]
 8010402:	f000 f8f3 	bl	80105ec <USB_FlushTxFifo>
 8010406:	4603      	mov	r3, r0
 8010408:	2b00      	cmp	r3, #0
 801040a:	d001      	beq.n	8010410 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801040c:	2301      	movs	r3, #1
 801040e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f000 f91f 	bl	8010654 <USB_FlushRxFifo>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d001      	beq.n	8010420 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801041c:	2301      	movs	r3, #1
 801041e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010426:	461a      	mov	r2, r3
 8010428:	2300      	movs	r3, #0
 801042a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010432:	461a      	mov	r2, r3
 8010434:	2300      	movs	r3, #0
 8010436:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801043e:	461a      	mov	r2, r3
 8010440:	2300      	movs	r3, #0
 8010442:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010444:	2300      	movs	r3, #0
 8010446:	613b      	str	r3, [r7, #16]
 8010448:	e043      	b.n	80104d2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	015a      	lsls	r2, r3, #5
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	4413      	add	r3, r2
 8010452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010456:	681b      	ldr	r3, [r3, #0]
 8010458:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801045c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010460:	d118      	bne.n	8010494 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010462:	693b      	ldr	r3, [r7, #16]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d10a      	bne.n	801047e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	015a      	lsls	r2, r3, #5
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	4413      	add	r3, r2
 8010470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010474:	461a      	mov	r2, r3
 8010476:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801047a:	6013      	str	r3, [r2, #0]
 801047c:	e013      	b.n	80104a6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	015a      	lsls	r2, r3, #5
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	4413      	add	r3, r2
 8010486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801048a:	461a      	mov	r2, r3
 801048c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010490:	6013      	str	r3, [r2, #0]
 8010492:	e008      	b.n	80104a6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	015a      	lsls	r2, r3, #5
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	4413      	add	r3, r2
 801049c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104a0:	461a      	mov	r2, r3
 80104a2:	2300      	movs	r3, #0
 80104a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	015a      	lsls	r2, r3, #5
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	4413      	add	r3, r2
 80104ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b2:	461a      	mov	r2, r3
 80104b4:	2300      	movs	r3, #0
 80104b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	015a      	lsls	r2, r3, #5
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	4413      	add	r3, r2
 80104c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104c4:	461a      	mov	r2, r3
 80104c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80104ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	3301      	adds	r3, #1
 80104d0:	613b      	str	r3, [r7, #16]
 80104d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104d4:	693a      	ldr	r2, [r7, #16]
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d3b7      	bcc.n	801044a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80104da:	2300      	movs	r3, #0
 80104dc:	613b      	str	r3, [r7, #16]
 80104de:	e043      	b.n	8010568 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	015a      	lsls	r2, r3, #5
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	4413      	add	r3, r2
 80104e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80104f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80104f6:	d118      	bne.n	801052a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80104f8:	693b      	ldr	r3, [r7, #16]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d10a      	bne.n	8010514 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	015a      	lsls	r2, r3, #5
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	4413      	add	r3, r2
 8010506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801050a:	461a      	mov	r2, r3
 801050c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010510:	6013      	str	r3, [r2, #0]
 8010512:	e013      	b.n	801053c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	015a      	lsls	r2, r3, #5
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	4413      	add	r3, r2
 801051c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010520:	461a      	mov	r2, r3
 8010522:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010526:	6013      	str	r3, [r2, #0]
 8010528:	e008      	b.n	801053c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	015a      	lsls	r2, r3, #5
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	4413      	add	r3, r2
 8010532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010536:	461a      	mov	r2, r3
 8010538:	2300      	movs	r3, #0
 801053a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801053c:	693b      	ldr	r3, [r7, #16]
 801053e:	015a      	lsls	r2, r3, #5
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	4413      	add	r3, r2
 8010544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010548:	461a      	mov	r2, r3
 801054a:	2300      	movs	r3, #0
 801054c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801054e:	693b      	ldr	r3, [r7, #16]
 8010550:	015a      	lsls	r2, r3, #5
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	4413      	add	r3, r2
 8010556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801055a:	461a      	mov	r2, r3
 801055c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010560:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	3301      	adds	r3, #1
 8010566:	613b      	str	r3, [r7, #16]
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056a:	693a      	ldr	r2, [r7, #16]
 801056c:	429a      	cmp	r2, r3
 801056e:	d3b7      	bcc.n	80104e0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010576:	691b      	ldr	r3, [r3, #16]
 8010578:	68fa      	ldr	r2, [r7, #12]
 801057a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801057e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010582:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010590:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010594:	2b00      	cmp	r3, #0
 8010596:	d105      	bne.n	80105a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	699b      	ldr	r3, [r3, #24]
 801059c:	f043 0210 	orr.w	r2, r3, #16
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	699a      	ldr	r2, [r3, #24]
 80105a8:	4b0e      	ldr	r3, [pc, #56]	; (80105e4 <USB_DevInit+0x2b4>)
 80105aa:	4313      	orrs	r3, r2
 80105ac:	687a      	ldr	r2, [r7, #4]
 80105ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80105b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d005      	beq.n	80105c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	699b      	ldr	r3, [r3, #24]
 80105ba:	f043 0208 	orr.w	r2, r3, #8
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80105c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105c4:	2b01      	cmp	r3, #1
 80105c6:	d105      	bne.n	80105d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	699a      	ldr	r2, [r3, #24]
 80105cc:	4b06      	ldr	r3, [pc, #24]	; (80105e8 <USB_DevInit+0x2b8>)
 80105ce:	4313      	orrs	r3, r2
 80105d0:	687a      	ldr	r2, [r7, #4]
 80105d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80105d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80105d6:	4618      	mov	r0, r3
 80105d8:	3718      	adds	r7, #24
 80105da:	46bd      	mov	sp, r7
 80105dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80105e0:	b004      	add	sp, #16
 80105e2:	4770      	bx	lr
 80105e4:	803c3800 	.word	0x803c3800
 80105e8:	40000004 	.word	0x40000004

080105ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80105ec:	b480      	push	{r7}
 80105ee:	b085      	sub	sp, #20
 80105f0:	af00      	add	r7, sp, #0
 80105f2:	6078      	str	r0, [r7, #4]
 80105f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80105f6:	2300      	movs	r3, #0
 80105f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	3301      	adds	r3, #1
 80105fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	4a13      	ldr	r2, [pc, #76]	; (8010650 <USB_FlushTxFifo+0x64>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d901      	bls.n	801060c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010608:	2303      	movs	r3, #3
 801060a:	e01b      	b.n	8010644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	691b      	ldr	r3, [r3, #16]
 8010610:	2b00      	cmp	r3, #0
 8010612:	daf2      	bge.n	80105fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010614:	2300      	movs	r3, #0
 8010616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010618:	683b      	ldr	r3, [r7, #0]
 801061a:	019b      	lsls	r3, r3, #6
 801061c:	f043 0220 	orr.w	r2, r3, #32
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	3301      	adds	r3, #1
 8010628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	4a08      	ldr	r2, [pc, #32]	; (8010650 <USB_FlushTxFifo+0x64>)
 801062e:	4293      	cmp	r3, r2
 8010630:	d901      	bls.n	8010636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010632:	2303      	movs	r3, #3
 8010634:	e006      	b.n	8010644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	691b      	ldr	r3, [r3, #16]
 801063a:	f003 0320 	and.w	r3, r3, #32
 801063e:	2b20      	cmp	r3, #32
 8010640:	d0f0      	beq.n	8010624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010642:	2300      	movs	r3, #0
}
 8010644:	4618      	mov	r0, r3
 8010646:	3714      	adds	r7, #20
 8010648:	46bd      	mov	sp, r7
 801064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064e:	4770      	bx	lr
 8010650:	00030d40 	.word	0x00030d40

08010654 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010654:	b480      	push	{r7}
 8010656:	b085      	sub	sp, #20
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801065c:	2300      	movs	r3, #0
 801065e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010660:	68fb      	ldr	r3, [r7, #12]
 8010662:	3301      	adds	r3, #1
 8010664:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	4a11      	ldr	r2, [pc, #68]	; (80106b0 <USB_FlushRxFifo+0x5c>)
 801066a:	4293      	cmp	r3, r2
 801066c:	d901      	bls.n	8010672 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801066e:	2303      	movs	r3, #3
 8010670:	e018      	b.n	80106a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	691b      	ldr	r3, [r3, #16]
 8010676:	2b00      	cmp	r3, #0
 8010678:	daf2      	bge.n	8010660 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801067a:	2300      	movs	r3, #0
 801067c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	2210      	movs	r2, #16
 8010682:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	3301      	adds	r3, #1
 8010688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801068a:	68fb      	ldr	r3, [r7, #12]
 801068c:	4a08      	ldr	r2, [pc, #32]	; (80106b0 <USB_FlushRxFifo+0x5c>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d901      	bls.n	8010696 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010692:	2303      	movs	r3, #3
 8010694:	e006      	b.n	80106a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	691b      	ldr	r3, [r3, #16]
 801069a:	f003 0310 	and.w	r3, r3, #16
 801069e:	2b10      	cmp	r3, #16
 80106a0:	d0f0      	beq.n	8010684 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80106a2:	2300      	movs	r3, #0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3714      	adds	r7, #20
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	00030d40 	.word	0x00030d40

080106b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b085      	sub	sp, #20
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	6078      	str	r0, [r7, #4]
 80106bc:	460b      	mov	r3, r1
 80106be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106ca:	681a      	ldr	r2, [r3, #0]
 80106cc:	78fb      	ldrb	r3, [r7, #3]
 80106ce:	68f9      	ldr	r1, [r7, #12]
 80106d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80106d4:	4313      	orrs	r3, r2
 80106d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80106d8:	2300      	movs	r3, #0
}
 80106da:	4618      	mov	r0, r3
 80106dc:	3714      	adds	r7, #20
 80106de:	46bd      	mov	sp, r7
 80106e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e4:	4770      	bx	lr

080106e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80106e6:	b480      	push	{r7}
 80106e8:	b085      	sub	sp, #20
 80106ea:	af00      	add	r7, sp, #0
 80106ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80106f2:	68fb      	ldr	r3, [r7, #12]
 80106f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	68fa      	ldr	r2, [r7, #12]
 80106fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010700:	f023 0303 	bic.w	r3, r3, #3
 8010704:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	68fa      	ldr	r2, [r7, #12]
 8010710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010714:	f043 0302 	orr.w	r3, r3, #2
 8010718:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801071a:	2300      	movs	r3, #0
}
 801071c:	4618      	mov	r0, r3
 801071e:	3714      	adds	r7, #20
 8010720:	46bd      	mov	sp, r7
 8010722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010726:	4770      	bx	lr

08010728 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010728:	b480      	push	{r7}
 801072a:	b083      	sub	sp, #12
 801072c:	af00      	add	r7, sp, #0
 801072e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	695b      	ldr	r3, [r3, #20]
 8010734:	f003 0301 	and.w	r3, r3, #1
}
 8010738:	4618      	mov	r0, r3
 801073a:	370c      	adds	r7, #12
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010744:	b480      	push	{r7}
 8010746:	b085      	sub	sp, #20
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801074c:	2300      	movs	r3, #0
 801074e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	3301      	adds	r3, #1
 8010754:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	4a13      	ldr	r2, [pc, #76]	; (80107a8 <USB_CoreReset+0x64>)
 801075a:	4293      	cmp	r3, r2
 801075c:	d901      	bls.n	8010762 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801075e:	2303      	movs	r3, #3
 8010760:	e01b      	b.n	801079a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	691b      	ldr	r3, [r3, #16]
 8010766:	2b00      	cmp	r3, #0
 8010768:	daf2      	bge.n	8010750 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801076a:	2300      	movs	r3, #0
 801076c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	691b      	ldr	r3, [r3, #16]
 8010772:	f043 0201 	orr.w	r2, r3, #1
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	3301      	adds	r3, #1
 801077e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	4a09      	ldr	r2, [pc, #36]	; (80107a8 <USB_CoreReset+0x64>)
 8010784:	4293      	cmp	r3, r2
 8010786:	d901      	bls.n	801078c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010788:	2303      	movs	r3, #3
 801078a:	e006      	b.n	801079a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	691b      	ldr	r3, [r3, #16]
 8010790:	f003 0301 	and.w	r3, r3, #1
 8010794:	2b01      	cmp	r3, #1
 8010796:	d0f0      	beq.n	801077a <USB_CoreReset+0x36>

  return HAL_OK;
 8010798:	2300      	movs	r3, #0
}
 801079a:	4618      	mov	r0, r3
 801079c:	3714      	adds	r7, #20
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr
 80107a6:	bf00      	nop
 80107a8:	00030d40 	.word	0x00030d40

080107ac <__errno>:
 80107ac:	4b01      	ldr	r3, [pc, #4]	; (80107b4 <__errno+0x8>)
 80107ae:	6818      	ldr	r0, [r3, #0]
 80107b0:	4770      	bx	lr
 80107b2:	bf00      	nop
 80107b4:	24000024 	.word	0x24000024

080107b8 <__libc_init_array>:
 80107b8:	b570      	push	{r4, r5, r6, lr}
 80107ba:	4d0d      	ldr	r5, [pc, #52]	; (80107f0 <__libc_init_array+0x38>)
 80107bc:	4c0d      	ldr	r4, [pc, #52]	; (80107f4 <__libc_init_array+0x3c>)
 80107be:	1b64      	subs	r4, r4, r5
 80107c0:	10a4      	asrs	r4, r4, #2
 80107c2:	2600      	movs	r6, #0
 80107c4:	42a6      	cmp	r6, r4
 80107c6:	d109      	bne.n	80107dc <__libc_init_array+0x24>
 80107c8:	4d0b      	ldr	r5, [pc, #44]	; (80107f8 <__libc_init_array+0x40>)
 80107ca:	4c0c      	ldr	r4, [pc, #48]	; (80107fc <__libc_init_array+0x44>)
 80107cc:	f000 fc8e 	bl	80110ec <_init>
 80107d0:	1b64      	subs	r4, r4, r5
 80107d2:	10a4      	asrs	r4, r4, #2
 80107d4:	2600      	movs	r6, #0
 80107d6:	42a6      	cmp	r6, r4
 80107d8:	d105      	bne.n	80107e6 <__libc_init_array+0x2e>
 80107da:	bd70      	pop	{r4, r5, r6, pc}
 80107dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80107e0:	4798      	blx	r3
 80107e2:	3601      	adds	r6, #1
 80107e4:	e7ee      	b.n	80107c4 <__libc_init_array+0xc>
 80107e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80107ea:	4798      	blx	r3
 80107ec:	3601      	adds	r6, #1
 80107ee:	e7f2      	b.n	80107d6 <__libc_init_array+0x1e>
 80107f0:	08012b48 	.word	0x08012b48
 80107f4:	08012b48 	.word	0x08012b48
 80107f8:	08012b48 	.word	0x08012b48
 80107fc:	08012b4c 	.word	0x08012b4c

08010800 <memset>:
 8010800:	4402      	add	r2, r0
 8010802:	4603      	mov	r3, r0
 8010804:	4293      	cmp	r3, r2
 8010806:	d100      	bne.n	801080a <memset+0xa>
 8010808:	4770      	bx	lr
 801080a:	f803 1b01 	strb.w	r1, [r3], #1
 801080e:	e7f9      	b.n	8010804 <memset+0x4>

08010810 <_free_r>:
 8010810:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010812:	2900      	cmp	r1, #0
 8010814:	d044      	beq.n	80108a0 <_free_r+0x90>
 8010816:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801081a:	9001      	str	r0, [sp, #4]
 801081c:	2b00      	cmp	r3, #0
 801081e:	f1a1 0404 	sub.w	r4, r1, #4
 8010822:	bfb8      	it	lt
 8010824:	18e4      	addlt	r4, r4, r3
 8010826:	f000 f903 	bl	8010a30 <__malloc_lock>
 801082a:	4a1e      	ldr	r2, [pc, #120]	; (80108a4 <_free_r+0x94>)
 801082c:	9801      	ldr	r0, [sp, #4]
 801082e:	6813      	ldr	r3, [r2, #0]
 8010830:	b933      	cbnz	r3, 8010840 <_free_r+0x30>
 8010832:	6063      	str	r3, [r4, #4]
 8010834:	6014      	str	r4, [r2, #0]
 8010836:	b003      	add	sp, #12
 8010838:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801083c:	f000 b8fe 	b.w	8010a3c <__malloc_unlock>
 8010840:	42a3      	cmp	r3, r4
 8010842:	d908      	bls.n	8010856 <_free_r+0x46>
 8010844:	6825      	ldr	r5, [r4, #0]
 8010846:	1961      	adds	r1, r4, r5
 8010848:	428b      	cmp	r3, r1
 801084a:	bf01      	itttt	eq
 801084c:	6819      	ldreq	r1, [r3, #0]
 801084e:	685b      	ldreq	r3, [r3, #4]
 8010850:	1949      	addeq	r1, r1, r5
 8010852:	6021      	streq	r1, [r4, #0]
 8010854:	e7ed      	b.n	8010832 <_free_r+0x22>
 8010856:	461a      	mov	r2, r3
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	b10b      	cbz	r3, 8010860 <_free_r+0x50>
 801085c:	42a3      	cmp	r3, r4
 801085e:	d9fa      	bls.n	8010856 <_free_r+0x46>
 8010860:	6811      	ldr	r1, [r2, #0]
 8010862:	1855      	adds	r5, r2, r1
 8010864:	42a5      	cmp	r5, r4
 8010866:	d10b      	bne.n	8010880 <_free_r+0x70>
 8010868:	6824      	ldr	r4, [r4, #0]
 801086a:	4421      	add	r1, r4
 801086c:	1854      	adds	r4, r2, r1
 801086e:	42a3      	cmp	r3, r4
 8010870:	6011      	str	r1, [r2, #0]
 8010872:	d1e0      	bne.n	8010836 <_free_r+0x26>
 8010874:	681c      	ldr	r4, [r3, #0]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	6053      	str	r3, [r2, #4]
 801087a:	4421      	add	r1, r4
 801087c:	6011      	str	r1, [r2, #0]
 801087e:	e7da      	b.n	8010836 <_free_r+0x26>
 8010880:	d902      	bls.n	8010888 <_free_r+0x78>
 8010882:	230c      	movs	r3, #12
 8010884:	6003      	str	r3, [r0, #0]
 8010886:	e7d6      	b.n	8010836 <_free_r+0x26>
 8010888:	6825      	ldr	r5, [r4, #0]
 801088a:	1961      	adds	r1, r4, r5
 801088c:	428b      	cmp	r3, r1
 801088e:	bf04      	itt	eq
 8010890:	6819      	ldreq	r1, [r3, #0]
 8010892:	685b      	ldreq	r3, [r3, #4]
 8010894:	6063      	str	r3, [r4, #4]
 8010896:	bf04      	itt	eq
 8010898:	1949      	addeq	r1, r1, r5
 801089a:	6021      	streq	r1, [r4, #0]
 801089c:	6054      	str	r4, [r2, #4]
 801089e:	e7ca      	b.n	8010836 <_free_r+0x26>
 80108a0:	b003      	add	sp, #12
 80108a2:	bd30      	pop	{r4, r5, pc}
 80108a4:	24000eb8 	.word	0x24000eb8

080108a8 <sbrk_aligned>:
 80108a8:	b570      	push	{r4, r5, r6, lr}
 80108aa:	4e0e      	ldr	r6, [pc, #56]	; (80108e4 <sbrk_aligned+0x3c>)
 80108ac:	460c      	mov	r4, r1
 80108ae:	6831      	ldr	r1, [r6, #0]
 80108b0:	4605      	mov	r5, r0
 80108b2:	b911      	cbnz	r1, 80108ba <sbrk_aligned+0x12>
 80108b4:	f000 f88c 	bl	80109d0 <_sbrk_r>
 80108b8:	6030      	str	r0, [r6, #0]
 80108ba:	4621      	mov	r1, r4
 80108bc:	4628      	mov	r0, r5
 80108be:	f000 f887 	bl	80109d0 <_sbrk_r>
 80108c2:	1c43      	adds	r3, r0, #1
 80108c4:	d00a      	beq.n	80108dc <sbrk_aligned+0x34>
 80108c6:	1cc4      	adds	r4, r0, #3
 80108c8:	f024 0403 	bic.w	r4, r4, #3
 80108cc:	42a0      	cmp	r0, r4
 80108ce:	d007      	beq.n	80108e0 <sbrk_aligned+0x38>
 80108d0:	1a21      	subs	r1, r4, r0
 80108d2:	4628      	mov	r0, r5
 80108d4:	f000 f87c 	bl	80109d0 <_sbrk_r>
 80108d8:	3001      	adds	r0, #1
 80108da:	d101      	bne.n	80108e0 <sbrk_aligned+0x38>
 80108dc:	f04f 34ff 	mov.w	r4, #4294967295
 80108e0:	4620      	mov	r0, r4
 80108e2:	bd70      	pop	{r4, r5, r6, pc}
 80108e4:	24000ebc 	.word	0x24000ebc

080108e8 <_malloc_r>:
 80108e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ec:	1ccd      	adds	r5, r1, #3
 80108ee:	f025 0503 	bic.w	r5, r5, #3
 80108f2:	3508      	adds	r5, #8
 80108f4:	2d0c      	cmp	r5, #12
 80108f6:	bf38      	it	cc
 80108f8:	250c      	movcc	r5, #12
 80108fa:	2d00      	cmp	r5, #0
 80108fc:	4607      	mov	r7, r0
 80108fe:	db01      	blt.n	8010904 <_malloc_r+0x1c>
 8010900:	42a9      	cmp	r1, r5
 8010902:	d905      	bls.n	8010910 <_malloc_r+0x28>
 8010904:	230c      	movs	r3, #12
 8010906:	603b      	str	r3, [r7, #0]
 8010908:	2600      	movs	r6, #0
 801090a:	4630      	mov	r0, r6
 801090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010910:	4e2e      	ldr	r6, [pc, #184]	; (80109cc <_malloc_r+0xe4>)
 8010912:	f000 f88d 	bl	8010a30 <__malloc_lock>
 8010916:	6833      	ldr	r3, [r6, #0]
 8010918:	461c      	mov	r4, r3
 801091a:	bb34      	cbnz	r4, 801096a <_malloc_r+0x82>
 801091c:	4629      	mov	r1, r5
 801091e:	4638      	mov	r0, r7
 8010920:	f7ff ffc2 	bl	80108a8 <sbrk_aligned>
 8010924:	1c43      	adds	r3, r0, #1
 8010926:	4604      	mov	r4, r0
 8010928:	d14d      	bne.n	80109c6 <_malloc_r+0xde>
 801092a:	6834      	ldr	r4, [r6, #0]
 801092c:	4626      	mov	r6, r4
 801092e:	2e00      	cmp	r6, #0
 8010930:	d140      	bne.n	80109b4 <_malloc_r+0xcc>
 8010932:	6823      	ldr	r3, [r4, #0]
 8010934:	4631      	mov	r1, r6
 8010936:	4638      	mov	r0, r7
 8010938:	eb04 0803 	add.w	r8, r4, r3
 801093c:	f000 f848 	bl	80109d0 <_sbrk_r>
 8010940:	4580      	cmp	r8, r0
 8010942:	d13a      	bne.n	80109ba <_malloc_r+0xd2>
 8010944:	6821      	ldr	r1, [r4, #0]
 8010946:	3503      	adds	r5, #3
 8010948:	1a6d      	subs	r5, r5, r1
 801094a:	f025 0503 	bic.w	r5, r5, #3
 801094e:	3508      	adds	r5, #8
 8010950:	2d0c      	cmp	r5, #12
 8010952:	bf38      	it	cc
 8010954:	250c      	movcc	r5, #12
 8010956:	4629      	mov	r1, r5
 8010958:	4638      	mov	r0, r7
 801095a:	f7ff ffa5 	bl	80108a8 <sbrk_aligned>
 801095e:	3001      	adds	r0, #1
 8010960:	d02b      	beq.n	80109ba <_malloc_r+0xd2>
 8010962:	6823      	ldr	r3, [r4, #0]
 8010964:	442b      	add	r3, r5
 8010966:	6023      	str	r3, [r4, #0]
 8010968:	e00e      	b.n	8010988 <_malloc_r+0xa0>
 801096a:	6822      	ldr	r2, [r4, #0]
 801096c:	1b52      	subs	r2, r2, r5
 801096e:	d41e      	bmi.n	80109ae <_malloc_r+0xc6>
 8010970:	2a0b      	cmp	r2, #11
 8010972:	d916      	bls.n	80109a2 <_malloc_r+0xba>
 8010974:	1961      	adds	r1, r4, r5
 8010976:	42a3      	cmp	r3, r4
 8010978:	6025      	str	r5, [r4, #0]
 801097a:	bf18      	it	ne
 801097c:	6059      	strne	r1, [r3, #4]
 801097e:	6863      	ldr	r3, [r4, #4]
 8010980:	bf08      	it	eq
 8010982:	6031      	streq	r1, [r6, #0]
 8010984:	5162      	str	r2, [r4, r5]
 8010986:	604b      	str	r3, [r1, #4]
 8010988:	4638      	mov	r0, r7
 801098a:	f104 060b 	add.w	r6, r4, #11
 801098e:	f000 f855 	bl	8010a3c <__malloc_unlock>
 8010992:	f026 0607 	bic.w	r6, r6, #7
 8010996:	1d23      	adds	r3, r4, #4
 8010998:	1af2      	subs	r2, r6, r3
 801099a:	d0b6      	beq.n	801090a <_malloc_r+0x22>
 801099c:	1b9b      	subs	r3, r3, r6
 801099e:	50a3      	str	r3, [r4, r2]
 80109a0:	e7b3      	b.n	801090a <_malloc_r+0x22>
 80109a2:	6862      	ldr	r2, [r4, #4]
 80109a4:	42a3      	cmp	r3, r4
 80109a6:	bf0c      	ite	eq
 80109a8:	6032      	streq	r2, [r6, #0]
 80109aa:	605a      	strne	r2, [r3, #4]
 80109ac:	e7ec      	b.n	8010988 <_malloc_r+0xa0>
 80109ae:	4623      	mov	r3, r4
 80109b0:	6864      	ldr	r4, [r4, #4]
 80109b2:	e7b2      	b.n	801091a <_malloc_r+0x32>
 80109b4:	4634      	mov	r4, r6
 80109b6:	6876      	ldr	r6, [r6, #4]
 80109b8:	e7b9      	b.n	801092e <_malloc_r+0x46>
 80109ba:	230c      	movs	r3, #12
 80109bc:	603b      	str	r3, [r7, #0]
 80109be:	4638      	mov	r0, r7
 80109c0:	f000 f83c 	bl	8010a3c <__malloc_unlock>
 80109c4:	e7a1      	b.n	801090a <_malloc_r+0x22>
 80109c6:	6025      	str	r5, [r4, #0]
 80109c8:	e7de      	b.n	8010988 <_malloc_r+0xa0>
 80109ca:	bf00      	nop
 80109cc:	24000eb8 	.word	0x24000eb8

080109d0 <_sbrk_r>:
 80109d0:	b538      	push	{r3, r4, r5, lr}
 80109d2:	4d06      	ldr	r5, [pc, #24]	; (80109ec <_sbrk_r+0x1c>)
 80109d4:	2300      	movs	r3, #0
 80109d6:	4604      	mov	r4, r0
 80109d8:	4608      	mov	r0, r1
 80109da:	602b      	str	r3, [r5, #0]
 80109dc:	f7f6 ffee 	bl	80079bc <_sbrk>
 80109e0:	1c43      	adds	r3, r0, #1
 80109e2:	d102      	bne.n	80109ea <_sbrk_r+0x1a>
 80109e4:	682b      	ldr	r3, [r5, #0]
 80109e6:	b103      	cbz	r3, 80109ea <_sbrk_r+0x1a>
 80109e8:	6023      	str	r3, [r4, #0]
 80109ea:	bd38      	pop	{r3, r4, r5, pc}
 80109ec:	24000ec0 	.word	0x24000ec0

080109f0 <siprintf>:
 80109f0:	b40e      	push	{r1, r2, r3}
 80109f2:	b500      	push	{lr}
 80109f4:	b09c      	sub	sp, #112	; 0x70
 80109f6:	ab1d      	add	r3, sp, #116	; 0x74
 80109f8:	9002      	str	r0, [sp, #8]
 80109fa:	9006      	str	r0, [sp, #24]
 80109fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010a00:	4809      	ldr	r0, [pc, #36]	; (8010a28 <siprintf+0x38>)
 8010a02:	9107      	str	r1, [sp, #28]
 8010a04:	9104      	str	r1, [sp, #16]
 8010a06:	4909      	ldr	r1, [pc, #36]	; (8010a2c <siprintf+0x3c>)
 8010a08:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a0c:	9105      	str	r1, [sp, #20]
 8010a0e:	6800      	ldr	r0, [r0, #0]
 8010a10:	9301      	str	r3, [sp, #4]
 8010a12:	a902      	add	r1, sp, #8
 8010a14:	f000 f874 	bl	8010b00 <_svfiprintf_r>
 8010a18:	9b02      	ldr	r3, [sp, #8]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	701a      	strb	r2, [r3, #0]
 8010a1e:	b01c      	add	sp, #112	; 0x70
 8010a20:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a24:	b003      	add	sp, #12
 8010a26:	4770      	bx	lr
 8010a28:	24000024 	.word	0x24000024
 8010a2c:	ffff0208 	.word	0xffff0208

08010a30 <__malloc_lock>:
 8010a30:	4801      	ldr	r0, [pc, #4]	; (8010a38 <__malloc_lock+0x8>)
 8010a32:	f000 baf9 	b.w	8011028 <__retarget_lock_acquire_recursive>
 8010a36:	bf00      	nop
 8010a38:	24000ec4 	.word	0x24000ec4

08010a3c <__malloc_unlock>:
 8010a3c:	4801      	ldr	r0, [pc, #4]	; (8010a44 <__malloc_unlock+0x8>)
 8010a3e:	f000 baf4 	b.w	801102a <__retarget_lock_release_recursive>
 8010a42:	bf00      	nop
 8010a44:	24000ec4 	.word	0x24000ec4

08010a48 <__ssputs_r>:
 8010a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a4c:	688e      	ldr	r6, [r1, #8]
 8010a4e:	429e      	cmp	r6, r3
 8010a50:	4682      	mov	sl, r0
 8010a52:	460c      	mov	r4, r1
 8010a54:	4690      	mov	r8, r2
 8010a56:	461f      	mov	r7, r3
 8010a58:	d838      	bhi.n	8010acc <__ssputs_r+0x84>
 8010a5a:	898a      	ldrh	r2, [r1, #12]
 8010a5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010a60:	d032      	beq.n	8010ac8 <__ssputs_r+0x80>
 8010a62:	6825      	ldr	r5, [r4, #0]
 8010a64:	6909      	ldr	r1, [r1, #16]
 8010a66:	eba5 0901 	sub.w	r9, r5, r1
 8010a6a:	6965      	ldr	r5, [r4, #20]
 8010a6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a74:	3301      	adds	r3, #1
 8010a76:	444b      	add	r3, r9
 8010a78:	106d      	asrs	r5, r5, #1
 8010a7a:	429d      	cmp	r5, r3
 8010a7c:	bf38      	it	cc
 8010a7e:	461d      	movcc	r5, r3
 8010a80:	0553      	lsls	r3, r2, #21
 8010a82:	d531      	bpl.n	8010ae8 <__ssputs_r+0xa0>
 8010a84:	4629      	mov	r1, r5
 8010a86:	f7ff ff2f 	bl	80108e8 <_malloc_r>
 8010a8a:	4606      	mov	r6, r0
 8010a8c:	b950      	cbnz	r0, 8010aa4 <__ssputs_r+0x5c>
 8010a8e:	230c      	movs	r3, #12
 8010a90:	f8ca 3000 	str.w	r3, [sl]
 8010a94:	89a3      	ldrh	r3, [r4, #12]
 8010a96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a9a:	81a3      	strh	r3, [r4, #12]
 8010a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8010aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aa4:	6921      	ldr	r1, [r4, #16]
 8010aa6:	464a      	mov	r2, r9
 8010aa8:	f000 fac0 	bl	801102c <memcpy>
 8010aac:	89a3      	ldrh	r3, [r4, #12]
 8010aae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ab6:	81a3      	strh	r3, [r4, #12]
 8010ab8:	6126      	str	r6, [r4, #16]
 8010aba:	6165      	str	r5, [r4, #20]
 8010abc:	444e      	add	r6, r9
 8010abe:	eba5 0509 	sub.w	r5, r5, r9
 8010ac2:	6026      	str	r6, [r4, #0]
 8010ac4:	60a5      	str	r5, [r4, #8]
 8010ac6:	463e      	mov	r6, r7
 8010ac8:	42be      	cmp	r6, r7
 8010aca:	d900      	bls.n	8010ace <__ssputs_r+0x86>
 8010acc:	463e      	mov	r6, r7
 8010ace:	6820      	ldr	r0, [r4, #0]
 8010ad0:	4632      	mov	r2, r6
 8010ad2:	4641      	mov	r1, r8
 8010ad4:	f000 fab8 	bl	8011048 <memmove>
 8010ad8:	68a3      	ldr	r3, [r4, #8]
 8010ada:	1b9b      	subs	r3, r3, r6
 8010adc:	60a3      	str	r3, [r4, #8]
 8010ade:	6823      	ldr	r3, [r4, #0]
 8010ae0:	4433      	add	r3, r6
 8010ae2:	6023      	str	r3, [r4, #0]
 8010ae4:	2000      	movs	r0, #0
 8010ae6:	e7db      	b.n	8010aa0 <__ssputs_r+0x58>
 8010ae8:	462a      	mov	r2, r5
 8010aea:	f000 fac7 	bl	801107c <_realloc_r>
 8010aee:	4606      	mov	r6, r0
 8010af0:	2800      	cmp	r0, #0
 8010af2:	d1e1      	bne.n	8010ab8 <__ssputs_r+0x70>
 8010af4:	6921      	ldr	r1, [r4, #16]
 8010af6:	4650      	mov	r0, sl
 8010af8:	f7ff fe8a 	bl	8010810 <_free_r>
 8010afc:	e7c7      	b.n	8010a8e <__ssputs_r+0x46>
	...

08010b00 <_svfiprintf_r>:
 8010b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b04:	4698      	mov	r8, r3
 8010b06:	898b      	ldrh	r3, [r1, #12]
 8010b08:	061b      	lsls	r3, r3, #24
 8010b0a:	b09d      	sub	sp, #116	; 0x74
 8010b0c:	4607      	mov	r7, r0
 8010b0e:	460d      	mov	r5, r1
 8010b10:	4614      	mov	r4, r2
 8010b12:	d50e      	bpl.n	8010b32 <_svfiprintf_r+0x32>
 8010b14:	690b      	ldr	r3, [r1, #16]
 8010b16:	b963      	cbnz	r3, 8010b32 <_svfiprintf_r+0x32>
 8010b18:	2140      	movs	r1, #64	; 0x40
 8010b1a:	f7ff fee5 	bl	80108e8 <_malloc_r>
 8010b1e:	6028      	str	r0, [r5, #0]
 8010b20:	6128      	str	r0, [r5, #16]
 8010b22:	b920      	cbnz	r0, 8010b2e <_svfiprintf_r+0x2e>
 8010b24:	230c      	movs	r3, #12
 8010b26:	603b      	str	r3, [r7, #0]
 8010b28:	f04f 30ff 	mov.w	r0, #4294967295
 8010b2c:	e0d1      	b.n	8010cd2 <_svfiprintf_r+0x1d2>
 8010b2e:	2340      	movs	r3, #64	; 0x40
 8010b30:	616b      	str	r3, [r5, #20]
 8010b32:	2300      	movs	r3, #0
 8010b34:	9309      	str	r3, [sp, #36]	; 0x24
 8010b36:	2320      	movs	r3, #32
 8010b38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b3c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b40:	2330      	movs	r3, #48	; 0x30
 8010b42:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010cec <_svfiprintf_r+0x1ec>
 8010b46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b4a:	f04f 0901 	mov.w	r9, #1
 8010b4e:	4623      	mov	r3, r4
 8010b50:	469a      	mov	sl, r3
 8010b52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b56:	b10a      	cbz	r2, 8010b5c <_svfiprintf_r+0x5c>
 8010b58:	2a25      	cmp	r2, #37	; 0x25
 8010b5a:	d1f9      	bne.n	8010b50 <_svfiprintf_r+0x50>
 8010b5c:	ebba 0b04 	subs.w	fp, sl, r4
 8010b60:	d00b      	beq.n	8010b7a <_svfiprintf_r+0x7a>
 8010b62:	465b      	mov	r3, fp
 8010b64:	4622      	mov	r2, r4
 8010b66:	4629      	mov	r1, r5
 8010b68:	4638      	mov	r0, r7
 8010b6a:	f7ff ff6d 	bl	8010a48 <__ssputs_r>
 8010b6e:	3001      	adds	r0, #1
 8010b70:	f000 80aa 	beq.w	8010cc8 <_svfiprintf_r+0x1c8>
 8010b74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010b76:	445a      	add	r2, fp
 8010b78:	9209      	str	r2, [sp, #36]	; 0x24
 8010b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	f000 80a2 	beq.w	8010cc8 <_svfiprintf_r+0x1c8>
 8010b84:	2300      	movs	r3, #0
 8010b86:	f04f 32ff 	mov.w	r2, #4294967295
 8010b8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b8e:	f10a 0a01 	add.w	sl, sl, #1
 8010b92:	9304      	str	r3, [sp, #16]
 8010b94:	9307      	str	r3, [sp, #28]
 8010b96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010b9a:	931a      	str	r3, [sp, #104]	; 0x68
 8010b9c:	4654      	mov	r4, sl
 8010b9e:	2205      	movs	r2, #5
 8010ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010ba4:	4851      	ldr	r0, [pc, #324]	; (8010cec <_svfiprintf_r+0x1ec>)
 8010ba6:	f7ef fb9b 	bl	80002e0 <memchr>
 8010baa:	9a04      	ldr	r2, [sp, #16]
 8010bac:	b9d8      	cbnz	r0, 8010be6 <_svfiprintf_r+0xe6>
 8010bae:	06d0      	lsls	r0, r2, #27
 8010bb0:	bf44      	itt	mi
 8010bb2:	2320      	movmi	r3, #32
 8010bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bb8:	0711      	lsls	r1, r2, #28
 8010bba:	bf44      	itt	mi
 8010bbc:	232b      	movmi	r3, #43	; 0x2b
 8010bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bc2:	f89a 3000 	ldrb.w	r3, [sl]
 8010bc6:	2b2a      	cmp	r3, #42	; 0x2a
 8010bc8:	d015      	beq.n	8010bf6 <_svfiprintf_r+0xf6>
 8010bca:	9a07      	ldr	r2, [sp, #28]
 8010bcc:	4654      	mov	r4, sl
 8010bce:	2000      	movs	r0, #0
 8010bd0:	f04f 0c0a 	mov.w	ip, #10
 8010bd4:	4621      	mov	r1, r4
 8010bd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bda:	3b30      	subs	r3, #48	; 0x30
 8010bdc:	2b09      	cmp	r3, #9
 8010bde:	d94e      	bls.n	8010c7e <_svfiprintf_r+0x17e>
 8010be0:	b1b0      	cbz	r0, 8010c10 <_svfiprintf_r+0x110>
 8010be2:	9207      	str	r2, [sp, #28]
 8010be4:	e014      	b.n	8010c10 <_svfiprintf_r+0x110>
 8010be6:	eba0 0308 	sub.w	r3, r0, r8
 8010bea:	fa09 f303 	lsl.w	r3, r9, r3
 8010bee:	4313      	orrs	r3, r2
 8010bf0:	9304      	str	r3, [sp, #16]
 8010bf2:	46a2      	mov	sl, r4
 8010bf4:	e7d2      	b.n	8010b9c <_svfiprintf_r+0x9c>
 8010bf6:	9b03      	ldr	r3, [sp, #12]
 8010bf8:	1d19      	adds	r1, r3, #4
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	9103      	str	r1, [sp, #12]
 8010bfe:	2b00      	cmp	r3, #0
 8010c00:	bfbb      	ittet	lt
 8010c02:	425b      	neglt	r3, r3
 8010c04:	f042 0202 	orrlt.w	r2, r2, #2
 8010c08:	9307      	strge	r3, [sp, #28]
 8010c0a:	9307      	strlt	r3, [sp, #28]
 8010c0c:	bfb8      	it	lt
 8010c0e:	9204      	strlt	r2, [sp, #16]
 8010c10:	7823      	ldrb	r3, [r4, #0]
 8010c12:	2b2e      	cmp	r3, #46	; 0x2e
 8010c14:	d10c      	bne.n	8010c30 <_svfiprintf_r+0x130>
 8010c16:	7863      	ldrb	r3, [r4, #1]
 8010c18:	2b2a      	cmp	r3, #42	; 0x2a
 8010c1a:	d135      	bne.n	8010c88 <_svfiprintf_r+0x188>
 8010c1c:	9b03      	ldr	r3, [sp, #12]
 8010c1e:	1d1a      	adds	r2, r3, #4
 8010c20:	681b      	ldr	r3, [r3, #0]
 8010c22:	9203      	str	r2, [sp, #12]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	bfb8      	it	lt
 8010c28:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c2c:	3402      	adds	r4, #2
 8010c2e:	9305      	str	r3, [sp, #20]
 8010c30:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010cfc <_svfiprintf_r+0x1fc>
 8010c34:	7821      	ldrb	r1, [r4, #0]
 8010c36:	2203      	movs	r2, #3
 8010c38:	4650      	mov	r0, sl
 8010c3a:	f7ef fb51 	bl	80002e0 <memchr>
 8010c3e:	b140      	cbz	r0, 8010c52 <_svfiprintf_r+0x152>
 8010c40:	2340      	movs	r3, #64	; 0x40
 8010c42:	eba0 000a 	sub.w	r0, r0, sl
 8010c46:	fa03 f000 	lsl.w	r0, r3, r0
 8010c4a:	9b04      	ldr	r3, [sp, #16]
 8010c4c:	4303      	orrs	r3, r0
 8010c4e:	3401      	adds	r4, #1
 8010c50:	9304      	str	r3, [sp, #16]
 8010c52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c56:	4826      	ldr	r0, [pc, #152]	; (8010cf0 <_svfiprintf_r+0x1f0>)
 8010c58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010c5c:	2206      	movs	r2, #6
 8010c5e:	f7ef fb3f 	bl	80002e0 <memchr>
 8010c62:	2800      	cmp	r0, #0
 8010c64:	d038      	beq.n	8010cd8 <_svfiprintf_r+0x1d8>
 8010c66:	4b23      	ldr	r3, [pc, #140]	; (8010cf4 <_svfiprintf_r+0x1f4>)
 8010c68:	bb1b      	cbnz	r3, 8010cb2 <_svfiprintf_r+0x1b2>
 8010c6a:	9b03      	ldr	r3, [sp, #12]
 8010c6c:	3307      	adds	r3, #7
 8010c6e:	f023 0307 	bic.w	r3, r3, #7
 8010c72:	3308      	adds	r3, #8
 8010c74:	9303      	str	r3, [sp, #12]
 8010c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010c78:	4433      	add	r3, r6
 8010c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8010c7c:	e767      	b.n	8010b4e <_svfiprintf_r+0x4e>
 8010c7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c82:	460c      	mov	r4, r1
 8010c84:	2001      	movs	r0, #1
 8010c86:	e7a5      	b.n	8010bd4 <_svfiprintf_r+0xd4>
 8010c88:	2300      	movs	r3, #0
 8010c8a:	3401      	adds	r4, #1
 8010c8c:	9305      	str	r3, [sp, #20]
 8010c8e:	4619      	mov	r1, r3
 8010c90:	f04f 0c0a 	mov.w	ip, #10
 8010c94:	4620      	mov	r0, r4
 8010c96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c9a:	3a30      	subs	r2, #48	; 0x30
 8010c9c:	2a09      	cmp	r2, #9
 8010c9e:	d903      	bls.n	8010ca8 <_svfiprintf_r+0x1a8>
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d0c5      	beq.n	8010c30 <_svfiprintf_r+0x130>
 8010ca4:	9105      	str	r1, [sp, #20]
 8010ca6:	e7c3      	b.n	8010c30 <_svfiprintf_r+0x130>
 8010ca8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cac:	4604      	mov	r4, r0
 8010cae:	2301      	movs	r3, #1
 8010cb0:	e7f0      	b.n	8010c94 <_svfiprintf_r+0x194>
 8010cb2:	ab03      	add	r3, sp, #12
 8010cb4:	9300      	str	r3, [sp, #0]
 8010cb6:	462a      	mov	r2, r5
 8010cb8:	4b0f      	ldr	r3, [pc, #60]	; (8010cf8 <_svfiprintf_r+0x1f8>)
 8010cba:	a904      	add	r1, sp, #16
 8010cbc:	4638      	mov	r0, r7
 8010cbe:	f3af 8000 	nop.w
 8010cc2:	1c42      	adds	r2, r0, #1
 8010cc4:	4606      	mov	r6, r0
 8010cc6:	d1d6      	bne.n	8010c76 <_svfiprintf_r+0x176>
 8010cc8:	89ab      	ldrh	r3, [r5, #12]
 8010cca:	065b      	lsls	r3, r3, #25
 8010ccc:	f53f af2c 	bmi.w	8010b28 <_svfiprintf_r+0x28>
 8010cd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010cd2:	b01d      	add	sp, #116	; 0x74
 8010cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cd8:	ab03      	add	r3, sp, #12
 8010cda:	9300      	str	r3, [sp, #0]
 8010cdc:	462a      	mov	r2, r5
 8010cde:	4b06      	ldr	r3, [pc, #24]	; (8010cf8 <_svfiprintf_r+0x1f8>)
 8010ce0:	a904      	add	r1, sp, #16
 8010ce2:	4638      	mov	r0, r7
 8010ce4:	f000 f87a 	bl	8010ddc <_printf_i>
 8010ce8:	e7eb      	b.n	8010cc2 <_svfiprintf_r+0x1c2>
 8010cea:	bf00      	nop
 8010cec:	08012b0c 	.word	0x08012b0c
 8010cf0:	08012b16 	.word	0x08012b16
 8010cf4:	00000000 	.word	0x00000000
 8010cf8:	08010a49 	.word	0x08010a49
 8010cfc:	08012b12 	.word	0x08012b12

08010d00 <_printf_common>:
 8010d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d04:	4616      	mov	r6, r2
 8010d06:	4699      	mov	r9, r3
 8010d08:	688a      	ldr	r2, [r1, #8]
 8010d0a:	690b      	ldr	r3, [r1, #16]
 8010d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010d10:	4293      	cmp	r3, r2
 8010d12:	bfb8      	it	lt
 8010d14:	4613      	movlt	r3, r2
 8010d16:	6033      	str	r3, [r6, #0]
 8010d18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010d1c:	4607      	mov	r7, r0
 8010d1e:	460c      	mov	r4, r1
 8010d20:	b10a      	cbz	r2, 8010d26 <_printf_common+0x26>
 8010d22:	3301      	adds	r3, #1
 8010d24:	6033      	str	r3, [r6, #0]
 8010d26:	6823      	ldr	r3, [r4, #0]
 8010d28:	0699      	lsls	r1, r3, #26
 8010d2a:	bf42      	ittt	mi
 8010d2c:	6833      	ldrmi	r3, [r6, #0]
 8010d2e:	3302      	addmi	r3, #2
 8010d30:	6033      	strmi	r3, [r6, #0]
 8010d32:	6825      	ldr	r5, [r4, #0]
 8010d34:	f015 0506 	ands.w	r5, r5, #6
 8010d38:	d106      	bne.n	8010d48 <_printf_common+0x48>
 8010d3a:	f104 0a19 	add.w	sl, r4, #25
 8010d3e:	68e3      	ldr	r3, [r4, #12]
 8010d40:	6832      	ldr	r2, [r6, #0]
 8010d42:	1a9b      	subs	r3, r3, r2
 8010d44:	42ab      	cmp	r3, r5
 8010d46:	dc26      	bgt.n	8010d96 <_printf_common+0x96>
 8010d48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010d4c:	1e13      	subs	r3, r2, #0
 8010d4e:	6822      	ldr	r2, [r4, #0]
 8010d50:	bf18      	it	ne
 8010d52:	2301      	movne	r3, #1
 8010d54:	0692      	lsls	r2, r2, #26
 8010d56:	d42b      	bmi.n	8010db0 <_printf_common+0xb0>
 8010d58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010d5c:	4649      	mov	r1, r9
 8010d5e:	4638      	mov	r0, r7
 8010d60:	47c0      	blx	r8
 8010d62:	3001      	adds	r0, #1
 8010d64:	d01e      	beq.n	8010da4 <_printf_common+0xa4>
 8010d66:	6823      	ldr	r3, [r4, #0]
 8010d68:	68e5      	ldr	r5, [r4, #12]
 8010d6a:	6832      	ldr	r2, [r6, #0]
 8010d6c:	f003 0306 	and.w	r3, r3, #6
 8010d70:	2b04      	cmp	r3, #4
 8010d72:	bf08      	it	eq
 8010d74:	1aad      	subeq	r5, r5, r2
 8010d76:	68a3      	ldr	r3, [r4, #8]
 8010d78:	6922      	ldr	r2, [r4, #16]
 8010d7a:	bf0c      	ite	eq
 8010d7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010d80:	2500      	movne	r5, #0
 8010d82:	4293      	cmp	r3, r2
 8010d84:	bfc4      	itt	gt
 8010d86:	1a9b      	subgt	r3, r3, r2
 8010d88:	18ed      	addgt	r5, r5, r3
 8010d8a:	2600      	movs	r6, #0
 8010d8c:	341a      	adds	r4, #26
 8010d8e:	42b5      	cmp	r5, r6
 8010d90:	d11a      	bne.n	8010dc8 <_printf_common+0xc8>
 8010d92:	2000      	movs	r0, #0
 8010d94:	e008      	b.n	8010da8 <_printf_common+0xa8>
 8010d96:	2301      	movs	r3, #1
 8010d98:	4652      	mov	r2, sl
 8010d9a:	4649      	mov	r1, r9
 8010d9c:	4638      	mov	r0, r7
 8010d9e:	47c0      	blx	r8
 8010da0:	3001      	adds	r0, #1
 8010da2:	d103      	bne.n	8010dac <_printf_common+0xac>
 8010da4:	f04f 30ff 	mov.w	r0, #4294967295
 8010da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dac:	3501      	adds	r5, #1
 8010dae:	e7c6      	b.n	8010d3e <_printf_common+0x3e>
 8010db0:	18e1      	adds	r1, r4, r3
 8010db2:	1c5a      	adds	r2, r3, #1
 8010db4:	2030      	movs	r0, #48	; 0x30
 8010db6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010dba:	4422      	add	r2, r4
 8010dbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010dc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010dc4:	3302      	adds	r3, #2
 8010dc6:	e7c7      	b.n	8010d58 <_printf_common+0x58>
 8010dc8:	2301      	movs	r3, #1
 8010dca:	4622      	mov	r2, r4
 8010dcc:	4649      	mov	r1, r9
 8010dce:	4638      	mov	r0, r7
 8010dd0:	47c0      	blx	r8
 8010dd2:	3001      	adds	r0, #1
 8010dd4:	d0e6      	beq.n	8010da4 <_printf_common+0xa4>
 8010dd6:	3601      	adds	r6, #1
 8010dd8:	e7d9      	b.n	8010d8e <_printf_common+0x8e>
	...

08010ddc <_printf_i>:
 8010ddc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010de0:	7e0f      	ldrb	r7, [r1, #24]
 8010de2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010de4:	2f78      	cmp	r7, #120	; 0x78
 8010de6:	4691      	mov	r9, r2
 8010de8:	4680      	mov	r8, r0
 8010dea:	460c      	mov	r4, r1
 8010dec:	469a      	mov	sl, r3
 8010dee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010df2:	d807      	bhi.n	8010e04 <_printf_i+0x28>
 8010df4:	2f62      	cmp	r7, #98	; 0x62
 8010df6:	d80a      	bhi.n	8010e0e <_printf_i+0x32>
 8010df8:	2f00      	cmp	r7, #0
 8010dfa:	f000 80d8 	beq.w	8010fae <_printf_i+0x1d2>
 8010dfe:	2f58      	cmp	r7, #88	; 0x58
 8010e00:	f000 80a3 	beq.w	8010f4a <_printf_i+0x16e>
 8010e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010e0c:	e03a      	b.n	8010e84 <_printf_i+0xa8>
 8010e0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010e12:	2b15      	cmp	r3, #21
 8010e14:	d8f6      	bhi.n	8010e04 <_printf_i+0x28>
 8010e16:	a101      	add	r1, pc, #4	; (adr r1, 8010e1c <_printf_i+0x40>)
 8010e18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010e1c:	08010e75 	.word	0x08010e75
 8010e20:	08010e89 	.word	0x08010e89
 8010e24:	08010e05 	.word	0x08010e05
 8010e28:	08010e05 	.word	0x08010e05
 8010e2c:	08010e05 	.word	0x08010e05
 8010e30:	08010e05 	.word	0x08010e05
 8010e34:	08010e89 	.word	0x08010e89
 8010e38:	08010e05 	.word	0x08010e05
 8010e3c:	08010e05 	.word	0x08010e05
 8010e40:	08010e05 	.word	0x08010e05
 8010e44:	08010e05 	.word	0x08010e05
 8010e48:	08010f95 	.word	0x08010f95
 8010e4c:	08010eb9 	.word	0x08010eb9
 8010e50:	08010f77 	.word	0x08010f77
 8010e54:	08010e05 	.word	0x08010e05
 8010e58:	08010e05 	.word	0x08010e05
 8010e5c:	08010fb7 	.word	0x08010fb7
 8010e60:	08010e05 	.word	0x08010e05
 8010e64:	08010eb9 	.word	0x08010eb9
 8010e68:	08010e05 	.word	0x08010e05
 8010e6c:	08010e05 	.word	0x08010e05
 8010e70:	08010f7f 	.word	0x08010f7f
 8010e74:	682b      	ldr	r3, [r5, #0]
 8010e76:	1d1a      	adds	r2, r3, #4
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	602a      	str	r2, [r5, #0]
 8010e7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010e80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010e84:	2301      	movs	r3, #1
 8010e86:	e0a3      	b.n	8010fd0 <_printf_i+0x1f4>
 8010e88:	6820      	ldr	r0, [r4, #0]
 8010e8a:	6829      	ldr	r1, [r5, #0]
 8010e8c:	0606      	lsls	r6, r0, #24
 8010e8e:	f101 0304 	add.w	r3, r1, #4
 8010e92:	d50a      	bpl.n	8010eaa <_printf_i+0xce>
 8010e94:	680e      	ldr	r6, [r1, #0]
 8010e96:	602b      	str	r3, [r5, #0]
 8010e98:	2e00      	cmp	r6, #0
 8010e9a:	da03      	bge.n	8010ea4 <_printf_i+0xc8>
 8010e9c:	232d      	movs	r3, #45	; 0x2d
 8010e9e:	4276      	negs	r6, r6
 8010ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ea4:	485e      	ldr	r0, [pc, #376]	; (8011020 <_printf_i+0x244>)
 8010ea6:	230a      	movs	r3, #10
 8010ea8:	e019      	b.n	8010ede <_printf_i+0x102>
 8010eaa:	680e      	ldr	r6, [r1, #0]
 8010eac:	602b      	str	r3, [r5, #0]
 8010eae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010eb2:	bf18      	it	ne
 8010eb4:	b236      	sxthne	r6, r6
 8010eb6:	e7ef      	b.n	8010e98 <_printf_i+0xbc>
 8010eb8:	682b      	ldr	r3, [r5, #0]
 8010eba:	6820      	ldr	r0, [r4, #0]
 8010ebc:	1d19      	adds	r1, r3, #4
 8010ebe:	6029      	str	r1, [r5, #0]
 8010ec0:	0601      	lsls	r1, r0, #24
 8010ec2:	d501      	bpl.n	8010ec8 <_printf_i+0xec>
 8010ec4:	681e      	ldr	r6, [r3, #0]
 8010ec6:	e002      	b.n	8010ece <_printf_i+0xf2>
 8010ec8:	0646      	lsls	r6, r0, #25
 8010eca:	d5fb      	bpl.n	8010ec4 <_printf_i+0xe8>
 8010ecc:	881e      	ldrh	r6, [r3, #0]
 8010ece:	4854      	ldr	r0, [pc, #336]	; (8011020 <_printf_i+0x244>)
 8010ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8010ed2:	bf0c      	ite	eq
 8010ed4:	2308      	moveq	r3, #8
 8010ed6:	230a      	movne	r3, #10
 8010ed8:	2100      	movs	r1, #0
 8010eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ede:	6865      	ldr	r5, [r4, #4]
 8010ee0:	60a5      	str	r5, [r4, #8]
 8010ee2:	2d00      	cmp	r5, #0
 8010ee4:	bfa2      	ittt	ge
 8010ee6:	6821      	ldrge	r1, [r4, #0]
 8010ee8:	f021 0104 	bicge.w	r1, r1, #4
 8010eec:	6021      	strge	r1, [r4, #0]
 8010eee:	b90e      	cbnz	r6, 8010ef4 <_printf_i+0x118>
 8010ef0:	2d00      	cmp	r5, #0
 8010ef2:	d04d      	beq.n	8010f90 <_printf_i+0x1b4>
 8010ef4:	4615      	mov	r5, r2
 8010ef6:	fbb6 f1f3 	udiv	r1, r6, r3
 8010efa:	fb03 6711 	mls	r7, r3, r1, r6
 8010efe:	5dc7      	ldrb	r7, [r0, r7]
 8010f00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010f04:	4637      	mov	r7, r6
 8010f06:	42bb      	cmp	r3, r7
 8010f08:	460e      	mov	r6, r1
 8010f0a:	d9f4      	bls.n	8010ef6 <_printf_i+0x11a>
 8010f0c:	2b08      	cmp	r3, #8
 8010f0e:	d10b      	bne.n	8010f28 <_printf_i+0x14c>
 8010f10:	6823      	ldr	r3, [r4, #0]
 8010f12:	07de      	lsls	r6, r3, #31
 8010f14:	d508      	bpl.n	8010f28 <_printf_i+0x14c>
 8010f16:	6923      	ldr	r3, [r4, #16]
 8010f18:	6861      	ldr	r1, [r4, #4]
 8010f1a:	4299      	cmp	r1, r3
 8010f1c:	bfde      	ittt	le
 8010f1e:	2330      	movle	r3, #48	; 0x30
 8010f20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010f24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010f28:	1b52      	subs	r2, r2, r5
 8010f2a:	6122      	str	r2, [r4, #16]
 8010f2c:	f8cd a000 	str.w	sl, [sp]
 8010f30:	464b      	mov	r3, r9
 8010f32:	aa03      	add	r2, sp, #12
 8010f34:	4621      	mov	r1, r4
 8010f36:	4640      	mov	r0, r8
 8010f38:	f7ff fee2 	bl	8010d00 <_printf_common>
 8010f3c:	3001      	adds	r0, #1
 8010f3e:	d14c      	bne.n	8010fda <_printf_i+0x1fe>
 8010f40:	f04f 30ff 	mov.w	r0, #4294967295
 8010f44:	b004      	add	sp, #16
 8010f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f4a:	4835      	ldr	r0, [pc, #212]	; (8011020 <_printf_i+0x244>)
 8010f4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010f50:	6829      	ldr	r1, [r5, #0]
 8010f52:	6823      	ldr	r3, [r4, #0]
 8010f54:	f851 6b04 	ldr.w	r6, [r1], #4
 8010f58:	6029      	str	r1, [r5, #0]
 8010f5a:	061d      	lsls	r5, r3, #24
 8010f5c:	d514      	bpl.n	8010f88 <_printf_i+0x1ac>
 8010f5e:	07df      	lsls	r7, r3, #31
 8010f60:	bf44      	itt	mi
 8010f62:	f043 0320 	orrmi.w	r3, r3, #32
 8010f66:	6023      	strmi	r3, [r4, #0]
 8010f68:	b91e      	cbnz	r6, 8010f72 <_printf_i+0x196>
 8010f6a:	6823      	ldr	r3, [r4, #0]
 8010f6c:	f023 0320 	bic.w	r3, r3, #32
 8010f70:	6023      	str	r3, [r4, #0]
 8010f72:	2310      	movs	r3, #16
 8010f74:	e7b0      	b.n	8010ed8 <_printf_i+0xfc>
 8010f76:	6823      	ldr	r3, [r4, #0]
 8010f78:	f043 0320 	orr.w	r3, r3, #32
 8010f7c:	6023      	str	r3, [r4, #0]
 8010f7e:	2378      	movs	r3, #120	; 0x78
 8010f80:	4828      	ldr	r0, [pc, #160]	; (8011024 <_printf_i+0x248>)
 8010f82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010f86:	e7e3      	b.n	8010f50 <_printf_i+0x174>
 8010f88:	0659      	lsls	r1, r3, #25
 8010f8a:	bf48      	it	mi
 8010f8c:	b2b6      	uxthmi	r6, r6
 8010f8e:	e7e6      	b.n	8010f5e <_printf_i+0x182>
 8010f90:	4615      	mov	r5, r2
 8010f92:	e7bb      	b.n	8010f0c <_printf_i+0x130>
 8010f94:	682b      	ldr	r3, [r5, #0]
 8010f96:	6826      	ldr	r6, [r4, #0]
 8010f98:	6961      	ldr	r1, [r4, #20]
 8010f9a:	1d18      	adds	r0, r3, #4
 8010f9c:	6028      	str	r0, [r5, #0]
 8010f9e:	0635      	lsls	r5, r6, #24
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	d501      	bpl.n	8010fa8 <_printf_i+0x1cc>
 8010fa4:	6019      	str	r1, [r3, #0]
 8010fa6:	e002      	b.n	8010fae <_printf_i+0x1d2>
 8010fa8:	0670      	lsls	r0, r6, #25
 8010faa:	d5fb      	bpl.n	8010fa4 <_printf_i+0x1c8>
 8010fac:	8019      	strh	r1, [r3, #0]
 8010fae:	2300      	movs	r3, #0
 8010fb0:	6123      	str	r3, [r4, #16]
 8010fb2:	4615      	mov	r5, r2
 8010fb4:	e7ba      	b.n	8010f2c <_printf_i+0x150>
 8010fb6:	682b      	ldr	r3, [r5, #0]
 8010fb8:	1d1a      	adds	r2, r3, #4
 8010fba:	602a      	str	r2, [r5, #0]
 8010fbc:	681d      	ldr	r5, [r3, #0]
 8010fbe:	6862      	ldr	r2, [r4, #4]
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	4628      	mov	r0, r5
 8010fc4:	f7ef f98c 	bl	80002e0 <memchr>
 8010fc8:	b108      	cbz	r0, 8010fce <_printf_i+0x1f2>
 8010fca:	1b40      	subs	r0, r0, r5
 8010fcc:	6060      	str	r0, [r4, #4]
 8010fce:	6863      	ldr	r3, [r4, #4]
 8010fd0:	6123      	str	r3, [r4, #16]
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010fd8:	e7a8      	b.n	8010f2c <_printf_i+0x150>
 8010fda:	6923      	ldr	r3, [r4, #16]
 8010fdc:	462a      	mov	r2, r5
 8010fde:	4649      	mov	r1, r9
 8010fe0:	4640      	mov	r0, r8
 8010fe2:	47d0      	blx	sl
 8010fe4:	3001      	adds	r0, #1
 8010fe6:	d0ab      	beq.n	8010f40 <_printf_i+0x164>
 8010fe8:	6823      	ldr	r3, [r4, #0]
 8010fea:	079b      	lsls	r3, r3, #30
 8010fec:	d413      	bmi.n	8011016 <_printf_i+0x23a>
 8010fee:	68e0      	ldr	r0, [r4, #12]
 8010ff0:	9b03      	ldr	r3, [sp, #12]
 8010ff2:	4298      	cmp	r0, r3
 8010ff4:	bfb8      	it	lt
 8010ff6:	4618      	movlt	r0, r3
 8010ff8:	e7a4      	b.n	8010f44 <_printf_i+0x168>
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	4632      	mov	r2, r6
 8010ffe:	4649      	mov	r1, r9
 8011000:	4640      	mov	r0, r8
 8011002:	47d0      	blx	sl
 8011004:	3001      	adds	r0, #1
 8011006:	d09b      	beq.n	8010f40 <_printf_i+0x164>
 8011008:	3501      	adds	r5, #1
 801100a:	68e3      	ldr	r3, [r4, #12]
 801100c:	9903      	ldr	r1, [sp, #12]
 801100e:	1a5b      	subs	r3, r3, r1
 8011010:	42ab      	cmp	r3, r5
 8011012:	dcf2      	bgt.n	8010ffa <_printf_i+0x21e>
 8011014:	e7eb      	b.n	8010fee <_printf_i+0x212>
 8011016:	2500      	movs	r5, #0
 8011018:	f104 0619 	add.w	r6, r4, #25
 801101c:	e7f5      	b.n	801100a <_printf_i+0x22e>
 801101e:	bf00      	nop
 8011020:	08012b1d 	.word	0x08012b1d
 8011024:	08012b2e 	.word	0x08012b2e

08011028 <__retarget_lock_acquire_recursive>:
 8011028:	4770      	bx	lr

0801102a <__retarget_lock_release_recursive>:
 801102a:	4770      	bx	lr

0801102c <memcpy>:
 801102c:	440a      	add	r2, r1
 801102e:	4291      	cmp	r1, r2
 8011030:	f100 33ff 	add.w	r3, r0, #4294967295
 8011034:	d100      	bne.n	8011038 <memcpy+0xc>
 8011036:	4770      	bx	lr
 8011038:	b510      	push	{r4, lr}
 801103a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801103e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011042:	4291      	cmp	r1, r2
 8011044:	d1f9      	bne.n	801103a <memcpy+0xe>
 8011046:	bd10      	pop	{r4, pc}

08011048 <memmove>:
 8011048:	4288      	cmp	r0, r1
 801104a:	b510      	push	{r4, lr}
 801104c:	eb01 0402 	add.w	r4, r1, r2
 8011050:	d902      	bls.n	8011058 <memmove+0x10>
 8011052:	4284      	cmp	r4, r0
 8011054:	4623      	mov	r3, r4
 8011056:	d807      	bhi.n	8011068 <memmove+0x20>
 8011058:	1e43      	subs	r3, r0, #1
 801105a:	42a1      	cmp	r1, r4
 801105c:	d008      	beq.n	8011070 <memmove+0x28>
 801105e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011062:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011066:	e7f8      	b.n	801105a <memmove+0x12>
 8011068:	4402      	add	r2, r0
 801106a:	4601      	mov	r1, r0
 801106c:	428a      	cmp	r2, r1
 801106e:	d100      	bne.n	8011072 <memmove+0x2a>
 8011070:	bd10      	pop	{r4, pc}
 8011072:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011076:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801107a:	e7f7      	b.n	801106c <memmove+0x24>

0801107c <_realloc_r>:
 801107c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011080:	4680      	mov	r8, r0
 8011082:	4614      	mov	r4, r2
 8011084:	460e      	mov	r6, r1
 8011086:	b921      	cbnz	r1, 8011092 <_realloc_r+0x16>
 8011088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801108c:	4611      	mov	r1, r2
 801108e:	f7ff bc2b 	b.w	80108e8 <_malloc_r>
 8011092:	b92a      	cbnz	r2, 80110a0 <_realloc_r+0x24>
 8011094:	f7ff fbbc 	bl	8010810 <_free_r>
 8011098:	4625      	mov	r5, r4
 801109a:	4628      	mov	r0, r5
 801109c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110a0:	f000 f81b 	bl	80110da <_malloc_usable_size_r>
 80110a4:	4284      	cmp	r4, r0
 80110a6:	4607      	mov	r7, r0
 80110a8:	d802      	bhi.n	80110b0 <_realloc_r+0x34>
 80110aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80110ae:	d812      	bhi.n	80110d6 <_realloc_r+0x5a>
 80110b0:	4621      	mov	r1, r4
 80110b2:	4640      	mov	r0, r8
 80110b4:	f7ff fc18 	bl	80108e8 <_malloc_r>
 80110b8:	4605      	mov	r5, r0
 80110ba:	2800      	cmp	r0, #0
 80110bc:	d0ed      	beq.n	801109a <_realloc_r+0x1e>
 80110be:	42bc      	cmp	r4, r7
 80110c0:	4622      	mov	r2, r4
 80110c2:	4631      	mov	r1, r6
 80110c4:	bf28      	it	cs
 80110c6:	463a      	movcs	r2, r7
 80110c8:	f7ff ffb0 	bl	801102c <memcpy>
 80110cc:	4631      	mov	r1, r6
 80110ce:	4640      	mov	r0, r8
 80110d0:	f7ff fb9e 	bl	8010810 <_free_r>
 80110d4:	e7e1      	b.n	801109a <_realloc_r+0x1e>
 80110d6:	4635      	mov	r5, r6
 80110d8:	e7df      	b.n	801109a <_realloc_r+0x1e>

080110da <_malloc_usable_size_r>:
 80110da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80110de:	1f18      	subs	r0, r3, #4
 80110e0:	2b00      	cmp	r3, #0
 80110e2:	bfbc      	itt	lt
 80110e4:	580b      	ldrlt	r3, [r1, r0]
 80110e6:	18c0      	addlt	r0, r0, r3
 80110e8:	4770      	bx	lr
	...

080110ec <_init>:
 80110ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ee:	bf00      	nop
 80110f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110f2:	bc08      	pop	{r3}
 80110f4:	469e      	mov	lr, r3
 80110f6:	4770      	bx	lr

080110f8 <_fini>:
 80110f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110fa:	bf00      	nop
 80110fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80110fe:	bc08      	pop	{r3}
 8011100:	469e      	mov	lr, r3
 8011102:	4770      	bx	lr
