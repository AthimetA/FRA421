
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f30  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002968  0800a1c8  0800a1c8  0001a1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb30  0800cb30  000200e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb30  0800cb30  0001cb30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb38  0800cb38  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb38  0800cb38  0001cb38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb3c  0800cb3c  0001cb3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  24000000  0800cb40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000028  0800cb68  00020028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000088  0800cbc8  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000828  240000e8  0800cc28  000200e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000910  0800cc28  00020910  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e45d  00000000  00000000  00020116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003263  00000000  00000000  0003e573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013a0  00000000  00000000  000417d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001270  00000000  00000000  00042b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bc47  00000000  00000000  00043de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001aabe  00000000  00000000  0007fa2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018639f  00000000  00000000  0009a4ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0022088c  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005344  00000000  00000000  002208dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000e8 	.word	0x240000e8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a1b0 	.word	0x0800a1b0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000ec 	.word	0x240000ec
 80002d4:	0800a1b0 	.word	0x0800a1b0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <loop>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void loop() {
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af04      	add	r7, sp, #16
	// Check border
	ST7735_FillScreen(ST7735_BLACK);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 ff28 	bl	8001564 <ST7735_FillScreen>

	for(int x = 0; x < ST7735_WIDTH; x++) {
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	e012      	b.n	8000740 <loop+0x38>
		ST7735_DrawPixel(x, 0, ST7735_RED);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	b29b      	uxth	r3, r3
 800071e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fdb3 	bl	8001290 <ST7735_DrawPixel>
		ST7735_DrawPixel(x, ST7735_HEIGHT-1, ST7735_RED);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	b29b      	uxth	r3, r3
 800072e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000732:	217f      	movs	r1, #127	; 0x7f
 8000734:	4618      	mov	r0, r3
 8000736:	f000 fdab 	bl	8001290 <ST7735_DrawPixel>
	for(int x = 0; x < ST7735_WIDTH; x++) {
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	3301      	adds	r3, #1
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	2b7f      	cmp	r3, #127	; 0x7f
 8000744:	dde9      	ble.n	800071a <loop+0x12>
	}

	for(int y = 0; y < ST7735_HEIGHT; y++) {
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
 800074a:	e012      	b.n	8000772 <loop+0x6a>
		ST7735_DrawPixel(0, y, ST7735_RED);
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	b29b      	uxth	r3, r3
 8000750:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000754:	4619      	mov	r1, r3
 8000756:	2000      	movs	r0, #0
 8000758:	f000 fd9a 	bl	8001290 <ST7735_DrawPixel>
		ST7735_DrawPixel(ST7735_WIDTH-1, y, ST7735_RED);
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	b29b      	uxth	r3, r3
 8000760:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000764:	4619      	mov	r1, r3
 8000766:	207f      	movs	r0, #127	; 0x7f
 8000768:	f000 fd92 	bl	8001290 <ST7735_DrawPixel>
	for(int y = 0; y < ST7735_HEIGHT; y++) {
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	603b      	str	r3, [r7, #0]
 8000772:	683b      	ldr	r3, [r7, #0]
 8000774:	2b7f      	cmp	r3, #127	; 0x7f
 8000776:	dde9      	ble.n	800074c <loop+0x44>
	}

	HAL_Delay(3000);
 8000778:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800077c:	f001 fa88 	bl	8001c90 <HAL_Delay>

	// Check fonts
	ST7735_FillScreen(ST7735_BLACK);
 8000780:	2000      	movs	r0, #0
 8000782:	f000 feef 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "Font_7x10, red on black, lorem ipsum dolor sit amet", Font_7x10, ST7735_RED, ST7735_BLACK);
 8000786:	4b71      	ldr	r3, [pc, #452]	; (800094c <loop+0x244>)
 8000788:	2200      	movs	r2, #0
 800078a:	9202      	str	r2, [sp, #8]
 800078c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000790:	9201      	str	r2, [sp, #4]
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	9200      	str	r2, [sp, #0]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a6d      	ldr	r2, [pc, #436]	; (8000950 <loop+0x248>)
 800079a:	2100      	movs	r1, #0
 800079c:	2000      	movs	r0, #0
 800079e:	f000 fe22 	bl	80013e6 <ST7735_WriteString>
	ST7735_WriteString(0, 3*10, "Font_11x18, green, lorem ipsum", Font_11x18, ST7735_GREEN, ST7735_BLACK);
 80007a2:	4b6c      	ldr	r3, [pc, #432]	; (8000954 <loop+0x24c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	9202      	str	r2, [sp, #8]
 80007a8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80007ac:	9201      	str	r2, [sp, #4]
 80007ae:	685a      	ldr	r2, [r3, #4]
 80007b0:	9200      	str	r2, [sp, #0]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a68      	ldr	r2, [pc, #416]	; (8000958 <loop+0x250>)
 80007b6:	211e      	movs	r1, #30
 80007b8:	2000      	movs	r0, #0
 80007ba:	f000 fe14 	bl	80013e6 <ST7735_WriteString>
	ST7735_WriteString(0, 3*10+3*18, "Font_16x26", Font_16x26, ST7735_BLUE, ST7735_BLACK);
 80007be:	4b67      	ldr	r3, [pc, #412]	; (800095c <loop+0x254>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	9202      	str	r2, [sp, #8]
 80007c4:	221f      	movs	r2, #31
 80007c6:	9201      	str	r2, [sp, #4]
 80007c8:	685a      	ldr	r2, [r3, #4]
 80007ca:	9200      	str	r2, [sp, #0]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a64      	ldr	r2, [pc, #400]	; (8000960 <loop+0x258>)
 80007d0:	2154      	movs	r1, #84	; 0x54
 80007d2:	2000      	movs	r0, #0
 80007d4:	f000 fe07 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(2000);
 80007d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007dc:	f001 fa58 	bl	8001c90 <HAL_Delay>

	// Check colors
	ST7735_FillScreen(ST7735_BLACK);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 febf 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "BLACK", Font_11x18, ST7735_WHITE, ST7735_BLACK);
 80007e6:	4b5b      	ldr	r3, [pc, #364]	; (8000954 <loop+0x24c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	9202      	str	r2, [sp, #8]
 80007ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007f0:	9201      	str	r2, [sp, #4]
 80007f2:	685a      	ldr	r2, [r3, #4]
 80007f4:	9200      	str	r2, [sp, #0]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a5a      	ldr	r2, [pc, #360]	; (8000964 <loop+0x25c>)
 80007fa:	2100      	movs	r1, #0
 80007fc:	2000      	movs	r0, #0
 80007fe:	f000 fdf2 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(500);
 8000802:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000806:	f001 fa43 	bl	8001c90 <HAL_Delay>

	ST7735_FillScreen(ST7735_BLUE);
 800080a:	201f      	movs	r0, #31
 800080c:	f000 feaa 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "BLUE", Font_11x18, ST7735_BLACK, ST7735_BLUE);
 8000810:	4b50      	ldr	r3, [pc, #320]	; (8000954 <loop+0x24c>)
 8000812:	221f      	movs	r2, #31
 8000814:	9202      	str	r2, [sp, #8]
 8000816:	2200      	movs	r2, #0
 8000818:	9201      	str	r2, [sp, #4]
 800081a:	685a      	ldr	r2, [r3, #4]
 800081c:	9200      	str	r2, [sp, #0]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a51      	ldr	r2, [pc, #324]	; (8000968 <loop+0x260>)
 8000822:	2100      	movs	r1, #0
 8000824:	2000      	movs	r0, #0
 8000826:	f000 fdde 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(500);
 800082a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800082e:	f001 fa2f 	bl	8001c90 <HAL_Delay>

	ST7735_FillScreen(ST7735_RED);
 8000832:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000836:	f000 fe95 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "RED", Font_11x18, ST7735_BLACK, ST7735_RED);
 800083a:	4b46      	ldr	r3, [pc, #280]	; (8000954 <loop+0x24c>)
 800083c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8000840:	9202      	str	r2, [sp, #8]
 8000842:	2200      	movs	r2, #0
 8000844:	9201      	str	r2, [sp, #4]
 8000846:	685a      	ldr	r2, [r3, #4]
 8000848:	9200      	str	r2, [sp, #0]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a47      	ldr	r2, [pc, #284]	; (800096c <loop+0x264>)
 800084e:	2100      	movs	r1, #0
 8000850:	2000      	movs	r0, #0
 8000852:	f000 fdc8 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(500);
 8000856:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085a:	f001 fa19 	bl	8001c90 <HAL_Delay>

	ST7735_FillScreen(ST7735_GREEN);
 800085e:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8000862:	f000 fe7f 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "GREEN", Font_11x18, ST7735_BLACK, ST7735_GREEN);
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <loop+0x24c>)
 8000868:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800086c:	9202      	str	r2, [sp, #8]
 800086e:	2200      	movs	r2, #0
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	9200      	str	r2, [sp, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a3d      	ldr	r2, [pc, #244]	; (8000970 <loop+0x268>)
 800087a:	2100      	movs	r1, #0
 800087c:	2000      	movs	r0, #0
 800087e:	f000 fdb2 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(500);
 8000882:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000886:	f001 fa03 	bl	8001c90 <HAL_Delay>

	ST7735_FillScreen(ST7735_CYAN);
 800088a:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800088e:	f000 fe69 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "CYAN", Font_11x18, ST7735_BLACK, ST7735_CYAN);
 8000892:	4b30      	ldr	r3, [pc, #192]	; (8000954 <loop+0x24c>)
 8000894:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000898:	9202      	str	r2, [sp, #8]
 800089a:	2200      	movs	r2, #0
 800089c:	9201      	str	r2, [sp, #4]
 800089e:	685a      	ldr	r2, [r3, #4]
 80008a0:	9200      	str	r2, [sp, #0]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a33      	ldr	r2, [pc, #204]	; (8000974 <loop+0x26c>)
 80008a6:	2100      	movs	r1, #0
 80008a8:	2000      	movs	r0, #0
 80008aa:	f000 fd9c 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(500);
 80008ae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008b2:	f001 f9ed 	bl	8001c90 <HAL_Delay>

	ST7735_FillScreen(ST7735_MAGENTA);
 80008b6:	f64f 001f 	movw	r0, #63519	; 0xf81f
 80008ba:	f000 fe53 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "MAGENTA", Font_11x18, ST7735_BLACK, ST7735_MAGENTA);
 80008be:	4b25      	ldr	r3, [pc, #148]	; (8000954 <loop+0x24c>)
 80008c0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80008c4:	9202      	str	r2, [sp, #8]
 80008c6:	2200      	movs	r2, #0
 80008c8:	9201      	str	r2, [sp, #4]
 80008ca:	685a      	ldr	r2, [r3, #4]
 80008cc:	9200      	str	r2, [sp, #0]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a29      	ldr	r2, [pc, #164]	; (8000978 <loop+0x270>)
 80008d2:	2100      	movs	r1, #0
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 fd86 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(500);
 80008da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008de:	f001 f9d7 	bl	8001c90 <HAL_Delay>

	ST7735_FillScreen(ST7735_YELLOW);
 80008e2:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80008e6:	f000 fe3d 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "YELLOW", Font_11x18, ST7735_BLACK, ST7735_YELLOW);
 80008ea:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <loop+0x24c>)
 80008ec:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80008f0:	9202      	str	r2, [sp, #8]
 80008f2:	2200      	movs	r2, #0
 80008f4:	9201      	str	r2, [sp, #4]
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	9200      	str	r2, [sp, #0]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a1f      	ldr	r2, [pc, #124]	; (800097c <loop+0x274>)
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f000 fd70 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(500);
 8000906:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800090a:	f001 f9c1 	bl	8001c90 <HAL_Delay>

	ST7735_FillScreen(ST7735_WHITE);
 800090e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000912:	f000 fe27 	bl	8001564 <ST7735_FillScreen>
	ST7735_WriteString(0, 0, "WHITE", Font_11x18, ST7735_BLACK, ST7735_WHITE);
 8000916:	4b0f      	ldr	r3, [pc, #60]	; (8000954 <loop+0x24c>)
 8000918:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800091c:	9202      	str	r2, [sp, #8]
 800091e:	2200      	movs	r2, #0
 8000920:	9201      	str	r2, [sp, #4]
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	9200      	str	r2, [sp, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a15      	ldr	r2, [pc, #84]	; (8000980 <loop+0x278>)
 800092a:	2100      	movs	r1, #0
 800092c:	2000      	movs	r0, #0
 800092e:	f000 fd5a 	bl	80013e6 <ST7735_WriteString>
	HAL_Delay(500);
 8000932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000936:	f001 f9ab 	bl	8001c90 <HAL_Delay>
            color565 = ((color565 & 0xFF00) >> 8) | ((color565 & 0xFF) << 8);
            ST7735_DrawPixel(x, y, color565);
        }
    }
	 */
	HAL_Delay(15000);
 800093a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800093e:	f001 f9a7 	bl	8001c90 <HAL_Delay>


}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	24000008 	.word	0x24000008
 8000950:	0800a1c8 	.word	0x0800a1c8
 8000954:	24000010 	.word	0x24000010
 8000958:	0800a1fc 	.word	0x0800a1fc
 800095c:	24000018 	.word	0x24000018
 8000960:	0800a21c 	.word	0x0800a21c
 8000964:	0800a228 	.word	0x0800a228
 8000968:	0800a230 	.word	0x0800a230
 800096c:	0800a238 	.word	0x0800a238
 8000970:	0800a23c 	.word	0x0800a23c
 8000974:	0800a244 	.word	0x0800a244
 8000978:	0800a24c 	.word	0x0800a24c
 800097c:	0800a254 	.word	0x0800a254
 8000980:	0800a25c 	.word	0x0800a25c

08000984 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800098a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800098e:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000990:	bf00      	nop
 8000992:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <main+0xdc>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d004      	beq.n	80009a8 <main+0x24>
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	1e5a      	subs	r2, r3, #1
 80009a2:	607a      	str	r2, [r7, #4]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dcf4      	bgt.n	8000992 <main+0xe>
	if ( timeout < 0 )
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	da01      	bge.n	80009b2 <main+0x2e>
	{
		Error_Handler();
 80009ae:	f000 fb49 	bl	8001044 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009b2:	f001 f8db 	bl	8001b6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009b6:	f000 f859 	bl	8000a6c <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80009ba:	f000 f8db 	bl	8000b74 <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80009be:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <main+0xdc>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a26      	ldr	r2, [pc, #152]	; (8000a60 <main+0xdc>)
 80009c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b24      	ldr	r3, [pc, #144]	; (8000a60 <main+0xdc>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80009dc:	2000      	movs	r0, #0
 80009de:	f004 fad9 	bl	8004f94 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80009e2:	2100      	movs	r1, #0
 80009e4:	2000      	movs	r0, #0
 80009e6:	f004 faef 	bl	8004fc8 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80009ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ee:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80009f0:	bf00      	nop
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <main+0xdc>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d104      	bne.n	8000a08 <main+0x84>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	1e5a      	subs	r2, r3, #1
 8000a02:	607a      	str	r2, [r7, #4]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	dcf4      	bgt.n	80009f2 <main+0x6e>
	if ( timeout < 0 )
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	da01      	bge.n	8000a12 <main+0x8e>
	{
		Error_Handler();
 8000a0e:	f000 fb19 	bl	8001044 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a12:	f000 fa2d 	bl	8000e70 <MX_GPIO_Init>
	MX_ETH_Init();
 8000a16:	f000 f8df 	bl	8000bd8 <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000a1a:	f000 f981 	bl	8000d20 <MX_USART3_UART_Init>
	MX_DMA_Init();
 8000a1e:	f000 f9ff 	bl	8000e20 <MX_DMA_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000a22:	f000 f9cb 	bl	8000dbc <MX_USB_OTG_FS_PCD_Init>
	MX_SPI3_Init();
 8000a26:	f000 f923 	bl	8000c70 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	//HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
	//HAL_Delay(5);
	//HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
	ST7735_Init();
 8000a2a:	f000 fc13 	bl	8001254 <ST7735_Init>
	ST7735_FillScreen(ST7735_BLACK);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f000 fd98 	bl	8001564 <ST7735_FillScreen>
	/* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 1000)
 8000a34:	f001 f920 	bl	8001c78 <HAL_GetTick>
 8000a38:	4602      	mov	r2, r0
 8000a3a:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <main+0xe0>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	1ad3      	subs	r3, r2, r3
 8000a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a44:	d909      	bls.n	8000a5a <main+0xd6>
		{
			timemsM7_LED = HAL_GetTick();
 8000a46:	f001 f917 	bl	8001c78 <HAL_GetTick>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	4a05      	ldr	r2, [pc, #20]	; (8000a64 <main+0xe0>)
 8000a4e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <main+0xe4>)
 8000a56:	f004 fa82 	bl	8004f5e <HAL_GPIO_TogglePin>


		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		loop();
 8000a5a:	f7ff fe55 	bl	8000708 <loop>
		if(HAL_GetTick() - timemsM7_LED > 1000)
 8000a5e:	e7e9      	b.n	8000a34 <main+0xb0>
 8000a60:	58024400 	.word	0x58024400
 8000a64:	24000900 	.word	0x24000900
 8000a68:	58020400 	.word	0x58020400

08000a6c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b09c      	sub	sp, #112	; 0x70
 8000a70:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	224c      	movs	r2, #76	; 0x4c
 8000a78:	2100      	movs	r1, #0
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f009 fb90 	bl	800a1a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	2220      	movs	r2, #32
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f009 fb8a 	bl	800a1a0 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a8c:	2004      	movs	r0, #4
 8000a8e:	f004 fbf7 	bl	8005280 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	4b34      	ldr	r3, [pc, #208]	; (8000b68 <SystemClock_Config+0xfc>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a33      	ldr	r2, [pc, #204]	; (8000b68 <SystemClock_Config+0xfc>)
 8000a9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b31      	ldr	r3, [pc, #196]	; (8000b68 <SystemClock_Config+0xfc>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aaa:	603b      	str	r3, [r7, #0]
 8000aac:	4b2f      	ldr	r3, [pc, #188]	; (8000b6c <SystemClock_Config+0x100>)
 8000aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab0:	4a2e      	ldr	r2, [pc, #184]	; (8000b6c <SystemClock_Config+0x100>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	; (8000b6c <SystemClock_Config+0x100>)
 8000aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	603b      	str	r3, [r7, #0]
 8000ac2:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ac4:	bf00      	nop
 8000ac6:	4b28      	ldr	r3, [pc, #160]	; (8000b68 <SystemClock_Config+0xfc>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ace:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ad2:	d1f8      	bne.n	8000ac6 <SystemClock_Config+0x5a>

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ad4:	4b26      	ldr	r3, [pc, #152]	; (8000b70 <SystemClock_Config+0x104>)
 8000ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad8:	f023 0303 	bic.w	r3, r3, #3
 8000adc:	4a24      	ldr	r2, [pc, #144]	; (8000b70 <SystemClock_Config+0x104>)
 8000ade:	f043 0302 	orr.w	r3, r3, #2
 8000ae2:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af2:	2302      	movs	r3, #2
 8000af4:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 8000afa:	2378      	movs	r3, #120	; 0x78
 8000afc:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000b06:	2302      	movs	r3, #2
 8000b08:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b0a:	230c      	movs	r3, #12
 8000b0c:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b12:	2300      	movs	r3, #0
 8000b14:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f004 fc1a 	bl	8005354 <HAL_RCC_OscConfig>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8000b26:	f000 fa8d 	bl	8001044 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2a:	233f      	movs	r3, #63	; 0x3f
 8000b2c:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b36:	2308      	movs	r3, #8
 8000b38:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b3a:	2340      	movs	r3, #64	; 0x40
 8000b3c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b3e:	2340      	movs	r3, #64	; 0x40
 8000b40:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b48:	2340      	movs	r3, #64	; 0x40
 8000b4a:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	2104      	movs	r1, #4
 8000b50:	4618      	mov	r0, r3
 8000b52:	f005 f82d 	bl	8005bb0 <HAL_RCC_ClockConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0xf4>
	{
		Error_Handler();
 8000b5c:	f000 fa72 	bl	8001044 <Error_Handler>
	}
}
 8000b60:	bf00      	nop
 8000b62:	3770      	adds	r7, #112	; 0x70
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	58024800 	.word	0x58024800
 8000b6c:	58000400 	.word	0x58000400
 8000b70:	58024400 	.word	0x58024400

08000b74 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0b0      	sub	sp, #192	; 0xc0
 8000b78:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	22bc      	movs	r2, #188	; 0xbc
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f009 fb0d 	bl	800a1a0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8000b86:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000b8a:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000b90:	2318      	movs	r3, #24
 8000b92:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000b94:	2302      	movs	r3, #2
 8000b96:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b98:	2304      	movs	r3, #4
 8000b9a:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ba0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ba4:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000bae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb2:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000bb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f005 fb82 	bl	80062c8 <HAL_RCCEx_PeriphCLKConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <PeriphCommonClock_Config+0x5a>
	{
		Error_Handler();
 8000bca:	f000 fa3b 	bl	8001044 <Error_Handler>
	}
}
 8000bce:	bf00      	nop
 8000bd0:	37c0      	adds	r7, #192	; 0xc0
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
	...

08000bd8 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000bdc:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <MX_ETH_Init+0x80>)
 8000bde:	4a1f      	ldr	r2, [pc, #124]	; (8000c5c <MX_ETH_Init+0x84>)
 8000be0:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <MX_ETH_Init+0x88>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	; (8000c60 <MX_ETH_Init+0x88>)
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000bee:	4b1c      	ldr	r3, [pc, #112]	; (8000c60 <MX_ETH_Init+0x88>)
 8000bf0:	22e1      	movs	r2, #225	; 0xe1
 8000bf2:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <MX_ETH_Init+0x88>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <MX_ETH_Init+0x88>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_ETH_Init+0x88>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000c06:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <MX_ETH_Init+0x80>)
 8000c08:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_ETH_Init+0x88>)
 8000c0a:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_ETH_Init+0x80>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_ETH_Init+0x80>)
 8000c14:	4a13      	ldr	r2, [pc, #76]	; (8000c64 <MX_ETH_Init+0x8c>)
 8000c16:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_ETH_Init+0x80>)
 8000c1a:	4a13      	ldr	r2, [pc, #76]	; (8000c68 <MX_ETH_Init+0x90>)
 8000c1c:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_ETH_Init+0x80>)
 8000c20:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c24:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c26:	480c      	ldr	r0, [pc, #48]	; (8000c58 <MX_ETH_Init+0x80>)
 8000c28:	f003 fbac 	bl	8004384 <HAL_ETH_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ETH_Init+0x5e>
	{
		Error_Handler();
 8000c32:	f000 fa07 	bl	8001044 <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c36:	2238      	movs	r2, #56	; 0x38
 8000c38:	2100      	movs	r1, #0
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MX_ETH_Init+0x94>)
 8000c3c:	f009 fab0 	bl	800a1a0 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c40:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <MX_ETH_Init+0x94>)
 8000c42:	2221      	movs	r2, #33	; 0x21
 8000c44:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_ETH_Init+0x94>)
 8000c48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c4c:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <MX_ETH_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2400013c 	.word	0x2400013c
 8000c5c:	40028000 	.word	0x40028000
 8000c60:	24000904 	.word	0x24000904
 8000c64:	24000088 	.word	0x24000088
 8000c68:	24000028 	.word	0x24000028
 8000c6c:	24000104 	.word	0x24000104

08000c70 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000c74:	4b28      	ldr	r3, [pc, #160]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000c76:	4a29      	ldr	r2, [pc, #164]	; (8000d1c <MX_SPI3_Init+0xac>)
 8000c78:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000c7c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c80:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000c82:	4b25      	ldr	r3, [pc, #148]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000c84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c88:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c8a:	4b23      	ldr	r3, [pc, #140]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c90:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c96:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8000c9c:	4b1e      	ldr	r3, [pc, #120]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000c9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000ca2:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000ca6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000caa:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cca:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	641a      	str	r2, [r3, #64]	; 0x40
	hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cde:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	645a      	str	r2, [r3, #68]	; 0x44
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cea:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cf6:	4b08      	ldr	r3, [pc, #32]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000cfc:	4b06      	ldr	r3, [pc, #24]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000d02:	4805      	ldr	r0, [pc, #20]	; (8000d18 <MX_SPI3_Init+0xa8>)
 8000d04:	f006 fe48 	bl	8007998 <HAL_SPI_Init>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_SPI3_Init+0xa2>
	{
		Error_Handler();
 8000d0e:	f000 f999 	bl	8001044 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	240001ec 	.word	0x240001ec
 8000d1c:	40003c00 	.word	0x40003c00

08000d20 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000d24:	4b22      	ldr	r3, [pc, #136]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d26:	4a23      	ldr	r2, [pc, #140]	; (8000db4 <MX_USART3_UART_Init+0x94>)
 8000d28:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 384000;
 8000d2a:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d2c:	4a22      	ldr	r2, [pc, #136]	; (8000db8 <MX_USART3_UART_Init+0x98>)
 8000d2e:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d30:	4b1f      	ldr	r3, [pc, #124]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000d36:	4b1e      	ldr	r3, [pc, #120]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000d3c:	4b1c      	ldr	r3, [pc, #112]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000d42:	4b1b      	ldr	r3, [pc, #108]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d44:	220c      	movs	r2, #12
 8000d46:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d48:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d54:	4b16      	ldr	r3, [pc, #88]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d60:	4b13      	ldr	r3, [pc, #76]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d66:	4812      	ldr	r0, [pc, #72]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d68:	f007 f9f7 	bl	800815a <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_USART3_UART_Init+0x56>
	{
		Error_Handler();
 8000d72:	f000 f967 	bl	8001044 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	480d      	ldr	r0, [pc, #52]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d7a:	f008 fe19 	bl	80099b0 <HAL_UARTEx_SetTxFifoThreshold>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_USART3_UART_Init+0x68>
	{
		Error_Handler();
 8000d84:	f000 f95e 	bl	8001044 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4809      	ldr	r0, [pc, #36]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d8c:	f008 fe4e 	bl	8009a2c <HAL_UARTEx_SetRxFifoThreshold>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <MX_USART3_UART_Init+0x7a>
	{
		Error_Handler();
 8000d96:	f000 f955 	bl	8001044 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d9a:	4805      	ldr	r0, [pc, #20]	; (8000db0 <MX_USART3_UART_Init+0x90>)
 8000d9c:	f008 fdcf 	bl	800993e <HAL_UARTEx_DisableFifoMode>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART3_UART_Init+0x8a>
	{
		Error_Handler();
 8000da6:	f000 f94d 	bl	8001044 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	24000274 	.word	0x24000274
 8000db4:	40004800 	.word	0x40004800
 8000db8:	0005dc00 	.word	0x0005dc00

08000dbc <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000dc0:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc2:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000dc4:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dc6:	4b14      	ldr	r3, [pc, #80]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc8:	2209      	movs	r2, #9
 8000dca:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dce:	2202      	movs	r2, #2
 8000dd0:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dd2:	4b11      	ldr	r3, [pc, #68]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dd8:	4b0f      	ldr	r3, [pc, #60]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dde:	4b0e      	ldr	r3, [pc, #56]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000e02:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000e04:	f004 f8f4 	bl	8004ff0 <HAL_PCD_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_USB_OTG_FS_PCD_Init+0x56>
	{
		Error_Handler();
 8000e0e:	f000 f919 	bl	8001044 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	240003f4 	.word	0x240003f4
 8000e1c:	40080000 	.word	0x40080000

08000e20 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <MX_DMA_Init+0x4c>)
 8000e28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <MX_DMA_Init+0x4c>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e36:	4b0d      	ldr	r3, [pc, #52]	; (8000e6c <MX_DMA_Init+0x4c>)
 8000e38:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2100      	movs	r1, #0
 8000e48:	200c      	movs	r0, #12
 8000e4a:	f001 f840 	bl	8001ece <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e4e:	200c      	movs	r0, #12
 8000e50:	f001 f857 	bl	8001f02 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2100      	movs	r1, #0
 8000e58:	200f      	movs	r0, #15
 8000e5a:	f001 f838 	bl	8001ece <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e5e:	200f      	movs	r0, #15
 8000e60:	f001 f84f 	bl	8001f02 <HAL_NVIC_EnableIRQ>

}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	58024400 	.word	0x58024400

08000e70 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	; 0x30
 8000e74:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b6a      	ldr	r3, [pc, #424]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e8c:	4a68      	ldr	r2, [pc, #416]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000e8e:	f043 0304 	orr.w	r3, r3, #4
 8000e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e96:	4b66      	ldr	r3, [pc, #408]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e9c:	f003 0304 	and.w	r3, r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ea4:	4b62      	ldr	r3, [pc, #392]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eaa:	4a61      	ldr	r2, [pc, #388]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eb4:	4b5e      	ldr	r3, [pc, #376]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ebe:	617b      	str	r3, [r7, #20]
 8000ec0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec2:	4b5b      	ldr	r3, [pc, #364]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec8:	4a59      	ldr	r2, [pc, #356]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed2:	4b57      	ldr	r3, [pc, #348]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	613b      	str	r3, [r7, #16]
 8000ede:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee0:	4b53      	ldr	r3, [pc, #332]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee6:	4a52      	ldr	r2, [pc, #328]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000ee8:	f043 0302 	orr.w	r3, r3, #2
 8000eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ef0:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef6:	f003 0302 	and.w	r3, r3, #2
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000efe:	4b4c      	ldr	r3, [pc, #304]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f04:	4a4a      	ldr	r2, [pc, #296]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f06:	f043 0310 	orr.w	r3, r3, #16
 8000f0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f0e:	4b48      	ldr	r3, [pc, #288]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f14:	f003 0310 	and.w	r3, r3, #16
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1c:	4b44      	ldr	r3, [pc, #272]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f22:	4a43      	ldr	r2, [pc, #268]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f24:	f043 0308 	orr.w	r3, r3, #8
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f2c:	4b40      	ldr	r3, [pc, #256]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f32:	f003 0308 	and.w	r3, r3, #8
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f3a:	4b3d      	ldr	r3, [pc, #244]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f40:	4a3b      	ldr	r2, [pc, #236]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f4a:	4b39      	ldr	r3, [pc, #228]	; (8001030 <MX_GPIO_Init+0x1c0>)
 8000f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f54:	603b      	str	r3, [r7, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8000f5e:	4835      	ldr	r0, [pc, #212]	; (8001034 <MX_GPIO_Init+0x1c4>)
 8000f60:	f003 ffe4 	bl	8004f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f6a:	4832      	ldr	r0, [pc, #200]	; (8001034 <MX_GPIO_Init+0x1c4>)
 8000f6c:	f003 ffde 	bl	8004f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f70:	2200      	movs	r2, #0
 8000f72:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f76:	4830      	ldr	r0, [pc, #192]	; (8001038 <MX_GPIO_Init+0x1c8>)
 8000f78:	f003 ffd8 	bl	8004f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f82:	482e      	ldr	r0, [pc, #184]	; (800103c <MX_GPIO_Init+0x1cc>)
 8000f84:	f003 ffd2 	bl	8004f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f8e:	482c      	ldr	r0, [pc, #176]	; (8001040 <MX_GPIO_Init+0x1d0>)
 8000f90:	f003 ffcc 	bl	8004f2c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8000f94:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000f98:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa6:	f107 031c 	add.w	r3, r7, #28
 8000faa:	4619      	mov	r1, r3
 8000fac:	4821      	ldr	r0, [pc, #132]	; (8001034 <MX_GPIO_Init+0x1c4>)
 8000fae:	f003 fe0d 	bl	8004bcc <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 8000fb2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fb6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481b      	ldr	r0, [pc, #108]	; (8001038 <MX_GPIO_Init+0x1c8>)
 8000fcc:	f003 fdfe 	bl	8004bcc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4814      	ldr	r0, [pc, #80]	; (800103c <MX_GPIO_Init+0x1cc>)
 8000fea:	f003 fdef 	bl	8004bcc <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ff6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	480f      	ldr	r0, [pc, #60]	; (8001040 <MX_GPIO_Init+0x1d0>)
 8001004:	f003 fde2 	bl	8004bcc <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin;
 8001008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100e:	2301      	movs	r3, #1
 8001010:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001012:	2300      	movs	r3, #0
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <MX_GPIO_Init+0x1d0>)
 8001022:	f003 fdd3 	bl	8004bcc <HAL_GPIO_Init>

}
 8001026:	bf00      	nop
 8001028:	3730      	adds	r7, #48	; 0x30
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	58024400 	.word	0x58024400
 8001034:	58021000 	.word	0x58021000
 8001038:	58020400 	.word	0x58020400
 800103c:	58020c00 	.word	0x58020c00
 8001040:	58021800 	.word	0x58021800

08001044 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800105a:	4802      	ldr	r0, [pc, #8]	; (8001064 <ST7735_Select+0x14>)
 800105c:	f003 ff66 	bl	8004f2c <HAL_GPIO_WritePin>
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	58021000 	.word	0x58021000

08001068 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800106c:	2201      	movs	r2, #1
 800106e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001072:	4802      	ldr	r0, [pc, #8]	; (800107c <ST7735_Unselect+0x14>)
 8001074:	f003 ff5a 	bl	8004f2c <HAL_GPIO_WritePin>
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	58021000 	.word	0x58021000

08001080 <ST7735_Select1>:
static void ST7735_Select1() {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800108a:	4802      	ldr	r0, [pc, #8]	; (8001094 <ST7735_Select1+0x14>)
 800108c:	f003 ff4e 	bl	8004f2c <HAL_GPIO_WritePin>
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}
 8001094:	58021000 	.word	0x58021000

08001098 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 800109c:	2201      	movs	r2, #1
 800109e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a2:	4802      	ldr	r0, [pc, #8]	; (80010ac <ST7735_Unselect1+0x14>)
 80010a4:	f003 ff42 	bl	8004f2c <HAL_GPIO_WritePin>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	58021000 	.word	0x58021000

080010b0 <ST7735_Reset>:

static void ST7735_Reset() {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80010b4:	2200      	movs	r2, #0
 80010b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <ST7735_Reset+0x28>)
 80010bc:	f003 ff36 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80010c0:	2005      	movs	r0, #5
 80010c2:	f000 fde5 	bl	8001c90 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80010c6:	2201      	movs	r2, #1
 80010c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <ST7735_Reset+0x28>)
 80010ce:	f003 ff2d 	bl	8004f2c <HAL_GPIO_WritePin>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	58021800 	.word	0x58021800

080010dc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010ec:	4806      	ldr	r0, [pc, #24]	; (8001108 <ST7735_WriteCommand+0x2c>)
 80010ee:	f003 ff1d 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80010f2:	1df9      	adds	r1, r7, #7
 80010f4:	f04f 33ff 	mov.w	r3, #4294967295
 80010f8:	2201      	movs	r2, #1
 80010fa:	4804      	ldr	r0, [pc, #16]	; (800110c <ST7735_WriteCommand+0x30>)
 80010fc:	f006 fd52 	bl	8007ba4 <HAL_SPI_Transmit>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	58021000 	.word	0x58021000
 800110c:	240001ec 	.word	0x240001ec

08001110 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001120:	4807      	ldr	r0, [pc, #28]	; (8001140 <ST7735_WriteData+0x30>)
 8001122:	f003 ff03 	bl	8004f2c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	b29a      	uxth	r2, r3
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	6879      	ldr	r1, [r7, #4]
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <ST7735_WriteData+0x34>)
 8001132:	f006 fd37 	bl	8007ba4 <HAL_SPI_Transmit>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	58021000 	.word	0x58021000
 8001144:	240001ec 	.word	0x240001ec

08001148 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	607a      	str	r2, [r7, #4]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800115a:	e034      	b.n	80011c6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	1c5a      	adds	r2, r3, #1
 8001160:	607a      	str	r2, [r7, #4]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001166:	7afb      	ldrb	r3, [r7, #11]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ffb7 	bl	80010dc <ST7735_WriteCommand>

        numArgs = *addr++;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001178:	7abb      	ldrb	r3, [r7, #10]
 800117a:	b29b      	uxth	r3, r3
 800117c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001180:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001182:	7abb      	ldrb	r3, [r7, #10]
 8001184:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001188:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800118a:	7abb      	ldrb	r3, [r7, #10]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d008      	beq.n	80011a2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001190:	7abb      	ldrb	r3, [r7, #10]
 8001192:	4619      	mov	r1, r3
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffbb 	bl	8001110 <ST7735_WriteData>
            addr += numArgs;
 800119a:	7abb      	ldrb	r3, [r7, #10]
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80011a2:	89bb      	ldrh	r3, [r7, #12]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d00e      	beq.n	80011c6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	1c5a      	adds	r2, r3, #1
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80011b2:	89bb      	ldrh	r3, [r7, #12]
 80011b4:	2bff      	cmp	r3, #255	; 0xff
 80011b6:	d102      	bne.n	80011be <ST7735_ExecuteCommandList+0x76>
 80011b8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011bc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80011be:	89bb      	ldrh	r3, [r7, #12]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 fd65 	bl	8001c90 <HAL_Delay>
    while(numCommands--) {
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
 80011c8:	1e5a      	subs	r2, r3, #1
 80011ca:	73fa      	strb	r2, [r7, #15]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1c5      	bne.n	800115c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80011d0:	bf00      	nop
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80011da:	b590      	push	{r4, r7, lr}
 80011dc:	b085      	sub	sp, #20
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4604      	mov	r4, r0
 80011e2:	4608      	mov	r0, r1
 80011e4:	4611      	mov	r1, r2
 80011e6:	461a      	mov	r2, r3
 80011e8:	4623      	mov	r3, r4
 80011ea:	71fb      	strb	r3, [r7, #7]
 80011ec:	4603      	mov	r3, r0
 80011ee:	71bb      	strb	r3, [r7, #6]
 80011f0:	460b      	mov	r3, r1
 80011f2:	717b      	strb	r3, [r7, #5]
 80011f4:	4613      	mov	r3, r2
 80011f6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80011f8:	202a      	movs	r0, #42	; 0x2a
 80011fa:	f7ff ff6f 	bl	80010dc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80011fe:	2300      	movs	r3, #0
 8001200:	733b      	strb	r3, [r7, #12]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	3302      	adds	r3, #2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	737b      	strb	r3, [r7, #13]
 800120a:	2300      	movs	r3, #0
 800120c:	73bb      	strb	r3, [r7, #14]
 800120e:	797b      	ldrb	r3, [r7, #5]
 8001210:	3302      	adds	r3, #2
 8001212:	b2db      	uxtb	r3, r3
 8001214:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2104      	movs	r1, #4
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff77 	bl	8001110 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001222:	202b      	movs	r0, #43	; 0x2b
 8001224:	f7ff ff5a 	bl	80010dc <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	3301      	adds	r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001230:	793b      	ldrb	r3, [r7, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	b2db      	uxtb	r3, r3
 8001236:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001238:	f107 030c 	add.w	r3, r7, #12
 800123c:	2104      	movs	r1, #4
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff66 	bl	8001110 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001244:	202c      	movs	r0, #44	; 0x2c
 8001246:	f7ff ff49 	bl	80010dc <ST7735_WriteCommand>
}
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bd90      	pop	{r4, r7, pc}
	...

08001254 <ST7735_Init>:

void ST7735_Init() {
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001258:	f7ff fefa 	bl	8001050 <ST7735_Select>
    ST7735_Select1();
 800125c:	f7ff ff10 	bl	8001080 <ST7735_Select1>
    ST7735_Reset();
 8001260:	f7ff ff26 	bl	80010b0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001264:	4807      	ldr	r0, [pc, #28]	; (8001284 <ST7735_Init+0x30>)
 8001266:	f7ff ff6f 	bl	8001148 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <ST7735_Init+0x34>)
 800126c:	f7ff ff6c 	bl	8001148 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001270:	4806      	ldr	r0, [pc, #24]	; (800128c <ST7735_Init+0x38>)
 8001272:	f7ff ff69 	bl	8001148 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001276:	f7ff fef7 	bl	8001068 <ST7735_Unselect>
    ST7735_Unselect1();
 800127a:	f7ff ff0d 	bl	8001098 <ST7735_Unselect1>
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	0800ca88 	.word	0x0800ca88
 8001288:	0800cac4 	.word	0x0800cac4
 800128c:	0800cad4 	.word	0x0800cad4

08001290 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
 800129a:	460b      	mov	r3, r1
 800129c:	80bb      	strh	r3, [r7, #4]
 800129e:	4613      	mov	r3, r2
 80012a0:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	2b7f      	cmp	r3, #127	; 0x7f
 80012a6:	d823      	bhi.n	80012f0 <ST7735_DrawPixel+0x60>
 80012a8:	88bb      	ldrh	r3, [r7, #4]
 80012aa:	2b7f      	cmp	r3, #127	; 0x7f
 80012ac:	d820      	bhi.n	80012f0 <ST7735_DrawPixel+0x60>
        return;

    ST7735_Select();
 80012ae:	f7ff fecf 	bl	8001050 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	b2d8      	uxtb	r0, r3
 80012b6:	88bb      	ldrh	r3, [r7, #4]
 80012b8:	b2d9      	uxtb	r1, r3
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	3301      	adds	r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	3301      	adds	r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	f7ff ff86 	bl	80011da <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80012ce:	887b      	ldrh	r3, [r7, #2]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	733b      	strb	r3, [r7, #12]
 80012d8:	887b      	ldrh	r3, [r7, #2]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80012de:	f107 030c 	add.w	r3, r7, #12
 80012e2:	2102      	movs	r1, #2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff13 	bl	8001110 <ST7735_WriteData>

    ST7735_Unselect();
 80012ea:	f7ff febd 	bl	8001068 <ST7735_Unselect>
 80012ee:	e000      	b.n	80012f2 <ST7735_DrawPixel+0x62>
        return;
 80012f0:	bf00      	nop
}
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <ST7735_WriteChar>:

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80012f8:	b082      	sub	sp, #8
 80012fa:	b590      	push	{r4, r7, lr}
 80012fc:	b089      	sub	sp, #36	; 0x24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	637b      	str	r3, [r7, #52]	; 0x34
 8001302:	4603      	mov	r3, r0
 8001304:	80fb      	strh	r3, [r7, #6]
 8001306:	460b      	mov	r3, r1
 8001308:	80bb      	strh	r3, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800130e:	88fb      	ldrh	r3, [r7, #6]
 8001310:	b2d8      	uxtb	r0, r3
 8001312:	88bb      	ldrh	r3, [r7, #4]
 8001314:	b2d9      	uxtb	r1, r3
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	b2da      	uxtb	r2, r3
 800131a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800131e:	4413      	add	r3, r2
 8001320:	b2db      	uxtb	r3, r3
 8001322:	3b01      	subs	r3, #1
 8001324:	b2dc      	uxtb	r4, r3
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800132e:	4413      	add	r3, r2
 8001330:	b2db      	uxtb	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4622      	mov	r2, r4
 8001338:	f7ff ff4f 	bl	80011da <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	e043      	b.n	80013ca <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8001342:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001344:	78fb      	ldrb	r3, [r7, #3]
 8001346:	3b20      	subs	r3, #32
 8001348:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800134c:	fb01 f303 	mul.w	r3, r1, r3
 8001350:	4619      	mov	r1, r3
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	440b      	add	r3, r1
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	4413      	add	r3, r2
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800135e:	2300      	movs	r3, #0
 8001360:	61bb      	str	r3, [r7, #24]
 8001362:	e029      	b.n	80013b8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8001364:	697a      	ldr	r2, [r7, #20]
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00e      	beq.n	8001392 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001374:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001376:	0a1b      	lsrs	r3, r3, #8
 8001378:	b29b      	uxth	r3, r3
 800137a:	b2db      	uxtb	r3, r3
 800137c:	743b      	strb	r3, [r7, #16]
 800137e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001380:	b2db      	uxtb	r3, r3
 8001382:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	2102      	movs	r1, #2
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fec0 	bl	8001110 <ST7735_WriteData>
 8001390:	e00f      	b.n	80013b2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8001392:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	b29b      	uxth	r3, r3
 800139a:	b2db      	uxtb	r3, r3
 800139c:	733b      	strb	r3, [r7, #12]
 800139e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80013a6:	f107 030c 	add.w	r3, r7, #12
 80013aa:	2102      	movs	r1, #2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff feaf 	bl	8001110 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	3301      	adds	r3, #1
 80013b6:	61bb      	str	r3, [r7, #24]
 80013b8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80013bc:	461a      	mov	r2, r3
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d3cf      	bcc.n	8001364 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	3301      	adds	r3, #1
 80013c8:	61fb      	str	r3, [r7, #28]
 80013ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80013ce:	461a      	mov	r2, r3
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d3b5      	bcc.n	8001342 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80013d6:	bf00      	nop
 80013d8:	bf00      	nop
 80013da:	3724      	adds	r7, #36	; 0x24
 80013dc:	46bd      	mov	sp, r7
 80013de:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80013e2:	b002      	add	sp, #8
 80013e4:	4770      	bx	lr

080013e6 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013e6:	b082      	sub	sp, #8
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af04      	add	r7, sp, #16
 80013ee:	603a      	str	r2, [r7, #0]
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
 80013f6:	460b      	mov	r3, r1
 80013f8:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80013fa:	f7ff fe29 	bl	8001050 <ST7735_Select>

    while(*str) {
 80013fe:	e02d      	b.n	800145c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	7d3a      	ldrb	r2, [r7, #20]
 8001404:	4413      	add	r3, r2
 8001406:	2b7f      	cmp	r3, #127	; 0x7f
 8001408:	dd13      	ble.n	8001432 <ST7735_WriteString+0x4c>
            x = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800140e:	7d7b      	ldrb	r3, [r7, #21]
 8001410:	b29a      	uxth	r2, r3
 8001412:	88bb      	ldrh	r3, [r7, #4]
 8001414:	4413      	add	r3, r2
 8001416:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8001418:	88bb      	ldrh	r3, [r7, #4]
 800141a:	7d7a      	ldrb	r2, [r7, #21]
 800141c:	4413      	add	r3, r2
 800141e:	2b7f      	cmp	r3, #127	; 0x7f
 8001420:	dc21      	bgt.n	8001466 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b20      	cmp	r3, #32
 8001428:	d103      	bne.n	8001432 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	3301      	adds	r3, #1
 800142e:	603b      	str	r3, [r7, #0]
                continue;
 8001430:	e014      	b.n	800145c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	781a      	ldrb	r2, [r3, #0]
 8001436:	88b9      	ldrh	r1, [r7, #4]
 8001438:	88f8      	ldrh	r0, [r7, #6]
 800143a:	8c3b      	ldrh	r3, [r7, #32]
 800143c:	9302      	str	r3, [sp, #8]
 800143e:	8bbb      	ldrh	r3, [r7, #28]
 8001440:	9301      	str	r3, [sp, #4]
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	9300      	str	r3, [sp, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f7ff ff56 	bl	80012f8 <ST7735_WriteChar>
        x += font.width;
 800144c:	7d3b      	ldrb	r3, [r7, #20]
 800144e:	b29a      	uxth	r2, r3
 8001450:	88fb      	ldrh	r3, [r7, #6]
 8001452:	4413      	add	r3, r2
 8001454:	80fb      	strh	r3, [r7, #6]
        str++;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	3301      	adds	r3, #1
 800145a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1cd      	bne.n	8001400 <ST7735_WriteString+0x1a>
 8001464:	e000      	b.n	8001468 <ST7735_WriteString+0x82>
                break;
 8001466:	bf00      	nop
    }

    ST7735_Unselect();
 8001468:	f7ff fdfe 	bl	8001068 <ST7735_Unselect>
}
 800146c:	bf00      	nop
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001476:	b002      	add	sp, #8
 8001478:	4770      	bx	lr
	...

0800147c <ST7735_FillRectangle>:
    }

    ST7735_Unselect1();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	4611      	mov	r1, r2
 8001488:	461a      	mov	r2, r3
 800148a:	4623      	mov	r3, r4
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	4603      	mov	r3, r0
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	807b      	strh	r3, [r7, #2]
 8001496:	4613      	mov	r3, r2
 8001498:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	2b7f      	cmp	r3, #127	; 0x7f
 800149e:	d858      	bhi.n	8001552 <ST7735_FillRectangle+0xd6>
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	2b7f      	cmp	r3, #127	; 0x7f
 80014a4:	d855      	bhi.n	8001552 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80014a6:	88fa      	ldrh	r2, [r7, #6]
 80014a8:	887b      	ldrh	r3, [r7, #2]
 80014aa:	4413      	add	r3, r2
 80014ac:	2b80      	cmp	r3, #128	; 0x80
 80014ae:	dd03      	ble.n	80014b8 <ST7735_FillRectangle+0x3c>
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80014b6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80014b8:	88ba      	ldrh	r2, [r7, #4]
 80014ba:	883b      	ldrh	r3, [r7, #0]
 80014bc:	4413      	add	r3, r2
 80014be:	2b80      	cmp	r3, #128	; 0x80
 80014c0:	dd03      	ble.n	80014ca <ST7735_FillRectangle+0x4e>
 80014c2:	88bb      	ldrh	r3, [r7, #4]
 80014c4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80014c8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80014ca:	f7ff fdc1 	bl	8001050 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	b2d8      	uxtb	r0, r3
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	b2d9      	uxtb	r1, r3
 80014d6:	88fb      	ldrh	r3, [r7, #6]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	4413      	add	r3, r2
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b2dc      	uxtb	r4, r3
 80014e6:	88bb      	ldrh	r3, [r7, #4]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	883b      	ldrh	r3, [r7, #0]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	4413      	add	r3, r2
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	3b01      	subs	r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	4622      	mov	r2, r4
 80014f8:	f7ff fe6f 	bl	80011da <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014fc:	8c3b      	ldrh	r3, [r7, #32]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	733b      	strb	r3, [r7, #12]
 8001506:	8c3b      	ldrh	r3, [r7, #32]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001512:	4812      	ldr	r0, [pc, #72]	; (800155c <ST7735_FillRectangle+0xe0>)
 8001514:	f003 fd0a 	bl	8004f2c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001518:	883b      	ldrh	r3, [r7, #0]
 800151a:	80bb      	strh	r3, [r7, #4]
 800151c:	e013      	b.n	8001546 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	80fb      	strh	r3, [r7, #6]
 8001522:	e00a      	b.n	800153a <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001524:	f107 010c 	add.w	r1, r7, #12
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	2202      	movs	r2, #2
 800152e:	480c      	ldr	r0, [pc, #48]	; (8001560 <ST7735_FillRectangle+0xe4>)
 8001530:	f006 fb38 	bl	8007ba4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	3b01      	subs	r3, #1
 8001538:	80fb      	strh	r3, [r7, #6]
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f1      	bne.n	8001524 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001540:	88bb      	ldrh	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	80bb      	strh	r3, [r7, #4]
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1e8      	bne.n	800151e <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 800154c:	f7ff fd8c 	bl	8001068 <ST7735_Unselect>
 8001550:	e000      	b.n	8001554 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001552:	bf00      	nop
}
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bd90      	pop	{r4, r7, pc}
 800155a:	bf00      	nop
 800155c:	58021000 	.word	0x58021000
 8001560:	240001ec 	.word	0x240001ec

08001564 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b084      	sub	sp, #16
 8001568:	af02      	add	r7, sp, #8
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	2280      	movs	r2, #128	; 0x80
 8001576:	2100      	movs	r1, #0
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff ff7f 	bl	800147c <ST7735_FillRectangle>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_MspInit+0x30>)
 8001590:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001594:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <HAL_MspInit+0x30>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_MspInit+0x30>)
 80015a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	58024400 	.word	0x58024400

080015bc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08e      	sub	sp, #56	; 0x38
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a59      	ldr	r2, [pc, #356]	; (8001740 <HAL_ETH_MspInit+0x184>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	f040 80ab 	bne.w	8001736 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015e0:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_ETH_MspInit+0x188>)
 80015e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015e6:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_ETH_MspInit+0x188>)
 80015e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80015f0:	4b54      	ldr	r3, [pc, #336]	; (8001744 <HAL_ETH_MspInit+0x188>)
 80015f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80015f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015fa:	623b      	str	r3, [r7, #32]
 80015fc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015fe:	4b51      	ldr	r3, [pc, #324]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001604:	4a4f      	ldr	r2, [pc, #316]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800160a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800160e:	4b4d      	ldr	r3, [pc, #308]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001610:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001614:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001618:	61fb      	str	r3, [r7, #28]
 800161a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800161c:	4b49      	ldr	r3, [pc, #292]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800161e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001622:	4a48      	ldr	r2, [pc, #288]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001628:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800162c:	4b45      	ldr	r3, [pc, #276]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800162e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001636:	61bb      	str	r3, [r7, #24]
 8001638:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800163a:	4b42      	ldr	r3, [pc, #264]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800163c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001640:	4a40      	ldr	r2, [pc, #256]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800164c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b3a      	ldr	r3, [pc, #232]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800165a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800165e:	4a39      	ldr	r2, [pc, #228]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800166a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b33      	ldr	r3, [pc, #204]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167c:	4a31      	ldr	r2, [pc, #196]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800167e:	f043 0302 	orr.w	r3, r3, #2
 8001682:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001686:	4b2f      	ldr	r3, [pc, #188]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001688:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001694:	4b2b      	ldr	r3, [pc, #172]	; (8001744 <HAL_ETH_MspInit+0x188>)
 8001696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800169a:	4a2a      	ldr	r2, [pc, #168]	; (8001744 <HAL_ETH_MspInit+0x188>)
 800169c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a4:	4b27      	ldr	r3, [pc, #156]	; (8001744 <HAL_ETH_MspInit+0x188>)
 80016a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80016b2:	2332      	movs	r3, #50	; 0x32
 80016b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b6:	2302      	movs	r3, #2
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	2300      	movs	r3, #0
 80016c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c2:	230b      	movs	r3, #11
 80016c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	481e      	ldr	r0, [pc, #120]	; (8001748 <HAL_ETH_MspInit+0x18c>)
 80016ce:	f003 fa7d 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80016d2:	2386      	movs	r3, #134	; 0x86
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d6:	2302      	movs	r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016de:	2300      	movs	r3, #0
 80016e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e2:	230b      	movs	r3, #11
 80016e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ea:	4619      	mov	r1, r3
 80016ec:	4817      	ldr	r0, [pc, #92]	; (800174c <HAL_ETH_MspInit+0x190>)
 80016ee:	f003 fa6d 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80016f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001704:	230b      	movs	r3, #11
 8001706:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800170c:	4619      	mov	r1, r3
 800170e:	4810      	ldr	r0, [pc, #64]	; (8001750 <HAL_ETH_MspInit+0x194>)
 8001710:	f003 fa5c 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001714:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001718:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001726:	230b      	movs	r3, #11
 8001728:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800172a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800172e:	4619      	mov	r1, r3
 8001730:	4808      	ldr	r0, [pc, #32]	; (8001754 <HAL_ETH_MspInit+0x198>)
 8001732:	f003 fa4b 	bl	8004bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001736:	bf00      	nop
 8001738:	3738      	adds	r7, #56	; 0x38
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40028000 	.word	0x40028000
 8001744:	58024400 	.word	0x58024400
 8001748:	58020800 	.word	0x58020800
 800174c:	58020000 	.word	0x58020000
 8001750:	58020400 	.word	0x58020400
 8001754:	58021800 	.word	0x58021800

08001758 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08a      	sub	sp, #40	; 0x28
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a2a      	ldr	r2, [pc, #168]	; (8001820 <HAL_SPI_MspInit+0xc8>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d14d      	bne.n	8001816 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800177a:	4b2a      	ldr	r3, [pc, #168]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 800177c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001780:	4a28      	ldr	r2, [pc, #160]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 8001782:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001786:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800178a:	4b26      	ldr	r3, [pc, #152]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 800178c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b22      	ldr	r3, [pc, #136]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 800179a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800179e:	4a21      	ldr	r2, [pc, #132]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 80017a0:	f043 0302 	orr.w	r3, r3, #2
 80017a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017a8:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 80017aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_SPI_MspInit+0xcc>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017d4:	2304      	movs	r3, #4
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017dc:	2302      	movs	r3, #2
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	2300      	movs	r3, #0
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80017e4:	2307      	movs	r3, #7
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <HAL_SPI_MspInit+0xd0>)
 80017f0:	f003 f9ec 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017fe:	2302      	movs	r3, #2
 8001800:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001806:	2306      	movs	r3, #6
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4806      	ldr	r0, [pc, #24]	; (800182c <HAL_SPI_MspInit+0xd4>)
 8001812:	f003 f9db 	bl	8004bcc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001816:	bf00      	nop
 8001818:	3728      	adds	r7, #40	; 0x28
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40003c00 	.word	0x40003c00
 8001824:	58024400 	.word	0x58024400
 8001828:	58020400 	.word	0x58020400
 800182c:	58020800 	.word	0x58020800

08001830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b0b8      	sub	sp, #224	; 0xe0
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001838:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]
 8001846:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001848:	f107 0310 	add.w	r3, r7, #16
 800184c:	22bc      	movs	r2, #188	; 0xbc
 800184e:	2100      	movs	r1, #0
 8001850:	4618      	mov	r0, r3
 8001852:	f008 fca5 	bl	800a1a0 <memset>
  if(huart->Instance==USART3)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <HAL_UART_MspInit+0x188>)
 800185c:	4293      	cmp	r3, r2
 800185e:	f040 80a6 	bne.w	80019ae <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001862:	2302      	movs	r3, #2
 8001864:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001866:	2300      	movs	r3, #0
 8001868:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4618      	mov	r0, r3
 8001872:	f004 fd29 	bl	80062c8 <HAL_RCCEx_PeriphCLKConfig>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800187c:	f7ff fbe2 	bl	8001044 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001880:	4b4e      	ldr	r3, [pc, #312]	; (80019bc <HAL_UART_MspInit+0x18c>)
 8001882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001886:	4a4d      	ldr	r2, [pc, #308]	; (80019bc <HAL_UART_MspInit+0x18c>)
 8001888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800188c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_UART_MspInit+0x18c>)
 8001892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800189e:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_UART_MspInit+0x18c>)
 80018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a4:	4a45      	ldr	r2, [pc, #276]	; (80019bc <HAL_UART_MspInit+0x18c>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ae:	4b43      	ldr	r3, [pc, #268]	; (80019bc <HAL_UART_MspInit+0x18c>)
 80018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	60bb      	str	r3, [r7, #8]
 80018ba:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018c0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	2302      	movs	r3, #2
 80018c6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018d6:	2307      	movs	r3, #7
 80018d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018e0:	4619      	mov	r1, r3
 80018e2:	4837      	ldr	r0, [pc, #220]	; (80019c0 <HAL_UART_MspInit+0x190>)
 80018e4:	f003 f972 	bl	8004bcc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80018e8:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_UART_MspInit+0x194>)
 80018ea:	4a37      	ldr	r2, [pc, #220]	; (80019c8 <HAL_UART_MspInit+0x198>)
 80018ec:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80018ee:	4b35      	ldr	r3, [pc, #212]	; (80019c4 <HAL_UART_MspInit+0x194>)
 80018f0:	222d      	movs	r2, #45	; 0x2d
 80018f2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018f4:	4b33      	ldr	r3, [pc, #204]	; (80019c4 <HAL_UART_MspInit+0x194>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018fa:	4b32      	ldr	r3, [pc, #200]	; (80019c4 <HAL_UART_MspInit+0x194>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_UART_MspInit+0x194>)
 8001902:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001906:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001908:	4b2e      	ldr	r3, [pc, #184]	; (80019c4 <HAL_UART_MspInit+0x194>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_UART_MspInit+0x194>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001914:	4b2b      	ldr	r3, [pc, #172]	; (80019c4 <HAL_UART_MspInit+0x194>)
 8001916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800191c:	4b29      	ldr	r3, [pc, #164]	; (80019c4 <HAL_UART_MspInit+0x194>)
 800191e:	2200      	movs	r2, #0
 8001920:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001922:	4b28      	ldr	r3, [pc, #160]	; (80019c4 <HAL_UART_MspInit+0x194>)
 8001924:	2200      	movs	r2, #0
 8001926:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001928:	4826      	ldr	r0, [pc, #152]	; (80019c4 <HAL_UART_MspInit+0x194>)
 800192a:	f000 fb05 	bl	8001f38 <HAL_DMA_Init>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001934:	f7ff fb86 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a22      	ldr	r2, [pc, #136]	; (80019c4 <HAL_UART_MspInit+0x194>)
 800193c:	67da      	str	r2, [r3, #124]	; 0x7c
 800193e:	4a21      	ldr	r2, [pc, #132]	; (80019c4 <HAL_UART_MspInit+0x194>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8001944:	4b21      	ldr	r3, [pc, #132]	; (80019cc <HAL_UART_MspInit+0x19c>)
 8001946:	4a22      	ldr	r2, [pc, #136]	; (80019d0 <HAL_UART_MspInit+0x1a0>)
 8001948:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_UART_MspInit+0x19c>)
 800194c:	222e      	movs	r2, #46	; 0x2e
 800194e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_UART_MspInit+0x19c>)
 8001952:	2240      	movs	r2, #64	; 0x40
 8001954:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <HAL_UART_MspInit+0x19c>)
 8001958:	2200      	movs	r2, #0
 800195a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_UART_MspInit+0x19c>)
 800195e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001962:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <HAL_UART_MspInit+0x19c>)
 8001966:	2200      	movs	r2, #0
 8001968:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <HAL_UART_MspInit+0x19c>)
 800196c:	2200      	movs	r2, #0
 800196e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001970:	4b16      	ldr	r3, [pc, #88]	; (80019cc <HAL_UART_MspInit+0x19c>)
 8001972:	2200      	movs	r2, #0
 8001974:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001976:	4b15      	ldr	r3, [pc, #84]	; (80019cc <HAL_UART_MspInit+0x19c>)
 8001978:	2200      	movs	r2, #0
 800197a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <HAL_UART_MspInit+0x19c>)
 800197e:	2200      	movs	r2, #0
 8001980:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001982:	4812      	ldr	r0, [pc, #72]	; (80019cc <HAL_UART_MspInit+0x19c>)
 8001984:	f000 fad8 	bl	8001f38 <HAL_DMA_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800198e:	f7ff fb59 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a0d      	ldr	r2, [pc, #52]	; (80019cc <HAL_UART_MspInit+0x19c>)
 8001996:	679a      	str	r2, [r3, #120]	; 0x78
 8001998:	4a0c      	ldr	r2, [pc, #48]	; (80019cc <HAL_UART_MspInit+0x19c>)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800199e:	2200      	movs	r2, #0
 80019a0:	2100      	movs	r1, #0
 80019a2:	2027      	movs	r0, #39	; 0x27
 80019a4:	f000 fa93 	bl	8001ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019a8:	2027      	movs	r0, #39	; 0x27
 80019aa:	f000 faaa 	bl	8001f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80019ae:	bf00      	nop
 80019b0:	37e0      	adds	r7, #224	; 0xe0
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40004800 	.word	0x40004800
 80019bc:	58024400 	.word	0x58024400
 80019c0:	58020c00 	.word	0x58020c00
 80019c4:	24000304 	.word	0x24000304
 80019c8:	40020028 	.word	0x40020028
 80019cc:	2400037c 	.word	0x2400037c
 80019d0:	40020070 	.word	0x40020070

080019d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08a      	sub	sp, #40	; 0x28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	609a      	str	r2, [r3, #8]
 80019e8:	60da      	str	r2, [r3, #12]
 80019ea:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a22      	ldr	r2, [pc, #136]	; (8001a7c <HAL_PCD_MspInit+0xa8>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d13d      	bne.n	8001a72 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80019f6:	f003 fc9d 	bl	8005334 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	4b21      	ldr	r3, [pc, #132]	; (8001a80 <HAL_PCD_MspInit+0xac>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <HAL_PCD_MspInit+0xac>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_PCD_MspInit+0xac>)
 8001a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001a18:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2e:	f107 0314 	add.w	r3, r7, #20
 8001a32:	4619      	mov	r1, r3
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <HAL_PCD_MspInit+0xb0>)
 8001a36:	f003 f8c9 	bl	8004bcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	480d      	ldr	r0, [pc, #52]	; (8001a84 <HAL_PCD_MspInit+0xb0>)
 8001a50:	f003 f8bc 	bl	8004bcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a54:	4b0a      	ldr	r3, [pc, #40]	; (8001a80 <HAL_PCD_MspInit+0xac>)
 8001a56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a5a:	4a09      	ldr	r2, [pc, #36]	; (8001a80 <HAL_PCD_MspInit+0xac>)
 8001a5c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001a60:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <HAL_PCD_MspInit+0xac>)
 8001a66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3728      	adds	r7, #40	; 0x28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40080000 	.word	0x40080000
 8001a80:	58024400 	.word	0x58024400
 8001a84:	58020000 	.word	0x58020000

08001a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <NMI_Handler+0x4>

08001a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a8e:	b480      	push	{r7}
 8001a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a92:	e7fe      	b.n	8001a92 <HardFault_Handler+0x4>

08001a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <MemManage_Handler+0x4>

08001a9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <BusFault_Handler+0x4>

08001aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <UsageFault_Handler+0x4>

08001aa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ad4:	f000 f8bc 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}

08001adc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ae0:	4802      	ldr	r0, [pc, #8]	; (8001aec <DMA1_Stream1_IRQHandler+0x10>)
 8001ae2:	f001 fae9 	bl	80030b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	24000304 	.word	0x24000304

08001af0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001af4:	4802      	ldr	r0, [pc, #8]	; (8001b00 <DMA1_Stream4_IRQHandler+0x10>)
 8001af6:	f001 fadf 	bl	80030b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001afa:	bf00      	nop
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	2400037c 	.word	0x2400037c

08001b04 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b08:	4802      	ldr	r0, [pc, #8]	; (8001b14 <USART3_IRQHandler+0x10>)
 8001b0a:	f006 fb77 	bl	80081fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b0e:	bf00      	nop
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	24000274 	.word	0x24000274

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b1c:	f7fe fd5e 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b22:	490d      	ldr	r1, [pc, #52]	; (8001b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b24:	4a0d      	ldr	r2, [pc, #52]	; (8001b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b28:	e002      	b.n	8001b30 <LoopCopyDataInit>

08001b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2e:	3304      	adds	r3, #4

08001b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b34:	d3f9      	bcc.n	8001b2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b38:	4c0a      	ldr	r4, [pc, #40]	; (8001b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b3c:	e001      	b.n	8001b42 <LoopFillZerobss>

08001b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b40:	3204      	adds	r2, #4

08001b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b44:	d3fb      	bcc.n	8001b3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f008 fb07 	bl	800a158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7fe ff1b 	bl	8000984 <main>
  bx  lr
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b58:	24000028 	.word	0x24000028
  ldr r2, =_sidata
 8001b5c:	0800cb40 	.word	0x0800cb40
  ldr r2, =_sbss
 8001b60:	240000e8 	.word	0x240000e8
  ldr r4, =_ebss
 8001b64:	24000910 	.word	0x24000910

08001b68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC3_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 f9a0 	bl	8001eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b78:	f004 f9d0 	bl	8005f1c <HAL_RCC_GetSysClockFreq>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_Init+0x68>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	4913      	ldr	r1, [pc, #76]	; (8001bd8 <HAL_Init+0x6c>)
 8001b8a:	5ccb      	ldrb	r3, [r1, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_Init+0x68>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_Init+0x6c>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <HAL_Init+0x70>)
 8001bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_Init+0x74>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 f814 	bl	8001be4 <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e002      	b.n	8001bcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc6:	f7ff fcdf 	bl	8001588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	0800a264 	.word	0x0800a264
 8001bdc:	24000004 	.word	0x24000004
 8001be0:	24000000 	.word	0x24000000

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_InitTick+0x60>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e021      	b.n	8001c3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_InitTick+0x64>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_InitTick+0x60>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f985 	bl	8001f1e <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 f94f 	bl	8001ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_InitTick+0x68>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	24000024 	.word	0x24000024
 8001c48:	24000000 	.word	0x24000000
 8001c4c:	24000020 	.word	0x24000020

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	24000024 	.word	0x24000024
 8001c74:	2400090c 	.word	0x2400090c

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	2400090c 	.word	0x2400090c

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <HAL_Delay+0x44>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	24000024 	.word	0x24000024

08001cd8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cdc:	4b03      	ldr	r3, [pc, #12]	; (8001cec <HAL_GetREVID+0x14>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	5c001000 	.word	0x5c001000

08001cf0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001d00:	4904      	ldr	r1, [pc, #16]	; (8001d14 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
}
 8001d08:	bf00      	nop
 8001d0a:	370c      	adds	r7, #12
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	58000400 	.word	0x58000400

08001d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <__NVIC_SetPriorityGrouping+0x40>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d34:	4013      	ands	r3, r2
 8001d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <__NVIC_SetPriorityGrouping+0x44>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d46:	4a04      	ldr	r2, [pc, #16]	; (8001d58 <__NVIC_SetPriorityGrouping+0x40>)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	60d3      	str	r3, [r2, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00
 8001d5c:	05fa0000 	.word	0x05fa0000

08001d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <__NVIC_GetPriorityGrouping+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	f003 0307 	and.w	r3, r3, #7
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	e000ed00 	.word	0xe000ed00

08001d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	db0b      	blt.n	8001da6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	f003 021f 	and.w	r2, r3, #31
 8001d94:	4907      	ldr	r1, [pc, #28]	; (8001db4 <__NVIC_EnableIRQ+0x38>)
 8001d96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d9a:	095b      	lsrs	r3, r3, #5
 8001d9c:	2001      	movs	r0, #1
 8001d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	e000e100 	.word	0xe000e100

08001db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b083      	sub	sp, #12
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	6039      	str	r1, [r7, #0]
 8001dc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	db0a      	blt.n	8001de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	490c      	ldr	r1, [pc, #48]	; (8001e04 <__NVIC_SetPriority+0x4c>)
 8001dd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd6:	0112      	lsls	r2, r2, #4
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	440b      	add	r3, r1
 8001ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001de0:	e00a      	b.n	8001df8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	4908      	ldr	r1, [pc, #32]	; (8001e08 <__NVIC_SetPriority+0x50>)
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	3b04      	subs	r3, #4
 8001df0:	0112      	lsls	r2, r2, #4
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	440b      	add	r3, r1
 8001df6:	761a      	strb	r2, [r3, #24]
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	e000e100 	.word	0xe000e100
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b089      	sub	sp, #36	; 0x24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	f1c3 0307 	rsb	r3, r3, #7
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	bf28      	it	cs
 8001e2a:	2304      	movcs	r3, #4
 8001e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3304      	adds	r3, #4
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d902      	bls.n	8001e3c <NVIC_EncodePriority+0x30>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b03      	subs	r3, #3
 8001e3a:	e000      	b.n	8001e3e <NVIC_EncodePriority+0x32>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e40:	f04f 32ff 	mov.w	r2, #4294967295
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43da      	mvns	r2, r3
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	401a      	ands	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5e:	43d9      	mvns	r1, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	4313      	orrs	r3, r2
         );
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3724      	adds	r7, #36	; 0x24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
	...

08001e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e84:	d301      	bcc.n	8001e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00f      	b.n	8001eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <SysTick_Config+0x40>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e92:	210f      	movs	r1, #15
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f7ff ff8e 	bl	8001db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Config+0x40>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ea2:	4b04      	ldr	r3, [pc, #16]	; (8001eb4 <SysTick_Config+0x40>)
 8001ea4:	2207      	movs	r2, #7
 8001ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f7ff ff29 	bl	8001d18 <__NVIC_SetPriorityGrouping>
}
 8001ec6:	bf00      	nop
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001edc:	f7ff ff40 	bl	8001d60 <__NVIC_GetPriorityGrouping>
 8001ee0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	6978      	ldr	r0, [r7, #20]
 8001ee8:	f7ff ff90 	bl	8001e0c <NVIC_EncodePriority>
 8001eec:	4602      	mov	r2, r0
 8001eee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff5f 	bl	8001db8 <__NVIC_SetPriority>
}
 8001efa:	bf00      	nop
 8001efc:	3718      	adds	r7, #24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	4603      	mov	r3, r0
 8001f0a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff ff33 	bl	8001d7c <__NVIC_EnableIRQ>
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}

08001f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	b082      	sub	sp, #8
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f7ff ffa4 	bl	8001e74 <SysTick_Config>
 8001f2c:	4603      	mov	r3, r0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
	...

08001f38 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff fe9a 	bl	8001c78 <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e316      	b.n	800257e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a66      	ldr	r2, [pc, #408]	; (80020f0 <HAL_DMA_Init+0x1b8>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d04a      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a65      	ldr	r2, [pc, #404]	; (80020f4 <HAL_DMA_Init+0x1bc>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d045      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a63      	ldr	r2, [pc, #396]	; (80020f8 <HAL_DMA_Init+0x1c0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d040      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a62      	ldr	r2, [pc, #392]	; (80020fc <HAL_DMA_Init+0x1c4>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d03b      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a60      	ldr	r2, [pc, #384]	; (8002100 <HAL_DMA_Init+0x1c8>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d036      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5f      	ldr	r2, [pc, #380]	; (8002104 <HAL_DMA_Init+0x1cc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d031      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a5d      	ldr	r2, [pc, #372]	; (8002108 <HAL_DMA_Init+0x1d0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d02c      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a5c      	ldr	r2, [pc, #368]	; (800210c <HAL_DMA_Init+0x1d4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d027      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a5a      	ldr	r2, [pc, #360]	; (8002110 <HAL_DMA_Init+0x1d8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d022      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a59      	ldr	r2, [pc, #356]	; (8002114 <HAL_DMA_Init+0x1dc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d01d      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a57      	ldr	r2, [pc, #348]	; (8002118 <HAL_DMA_Init+0x1e0>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d018      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a56      	ldr	r2, [pc, #344]	; (800211c <HAL_DMA_Init+0x1e4>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d013      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_DMA_Init+0x1e8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00e      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a53      	ldr	r2, [pc, #332]	; (8002124 <HAL_DMA_Init+0x1ec>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d009      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a51      	ldr	r2, [pc, #324]	; (8002128 <HAL_DMA_Init+0x1f0>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_DMA_Init+0xb8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a50      	ldr	r2, [pc, #320]	; (800212c <HAL_DMA_Init+0x1f4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d101      	bne.n	8001ff4 <HAL_DMA_Init+0xbc>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e000      	b.n	8001ff6 <HAL_DMA_Init+0xbe>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f000 813b 	beq.w	8002272 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a37      	ldr	r2, [pc, #220]	; (80020f0 <HAL_DMA_Init+0x1b8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d04a      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a36      	ldr	r2, [pc, #216]	; (80020f4 <HAL_DMA_Init+0x1bc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d045      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <HAL_DMA_Init+0x1c0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d040      	beq.n	80020ac <HAL_DMA_Init+0x174>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a33      	ldr	r2, [pc, #204]	; (80020fc <HAL_DMA_Init+0x1c4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d03b      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a31      	ldr	r2, [pc, #196]	; (8002100 <HAL_DMA_Init+0x1c8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d036      	beq.n	80020ac <HAL_DMA_Init+0x174>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a30      	ldr	r2, [pc, #192]	; (8002104 <HAL_DMA_Init+0x1cc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d031      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a2e      	ldr	r2, [pc, #184]	; (8002108 <HAL_DMA_Init+0x1d0>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d02c      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2d      	ldr	r2, [pc, #180]	; (800210c <HAL_DMA_Init+0x1d4>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d027      	beq.n	80020ac <HAL_DMA_Init+0x174>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a2b      	ldr	r2, [pc, #172]	; (8002110 <HAL_DMA_Init+0x1d8>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d022      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a2a      	ldr	r2, [pc, #168]	; (8002114 <HAL_DMA_Init+0x1dc>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d01d      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a28      	ldr	r2, [pc, #160]	; (8002118 <HAL_DMA_Init+0x1e0>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d018      	beq.n	80020ac <HAL_DMA_Init+0x174>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a27      	ldr	r2, [pc, #156]	; (800211c <HAL_DMA_Init+0x1e4>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a25      	ldr	r2, [pc, #148]	; (8002120 <HAL_DMA_Init+0x1e8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d00e      	beq.n	80020ac <HAL_DMA_Init+0x174>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a24      	ldr	r2, [pc, #144]	; (8002124 <HAL_DMA_Init+0x1ec>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d009      	beq.n	80020ac <HAL_DMA_Init+0x174>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a22      	ldr	r2, [pc, #136]	; (8002128 <HAL_DMA_Init+0x1f0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d004      	beq.n	80020ac <HAL_DMA_Init+0x174>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a21      	ldr	r2, [pc, #132]	; (800212c <HAL_DMA_Init+0x1f4>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d108      	bne.n	80020be <HAL_DMA_Init+0x186>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	e007      	b.n	80020ce <HAL_DMA_Init+0x196>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f022 0201 	bic.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020ce:	e02f      	b.n	8002130 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020d0:	f7ff fdd2 	bl	8001c78 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d928      	bls.n	8002130 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2220      	movs	r2, #32
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2203      	movs	r2, #3
 80020e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e246      	b.n	800257e <HAL_DMA_Init+0x646>
 80020f0:	40020010 	.word	0x40020010
 80020f4:	40020028 	.word	0x40020028
 80020f8:	40020040 	.word	0x40020040
 80020fc:	40020058 	.word	0x40020058
 8002100:	40020070 	.word	0x40020070
 8002104:	40020088 	.word	0x40020088
 8002108:	400200a0 	.word	0x400200a0
 800210c:	400200b8 	.word	0x400200b8
 8002110:	40020410 	.word	0x40020410
 8002114:	40020428 	.word	0x40020428
 8002118:	40020440 	.word	0x40020440
 800211c:	40020458 	.word	0x40020458
 8002120:	40020470 	.word	0x40020470
 8002124:	40020488 	.word	0x40020488
 8002128:	400204a0 	.word	0x400204a0
 800212c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d1c8      	bne.n	80020d0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	4b83      	ldr	r3, [pc, #524]	; (8002358 <HAL_DMA_Init+0x420>)
 800214a:	4013      	ands	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002156:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002162:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800216e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a1b      	ldr	r3, [r3, #32]
 8002174:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	4313      	orrs	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	2b04      	cmp	r3, #4
 8002182:	d107      	bne.n	8002194 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218c:	4313      	orrs	r3, r2
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002194:	4b71      	ldr	r3, [pc, #452]	; (800235c <HAL_DMA_Init+0x424>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	4b71      	ldr	r3, [pc, #452]	; (8002360 <HAL_DMA_Init+0x428>)
 800219a:	4013      	ands	r3, r2
 800219c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a0:	d328      	bcc.n	80021f4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b28      	cmp	r3, #40	; 0x28
 80021a8:	d903      	bls.n	80021b2 <HAL_DMA_Init+0x27a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	2b2e      	cmp	r3, #46	; 0x2e
 80021b0:	d917      	bls.n	80021e2 <HAL_DMA_Init+0x2aa>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b3e      	cmp	r3, #62	; 0x3e
 80021b8:	d903      	bls.n	80021c2 <HAL_DMA_Init+0x28a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b42      	cmp	r3, #66	; 0x42
 80021c0:	d90f      	bls.n	80021e2 <HAL_DMA_Init+0x2aa>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b46      	cmp	r3, #70	; 0x46
 80021c8:	d903      	bls.n	80021d2 <HAL_DMA_Init+0x29a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b48      	cmp	r3, #72	; 0x48
 80021d0:	d907      	bls.n	80021e2 <HAL_DMA_Init+0x2aa>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b4e      	cmp	r3, #78	; 0x4e
 80021d8:	d905      	bls.n	80021e6 <HAL_DMA_Init+0x2ae>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b52      	cmp	r3, #82	; 0x52
 80021e0:	d801      	bhi.n	80021e6 <HAL_DMA_Init+0x2ae>
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_DMA_Init+0x2b0>
 80021e6:	2300      	movs	r3, #0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021f2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f023 0307 	bic.w	r3, r3, #7
 800220a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	2b04      	cmp	r3, #4
 800221c:	d117      	bne.n	800224e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4313      	orrs	r3, r2
 8002226:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00e      	beq.n	800224e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f001 ff1d 	bl	8004070 <DMA_CheckFifoParam>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d008      	beq.n	800224e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e197      	b.n	800257e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f001 fe58 	bl	8003f0c <DMA_CalcBaseAndBitshift>
 800225c:	4603      	mov	r3, r0
 800225e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	f003 031f 	and.w	r3, r3, #31
 8002268:	223f      	movs	r2, #63	; 0x3f
 800226a:	409a      	lsls	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	e0cd      	b.n	800240e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a3b      	ldr	r2, [pc, #236]	; (8002364 <HAL_DMA_Init+0x42c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <HAL_DMA_Init+0x38a>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a39      	ldr	r2, [pc, #228]	; (8002368 <HAL_DMA_Init+0x430>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d01d      	beq.n	80022c2 <HAL_DMA_Init+0x38a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a38      	ldr	r2, [pc, #224]	; (800236c <HAL_DMA_Init+0x434>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d018      	beq.n	80022c2 <HAL_DMA_Init+0x38a>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a36      	ldr	r2, [pc, #216]	; (8002370 <HAL_DMA_Init+0x438>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d013      	beq.n	80022c2 <HAL_DMA_Init+0x38a>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a35      	ldr	r2, [pc, #212]	; (8002374 <HAL_DMA_Init+0x43c>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00e      	beq.n	80022c2 <HAL_DMA_Init+0x38a>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a33      	ldr	r2, [pc, #204]	; (8002378 <HAL_DMA_Init+0x440>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d009      	beq.n	80022c2 <HAL_DMA_Init+0x38a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a32      	ldr	r2, [pc, #200]	; (800237c <HAL_DMA_Init+0x444>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d004      	beq.n	80022c2 <HAL_DMA_Init+0x38a>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_DMA_Init+0x448>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d101      	bne.n	80022c6 <HAL_DMA_Init+0x38e>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e000      	b.n	80022c8 <HAL_DMA_Init+0x390>
 80022c6:	2300      	movs	r3, #0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8097 	beq.w	80023fc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a24      	ldr	r2, [pc, #144]	; (8002364 <HAL_DMA_Init+0x42c>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d021      	beq.n	800231c <HAL_DMA_Init+0x3e4>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_DMA_Init+0x430>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d01c      	beq.n	800231c <HAL_DMA_Init+0x3e4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a21      	ldr	r2, [pc, #132]	; (800236c <HAL_DMA_Init+0x434>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d017      	beq.n	800231c <HAL_DMA_Init+0x3e4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a1f      	ldr	r2, [pc, #124]	; (8002370 <HAL_DMA_Init+0x438>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d012      	beq.n	800231c <HAL_DMA_Init+0x3e4>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a1e      	ldr	r2, [pc, #120]	; (8002374 <HAL_DMA_Init+0x43c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00d      	beq.n	800231c <HAL_DMA_Init+0x3e4>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1c      	ldr	r2, [pc, #112]	; (8002378 <HAL_DMA_Init+0x440>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d008      	beq.n	800231c <HAL_DMA_Init+0x3e4>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1b      	ldr	r2, [pc, #108]	; (800237c <HAL_DMA_Init+0x444>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <HAL_DMA_Init+0x3e4>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a19      	ldr	r2, [pc, #100]	; (8002380 <HAL_DMA_Init+0x448>)
 800231a:	4293      	cmp	r3, r2
 800231c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002336:	697a      	ldr	r2, [r7, #20]
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <HAL_DMA_Init+0x44c>)
 800233a:	4013      	ands	r3, r2
 800233c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b40      	cmp	r3, #64	; 0x40
 8002344:	d020      	beq.n	8002388 <HAL_DMA_Init+0x450>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b80      	cmp	r3, #128	; 0x80
 800234c:	d102      	bne.n	8002354 <HAL_DMA_Init+0x41c>
 800234e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002352:	e01a      	b.n	800238a <HAL_DMA_Init+0x452>
 8002354:	2300      	movs	r3, #0
 8002356:	e018      	b.n	800238a <HAL_DMA_Init+0x452>
 8002358:	fe10803f 	.word	0xfe10803f
 800235c:	5c001000 	.word	0x5c001000
 8002360:	ffff0000 	.word	0xffff0000
 8002364:	58025408 	.word	0x58025408
 8002368:	5802541c 	.word	0x5802541c
 800236c:	58025430 	.word	0x58025430
 8002370:	58025444 	.word	0x58025444
 8002374:	58025458 	.word	0x58025458
 8002378:	5802546c 	.word	0x5802546c
 800237c:	58025480 	.word	0x58025480
 8002380:	58025494 	.word	0x58025494
 8002384:	fffe000f 	.word	0xfffe000f
 8002388:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	68d2      	ldr	r2, [r2, #12]
 800238e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002390:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002398:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80023a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80023a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80023b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80023b8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b6e      	ldr	r3, [pc, #440]	; (8002588 <HAL_DMA_Init+0x650>)
 80023d0:	4413      	add	r3, r2
 80023d2:	4a6e      	ldr	r2, [pc, #440]	; (800258c <HAL_DMA_Init+0x654>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	009a      	lsls	r2, r3, #2
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f001 fd93 	bl	8003f0c <DMA_CalcBaseAndBitshift>
 80023e6:	4603      	mov	r3, r0
 80023e8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2201      	movs	r2, #1
 80023f4:	409a      	lsls	r2, r3
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	e008      	b.n	800240e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2203      	movs	r2, #3
 8002406:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0b7      	b.n	800257e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a5f      	ldr	r2, [pc, #380]	; (8002590 <HAL_DMA_Init+0x658>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d072      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a5d      	ldr	r2, [pc, #372]	; (8002594 <HAL_DMA_Init+0x65c>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d06d      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5c      	ldr	r2, [pc, #368]	; (8002598 <HAL_DMA_Init+0x660>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d068      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a5a      	ldr	r2, [pc, #360]	; (800259c <HAL_DMA_Init+0x664>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d063      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a59      	ldr	r2, [pc, #356]	; (80025a0 <HAL_DMA_Init+0x668>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d05e      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a57      	ldr	r2, [pc, #348]	; (80025a4 <HAL_DMA_Init+0x66c>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d059      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a56      	ldr	r2, [pc, #344]	; (80025a8 <HAL_DMA_Init+0x670>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d054      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a54      	ldr	r2, [pc, #336]	; (80025ac <HAL_DMA_Init+0x674>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d04f      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a53      	ldr	r2, [pc, #332]	; (80025b0 <HAL_DMA_Init+0x678>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04a      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a51      	ldr	r2, [pc, #324]	; (80025b4 <HAL_DMA_Init+0x67c>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d045      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a50      	ldr	r2, [pc, #320]	; (80025b8 <HAL_DMA_Init+0x680>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d040      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a4e      	ldr	r2, [pc, #312]	; (80025bc <HAL_DMA_Init+0x684>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d03b      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4d      	ldr	r2, [pc, #308]	; (80025c0 <HAL_DMA_Init+0x688>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d036      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_DMA_Init+0x68c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d031      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a4a      	ldr	r2, [pc, #296]	; (80025c8 <HAL_DMA_Init+0x690>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d02c      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a48      	ldr	r2, [pc, #288]	; (80025cc <HAL_DMA_Init+0x694>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d027      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a47      	ldr	r2, [pc, #284]	; (80025d0 <HAL_DMA_Init+0x698>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a45      	ldr	r2, [pc, #276]	; (80025d4 <HAL_DMA_Init+0x69c>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01d      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a44      	ldr	r2, [pc, #272]	; (80025d8 <HAL_DMA_Init+0x6a0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d018      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a42      	ldr	r2, [pc, #264]	; (80025dc <HAL_DMA_Init+0x6a4>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a41      	ldr	r2, [pc, #260]	; (80025e0 <HAL_DMA_Init+0x6a8>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a3f      	ldr	r2, [pc, #252]	; (80025e4 <HAL_DMA_Init+0x6ac>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a3e      	ldr	r2, [pc, #248]	; (80025e8 <HAL_DMA_Init+0x6b0>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_DMA_Init+0x5c6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a3c      	ldr	r2, [pc, #240]	; (80025ec <HAL_DMA_Init+0x6b4>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_DMA_Init+0x5ca>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_DMA_Init+0x5cc>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d032      	beq.n	800256e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f001 fe2d 	bl	8004168 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d102      	bne.n	800251c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002530:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d010      	beq.n	800255c <HAL_DMA_Init+0x624>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	2b08      	cmp	r3, #8
 8002540:	d80c      	bhi.n	800255c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f001 feaa 	bl	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002558:	605a      	str	r2, [r3, #4]
 800255a:	e008      	b.n	800256e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	a7fdabf8 	.word	0xa7fdabf8
 800258c:	cccccccd 	.word	0xcccccccd
 8002590:	40020010 	.word	0x40020010
 8002594:	40020028 	.word	0x40020028
 8002598:	40020040 	.word	0x40020040
 800259c:	40020058 	.word	0x40020058
 80025a0:	40020070 	.word	0x40020070
 80025a4:	40020088 	.word	0x40020088
 80025a8:	400200a0 	.word	0x400200a0
 80025ac:	400200b8 	.word	0x400200b8
 80025b0:	40020410 	.word	0x40020410
 80025b4:	40020428 	.word	0x40020428
 80025b8:	40020440 	.word	0x40020440
 80025bc:	40020458 	.word	0x40020458
 80025c0:	40020470 	.word	0x40020470
 80025c4:	40020488 	.word	0x40020488
 80025c8:	400204a0 	.word	0x400204a0
 80025cc:	400204b8 	.word	0x400204b8
 80025d0:	58025408 	.word	0x58025408
 80025d4:	5802541c 	.word	0x5802541c
 80025d8:	58025430 	.word	0x58025430
 80025dc:	58025444 	.word	0x58025444
 80025e0:	58025458 	.word	0x58025458
 80025e4:	5802546c 	.word	0x5802546c
 80025e8:	58025480 	.word	0x58025480
 80025ec:	58025494 	.word	0x58025494

080025f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7ff fb3e 	bl	8001c78 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e2dc      	b.n	8002bc2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d008      	beq.n	8002626 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2280      	movs	r2, #128	; 0x80
 8002618:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e2cd      	b.n	8002bc2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a76      	ldr	r2, [pc, #472]	; (8002804 <HAL_DMA_Abort+0x214>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d04a      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a74      	ldr	r2, [pc, #464]	; (8002808 <HAL_DMA_Abort+0x218>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d045      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a73      	ldr	r2, [pc, #460]	; (800280c <HAL_DMA_Abort+0x21c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d040      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a71      	ldr	r2, [pc, #452]	; (8002810 <HAL_DMA_Abort+0x220>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d03b      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a70      	ldr	r2, [pc, #448]	; (8002814 <HAL_DMA_Abort+0x224>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d036      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6e      	ldr	r2, [pc, #440]	; (8002818 <HAL_DMA_Abort+0x228>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d031      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a6d      	ldr	r2, [pc, #436]	; (800281c <HAL_DMA_Abort+0x22c>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d02c      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6b      	ldr	r2, [pc, #428]	; (8002820 <HAL_DMA_Abort+0x230>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d027      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6a      	ldr	r2, [pc, #424]	; (8002824 <HAL_DMA_Abort+0x234>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d022      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a68      	ldr	r2, [pc, #416]	; (8002828 <HAL_DMA_Abort+0x238>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d01d      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a67      	ldr	r2, [pc, #412]	; (800282c <HAL_DMA_Abort+0x23c>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d018      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a65      	ldr	r2, [pc, #404]	; (8002830 <HAL_DMA_Abort+0x240>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d013      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a64      	ldr	r2, [pc, #400]	; (8002834 <HAL_DMA_Abort+0x244>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d00e      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a62      	ldr	r2, [pc, #392]	; (8002838 <HAL_DMA_Abort+0x248>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a61      	ldr	r2, [pc, #388]	; (800283c <HAL_DMA_Abort+0x24c>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d004      	beq.n	80026c6 <HAL_DMA_Abort+0xd6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5f      	ldr	r2, [pc, #380]	; (8002840 <HAL_DMA_Abort+0x250>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d101      	bne.n	80026ca <HAL_DMA_Abort+0xda>
 80026c6:	2301      	movs	r3, #1
 80026c8:	e000      	b.n	80026cc <HAL_DMA_Abort+0xdc>
 80026ca:	2300      	movs	r3, #0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d013      	beq.n	80026f8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 021e 	bic.w	r2, r2, #30
 80026de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ee:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e00a      	b.n	800270e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 020e 	bic.w	r2, r2, #14
 8002706:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a3c      	ldr	r2, [pc, #240]	; (8002804 <HAL_DMA_Abort+0x214>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d072      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a3a      	ldr	r2, [pc, #232]	; (8002808 <HAL_DMA_Abort+0x218>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d06d      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a39      	ldr	r2, [pc, #228]	; (800280c <HAL_DMA_Abort+0x21c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d068      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a37      	ldr	r2, [pc, #220]	; (8002810 <HAL_DMA_Abort+0x220>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d063      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a36      	ldr	r2, [pc, #216]	; (8002814 <HAL_DMA_Abort+0x224>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d05e      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_DMA_Abort+0x228>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d059      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a33      	ldr	r2, [pc, #204]	; (800281c <HAL_DMA_Abort+0x22c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d054      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a31      	ldr	r2, [pc, #196]	; (8002820 <HAL_DMA_Abort+0x230>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d04f      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a30      	ldr	r2, [pc, #192]	; (8002824 <HAL_DMA_Abort+0x234>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d04a      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a2e      	ldr	r2, [pc, #184]	; (8002828 <HAL_DMA_Abort+0x238>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d045      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a2d      	ldr	r2, [pc, #180]	; (800282c <HAL_DMA_Abort+0x23c>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d040      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a2b      	ldr	r2, [pc, #172]	; (8002830 <HAL_DMA_Abort+0x240>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d03b      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a2a      	ldr	r2, [pc, #168]	; (8002834 <HAL_DMA_Abort+0x244>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d036      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a28      	ldr	r2, [pc, #160]	; (8002838 <HAL_DMA_Abort+0x248>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d031      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a27      	ldr	r2, [pc, #156]	; (800283c <HAL_DMA_Abort+0x24c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d02c      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a25      	ldr	r2, [pc, #148]	; (8002840 <HAL_DMA_Abort+0x250>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d027      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a24      	ldr	r2, [pc, #144]	; (8002844 <HAL_DMA_Abort+0x254>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d022      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a22      	ldr	r2, [pc, #136]	; (8002848 <HAL_DMA_Abort+0x258>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01d      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a21      	ldr	r2, [pc, #132]	; (800284c <HAL_DMA_Abort+0x25c>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d018      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_DMA_Abort+0x260>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <HAL_DMA_Abort+0x264>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00e      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_DMA_Abort+0x268>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d009      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_DMA_Abort+0x26c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_DMA_Abort+0x20e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_DMA_Abort+0x270>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d132      	bne.n	8002864 <HAL_DMA_Abort+0x274>
 80027fe:	2301      	movs	r3, #1
 8002800:	e031      	b.n	8002866 <HAL_DMA_Abort+0x276>
 8002802:	bf00      	nop
 8002804:	40020010 	.word	0x40020010
 8002808:	40020028 	.word	0x40020028
 800280c:	40020040 	.word	0x40020040
 8002810:	40020058 	.word	0x40020058
 8002814:	40020070 	.word	0x40020070
 8002818:	40020088 	.word	0x40020088
 800281c:	400200a0 	.word	0x400200a0
 8002820:	400200b8 	.word	0x400200b8
 8002824:	40020410 	.word	0x40020410
 8002828:	40020428 	.word	0x40020428
 800282c:	40020440 	.word	0x40020440
 8002830:	40020458 	.word	0x40020458
 8002834:	40020470 	.word	0x40020470
 8002838:	40020488 	.word	0x40020488
 800283c:	400204a0 	.word	0x400204a0
 8002840:	400204b8 	.word	0x400204b8
 8002844:	58025408 	.word	0x58025408
 8002848:	5802541c 	.word	0x5802541c
 800284c:	58025430 	.word	0x58025430
 8002850:	58025444 	.word	0x58025444
 8002854:	58025458 	.word	0x58025458
 8002858:	5802546c 	.word	0x5802546c
 800285c:	58025480 	.word	0x58025480
 8002860:	58025494 	.word	0x58025494
 8002864:	2300      	movs	r3, #0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d007      	beq.n	800287a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002874:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002878:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a6d      	ldr	r2, [pc, #436]	; (8002a34 <HAL_DMA_Abort+0x444>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d04a      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6b      	ldr	r2, [pc, #428]	; (8002a38 <HAL_DMA_Abort+0x448>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d045      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6a      	ldr	r2, [pc, #424]	; (8002a3c <HAL_DMA_Abort+0x44c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d040      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a68      	ldr	r2, [pc, #416]	; (8002a40 <HAL_DMA_Abort+0x450>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d03b      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a67      	ldr	r2, [pc, #412]	; (8002a44 <HAL_DMA_Abort+0x454>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d036      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a65      	ldr	r2, [pc, #404]	; (8002a48 <HAL_DMA_Abort+0x458>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d031      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a64      	ldr	r2, [pc, #400]	; (8002a4c <HAL_DMA_Abort+0x45c>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d02c      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a62      	ldr	r2, [pc, #392]	; (8002a50 <HAL_DMA_Abort+0x460>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d027      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a61      	ldr	r2, [pc, #388]	; (8002a54 <HAL_DMA_Abort+0x464>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d022      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a5f      	ldr	r2, [pc, #380]	; (8002a58 <HAL_DMA_Abort+0x468>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01d      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a5e      	ldr	r2, [pc, #376]	; (8002a5c <HAL_DMA_Abort+0x46c>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d018      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5c      	ldr	r2, [pc, #368]	; (8002a60 <HAL_DMA_Abort+0x470>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d013      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5b      	ldr	r2, [pc, #364]	; (8002a64 <HAL_DMA_Abort+0x474>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a59      	ldr	r2, [pc, #356]	; (8002a68 <HAL_DMA_Abort+0x478>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d009      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a58      	ldr	r2, [pc, #352]	; (8002a6c <HAL_DMA_Abort+0x47c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_DMA_Abort+0x32a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a56      	ldr	r2, [pc, #344]	; (8002a70 <HAL_DMA_Abort+0x480>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d108      	bne.n	800292c <HAL_DMA_Abort+0x33c>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0201 	bic.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e007      	b.n	800293c <HAL_DMA_Abort+0x34c>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800293c:	e013      	b.n	8002966 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800293e:	f7ff f99b 	bl	8001c78 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b05      	cmp	r3, #5
 800294a:	d90c      	bls.n	8002966 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2203      	movs	r2, #3
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e12d      	b.n	8002bc2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1e5      	bne.n	800293e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2f      	ldr	r2, [pc, #188]	; (8002a34 <HAL_DMA_Abort+0x444>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d04a      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2d      	ldr	r2, [pc, #180]	; (8002a38 <HAL_DMA_Abort+0x448>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d045      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2c      	ldr	r2, [pc, #176]	; (8002a3c <HAL_DMA_Abort+0x44c>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d040      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a2a      	ldr	r2, [pc, #168]	; (8002a40 <HAL_DMA_Abort+0x450>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d03b      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a29      	ldr	r2, [pc, #164]	; (8002a44 <HAL_DMA_Abort+0x454>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d036      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a27      	ldr	r2, [pc, #156]	; (8002a48 <HAL_DMA_Abort+0x458>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d031      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a26      	ldr	r2, [pc, #152]	; (8002a4c <HAL_DMA_Abort+0x45c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d02c      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <HAL_DMA_Abort+0x460>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d027      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <HAL_DMA_Abort+0x464>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d022      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a21      	ldr	r2, [pc, #132]	; (8002a58 <HAL_DMA_Abort+0x468>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01d      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a20      	ldr	r2, [pc, #128]	; (8002a5c <HAL_DMA_Abort+0x46c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d018      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1e      	ldr	r2, [pc, #120]	; (8002a60 <HAL_DMA_Abort+0x470>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d013      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a1d      	ldr	r2, [pc, #116]	; (8002a64 <HAL_DMA_Abort+0x474>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d00e      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a1b      	ldr	r2, [pc, #108]	; (8002a68 <HAL_DMA_Abort+0x478>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d009      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_DMA_Abort+0x47c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_DMA_Abort+0x422>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a18      	ldr	r2, [pc, #96]	; (8002a70 <HAL_DMA_Abort+0x480>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d101      	bne.n	8002a16 <HAL_DMA_Abort+0x426>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <HAL_DMA_Abort+0x428>
 8002a16:	2300      	movs	r3, #0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02b      	beq.n	8002a74 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a20:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	223f      	movs	r2, #63	; 0x3f
 8002a2c:	409a      	lsls	r2, r3
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	e02a      	b.n	8002a8a <HAL_DMA_Abort+0x49a>
 8002a34:	40020010 	.word	0x40020010
 8002a38:	40020028 	.word	0x40020028
 8002a3c:	40020040 	.word	0x40020040
 8002a40:	40020058 	.word	0x40020058
 8002a44:	40020070 	.word	0x40020070
 8002a48:	40020088 	.word	0x40020088
 8002a4c:	400200a0 	.word	0x400200a0
 8002a50:	400200b8 	.word	0x400200b8
 8002a54:	40020410 	.word	0x40020410
 8002a58:	40020428 	.word	0x40020428
 8002a5c:	40020440 	.word	0x40020440
 8002a60:	40020458 	.word	0x40020458
 8002a64:	40020470 	.word	0x40020470
 8002a68:	40020488 	.word	0x40020488
 8002a6c:	400204a0 	.word	0x400204a0
 8002a70:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2201      	movs	r2, #1
 8002a84:	409a      	lsls	r2, r3
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a4f      	ldr	r2, [pc, #316]	; (8002bcc <HAL_DMA_Abort+0x5dc>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d072      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a4d      	ldr	r2, [pc, #308]	; (8002bd0 <HAL_DMA_Abort+0x5e0>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d06d      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a4c      	ldr	r2, [pc, #304]	; (8002bd4 <HAL_DMA_Abort+0x5e4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d068      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a4a      	ldr	r2, [pc, #296]	; (8002bd8 <HAL_DMA_Abort+0x5e8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d063      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a49      	ldr	r2, [pc, #292]	; (8002bdc <HAL_DMA_Abort+0x5ec>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d05e      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a47      	ldr	r2, [pc, #284]	; (8002be0 <HAL_DMA_Abort+0x5f0>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d059      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a46      	ldr	r2, [pc, #280]	; (8002be4 <HAL_DMA_Abort+0x5f4>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d054      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a44      	ldr	r2, [pc, #272]	; (8002be8 <HAL_DMA_Abort+0x5f8>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d04f      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a43      	ldr	r2, [pc, #268]	; (8002bec <HAL_DMA_Abort+0x5fc>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d04a      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a41      	ldr	r2, [pc, #260]	; (8002bf0 <HAL_DMA_Abort+0x600>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d045      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a40      	ldr	r2, [pc, #256]	; (8002bf4 <HAL_DMA_Abort+0x604>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d040      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a3e      	ldr	r2, [pc, #248]	; (8002bf8 <HAL_DMA_Abort+0x608>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d03b      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a3d      	ldr	r2, [pc, #244]	; (8002bfc <HAL_DMA_Abort+0x60c>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d036      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a3b      	ldr	r2, [pc, #236]	; (8002c00 <HAL_DMA_Abort+0x610>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d031      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a3a      	ldr	r2, [pc, #232]	; (8002c04 <HAL_DMA_Abort+0x614>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d02c      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a38      	ldr	r2, [pc, #224]	; (8002c08 <HAL_DMA_Abort+0x618>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d027      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a37      	ldr	r2, [pc, #220]	; (8002c0c <HAL_DMA_Abort+0x61c>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a35      	ldr	r2, [pc, #212]	; (8002c10 <HAL_DMA_Abort+0x620>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01d      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a34      	ldr	r2, [pc, #208]	; (8002c14 <HAL_DMA_Abort+0x624>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d018      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a32      	ldr	r2, [pc, #200]	; (8002c18 <HAL_DMA_Abort+0x628>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d013      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a31      	ldr	r2, [pc, #196]	; (8002c1c <HAL_DMA_Abort+0x62c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00e      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a2f      	ldr	r2, [pc, #188]	; (8002c20 <HAL_DMA_Abort+0x630>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a2e      	ldr	r2, [pc, #184]	; (8002c24 <HAL_DMA_Abort+0x634>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d004      	beq.n	8002b7a <HAL_DMA_Abort+0x58a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a2c      	ldr	r2, [pc, #176]	; (8002c28 <HAL_DMA_Abort+0x638>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_DMA_Abort+0x58e>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_DMA_Abort+0x590>
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d015      	beq.n	8002bb0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002b8c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00c      	beq.n	8002bb0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002bae:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40020010 	.word	0x40020010
 8002bd0:	40020028 	.word	0x40020028
 8002bd4:	40020040 	.word	0x40020040
 8002bd8:	40020058 	.word	0x40020058
 8002bdc:	40020070 	.word	0x40020070
 8002be0:	40020088 	.word	0x40020088
 8002be4:	400200a0 	.word	0x400200a0
 8002be8:	400200b8 	.word	0x400200b8
 8002bec:	40020410 	.word	0x40020410
 8002bf0:	40020428 	.word	0x40020428
 8002bf4:	40020440 	.word	0x40020440
 8002bf8:	40020458 	.word	0x40020458
 8002bfc:	40020470 	.word	0x40020470
 8002c00:	40020488 	.word	0x40020488
 8002c04:	400204a0 	.word	0x400204a0
 8002c08:	400204b8 	.word	0x400204b8
 8002c0c:	58025408 	.word	0x58025408
 8002c10:	5802541c 	.word	0x5802541c
 8002c14:	58025430 	.word	0x58025430
 8002c18:	58025444 	.word	0x58025444
 8002c1c:	58025458 	.word	0x58025458
 8002c20:	5802546c 	.word	0x5802546c
 8002c24:	58025480 	.word	0x58025480
 8002c28:	58025494 	.word	0x58025494

08002c2c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e237      	b.n	80030ae <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d004      	beq.n	8002c54 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2280      	movs	r2, #128	; 0x80
 8002c4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e22c      	b.n	80030ae <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a5c      	ldr	r2, [pc, #368]	; (8002dcc <HAL_DMA_Abort_IT+0x1a0>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a5b      	ldr	r2, [pc, #364]	; (8002dd0 <HAL_DMA_Abort_IT+0x1a4>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d045      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a59      	ldr	r2, [pc, #356]	; (8002dd4 <HAL_DMA_Abort_IT+0x1a8>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d040      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a58      	ldr	r2, [pc, #352]	; (8002dd8 <HAL_DMA_Abort_IT+0x1ac>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d03b      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a56      	ldr	r2, [pc, #344]	; (8002ddc <HAL_DMA_Abort_IT+0x1b0>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d036      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a55      	ldr	r2, [pc, #340]	; (8002de0 <HAL_DMA_Abort_IT+0x1b4>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d031      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a53      	ldr	r2, [pc, #332]	; (8002de4 <HAL_DMA_Abort_IT+0x1b8>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02c      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a52      	ldr	r2, [pc, #328]	; (8002de8 <HAL_DMA_Abort_IT+0x1bc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d027      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a50      	ldr	r2, [pc, #320]	; (8002dec <HAL_DMA_Abort_IT+0x1c0>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d022      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a4f      	ldr	r2, [pc, #316]	; (8002df0 <HAL_DMA_Abort_IT+0x1c4>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d01d      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a4d      	ldr	r2, [pc, #308]	; (8002df4 <HAL_DMA_Abort_IT+0x1c8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d018      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a4c      	ldr	r2, [pc, #304]	; (8002df8 <HAL_DMA_Abort_IT+0x1cc>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a4a      	ldr	r2, [pc, #296]	; (8002dfc <HAL_DMA_Abort_IT+0x1d0>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a49      	ldr	r2, [pc, #292]	; (8002e00 <HAL_DMA_Abort_IT+0x1d4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a47      	ldr	r2, [pc, #284]	; (8002e04 <HAL_DMA_Abort_IT+0x1d8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0xc8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a46      	ldr	r2, [pc, #280]	; (8002e08 <HAL_DMA_Abort_IT+0x1dc>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d101      	bne.n	8002cf8 <HAL_DMA_Abort_IT+0xcc>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <HAL_DMA_Abort_IT+0xce>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8086 	beq.w	8002e0c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2204      	movs	r2, #4
 8002d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a2f      	ldr	r2, [pc, #188]	; (8002dcc <HAL_DMA_Abort_IT+0x1a0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d04a      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a2e      	ldr	r2, [pc, #184]	; (8002dd0 <HAL_DMA_Abort_IT+0x1a4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d045      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2c      	ldr	r2, [pc, #176]	; (8002dd4 <HAL_DMA_Abort_IT+0x1a8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d040      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2b      	ldr	r2, [pc, #172]	; (8002dd8 <HAL_DMA_Abort_IT+0x1ac>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d03b      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <HAL_DMA_Abort_IT+0x1b0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d036      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a28      	ldr	r2, [pc, #160]	; (8002de0 <HAL_DMA_Abort_IT+0x1b4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d031      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <HAL_DMA_Abort_IT+0x1b8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d02c      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <HAL_DMA_Abort_IT+0x1bc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d027      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a23      	ldr	r2, [pc, #140]	; (8002dec <HAL_DMA_Abort_IT+0x1c0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d022      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a22      	ldr	r2, [pc, #136]	; (8002df0 <HAL_DMA_Abort_IT+0x1c4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d01d      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a20      	ldr	r2, [pc, #128]	; (8002df4 <HAL_DMA_Abort_IT+0x1c8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d018      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a1f      	ldr	r2, [pc, #124]	; (8002df8 <HAL_DMA_Abort_IT+0x1cc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d013      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a1d      	ldr	r2, [pc, #116]	; (8002dfc <HAL_DMA_Abort_IT+0x1d0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00e      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	; (8002e00 <HAL_DMA_Abort_IT+0x1d4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d009      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1a      	ldr	r2, [pc, #104]	; (8002e04 <HAL_DMA_Abort_IT+0x1d8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d004      	beq.n	8002da8 <HAL_DMA_Abort_IT+0x17c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a19      	ldr	r2, [pc, #100]	; (8002e08 <HAL_DMA_Abort_IT+0x1dc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d108      	bne.n	8002dba <HAL_DMA_Abort_IT+0x18e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	e178      	b.n	80030ac <HAL_DMA_Abort_IT+0x480>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]
 8002dca:	e16f      	b.n	80030ac <HAL_DMA_Abort_IT+0x480>
 8002dcc:	40020010 	.word	0x40020010
 8002dd0:	40020028 	.word	0x40020028
 8002dd4:	40020040 	.word	0x40020040
 8002dd8:	40020058 	.word	0x40020058
 8002ddc:	40020070 	.word	0x40020070
 8002de0:	40020088 	.word	0x40020088
 8002de4:	400200a0 	.word	0x400200a0
 8002de8:	400200b8 	.word	0x400200b8
 8002dec:	40020410 	.word	0x40020410
 8002df0:	40020428 	.word	0x40020428
 8002df4:	40020440 	.word	0x40020440
 8002df8:	40020458 	.word	0x40020458
 8002dfc:	40020470 	.word	0x40020470
 8002e00:	40020488 	.word	0x40020488
 8002e04:	400204a0 	.word	0x400204a0
 8002e08:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 020e 	bic.w	r2, r2, #14
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6c      	ldr	r2, [pc, #432]	; (8002fd4 <HAL_DMA_Abort_IT+0x3a8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d04a      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a6b      	ldr	r2, [pc, #428]	; (8002fd8 <HAL_DMA_Abort_IT+0x3ac>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d045      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a69      	ldr	r2, [pc, #420]	; (8002fdc <HAL_DMA_Abort_IT+0x3b0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d040      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a68      	ldr	r2, [pc, #416]	; (8002fe0 <HAL_DMA_Abort_IT+0x3b4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d03b      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a66      	ldr	r2, [pc, #408]	; (8002fe4 <HAL_DMA_Abort_IT+0x3b8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d036      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a65      	ldr	r2, [pc, #404]	; (8002fe8 <HAL_DMA_Abort_IT+0x3bc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d031      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a63      	ldr	r2, [pc, #396]	; (8002fec <HAL_DMA_Abort_IT+0x3c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d02c      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a62      	ldr	r2, [pc, #392]	; (8002ff0 <HAL_DMA_Abort_IT+0x3c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d027      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a60      	ldr	r2, [pc, #384]	; (8002ff4 <HAL_DMA_Abort_IT+0x3c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d022      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a5f      	ldr	r2, [pc, #380]	; (8002ff8 <HAL_DMA_Abort_IT+0x3cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d01d      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a5d      	ldr	r2, [pc, #372]	; (8002ffc <HAL_DMA_Abort_IT+0x3d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d018      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a5c      	ldr	r2, [pc, #368]	; (8003000 <HAL_DMA_Abort_IT+0x3d4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a5a      	ldr	r2, [pc, #360]	; (8003004 <HAL_DMA_Abort_IT+0x3d8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00e      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a59      	ldr	r2, [pc, #356]	; (8003008 <HAL_DMA_Abort_IT+0x3dc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d009      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a57      	ldr	r2, [pc, #348]	; (800300c <HAL_DMA_Abort_IT+0x3e0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d004      	beq.n	8002ebc <HAL_DMA_Abort_IT+0x290>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a56      	ldr	r2, [pc, #344]	; (8003010 <HAL_DMA_Abort_IT+0x3e4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d108      	bne.n	8002ece <HAL_DMA_Abort_IT+0x2a2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	e007      	b.n	8002ede <HAL_DMA_Abort_IT+0x2b2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a3c      	ldr	r2, [pc, #240]	; (8002fd4 <HAL_DMA_Abort_IT+0x3a8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d072      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3a      	ldr	r2, [pc, #232]	; (8002fd8 <HAL_DMA_Abort_IT+0x3ac>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d06d      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a39      	ldr	r2, [pc, #228]	; (8002fdc <HAL_DMA_Abort_IT+0x3b0>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d068      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a37      	ldr	r2, [pc, #220]	; (8002fe0 <HAL_DMA_Abort_IT+0x3b4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d063      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a36      	ldr	r2, [pc, #216]	; (8002fe4 <HAL_DMA_Abort_IT+0x3b8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d05e      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a34      	ldr	r2, [pc, #208]	; (8002fe8 <HAL_DMA_Abort_IT+0x3bc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d059      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a33      	ldr	r2, [pc, #204]	; (8002fec <HAL_DMA_Abort_IT+0x3c0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d054      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a31      	ldr	r2, [pc, #196]	; (8002ff0 <HAL_DMA_Abort_IT+0x3c4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d04f      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a30      	ldr	r2, [pc, #192]	; (8002ff4 <HAL_DMA_Abort_IT+0x3c8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d04a      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a2e      	ldr	r2, [pc, #184]	; (8002ff8 <HAL_DMA_Abort_IT+0x3cc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d045      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a2d      	ldr	r2, [pc, #180]	; (8002ffc <HAL_DMA_Abort_IT+0x3d0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d040      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a2b      	ldr	r2, [pc, #172]	; (8003000 <HAL_DMA_Abort_IT+0x3d4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d03b      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a2a      	ldr	r2, [pc, #168]	; (8003004 <HAL_DMA_Abort_IT+0x3d8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d036      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a28      	ldr	r2, [pc, #160]	; (8003008 <HAL_DMA_Abort_IT+0x3dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d031      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a27      	ldr	r2, [pc, #156]	; (800300c <HAL_DMA_Abort_IT+0x3e0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d02c      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a25      	ldr	r2, [pc, #148]	; (8003010 <HAL_DMA_Abort_IT+0x3e4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d027      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a24      	ldr	r2, [pc, #144]	; (8003014 <HAL_DMA_Abort_IT+0x3e8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d022      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <HAL_DMA_Abort_IT+0x3ec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d01d      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a21      	ldr	r2, [pc, #132]	; (800301c <HAL_DMA_Abort_IT+0x3f0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d018      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_DMA_Abort_IT+0x3f4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d013      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_DMA_Abort_IT+0x3f8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00e      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_DMA_Abort_IT+0x3fc>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d009      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_DMA_Abort_IT+0x400>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_DMA_Abort_IT+0x3a2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a19      	ldr	r2, [pc, #100]	; (8003030 <HAL_DMA_Abort_IT+0x404>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d132      	bne.n	8003034 <HAL_DMA_Abort_IT+0x408>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e031      	b.n	8003036 <HAL_DMA_Abort_IT+0x40a>
 8002fd2:	bf00      	nop
 8002fd4:	40020010 	.word	0x40020010
 8002fd8:	40020028 	.word	0x40020028
 8002fdc:	40020040 	.word	0x40020040
 8002fe0:	40020058 	.word	0x40020058
 8002fe4:	40020070 	.word	0x40020070
 8002fe8:	40020088 	.word	0x40020088
 8002fec:	400200a0 	.word	0x400200a0
 8002ff0:	400200b8 	.word	0x400200b8
 8002ff4:	40020410 	.word	0x40020410
 8002ff8:	40020428 	.word	0x40020428
 8002ffc:	40020440 	.word	0x40020440
 8003000:	40020458 	.word	0x40020458
 8003004:	40020470 	.word	0x40020470
 8003008:	40020488 	.word	0x40020488
 800300c:	400204a0 	.word	0x400204a0
 8003010:	400204b8 	.word	0x400204b8
 8003014:	58025408 	.word	0x58025408
 8003018:	5802541c 	.word	0x5802541c
 800301c:	58025430 	.word	0x58025430
 8003020:	58025444 	.word	0x58025444
 8003024:	58025458 	.word	0x58025458
 8003028:	5802546c 	.word	0x5802546c
 800302c:	58025480 	.word	0x58025480
 8003030:	58025494 	.word	0x58025494
 8003034:	2300      	movs	r3, #0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d028      	beq.n	800308c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003044:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003048:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	f003 031f 	and.w	r3, r3, #31
 8003058:	2201      	movs	r2, #1
 800305a:	409a      	lsls	r2, r3
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003068:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800307c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003080:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800308a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3710      	adds	r7, #16
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop

080030b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08a      	sub	sp, #40	; 0x28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030c4:	4b67      	ldr	r3, [pc, #412]	; (8003264 <HAL_DMA_IRQHandler+0x1ac>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a67      	ldr	r2, [pc, #412]	; (8003268 <HAL_DMA_IRQHandler+0x1b0>)
 80030ca:	fba2 2303 	umull	r2, r3, r2, r3
 80030ce:	0a9b      	lsrs	r3, r3, #10
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80030de:	6a3b      	ldr	r3, [r7, #32]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a5f      	ldr	r2, [pc, #380]	; (800326c <HAL_DMA_IRQHandler+0x1b4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d04a      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a5d      	ldr	r2, [pc, #372]	; (8003270 <HAL_DMA_IRQHandler+0x1b8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d045      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a5c      	ldr	r2, [pc, #368]	; (8003274 <HAL_DMA_IRQHandler+0x1bc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d040      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a5a      	ldr	r2, [pc, #360]	; (8003278 <HAL_DMA_IRQHandler+0x1c0>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d03b      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a59      	ldr	r2, [pc, #356]	; (800327c <HAL_DMA_IRQHandler+0x1c4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d036      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a57      	ldr	r2, [pc, #348]	; (8003280 <HAL_DMA_IRQHandler+0x1c8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a56      	ldr	r2, [pc, #344]	; (8003284 <HAL_DMA_IRQHandler+0x1cc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d02c      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a54      	ldr	r2, [pc, #336]	; (8003288 <HAL_DMA_IRQHandler+0x1d0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d027      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a53      	ldr	r2, [pc, #332]	; (800328c <HAL_DMA_IRQHandler+0x1d4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d022      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a51      	ldr	r2, [pc, #324]	; (8003290 <HAL_DMA_IRQHandler+0x1d8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01d      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a50      	ldr	r2, [pc, #320]	; (8003294 <HAL_DMA_IRQHandler+0x1dc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d018      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4e      	ldr	r2, [pc, #312]	; (8003298 <HAL_DMA_IRQHandler+0x1e0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4d      	ldr	r2, [pc, #308]	; (800329c <HAL_DMA_IRQHandler+0x1e4>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a4b      	ldr	r2, [pc, #300]	; (80032a0 <HAL_DMA_IRQHandler+0x1e8>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a4a      	ldr	r2, [pc, #296]	; (80032a4 <HAL_DMA_IRQHandler+0x1ec>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_DMA_IRQHandler+0xd2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a48      	ldr	r2, [pc, #288]	; (80032a8 <HAL_DMA_IRQHandler+0x1f0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d101      	bne.n	800318e <HAL_DMA_IRQHandler+0xd6>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_DMA_IRQHandler+0xd8>
 800318e:	2300      	movs	r3, #0
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 842b 	beq.w	80039ec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	2208      	movs	r2, #8
 80031a0:	409a      	lsls	r2, r3
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 80a2 	beq.w	80032f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a2e      	ldr	r2, [pc, #184]	; (800326c <HAL_DMA_IRQHandler+0x1b4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d04a      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2d      	ldr	r2, [pc, #180]	; (8003270 <HAL_DMA_IRQHandler+0x1b8>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d045      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2b      	ldr	r2, [pc, #172]	; (8003274 <HAL_DMA_IRQHandler+0x1bc>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d040      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <HAL_DMA_IRQHandler+0x1c0>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d03b      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a28      	ldr	r2, [pc, #160]	; (800327c <HAL_DMA_IRQHandler+0x1c4>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d036      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a27      	ldr	r2, [pc, #156]	; (8003280 <HAL_DMA_IRQHandler+0x1c8>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d031      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a25      	ldr	r2, [pc, #148]	; (8003284 <HAL_DMA_IRQHandler+0x1cc>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d02c      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a24      	ldr	r2, [pc, #144]	; (8003288 <HAL_DMA_IRQHandler+0x1d0>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d027      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a22      	ldr	r2, [pc, #136]	; (800328c <HAL_DMA_IRQHandler+0x1d4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d022      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a21      	ldr	r2, [pc, #132]	; (8003290 <HAL_DMA_IRQHandler+0x1d8>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d01d      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a1f      	ldr	r2, [pc, #124]	; (8003294 <HAL_DMA_IRQHandler+0x1dc>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d018      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a1e      	ldr	r2, [pc, #120]	; (8003298 <HAL_DMA_IRQHandler+0x1e0>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d013      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a1c      	ldr	r2, [pc, #112]	; (800329c <HAL_DMA_IRQHandler+0x1e4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00e      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_DMA_IRQHandler+0x1e8>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d009      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_DMA_IRQHandler+0x1ec>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d004      	beq.n	800324c <HAL_DMA_IRQHandler+0x194>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a18      	ldr	r2, [pc, #96]	; (80032a8 <HAL_DMA_IRQHandler+0x1f0>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d12f      	bne.n	80032ac <HAL_DMA_IRQHandler+0x1f4>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0304 	and.w	r3, r3, #4
 8003256:	2b00      	cmp	r3, #0
 8003258:	bf14      	ite	ne
 800325a:	2301      	movne	r3, #1
 800325c:	2300      	moveq	r3, #0
 800325e:	b2db      	uxtb	r3, r3
 8003260:	e02e      	b.n	80032c0 <HAL_DMA_IRQHandler+0x208>
 8003262:	bf00      	nop
 8003264:	24000000 	.word	0x24000000
 8003268:	1b4e81b5 	.word	0x1b4e81b5
 800326c:	40020010 	.word	0x40020010
 8003270:	40020028 	.word	0x40020028
 8003274:	40020040 	.word	0x40020040
 8003278:	40020058 	.word	0x40020058
 800327c:	40020070 	.word	0x40020070
 8003280:	40020088 	.word	0x40020088
 8003284:	400200a0 	.word	0x400200a0
 8003288:	400200b8 	.word	0x400200b8
 800328c:	40020410 	.word	0x40020410
 8003290:	40020428 	.word	0x40020428
 8003294:	40020440 	.word	0x40020440
 8003298:	40020458 	.word	0x40020458
 800329c:	40020470 	.word	0x40020470
 80032a0:	40020488 	.word	0x40020488
 80032a4:	400204a0 	.word	0x400204a0
 80032a8:	400204b8 	.word	0x400204b8
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	bf14      	ite	ne
 80032ba:	2301      	movne	r3, #1
 80032bc:	2300      	moveq	r3, #0
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d015      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0204 	bic.w	r2, r2, #4
 80032d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2208      	movs	r2, #8
 80032de:	409a      	lsls	r2, r3
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f043 0201 	orr.w	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d06e      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a69      	ldr	r2, [pc, #420]	; (80034b0 <HAL_DMA_IRQHandler+0x3f8>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d04a      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a67      	ldr	r2, [pc, #412]	; (80034b4 <HAL_DMA_IRQHandler+0x3fc>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d045      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a66      	ldr	r2, [pc, #408]	; (80034b8 <HAL_DMA_IRQHandler+0x400>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d040      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a64      	ldr	r2, [pc, #400]	; (80034bc <HAL_DMA_IRQHandler+0x404>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d03b      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a63      	ldr	r2, [pc, #396]	; (80034c0 <HAL_DMA_IRQHandler+0x408>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d036      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a61      	ldr	r2, [pc, #388]	; (80034c4 <HAL_DMA_IRQHandler+0x40c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d031      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a60      	ldr	r2, [pc, #384]	; (80034c8 <HAL_DMA_IRQHandler+0x410>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d02c      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a5e      	ldr	r2, [pc, #376]	; (80034cc <HAL_DMA_IRQHandler+0x414>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d027      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a5d      	ldr	r2, [pc, #372]	; (80034d0 <HAL_DMA_IRQHandler+0x418>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d022      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a5b      	ldr	r2, [pc, #364]	; (80034d4 <HAL_DMA_IRQHandler+0x41c>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d01d      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a5a      	ldr	r2, [pc, #360]	; (80034d8 <HAL_DMA_IRQHandler+0x420>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d018      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_DMA_IRQHandler+0x424>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a57      	ldr	r2, [pc, #348]	; (80034e0 <HAL_DMA_IRQHandler+0x428>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a55      	ldr	r2, [pc, #340]	; (80034e4 <HAL_DMA_IRQHandler+0x42c>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a54      	ldr	r2, [pc, #336]	; (80034e8 <HAL_DMA_IRQHandler+0x430>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_DMA_IRQHandler+0x2ee>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a52      	ldr	r2, [pc, #328]	; (80034ec <HAL_DMA_IRQHandler+0x434>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10a      	bne.n	80033bc <HAL_DMA_IRQHandler+0x304>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	bf14      	ite	ne
 80033b4:	2301      	movne	r3, #1
 80033b6:	2300      	moveq	r3, #0
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	e003      	b.n	80033c4 <HAL_DMA_IRQHandler+0x30c>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00d      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033cc:	f003 031f 	and.w	r3, r3, #31
 80033d0:	2201      	movs	r2, #1
 80033d2:	409a      	lsls	r2, r3
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033dc:	f043 0202 	orr.w	r2, r3, #2
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	2204      	movs	r2, #4
 80033ee:	409a      	lsls	r2, r3
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 808f 	beq.w	8003518 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a2c      	ldr	r2, [pc, #176]	; (80034b0 <HAL_DMA_IRQHandler+0x3f8>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d04a      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <HAL_DMA_IRQHandler+0x3fc>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d045      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <HAL_DMA_IRQHandler+0x400>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d040      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a27      	ldr	r2, [pc, #156]	; (80034bc <HAL_DMA_IRQHandler+0x404>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d03b      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a26      	ldr	r2, [pc, #152]	; (80034c0 <HAL_DMA_IRQHandler+0x408>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d036      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <HAL_DMA_IRQHandler+0x40c>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d031      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a23      	ldr	r2, [pc, #140]	; (80034c8 <HAL_DMA_IRQHandler+0x410>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d02c      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a21      	ldr	r2, [pc, #132]	; (80034cc <HAL_DMA_IRQHandler+0x414>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d027      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a20      	ldr	r2, [pc, #128]	; (80034d0 <HAL_DMA_IRQHandler+0x418>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d022      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a1e      	ldr	r2, [pc, #120]	; (80034d4 <HAL_DMA_IRQHandler+0x41c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01d      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a1d      	ldr	r2, [pc, #116]	; (80034d8 <HAL_DMA_IRQHandler+0x420>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1b      	ldr	r2, [pc, #108]	; (80034dc <HAL_DMA_IRQHandler+0x424>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1a      	ldr	r2, [pc, #104]	; (80034e0 <HAL_DMA_IRQHandler+0x428>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_DMA_IRQHandler+0x42c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_DMA_IRQHandler+0x430>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_DMA_IRQHandler+0x3e2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a15      	ldr	r2, [pc, #84]	; (80034ec <HAL_DMA_IRQHandler+0x434>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d12a      	bne.n	80034f0 <HAL_DMA_IRQHandler+0x438>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf14      	ite	ne
 80034a8:	2301      	movne	r3, #1
 80034aa:	2300      	moveq	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e023      	b.n	80034f8 <HAL_DMA_IRQHandler+0x440>
 80034b0:	40020010 	.word	0x40020010
 80034b4:	40020028 	.word	0x40020028
 80034b8:	40020040 	.word	0x40020040
 80034bc:	40020058 	.word	0x40020058
 80034c0:	40020070 	.word	0x40020070
 80034c4:	40020088 	.word	0x40020088
 80034c8:	400200a0 	.word	0x400200a0
 80034cc:	400200b8 	.word	0x400200b8
 80034d0:	40020410 	.word	0x40020410
 80034d4:	40020428 	.word	0x40020428
 80034d8:	40020440 	.word	0x40020440
 80034dc:	40020458 	.word	0x40020458
 80034e0:	40020470 	.word	0x40020470
 80034e4:	40020488 	.word	0x40020488
 80034e8:	400204a0 	.word	0x400204a0
 80034ec:	400204b8 	.word	0x400204b8
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2300      	movs	r3, #0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2204      	movs	r2, #4
 8003506:	409a      	lsls	r2, r3
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	f003 031f 	and.w	r3, r3, #31
 8003520:	2210      	movs	r2, #16
 8003522:	409a      	lsls	r2, r3
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4013      	ands	r3, r2
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80a6 	beq.w	800367a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a85      	ldr	r2, [pc, #532]	; (8003748 <HAL_DMA_IRQHandler+0x690>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d04a      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a83      	ldr	r2, [pc, #524]	; (800374c <HAL_DMA_IRQHandler+0x694>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d045      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a82      	ldr	r2, [pc, #520]	; (8003750 <HAL_DMA_IRQHandler+0x698>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d040      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a80      	ldr	r2, [pc, #512]	; (8003754 <HAL_DMA_IRQHandler+0x69c>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d03b      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a7f      	ldr	r2, [pc, #508]	; (8003758 <HAL_DMA_IRQHandler+0x6a0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d036      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a7d      	ldr	r2, [pc, #500]	; (800375c <HAL_DMA_IRQHandler+0x6a4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d031      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a7c      	ldr	r2, [pc, #496]	; (8003760 <HAL_DMA_IRQHandler+0x6a8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d02c      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a7a      	ldr	r2, [pc, #488]	; (8003764 <HAL_DMA_IRQHandler+0x6ac>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d027      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a79      	ldr	r2, [pc, #484]	; (8003768 <HAL_DMA_IRQHandler+0x6b0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d022      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a77      	ldr	r2, [pc, #476]	; (800376c <HAL_DMA_IRQHandler+0x6b4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d01d      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a76      	ldr	r2, [pc, #472]	; (8003770 <HAL_DMA_IRQHandler+0x6b8>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d018      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a74      	ldr	r2, [pc, #464]	; (8003774 <HAL_DMA_IRQHandler+0x6bc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d013      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a73      	ldr	r2, [pc, #460]	; (8003778 <HAL_DMA_IRQHandler+0x6c0>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d00e      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a71      	ldr	r2, [pc, #452]	; (800377c <HAL_DMA_IRQHandler+0x6c4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d009      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a70      	ldr	r2, [pc, #448]	; (8003780 <HAL_DMA_IRQHandler+0x6c8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d004      	beq.n	80035ce <HAL_DMA_IRQHandler+0x516>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6e      	ldr	r2, [pc, #440]	; (8003784 <HAL_DMA_IRQHandler+0x6cc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d10a      	bne.n	80035e4 <HAL_DMA_IRQHandler+0x52c>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b00      	cmp	r3, #0
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	e009      	b.n	80035f8 <HAL_DMA_IRQHandler+0x540>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0304 	and.w	r3, r3, #4
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	bf14      	ite	ne
 80035f2:	2301      	movne	r3, #1
 80035f4:	2300      	moveq	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03e      	beq.n	800367a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2210      	movs	r2, #16
 8003606:	409a      	lsls	r2, r3
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d018      	beq.n	800364c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d108      	bne.n	800363a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	2b00      	cmp	r3, #0
 800362e:	d024      	beq.n	800367a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	4798      	blx	r3
 8003638:	e01f      	b.n	800367a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d01b      	beq.n	800367a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
 800364a:	e016      	b.n	800367a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f022 0208 	bic.w	r2, r2, #8
 8003668:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800367e:	f003 031f 	and.w	r3, r3, #31
 8003682:	2220      	movs	r2, #32
 8003684:	409a      	lsls	r2, r3
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	f000 8110 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a2c      	ldr	r2, [pc, #176]	; (8003748 <HAL_DMA_IRQHandler+0x690>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d04a      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a2b      	ldr	r2, [pc, #172]	; (800374c <HAL_DMA_IRQHandler+0x694>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d045      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_DMA_IRQHandler+0x698>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d040      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a28      	ldr	r2, [pc, #160]	; (8003754 <HAL_DMA_IRQHandler+0x69c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d03b      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a26      	ldr	r2, [pc, #152]	; (8003758 <HAL_DMA_IRQHandler+0x6a0>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d036      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a25      	ldr	r2, [pc, #148]	; (800375c <HAL_DMA_IRQHandler+0x6a4>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d031      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a23      	ldr	r2, [pc, #140]	; (8003760 <HAL_DMA_IRQHandler+0x6a8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d02c      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a22      	ldr	r2, [pc, #136]	; (8003764 <HAL_DMA_IRQHandler+0x6ac>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d027      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a20      	ldr	r2, [pc, #128]	; (8003768 <HAL_DMA_IRQHandler+0x6b0>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d022      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_DMA_IRQHandler+0x6b4>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d01d      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1d      	ldr	r2, [pc, #116]	; (8003770 <HAL_DMA_IRQHandler+0x6b8>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d018      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <HAL_DMA_IRQHandler+0x6bc>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d013      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a1a      	ldr	r2, [pc, #104]	; (8003778 <HAL_DMA_IRQHandler+0x6c0>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00e      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a19      	ldr	r2, [pc, #100]	; (800377c <HAL_DMA_IRQHandler+0x6c4>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d009      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_DMA_IRQHandler+0x6c8>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d004      	beq.n	8003730 <HAL_DMA_IRQHandler+0x678>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a16      	ldr	r2, [pc, #88]	; (8003784 <HAL_DMA_IRQHandler+0x6cc>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d12b      	bne.n	8003788 <HAL_DMA_IRQHandler+0x6d0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0310 	and.w	r3, r3, #16
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf14      	ite	ne
 800373e:	2301      	movne	r3, #1
 8003740:	2300      	moveq	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	e02a      	b.n	800379c <HAL_DMA_IRQHandler+0x6e4>
 8003746:	bf00      	nop
 8003748:	40020010 	.word	0x40020010
 800374c:	40020028 	.word	0x40020028
 8003750:	40020040 	.word	0x40020040
 8003754:	40020058 	.word	0x40020058
 8003758:	40020070 	.word	0x40020070
 800375c:	40020088 	.word	0x40020088
 8003760:	400200a0 	.word	0x400200a0
 8003764:	400200b8 	.word	0x400200b8
 8003768:	40020410 	.word	0x40020410
 800376c:	40020428 	.word	0x40020428
 8003770:	40020440 	.word	0x40020440
 8003774:	40020458 	.word	0x40020458
 8003778:	40020470 	.word	0x40020470
 800377c:	40020488 	.word	0x40020488
 8003780:	400204a0 	.word	0x400204a0
 8003784:	400204b8 	.word	0x400204b8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	bf14      	ite	ne
 8003796:	2301      	movne	r3, #1
 8003798:	2300      	moveq	r3, #0
 800379a:	b2db      	uxtb	r3, r3
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8087 	beq.w	80038b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2220      	movs	r2, #32
 80037ac:	409a      	lsls	r2, r3
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d139      	bne.n	8003832 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0216 	bic.w	r2, r2, #22
 80037cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d103      	bne.n	80037ee <HAL_DMA_IRQHandler+0x736>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d007      	beq.n	80037fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0208 	bic.w	r2, r2, #8
 80037fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	f003 031f 	and.w	r3, r3, #31
 8003806:	223f      	movs	r2, #63	; 0x3f
 8003808:	409a      	lsls	r2, r3
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 834a 	beq.w	8003ebc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
          }
          return;
 8003830:	e344      	b.n	8003ebc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d018      	beq.n	8003872 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	2b00      	cmp	r3, #0
 8003854:	d02c      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
 800385e:	e027      	b.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
 8003870:	e01e      	b.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10f      	bne.n	80038a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0210 	bic.w	r2, r2, #16
 800388e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d003      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8306 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 8088 	beq.w	80039d8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2204      	movs	r2, #4
 80038cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7a      	ldr	r2, [pc, #488]	; (8003ac0 <HAL_DMA_IRQHandler+0xa08>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d04a      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a79      	ldr	r2, [pc, #484]	; (8003ac4 <HAL_DMA_IRQHandler+0xa0c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d045      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a77      	ldr	r2, [pc, #476]	; (8003ac8 <HAL_DMA_IRQHandler+0xa10>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d040      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a76      	ldr	r2, [pc, #472]	; (8003acc <HAL_DMA_IRQHandler+0xa14>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d03b      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a74      	ldr	r2, [pc, #464]	; (8003ad0 <HAL_DMA_IRQHandler+0xa18>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d036      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a73      	ldr	r2, [pc, #460]	; (8003ad4 <HAL_DMA_IRQHandler+0xa1c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d031      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a71      	ldr	r2, [pc, #452]	; (8003ad8 <HAL_DMA_IRQHandler+0xa20>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d02c      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a70      	ldr	r2, [pc, #448]	; (8003adc <HAL_DMA_IRQHandler+0xa24>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d027      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a6e      	ldr	r2, [pc, #440]	; (8003ae0 <HAL_DMA_IRQHandler+0xa28>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d022      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a6d      	ldr	r2, [pc, #436]	; (8003ae4 <HAL_DMA_IRQHandler+0xa2c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d01d      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a6b      	ldr	r2, [pc, #428]	; (8003ae8 <HAL_DMA_IRQHandler+0xa30>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d018      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a6a      	ldr	r2, [pc, #424]	; (8003aec <HAL_DMA_IRQHandler+0xa34>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d013      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a68      	ldr	r2, [pc, #416]	; (8003af0 <HAL_DMA_IRQHandler+0xa38>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00e      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a67      	ldr	r2, [pc, #412]	; (8003af4 <HAL_DMA_IRQHandler+0xa3c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d009      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a65      	ldr	r2, [pc, #404]	; (8003af8 <HAL_DMA_IRQHandler+0xa40>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d004      	beq.n	8003970 <HAL_DMA_IRQHandler+0x8b8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a64      	ldr	r2, [pc, #400]	; (8003afc <HAL_DMA_IRQHandler+0xa44>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d108      	bne.n	8003982 <HAL_DMA_IRQHandler+0x8ca>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	e007      	b.n	8003992 <HAL_DMA_IRQHandler+0x8da>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0201 	bic.w	r2, r2, #1
 8003990:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	3301      	adds	r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	429a      	cmp	r2, r3
 800399c:	d307      	bcc.n	80039ae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f2      	bne.n	8003992 <HAL_DMA_IRQHandler+0x8da>
 80039ac:	e000      	b.n	80039b0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80039ae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d004      	beq.n	80039c8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2203      	movs	r2, #3
 80039c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80039c6:	e003      	b.n	80039d0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8272 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	4798      	blx	r3
 80039ea:	e26c      	b.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a43      	ldr	r2, [pc, #268]	; (8003b00 <HAL_DMA_IRQHandler+0xa48>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d022      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a42      	ldr	r2, [pc, #264]	; (8003b04 <HAL_DMA_IRQHandler+0xa4c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d01d      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a40      	ldr	r2, [pc, #256]	; (8003b08 <HAL_DMA_IRQHandler+0xa50>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d018      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a3f      	ldr	r2, [pc, #252]	; (8003b0c <HAL_DMA_IRQHandler+0xa54>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a3d      	ldr	r2, [pc, #244]	; (8003b10 <HAL_DMA_IRQHandler+0xa58>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d00e      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a3c      	ldr	r2, [pc, #240]	; (8003b14 <HAL_DMA_IRQHandler+0xa5c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d009      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3a      	ldr	r2, [pc, #232]	; (8003b18 <HAL_DMA_IRQHandler+0xa60>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d004      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x984>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a39      	ldr	r2, [pc, #228]	; (8003b1c <HAL_DMA_IRQHandler+0xa64>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d101      	bne.n	8003a40 <HAL_DMA_IRQHandler+0x988>
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e000      	b.n	8003a42 <HAL_DMA_IRQHandler+0x98a>
 8003a40:	2300      	movs	r3, #0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 823f 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a54:	f003 031f 	and.w	r3, r3, #31
 8003a58:	2204      	movs	r2, #4
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80cd 	beq.w	8003c00 <HAL_DMA_IRQHandler+0xb48>
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80c7 	beq.w	8003c00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a76:	f003 031f 	and.w	r3, r3, #31
 8003a7a:	2204      	movs	r2, #4
 8003a7c:	409a      	lsls	r2, r3
 8003a7e:	69fb      	ldr	r3, [r7, #28]
 8003a80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d049      	beq.n	8003b20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8210 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa8:	e20a      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	f000 8206 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003abc:	e200      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe08>
 8003abe:	bf00      	nop
 8003ac0:	40020010 	.word	0x40020010
 8003ac4:	40020028 	.word	0x40020028
 8003ac8:	40020040 	.word	0x40020040
 8003acc:	40020058 	.word	0x40020058
 8003ad0:	40020070 	.word	0x40020070
 8003ad4:	40020088 	.word	0x40020088
 8003ad8:	400200a0 	.word	0x400200a0
 8003adc:	400200b8 	.word	0x400200b8
 8003ae0:	40020410 	.word	0x40020410
 8003ae4:	40020428 	.word	0x40020428
 8003ae8:	40020440 	.word	0x40020440
 8003aec:	40020458 	.word	0x40020458
 8003af0:	40020470 	.word	0x40020470
 8003af4:	40020488 	.word	0x40020488
 8003af8:	400204a0 	.word	0x400204a0
 8003afc:	400204b8 	.word	0x400204b8
 8003b00:	58025408 	.word	0x58025408
 8003b04:	5802541c 	.word	0x5802541c
 8003b08:	58025430 	.word	0x58025430
 8003b0c:	58025444 	.word	0x58025444
 8003b10:	58025458 	.word	0x58025458
 8003b14:	5802546c 	.word	0x5802546c
 8003b18:	58025480 	.word	0x58025480
 8003b1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d160      	bne.n	8003bec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a7f      	ldr	r2, [pc, #508]	; (8003d2c <HAL_DMA_IRQHandler+0xc74>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a7d      	ldr	r2, [pc, #500]	; (8003d30 <HAL_DMA_IRQHandler+0xc78>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a7c      	ldr	r2, [pc, #496]	; (8003d34 <HAL_DMA_IRQHandler+0xc7c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7a      	ldr	r2, [pc, #488]	; (8003d38 <HAL_DMA_IRQHandler+0xc80>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d03b      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a79      	ldr	r2, [pc, #484]	; (8003d3c <HAL_DMA_IRQHandler+0xc84>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d036      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a77      	ldr	r2, [pc, #476]	; (8003d40 <HAL_DMA_IRQHandler+0xc88>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a76      	ldr	r2, [pc, #472]	; (8003d44 <HAL_DMA_IRQHandler+0xc8c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02c      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a74      	ldr	r2, [pc, #464]	; (8003d48 <HAL_DMA_IRQHandler+0xc90>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a73      	ldr	r2, [pc, #460]	; (8003d4c <HAL_DMA_IRQHandler+0xc94>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a71      	ldr	r2, [pc, #452]	; (8003d50 <HAL_DMA_IRQHandler+0xc98>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a70      	ldr	r2, [pc, #448]	; (8003d54 <HAL_DMA_IRQHandler+0xc9c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a6e      	ldr	r2, [pc, #440]	; (8003d58 <HAL_DMA_IRQHandler+0xca0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a6d      	ldr	r2, [pc, #436]	; (8003d5c <HAL_DMA_IRQHandler+0xca4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a6b      	ldr	r2, [pc, #428]	; (8003d60 <HAL_DMA_IRQHandler+0xca8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6a      	ldr	r2, [pc, #424]	; (8003d64 <HAL_DMA_IRQHandler+0xcac>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_IRQHandler+0xb12>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a68      	ldr	r2, [pc, #416]	; (8003d68 <HAL_DMA_IRQHandler+0xcb0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d108      	bne.n	8003bdc <HAL_DMA_IRQHandler+0xb24>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0208 	bic.w	r2, r2, #8
 8003bd8:	601a      	str	r2, [r3, #0]
 8003bda:	e007      	b.n	8003bec <HAL_DMA_IRQHandler+0xb34>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0204 	bic.w	r2, r2, #4
 8003bea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	f000 8165 	beq.w	8003ec0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bfe:	e15f      	b.n	8003ec0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c04:	f003 031f 	and.w	r3, r3, #31
 8003c08:	2202      	movs	r2, #2
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80c5 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xce8>
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80bf 	beq.w	8003da0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d018      	beq.n	8003c6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d109      	bne.n	8003c5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 813a 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c58:	e134      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8130 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c6c:	e12a      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f040 8089 	bne.w	8003d8c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a2b      	ldr	r2, [pc, #172]	; (8003d2c <HAL_DMA_IRQHandler+0xc74>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d04a      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <HAL_DMA_IRQHandler+0xc78>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d045      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a28      	ldr	r2, [pc, #160]	; (8003d34 <HAL_DMA_IRQHandler+0xc7c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d040      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a26      	ldr	r2, [pc, #152]	; (8003d38 <HAL_DMA_IRQHandler+0xc80>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d03b      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a25      	ldr	r2, [pc, #148]	; (8003d3c <HAL_DMA_IRQHandler+0xc84>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d036      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a23      	ldr	r2, [pc, #140]	; (8003d40 <HAL_DMA_IRQHandler+0xc88>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d031      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a22      	ldr	r2, [pc, #136]	; (8003d44 <HAL_DMA_IRQHandler+0xc8c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d02c      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <HAL_DMA_IRQHandler+0xc90>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d027      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <HAL_DMA_IRQHandler+0xc94>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d022      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <HAL_DMA_IRQHandler+0xc98>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d01d      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1c      	ldr	r2, [pc, #112]	; (8003d54 <HAL_DMA_IRQHandler+0xc9c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d018      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <HAL_DMA_IRQHandler+0xca0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <HAL_DMA_IRQHandler+0xca4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d00e      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a17      	ldr	r2, [pc, #92]	; (8003d60 <HAL_DMA_IRQHandler+0xca8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d009      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a16      	ldr	r2, [pc, #88]	; (8003d64 <HAL_DMA_IRQHandler+0xcac>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d004      	beq.n	8003d1a <HAL_DMA_IRQHandler+0xc62>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a14      	ldr	r2, [pc, #80]	; (8003d68 <HAL_DMA_IRQHandler+0xcb0>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d128      	bne.n	8003d6c <HAL_DMA_IRQHandler+0xcb4>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0214 	bic.w	r2, r2, #20
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e027      	b.n	8003d7c <HAL_DMA_IRQHandler+0xcc4>
 8003d2c:	40020010 	.word	0x40020010
 8003d30:	40020028 	.word	0x40020028
 8003d34:	40020040 	.word	0x40020040
 8003d38:	40020058 	.word	0x40020058
 8003d3c:	40020070 	.word	0x40020070
 8003d40:	40020088 	.word	0x40020088
 8003d44:	400200a0 	.word	0x400200a0
 8003d48:	400200b8 	.word	0x400200b8
 8003d4c:	40020410 	.word	0x40020410
 8003d50:	40020428 	.word	0x40020428
 8003d54:	40020440 	.word	0x40020440
 8003d58:	40020458 	.word	0x40020458
 8003d5c:	40020470 	.word	0x40020470
 8003d60:	40020488 	.word	0x40020488
 8003d64:	400204a0 	.word	0x400204a0
 8003d68:	400204b8 	.word	0x400204b8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 020a 	bic.w	r2, r2, #10
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 8097 	beq.w	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003d9e:	e091      	b.n	8003ec4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da4:	f003 031f 	and.w	r3, r3, #31
 8003da8:	2208      	movs	r2, #8
 8003daa:	409a      	lsls	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4013      	ands	r3, r2
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f000 8088 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	f003 0308 	and.w	r3, r3, #8
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8082 	beq.w	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a41      	ldr	r2, [pc, #260]	; (8003ecc <HAL_DMA_IRQHandler+0xe14>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a3f      	ldr	r2, [pc, #252]	; (8003ed0 <HAL_DMA_IRQHandler+0xe18>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d045      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a3e      	ldr	r2, [pc, #248]	; (8003ed4 <HAL_DMA_IRQHandler+0xe1c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <HAL_DMA_IRQHandler+0xe20>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d03b      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a3b      	ldr	r2, [pc, #236]	; (8003edc <HAL_DMA_IRQHandler+0xe24>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a39      	ldr	r2, [pc, #228]	; (8003ee0 <HAL_DMA_IRQHandler+0xe28>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a38      	ldr	r2, [pc, #224]	; (8003ee4 <HAL_DMA_IRQHandler+0xe2c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d02c      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a36      	ldr	r2, [pc, #216]	; (8003ee8 <HAL_DMA_IRQHandler+0xe30>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d027      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a35      	ldr	r2, [pc, #212]	; (8003eec <HAL_DMA_IRQHandler+0xe34>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a33      	ldr	r2, [pc, #204]	; (8003ef0 <HAL_DMA_IRQHandler+0xe38>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a32      	ldr	r2, [pc, #200]	; (8003ef4 <HAL_DMA_IRQHandler+0xe3c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a30      	ldr	r2, [pc, #192]	; (8003ef8 <HAL_DMA_IRQHandler+0xe40>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2f      	ldr	r2, [pc, #188]	; (8003efc <HAL_DMA_IRQHandler+0xe44>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2d      	ldr	r2, [pc, #180]	; (8003f00 <HAL_DMA_IRQHandler+0xe48>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <HAL_DMA_IRQHandler+0xe4c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_IRQHandler+0xdaa>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a2a      	ldr	r2, [pc, #168]	; (8003f08 <HAL_DMA_IRQHandler+0xe50>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d108      	bne.n	8003e74 <HAL_DMA_IRQHandler+0xdbc>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 021c 	bic.w	r2, r2, #28
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e007      	b.n	8003e84 <HAL_DMA_IRQHandler+0xdcc>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 020e 	bic.w	r2, r2, #14
 8003e82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e88:	f003 031f 	and.w	r3, r3, #31
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	409a      	lsls	r2, r3
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d009      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	4798      	blx	r3
 8003eba:	e004      	b.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ebc:	bf00      	nop
 8003ebe:	e002      	b.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec0:	bf00      	nop
 8003ec2:	e000      	b.n	8003ec6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ec4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ec6:	3728      	adds	r7, #40	; 0x28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40020010 	.word	0x40020010
 8003ed0:	40020028 	.word	0x40020028
 8003ed4:	40020040 	.word	0x40020040
 8003ed8:	40020058 	.word	0x40020058
 8003edc:	40020070 	.word	0x40020070
 8003ee0:	40020088 	.word	0x40020088
 8003ee4:	400200a0 	.word	0x400200a0
 8003ee8:	400200b8 	.word	0x400200b8
 8003eec:	40020410 	.word	0x40020410
 8003ef0:	40020428 	.word	0x40020428
 8003ef4:	40020440 	.word	0x40020440
 8003ef8:	40020458 	.word	0x40020458
 8003efc:	40020470 	.word	0x40020470
 8003f00:	40020488 	.word	0x40020488
 8003f04:	400204a0 	.word	0x400204a0
 8003f08:	400204b8 	.word	0x400204b8

08003f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a42      	ldr	r2, [pc, #264]	; (8004024 <DMA_CalcBaseAndBitshift+0x118>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d04a      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a41      	ldr	r2, [pc, #260]	; (8004028 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d045      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a3f      	ldr	r2, [pc, #252]	; (800402c <DMA_CalcBaseAndBitshift+0x120>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d040      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a3e      	ldr	r2, [pc, #248]	; (8004030 <DMA_CalcBaseAndBitshift+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d03b      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <DMA_CalcBaseAndBitshift+0x128>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d036      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d031      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a39      	ldr	r2, [pc, #228]	; (800403c <DMA_CalcBaseAndBitshift+0x130>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02c      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a38      	ldr	r2, [pc, #224]	; (8004040 <DMA_CalcBaseAndBitshift+0x134>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d027      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a36      	ldr	r2, [pc, #216]	; (8004044 <DMA_CalcBaseAndBitshift+0x138>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d022      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a35      	ldr	r2, [pc, #212]	; (8004048 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01d      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a33      	ldr	r2, [pc, #204]	; (800404c <DMA_CalcBaseAndBitshift+0x140>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d018      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a32      	ldr	r2, [pc, #200]	; (8004050 <DMA_CalcBaseAndBitshift+0x144>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a30      	ldr	r2, [pc, #192]	; (8004054 <DMA_CalcBaseAndBitshift+0x148>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00e      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	; (800405c <DMA_CalcBaseAndBitshift+0x150>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2c      	ldr	r2, [pc, #176]	; (8004060 <DMA_CalcBaseAndBitshift+0x154>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <DMA_CalcBaseAndBitshift+0xac>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <DMA_CalcBaseAndBitshift+0xae>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d024      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3b10      	subs	r3, #16
 8003fc6:	4a27      	ldr	r2, [pc, #156]	; (8004064 <DMA_CalcBaseAndBitshift+0x158>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	4a24      	ldr	r2, [pc, #144]	; (8004068 <DMA_CalcBaseAndBitshift+0x15c>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d908      	bls.n	8003ff8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b1f      	ldr	r3, [pc, #124]	; (800406c <DMA_CalcBaseAndBitshift+0x160>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	659a      	str	r2, [r3, #88]	; 0x58
 8003ff6:	e00d      	b.n	8004014 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	; (800406c <DMA_CalcBaseAndBitshift+0x160>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6593      	str	r3, [r2, #88]	; 0x58
 8004006:	e005      	b.n	8004014 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40020010 	.word	0x40020010
 8004028:	40020028 	.word	0x40020028
 800402c:	40020040 	.word	0x40020040
 8004030:	40020058 	.word	0x40020058
 8004034:	40020070 	.word	0x40020070
 8004038:	40020088 	.word	0x40020088
 800403c:	400200a0 	.word	0x400200a0
 8004040:	400200b8 	.word	0x400200b8
 8004044:	40020410 	.word	0x40020410
 8004048:	40020428 	.word	0x40020428
 800404c:	40020440 	.word	0x40020440
 8004050:	40020458 	.word	0x40020458
 8004054:	40020470 	.word	0x40020470
 8004058:	40020488 	.word	0x40020488
 800405c:	400204a0 	.word	0x400204a0
 8004060:	400204b8 	.word	0x400204b8
 8004064:	aaaaaaab 	.word	0xaaaaaaab
 8004068:	0800cb00 	.word	0x0800cb00
 800406c:	fffffc00 	.word	0xfffffc00

08004070 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d120      	bne.n	80040c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	2b03      	cmp	r3, #3
 800408a:	d858      	bhi.n	800413e <DMA_CheckFifoParam+0xce>
 800408c:	a201      	add	r2, pc, #4	; (adr r2, 8004094 <DMA_CheckFifoParam+0x24>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040a5 	.word	0x080040a5
 8004098:	080040b7 	.word	0x080040b7
 800409c:	080040a5 	.word	0x080040a5
 80040a0:	0800413f 	.word	0x0800413f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d048      	beq.n	8004142 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040b4:	e045      	b.n	8004142 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040be:	d142      	bne.n	8004146 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040c4:	e03f      	b.n	8004146 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ce:	d123      	bne.n	8004118 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d838      	bhi.n	800414a <DMA_CheckFifoParam+0xda>
 80040d8:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <DMA_CheckFifoParam+0x70>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	080040f1 	.word	0x080040f1
 80040e4:	080040f7 	.word	0x080040f7
 80040e8:	080040f1 	.word	0x080040f1
 80040ec:	08004109 	.word	0x08004109
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
        break;
 80040f4:	e030      	b.n	8004158 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d025      	beq.n	800414e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004106:	e022      	b.n	800414e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004110:	d11f      	bne.n	8004152 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004116:	e01c      	b.n	8004152 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	2b02      	cmp	r3, #2
 800411e:	d902      	bls.n	8004126 <DMA_CheckFifoParam+0xb6>
 8004120:	2b03      	cmp	r3, #3
 8004122:	d003      	beq.n	800412c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004124:	e018      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        break;
 800412a:	e015      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
    break;
 800413c:	e00b      	b.n	8004156 <DMA_CheckFifoParam+0xe6>
        break;
 800413e:	bf00      	nop
 8004140:	e00a      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 8004142:	bf00      	nop
 8004144:	e008      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 8004146:	bf00      	nop
 8004148:	e006      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 800414a:	bf00      	nop
 800414c:	e004      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
    break;
 8004156:	bf00      	nop
    }
  }

  return status;
 8004158:	7bfb      	ldrb	r3, [r7, #15]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop

08004168 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a38      	ldr	r2, [pc, #224]	; (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d022      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a36      	ldr	r2, [pc, #216]	; (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01d      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a35      	ldr	r2, [pc, #212]	; (8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d018      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a33      	ldr	r2, [pc, #204]	; (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a32      	ldr	r2, [pc, #200]	; (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a30      	ldr	r2, [pc, #192]	; (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2f      	ldr	r2, [pc, #188]	; (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2d      	ldr	r2, [pc, #180]	; (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041ca:	2300      	movs	r3, #0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01a      	beq.n	8004206 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	3b08      	subs	r3, #8
 80041d8:	4a28      	ldr	r2, [pc, #160]	; (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4b26      	ldr	r3, [pc, #152]	; (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	461a      	mov	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a24      	ldr	r2, [pc, #144]	; (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004204:	e024      	b.n	8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3b10      	subs	r3, #16
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a1c      	ldr	r2, [pc, #112]	; (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d806      	bhi.n	800422e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d902      	bls.n	800422e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3308      	adds	r3, #8
 800422c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4b18      	ldr	r3, [pc, #96]	; (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	461a      	mov	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a16      	ldr	r2, [pc, #88]	; (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004240:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2201      	movs	r2, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	58025408 	.word	0x58025408
 8004260:	5802541c 	.word	0x5802541c
 8004264:	58025430 	.word	0x58025430
 8004268:	58025444 	.word	0x58025444
 800426c:	58025458 	.word	0x58025458
 8004270:	5802546c 	.word	0x5802546c
 8004274:	58025480 	.word	0x58025480
 8004278:	58025494 	.word	0x58025494
 800427c:	cccccccd 	.word	0xcccccccd
 8004280:	16009600 	.word	0x16009600
 8004284:	58025880 	.word	0x58025880
 8004288:	aaaaaaab 	.word	0xaaaaaaab
 800428c:	400204b8 	.word	0x400204b8
 8004290:	4002040f 	.word	0x4002040f
 8004294:	10008200 	.word	0x10008200
 8004298:	40020880 	.word	0x40020880

0800429c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d04a      	beq.n	8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d847      	bhi.n	8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d022      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	; (8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01d      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	; (800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a21      	ldr	r2, [pc, #132]	; (8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1f      	ldr	r2, [pc, #124]	; (8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	; (8004368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1c      	ldr	r2, [pc, #112]	; (800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1b      	ldr	r2, [pc, #108]	; (8004370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4b17      	ldr	r3, [pc, #92]	; (8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	461a      	mov	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a15      	ldr	r2, [pc, #84]	; (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004324:	671a      	str	r2, [r3, #112]	; 0x70
 8004326:	e009      	b.n	800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4b14      	ldr	r3, [pc, #80]	; (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a11      	ldr	r2, [pc, #68]	; (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800433a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3b01      	subs	r3, #1
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	58025408 	.word	0x58025408
 8004358:	5802541c 	.word	0x5802541c
 800435c:	58025430 	.word	0x58025430
 8004360:	58025444 	.word	0x58025444
 8004364:	58025458 	.word	0x58025458
 8004368:	5802546c 	.word	0x5802546c
 800436c:	58025480 	.word	0x58025480
 8004370:	58025494 	.word	0x58025494
 8004374:	1600963f 	.word	0x1600963f
 8004378:	58025940 	.word	0x58025940
 800437c:	1000823f 	.word	0x1000823f
 8004380:	40020940 	.word	0x40020940

08004384 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e0cf      	b.n	8004536 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800439c:	2b00      	cmp	r3, #0
 800439e:	d106      	bne.n	80043ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2223      	movs	r2, #35	; 0x23
 80043a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7fd f907 	bl	80015bc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043ae:	4b64      	ldr	r3, [pc, #400]	; (8004540 <HAL_ETH_Init+0x1bc>)
 80043b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043b4:	4a62      	ldr	r2, [pc, #392]	; (8004540 <HAL_ETH_Init+0x1bc>)
 80043b6:	f043 0302 	orr.w	r3, r3, #2
 80043ba:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80043be:	4b60      	ldr	r3, [pc, #384]	; (8004540 <HAL_ETH_Init+0x1bc>)
 80043c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	7a1b      	ldrb	r3, [r3, #8]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d103      	bne.n	80043dc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80043d4:	2000      	movs	r0, #0
 80043d6:	f7fd fc8b 	bl	8001cf0 <HAL_SYSCFG_ETHInterfaceSelect>
 80043da:	e003      	b.n	80043e4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80043dc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80043e0:	f7fd fc86 	bl	8001cf0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80043e4:	4b57      	ldr	r3, [pc, #348]	; (8004544 <HAL_ETH_Init+0x1c0>)
 80043e6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	f043 0301 	orr.w	r3, r3, #1
 80043fa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80043fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004400:	f7fd fc3a 	bl	8001c78 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004406:	e011      	b.n	800442c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004408:	f7fd fc36 	bl	8001c78 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004416:	d909      	bls.n	800442c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2204      	movs	r2, #4
 800441c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	22e0      	movs	r2, #224	; 0xe0
 8004424:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e084      	b.n	8004536 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e4      	bne.n	8004408 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f886 	bl	8004550 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004444:	f001 fee4 	bl	8006210 <HAL_RCC_GetHCLKFreq>
 8004448:	4603      	mov	r3, r0
 800444a:	4a3f      	ldr	r2, [pc, #252]	; (8004548 <HAL_ETH_Init+0x1c4>)
 800444c:	fba2 2303 	umull	r2, r3, r2, r3
 8004450:	0c9a      	lsrs	r2, r3, #18
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3a01      	subs	r2, #1
 8004458:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 fa71 	bl	8004944 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800446a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800446e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6812      	ldr	r2, [r2, #0]
 8004476:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800447a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800447e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0303 	and.w	r3, r3, #3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d009      	beq.n	80044a2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	22e0      	movs	r2, #224	; 0xe0
 800449a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e049      	b.n	8004536 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044aa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80044ae:	4b27      	ldr	r3, [pc, #156]	; (800454c <HAL_ETH_Init+0x1c8>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6952      	ldr	r2, [r2, #20]
 80044b6:	0051      	lsls	r1, r2, #1
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6812      	ldr	r2, [r2, #0]
 80044bc:	430b      	orrs	r3, r1
 80044be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80044c2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fad9 	bl	8004a7e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f000 fb1f 	bl	8004b10 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	3305      	adds	r3, #5
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	021a      	lsls	r2, r3, #8
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	3304      	adds	r3, #4
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	4619      	mov	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	3303      	adds	r3, #3
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	061a      	lsls	r2, r3, #24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	3302      	adds	r3, #2
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	041b      	lsls	r3, r3, #16
 8004504:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	3301      	adds	r3, #1
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004510:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800451e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004520:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2210      	movs	r2, #16
 8004530:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	58024400 	.word	0x58024400
 8004544:	58000400 	.word	0x58000400
 8004548:	431bde83 	.word	0x431bde83
 800454c:	ffff8001 	.word	0xffff8001

08004550 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004560:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004568:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800456a:	f001 fe51 	bl	8006210 <HAL_RCC_GetHCLKFreq>
 800456e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d908      	bls.n	800458a <HAL_ETH_SetMDIOClockRange+0x3a>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4a1d      	ldr	r2, [pc, #116]	; (80045f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d804      	bhi.n	800458a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e027      	b.n	80045da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	4a18      	ldr	r2, [pc, #96]	; (80045f0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d908      	bls.n	80045a4 <HAL_ETH_SetMDIOClockRange+0x54>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4a17      	ldr	r2, [pc, #92]	; (80045f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d204      	bcs.n	80045a4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	e01a      	b.n	80045da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d303      	bcc.n	80045b4 <HAL_ETH_SetMDIOClockRange+0x64>
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	4a12      	ldr	r2, [pc, #72]	; (80045f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d911      	bls.n	80045d8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	4a10      	ldr	r2, [pc, #64]	; (80045f8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d908      	bls.n	80045ce <HAL_ETH_SetMDIOClockRange+0x7e>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	4a0f      	ldr	r2, [pc, #60]	; (80045fc <HAL_ETH_SetMDIOClockRange+0xac>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d804      	bhi.n	80045ce <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e005      	b.n	80045da <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045d4:	60fb      	str	r3, [r7, #12]
 80045d6:	e000      	b.n	80045da <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80045d8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	01312cff 	.word	0x01312cff
 80045f0:	02160ebf 	.word	0x02160ebf
 80045f4:	03938700 	.word	0x03938700
 80045f8:	05f5e0ff 	.word	0x05f5e0ff
 80045fc:	08f0d17f 	.word	0x08f0d17f

08004600 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004612:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	791b      	ldrb	r3, [r3, #4]
 8004618:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800461a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	7b1b      	ldrb	r3, [r3, #12]
 8004620:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	7b5b      	ldrb	r3, [r3, #13]
 8004628:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800462a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	7b9b      	ldrb	r3, [r3, #14]
 8004630:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004632:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	7bdb      	ldrb	r3, [r3, #15]
 8004638:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800463a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	7c12      	ldrb	r2, [r2, #16]
 8004640:	2a00      	cmp	r2, #0
 8004642:	d102      	bne.n	800464a <ETH_SetMACConfig+0x4a>
 8004644:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004648:	e000      	b.n	800464c <ETH_SetMACConfig+0x4c>
 800464a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800464c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	7c52      	ldrb	r2, [r2, #17]
 8004652:	2a00      	cmp	r2, #0
 8004654:	d102      	bne.n	800465c <ETH_SetMACConfig+0x5c>
 8004656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800465a:	e000      	b.n	800465e <ETH_SetMACConfig+0x5e>
 800465c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800465e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	7c9b      	ldrb	r3, [r3, #18]
 8004664:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004666:	431a      	orrs	r2, r3
               macconf->Speed |
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800466c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	7f1b      	ldrb	r3, [r3, #28]
 8004678:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800467a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	7f5b      	ldrb	r3, [r3, #29]
 8004680:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004682:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	7f92      	ldrb	r2, [r2, #30]
 8004688:	2a00      	cmp	r2, #0
 800468a:	d102      	bne.n	8004692 <ETH_SetMACConfig+0x92>
 800468c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004690:	e000      	b.n	8004694 <ETH_SetMACConfig+0x94>
 8004692:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004694:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	7fdb      	ldrb	r3, [r3, #31]
 800469a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800469c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800469e:	683a      	ldr	r2, [r7, #0]
 80046a0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	d102      	bne.n	80046ae <ETH_SetMACConfig+0xae>
 80046a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046ac:	e000      	b.n	80046b0 <ETH_SetMACConfig+0xb0>
 80046ae:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80046b0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80046b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046be:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80046c0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b56      	ldr	r3, [pc, #344]	; (800482c <ETH_SetMACConfig+0x22c>)
 80046d2:	4013      	ands	r3, r2
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	6812      	ldr	r2, [r2, #0]
 80046d8:	68f9      	ldr	r1, [r7, #12]
 80046da:	430b      	orrs	r3, r1
 80046dc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046ea:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80046ec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046f4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80046f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80046fe:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004700:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004708:	2a00      	cmp	r2, #0
 800470a:	d102      	bne.n	8004712 <ETH_SetMACConfig+0x112>
 800470c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004710:	e000      	b.n	8004714 <ETH_SetMACConfig+0x114>
 8004712:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004714:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800471a:	4313      	orrs	r3, r2
 800471c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	4b42      	ldr	r3, [pc, #264]	; (8004830 <ETH_SetMACConfig+0x230>)
 8004726:	4013      	ands	r3, r2
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	68f9      	ldr	r1, [r7, #12]
 800472e:	430b      	orrs	r3, r1
 8004730:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004738:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68da      	ldr	r2, [r3, #12]
 8004748:	4b3a      	ldr	r3, [pc, #232]	; (8004834 <ETH_SetMACConfig+0x234>)
 800474a:	4013      	ands	r3, r2
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	68f9      	ldr	r1, [r7, #12]
 8004752:	430b      	orrs	r3, r1
 8004754:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800475c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004762:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004764:	683a      	ldr	r2, [r7, #0]
 8004766:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800476a:	2a00      	cmp	r2, #0
 800476c:	d101      	bne.n	8004772 <ETH_SetMACConfig+0x172>
 800476e:	2280      	movs	r2, #128	; 0x80
 8004770:	e000      	b.n	8004774 <ETH_SetMACConfig+0x174>
 8004772:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004774:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004786:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800478a:	4013      	ands	r3, r2
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	68f9      	ldr	r1, [r7, #12]
 8004792:	430b      	orrs	r3, r1
 8004794:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800479c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80047a4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80047a6:	4313      	orrs	r3, r2
 80047a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	f023 0103 	bic.w	r1, r3, #3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	430a      	orrs	r2, r1
 80047be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80047ca:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80047e6:	2a00      	cmp	r2, #0
 80047e8:	d101      	bne.n	80047ee <ETH_SetMACConfig+0x1ee>
 80047ea:	2240      	movs	r2, #64	; 0x40
 80047ec:	e000      	b.n	80047f0 <ETH_SetMACConfig+0x1f0>
 80047ee:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80047f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80047f8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80047fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004802:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004810:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	430a      	orrs	r2, r1
 800481c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004820:	bf00      	nop
 8004822:	3714      	adds	r7, #20
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr
 800482c:	00048083 	.word	0x00048083
 8004830:	c0f88000 	.word	0xc0f88000
 8004834:	fffffef0 	.word	0xfffffef0

08004838 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004838:	b480      	push	{r7}
 800483a:	b085      	sub	sp, #20
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b38      	ldr	r3, [pc, #224]	; (8004930 <ETH_SetDMAConfig+0xf8>)
 800484e:	4013      	ands	r3, r2
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	6811      	ldr	r1, [r2, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6812      	ldr	r2, [r2, #0]
 8004858:	430b      	orrs	r3, r1
 800485a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800485e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	791b      	ldrb	r3, [r3, #4]
 8004864:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800486a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	7b1b      	ldrb	r3, [r3, #12]
 8004870:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	4b2c      	ldr	r3, [pc, #176]	; (8004934 <ETH_SetDMAConfig+0xfc>)
 8004882:	4013      	ands	r3, r2
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	6812      	ldr	r2, [r2, #0]
 8004888:	68f9      	ldr	r1, [r7, #12]
 800488a:	430b      	orrs	r3, r1
 800488c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004890:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	7b5b      	ldrb	r3, [r3, #13]
 8004896:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048a8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80048ac:	4b22      	ldr	r3, [pc, #136]	; (8004938 <ETH_SetDMAConfig+0x100>)
 80048ae:	4013      	ands	r3, r2
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	6812      	ldr	r2, [r2, #0]
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	430b      	orrs	r3, r1
 80048b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	7d1b      	ldrb	r3, [r3, #20]
 80048c8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80048ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	7f5b      	ldrb	r3, [r3, #29]
 80048d0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 80048e2:	4b16      	ldr	r3, [pc, #88]	; (800493c <ETH_SetDMAConfig+0x104>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	68f9      	ldr	r1, [r7, #12]
 80048ec:	430b      	orrs	r3, r1
 80048ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048f2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	7f1b      	ldrb	r3, [r3, #28]
 80048fa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004900:	4313      	orrs	r3, r2
 8004902:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800490c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <ETH_SetDMAConfig+0x108>)
 8004912:	4013      	ands	r3, r2
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	6812      	ldr	r2, [r2, #0]
 8004918:	68f9      	ldr	r1, [r7, #12]
 800491a:	430b      	orrs	r3, r1
 800491c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004920:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004924:	bf00      	nop
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	ffff87fd 	.word	0xffff87fd
 8004934:	ffff2ffe 	.word	0xffff2ffe
 8004938:	fffec000 	.word	0xfffec000
 800493c:	ffc0efef 	.word	0xffc0efef
 8004940:	7fc0ffff 	.word	0x7fc0ffff

08004944 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b0a4      	sub	sp, #144	; 0x90
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800494c:	2301      	movs	r3, #1
 800494e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004952:	2300      	movs	r3, #0
 8004954:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800495c:	2300      	movs	r3, #0
 800495e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004962:	2301      	movs	r3, #1
 8004964:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004974:	2300      	movs	r3, #0
 8004976:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800497a:	2301      	movs	r3, #1
 800497c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004984:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004986:	2300      	movs	r3, #0
 8004988:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800498c:	2300      	movs	r3, #0
 800498e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004990:	2300      	movs	r3, #0
 8004992:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004996:	2300      	movs	r3, #0
 8004998:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800499c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80049a0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80049a2:	2300      	movs	r3, #0
 80049a4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80049a8:	2300      	movs	r3, #0
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80049be:	2300      	movs	r3, #0
 80049c0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80049c6:	2300      	movs	r3, #0
 80049c8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80049ca:	2300      	movs	r3, #0
 80049cc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80049d0:	2300      	movs	r3, #0
 80049d2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80049dc:	2320      	movs	r3, #32
 80049de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80049ee:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80049f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80049f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049f8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80049fa:	2300      	movs	r3, #0
 80049fc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004a00:	2302      	movs	r3, #2
 8004a02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004a06:	2300      	movs	r3, #0
 8004a08:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004a28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff fde6 	bl	8004600 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004a34:	2301      	movs	r3, #1
 8004a36:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004a40:	2300      	movs	r3, #0
 8004a42:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004a46:	2300      	movs	r3, #0
 8004a48:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004a4e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004a54:	2300      	movs	r3, #0
 8004a56:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004a58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004a5c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004a64:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004a6a:	f107 0308 	add.w	r3, r7, #8
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f7ff fee1 	bl	8004838 <ETH_SetDMAConfig>
}
 8004a76:	bf00      	nop
 8004a78:	3790      	adds	r7, #144	; 0x90
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004a86:	2300      	movs	r3, #0
 8004a88:	60fb      	str	r3, [r7, #12]
 8004a8a:	e01d      	b.n	8004ac8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68d9      	ldr	r1, [r3, #12]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4613      	mov	r3, r2
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	4413      	add	r3, r2
 8004a98:	00db      	lsls	r3, r3, #3
 8004a9a:	440b      	add	r3, r1
 8004a9c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004ab6:	68b9      	ldr	r1, [r7, #8]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68fa      	ldr	r2, [r7, #12]
 8004abc:	3206      	adds	r2, #6
 8004abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d9de      	bls.n	8004a8c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004adc:	461a      	mov	r2, r3
 8004ade:	2303      	movs	r3, #3
 8004ae0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68da      	ldr	r2, [r3, #12]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004af0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68da      	ldr	r2, [r3, #12]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b00:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004b04:	bf00      	nop
 8004b06:	3714      	adds	r7, #20
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b18:	2300      	movs	r3, #0
 8004b1a:	60fb      	str	r3, [r7, #12]
 8004b1c:	e023      	b.n	8004b66 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6919      	ldr	r1, [r3, #16]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4613      	mov	r3, r2
 8004b26:	005b      	lsls	r3, r3, #1
 8004b28:	4413      	add	r3, r2
 8004b2a:	00db      	lsls	r3, r3, #3
 8004b2c:	440b      	add	r3, r1
 8004b2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	2200      	movs	r2, #0
 8004b46:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2200      	movs	r2, #0
 8004b52:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004b54:	68b9      	ldr	r1, [r7, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	3212      	adds	r2, #18
 8004b5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2b03      	cmp	r3, #3
 8004b6a:	d9d8      	bls.n	8004b1e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b92:	461a      	mov	r2, r3
 8004b94:	2303      	movs	r3, #3
 8004b96:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691a      	ldr	r2, [r3, #16]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ba6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
	...

08004bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b089      	sub	sp, #36	; 0x24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004bda:	4b89      	ldr	r3, [pc, #548]	; (8004e00 <HAL_GPIO_Init+0x234>)
 8004bdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004bde:	e194      	b.n	8004f0a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	2101      	movs	r1, #1
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	4013      	ands	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 8186 	beq.w	8004f04 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f003 0303 	and.w	r3, r3, #3
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d005      	beq.n	8004c10 <HAL_GPIO_Init+0x44>
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d130      	bne.n	8004c72 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	2203      	movs	r2, #3
 8004c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c20:	43db      	mvns	r3, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4013      	ands	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	005b      	lsls	r3, r3, #1
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	69ba      	ldr	r2, [r7, #24]
 8004c3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004c46:	2201      	movs	r2, #1
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	4013      	ands	r3, r2
 8004c54:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	091b      	lsrs	r3, r3, #4
 8004c5c:	f003 0201 	and.w	r2, r3, #1
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	fa02 f303 	lsl.w	r3, r2, r3
 8004c66:	69ba      	ldr	r2, [r7, #24]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d017      	beq.n	8004cae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	005b      	lsls	r3, r3, #1
 8004c88:	2203      	movs	r2, #3
 8004c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4013      	ands	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	005b      	lsls	r3, r3, #1
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	f003 0303 	and.w	r3, r3, #3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d123      	bne.n	8004d02 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	08da      	lsrs	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	3208      	adds	r2, #8
 8004cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	220f      	movs	r2, #15
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43db      	mvns	r3, r3
 8004cd8:	69ba      	ldr	r2, [r7, #24]
 8004cda:	4013      	ands	r3, r2
 8004cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	691a      	ldr	r2, [r3, #16]
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	fa02 f303 	lsl.w	r3, r2, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	08da      	lsrs	r2, r3, #3
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3208      	adds	r2, #8
 8004cfc:	69b9      	ldr	r1, [r7, #24]
 8004cfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	005b      	lsls	r3, r3, #1
 8004d0c:	2203      	movs	r2, #3
 8004d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d12:	43db      	mvns	r3, r3
 8004d14:	69ba      	ldr	r2, [r7, #24]
 8004d16:	4013      	ands	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f003 0203 	and.w	r2, r3, #3
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	fa02 f303 	lsl.w	r3, r2, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f000 80e0 	beq.w	8004f04 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d44:	4b2f      	ldr	r3, [pc, #188]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d4a:	4a2e      	ldr	r2, [pc, #184]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d4c:	f043 0302 	orr.w	r3, r3, #2
 8004d50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004d54:	4b2b      	ldr	r3, [pc, #172]	; (8004e04 <HAL_GPIO_Init+0x238>)
 8004d56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d62:	4a29      	ldr	r2, [pc, #164]	; (8004e08 <HAL_GPIO_Init+0x23c>)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	089b      	lsrs	r3, r3, #2
 8004d68:	3302      	adds	r3, #2
 8004d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	220f      	movs	r2, #15
 8004d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7e:	43db      	mvns	r3, r3
 8004d80:	69ba      	ldr	r2, [r7, #24]
 8004d82:	4013      	ands	r3, r2
 8004d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a20      	ldr	r2, [pc, #128]	; (8004e0c <HAL_GPIO_Init+0x240>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d052      	beq.n	8004e34 <HAL_GPIO_Init+0x268>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a1f      	ldr	r2, [pc, #124]	; (8004e10 <HAL_GPIO_Init+0x244>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d031      	beq.n	8004dfa <HAL_GPIO_Init+0x22e>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a1e      	ldr	r2, [pc, #120]	; (8004e14 <HAL_GPIO_Init+0x248>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d02b      	beq.n	8004df6 <HAL_GPIO_Init+0x22a>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a1d      	ldr	r2, [pc, #116]	; (8004e18 <HAL_GPIO_Init+0x24c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d025      	beq.n	8004df2 <HAL_GPIO_Init+0x226>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a1c      	ldr	r2, [pc, #112]	; (8004e1c <HAL_GPIO_Init+0x250>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d01f      	beq.n	8004dee <HAL_GPIO_Init+0x222>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a1b      	ldr	r2, [pc, #108]	; (8004e20 <HAL_GPIO_Init+0x254>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d019      	beq.n	8004dea <HAL_GPIO_Init+0x21e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_GPIO_Init+0x258>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d013      	beq.n	8004de6 <HAL_GPIO_Init+0x21a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a19      	ldr	r2, [pc, #100]	; (8004e28 <HAL_GPIO_Init+0x25c>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d00d      	beq.n	8004de2 <HAL_GPIO_Init+0x216>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	; (8004e2c <HAL_GPIO_Init+0x260>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d007      	beq.n	8004dde <HAL_GPIO_Init+0x212>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a17      	ldr	r2, [pc, #92]	; (8004e30 <HAL_GPIO_Init+0x264>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d101      	bne.n	8004dda <HAL_GPIO_Init+0x20e>
 8004dd6:	2309      	movs	r3, #9
 8004dd8:	e02d      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dda:	230a      	movs	r3, #10
 8004ddc:	e02b      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dde:	2308      	movs	r3, #8
 8004de0:	e029      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004de2:	2307      	movs	r3, #7
 8004de4:	e027      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004de6:	2306      	movs	r3, #6
 8004de8:	e025      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dea:	2305      	movs	r3, #5
 8004dec:	e023      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dee:	2304      	movs	r3, #4
 8004df0:	e021      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004df2:	2303      	movs	r3, #3
 8004df4:	e01f      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004df6:	2302      	movs	r3, #2
 8004df8:	e01d      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e01b      	b.n	8004e36 <HAL_GPIO_Init+0x26a>
 8004dfe:	bf00      	nop
 8004e00:	58000080 	.word	0x58000080
 8004e04:	58024400 	.word	0x58024400
 8004e08:	58000400 	.word	0x58000400
 8004e0c:	58020000 	.word	0x58020000
 8004e10:	58020400 	.word	0x58020400
 8004e14:	58020800 	.word	0x58020800
 8004e18:	58020c00 	.word	0x58020c00
 8004e1c:	58021000 	.word	0x58021000
 8004e20:	58021400 	.word	0x58021400
 8004e24:	58021800 	.word	0x58021800
 8004e28:	58021c00 	.word	0x58021c00
 8004e2c:	58022000 	.word	0x58022000
 8004e30:	58022400 	.word	0x58022400
 8004e34:	2300      	movs	r3, #0
 8004e36:	69fa      	ldr	r2, [r7, #28]
 8004e38:	f002 0203 	and.w	r2, r2, #3
 8004e3c:	0092      	lsls	r2, r2, #2
 8004e3e:	4093      	lsls	r3, r2
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e46:	4938      	ldr	r1, [pc, #224]	; (8004f28 <HAL_GPIO_Init+0x35c>)
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004e54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	43db      	mvns	r3, r3
 8004e60:	69ba      	ldr	r2, [r7, #24]
 8004e62:	4013      	ands	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004e7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	43db      	mvns	r3, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4013      	ands	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d003      	beq.n	8004ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004ea8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	3301      	adds	r3, #1
 8004f08:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	fa22 f303 	lsr.w	r3, r2, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f47f ae63 	bne.w	8004be0 <HAL_GPIO_Init+0x14>
  }
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	3724      	adds	r7, #36	; 0x24
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	58000400 	.word	0x58000400

08004f2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	460b      	mov	r3, r1
 8004f36:	807b      	strh	r3, [r7, #2]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004f3c:	787b      	ldrb	r3, [r7, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f42:	887a      	ldrh	r2, [r7, #2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004f48:	e003      	b.n	8004f52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004f4a:	887b      	ldrh	r3, [r7, #2]
 8004f4c:	041a      	lsls	r2, r3, #16
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	619a      	str	r2, [r3, #24]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b085      	sub	sp, #20
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f70:	887a      	ldrh	r2, [r7, #2]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4013      	ands	r3, r2
 8004f76:	041a      	lsls	r2, r3, #16
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	43d9      	mvns	r1, r3
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	400b      	ands	r3, r1
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	619a      	str	r2, [r3, #24]
}
 8004f86:	bf00      	nop
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
	...

08004f94 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <HAL_HSEM_FastTake+0x2c>)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3320      	adds	r3, #32
 8004fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa6:	4a07      	ldr	r2, [pc, #28]	; (8004fc4 <HAL_HSEM_FastTake+0x30>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d101      	bne.n	8004fb0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004fac:	2300      	movs	r3, #0
 8004fae:	e000      	b.n	8004fb2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	58026400 	.word	0x58026400
 8004fc4:	80000300 	.word	0x80000300

08004fc8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004fd2:	4906      	ldr	r1, [pc, #24]	; (8004fec <HAL_HSEM_Release+0x24>)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004fe0:	bf00      	nop
 8004fe2:	370c      	adds	r7, #12
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	58026400 	.word	0x58026400

08004ff0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ff2:	b08f      	sub	sp, #60	; 0x3c
 8004ff4:	af0a      	add	r7, sp, #40	; 0x28
 8004ff6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e116      	b.n	8005230 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	d106      	bne.n	8005022 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fc fcd9 	bl	80019d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2203      	movs	r2, #3
 8005026:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800502e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f004 fded 	bl	8009c20 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	603b      	str	r3, [r7, #0]
 800504c:	687e      	ldr	r6, [r7, #4]
 800504e:	466d      	mov	r5, sp
 8005050:	f106 0410 	add.w	r4, r6, #16
 8005054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800505a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800505c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005060:	e885 0003 	stmia.w	r5, {r0, r1}
 8005064:	1d33      	adds	r3, r6, #4
 8005066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005068:	6838      	ldr	r0, [r7, #0]
 800506a:	f004 fd6b 	bl	8009b44 <USB_CoreInit>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2202      	movs	r2, #2
 8005078:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e0d7      	b.n	8005230 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2100      	movs	r1, #0
 8005086:	4618      	mov	r0, r3
 8005088:	f004 fddb 	bl	8009c42 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]
 8005090:	e04a      	b.n	8005128 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005092:	7bfa      	ldrb	r2, [r7, #15]
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	4613      	mov	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	4413      	add	r3, r2
 800509c:	009b      	lsls	r3, r3, #2
 800509e:	440b      	add	r3, r1
 80050a0:	333d      	adds	r3, #61	; 0x3d
 80050a2:	2201      	movs	r2, #1
 80050a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050a6:	7bfa      	ldrb	r2, [r7, #15]
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	4613      	mov	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	440b      	add	r3, r1
 80050b4:	333c      	adds	r3, #60	; 0x3c
 80050b6:	7bfa      	ldrb	r2, [r7, #15]
 80050b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050ba:	7bfa      	ldrb	r2, [r7, #15]
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	b298      	uxth	r0, r3
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	3344      	adds	r3, #68	; 0x44
 80050ce:	4602      	mov	r2, r0
 80050d0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050d2:	7bfa      	ldrb	r2, [r7, #15]
 80050d4:	6879      	ldr	r1, [r7, #4]
 80050d6:	4613      	mov	r3, r2
 80050d8:	00db      	lsls	r3, r3, #3
 80050da:	4413      	add	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	440b      	add	r3, r1
 80050e0:	3340      	adds	r3, #64	; 0x40
 80050e2:	2200      	movs	r2, #0
 80050e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050e6:	7bfa      	ldrb	r2, [r7, #15]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	00db      	lsls	r3, r3, #3
 80050ee:	4413      	add	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	3348      	adds	r3, #72	; 0x48
 80050f6:	2200      	movs	r2, #0
 80050f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80050fa:	7bfa      	ldrb	r2, [r7, #15]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	00db      	lsls	r3, r3, #3
 8005102:	4413      	add	r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	334c      	adds	r3, #76	; 0x4c
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	00db      	lsls	r3, r3, #3
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3354      	adds	r3, #84	; 0x54
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	3301      	adds	r3, #1
 8005126:	73fb      	strb	r3, [r7, #15]
 8005128:	7bfa      	ldrb	r2, [r7, #15]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	429a      	cmp	r2, r3
 8005130:	d3af      	bcc.n	8005092 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	73fb      	strb	r3, [r7, #15]
 8005136:	e044      	b.n	80051c2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005138:	7bfa      	ldrb	r2, [r7, #15]
 800513a:	6879      	ldr	r1, [r7, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	00db      	lsls	r3, r3, #3
 8005140:	4413      	add	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	440b      	add	r3, r1
 8005146:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800514e:	7bfa      	ldrb	r2, [r7, #15]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005160:	7bfa      	ldrb	r2, [r7, #15]
 8005162:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005176:	2200      	movs	r2, #0
 8005178:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800518c:	2200      	movs	r2, #0
 800518e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051bc:	7bfb      	ldrb	r3, [r7, #15]
 80051be:	3301      	adds	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
 80051c2:	7bfa      	ldrb	r2, [r7, #15]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d3b5      	bcc.n	8005138 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	603b      	str	r3, [r7, #0]
 80051d2:	687e      	ldr	r6, [r7, #4]
 80051d4:	466d      	mov	r5, sp
 80051d6:	f106 0410 	add.w	r4, r6, #16
 80051da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80051ea:	1d33      	adds	r3, r6, #4
 80051ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051ee:	6838      	ldr	r0, [r7, #0]
 80051f0:	f004 fd74 	bl	8009cdc <USB_DevInit>
 80051f4:	4603      	mov	r3, r0
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2202      	movs	r2, #2
 80051fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e014      	b.n	8005230 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b01      	cmp	r3, #1
 800521c:	d102      	bne.n	8005224 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f80a 	bl	8005238 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4618      	mov	r0, r3
 800522a:	f004 ff32 	bl	800a092 <USB_DevDisconnect>

  return HAL_OK;
 800522e:	2300      	movs	r3, #0
}
 8005230:	4618      	mov	r0, r3
 8005232:	3714      	adds	r7, #20
 8005234:	46bd      	mov	sp, r7
 8005236:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005238 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005238:	b480      	push	{r7}
 800523a:	b085      	sub	sp, #20
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	699b      	ldr	r3, [r3, #24]
 800525a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005266:	4b05      	ldr	r3, [pc, #20]	; (800527c <HAL_PCDEx_ActivateLPM+0x44>)
 8005268:	4313      	orrs	r3, r2
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr
 800527c:	10000003 	.word	0x10000003

08005280 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005288:	4b29      	ldr	r3, [pc, #164]	; (8005330 <HAL_PWREx_ConfigSupply+0xb0>)
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	2b06      	cmp	r3, #6
 8005292:	d00a      	beq.n	80052aa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005294:	4b26      	ldr	r3, [pc, #152]	; (8005330 <HAL_PWREx_ConfigSupply+0xb0>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d001      	beq.n	80052a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e040      	b.n	8005328 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e03e      	b.n	8005328 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052aa:	4b21      	ldr	r3, [pc, #132]	; (8005330 <HAL_PWREx_ConfigSupply+0xb0>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80052b2:	491f      	ldr	r1, [pc, #124]	; (8005330 <HAL_PWREx_ConfigSupply+0xb0>)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80052ba:	f7fc fcdd 	bl	8001c78 <HAL_GetTick>
 80052be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052c0:	e009      	b.n	80052d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80052c2:	f7fc fcd9 	bl	8001c78 <HAL_GetTick>
 80052c6:	4602      	mov	r2, r0
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	1ad3      	subs	r3, r2, r3
 80052cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d0:	d901      	bls.n	80052d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e028      	b.n	8005328 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80052d6:	4b16      	ldr	r3, [pc, #88]	; (8005330 <HAL_PWREx_ConfigSupply+0xb0>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e2:	d1ee      	bne.n	80052c2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b1e      	cmp	r3, #30
 80052e8:	d008      	beq.n	80052fc <HAL_PWREx_ConfigSupply+0x7c>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2b2e      	cmp	r3, #46	; 0x2e
 80052ee:	d005      	beq.n	80052fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2b1d      	cmp	r3, #29
 80052f4:	d002      	beq.n	80052fc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b2d      	cmp	r3, #45	; 0x2d
 80052fa:	d114      	bne.n	8005326 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80052fc:	f7fc fcbc 	bl	8001c78 <HAL_GetTick>
 8005300:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005302:	e009      	b.n	8005318 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005304:	f7fc fcb8 	bl	8001c78 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005312:	d901      	bls.n	8005318 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e007      	b.n	8005328 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005318:	4b05      	ldr	r3, [pc, #20]	; (8005330 <HAL_PWREx_ConfigSupply+0xb0>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005324:	d1ee      	bne.n	8005304 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3710      	adds	r7, #16
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	58024800 	.word	0x58024800

08005334 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005334:	b480      	push	{r7}
 8005336:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005338:	4b05      	ldr	r3, [pc, #20]	; (8005350 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	4a04      	ldr	r2, [pc, #16]	; (8005350 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800533e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005342:	60d3      	str	r3, [r2, #12]
}
 8005344:	bf00      	nop
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	58024800 	.word	0x58024800

08005354 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b08c      	sub	sp, #48	; 0x30
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d102      	bne.n	8005368 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	f000 bc1d 	b.w	8005ba2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0301 	and.w	r3, r3, #1
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 8087 	beq.w	8005484 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005376:	4b99      	ldr	r3, [pc, #612]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800537e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005380:	4b96      	ldr	r3, [pc, #600]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005388:	2b10      	cmp	r3, #16
 800538a:	d007      	beq.n	800539c <HAL_RCC_OscConfig+0x48>
 800538c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538e:	2b18      	cmp	r3, #24
 8005390:	d110      	bne.n	80053b4 <HAL_RCC_OscConfig+0x60>
 8005392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	2b02      	cmp	r3, #2
 800539a:	d10b      	bne.n	80053b4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800539c:	4b8f      	ldr	r3, [pc, #572]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d06c      	beq.n	8005482 <HAL_RCC_OscConfig+0x12e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d168      	bne.n	8005482 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e3f6      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053bc:	d106      	bne.n	80053cc <HAL_RCC_OscConfig+0x78>
 80053be:	4b87      	ldr	r3, [pc, #540]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a86      	ldr	r2, [pc, #536]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80053c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e02e      	b.n	800542a <HAL_RCC_OscConfig+0xd6>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10c      	bne.n	80053ee <HAL_RCC_OscConfig+0x9a>
 80053d4:	4b81      	ldr	r3, [pc, #516]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a80      	ldr	r2, [pc, #512]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80053da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4b7e      	ldr	r3, [pc, #504]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a7d      	ldr	r2, [pc, #500]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80053e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053ea:	6013      	str	r3, [r2, #0]
 80053ec:	e01d      	b.n	800542a <HAL_RCC_OscConfig+0xd6>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053f6:	d10c      	bne.n	8005412 <HAL_RCC_OscConfig+0xbe>
 80053f8:	4b78      	ldr	r3, [pc, #480]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a77      	ldr	r2, [pc, #476]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80053fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005402:	6013      	str	r3, [r2, #0]
 8005404:	4b75      	ldr	r3, [pc, #468]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a74      	ldr	r2, [pc, #464]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 800540a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	e00b      	b.n	800542a <HAL_RCC_OscConfig+0xd6>
 8005412:	4b72      	ldr	r3, [pc, #456]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a71      	ldr	r2, [pc, #452]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b6f      	ldr	r3, [pc, #444]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a6e      	ldr	r2, [pc, #440]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005428:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d013      	beq.n	800545a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fc fc21 	bl	8001c78 <HAL_GetTick>
 8005436:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800543a:	f7fc fc1d 	bl	8001c78 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b64      	cmp	r3, #100	; 0x64
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e3aa      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800544c:	4b63      	ldr	r3, [pc, #396]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0xe6>
 8005458:	e014      	b.n	8005484 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545a:	f7fc fc0d 	bl	8001c78 <HAL_GetTick>
 800545e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005460:	e008      	b.n	8005474 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005462:	f7fc fc09 	bl	8001c78 <HAL_GetTick>
 8005466:	4602      	mov	r2, r0
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	1ad3      	subs	r3, r2, r3
 800546c:	2b64      	cmp	r3, #100	; 0x64
 800546e:	d901      	bls.n	8005474 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e396      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005474:	4b59      	ldr	r3, [pc, #356]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1f0      	bne.n	8005462 <HAL_RCC_OscConfig+0x10e>
 8005480:	e000      	b.n	8005484 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005482:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 80cb 	beq.w	8005628 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005492:	4b52      	ldr	r3, [pc, #328]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800549a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800549c:	4b4f      	ldr	r3, [pc, #316]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d007      	beq.n	80054b8 <HAL_RCC_OscConfig+0x164>
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	2b18      	cmp	r3, #24
 80054ac:	d156      	bne.n	800555c <HAL_RCC_OscConfig+0x208>
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	f003 0303 	and.w	r3, r3, #3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d151      	bne.n	800555c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054b8:	4b48      	ldr	r3, [pc, #288]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0304 	and.w	r3, r3, #4
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_OscConfig+0x17c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e368      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80054d0:	4b42      	ldr	r3, [pc, #264]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f023 0219 	bic.w	r2, r3, #25
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	493f      	ldr	r1, [pc, #252]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054e2:	f7fc fbc9 	bl	8001c78 <HAL_GetTick>
 80054e6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054e8:	e008      	b.n	80054fc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054ea:	f7fc fbc5 	bl	8001c78 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e352      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80054fc:	4b37      	ldr	r3, [pc, #220]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0304 	and.w	r3, r3, #4
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f0      	beq.n	80054ea <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005508:	f7fc fbe6 	bl	8001cd8 <HAL_GetREVID>
 800550c:	4603      	mov	r3, r0
 800550e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005512:	4293      	cmp	r3, r2
 8005514:	d817      	bhi.n	8005546 <HAL_RCC_OscConfig+0x1f2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b40      	cmp	r3, #64	; 0x40
 800551c:	d108      	bne.n	8005530 <HAL_RCC_OscConfig+0x1dc>
 800551e:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005526:	4a2d      	ldr	r2, [pc, #180]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800552c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800552e:	e07b      	b.n	8005628 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005530:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	031b      	lsls	r3, r3, #12
 800553e:	4927      	ldr	r1, [pc, #156]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005540:	4313      	orrs	r3, r2
 8005542:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005544:	e070      	b.n	8005628 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005546:	4b25      	ldr	r3, [pc, #148]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	061b      	lsls	r3, r3, #24
 8005554:	4921      	ldr	r1, [pc, #132]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005556:	4313      	orrs	r3, r2
 8005558:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800555a:	e065      	b.n	8005628 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d048      	beq.n	80055f6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005564:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f023 0219 	bic.w	r2, r3, #25
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	491a      	ldr	r1, [pc, #104]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005572:	4313      	orrs	r3, r2
 8005574:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005576:	f7fc fb7f 	bl	8001c78 <HAL_GetTick>
 800557a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800557e:	f7fc fb7b 	bl	8001c78 <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e308      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005590:	4b12      	ldr	r3, [pc, #72]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0304 	and.w	r3, r3, #4
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800559c:	f7fc fb9c 	bl	8001cd8 <HAL_GetREVID>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f241 0203 	movw	r2, #4099	; 0x1003
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d81a      	bhi.n	80055e0 <HAL_RCC_OscConfig+0x28c>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	d108      	bne.n	80055c4 <HAL_RCC_OscConfig+0x270>
 80055b2:	4b0a      	ldr	r3, [pc, #40]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80055ba:	4a08      	ldr	r2, [pc, #32]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80055bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055c0:	6053      	str	r3, [r2, #4]
 80055c2:	e031      	b.n	8005628 <HAL_RCC_OscConfig+0x2d4>
 80055c4:	4b05      	ldr	r3, [pc, #20]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	031b      	lsls	r3, r3, #12
 80055d2:	4902      	ldr	r1, [pc, #8]	; (80055dc <HAL_RCC_OscConfig+0x288>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	604b      	str	r3, [r1, #4]
 80055d8:	e026      	b.n	8005628 <HAL_RCC_OscConfig+0x2d4>
 80055da:	bf00      	nop
 80055dc:	58024400 	.word	0x58024400
 80055e0:	4b9a      	ldr	r3, [pc, #616]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	061b      	lsls	r3, r3, #24
 80055ee:	4997      	ldr	r1, [pc, #604]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	604b      	str	r3, [r1, #4]
 80055f4:	e018      	b.n	8005628 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055f6:	4b95      	ldr	r3, [pc, #596]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a94      	ldr	r2, [pc, #592]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005602:	f7fc fb39 	bl	8001c78 <HAL_GetTick>
 8005606:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005608:	e008      	b.n	800561c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800560a:	f7fc fb35 	bl	8001c78 <HAL_GetTick>
 800560e:	4602      	mov	r2, r0
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	2b02      	cmp	r3, #2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e2c2      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800561c:	4b8b      	ldr	r3, [pc, #556]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1f0      	bne.n	800560a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0310 	and.w	r3, r3, #16
 8005630:	2b00      	cmp	r3, #0
 8005632:	f000 80a9 	beq.w	8005788 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005636:	4b85      	ldr	r3, [pc, #532]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005638:	691b      	ldr	r3, [r3, #16]
 800563a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800563e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005640:	4b82      	ldr	r3, [pc, #520]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005644:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d007      	beq.n	800565c <HAL_RCC_OscConfig+0x308>
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	2b18      	cmp	r3, #24
 8005650:	d13a      	bne.n	80056c8 <HAL_RCC_OscConfig+0x374>
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f003 0303 	and.w	r3, r3, #3
 8005658:	2b01      	cmp	r3, #1
 800565a:	d135      	bne.n	80056c8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800565c:	4b7b      	ldr	r3, [pc, #492]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCC_OscConfig+0x320>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	69db      	ldr	r3, [r3, #28]
 800566c:	2b80      	cmp	r3, #128	; 0x80
 800566e:	d001      	beq.n	8005674 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e296      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005674:	f7fc fb30 	bl	8001cd8 <HAL_GetREVID>
 8005678:	4603      	mov	r3, r0
 800567a:	f241 0203 	movw	r2, #4099	; 0x1003
 800567e:	4293      	cmp	r3, r2
 8005680:	d817      	bhi.n	80056b2 <HAL_RCC_OscConfig+0x35e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	2b20      	cmp	r3, #32
 8005688:	d108      	bne.n	800569c <HAL_RCC_OscConfig+0x348>
 800568a:	4b70      	ldr	r3, [pc, #448]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005692:	4a6e      	ldr	r2, [pc, #440]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005694:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005698:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800569a:	e075      	b.n	8005788 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800569c:	4b6b      	ldr	r3, [pc, #428]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
 80056a8:	069b      	lsls	r3, r3, #26
 80056aa:	4968      	ldr	r1, [pc, #416]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056b0:	e06a      	b.n	8005788 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056b2:	4b66      	ldr	r3, [pc, #408]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	061b      	lsls	r3, r3, #24
 80056c0:	4962      	ldr	r1, [pc, #392]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80056c6:	e05f      	b.n	8005788 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d042      	beq.n	8005756 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056d0:	4b5e      	ldr	r3, [pc, #376]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a5d      	ldr	r2, [pc, #372]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80056d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056dc:	f7fc facc 	bl	8001c78 <HAL_GetTick>
 80056e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056e4:	f7fc fac8 	bl	8001c78 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e255      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056f6:	4b55      	ldr	r3, [pc, #340]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d0f0      	beq.n	80056e4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005702:	f7fc fae9 	bl	8001cd8 <HAL_GetREVID>
 8005706:	4603      	mov	r3, r0
 8005708:	f241 0203 	movw	r2, #4099	; 0x1003
 800570c:	4293      	cmp	r3, r2
 800570e:	d817      	bhi.n	8005740 <HAL_RCC_OscConfig+0x3ec>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	2b20      	cmp	r3, #32
 8005716:	d108      	bne.n	800572a <HAL_RCC_OscConfig+0x3d6>
 8005718:	4b4c      	ldr	r3, [pc, #304]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800571a:	685b      	ldr	r3, [r3, #4]
 800571c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005720:	4a4a      	ldr	r2, [pc, #296]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005722:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005726:	6053      	str	r3, [r2, #4]
 8005728:	e02e      	b.n	8005788 <HAL_RCC_OscConfig+0x434>
 800572a:	4b48      	ldr	r3, [pc, #288]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	069b      	lsls	r3, r3, #26
 8005738:	4944      	ldr	r1, [pc, #272]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
 800573e:	e023      	b.n	8005788 <HAL_RCC_OscConfig+0x434>
 8005740:	4b42      	ldr	r3, [pc, #264]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	061b      	lsls	r3, r3, #24
 800574e:	493f      	ldr	r1, [pc, #252]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005750:	4313      	orrs	r3, r2
 8005752:	60cb      	str	r3, [r1, #12]
 8005754:	e018      	b.n	8005788 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005756:	4b3d      	ldr	r3, [pc, #244]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3c      	ldr	r2, [pc, #240]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800575c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fc fa89 	bl	8001c78 <HAL_GetTick>
 8005766:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005768:	e008      	b.n	800577c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800576a:	f7fc fa85 	bl	8001c78 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d901      	bls.n	800577c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e212      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800577c:	4b33      	ldr	r3, [pc, #204]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f0      	bne.n	800576a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 0308 	and.w	r3, r3, #8
 8005790:	2b00      	cmp	r3, #0
 8005792:	d036      	beq.n	8005802 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d019      	beq.n	80057d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800579c:	4b2b      	ldr	r3, [pc, #172]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800579e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a0:	4a2a      	ldr	r2, [pc, #168]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80057a2:	f043 0301 	orr.w	r3, r3, #1
 80057a6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fc fa66 	bl	8001c78 <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b0:	f7fc fa62 	bl	8001c78 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e1ef      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80057c2:	4b22      	ldr	r3, [pc, #136]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80057c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d0f0      	beq.n	80057b0 <HAL_RCC_OscConfig+0x45c>
 80057ce:	e018      	b.n	8005802 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057d0:	4b1e      	ldr	r3, [pc, #120]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80057d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057d4:	4a1d      	ldr	r2, [pc, #116]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80057d6:	f023 0301 	bic.w	r3, r3, #1
 80057da:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057dc:	f7fc fa4c 	bl	8001c78 <HAL_GetTick>
 80057e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057e4:	f7fc fa48 	bl	8001c78 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e1d5      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057f6:	4b15      	ldr	r3, [pc, #84]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 80057f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f0      	bne.n	80057e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d039      	beq.n	8005882 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d01c      	beq.n	8005850 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a0c      	ldr	r2, [pc, #48]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800581c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005820:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005822:	f7fc fa29 	bl	8001c78 <HAL_GetTick>
 8005826:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800582a:	f7fc fa25 	bl	8001c78 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e1b2      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800583c:	4b03      	ldr	r3, [pc, #12]	; (800584c <HAL_RCC_OscConfig+0x4f8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d0f0      	beq.n	800582a <HAL_RCC_OscConfig+0x4d6>
 8005848:	e01b      	b.n	8005882 <HAL_RCC_OscConfig+0x52e>
 800584a:	bf00      	nop
 800584c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005850:	4b9b      	ldr	r3, [pc, #620]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a9a      	ldr	r2, [pc, #616]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800585a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800585c:	f7fc fa0c 	bl	8001c78 <HAL_GetTick>
 8005860:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005864:	f7fc fa08 	bl	8001c78 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e195      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005876:	4b92      	ldr	r3, [pc, #584]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0304 	and.w	r3, r3, #4
 800588a:	2b00      	cmp	r3, #0
 800588c:	f000 8081 	beq.w	8005992 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005890:	4b8c      	ldr	r3, [pc, #560]	; (8005ac4 <HAL_RCC_OscConfig+0x770>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a8b      	ldr	r2, [pc, #556]	; (8005ac4 <HAL_RCC_OscConfig+0x770>)
 8005896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800589a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800589c:	f7fc f9ec 	bl	8001c78 <HAL_GetTick>
 80058a0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80058a4:	f7fc f9e8 	bl	8001c78 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b64      	cmp	r3, #100	; 0x64
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e175      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80058b6:	4b83      	ldr	r3, [pc, #524]	; (8005ac4 <HAL_RCC_OscConfig+0x770>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d106      	bne.n	80058d8 <HAL_RCC_OscConfig+0x584>
 80058ca:	4b7d      	ldr	r3, [pc, #500]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ce:	4a7c      	ldr	r2, [pc, #496]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80058d0:	f043 0301 	orr.w	r3, r3, #1
 80058d4:	6713      	str	r3, [r2, #112]	; 0x70
 80058d6:	e02d      	b.n	8005934 <HAL_RCC_OscConfig+0x5e0>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10c      	bne.n	80058fa <HAL_RCC_OscConfig+0x5a6>
 80058e0:	4b77      	ldr	r3, [pc, #476]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80058e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e4:	4a76      	ldr	r2, [pc, #472]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	6713      	str	r3, [r2, #112]	; 0x70
 80058ec:	4b74      	ldr	r3, [pc, #464]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	4a73      	ldr	r2, [pc, #460]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80058f2:	f023 0304 	bic.w	r3, r3, #4
 80058f6:	6713      	str	r3, [r2, #112]	; 0x70
 80058f8:	e01c      	b.n	8005934 <HAL_RCC_OscConfig+0x5e0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	2b05      	cmp	r3, #5
 8005900:	d10c      	bne.n	800591c <HAL_RCC_OscConfig+0x5c8>
 8005902:	4b6f      	ldr	r3, [pc, #444]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a6e      	ldr	r2, [pc, #440]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005908:	f043 0304 	orr.w	r3, r3, #4
 800590c:	6713      	str	r3, [r2, #112]	; 0x70
 800590e:	4b6c      	ldr	r3, [pc, #432]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005912:	4a6b      	ldr	r2, [pc, #428]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005914:	f043 0301 	orr.w	r3, r3, #1
 8005918:	6713      	str	r3, [r2, #112]	; 0x70
 800591a:	e00b      	b.n	8005934 <HAL_RCC_OscConfig+0x5e0>
 800591c:	4b68      	ldr	r3, [pc, #416]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 800591e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005920:	4a67      	ldr	r2, [pc, #412]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005922:	f023 0301 	bic.w	r3, r3, #1
 8005926:	6713      	str	r3, [r2, #112]	; 0x70
 8005928:	4b65      	ldr	r3, [pc, #404]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 800592a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592c:	4a64      	ldr	r2, [pc, #400]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 800592e:	f023 0304 	bic.w	r3, r3, #4
 8005932:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d015      	beq.n	8005968 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593c:	f7fc f99c 	bl	8001c78 <HAL_GetTick>
 8005940:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005942:	e00a      	b.n	800595a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005944:	f7fc f998 	bl	8001c78 <HAL_GetTick>
 8005948:	4602      	mov	r2, r0
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	1ad3      	subs	r3, r2, r3
 800594e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005952:	4293      	cmp	r3, r2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e123      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800595a:	4b59      	ldr	r3, [pc, #356]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800595e:	f003 0302 	and.w	r3, r3, #2
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0ee      	beq.n	8005944 <HAL_RCC_OscConfig+0x5f0>
 8005966:	e014      	b.n	8005992 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005968:	f7fc f986 	bl	8001c78 <HAL_GetTick>
 800596c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800596e:	e00a      	b.n	8005986 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005970:	f7fc f982 	bl	8001c78 <HAL_GetTick>
 8005974:	4602      	mov	r2, r0
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	1ad3      	subs	r3, r2, r3
 800597a:	f241 3288 	movw	r2, #5000	; 0x1388
 800597e:	4293      	cmp	r3, r2
 8005980:	d901      	bls.n	8005986 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e10d      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005986:	4b4e      	ldr	r3, [pc, #312]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1ee      	bne.n	8005970 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 8102 	beq.w	8005ba0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800599c:	4b48      	ldr	r3, [pc, #288]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059a4:	2b18      	cmp	r3, #24
 80059a6:	f000 80bd 	beq.w	8005b24 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	f040 809e 	bne.w	8005af0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80059b4:	4b42      	ldr	r3, [pc, #264]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a41      	ldr	r2, [pc, #260]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80059ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c0:	f7fc f95a 	bl	8001c78 <HAL_GetTick>
 80059c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059c6:	e008      	b.n	80059da <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80059c8:	f7fc f956 	bl	8001c78 <HAL_GetTick>
 80059cc:	4602      	mov	r2, r0
 80059ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	2b02      	cmp	r3, #2
 80059d4:	d901      	bls.n	80059da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80059d6:	2303      	movs	r3, #3
 80059d8:	e0e3      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059da:	4b39      	ldr	r3, [pc, #228]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1f0      	bne.n	80059c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059e6:	4b36      	ldr	r3, [pc, #216]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80059e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059ea:	4b37      	ldr	r3, [pc, #220]	; (8005ac8 <HAL_RCC_OscConfig+0x774>)
 80059ec:	4013      	ands	r3, r2
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059f6:	0112      	lsls	r2, r2, #4
 80059f8:	430a      	orrs	r2, r1
 80059fa:	4931      	ldr	r1, [pc, #196]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	628b      	str	r3, [r1, #40]	; 0x28
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a04:	3b01      	subs	r3, #1
 8005a06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	025b      	lsls	r3, r3, #9
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	431a      	orrs	r2, r3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	041b      	lsls	r3, r3, #16
 8005a1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	061b      	lsls	r3, r3, #24
 8005a2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a30:	4923      	ldr	r1, [pc, #140]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3a:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a3c:	f023 0301 	bic.w	r3, r3, #1
 8005a40:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a42:	4b1f      	ldr	r3, [pc, #124]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a46:	4b21      	ldr	r3, [pc, #132]	; (8005acc <HAL_RCC_OscConfig+0x778>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a4e:	00d2      	lsls	r2, r2, #3
 8005a50:	491b      	ldr	r1, [pc, #108]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a56:	4b1a      	ldr	r3, [pc, #104]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a5a:	f023 020c 	bic.w	r2, r3, #12
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	4917      	ldr	r1, [pc, #92]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a64:	4313      	orrs	r3, r2
 8005a66:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a68:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	f023 0202 	bic.w	r2, r3, #2
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a74:	4912      	ldr	r1, [pc, #72]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a7a:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7e:	4a10      	ldr	r2, [pc, #64]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a86:	4b0e      	ldr	r3, [pc, #56]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	4a0d      	ldr	r2, [pc, #52]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a9e:	4b08      	ldr	r3, [pc, #32]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa2:	4a07      	ldr	r2, [pc, #28]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005aaa:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a04      	ldr	r2, [pc, #16]	; (8005ac0 <HAL_RCC_OscConfig+0x76c>)
 8005ab0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab6:	f7fc f8df 	bl	8001c78 <HAL_GetTick>
 8005aba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005abc:	e011      	b.n	8005ae2 <HAL_RCC_OscConfig+0x78e>
 8005abe:	bf00      	nop
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	58024800 	.word	0x58024800
 8005ac8:	fffffc0c 	.word	0xfffffc0c
 8005acc:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ad0:	f7fc f8d2 	bl	8001c78 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e05f      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ae2:	4b32      	ldr	r3, [pc, #200]	; (8005bac <HAL_RCC_OscConfig+0x858>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0x77c>
 8005aee:	e057      	b.n	8005ba0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af0:	4b2e      	ldr	r3, [pc, #184]	; (8005bac <HAL_RCC_OscConfig+0x858>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2d      	ldr	r2, [pc, #180]	; (8005bac <HAL_RCC_OscConfig+0x858>)
 8005af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afc:	f7fc f8bc 	bl	8001c78 <HAL_GetTick>
 8005b00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fc f8b8 	bl	8001c78 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e045      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005b16:	4b25      	ldr	r3, [pc, #148]	; (8005bac <HAL_RCC_OscConfig+0x858>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x7b0>
 8005b22:	e03d      	b.n	8005ba0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005b24:	4b21      	ldr	r3, [pc, #132]	; (8005bac <HAL_RCC_OscConfig+0x858>)
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005b2a:	4b20      	ldr	r3, [pc, #128]	; (8005bac <HAL_RCC_OscConfig+0x858>)
 8005b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d031      	beq.n	8005b9c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f003 0203 	and.w	r2, r3, #3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d12a      	bne.n	8005b9c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d122      	bne.n	8005b9c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b60:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b62:	429a      	cmp	r2, r3
 8005b64:	d11a      	bne.n	8005b9c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	0a5b      	lsrs	r3, r3, #9
 8005b6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b72:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d111      	bne.n	8005b9c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	0c1b      	lsrs	r3, r3, #16
 8005b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d108      	bne.n	8005b9c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	0e1b      	lsrs	r3, r3, #24
 8005b8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b96:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d001      	beq.n	8005ba0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e000      	b.n	8005ba2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3730      	adds	r7, #48	; 0x30
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	58024400 	.word	0x58024400

08005bb0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e19c      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005bc4:	4b8a      	ldr	r3, [pc, #552]	; (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d910      	bls.n	8005bf4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bd2:	4b87      	ldr	r3, [pc, #540]	; (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f023 020f 	bic.w	r2, r3, #15
 8005bda:	4985      	ldr	r1, [pc, #532]	; (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005be2:	4b83      	ldr	r3, [pc, #524]	; (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d001      	beq.n	8005bf4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e184      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d010      	beq.n	8005c22 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	691a      	ldr	r2, [r3, #16]
 8005c04:	4b7b      	ldr	r3, [pc, #492]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d908      	bls.n	8005c22 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005c10:	4b78      	ldr	r3, [pc, #480]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c12:	699b      	ldr	r3, [r3, #24]
 8005c14:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	4975      	ldr	r1, [pc, #468]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0308 	and.w	r3, r3, #8
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d010      	beq.n	8005c50 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695a      	ldr	r2, [r3, #20]
 8005c32:	4b70      	ldr	r3, [pc, #448]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d908      	bls.n	8005c50 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c3e:	4b6d      	ldr	r3, [pc, #436]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c40:	69db      	ldr	r3, [r3, #28]
 8005c42:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	496a      	ldr	r1, [pc, #424]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d010      	beq.n	8005c7e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699a      	ldr	r2, [r3, #24]
 8005c60:	4b64      	ldr	r3, [pc, #400]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c62:	69db      	ldr	r3, [r3, #28]
 8005c64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d908      	bls.n	8005c7e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c6c:	4b61      	ldr	r3, [pc, #388]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c6e:	69db      	ldr	r3, [r3, #28]
 8005c70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	699b      	ldr	r3, [r3, #24]
 8005c78:	495e      	ldr	r1, [pc, #376]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d010      	beq.n	8005cac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69da      	ldr	r2, [r3, #28]
 8005c8e:	4b59      	ldr	r3, [pc, #356]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d908      	bls.n	8005cac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c9a:	4b56      	ldr	r3, [pc, #344]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	69db      	ldr	r3, [r3, #28]
 8005ca6:	4953      	ldr	r1, [pc, #332]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d010      	beq.n	8005cda <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	4b4d      	ldr	r3, [pc, #308]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	f003 030f 	and.w	r3, r3, #15
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d908      	bls.n	8005cda <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc8:	4b4a      	ldr	r3, [pc, #296]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	f023 020f 	bic.w	r2, r3, #15
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4947      	ldr	r1, [pc, #284]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0301 	and.w	r3, r3, #1
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d055      	beq.n	8005d92 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005ce6:	4b43      	ldr	r3, [pc, #268]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	4940      	ldr	r1, [pc, #256]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d107      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005d00:	4b3c      	ldr	r3, [pc, #240]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d121      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e0f6      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d107      	bne.n	8005d28 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d18:	4b36      	ldr	r3, [pc, #216]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d115      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0ea      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d107      	bne.n	8005d40 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d30:	4b30      	ldr	r3, [pc, #192]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d109      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e0de      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d40:	4b2c      	ldr	r3, [pc, #176]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0304 	and.w	r3, r3, #4
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e0d6      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d50:	4b28      	ldr	r3, [pc, #160]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f023 0207 	bic.w	r2, r3, #7
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4925      	ldr	r1, [pc, #148]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d62:	f7fb ff89 	bl	8001c78 <HAL_GetTick>
 8005d66:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d68:	e00a      	b.n	8005d80 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d6a:	f7fb ff85 	bl	8001c78 <HAL_GetTick>
 8005d6e:	4602      	mov	r2, r0
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	1ad3      	subs	r3, r2, r3
 8005d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e0be      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d80:	4b1c      	ldr	r3, [pc, #112]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d1eb      	bne.n	8005d6a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d010      	beq.n	8005dc0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	4b14      	ldr	r3, [pc, #80]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005da4:	699b      	ldr	r3, [r3, #24]
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d208      	bcs.n	8005dc0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005dae:	4b11      	ldr	r3, [pc, #68]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	f023 020f 	bic.w	r2, r3, #15
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	490e      	ldr	r1, [pc, #56]	; (8005df4 <HAL_RCC_ClockConfig+0x244>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc0:	4b0b      	ldr	r3, [pc, #44]	; (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d214      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dce:	4b08      	ldr	r3, [pc, #32]	; (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 020f 	bic.w	r2, r3, #15
 8005dd6:	4906      	ldr	r1, [pc, #24]	; (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dde:	4b04      	ldr	r3, [pc, #16]	; (8005df0 <HAL_RCC_ClockConfig+0x240>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d005      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e086      	b.n	8005efe <HAL_RCC_ClockConfig+0x34e>
 8005df0:	52002000 	.word	0x52002000
 8005df4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	4b3f      	ldr	r3, [pc, #252]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d208      	bcs.n	8005e26 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e14:	4b3c      	ldr	r3, [pc, #240]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	691b      	ldr	r3, [r3, #16]
 8005e20:	4939      	ldr	r1, [pc, #228]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d010      	beq.n	8005e54 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	695a      	ldr	r2, [r3, #20]
 8005e36:	4b34      	ldr	r3, [pc, #208]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d208      	bcs.n	8005e54 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e42:	4b31      	ldr	r3, [pc, #196]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	695b      	ldr	r3, [r3, #20]
 8005e4e:	492e      	ldr	r1, [pc, #184]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d010      	beq.n	8005e82 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699a      	ldr	r2, [r3, #24]
 8005e64:	4b28      	ldr	r3, [pc, #160]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e66:	69db      	ldr	r3, [r3, #28]
 8005e68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d208      	bcs.n	8005e82 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e70:	4b25      	ldr	r3, [pc, #148]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e72:	69db      	ldr	r3, [r3, #28]
 8005e74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	4922      	ldr	r1, [pc, #136]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d010      	beq.n	8005eb0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	69da      	ldr	r2, [r3, #28]
 8005e92:	4b1d      	ldr	r3, [pc, #116]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d208      	bcs.n	8005eb0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e9e:	4b1a      	ldr	r3, [pc, #104]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	4917      	ldr	r1, [pc, #92]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005eb0:	f000 f834 	bl	8005f1c <HAL_RCC_GetSysClockFreq>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	0a1b      	lsrs	r3, r3, #8
 8005ebc:	f003 030f 	and.w	r3, r3, #15
 8005ec0:	4912      	ldr	r1, [pc, #72]	; (8005f0c <HAL_RCC_ClockConfig+0x35c>)
 8005ec2:	5ccb      	ldrb	r3, [r1, r3]
 8005ec4:	f003 031f 	and.w	r3, r3, #31
 8005ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ecc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ece:	4b0e      	ldr	r3, [pc, #56]	; (8005f08 <HAL_RCC_ClockConfig+0x358>)
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	; (8005f0c <HAL_RCC_ClockConfig+0x35c>)
 8005ed8:	5cd3      	ldrb	r3, [r2, r3]
 8005eda:	f003 031f 	and.w	r3, r3, #31
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ee4:	4a0a      	ldr	r2, [pc, #40]	; (8005f10 <HAL_RCC_ClockConfig+0x360>)
 8005ee6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ee8:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <HAL_RCC_ClockConfig+0x364>)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005eee:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <HAL_RCC_ClockConfig+0x368>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fb fe76 	bl	8001be4 <HAL_InitTick>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	58024400 	.word	0x58024400
 8005f0c:	0800a264 	.word	0x0800a264
 8005f10:	24000004 	.word	0x24000004
 8005f14:	24000000 	.word	0x24000000
 8005f18:	24000020 	.word	0x24000020

08005f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b089      	sub	sp, #36	; 0x24
 8005f20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f22:	4bb3      	ldr	r3, [pc, #716]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f2a:	2b18      	cmp	r3, #24
 8005f2c:	f200 8155 	bhi.w	80061da <HAL_RCC_GetSysClockFreq+0x2be>
 8005f30:	a201      	add	r2, pc, #4	; (adr r2, 8005f38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f36:	bf00      	nop
 8005f38:	08005f9d 	.word	0x08005f9d
 8005f3c:	080061db 	.word	0x080061db
 8005f40:	080061db 	.word	0x080061db
 8005f44:	080061db 	.word	0x080061db
 8005f48:	080061db 	.word	0x080061db
 8005f4c:	080061db 	.word	0x080061db
 8005f50:	080061db 	.word	0x080061db
 8005f54:	080061db 	.word	0x080061db
 8005f58:	08005fc3 	.word	0x08005fc3
 8005f5c:	080061db 	.word	0x080061db
 8005f60:	080061db 	.word	0x080061db
 8005f64:	080061db 	.word	0x080061db
 8005f68:	080061db 	.word	0x080061db
 8005f6c:	080061db 	.word	0x080061db
 8005f70:	080061db 	.word	0x080061db
 8005f74:	080061db 	.word	0x080061db
 8005f78:	08005fc9 	.word	0x08005fc9
 8005f7c:	080061db 	.word	0x080061db
 8005f80:	080061db 	.word	0x080061db
 8005f84:	080061db 	.word	0x080061db
 8005f88:	080061db 	.word	0x080061db
 8005f8c:	080061db 	.word	0x080061db
 8005f90:	080061db 	.word	0x080061db
 8005f94:	080061db 	.word	0x080061db
 8005f98:	08005fcf 	.word	0x08005fcf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f9c:	4b94      	ldr	r3, [pc, #592]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d009      	beq.n	8005fbc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005fa8:	4b91      	ldr	r3, [pc, #580]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	08db      	lsrs	r3, r3, #3
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	4a90      	ldr	r2, [pc, #576]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fba:	e111      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fbc:	4b8d      	ldr	r3, [pc, #564]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005fbe:	61bb      	str	r3, [r7, #24]
    break;
 8005fc0:	e10e      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fc2:	4b8d      	ldr	r3, [pc, #564]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005fc4:	61bb      	str	r3, [r7, #24]
    break;
 8005fc6:	e10b      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fc8:	4b8c      	ldr	r3, [pc, #560]	; (80061fc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005fca:	61bb      	str	r3, [r7, #24]
    break;
 8005fcc:	e108      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fce:	4b88      	ldr	r3, [pc, #544]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fd8:	4b85      	ldr	r3, [pc, #532]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fdc:	091b      	lsrs	r3, r3, #4
 8005fde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fe2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fe4:	4b82      	ldr	r3, [pc, #520]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fee:	4b80      	ldr	r3, [pc, #512]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	08db      	lsrs	r3, r3, #3
 8005ff4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	fb02 f303 	mul.w	r3, r2, r3
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 80e1 	beq.w	80061d4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	2b02      	cmp	r3, #2
 8006016:	f000 8083 	beq.w	8006120 <HAL_RCC_GetSysClockFreq+0x204>
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	2b02      	cmp	r3, #2
 800601e:	f200 80a1 	bhi.w	8006164 <HAL_RCC_GetSysClockFreq+0x248>
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <HAL_RCC_GetSysClockFreq+0x114>
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	2b01      	cmp	r3, #1
 800602c:	d056      	beq.n	80060dc <HAL_RCC_GetSysClockFreq+0x1c0>
 800602e:	e099      	b.n	8006164 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006030:	4b6f      	ldr	r3, [pc, #444]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d02d      	beq.n	8006098 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800603c:	4b6c      	ldr	r3, [pc, #432]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	08db      	lsrs	r3, r3, #3
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	4a6b      	ldr	r2, [pc, #428]	; (80061f4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
 800604c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	ee07 3a90 	vmov	s15, r3
 8006054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006066:	4b62      	ldr	r3, [pc, #392]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800606e:	ee07 3a90 	vmov	s15, r3
 8006072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006076:	ed97 6a02 	vldr	s12, [r7, #8]
 800607a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800607e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006086:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800608a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800608e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006092:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8006096:	e087      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006204 <HAL_RCC_GetSysClockFreq+0x2e8>
 80060a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060aa:	4b51      	ldr	r3, [pc, #324]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060b2:	ee07 3a90 	vmov	s15, r3
 80060b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80060be:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2e4>
 80060c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060da:	e065      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	ee07 3a90 	vmov	s15, r3
 80060e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060e6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006208 <HAL_RCC_GetSysClockFreq+0x2ec>
 80060ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060ee:	4b40      	ldr	r3, [pc, #256]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80060f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060f6:	ee07 3a90 	vmov	s15, r3
 80060fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006102:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800610a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800610e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800611a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800611e:	e043      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	ee07 3a90 	vmov	s15, r3
 8006126:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800612a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800620c <HAL_RCC_GetSysClockFreq+0x2f0>
 800612e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006132:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006142:	ed97 6a02 	vldr	s12, [r7, #8]
 8006146:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800614a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800614e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006152:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006162:	e021      	b.n	80061a8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	ee07 3a90 	vmov	s15, r3
 800616a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800616e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006208 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006176:	4b1e      	ldr	r3, [pc, #120]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617e:	ee07 3a90 	vmov	s15, r3
 8006182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006186:	ed97 6a02 	vldr	s12, [r7, #8]
 800618a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006200 <HAL_RCC_GetSysClockFreq+0x2e4>
 800618e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800619a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800619e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061a6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80061a8:	4b11      	ldr	r3, [pc, #68]	; (80061f0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80061aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ac:	0a5b      	lsrs	r3, r3, #9
 80061ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061b2:	3301      	adds	r3, #1
 80061b4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	ee07 3a90 	vmov	s15, r3
 80061bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80061c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061cc:	ee17 3a90 	vmov	r3, s15
 80061d0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061d2:	e005      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	61bb      	str	r3, [r7, #24]
    break;
 80061d8:	e002      	b.n	80061e0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80061da:	4b07      	ldr	r3, [pc, #28]	; (80061f8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80061dc:	61bb      	str	r3, [r7, #24]
    break;
 80061de:	bf00      	nop
  }

  return sysclockfreq;
 80061e0:	69bb      	ldr	r3, [r7, #24]
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3724      	adds	r7, #36	; 0x24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400
 80061f4:	03d09000 	.word	0x03d09000
 80061f8:	003d0900 	.word	0x003d0900
 80061fc:	007a1200 	.word	0x007a1200
 8006200:	46000000 	.word	0x46000000
 8006204:	4c742400 	.word	0x4c742400
 8006208:	4a742400 	.word	0x4a742400
 800620c:	4af42400 	.word	0x4af42400

08006210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006216:	f7ff fe81 	bl	8005f1c <HAL_RCC_GetSysClockFreq>
 800621a:	4602      	mov	r2, r0
 800621c:	4b10      	ldr	r3, [pc, #64]	; (8006260 <HAL_RCC_GetHCLKFreq+0x50>)
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	0a1b      	lsrs	r3, r3, #8
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	490f      	ldr	r1, [pc, #60]	; (8006264 <HAL_RCC_GetHCLKFreq+0x54>)
 8006228:	5ccb      	ldrb	r3, [r1, r3]
 800622a:	f003 031f 	and.w	r3, r3, #31
 800622e:	fa22 f303 	lsr.w	r3, r2, r3
 8006232:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006234:	4b0a      	ldr	r3, [pc, #40]	; (8006260 <HAL_RCC_GetHCLKFreq+0x50>)
 8006236:	699b      	ldr	r3, [r3, #24]
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	4a09      	ldr	r2, [pc, #36]	; (8006264 <HAL_RCC_GetHCLKFreq+0x54>)
 800623e:	5cd3      	ldrb	r3, [r2, r3]
 8006240:	f003 031f 	and.w	r3, r3, #31
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	fa22 f303 	lsr.w	r3, r2, r3
 800624a:	4a07      	ldr	r2, [pc, #28]	; (8006268 <HAL_RCC_GetHCLKFreq+0x58>)
 800624c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800624e:	4a07      	ldr	r2, [pc, #28]	; (800626c <HAL_RCC_GetHCLKFreq+0x5c>)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006254:	4b04      	ldr	r3, [pc, #16]	; (8006268 <HAL_RCC_GetHCLKFreq+0x58>)
 8006256:	681b      	ldr	r3, [r3, #0]
}
 8006258:	4618      	mov	r0, r3
 800625a:	3708      	adds	r7, #8
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	58024400 	.word	0x58024400
 8006264:	0800a264 	.word	0x0800a264
 8006268:	24000004 	.word	0x24000004
 800626c:	24000000 	.word	0x24000000

08006270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006274:	f7ff ffcc 	bl	8006210 <HAL_RCC_GetHCLKFreq>
 8006278:	4602      	mov	r2, r0
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <HAL_RCC_GetPCLK1Freq+0x24>)
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	f003 0307 	and.w	r3, r3, #7
 8006284:	4904      	ldr	r1, [pc, #16]	; (8006298 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006286:	5ccb      	ldrb	r3, [r1, r3]
 8006288:	f003 031f 	and.w	r3, r3, #31
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006290:	4618      	mov	r0, r3
 8006292:	bd80      	pop	{r7, pc}
 8006294:	58024400 	.word	0x58024400
 8006298:	0800a264 	.word	0x0800a264

0800629c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80062a0:	f7ff ffb6 	bl	8006210 <HAL_RCC_GetHCLKFreq>
 80062a4:	4602      	mov	r2, r0
 80062a6:	4b06      	ldr	r3, [pc, #24]	; (80062c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	0a1b      	lsrs	r3, r3, #8
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	4904      	ldr	r1, [pc, #16]	; (80062c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80062b2:	5ccb      	ldrb	r3, [r1, r3]
 80062b4:	f003 031f 	and.w	r3, r3, #31
 80062b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062bc:	4618      	mov	r0, r3
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	58024400 	.word	0x58024400
 80062c4:	0800a264 	.word	0x0800a264

080062c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b086      	sub	sp, #24
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062d0:	2300      	movs	r3, #0
 80062d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062d4:	2300      	movs	r3, #0
 80062d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d03f      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062ec:	d02a      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80062ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80062f2:	d824      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80062f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062f8:	d018      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80062fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80062fe:	d81e      	bhi.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006308:	d007      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800630a:	e018      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800630c:	4ba3      	ldr	r3, [pc, #652]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800630e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006310:	4aa2      	ldr	r2, [pc, #648]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006318:	e015      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3304      	adds	r3, #4
 800631e:	2102      	movs	r1, #2
 8006320:	4618      	mov	r0, r3
 8006322:	f001 f9d5 	bl	80076d0 <RCCEx_PLL2_Config>
 8006326:	4603      	mov	r3, r0
 8006328:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800632a:	e00c      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3324      	adds	r3, #36	; 0x24
 8006330:	2102      	movs	r1, #2
 8006332:	4618      	mov	r0, r3
 8006334:	f001 fa7e 	bl	8007834 <RCCEx_PLL3_Config>
 8006338:	4603      	mov	r3, r0
 800633a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800633c:	e003      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	75fb      	strb	r3, [r7, #23]
      break;
 8006342:	e000      	b.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006346:	7dfb      	ldrb	r3, [r7, #23]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d109      	bne.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800634c:	4b93      	ldr	r3, [pc, #588]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800634e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006358:	4990      	ldr	r1, [pc, #576]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800635a:	4313      	orrs	r3, r2
 800635c:	650b      	str	r3, [r1, #80]	; 0x50
 800635e:	e001      	b.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006360:	7dfb      	ldrb	r3, [r7, #23]
 8006362:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636c:	2b00      	cmp	r3, #0
 800636e:	d03d      	beq.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006374:	2b04      	cmp	r3, #4
 8006376:	d826      	bhi.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8006378:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	08006395 	.word	0x08006395
 8006384:	080063a3 	.word	0x080063a3
 8006388:	080063b5 	.word	0x080063b5
 800638c:	080063cd 	.word	0x080063cd
 8006390:	080063cd 	.word	0x080063cd
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006394:	4b81      	ldr	r3, [pc, #516]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006398:	4a80      	ldr	r2, [pc, #512]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800639a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800639e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063a0:	e015      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3304      	adds	r3, #4
 80063a6:	2100      	movs	r1, #0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 f991 	bl	80076d0 <RCCEx_PLL2_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b2:	e00c      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	3324      	adds	r3, #36	; 0x24
 80063b8:	2100      	movs	r1, #0
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 fa3a 	bl	8007834 <RCCEx_PLL3_Config>
 80063c0:	4603      	mov	r3, r0
 80063c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063c4:	e003      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063c6:	2301      	movs	r3, #1
 80063c8:	75fb      	strb	r3, [r7, #23]
      break;
 80063ca:	e000      	b.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80063cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d109      	bne.n	80063e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063d4:	4b71      	ldr	r3, [pc, #452]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063d8:	f023 0207 	bic.w	r2, r3, #7
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	496e      	ldr	r1, [pc, #440]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80063e2:	4313      	orrs	r3, r2
 80063e4:	650b      	str	r3, [r1, #80]	; 0x50
 80063e6:	e001      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063e8:	7dfb      	ldrb	r3, [r7, #23]
 80063ea:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d042      	beq.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006400:	d02b      	beq.n	800645a <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006402:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006406:	d825      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006408:	2bc0      	cmp	r3, #192	; 0xc0
 800640a:	d028      	beq.n	800645e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800640c:	2bc0      	cmp	r3, #192	; 0xc0
 800640e:	d821      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006410:	2b80      	cmp	r3, #128	; 0x80
 8006412:	d016      	beq.n	8006442 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d81d      	bhi.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d007      	beq.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006420:	e018      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006422:	4b5e      	ldr	r3, [pc, #376]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	4a5d      	ldr	r2, [pc, #372]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800642c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800642e:	e017      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	3304      	adds	r3, #4
 8006434:	2100      	movs	r1, #0
 8006436:	4618      	mov	r0, r3
 8006438:	f001 f94a 	bl	80076d0 <RCCEx_PLL2_Config>
 800643c:	4603      	mov	r3, r0
 800643e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006440:	e00e      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3324      	adds	r3, #36	; 0x24
 8006446:	2100      	movs	r1, #0
 8006448:	4618      	mov	r0, r3
 800644a:	f001 f9f3 	bl	8007834 <RCCEx_PLL3_Config>
 800644e:	4603      	mov	r3, r0
 8006450:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006452:	e005      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006454:	2301      	movs	r3, #1
 8006456:	75fb      	strb	r3, [r7, #23]
      break;
 8006458:	e002      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800645a:	bf00      	nop
 800645c:	e000      	b.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800645e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006460:	7dfb      	ldrb	r3, [r7, #23]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d109      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006466:	4b4d      	ldr	r3, [pc, #308]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800646a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006472:	494a      	ldr	r1, [pc, #296]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006474:	4313      	orrs	r3, r2
 8006476:	650b      	str	r3, [r1, #80]	; 0x50
 8006478:	e001      	b.n	800647e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647a:	7dfb      	ldrb	r3, [r7, #23]
 800647c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006486:	2b00      	cmp	r3, #0
 8006488:	d049      	beq.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006490:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006494:	d030      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006496:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800649a:	d82a      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800649c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064a0:	d02c      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x234>
 80064a2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064a6:	d824      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064ac:	d018      	beq.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80064ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064b2:	d81e      	bhi.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80064b8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064bc:	d007      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0x206>
 80064be:	e018      	b.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c0:	4b36      	ldr	r3, [pc, #216]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a35      	ldr	r2, [pc, #212]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80064c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064cc:	e017      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	3304      	adds	r3, #4
 80064d2:	2100      	movs	r1, #0
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 f8fb 	bl	80076d0 <RCCEx_PLL2_Config>
 80064da:	4603      	mov	r3, r0
 80064dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064de:	e00e      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3324      	adds	r3, #36	; 0x24
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 f9a4 	bl	8007834 <RCCEx_PLL3_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064f0:	e005      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	75fb      	strb	r3, [r7, #23]
      break;
 80064f6:	e002      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064f8:	bf00      	nop
 80064fa:	e000      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80064fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064fe:	7dfb      	ldrb	r3, [r7, #23]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006504:	4b25      	ldr	r3, [pc, #148]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006508:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006512:	4922      	ldr	r1, [pc, #136]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006514:	4313      	orrs	r3, r2
 8006516:	658b      	str	r3, [r1, #88]	; 0x58
 8006518:	e001      	b.n	800651e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651a:	7dfb      	ldrb	r3, [r7, #23]
 800651c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006526:	2b00      	cmp	r3, #0
 8006528:	d04b      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006530:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006534:	d030      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006536:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800653a:	d82a      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800653c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006540:	d02e      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006542:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006546:	d824      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006548:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800654c:	d018      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800654e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006552:	d81e      	bhi.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800655c:	d007      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800655e:	e018      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006560:	4b0e      	ldr	r3, [pc, #56]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a0d      	ldr	r2, [pc, #52]	; (800659c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800656c:	e019      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	2100      	movs	r1, #0
 8006574:	4618      	mov	r0, r3
 8006576:	f001 f8ab 	bl	80076d0 <RCCEx_PLL2_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800657e:	e010      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3324      	adds	r3, #36	; 0x24
 8006584:	2100      	movs	r1, #0
 8006586:	4618      	mov	r0, r3
 8006588:	f001 f954 	bl	8007834 <RCCEx_PLL3_Config>
 800658c:	4603      	mov	r3, r0
 800658e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006590:	e007      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
      break;
 8006596:	e004      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8006598:	bf00      	nop
 800659a:	e002      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800659c:	58024400 	.word	0x58024400
      break;
 80065a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10a      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065a8:	4b99      	ldr	r3, [pc, #612]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065b6:	4996      	ldr	r1, [pc, #600]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	658b      	str	r3, [r1, #88]	; 0x58
 80065bc:	e001      	b.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065be:	7dfb      	ldrb	r3, [r7, #23]
 80065c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d032      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065d2:	2b30      	cmp	r3, #48	; 0x30
 80065d4:	d01c      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80065d6:	2b30      	cmp	r3, #48	; 0x30
 80065d8:	d817      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d00c      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80065de:	2b20      	cmp	r3, #32
 80065e0:	d813      	bhi.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x342>
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d016      	beq.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d10f      	bne.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ea:	4b89      	ldr	r3, [pc, #548]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ee:	4a88      	ldr	r2, [pc, #544]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80065f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065f6:	e00e      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	3304      	adds	r3, #4
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 f866 	bl	80076d0 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006608:	e005      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	75fb      	strb	r3, [r7, #23]
      break;
 800660e:	e002      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006610:	bf00      	nop
 8006612:	e000      	b.n	8006616 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d109      	bne.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800661c:	4b7c      	ldr	r3, [pc, #496]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800661e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006620:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006628:	4979      	ldr	r1, [pc, #484]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800662a:	4313      	orrs	r3, r2
 800662c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800662e:	e001      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d047      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006648:	d030      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800664a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800664e:	d82a      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006650:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006654:	d02c      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006656:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800665a:	d824      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800665c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006660:	d018      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006666:	d81e      	bhi.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800666c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006670:	d007      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006672:	e018      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006674:	4b66      	ldr	r3, [pc, #408]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006678:	4a65      	ldr	r2, [pc, #404]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800667a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800667e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006680:	e017      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	3304      	adds	r3, #4
 8006686:	2100      	movs	r1, #0
 8006688:	4618      	mov	r0, r3
 800668a:	f001 f821 	bl	80076d0 <RCCEx_PLL2_Config>
 800668e:	4603      	mov	r3, r0
 8006690:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006692:	e00e      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3324      	adds	r3, #36	; 0x24
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f001 f8ca 	bl	8007834 <RCCEx_PLL3_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80066a4:	e005      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	75fb      	strb	r3, [r7, #23]
      break;
 80066aa:	e002      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80066ac:	bf00      	nop
 80066ae:	e000      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80066b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066b2:	7dfb      	ldrb	r3, [r7, #23]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d109      	bne.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066b8:	4b55      	ldr	r3, [pc, #340]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066bc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066c4:	4952      	ldr	r1, [pc, #328]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	650b      	str	r3, [r1, #80]	; 0x50
 80066ca:	e001      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066cc:	7dfb      	ldrb	r3, [r7, #23]
 80066ce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d049      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066e4:	d02e      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80066e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066ea:	d828      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066f0:	d02a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80066f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066f6:	d822      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80066f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066fc:	d026      	beq.n	800674c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80066fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006702:	d81c      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006708:	d010      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800670a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800670e:	d816      	bhi.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006710:	2b00      	cmp	r3, #0
 8006712:	d01d      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006718:	d111      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	3304      	adds	r3, #4
 800671e:	2101      	movs	r1, #1
 8006720:	4618      	mov	r0, r3
 8006722:	f000 ffd5 	bl	80076d0 <RCCEx_PLL2_Config>
 8006726:	4603      	mov	r3, r0
 8006728:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800672a:	e012      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	3324      	adds	r3, #36	; 0x24
 8006730:	2101      	movs	r1, #1
 8006732:	4618      	mov	r0, r3
 8006734:	f001 f87e 	bl	8007834 <RCCEx_PLL3_Config>
 8006738:	4603      	mov	r3, r0
 800673a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800673c:	e009      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	75fb      	strb	r3, [r7, #23]
      break;
 8006742:	e006      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006744:	bf00      	nop
 8006746:	e004      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006748:	bf00      	nop
 800674a:	e002      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800674c:	bf00      	nop
 800674e:	e000      	b.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006750:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006758:	4b2d      	ldr	r3, [pc, #180]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800675a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800675c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006764:	492a      	ldr	r1, [pc, #168]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006766:	4313      	orrs	r3, r2
 8006768:	650b      	str	r3, [r1, #80]	; 0x50
 800676a:	e001      	b.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d04d      	beq.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006786:	d02e      	beq.n	80067e6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006788:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678c:	d828      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800678e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006792:	d02a      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006798:	d822      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800679a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800679e:	d026      	beq.n	80067ee <HAL_RCCEx_PeriphCLKConfig+0x526>
 80067a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80067a4:	d81c      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067aa:	d010      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x506>
 80067ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80067b0:	d816      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d01d      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80067b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067ba:	d111      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	2101      	movs	r1, #1
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 ff84 	bl	80076d0 <RCCEx_PLL2_Config>
 80067c8:	4603      	mov	r3, r0
 80067ca:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067cc:	e012      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	3324      	adds	r3, #36	; 0x24
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f82d 	bl	8007834 <RCCEx_PLL3_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067de:	e009      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	75fb      	strb	r3, [r7, #23]
      break;
 80067e4:	e006      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067e6:	bf00      	nop
 80067e8:	e004      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067ea:	bf00      	nop
 80067ec:	e002      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067ee:	bf00      	nop
 80067f0:	e000      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 80067f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067f4:	7dfb      	ldrb	r3, [r7, #23]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10c      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067fa:	4b05      	ldr	r3, [pc, #20]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80067fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067fe:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006808:	4901      	ldr	r1, [pc, #4]	; (8006810 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800680a:	4313      	orrs	r3, r2
 800680c:	658b      	str	r3, [r1, #88]	; 0x58
 800680e:	e003      	b.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006810:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006814:	7dfb      	ldrb	r3, [r7, #23]
 8006816:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006820:	2b00      	cmp	r3, #0
 8006822:	d02f      	beq.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682c:	d00e      	beq.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800682e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006832:	d814      	bhi.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006834:	2b00      	cmp	r3, #0
 8006836:	d015      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800683c:	d10f      	bne.n	800685e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800683e:	4baf      	ldr	r3, [pc, #700]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006842:	4aae      	ldr	r2, [pc, #696]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006848:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800684a:	e00c      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	2101      	movs	r1, #1
 8006852:	4618      	mov	r0, r3
 8006854:	f000 ff3c 	bl	80076d0 <RCCEx_PLL2_Config>
 8006858:	4603      	mov	r3, r0
 800685a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800685c:	e003      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	75fb      	strb	r3, [r7, #23]
      break;
 8006862:	e000      	b.n	8006866 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006866:	7dfb      	ldrb	r3, [r7, #23]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d109      	bne.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800686c:	4ba3      	ldr	r3, [pc, #652]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800686e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006870:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006878:	49a0      	ldr	r1, [pc, #640]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800687a:	4313      	orrs	r3, r2
 800687c:	650b      	str	r3, [r1, #80]	; 0x50
 800687e:	e001      	b.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006880:	7dfb      	ldrb	r3, [r7, #23]
 8006882:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d032      	beq.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006894:	2b03      	cmp	r3, #3
 8006896:	d81b      	bhi.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006898:	a201      	add	r2, pc, #4	; (adr r2, 80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800689a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800689e:	bf00      	nop
 80068a0:	080068d7 	.word	0x080068d7
 80068a4:	080068b1 	.word	0x080068b1
 80068a8:	080068bf 	.word	0x080068bf
 80068ac:	080068d7 	.word	0x080068d7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b0:	4b92      	ldr	r3, [pc, #584]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4a91      	ldr	r2, [pc, #580]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068bc:	e00c      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	3304      	adds	r3, #4
 80068c2:	2102      	movs	r1, #2
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 ff03 	bl	80076d0 <RCCEx_PLL2_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80068ce:	e003      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	75fb      	strb	r3, [r7, #23]
      break;
 80068d4:	e000      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80068d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d8:	7dfb      	ldrb	r3, [r7, #23]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d109      	bne.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068de:	4b87      	ldr	r3, [pc, #540]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e2:	f023 0203 	bic.w	r2, r3, #3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ea:	4984      	ldr	r1, [pc, #528]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068f0:	e001      	b.n	80068f6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f000 8086 	beq.w	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006904:	4b7e      	ldr	r3, [pc, #504]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a7d      	ldr	r2, [pc, #500]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800690a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800690e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006910:	f7fb f9b2 	bl	8001c78 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006916:	e009      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006918:	f7fb f9ae 	bl	8001c78 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	2b64      	cmp	r3, #100	; 0x64
 8006924:	d902      	bls.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	75fb      	strb	r3, [r7, #23]
        break;
 800692a:	e005      	b.n	8006938 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800692c:	4b74      	ldr	r3, [pc, #464]	; (8006b00 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006934:	2b00      	cmp	r3, #0
 8006936:	d0ef      	beq.n	8006918 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d166      	bne.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800693e:	4b6f      	ldr	r3, [pc, #444]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006940:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006948:	4053      	eors	r3, r2
 800694a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800694e:	2b00      	cmp	r3, #0
 8006950:	d013      	beq.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006952:	4b6a      	ldr	r3, [pc, #424]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800695a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800695c:	4b67      	ldr	r3, [pc, #412]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800695e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006960:	4a66      	ldr	r2, [pc, #408]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006962:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006966:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006968:	4b64      	ldr	r3, [pc, #400]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696c:	4a63      	ldr	r2, [pc, #396]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800696e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006972:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006974:	4a61      	ldr	r2, [pc, #388]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006980:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006984:	d115      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006986:	f7fb f977 	bl	8001c78 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800698c:	e00b      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698e:	f7fb f973 	bl	8001c78 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	f241 3288 	movw	r2, #5000	; 0x1388
 800699c:	4293      	cmp	r3, r2
 800699e:	d902      	bls.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	75fb      	strb	r3, [r7, #23]
            break;
 80069a4:	e005      	b.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069a6:	4b55      	ldr	r3, [pc, #340]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d0ed      	beq.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d126      	bne.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c6:	d10d      	bne.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80069c8:	4b4c      	ldr	r3, [pc, #304]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069d6:	0919      	lsrs	r1, r3, #4
 80069d8:	4b4a      	ldr	r3, [pc, #296]	; (8006b04 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 80069da:	400b      	ands	r3, r1
 80069dc:	4947      	ldr	r1, [pc, #284]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069de:	4313      	orrs	r3, r2
 80069e0:	610b      	str	r3, [r1, #16]
 80069e2:	e005      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80069e4:	4b45      	ldr	r3, [pc, #276]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069e6:	691b      	ldr	r3, [r3, #16]
 80069e8:	4a44      	ldr	r2, [pc, #272]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069ee:	6113      	str	r3, [r2, #16]
 80069f0:	4b42      	ldr	r3, [pc, #264]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80069f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069fe:	493f      	ldr	r1, [pc, #252]	; (8006afc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	670b      	str	r3, [r1, #112]	; 0x70
 8006a04:	e004      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	75bb      	strb	r3, [r7, #22]
 8006a0a:	e001      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a0c:	7dfb      	ldrb	r3, [r7, #23]
 8006a0e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0301 	and.w	r3, r3, #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f000 8085 	beq.w	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006a22:	2b28      	cmp	r3, #40	; 0x28
 8006a24:	d866      	bhi.n	8006af4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006a26:	a201      	add	r2, pc, #4	; (adr r2, 8006a2c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a2c:	08006b09 	.word	0x08006b09
 8006a30:	08006af5 	.word	0x08006af5
 8006a34:	08006af5 	.word	0x08006af5
 8006a38:	08006af5 	.word	0x08006af5
 8006a3c:	08006af5 	.word	0x08006af5
 8006a40:	08006af5 	.word	0x08006af5
 8006a44:	08006af5 	.word	0x08006af5
 8006a48:	08006af5 	.word	0x08006af5
 8006a4c:	08006ad1 	.word	0x08006ad1
 8006a50:	08006af5 	.word	0x08006af5
 8006a54:	08006af5 	.word	0x08006af5
 8006a58:	08006af5 	.word	0x08006af5
 8006a5c:	08006af5 	.word	0x08006af5
 8006a60:	08006af5 	.word	0x08006af5
 8006a64:	08006af5 	.word	0x08006af5
 8006a68:	08006af5 	.word	0x08006af5
 8006a6c:	08006ae3 	.word	0x08006ae3
 8006a70:	08006af5 	.word	0x08006af5
 8006a74:	08006af5 	.word	0x08006af5
 8006a78:	08006af5 	.word	0x08006af5
 8006a7c:	08006af5 	.word	0x08006af5
 8006a80:	08006af5 	.word	0x08006af5
 8006a84:	08006af5 	.word	0x08006af5
 8006a88:	08006af5 	.word	0x08006af5
 8006a8c:	08006b09 	.word	0x08006b09
 8006a90:	08006af5 	.word	0x08006af5
 8006a94:	08006af5 	.word	0x08006af5
 8006a98:	08006af5 	.word	0x08006af5
 8006a9c:	08006af5 	.word	0x08006af5
 8006aa0:	08006af5 	.word	0x08006af5
 8006aa4:	08006af5 	.word	0x08006af5
 8006aa8:	08006af5 	.word	0x08006af5
 8006aac:	08006b09 	.word	0x08006b09
 8006ab0:	08006af5 	.word	0x08006af5
 8006ab4:	08006af5 	.word	0x08006af5
 8006ab8:	08006af5 	.word	0x08006af5
 8006abc:	08006af5 	.word	0x08006af5
 8006ac0:	08006af5 	.word	0x08006af5
 8006ac4:	08006af5 	.word	0x08006af5
 8006ac8:	08006af5 	.word	0x08006af5
 8006acc:	08006b09 	.word	0x08006b09
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3304      	adds	r3, #4
 8006ad4:	2101      	movs	r1, #1
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f000 fdfa 	bl	80076d0 <RCCEx_PLL2_Config>
 8006adc:	4603      	mov	r3, r0
 8006ade:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ae0:	e013      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3324      	adds	r3, #36	; 0x24
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f000 fea3 	bl	8007834 <RCCEx_PLL3_Config>
 8006aee:	4603      	mov	r3, r0
 8006af0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006af2:	e00a      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	75fb      	strb	r3, [r7, #23]
      break;
 8006af8:	e007      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006afa:	bf00      	nop
 8006afc:	58024400 	.word	0x58024400
 8006b00:	58024800 	.word	0x58024800
 8006b04:	00ffffcf 	.word	0x00ffffcf
      break;
 8006b08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d109      	bne.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006b10:	4b96      	ldr	r3, [pc, #600]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b14:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b1c:	4993      	ldr	r1, [pc, #588]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	654b      	str	r3, [r1, #84]	; 0x54
 8006b22:	e001      	b.n	8006b28 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b24:	7dfb      	ldrb	r3, [r7, #23]
 8006b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d038      	beq.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b38:	2b05      	cmp	r3, #5
 8006b3a:	d821      	bhi.n	8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006b3c:	a201      	add	r2, pc, #4	; (adr r2, 8006b44 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b42:	bf00      	nop
 8006b44:	08006b87 	.word	0x08006b87
 8006b48:	08006b5d 	.word	0x08006b5d
 8006b4c:	08006b6f 	.word	0x08006b6f
 8006b50:	08006b87 	.word	0x08006b87
 8006b54:	08006b87 	.word	0x08006b87
 8006b58:	08006b87 	.word	0x08006b87
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3304      	adds	r3, #4
 8006b60:	2101      	movs	r1, #1
 8006b62:	4618      	mov	r0, r3
 8006b64:	f000 fdb4 	bl	80076d0 <RCCEx_PLL2_Config>
 8006b68:	4603      	mov	r3, r0
 8006b6a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b6c:	e00c      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	3324      	adds	r3, #36	; 0x24
 8006b72:	2101      	movs	r1, #1
 8006b74:	4618      	mov	r0, r3
 8006b76:	f000 fe5d 	bl	8007834 <RCCEx_PLL3_Config>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b7e:	e003      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	75fb      	strb	r3, [r7, #23]
      break;
 8006b84:	e000      	b.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006b86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d109      	bne.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b8e:	4b77      	ldr	r3, [pc, #476]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b92:	f023 0207 	bic.w	r2, r3, #7
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b9a:	4974      	ldr	r1, [pc, #464]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	654b      	str	r3, [r1, #84]	; 0x54
 8006ba0:	e001      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ba2:	7dfb      	ldrb	r3, [r7, #23]
 8006ba4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 0304 	and.w	r3, r3, #4
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d03a      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d821      	bhi.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006c07 	.word	0x08006c07
 8006bc8:	08006bdd 	.word	0x08006bdd
 8006bcc:	08006bef 	.word	0x08006bef
 8006bd0:	08006c07 	.word	0x08006c07
 8006bd4:	08006c07 	.word	0x08006c07
 8006bd8:	08006c07 	.word	0x08006c07
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	3304      	adds	r3, #4
 8006be0:	2101      	movs	r1, #1
 8006be2:	4618      	mov	r0, r3
 8006be4:	f000 fd74 	bl	80076d0 <RCCEx_PLL2_Config>
 8006be8:	4603      	mov	r3, r0
 8006bea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bec:	e00c      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	3324      	adds	r3, #36	; 0x24
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fe1d 	bl	8007834 <RCCEx_PLL3_Config>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bfe:	e003      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	75fb      	strb	r3, [r7, #23]
      break;
 8006c04:	e000      	b.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006c06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d10a      	bne.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006c0e:	4b57      	ldr	r3, [pc, #348]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c12:	f023 0207 	bic.w	r2, r3, #7
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1c:	4953      	ldr	r1, [pc, #332]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	658b      	str	r3, [r1, #88]	; 0x58
 8006c22:	e001      	b.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c24:	7dfb      	ldrb	r3, [r7, #23]
 8006c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0320 	and.w	r3, r3, #32
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d04b      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c3e:	d02e      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c44:	d828      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c4a:	d02a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c50:	d822      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c56:	d026      	beq.n	8006ca6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006c58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c5c:	d81c      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c62:	d010      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c68:	d816      	bhi.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d01d      	beq.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c72:	d111      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	3304      	adds	r3, #4
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fd28 	bl	80076d0 <RCCEx_PLL2_Config>
 8006c80:	4603      	mov	r3, r0
 8006c82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c84:	e012      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3324      	adds	r3, #36	; 0x24
 8006c8a:	2102      	movs	r1, #2
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 fdd1 	bl	8007834 <RCCEx_PLL3_Config>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c96:	e009      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c9c:	e006      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006c9e:	bf00      	nop
 8006ca0:	e004      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006ca2:	bf00      	nop
 8006ca4:	e002      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006ca6:	bf00      	nop
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10a      	bne.n	8006cc8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006cb2:	4b2e      	ldr	r3, [pc, #184]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc0:	492a      	ldr	r1, [pc, #168]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	654b      	str	r3, [r1, #84]	; 0x54
 8006cc6:	e001      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc8:	7dfb      	ldrb	r3, [r7, #23]
 8006cca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d04d      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ce2:	d02e      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006ce4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006ce8:	d828      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cee:	d02a      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf4:	d822      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006cf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cfa:	d026      	beq.n	8006d4a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006cfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d00:	d81c      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d06:	d010      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006d08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d0c:	d816      	bhi.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d01d      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d16:	d111      	bne.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3304      	adds	r3, #4
 8006d1c:	2100      	movs	r1, #0
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fcd6 	bl	80076d0 <RCCEx_PLL2_Config>
 8006d24:	4603      	mov	r3, r0
 8006d26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d28:	e012      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	3324      	adds	r3, #36	; 0x24
 8006d2e:	2102      	movs	r1, #2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f000 fd7f 	bl	8007834 <RCCEx_PLL3_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006d3a:	e009      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8006d40:	e006      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d42:	bf00      	nop
 8006d44:	e004      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d46:	bf00      	nop
 8006d48:	e002      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d4a:	bf00      	nop
 8006d4c:	e000      	b.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006d4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d50:	7dfb      	ldrb	r3, [r7, #23]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10c      	bne.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d56:	4b05      	ldr	r3, [pc, #20]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d5a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d64:	4901      	ldr	r1, [pc, #4]	; (8006d6c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d66:	4313      	orrs	r3, r2
 8006d68:	658b      	str	r3, [r1, #88]	; 0x58
 8006d6a:	e003      	b.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d70:	7dfb      	ldrb	r3, [r7, #23]
 8006d72:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d04b      	beq.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d86:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d8a:	d02e      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006d8c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d90:	d828      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d96:	d02a      	beq.n	8006dee <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006d98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d9c:	d822      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006d9e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006da2:	d026      	beq.n	8006df2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8006da4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006da8:	d81c      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006daa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006dae:	d010      	beq.n	8006dd2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006db4:	d816      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d01d      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8006dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dbe:	d111      	bne.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fc82 	bl	80076d0 <RCCEx_PLL2_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006dd0:	e012      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3324      	adds	r3, #36	; 0x24
 8006dd6:	2102      	movs	r1, #2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fd2b 	bl	8007834 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006de2:	e009      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
      break;
 8006de8:	e006      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006dea:	bf00      	nop
 8006dec:	e004      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006dee:	bf00      	nop
 8006df0:	e002      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006df2:	bf00      	nop
 8006df4:	e000      	b.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006df6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d10a      	bne.n	8006e14 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006dfe:	4b9d      	ldr	r3, [pc, #628]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e0c:	4999      	ldr	r1, [pc, #612]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	658b      	str	r3, [r1, #88]	; 0x58
 8006e12:	e001      	b.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
 8006e16:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 0308 	and.w	r3, r3, #8
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01a      	beq.n	8006e5a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e2e:	d10a      	bne.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	3324      	adds	r3, #36	; 0x24
 8006e34:	2102      	movs	r1, #2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fcfc 	bl	8007834 <RCCEx_PLL3_Config>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d001      	beq.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006e46:	4b8b      	ldr	r3, [pc, #556]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e54:	4987      	ldr	r1, [pc, #540]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d01a      	beq.n	8006e9c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e70:	d10a      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3324      	adds	r3, #36	; 0x24
 8006e76:	2102      	movs	r1, #2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fcdb 	bl	8007834 <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d001      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e88:	4b7a      	ldr	r3, [pc, #488]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e96:	4977      	ldr	r1, [pc, #476]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d034      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006eae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eb2:	d01d      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8006eb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006eb8:	d817      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d003      	beq.n	8006ec6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec2:	d009      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8006ec4:	e011      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	2100      	movs	r1, #0
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f000 fbff 	bl	80076d0 <RCCEx_PLL2_Config>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ed6:	e00c      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3324      	adds	r3, #36	; 0x24
 8006edc:	2102      	movs	r1, #2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fca8 	bl	8007834 <RCCEx_PLL3_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006ee8:	e003      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	75fb      	strb	r3, [r7, #23]
      break;
 8006eee:	e000      	b.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006ef0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006ef8:	4b5e      	ldr	r3, [pc, #376]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f06:	495b      	ldr	r1, [pc, #364]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	658b      	str	r3, [r1, #88]	; 0x58
 8006f0c:	e001      	b.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d033      	beq.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f28:	d01c      	beq.n	8006f64 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8006f2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006f2e:	d816      	bhi.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f34:	d003      	beq.n	8006f3e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8006f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f3a:	d007      	beq.n	8006f4c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006f3c:	e00f      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f3e:	4b4d      	ldr	r3, [pc, #308]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	4a4c      	ldr	r2, [pc, #304]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f4a:	e00c      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3324      	adds	r3, #36	; 0x24
 8006f50:	2101      	movs	r1, #1
 8006f52:	4618      	mov	r0, r3
 8006f54:	f000 fc6e 	bl	8007834 <RCCEx_PLL3_Config>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006f5c:	e003      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
      break;
 8006f62:	e000      	b.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006f64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f6c:	4b41      	ldr	r3, [pc, #260]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f7a:	493e      	ldr	r1, [pc, #248]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	654b      	str	r3, [r1, #84]	; 0x54
 8006f80:	e001      	b.n	8006f86 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f82:	7dfb      	ldrb	r3, [r7, #23]
 8006f84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d029      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f9e:	d007      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8006fa0:	e00f      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fa2:	4b34      	ldr	r3, [pc, #208]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa6:	4a33      	ldr	r2, [pc, #204]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fae:	e00b      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fb8a 	bl	80076d0 <RCCEx_PLL2_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006fc0:	e002      	b.n	8006fc8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8006fc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006fce:	4b29      	ldr	r3, [pc, #164]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fda:	4926      	ldr	r1, [pc, #152]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006fe0:	e001      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fe2:	7dfb      	ldrb	r3, [r7, #23]
 8006fe4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00a      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	3324      	adds	r3, #36	; 0x24
 8006ff6:	2102      	movs	r1, #2
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 fc1b 	bl	8007834 <RCCEx_PLL3_Config>
 8006ffe:	4603      	mov	r3, r0
 8007000:	2b00      	cmp	r3, #0
 8007002:	d001      	beq.n	8007008 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d033      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800701c:	d017      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800701e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007022:	d811      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007028:	d013      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800702a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800702e:	d80b      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d010      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007038:	d106      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800703a:	4b0e      	ldr	r3, [pc, #56]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800703c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800703e:	4a0d      	ldr	r2, [pc, #52]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007044:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007046:	e007      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	75fb      	strb	r3, [r7, #23]
      break;
 800704c:	e004      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800704e:	bf00      	nop
 8007050:	e002      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007058:	7dfb      	ldrb	r3, [r7, #23]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10c      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800705e:	4b05      	ldr	r3, [pc, #20]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800706a:	4902      	ldr	r1, [pc, #8]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800706c:	4313      	orrs	r3, r2
 800706e:	654b      	str	r3, [r1, #84]	; 0x54
 8007070:	e004      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007088:	4b31      	ldr	r3, [pc, #196]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800708a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800708c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007094:	492e      	ldr	r1, [pc, #184]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007096:	4313      	orrs	r3, r2
 8007098:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d009      	beq.n	80070ba <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80070a6:	4b2a      	ldr	r3, [pc, #168]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070a8:	691b      	ldr	r3, [r3, #16]
 80070aa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80070b4:	4926      	ldr	r1, [pc, #152]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d008      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80070c6:	4b22      	ldr	r3, [pc, #136]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80070d2:	491f      	ldr	r1, [pc, #124]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00d      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070e6:	691b      	ldr	r3, [r3, #16]
 80070e8:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070ee:	6113      	str	r3, [r2, #16]
 80070f0:	4b17      	ldr	r3, [pc, #92]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070f2:	691a      	ldr	r2, [r3, #16]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80070fa:	4915      	ldr	r1, [pc, #84]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	da08      	bge.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007108:	4b11      	ldr	r3, [pc, #68]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800710a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800710c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007114:	490e      	ldr	r1, [pc, #56]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007116:	4313      	orrs	r3, r2
 8007118:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007122:	2b00      	cmp	r3, #0
 8007124:	d009      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007126:	4b0a      	ldr	r3, [pc, #40]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007134:	4906      	ldr	r1, [pc, #24]	; (8007150 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007136:	4313      	orrs	r3, r2
 8007138:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800713a:	7dbb      	ldrb	r3, [r7, #22]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d101      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007140:	2300      	movs	r3, #0
 8007142:	e000      	b.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007144:	2301      	movs	r3, #1
}
 8007146:	4618      	mov	r0, r3
 8007148:	3718      	adds	r7, #24
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	58024400 	.word	0x58024400

08007154 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007158:	f7ff f85a 	bl	8006210 <HAL_RCC_GetHCLKFreq>
 800715c:	4602      	mov	r2, r0
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	091b      	lsrs	r3, r3, #4
 8007164:	f003 0307 	and.w	r3, r3, #7
 8007168:	4904      	ldr	r1, [pc, #16]	; (800717c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800716a:	5ccb      	ldrb	r3, [r1, r3]
 800716c:	f003 031f 	and.w	r3, r3, #31
 8007170:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007174:	4618      	mov	r0, r3
 8007176:	bd80      	pop	{r7, pc}
 8007178:	58024400 	.word	0x58024400
 800717c:	0800a264 	.word	0x0800a264

08007180 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007180:	b480      	push	{r7}
 8007182:	b089      	sub	sp, #36	; 0x24
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007188:	4ba1      	ldr	r3, [pc, #644]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800718a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800718c:	f003 0303 	and.w	r3, r3, #3
 8007190:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007192:	4b9f      	ldr	r3, [pc, #636]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	0b1b      	lsrs	r3, r3, #12
 8007198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800719c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800719e:	4b9c      	ldr	r3, [pc, #624]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a2:	091b      	lsrs	r3, r3, #4
 80071a4:	f003 0301 	and.w	r3, r3, #1
 80071a8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80071aa:	4b99      	ldr	r3, [pc, #612]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ae:	08db      	lsrs	r3, r3, #3
 80071b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071b4:	693a      	ldr	r2, [r7, #16]
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	ee07 3a90 	vmov	s15, r3
 80071be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 8111 	beq.w	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	f000 8083 	beq.w	80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	f200 80a1 	bhi.w	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80071de:	69bb      	ldr	r3, [r7, #24]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d003      	beq.n	80071ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80071e4:	69bb      	ldr	r3, [r7, #24]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d056      	beq.n	8007298 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80071ea:	e099      	b.n	8007320 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071ec:	4b88      	ldr	r3, [pc, #544]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0320 	and.w	r3, r3, #32
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d02d      	beq.n	8007254 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80071f8:	4b85      	ldr	r3, [pc, #532]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	08db      	lsrs	r3, r3, #3
 80071fe:	f003 0303 	and.w	r3, r3, #3
 8007202:	4a84      	ldr	r2, [pc, #528]	; (8007414 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007204:	fa22 f303 	lsr.w	r3, r2, r3
 8007208:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	ee07 3a90 	vmov	s15, r3
 800721a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800721e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007222:	4b7b      	ldr	r3, [pc, #492]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800722a:	ee07 3a90 	vmov	s15, r3
 800722e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007232:	ed97 6a03 	vldr	s12, [r7, #12]
 8007236:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800723a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800723e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007242:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007246:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800724a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007252:	e087      	b.n	8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	ee07 3a90 	vmov	s15, r3
 800725a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800725e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800741c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007266:	4b6a      	ldr	r3, [pc, #424]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007276:	ed97 6a03 	vldr	s12, [r7, #12]
 800727a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800727e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800728a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800728e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007292:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007296:	e065      	b.n	8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	ee07 3a90 	vmov	s15, r3
 800729e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072a2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80072a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072aa:	4b59      	ldr	r3, [pc, #356]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80072be:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80072c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072da:	e043      	b.n	8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007424 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80072ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072ee:	4b48      	ldr	r3, [pc, #288]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007302:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800730a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800730e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800731a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800731e:	e021      	b.n	8007364 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	ee07 3a90 	vmov	s15, r3
 8007326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800732a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007420 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800732e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007332:	4b37      	ldr	r3, [pc, #220]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	ed97 6a03 	vldr	s12, [r7, #12]
 8007346:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007418 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800734a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800734e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800735a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800735e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007362:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007364:	4b2a      	ldr	r3, [pc, #168]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	0a5b      	lsrs	r3, r3, #9
 800736a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800737a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800737e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738a:	ee17 2a90 	vmov	r2, s15
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007392:	4b1f      	ldr	r3, [pc, #124]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007396:	0c1b      	lsrs	r3, r3, #16
 8007398:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80073b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073b8:	ee17 2a90 	vmov	r2, s15
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80073c0:	4b13      	ldr	r3, [pc, #76]	; (8007410 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	0e1b      	lsrs	r3, r3, #24
 80073c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073ca:	ee07 3a90 	vmov	s15, r3
 80073ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80073da:	edd7 6a07 	vldr	s13, [r7, #28]
 80073de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073e6:	ee17 2a90 	vmov	r2, s15
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073ee:	e008      	b.n	8007402 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2200      	movs	r2, #0
 80073fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	609a      	str	r2, [r3, #8]
}
 8007402:	bf00      	nop
 8007404:	3724      	adds	r7, #36	; 0x24
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	58024400 	.word	0x58024400
 8007414:	03d09000 	.word	0x03d09000
 8007418:	46000000 	.word	0x46000000
 800741c:	4c742400 	.word	0x4c742400
 8007420:	4a742400 	.word	0x4a742400
 8007424:	4af42400 	.word	0x4af42400

08007428 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007428:	b480      	push	{r7}
 800742a:	b089      	sub	sp, #36	; 0x24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007430:	4ba1      	ldr	r3, [pc, #644]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007434:	f003 0303 	and.w	r3, r3, #3
 8007438:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800743a:	4b9f      	ldr	r3, [pc, #636]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800743c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800743e:	0d1b      	lsrs	r3, r3, #20
 8007440:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007444:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007446:	4b9c      	ldr	r3, [pc, #624]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007452:	4b99      	ldr	r3, [pc, #612]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007456:	08db      	lsrs	r3, r3, #3
 8007458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 8111 	beq.w	8007698 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	2b02      	cmp	r3, #2
 800747a:	f000 8083 	beq.w	8007584 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800747e:	69bb      	ldr	r3, [r7, #24]
 8007480:	2b02      	cmp	r3, #2
 8007482:	f200 80a1 	bhi.w	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800748c:	69bb      	ldr	r3, [r7, #24]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d056      	beq.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007492:	e099      	b.n	80075c8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007494:	4b88      	ldr	r3, [pc, #544]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d02d      	beq.n	80074fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80074a0:	4b85      	ldr	r3, [pc, #532]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	08db      	lsrs	r3, r3, #3
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	4a84      	ldr	r2, [pc, #528]	; (80076bc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
 80074b0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b7b      	ldr	r3, [pc, #492]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80074cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074fa:	e087      	b.n	800760c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80076c4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b6a      	ldr	r3, [pc, #424]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a67 	vldr	s11, [pc, #412]	; 80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753e:	e065      	b.n	800760c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b59      	ldr	r3, [pc, #356]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a56 	vldr	s11, [pc, #344]	; 80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007582:	e043      	b.n	800760c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b48      	ldr	r3, [pc, #288]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075c6:	e021      	b.n	800760c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80075d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075da:	4b37      	ldr	r3, [pc, #220]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80075ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80076c0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80075f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800760a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800760c:	4b2a      	ldr	r3, [pc, #168]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800760e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007610:	0a5b      	lsrs	r3, r3, #9
 8007612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007622:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007626:	edd7 6a07 	vldr	s13, [r7, #28]
 800762a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007632:	ee17 2a90 	vmov	r2, s15
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800763a:	4b1f      	ldr	r3, [pc, #124]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800763c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800763e:	0c1b      	lsrs	r3, r3, #16
 8007640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007644:	ee07 3a90 	vmov	s15, r3
 8007648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800764c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007650:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007654:	edd7 6a07 	vldr	s13, [r7, #28]
 8007658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800765c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007660:	ee17 2a90 	vmov	r2, s15
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007668:	4b13      	ldr	r3, [pc, #76]	; (80076b8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800766a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766c:	0e1b      	lsrs	r3, r3, #24
 800766e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007672:	ee07 3a90 	vmov	s15, r3
 8007676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800767e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007682:	edd7 6a07 	vldr	s13, [r7, #28]
 8007686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800768a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800768e:	ee17 2a90 	vmov	r2, s15
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007696:	e008      	b.n	80076aa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	609a      	str	r2, [r3, #8]
}
 80076aa:	bf00      	nop
 80076ac:	3724      	adds	r7, #36	; 0x24
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	58024400 	.word	0x58024400
 80076bc:	03d09000 	.word	0x03d09000
 80076c0:	46000000 	.word	0x46000000
 80076c4:	4c742400 	.word	0x4c742400
 80076c8:	4a742400 	.word	0x4a742400
 80076cc:	4af42400 	.word	0x4af42400

080076d0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80076de:	4b53      	ldr	r3, [pc, #332]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80076e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e2:	f003 0303 	and.w	r3, r3, #3
 80076e6:	2b03      	cmp	r3, #3
 80076e8:	d101      	bne.n	80076ee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e099      	b.n	8007822 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80076ee:	4b4f      	ldr	r3, [pc, #316]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a4e      	ldr	r2, [pc, #312]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80076f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80076f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076fa:	f7fa fabd 	bl	8001c78 <HAL_GetTick>
 80076fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007700:	e008      	b.n	8007714 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007702:	f7fa fab9 	bl	8001c78 <HAL_GetTick>
 8007706:	4602      	mov	r2, r0
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	2b02      	cmp	r3, #2
 800770e:	d901      	bls.n	8007714 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e086      	b.n	8007822 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007714:	4b45      	ldr	r3, [pc, #276]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d1f0      	bne.n	8007702 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007720:	4b42      	ldr	r3, [pc, #264]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 8007722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007724:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	031b      	lsls	r3, r3, #12
 800772e:	493f      	ldr	r1, [pc, #252]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 8007730:	4313      	orrs	r3, r2
 8007732:	628b      	str	r3, [r1, #40]	; 0x28
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	3b01      	subs	r3, #1
 800773a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	3b01      	subs	r3, #1
 8007744:	025b      	lsls	r3, r3, #9
 8007746:	b29b      	uxth	r3, r3
 8007748:	431a      	orrs	r2, r3
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	68db      	ldr	r3, [r3, #12]
 800774e:	3b01      	subs	r3, #1
 8007750:	041b      	lsls	r3, r3, #16
 8007752:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007756:	431a      	orrs	r2, r3
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	3b01      	subs	r3, #1
 800775e:	061b      	lsls	r3, r3, #24
 8007760:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007764:	4931      	ldr	r1, [pc, #196]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 8007766:	4313      	orrs	r3, r2
 8007768:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800776a:	4b30      	ldr	r3, [pc, #192]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 800776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	492d      	ldr	r1, [pc, #180]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 8007778:	4313      	orrs	r3, r2
 800777a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800777c:	4b2b      	ldr	r3, [pc, #172]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	f023 0220 	bic.w	r2, r3, #32
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	4928      	ldr	r1, [pc, #160]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 800778a:	4313      	orrs	r3, r2
 800778c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800778e:	4b27      	ldr	r3, [pc, #156]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 8007790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007792:	4a26      	ldr	r2, [pc, #152]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 8007794:	f023 0310 	bic.w	r3, r3, #16
 8007798:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800779a:	4b24      	ldr	r3, [pc, #144]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 800779c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800779e:	4b24      	ldr	r3, [pc, #144]	; (8007830 <RCCEx_PLL2_Config+0x160>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	687a      	ldr	r2, [r7, #4]
 80077a4:	69d2      	ldr	r2, [r2, #28]
 80077a6:	00d2      	lsls	r2, r2, #3
 80077a8:	4920      	ldr	r1, [pc, #128]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80077ae:	4b1f      	ldr	r3, [pc, #124]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077b2:	4a1e      	ldr	r2, [pc, #120]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077b4:	f043 0310 	orr.w	r3, r3, #16
 80077b8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80077c0:	4b1a      	ldr	r3, [pc, #104]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c4:	4a19      	ldr	r2, [pc, #100]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077ca:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077cc:	e00f      	b.n	80077ee <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d106      	bne.n	80077e2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80077d4:	4b15      	ldr	r3, [pc, #84]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d8:	4a14      	ldr	r2, [pc, #80]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80077e0:	e005      	b.n	80077ee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80077e2:	4b12      	ldr	r3, [pc, #72]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	4a11      	ldr	r2, [pc, #68]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80077ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80077ee:	4b0f      	ldr	r3, [pc, #60]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a0e      	ldr	r2, [pc, #56]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 80077f4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80077f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077fa:	f7fa fa3d 	bl	8001c78 <HAL_GetTick>
 80077fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007800:	e008      	b.n	8007814 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007802:	f7fa fa39 	bl	8001c78 <HAL_GetTick>
 8007806:	4602      	mov	r2, r0
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	1ad3      	subs	r3, r2, r3
 800780c:	2b02      	cmp	r3, #2
 800780e:	d901      	bls.n	8007814 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007810:	2303      	movs	r3, #3
 8007812:	e006      	b.n	8007822 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007814:	4b05      	ldr	r3, [pc, #20]	; (800782c <RCCEx_PLL2_Config+0x15c>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d0f0      	beq.n	8007802 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007820:	7bfb      	ldrb	r3, [r7, #15]
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
 800782a:	bf00      	nop
 800782c:	58024400 	.word	0x58024400
 8007830:	ffff0007 	.word	0xffff0007

08007834 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
 800783c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007842:	4b53      	ldr	r3, [pc, #332]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	f003 0303 	and.w	r3, r3, #3
 800784a:	2b03      	cmp	r3, #3
 800784c:	d101      	bne.n	8007852 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	e099      	b.n	8007986 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007852:	4b4f      	ldr	r3, [pc, #316]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a4e      	ldr	r2, [pc, #312]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800785c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800785e:	f7fa fa0b 	bl	8001c78 <HAL_GetTick>
 8007862:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007864:	e008      	b.n	8007878 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007866:	f7fa fa07 	bl	8001c78 <HAL_GetTick>
 800786a:	4602      	mov	r2, r0
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	1ad3      	subs	r3, r2, r3
 8007870:	2b02      	cmp	r3, #2
 8007872:	d901      	bls.n	8007878 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007874:	2303      	movs	r3, #3
 8007876:	e086      	b.n	8007986 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007878:	4b45      	ldr	r3, [pc, #276]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d1f0      	bne.n	8007866 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007884:	4b42      	ldr	r3, [pc, #264]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007888:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	051b      	lsls	r3, r3, #20
 8007892:	493f      	ldr	r1, [pc, #252]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007894:	4313      	orrs	r3, r2
 8007896:	628b      	str	r3, [r1, #40]	; 0x28
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	3b01      	subs	r3, #1
 800789e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	025b      	lsls	r3, r3, #9
 80078aa:	b29b      	uxth	r3, r3
 80078ac:	431a      	orrs	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	041b      	lsls	r3, r3, #16
 80078b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078ba:	431a      	orrs	r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	3b01      	subs	r3, #1
 80078c2:	061b      	lsls	r3, r3, #24
 80078c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80078c8:	4931      	ldr	r1, [pc, #196]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 80078ca:	4313      	orrs	r3, r2
 80078cc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80078ce:	4b30      	ldr	r3, [pc, #192]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	492d      	ldr	r1, [pc, #180]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 80078dc:	4313      	orrs	r3, r2
 80078de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80078e0:	4b2b      	ldr	r3, [pc, #172]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 80078e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	4928      	ldr	r1, [pc, #160]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80078f2:	4b27      	ldr	r3, [pc, #156]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 80078f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f6:	4a26      	ldr	r2, [pc, #152]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 80078f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80078fe:	4b24      	ldr	r3, [pc, #144]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007900:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007902:	4b24      	ldr	r3, [pc, #144]	; (8007994 <RCCEx_PLL3_Config+0x160>)
 8007904:	4013      	ands	r3, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	69d2      	ldr	r2, [r2, #28]
 800790a:	00d2      	lsls	r2, r2, #3
 800790c:	4920      	ldr	r1, [pc, #128]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 800790e:	4313      	orrs	r3, r2
 8007910:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007912:	4b1f      	ldr	r3, [pc, #124]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007916:	4a1e      	ldr	r2, [pc, #120]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007918:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800791c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d106      	bne.n	8007932 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007924:	4b1a      	ldr	r3, [pc, #104]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	4a19      	ldr	r2, [pc, #100]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 800792a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800792e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007930:	e00f      	b.n	8007952 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d106      	bne.n	8007946 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007938:	4b15      	ldr	r3, [pc, #84]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 800793a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793c:	4a14      	ldr	r2, [pc, #80]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 800793e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007942:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007944:	e005      	b.n	8007952 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007946:	4b12      	ldr	r3, [pc, #72]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800794a:	4a11      	ldr	r2, [pc, #68]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 800794c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007950:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007952:	4b0f      	ldr	r3, [pc, #60]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a0e      	ldr	r2, [pc, #56]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 8007958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800795c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795e:	f7fa f98b 	bl	8001c78 <HAL_GetTick>
 8007962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007964:	e008      	b.n	8007978 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007966:	f7fa f987 	bl	8001c78 <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e006      	b.n	8007986 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007978:	4b05      	ldr	r3, [pc, #20]	; (8007990 <RCCEx_PLL3_Config+0x15c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d0f0      	beq.n	8007966 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	58024400 	.word	0x58024400
 8007994:	ffff0007 	.word	0xffff0007

08007998 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d101      	bne.n	80079aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e0f1      	b.n	8007b8e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a78      	ldr	r2, [pc, #480]	; (8007b98 <HAL_SPI_Init+0x200>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00f      	beq.n	80079da <HAL_SPI_Init+0x42>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a77      	ldr	r2, [pc, #476]	; (8007b9c <HAL_SPI_Init+0x204>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d00a      	beq.n	80079da <HAL_SPI_Init+0x42>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a75      	ldr	r2, [pc, #468]	; (8007ba0 <HAL_SPI_Init+0x208>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d005      	beq.n	80079da <HAL_SPI_Init+0x42>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	2b0f      	cmp	r3, #15
 80079d4:	d901      	bls.n	80079da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	e0d9      	b.n	8007b8e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 fba2 	bl	8008124 <SPI_GetPacketSize>
 80079e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a6c      	ldr	r2, [pc, #432]	; (8007b98 <HAL_SPI_Init+0x200>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d00c      	beq.n	8007a06 <HAL_SPI_Init+0x6e>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a6a      	ldr	r2, [pc, #424]	; (8007b9c <HAL_SPI_Init+0x204>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d007      	beq.n	8007a06 <HAL_SPI_Init+0x6e>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a69      	ldr	r2, [pc, #420]	; (8007ba0 <HAL_SPI_Init+0x208>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d002      	beq.n	8007a06 <HAL_SPI_Init+0x6e>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d811      	bhi.n	8007a2a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007a0a:	4a63      	ldr	r2, [pc, #396]	; (8007b98 <HAL_SPI_Init+0x200>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d009      	beq.n	8007a24 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a61      	ldr	r2, [pc, #388]	; (8007b9c <HAL_SPI_Init+0x204>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d004      	beq.n	8007a24 <HAL_SPI_Init+0x8c>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a60      	ldr	r2, [pc, #384]	; (8007ba0 <HAL_SPI_Init+0x208>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d104      	bne.n	8007a2e <HAL_SPI_Init+0x96>
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2b10      	cmp	r3, #16
 8007a28:	d901      	bls.n	8007a2e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e0af      	b.n	8007b8e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d106      	bne.n	8007a48 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f7f9 fe88 	bl	8001758 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007a6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	699b      	ldr	r3, [r3, #24]
 8007a70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a74:	d119      	bne.n	8007aaa <HAL_SPI_Init+0x112>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a7e:	d103      	bne.n	8007a88 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d008      	beq.n	8007a9a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10c      	bne.n	8007aaa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007a94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a98:	d107      	bne.n	8007aaa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007aa8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	69da      	ldr	r2, [r3, #28]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	431a      	orrs	r2, r3
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	431a      	orrs	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abc:	ea42 0103 	orr.w	r1, r2, r3
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	68da      	ldr	r2, [r3, #12]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	431a      	orrs	r2, r3
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	695b      	ldr	r3, [r3, #20]
 8007aec:	431a      	orrs	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	431a      	orrs	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	431a      	orrs	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b0a:	ea42 0103 	orr.w	r1, r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d113      	bne.n	8007b4a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b34:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b48:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f022 0201 	bic.w	r2, r2, #1
 8007b58:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	430a      	orrs	r2, r1
 8007b7a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007b8c:	2300      	movs	r3, #0
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}
 8007b96:	bf00      	nop
 8007b98:	40013000 	.word	0x40013000
 8007b9c:	40003800 	.word	0x40003800
 8007ba0:	40003c00 	.word	0x40003c00

08007ba4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b08a      	sub	sp, #40	; 0x28
 8007ba8:	af02      	add	r7, sp, #8
 8007baa:	60f8      	str	r0, [r7, #12]
 8007bac:	60b9      	str	r1, [r7, #8]
 8007bae:	603b      	str	r3, [r7, #0]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	3320      	adds	r3, #32
 8007bba:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <HAL_SPI_Transmit+0x2a>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e1d7      	b.n	8007f7e <HAL_SPI_Transmit+0x3da>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007bd6:	f7fa f84f 	bl	8001c78 <HAL_GetTick>
 8007bda:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d007      	beq.n	8007bf8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007be8:	2302      	movs	r3, #2
 8007bea:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007bf4:	7efb      	ldrb	r3, [r7, #27]
 8007bf6:	e1c2      	b.n	8007f7e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d002      	beq.n	8007c04 <HAL_SPI_Transmit+0x60>
 8007bfe:	88fb      	ldrh	r3, [r7, #6]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d107      	bne.n	8007c14 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007c10:	7efb      	ldrb	r3, [r7, #27]
 8007c12:	e1b4      	b.n	8007f7e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	2203      	movs	r2, #3
 8007c18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	68ba      	ldr	r2, [r7, #8]
 8007c28:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	88fa      	ldrh	r2, [r7, #6]
 8007c2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	88fa      	ldrh	r2, [r7, #6]
 8007c36:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2200      	movs	r2, #0
 8007c54:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007c64:	d107      	bne.n	8007c76 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	685a      	ldr	r2, [r3, #4]
 8007c7c:	4b96      	ldr	r3, [pc, #600]	; (8007ed8 <HAL_SPI_Transmit+0x334>)
 8007c7e:	4013      	ands	r3, r2
 8007c80:	88f9      	ldrh	r1, [r7, #6]
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	6812      	ldr	r2, [r2, #0]
 8007c86:	430b      	orrs	r3, r1
 8007c88:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0201 	orr.w	r2, r2, #1
 8007c98:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ca2:	d107      	bne.n	8007cb4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b0f      	cmp	r3, #15
 8007cba:	d947      	bls.n	8007d4c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007cbc:	e03f      	b.n	8007d3e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	695b      	ldr	r3, [r3, #20]
 8007cc4:	f003 0302 	and.w	r3, r3, #2
 8007cc8:	2b02      	cmp	r3, #2
 8007cca:	d114      	bne.n	8007cf6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cdc:	1d1a      	adds	r2, r3, #4
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007cf4:	e023      	b.n	8007d3e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007cf6:	f7f9 ffbf 	bl	8001c78 <HAL_GetTick>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	683a      	ldr	r2, [r7, #0]
 8007d02:	429a      	cmp	r2, r3
 8007d04:	d803      	bhi.n	8007d0e <HAL_SPI_Transmit+0x16a>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0c:	d102      	bne.n	8007d14 <HAL_SPI_Transmit+0x170>
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d114      	bne.n	8007d3e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 f937 	bl	8007f88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2201      	movs	r2, #1
 8007d36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e11f      	b.n	8007f7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d44:	b29b      	uxth	r3, r3
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d1b9      	bne.n	8007cbe <HAL_SPI_Transmit+0x11a>
 8007d4a:	e0f2      	b.n	8007f32 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	2b07      	cmp	r3, #7
 8007d52:	f240 80e7 	bls.w	8007f24 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007d56:	e05d      	b.n	8007e14 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	f003 0302 	and.w	r3, r3, #2
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d132      	bne.n	8007dcc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d918      	bls.n	8007da4 <HAL_SPI_Transmit+0x200>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d014      	beq.n	8007da4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6812      	ldr	r2, [r2, #0]
 8007d84:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8a:	1d1a      	adds	r2, r3, #4
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	3b02      	subs	r3, #2
 8007d9a:	b29a      	uxth	r2, r3
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007da2:	e037      	b.n	8007e14 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007da8:	881a      	ldrh	r2, [r3, #0]
 8007daa:	69fb      	ldr	r3, [r7, #28]
 8007dac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db2:	1c9a      	adds	r2, r3, #2
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	b29a      	uxth	r2, r3
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007dca:	e023      	b.n	8007e14 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007dcc:	f7f9 ff54 	bl	8001c78 <HAL_GetTick>
 8007dd0:	4602      	mov	r2, r0
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	1ad3      	subs	r3, r2, r3
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d803      	bhi.n	8007de4 <HAL_SPI_Transmit+0x240>
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d102      	bne.n	8007dea <HAL_SPI_Transmit+0x246>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d114      	bne.n	8007e14 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f8cc 	bl	8007f88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007e10:	2303      	movs	r3, #3
 8007e12:	e0b4      	b.n	8007f7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d19b      	bne.n	8007d58 <HAL_SPI_Transmit+0x1b4>
 8007e20:	e087      	b.n	8007f32 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	695b      	ldr	r3, [r3, #20]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d155      	bne.n	8007edc <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	2b03      	cmp	r3, #3
 8007e3a:	d918      	bls.n	8007e6e <HAL_SPI_Transmit+0x2ca>
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e40:	2b40      	cmp	r3, #64	; 0x40
 8007e42:	d914      	bls.n	8007e6e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e54:	1d1a      	adds	r2, r3, #4
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	3b04      	subs	r3, #4
 8007e64:	b29a      	uxth	r2, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007e6c:	e05a      	b.n	8007f24 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d917      	bls.n	8007eaa <HAL_SPI_Transmit+0x306>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d013      	beq.n	8007eaa <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e86:	881a      	ldrh	r2, [r3, #0]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e90:	1c9a      	adds	r2, r3, #2
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3b02      	subs	r3, #2
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007ea8:	e03c      	b.n	8007f24 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3320      	adds	r3, #32
 8007eb4:	7812      	ldrb	r2, [r2, #0]
 8007eb6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ebc:	1c5a      	adds	r2, r3, #1
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ec8:	b29b      	uxth	r3, r3
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007ed4:	e026      	b.n	8007f24 <HAL_SPI_Transmit+0x380>
 8007ed6:	bf00      	nop
 8007ed8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007edc:	f7f9 fecc 	bl	8001c78 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	683a      	ldr	r2, [r7, #0]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d803      	bhi.n	8007ef4 <HAL_SPI_Transmit+0x350>
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef2:	d102      	bne.n	8007efa <HAL_SPI_Transmit+0x356>
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d114      	bne.n	8007f24 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007efa:	68f8      	ldr	r0, [r7, #12]
 8007efc:	f000 f844 	bl	8007f88 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007f20:	2303      	movs	r3, #3
 8007f22:	e02c      	b.n	8007f7e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f47f af78 	bne.w	8007e22 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2108      	movs	r1, #8
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f8c3 	bl	80080c8 <SPI_WaitOnFlagUntilTimeout>
 8007f42:	4603      	mov	r3, r0
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d007      	beq.n	8007f58 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f4e:	f043 0220 	orr.w	r2, r3, #32
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f000 f815 	bl	8007f88 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8007f7c:	7efb      	ldrb	r3, [r7, #27]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3720      	adds	r7, #32
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop

08007f88 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	695b      	ldr	r3, [r3, #20]
 8007f96:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	699a      	ldr	r2, [r3, #24]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0208 	orr.w	r2, r2, #8
 8007fa6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	699a      	ldr	r2, [r3, #24]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0210 	orr.w	r2, r2, #16
 8007fb6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6919      	ldr	r1, [r3, #16]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	4b3c      	ldr	r3, [pc, #240]	; (80080c4 <SPI_CloseTransfer+0x13c>)
 8007fd4:	400b      	ands	r3, r1
 8007fd6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8007fe6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d014      	beq.n	800801e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f003 0320 	and.w	r3, r3, #32
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00f      	beq.n	800801e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008004:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	699a      	ldr	r2, [r3, #24]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0220 	orr.w	r2, r2, #32
 800801c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b03      	cmp	r3, #3
 8008028:	d014      	beq.n	8008054 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008030:	2b00      	cmp	r3, #0
 8008032:	d00f      	beq.n	8008054 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800803a:	f043 0204 	orr.w	r2, r3, #4
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008052:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00f      	beq.n	800807e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008064:	f043 0201 	orr.w	r2, r3, #1
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800807c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00f      	beq.n	80080a8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800808e:	f043 0208 	orr.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	699a      	ldr	r2, [r3, #24]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080a6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80080b8:	bf00      	nop
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	fffffc90 	.word	0xfffffc90

080080c8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b084      	sub	sp, #16
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	4613      	mov	r3, r2
 80080d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80080d8:	e010      	b.n	80080fc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080da:	f7f9 fdcd 	bl	8001c78 <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d803      	bhi.n	80080f2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d102      	bne.n	80080f8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80080f2:	69bb      	ldr	r3, [r7, #24]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d101      	bne.n	80080fc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	e00f      	b.n	800811c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	695a      	ldr	r2, [r3, #20]
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	4013      	ands	r3, r2
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	429a      	cmp	r2, r3
 800810a:	bf0c      	ite	eq
 800810c:	2301      	moveq	r3, #1
 800810e:	2300      	movne	r3, #0
 8008110:	b2db      	uxtb	r3, r3
 8008112:	461a      	mov	r2, r3
 8008114:	79fb      	ldrb	r3, [r7, #7]
 8008116:	429a      	cmp	r2, r3
 8008118:	d0df      	beq.n	80080da <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008124:	b480      	push	{r7}
 8008126:	b085      	sub	sp, #20
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008130:	095b      	lsrs	r3, r3, #5
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	3301      	adds	r3, #1
 800813c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	3307      	adds	r3, #7
 8008142:	08db      	lsrs	r3, r3, #3
 8008144:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	68fa      	ldr	r2, [r7, #12]
 800814a:	fb02 f303 	mul.w	r3, r2, r3
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr

0800815a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b082      	sub	sp, #8
 800815e:	af00      	add	r7, sp, #0
 8008160:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e042      	b.n	80081f2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008172:	2b00      	cmp	r3, #0
 8008174:	d106      	bne.n	8008184 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f7f9 fb56 	bl	8001830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2224      	movs	r2, #36	; 0x24
 8008188:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f022 0201 	bic.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 fbeb 	bl	8008978 <UART_SetConfig>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b01      	cmp	r3, #1
 80081a6:	d101      	bne.n	80081ac <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	e022      	b.n	80081f2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f001 f947 	bl	8009448 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081d8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f042 0201 	orr.w	r2, r2, #1
 80081e8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f001 f9ce 	bl	800958c <UART_CheckIdleState>
 80081f0:	4603      	mov	r3, r0
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
	...

080081fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b0ba      	sub	sp, #232	; 0xe8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	69db      	ldr	r3, [r3, #28]
 800820a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008222:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008226:	f640 030f 	movw	r3, #2063	; 0x80f
 800822a:	4013      	ands	r3, r2
 800822c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008230:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008234:	2b00      	cmp	r3, #0
 8008236:	d11b      	bne.n	8008270 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823c:	f003 0320 	and.w	r3, r3, #32
 8008240:	2b00      	cmp	r3, #0
 8008242:	d015      	beq.n	8008270 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008248:	f003 0320 	and.w	r3, r3, #32
 800824c:	2b00      	cmp	r3, #0
 800824e:	d105      	bne.n	800825c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d009      	beq.n	8008270 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 835a 	beq.w	800891a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	4798      	blx	r3
      }
      return;
 800826e:	e354      	b.n	800891a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 811f 	beq.w	80084b8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800827a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800827e:	4b8b      	ldr	r3, [pc, #556]	; (80084ac <HAL_UART_IRQHandler+0x2b0>)
 8008280:	4013      	ands	r3, r2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d106      	bne.n	8008294 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008286:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800828a:	4b89      	ldr	r3, [pc, #548]	; (80084b0 <HAL_UART_IRQHandler+0x2b4>)
 800828c:	4013      	ands	r3, r2
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 8112 	beq.w	80084b8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d011      	beq.n	80082c4 <HAL_UART_IRQHandler+0xc8>
 80082a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d00b      	beq.n	80082c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2201      	movs	r2, #1
 80082b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ba:	f043 0201 	orr.w	r2, r3, #1
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082c8:	f003 0302 	and.w	r3, r3, #2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d011      	beq.n	80082f4 <HAL_UART_IRQHandler+0xf8>
 80082d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d4:	f003 0301 	and.w	r3, r3, #1
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00b      	beq.n	80082f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2202      	movs	r2, #2
 80082e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082ea:	f043 0204 	orr.w	r2, r3, #4
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d011      	beq.n	8008324 <HAL_UART_IRQHandler+0x128>
 8008300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008304:	f003 0301 	and.w	r3, r3, #1
 8008308:	2b00      	cmp	r3, #0
 800830a:	d00b      	beq.n	8008324 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	2204      	movs	r2, #4
 8008312:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800831a:	f043 0202 	orr.w	r2, r3, #2
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008328:	f003 0308 	and.w	r3, r3, #8
 800832c:	2b00      	cmp	r3, #0
 800832e:	d017      	beq.n	8008360 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008334:	f003 0320 	and.w	r3, r3, #32
 8008338:	2b00      	cmp	r3, #0
 800833a:	d105      	bne.n	8008348 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800833c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008340:	4b5a      	ldr	r3, [pc, #360]	; (80084ac <HAL_UART_IRQHandler+0x2b0>)
 8008342:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008344:	2b00      	cmp	r3, #0
 8008346:	d00b      	beq.n	8008360 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2208      	movs	r2, #8
 800834e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008356:	f043 0208 	orr.w	r2, r3, #8
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008368:	2b00      	cmp	r3, #0
 800836a:	d012      	beq.n	8008392 <HAL_UART_IRQHandler+0x196>
 800836c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008370:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00c      	beq.n	8008392 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008380:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008388:	f043 0220 	orr.w	r2, r3, #32
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 82c0 	beq.w	800891e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800839e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083a2:	f003 0320 	and.w	r3, r3, #32
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d013      	beq.n	80083d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ae:	f003 0320 	and.w	r3, r3, #32
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d105      	bne.n	80083c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80083ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d007      	beq.n	80083d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d003      	beq.n	80083d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	689b      	ldr	r3, [r3, #8]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d005      	beq.n	80083f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80083ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d04f      	beq.n	8008496 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 f9dc 	bl	80097b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008406:	2b40      	cmp	r3, #64	; 0x40
 8008408:	d141      	bne.n	800848e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3308      	adds	r3, #8
 8008410:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008418:	e853 3f00 	ldrex	r3, [r3]
 800841c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008428:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	3308      	adds	r3, #8
 8008432:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008436:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800843a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800843e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008442:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800844e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1d9      	bne.n	800840a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800845a:	2b00      	cmp	r3, #0
 800845c:	d013      	beq.n	8008486 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008462:	4a14      	ldr	r2, [pc, #80]	; (80084b4 <HAL_UART_IRQHandler+0x2b8>)
 8008464:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800846a:	4618      	mov	r0, r3
 800846c:	f7fa fbde 	bl	8002c2c <HAL_DMA_Abort_IT>
 8008470:	4603      	mov	r3, r0
 8008472:	2b00      	cmp	r3, #0
 8008474:	d017      	beq.n	80084a6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800847a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008480:	4610      	mov	r0, r2
 8008482:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	e00f      	b.n	80084a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fa60 	bl	800894c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800848c:	e00b      	b.n	80084a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fa5c 	bl	800894c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008494:	e007      	b.n	80084a6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 fa58 	bl	800894c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80084a4:	e23b      	b.n	800891e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084a6:	bf00      	nop
    return;
 80084a8:	e239      	b.n	800891e <HAL_UART_IRQHandler+0x722>
 80084aa:	bf00      	nop
 80084ac:	10000001 	.word	0x10000001
 80084b0:	04000120 	.word	0x04000120
 80084b4:	08009881 	.word	0x08009881

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084bc:	2b01      	cmp	r3, #1
 80084be:	f040 81ce 	bne.w	800885e <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80084c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c6:	f003 0310 	and.w	r3, r3, #16
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 81c7 	beq.w	800885e <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80084d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d4:	f003 0310 	and.w	r3, r3, #16
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 81c0 	beq.w	800885e <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	2210      	movs	r2, #16
 80084e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084f0:	2b40      	cmp	r3, #64	; 0x40
 80084f2:	f040 813b 	bne.w	800876c <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a8b      	ldr	r2, [pc, #556]	; (800872c <HAL_UART_IRQHandler+0x530>)
 80084fe:	4293      	cmp	r3, r2
 8008500:	d059      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a89      	ldr	r2, [pc, #548]	; (8008730 <HAL_UART_IRQHandler+0x534>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d053      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a87      	ldr	r2, [pc, #540]	; (8008734 <HAL_UART_IRQHandler+0x538>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d04d      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a85      	ldr	r2, [pc, #532]	; (8008738 <HAL_UART_IRQHandler+0x53c>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d047      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a83      	ldr	r2, [pc, #524]	; (800873c <HAL_UART_IRQHandler+0x540>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d041      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	4a81      	ldr	r2, [pc, #516]	; (8008740 <HAL_UART_IRQHandler+0x544>)
 800853a:	4293      	cmp	r3, r2
 800853c:	d03b      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a7f      	ldr	r2, [pc, #508]	; (8008744 <HAL_UART_IRQHandler+0x548>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d035      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a7d      	ldr	r2, [pc, #500]	; (8008748 <HAL_UART_IRQHandler+0x54c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d02f      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a7b      	ldr	r2, [pc, #492]	; (800874c <HAL_UART_IRQHandler+0x550>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d029      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	4a79      	ldr	r2, [pc, #484]	; (8008750 <HAL_UART_IRQHandler+0x554>)
 800856a:	4293      	cmp	r3, r2
 800856c:	d023      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	4a77      	ldr	r2, [pc, #476]	; (8008754 <HAL_UART_IRQHandler+0x558>)
 8008576:	4293      	cmp	r3, r2
 8008578:	d01d      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4a75      	ldr	r2, [pc, #468]	; (8008758 <HAL_UART_IRQHandler+0x55c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d017      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a73      	ldr	r2, [pc, #460]	; (800875c <HAL_UART_IRQHandler+0x560>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d011      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a71      	ldr	r2, [pc, #452]	; (8008760 <HAL_UART_IRQHandler+0x564>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d00b      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a6f      	ldr	r2, [pc, #444]	; (8008764 <HAL_UART_IRQHandler+0x568>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d005      	beq.n	80085b6 <HAL_UART_IRQHandler+0x3ba>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4a6d      	ldr	r2, [pc, #436]	; (8008768 <HAL_UART_IRQHandler+0x56c>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	d105      	bne.n	80085c2 <HAL_UART_IRQHandler+0x3c6>
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	b29b      	uxth	r3, r3
 80085c0:	e004      	b.n	80085cc <HAL_UART_IRQHandler+0x3d0>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80085d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	f000 81a4 	beq.w	8008922 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085e4:	429a      	cmp	r2, r3
 80085e6:	f080 819c 	bcs.w	8008922 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80085f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085f8:	69db      	ldr	r3, [r3, #28]
 80085fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085fe:	f000 8086 	beq.w	800870e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800860a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800860e:	e853 3f00 	ldrex	r3, [r3]
 8008612:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008616:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800861a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800861e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800862c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008630:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008634:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008638:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800863c:	e841 2300 	strex	r3, r2, [r1]
 8008640:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008644:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1da      	bne.n	8008602 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	3308      	adds	r3, #8
 8008652:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008656:	e853 3f00 	ldrex	r3, [r3]
 800865a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800865c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800865e:	f023 0301 	bic.w	r3, r3, #1
 8008662:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3308      	adds	r3, #8
 800866c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008670:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008674:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008676:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008678:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800867c:	e841 2300 	strex	r3, r2, [r1]
 8008680:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1e1      	bne.n	800864c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	3308      	adds	r3, #8
 800868e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008692:	e853 3f00 	ldrex	r3, [r3]
 8008696:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800869a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800869e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	3308      	adds	r3, #8
 80086a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80086ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80086ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80086b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086b4:	e841 2300 	strex	r3, r2, [r1]
 80086b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80086ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d1e3      	bne.n	8008688 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d6:	e853 3f00 	ldrex	r3, [r3]
 80086da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80086dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086de:	f023 0310 	bic.w	r3, r3, #16
 80086e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80086f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80086f2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80086f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80086f8:	e841 2300 	strex	r3, r2, [r1]
 80086fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80086fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1e4      	bne.n	80086ce <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008708:	4618      	mov	r0, r3
 800870a:	f7f9 ff71 	bl	80025f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800871a:	b29b      	uxth	r3, r3
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	b29b      	uxth	r3, r3
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f000 f91c 	bl	8008960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008728:	e0fb      	b.n	8008922 <HAL_UART_IRQHandler+0x726>
 800872a:	bf00      	nop
 800872c:	40020010 	.word	0x40020010
 8008730:	40020028 	.word	0x40020028
 8008734:	40020040 	.word	0x40020040
 8008738:	40020058 	.word	0x40020058
 800873c:	40020070 	.word	0x40020070
 8008740:	40020088 	.word	0x40020088
 8008744:	400200a0 	.word	0x400200a0
 8008748:	400200b8 	.word	0x400200b8
 800874c:	40020410 	.word	0x40020410
 8008750:	40020428 	.word	0x40020428
 8008754:	40020440 	.word	0x40020440
 8008758:	40020458 	.word	0x40020458
 800875c:	40020470 	.word	0x40020470
 8008760:	40020488 	.word	0x40020488
 8008764:	400204a0 	.word	0x400204a0
 8008768:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008778:	b29b      	uxth	r3, r3
 800877a:	1ad3      	subs	r3, r2, r3
 800877c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008786:	b29b      	uxth	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	f000 80cc 	beq.w	8008926 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800878e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008792:	2b00      	cmp	r3, #0
 8008794:	f000 80c7 	beq.w	8008926 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80087a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	461a      	mov	r2, r3
 80087b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80087ba:	647b      	str	r3, [r7, #68]	; 0x44
 80087bc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80087c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087c2:	e841 2300 	strex	r3, r2, [r1]
 80087c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80087c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d1e4      	bne.n	8008798 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3308      	adds	r3, #8
 80087d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	623b      	str	r3, [r7, #32]
   return(result);
 80087de:	6a3a      	ldr	r2, [r7, #32]
 80087e0:	4b54      	ldr	r3, [pc, #336]	; (8008934 <HAL_UART_IRQHandler+0x738>)
 80087e2:	4013      	ands	r3, r2
 80087e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	3308      	adds	r3, #8
 80087ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80087f2:	633a      	str	r2, [r7, #48]	; 0x30
 80087f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80087f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fa:	e841 2300 	strex	r3, r2, [r1]
 80087fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1e3      	bne.n	80087ce <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2220      	movs	r2, #32
 800880a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2200      	movs	r2, #0
 8008812:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2200      	movs	r2, #0
 8008818:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	60fb      	str	r3, [r7, #12]
   return(result);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 0310 	bic.w	r3, r3, #16
 800882e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800883c:	61fb      	str	r3, [r7, #28]
 800883e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	69b9      	ldr	r1, [r7, #24]
 8008842:	69fa      	ldr	r2, [r7, #28]
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	617b      	str	r3, [r7, #20]
   return(result);
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e4      	bne.n	800881a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008850:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008854:	4619      	mov	r1, r3
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f882 	bl	8008960 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800885c:	e063      	b.n	8008926 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800885e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008866:	2b00      	cmp	r3, #0
 8008868:	d00e      	beq.n	8008888 <HAL_UART_IRQHandler+0x68c>
 800886a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800886e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d008      	beq.n	8008888 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800887e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f001 f83e 	bl	8009902 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008886:	e051      	b.n	800892c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008890:	2b00      	cmp	r3, #0
 8008892:	d014      	beq.n	80088be <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800889c:	2b00      	cmp	r3, #0
 800889e:	d105      	bne.n	80088ac <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80088a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d008      	beq.n	80088be <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d03a      	beq.n	800892a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	4798      	blx	r3
    }
    return;
 80088bc:	e035      	b.n	800892a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80088be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d009      	beq.n	80088de <HAL_UART_IRQHandler+0x6e2>
 80088ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d003      	beq.n	80088de <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 ffe8 	bl	80098ac <UART_EndTransmit_IT>
    return;
 80088dc:	e026      	b.n	800892c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80088de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d009      	beq.n	80088fe <HAL_UART_IRQHandler+0x702>
 80088ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ee:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f001 f817 	bl	800992a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80088fc:	e016      	b.n	800892c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80088fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008906:	2b00      	cmp	r3, #0
 8008908:	d010      	beq.n	800892c <HAL_UART_IRQHandler+0x730>
 800890a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800890e:	2b00      	cmp	r3, #0
 8008910:	da0c      	bge.n	800892c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 ffff 	bl	8009916 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008918:	e008      	b.n	800892c <HAL_UART_IRQHandler+0x730>
      return;
 800891a:	bf00      	nop
 800891c:	e006      	b.n	800892c <HAL_UART_IRQHandler+0x730>
    return;
 800891e:	bf00      	nop
 8008920:	e004      	b.n	800892c <HAL_UART_IRQHandler+0x730>
      return;
 8008922:	bf00      	nop
 8008924:	e002      	b.n	800892c <HAL_UART_IRQHandler+0x730>
      return;
 8008926:	bf00      	nop
 8008928:	e000      	b.n	800892c <HAL_UART_IRQHandler+0x730>
    return;
 800892a:	bf00      	nop
  }
}
 800892c:	37e8      	adds	r7, #232	; 0xe8
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	effffffe 	.word	0xeffffffe

08008938 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008954:	bf00      	nop
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	460b      	mov	r3, r1
 800896a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800897c:	b092      	sub	sp, #72	; 0x48
 800897e:	af00      	add	r7, sp, #0
 8008980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	431a      	orrs	r2, r3
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	695b      	ldr	r3, [r3, #20]
 8008996:	431a      	orrs	r2, r3
 8008998:	697b      	ldr	r3, [r7, #20]
 800899a:	69db      	ldr	r3, [r3, #28]
 800899c:	4313      	orrs	r3, r2
 800899e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681a      	ldr	r2, [r3, #0]
 80089a6:	4bbe      	ldr	r3, [pc, #760]	; (8008ca0 <UART_SetConfig+0x328>)
 80089a8:	4013      	ands	r3, r2
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089b0:	430b      	orrs	r3, r1
 80089b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	68da      	ldr	r2, [r3, #12]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	430a      	orrs	r2, r1
 80089c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4ab3      	ldr	r2, [pc, #716]	; (8008ca4 <UART_SetConfig+0x32c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d004      	beq.n	80089e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a1b      	ldr	r3, [r3, #32]
 80089de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089e0:	4313      	orrs	r3, r2
 80089e2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089e4:	697b      	ldr	r3, [r7, #20]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	689a      	ldr	r2, [r3, #8]
 80089ea:	4baf      	ldr	r3, [pc, #700]	; (8008ca8 <UART_SetConfig+0x330>)
 80089ec:	4013      	ands	r3, r2
 80089ee:	697a      	ldr	r2, [r7, #20]
 80089f0:	6812      	ldr	r2, [r2, #0]
 80089f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089f4:	430b      	orrs	r3, r1
 80089f6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fe:	f023 010f 	bic.w	r1, r3, #15
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4aa6      	ldr	r2, [pc, #664]	; (8008cac <UART_SetConfig+0x334>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d177      	bne.n	8008b08 <UART_SetConfig+0x190>
 8008a18:	4ba5      	ldr	r3, [pc, #660]	; (8008cb0 <UART_SetConfig+0x338>)
 8008a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a20:	2b28      	cmp	r3, #40	; 0x28
 8008a22:	d86d      	bhi.n	8008b00 <UART_SetConfig+0x188>
 8008a24:	a201      	add	r2, pc, #4	; (adr r2, 8008a2c <UART_SetConfig+0xb4>)
 8008a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a2a:	bf00      	nop
 8008a2c:	08008ad1 	.word	0x08008ad1
 8008a30:	08008b01 	.word	0x08008b01
 8008a34:	08008b01 	.word	0x08008b01
 8008a38:	08008b01 	.word	0x08008b01
 8008a3c:	08008b01 	.word	0x08008b01
 8008a40:	08008b01 	.word	0x08008b01
 8008a44:	08008b01 	.word	0x08008b01
 8008a48:	08008b01 	.word	0x08008b01
 8008a4c:	08008ad9 	.word	0x08008ad9
 8008a50:	08008b01 	.word	0x08008b01
 8008a54:	08008b01 	.word	0x08008b01
 8008a58:	08008b01 	.word	0x08008b01
 8008a5c:	08008b01 	.word	0x08008b01
 8008a60:	08008b01 	.word	0x08008b01
 8008a64:	08008b01 	.word	0x08008b01
 8008a68:	08008b01 	.word	0x08008b01
 8008a6c:	08008ae1 	.word	0x08008ae1
 8008a70:	08008b01 	.word	0x08008b01
 8008a74:	08008b01 	.word	0x08008b01
 8008a78:	08008b01 	.word	0x08008b01
 8008a7c:	08008b01 	.word	0x08008b01
 8008a80:	08008b01 	.word	0x08008b01
 8008a84:	08008b01 	.word	0x08008b01
 8008a88:	08008b01 	.word	0x08008b01
 8008a8c:	08008ae9 	.word	0x08008ae9
 8008a90:	08008b01 	.word	0x08008b01
 8008a94:	08008b01 	.word	0x08008b01
 8008a98:	08008b01 	.word	0x08008b01
 8008a9c:	08008b01 	.word	0x08008b01
 8008aa0:	08008b01 	.word	0x08008b01
 8008aa4:	08008b01 	.word	0x08008b01
 8008aa8:	08008b01 	.word	0x08008b01
 8008aac:	08008af1 	.word	0x08008af1
 8008ab0:	08008b01 	.word	0x08008b01
 8008ab4:	08008b01 	.word	0x08008b01
 8008ab8:	08008b01 	.word	0x08008b01
 8008abc:	08008b01 	.word	0x08008b01
 8008ac0:	08008b01 	.word	0x08008b01
 8008ac4:	08008b01 	.word	0x08008b01
 8008ac8:	08008b01 	.word	0x08008b01
 8008acc:	08008af9 	.word	0x08008af9
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e222      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ad8:	2304      	movs	r3, #4
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e21e      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ae6:	e21a      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ae8:	2310      	movs	r3, #16
 8008aea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aee:	e216      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008af0:	2320      	movs	r3, #32
 8008af2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008af6:	e212      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008af8:	2340      	movs	r3, #64	; 0x40
 8008afa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008afe:	e20e      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b00:	2380      	movs	r3, #128	; 0x80
 8008b02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b06:	e20a      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a69      	ldr	r2, [pc, #420]	; (8008cb4 <UART_SetConfig+0x33c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d130      	bne.n	8008b74 <UART_SetConfig+0x1fc>
 8008b12:	4b67      	ldr	r3, [pc, #412]	; (8008cb0 <UART_SetConfig+0x338>)
 8008b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b05      	cmp	r3, #5
 8008b1c:	d826      	bhi.n	8008b6c <UART_SetConfig+0x1f4>
 8008b1e:	a201      	add	r2, pc, #4	; (adr r2, 8008b24 <UART_SetConfig+0x1ac>)
 8008b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b24:	08008b3d 	.word	0x08008b3d
 8008b28:	08008b45 	.word	0x08008b45
 8008b2c:	08008b4d 	.word	0x08008b4d
 8008b30:	08008b55 	.word	0x08008b55
 8008b34:	08008b5d 	.word	0x08008b5d
 8008b38:	08008b65 	.word	0x08008b65
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e1ec      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b44:	2304      	movs	r3, #4
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e1e8      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b52:	e1e4      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b54:	2310      	movs	r3, #16
 8008b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b5a:	e1e0      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b5c:	2320      	movs	r3, #32
 8008b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b62:	e1dc      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b64:	2340      	movs	r3, #64	; 0x40
 8008b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b6a:	e1d8      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b6c:	2380      	movs	r3, #128	; 0x80
 8008b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b72:	e1d4      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a4f      	ldr	r2, [pc, #316]	; (8008cb8 <UART_SetConfig+0x340>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d130      	bne.n	8008be0 <UART_SetConfig+0x268>
 8008b7e:	4b4c      	ldr	r3, [pc, #304]	; (8008cb0 <UART_SetConfig+0x338>)
 8008b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b82:	f003 0307 	and.w	r3, r3, #7
 8008b86:	2b05      	cmp	r3, #5
 8008b88:	d826      	bhi.n	8008bd8 <UART_SetConfig+0x260>
 8008b8a:	a201      	add	r2, pc, #4	; (adr r2, 8008b90 <UART_SetConfig+0x218>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008ba9 	.word	0x08008ba9
 8008b94:	08008bb1 	.word	0x08008bb1
 8008b98:	08008bb9 	.word	0x08008bb9
 8008b9c:	08008bc1 	.word	0x08008bc1
 8008ba0:	08008bc9 	.word	0x08008bc9
 8008ba4:	08008bd1 	.word	0x08008bd1
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e1b6      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008bb0:	2304      	movs	r3, #4
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e1b2      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008bb8:	2308      	movs	r3, #8
 8008bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bbe:	e1ae      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008bc0:	2310      	movs	r3, #16
 8008bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bc6:	e1aa      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bce:	e1a6      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008bd0:	2340      	movs	r3, #64	; 0x40
 8008bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bd6:	e1a2      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008bd8:	2380      	movs	r3, #128	; 0x80
 8008bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bde:	e19e      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a35      	ldr	r2, [pc, #212]	; (8008cbc <UART_SetConfig+0x344>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d130      	bne.n	8008c4c <UART_SetConfig+0x2d4>
 8008bea:	4b31      	ldr	r3, [pc, #196]	; (8008cb0 <UART_SetConfig+0x338>)
 8008bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bee:	f003 0307 	and.w	r3, r3, #7
 8008bf2:	2b05      	cmp	r3, #5
 8008bf4:	d826      	bhi.n	8008c44 <UART_SetConfig+0x2cc>
 8008bf6:	a201      	add	r2, pc, #4	; (adr r2, 8008bfc <UART_SetConfig+0x284>)
 8008bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bfc:	08008c15 	.word	0x08008c15
 8008c00:	08008c1d 	.word	0x08008c1d
 8008c04:	08008c25 	.word	0x08008c25
 8008c08:	08008c2d 	.word	0x08008c2d
 8008c0c:	08008c35 	.word	0x08008c35
 8008c10:	08008c3d 	.word	0x08008c3d
 8008c14:	2300      	movs	r3, #0
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e180      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c1c:	2304      	movs	r3, #4
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c22:	e17c      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c24:	2308      	movs	r3, #8
 8008c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c2a:	e178      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c32:	e174      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c34:	2320      	movs	r3, #32
 8008c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c3a:	e170      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c3c:	2340      	movs	r3, #64	; 0x40
 8008c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c42:	e16c      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c44:	2380      	movs	r3, #128	; 0x80
 8008c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c4a:	e168      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1b      	ldr	r2, [pc, #108]	; (8008cc0 <UART_SetConfig+0x348>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d142      	bne.n	8008cdc <UART_SetConfig+0x364>
 8008c56:	4b16      	ldr	r3, [pc, #88]	; (8008cb0 <UART_SetConfig+0x338>)
 8008c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c5a:	f003 0307 	and.w	r3, r3, #7
 8008c5e:	2b05      	cmp	r3, #5
 8008c60:	d838      	bhi.n	8008cd4 <UART_SetConfig+0x35c>
 8008c62:	a201      	add	r2, pc, #4	; (adr r2, 8008c68 <UART_SetConfig+0x2f0>)
 8008c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c68:	08008c81 	.word	0x08008c81
 8008c6c:	08008c89 	.word	0x08008c89
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c99 	.word	0x08008c99
 8008c78:	08008cc5 	.word	0x08008cc5
 8008c7c:	08008ccd 	.word	0x08008ccd
 8008c80:	2300      	movs	r3, #0
 8008c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c86:	e14a      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c88:	2304      	movs	r3, #4
 8008c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c8e:	e146      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c90:	2308      	movs	r3, #8
 8008c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c96:	e142      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008c98:	2310      	movs	r3, #16
 8008c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c9e:	e13e      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ca0:	cfff69f3 	.word	0xcfff69f3
 8008ca4:	58000c00 	.word	0x58000c00
 8008ca8:	11fff4ff 	.word	0x11fff4ff
 8008cac:	40011000 	.word	0x40011000
 8008cb0:	58024400 	.word	0x58024400
 8008cb4:	40004400 	.word	0x40004400
 8008cb8:	40004800 	.word	0x40004800
 8008cbc:	40004c00 	.word	0x40004c00
 8008cc0:	40005000 	.word	0x40005000
 8008cc4:	2320      	movs	r3, #32
 8008cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cca:	e128      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ccc:	2340      	movs	r3, #64	; 0x40
 8008cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cd2:	e124      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008cd4:	2380      	movs	r3, #128	; 0x80
 8008cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cda:	e120      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4acb      	ldr	r2, [pc, #812]	; (8009010 <UART_SetConfig+0x698>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d176      	bne.n	8008dd4 <UART_SetConfig+0x45c>
 8008ce6:	4bcb      	ldr	r3, [pc, #812]	; (8009014 <UART_SetConfig+0x69c>)
 8008ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cee:	2b28      	cmp	r3, #40	; 0x28
 8008cf0:	d86c      	bhi.n	8008dcc <UART_SetConfig+0x454>
 8008cf2:	a201      	add	r2, pc, #4	; (adr r2, 8008cf8 <UART_SetConfig+0x380>)
 8008cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf8:	08008d9d 	.word	0x08008d9d
 8008cfc:	08008dcd 	.word	0x08008dcd
 8008d00:	08008dcd 	.word	0x08008dcd
 8008d04:	08008dcd 	.word	0x08008dcd
 8008d08:	08008dcd 	.word	0x08008dcd
 8008d0c:	08008dcd 	.word	0x08008dcd
 8008d10:	08008dcd 	.word	0x08008dcd
 8008d14:	08008dcd 	.word	0x08008dcd
 8008d18:	08008da5 	.word	0x08008da5
 8008d1c:	08008dcd 	.word	0x08008dcd
 8008d20:	08008dcd 	.word	0x08008dcd
 8008d24:	08008dcd 	.word	0x08008dcd
 8008d28:	08008dcd 	.word	0x08008dcd
 8008d2c:	08008dcd 	.word	0x08008dcd
 8008d30:	08008dcd 	.word	0x08008dcd
 8008d34:	08008dcd 	.word	0x08008dcd
 8008d38:	08008dad 	.word	0x08008dad
 8008d3c:	08008dcd 	.word	0x08008dcd
 8008d40:	08008dcd 	.word	0x08008dcd
 8008d44:	08008dcd 	.word	0x08008dcd
 8008d48:	08008dcd 	.word	0x08008dcd
 8008d4c:	08008dcd 	.word	0x08008dcd
 8008d50:	08008dcd 	.word	0x08008dcd
 8008d54:	08008dcd 	.word	0x08008dcd
 8008d58:	08008db5 	.word	0x08008db5
 8008d5c:	08008dcd 	.word	0x08008dcd
 8008d60:	08008dcd 	.word	0x08008dcd
 8008d64:	08008dcd 	.word	0x08008dcd
 8008d68:	08008dcd 	.word	0x08008dcd
 8008d6c:	08008dcd 	.word	0x08008dcd
 8008d70:	08008dcd 	.word	0x08008dcd
 8008d74:	08008dcd 	.word	0x08008dcd
 8008d78:	08008dbd 	.word	0x08008dbd
 8008d7c:	08008dcd 	.word	0x08008dcd
 8008d80:	08008dcd 	.word	0x08008dcd
 8008d84:	08008dcd 	.word	0x08008dcd
 8008d88:	08008dcd 	.word	0x08008dcd
 8008d8c:	08008dcd 	.word	0x08008dcd
 8008d90:	08008dcd 	.word	0x08008dcd
 8008d94:	08008dcd 	.word	0x08008dcd
 8008d98:	08008dc5 	.word	0x08008dc5
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e0bc      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008da4:	2304      	movs	r3, #4
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e0b8      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008dac:	2308      	movs	r3, #8
 8008dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db2:	e0b4      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008db4:	2310      	movs	r3, #16
 8008db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dba:	e0b0      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008dbc:	2320      	movs	r3, #32
 8008dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc2:	e0ac      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008dc4:	2340      	movs	r3, #64	; 0x40
 8008dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dca:	e0a8      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008dcc:	2380      	movs	r3, #128	; 0x80
 8008dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd2:	e0a4      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a8f      	ldr	r2, [pc, #572]	; (8009018 <UART_SetConfig+0x6a0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d130      	bne.n	8008e40 <UART_SetConfig+0x4c8>
 8008dde:	4b8d      	ldr	r3, [pc, #564]	; (8009014 <UART_SetConfig+0x69c>)
 8008de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de2:	f003 0307 	and.w	r3, r3, #7
 8008de6:	2b05      	cmp	r3, #5
 8008de8:	d826      	bhi.n	8008e38 <UART_SetConfig+0x4c0>
 8008dea:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <UART_SetConfig+0x478>)
 8008dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df0:	08008e09 	.word	0x08008e09
 8008df4:	08008e11 	.word	0x08008e11
 8008df8:	08008e19 	.word	0x08008e19
 8008dfc:	08008e21 	.word	0x08008e21
 8008e00:	08008e29 	.word	0x08008e29
 8008e04:	08008e31 	.word	0x08008e31
 8008e08:	2300      	movs	r3, #0
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e086      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e10:	2304      	movs	r3, #4
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e082      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e18:	2308      	movs	r3, #8
 8008e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1e:	e07e      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e20:	2310      	movs	r3, #16
 8008e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e26:	e07a      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e28:	2320      	movs	r3, #32
 8008e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2e:	e076      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e30:	2340      	movs	r3, #64	; 0x40
 8008e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e36:	e072      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e38:	2380      	movs	r3, #128	; 0x80
 8008e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3e:	e06e      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e40:	697b      	ldr	r3, [r7, #20]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a75      	ldr	r2, [pc, #468]	; (800901c <UART_SetConfig+0x6a4>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d130      	bne.n	8008eac <UART_SetConfig+0x534>
 8008e4a:	4b72      	ldr	r3, [pc, #456]	; (8009014 <UART_SetConfig+0x69c>)
 8008e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4e:	f003 0307 	and.w	r3, r3, #7
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	d826      	bhi.n	8008ea4 <UART_SetConfig+0x52c>
 8008e56:	a201      	add	r2, pc, #4	; (adr r2, 8008e5c <UART_SetConfig+0x4e4>)
 8008e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5c:	08008e75 	.word	0x08008e75
 8008e60:	08008e7d 	.word	0x08008e7d
 8008e64:	08008e85 	.word	0x08008e85
 8008e68:	08008e8d 	.word	0x08008e8d
 8008e6c:	08008e95 	.word	0x08008e95
 8008e70:	08008e9d 	.word	0x08008e9d
 8008e74:	2300      	movs	r3, #0
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e050      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e7c:	2304      	movs	r3, #4
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e04c      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e84:	2308      	movs	r3, #8
 8008e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8a:	e048      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e92:	e044      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e94:	2320      	movs	r3, #32
 8008e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9a:	e040      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008e9c:	2340      	movs	r3, #64	; 0x40
 8008e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea2:	e03c      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ea4:	2380      	movs	r3, #128	; 0x80
 8008ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eaa:	e038      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a5b      	ldr	r2, [pc, #364]	; (8009020 <UART_SetConfig+0x6a8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d130      	bne.n	8008f18 <UART_SetConfig+0x5a0>
 8008eb6:	4b57      	ldr	r3, [pc, #348]	; (8009014 <UART_SetConfig+0x69c>)
 8008eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008eba:	f003 0307 	and.w	r3, r3, #7
 8008ebe:	2b05      	cmp	r3, #5
 8008ec0:	d826      	bhi.n	8008f10 <UART_SetConfig+0x598>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <UART_SetConfig+0x550>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee1 	.word	0x08008ee1
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008ef1 	.word	0x08008ef1
 8008ed4:	08008ef9 	.word	0x08008ef9
 8008ed8:	08008f01 	.word	0x08008f01
 8008edc:	08008f09 	.word	0x08008f09
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee6:	e01a      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ee8:	2304      	movs	r3, #4
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eee:	e016      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef6:	e012      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008ef8:	2310      	movs	r3, #16
 8008efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efe:	e00e      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008f00:	2320      	movs	r3, #32
 8008f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f06:	e00a      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008f08:	2340      	movs	r3, #64	; 0x40
 8008f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f0e:	e006      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008f10:	2380      	movs	r3, #128	; 0x80
 8008f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f16:	e002      	b.n	8008f1e <UART_SetConfig+0x5a6>
 8008f18:	2380      	movs	r3, #128	; 0x80
 8008f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4a3f      	ldr	r2, [pc, #252]	; (8009020 <UART_SetConfig+0x6a8>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	f040 80f8 	bne.w	800911a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f2e:	2b20      	cmp	r3, #32
 8008f30:	dc46      	bgt.n	8008fc0 <UART_SetConfig+0x648>
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	f2c0 8082 	blt.w	800903c <UART_SetConfig+0x6c4>
 8008f38:	3b02      	subs	r3, #2
 8008f3a:	2b1e      	cmp	r3, #30
 8008f3c:	d87e      	bhi.n	800903c <UART_SetConfig+0x6c4>
 8008f3e:	a201      	add	r2, pc, #4	; (adr r2, 8008f44 <UART_SetConfig+0x5cc>)
 8008f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f44:	08008fc7 	.word	0x08008fc7
 8008f48:	0800903d 	.word	0x0800903d
 8008f4c:	08008fcf 	.word	0x08008fcf
 8008f50:	0800903d 	.word	0x0800903d
 8008f54:	0800903d 	.word	0x0800903d
 8008f58:	0800903d 	.word	0x0800903d
 8008f5c:	08008fdf 	.word	0x08008fdf
 8008f60:	0800903d 	.word	0x0800903d
 8008f64:	0800903d 	.word	0x0800903d
 8008f68:	0800903d 	.word	0x0800903d
 8008f6c:	0800903d 	.word	0x0800903d
 8008f70:	0800903d 	.word	0x0800903d
 8008f74:	0800903d 	.word	0x0800903d
 8008f78:	0800903d 	.word	0x0800903d
 8008f7c:	08008fef 	.word	0x08008fef
 8008f80:	0800903d 	.word	0x0800903d
 8008f84:	0800903d 	.word	0x0800903d
 8008f88:	0800903d 	.word	0x0800903d
 8008f8c:	0800903d 	.word	0x0800903d
 8008f90:	0800903d 	.word	0x0800903d
 8008f94:	0800903d 	.word	0x0800903d
 8008f98:	0800903d 	.word	0x0800903d
 8008f9c:	0800903d 	.word	0x0800903d
 8008fa0:	0800903d 	.word	0x0800903d
 8008fa4:	0800903d 	.word	0x0800903d
 8008fa8:	0800903d 	.word	0x0800903d
 8008fac:	0800903d 	.word	0x0800903d
 8008fb0:	0800903d 	.word	0x0800903d
 8008fb4:	0800903d 	.word	0x0800903d
 8008fb8:	0800903d 	.word	0x0800903d
 8008fbc:	0800902f 	.word	0x0800902f
 8008fc0:	2b40      	cmp	r3, #64	; 0x40
 8008fc2:	d037      	beq.n	8009034 <UART_SetConfig+0x6bc>
 8008fc4:	e03a      	b.n	800903c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008fc6:	f7fe f8c5 	bl	8007154 <HAL_RCCEx_GetD3PCLK1Freq>
 8008fca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fcc:	e03c      	b.n	8009048 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f7fe f8d4 	bl	8007180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fdc:	e034      	b.n	8009048 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fde:	f107 0318 	add.w	r3, r7, #24
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f7fe fa20 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fec:	e02c      	b.n	8009048 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <UART_SetConfig+0x69c>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f003 0320 	and.w	r3, r3, #32
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d016      	beq.n	8009028 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008ffa:	4b06      	ldr	r3, [pc, #24]	; (8009014 <UART_SetConfig+0x69c>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	08db      	lsrs	r3, r3, #3
 8009000:	f003 0303 	and.w	r3, r3, #3
 8009004:	4a07      	ldr	r2, [pc, #28]	; (8009024 <UART_SetConfig+0x6ac>)
 8009006:	fa22 f303 	lsr.w	r3, r2, r3
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800900c:	e01c      	b.n	8009048 <UART_SetConfig+0x6d0>
 800900e:	bf00      	nop
 8009010:	40011400 	.word	0x40011400
 8009014:	58024400 	.word	0x58024400
 8009018:	40007800 	.word	0x40007800
 800901c:	40007c00 	.word	0x40007c00
 8009020:	58000c00 	.word	0x58000c00
 8009024:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009028:	4b9d      	ldr	r3, [pc, #628]	; (80092a0 <UART_SetConfig+0x928>)
 800902a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800902c:	e00c      	b.n	8009048 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800902e:	4b9d      	ldr	r3, [pc, #628]	; (80092a4 <UART_SetConfig+0x92c>)
 8009030:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009032:	e009      	b.n	8009048 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800903a:	e005      	b.n	8009048 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009046:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800904a:	2b00      	cmp	r3, #0
 800904c:	f000 81de 	beq.w	800940c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009050:	697b      	ldr	r3, [r7, #20]
 8009052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009054:	4a94      	ldr	r2, [pc, #592]	; (80092a8 <UART_SetConfig+0x930>)
 8009056:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800905a:	461a      	mov	r2, r3
 800905c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800905e:	fbb3 f3f2 	udiv	r3, r3, r2
 8009062:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	685a      	ldr	r2, [r3, #4]
 8009068:	4613      	mov	r3, r2
 800906a:	005b      	lsls	r3, r3, #1
 800906c:	4413      	add	r3, r2
 800906e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009070:	429a      	cmp	r2, r3
 8009072:	d305      	bcc.n	8009080 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800907a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800907c:	429a      	cmp	r2, r3
 800907e:	d903      	bls.n	8009088 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009080:	2301      	movs	r3, #1
 8009082:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009086:	e1c1      	b.n	800940c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800908a:	2200      	movs	r2, #0
 800908c:	60bb      	str	r3, [r7, #8]
 800908e:	60fa      	str	r2, [r7, #12]
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009094:	4a84      	ldr	r2, [pc, #528]	; (80092a8 <UART_SetConfig+0x930>)
 8009096:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800909a:	b29b      	uxth	r3, r3
 800909c:	2200      	movs	r2, #0
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	607a      	str	r2, [r7, #4]
 80090a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80090aa:	f7f7 f915 	bl	80002d8 <__aeabi_uldivmod>
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4610      	mov	r0, r2
 80090b4:	4619      	mov	r1, r3
 80090b6:	f04f 0200 	mov.w	r2, #0
 80090ba:	f04f 0300 	mov.w	r3, #0
 80090be:	020b      	lsls	r3, r1, #8
 80090c0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80090c4:	0202      	lsls	r2, r0, #8
 80090c6:	6979      	ldr	r1, [r7, #20]
 80090c8:	6849      	ldr	r1, [r1, #4]
 80090ca:	0849      	lsrs	r1, r1, #1
 80090cc:	2000      	movs	r0, #0
 80090ce:	460c      	mov	r4, r1
 80090d0:	4605      	mov	r5, r0
 80090d2:	eb12 0804 	adds.w	r8, r2, r4
 80090d6:	eb43 0905 	adc.w	r9, r3, r5
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	469a      	mov	sl, r3
 80090e2:	4693      	mov	fp, r2
 80090e4:	4652      	mov	r2, sl
 80090e6:	465b      	mov	r3, fp
 80090e8:	4640      	mov	r0, r8
 80090ea:	4649      	mov	r1, r9
 80090ec:	f7f7 f8f4 	bl	80002d8 <__aeabi_uldivmod>
 80090f0:	4602      	mov	r2, r0
 80090f2:	460b      	mov	r3, r1
 80090f4:	4613      	mov	r3, r2
 80090f6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090fe:	d308      	bcc.n	8009112 <UART_SetConfig+0x79a>
 8009100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009106:	d204      	bcs.n	8009112 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800910e:	60da      	str	r2, [r3, #12]
 8009110:	e17c      	b.n	800940c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009118:	e178      	b.n	800940c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800911a:	697b      	ldr	r3, [r7, #20]
 800911c:	69db      	ldr	r3, [r3, #28]
 800911e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009122:	f040 80c5 	bne.w	80092b0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009126:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800912a:	2b20      	cmp	r3, #32
 800912c:	dc48      	bgt.n	80091c0 <UART_SetConfig+0x848>
 800912e:	2b00      	cmp	r3, #0
 8009130:	db7b      	blt.n	800922a <UART_SetConfig+0x8b2>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d879      	bhi.n	800922a <UART_SetConfig+0x8b2>
 8009136:	a201      	add	r2, pc, #4	; (adr r2, 800913c <UART_SetConfig+0x7c4>)
 8009138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800913c:	080091c7 	.word	0x080091c7
 8009140:	080091cf 	.word	0x080091cf
 8009144:	0800922b 	.word	0x0800922b
 8009148:	0800922b 	.word	0x0800922b
 800914c:	080091d7 	.word	0x080091d7
 8009150:	0800922b 	.word	0x0800922b
 8009154:	0800922b 	.word	0x0800922b
 8009158:	0800922b 	.word	0x0800922b
 800915c:	080091e7 	.word	0x080091e7
 8009160:	0800922b 	.word	0x0800922b
 8009164:	0800922b 	.word	0x0800922b
 8009168:	0800922b 	.word	0x0800922b
 800916c:	0800922b 	.word	0x0800922b
 8009170:	0800922b 	.word	0x0800922b
 8009174:	0800922b 	.word	0x0800922b
 8009178:	0800922b 	.word	0x0800922b
 800917c:	080091f7 	.word	0x080091f7
 8009180:	0800922b 	.word	0x0800922b
 8009184:	0800922b 	.word	0x0800922b
 8009188:	0800922b 	.word	0x0800922b
 800918c:	0800922b 	.word	0x0800922b
 8009190:	0800922b 	.word	0x0800922b
 8009194:	0800922b 	.word	0x0800922b
 8009198:	0800922b 	.word	0x0800922b
 800919c:	0800922b 	.word	0x0800922b
 80091a0:	0800922b 	.word	0x0800922b
 80091a4:	0800922b 	.word	0x0800922b
 80091a8:	0800922b 	.word	0x0800922b
 80091ac:	0800922b 	.word	0x0800922b
 80091b0:	0800922b 	.word	0x0800922b
 80091b4:	0800922b 	.word	0x0800922b
 80091b8:	0800922b 	.word	0x0800922b
 80091bc:	0800921d 	.word	0x0800921d
 80091c0:	2b40      	cmp	r3, #64	; 0x40
 80091c2:	d02e      	beq.n	8009222 <UART_SetConfig+0x8aa>
 80091c4:	e031      	b.n	800922a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80091c6:	f7fd f853 	bl	8006270 <HAL_RCC_GetPCLK1Freq>
 80091ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091cc:	e033      	b.n	8009236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091ce:	f7fd f865 	bl	800629c <HAL_RCC_GetPCLK2Freq>
 80091d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091d4:	e02f      	b.n	8009236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091da:	4618      	mov	r0, r3
 80091dc:	f7fd ffd0 	bl	8007180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091e4:	e027      	b.n	8009236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e6:	f107 0318 	add.w	r3, r7, #24
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7fe f91c 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f4:	e01f      	b.n	8009236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091f6:	4b2d      	ldr	r3, [pc, #180]	; (80092ac <UART_SetConfig+0x934>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f003 0320 	and.w	r3, r3, #32
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d009      	beq.n	8009216 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009202:	4b2a      	ldr	r3, [pc, #168]	; (80092ac <UART_SetConfig+0x934>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	08db      	lsrs	r3, r3, #3
 8009208:	f003 0303 	and.w	r3, r3, #3
 800920c:	4a24      	ldr	r2, [pc, #144]	; (80092a0 <UART_SetConfig+0x928>)
 800920e:	fa22 f303 	lsr.w	r3, r2, r3
 8009212:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009214:	e00f      	b.n	8009236 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009216:	4b22      	ldr	r3, [pc, #136]	; (80092a0 <UART_SetConfig+0x928>)
 8009218:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800921a:	e00c      	b.n	8009236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800921c:	4b21      	ldr	r3, [pc, #132]	; (80092a4 <UART_SetConfig+0x92c>)
 800921e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009220:	e009      	b.n	8009236 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009228:	e005      	b.n	8009236 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800922a:	2300      	movs	r3, #0
 800922c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009234:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 80e7 	beq.w	800940c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	4a19      	ldr	r2, [pc, #100]	; (80092a8 <UART_SetConfig+0x930>)
 8009244:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009248:	461a      	mov	r2, r3
 800924a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800924c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009250:	005a      	lsls	r2, r3, #1
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	441a      	add	r2, r3
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009262:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009266:	2b0f      	cmp	r3, #15
 8009268:	d916      	bls.n	8009298 <UART_SetConfig+0x920>
 800926a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009270:	d212      	bcs.n	8009298 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009274:	b29b      	uxth	r3, r3
 8009276:	f023 030f 	bic.w	r3, r3, #15
 800927a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800927c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927e:	085b      	lsrs	r3, r3, #1
 8009280:	b29b      	uxth	r3, r3
 8009282:	f003 0307 	and.w	r3, r3, #7
 8009286:	b29a      	uxth	r2, r3
 8009288:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800928a:	4313      	orrs	r3, r2
 800928c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009294:	60da      	str	r2, [r3, #12]
 8009296:	e0b9      	b.n	800940c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009298:	2301      	movs	r3, #1
 800929a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800929e:	e0b5      	b.n	800940c <UART_SetConfig+0xa94>
 80092a0:	03d09000 	.word	0x03d09000
 80092a4:	003d0900 	.word	0x003d0900
 80092a8:	0800cb08 	.word	0x0800cb08
 80092ac:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80092b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80092b4:	2b20      	cmp	r3, #32
 80092b6:	dc49      	bgt.n	800934c <UART_SetConfig+0x9d4>
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	db7c      	blt.n	80093b6 <UART_SetConfig+0xa3e>
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d87a      	bhi.n	80093b6 <UART_SetConfig+0xa3e>
 80092c0:	a201      	add	r2, pc, #4	; (adr r2, 80092c8 <UART_SetConfig+0x950>)
 80092c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092c6:	bf00      	nop
 80092c8:	08009353 	.word	0x08009353
 80092cc:	0800935b 	.word	0x0800935b
 80092d0:	080093b7 	.word	0x080093b7
 80092d4:	080093b7 	.word	0x080093b7
 80092d8:	08009363 	.word	0x08009363
 80092dc:	080093b7 	.word	0x080093b7
 80092e0:	080093b7 	.word	0x080093b7
 80092e4:	080093b7 	.word	0x080093b7
 80092e8:	08009373 	.word	0x08009373
 80092ec:	080093b7 	.word	0x080093b7
 80092f0:	080093b7 	.word	0x080093b7
 80092f4:	080093b7 	.word	0x080093b7
 80092f8:	080093b7 	.word	0x080093b7
 80092fc:	080093b7 	.word	0x080093b7
 8009300:	080093b7 	.word	0x080093b7
 8009304:	080093b7 	.word	0x080093b7
 8009308:	08009383 	.word	0x08009383
 800930c:	080093b7 	.word	0x080093b7
 8009310:	080093b7 	.word	0x080093b7
 8009314:	080093b7 	.word	0x080093b7
 8009318:	080093b7 	.word	0x080093b7
 800931c:	080093b7 	.word	0x080093b7
 8009320:	080093b7 	.word	0x080093b7
 8009324:	080093b7 	.word	0x080093b7
 8009328:	080093b7 	.word	0x080093b7
 800932c:	080093b7 	.word	0x080093b7
 8009330:	080093b7 	.word	0x080093b7
 8009334:	080093b7 	.word	0x080093b7
 8009338:	080093b7 	.word	0x080093b7
 800933c:	080093b7 	.word	0x080093b7
 8009340:	080093b7 	.word	0x080093b7
 8009344:	080093b7 	.word	0x080093b7
 8009348:	080093a9 	.word	0x080093a9
 800934c:	2b40      	cmp	r3, #64	; 0x40
 800934e:	d02e      	beq.n	80093ae <UART_SetConfig+0xa36>
 8009350:	e031      	b.n	80093b6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009352:	f7fc ff8d 	bl	8006270 <HAL_RCC_GetPCLK1Freq>
 8009356:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009358:	e033      	b.n	80093c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800935a:	f7fc ff9f 	bl	800629c <HAL_RCC_GetPCLK2Freq>
 800935e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009360:	e02f      	b.n	80093c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009366:	4618      	mov	r0, r3
 8009368:	f7fd ff0a 	bl	8007180 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800936c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800936e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009370:	e027      	b.n	80093c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009372:	f107 0318 	add.w	r3, r7, #24
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe f856 	bl	8007428 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800937c:	69fb      	ldr	r3, [r7, #28]
 800937e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009380:	e01f      	b.n	80093c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009382:	4b2d      	ldr	r3, [pc, #180]	; (8009438 <UART_SetConfig+0xac0>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d009      	beq.n	80093a2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800938e:	4b2a      	ldr	r3, [pc, #168]	; (8009438 <UART_SetConfig+0xac0>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	08db      	lsrs	r3, r3, #3
 8009394:	f003 0303 	and.w	r3, r3, #3
 8009398:	4a28      	ldr	r2, [pc, #160]	; (800943c <UART_SetConfig+0xac4>)
 800939a:	fa22 f303 	lsr.w	r3, r2, r3
 800939e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80093a0:	e00f      	b.n	80093c2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80093a2:	4b26      	ldr	r3, [pc, #152]	; (800943c <UART_SetConfig+0xac4>)
 80093a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093a6:	e00c      	b.n	80093c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80093a8:	4b25      	ldr	r3, [pc, #148]	; (8009440 <UART_SetConfig+0xac8>)
 80093aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093ac:	e009      	b.n	80093c2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093b4:	e005      	b.n	80093c2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80093c0:	bf00      	nop
    }

    if (pclk != 0U)
 80093c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d021      	beq.n	800940c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093cc:	4a1d      	ldr	r2, [pc, #116]	; (8009444 <UART_SetConfig+0xacc>)
 80093ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093d2:	461a      	mov	r2, r3
 80093d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	685b      	ldr	r3, [r3, #4]
 80093de:	085b      	lsrs	r3, r3, #1
 80093e0:	441a      	add	r2, r3
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80093ea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ee:	2b0f      	cmp	r3, #15
 80093f0:	d909      	bls.n	8009406 <UART_SetConfig+0xa8e>
 80093f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f8:	d205      	bcs.n	8009406 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093fc:	b29a      	uxth	r2, r3
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	60da      	str	r2, [r3, #12]
 8009404:	e002      	b.n	800940c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	2201      	movs	r2, #1
 8009410:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2201      	movs	r2, #1
 8009418:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2200      	movs	r2, #0
 8009420:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	2200      	movs	r2, #0
 8009426:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009428:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800942c:	4618      	mov	r0, r3
 800942e:	3748      	adds	r7, #72	; 0x48
 8009430:	46bd      	mov	sp, r7
 8009432:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009436:	bf00      	nop
 8009438:	58024400 	.word	0x58024400
 800943c:	03d09000 	.word	0x03d09000
 8009440:	003d0900 	.word	0x003d0900
 8009444:	0800cb08 	.word	0x0800cb08

08009448 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009454:	f003 0301 	and.w	r3, r3, #1
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00a      	beq.n	8009472 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	430a      	orrs	r2, r1
 8009470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	f003 0302 	and.w	r3, r3, #2
 800947a:	2b00      	cmp	r3, #0
 800947c:	d00a      	beq.n	8009494 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	430a      	orrs	r2, r1
 8009492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009498:	f003 0304 	and.w	r3, r3, #4
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00a      	beq.n	80094b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ba:	f003 0308 	and.w	r3, r3, #8
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00a      	beq.n	80094d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	430a      	orrs	r2, r1
 80094d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094dc:	f003 0310 	and.w	r3, r3, #16
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00a      	beq.n	80094fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094fe:	f003 0320 	and.w	r3, r3, #32
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00a      	beq.n	800951c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	430a      	orrs	r2, r1
 800951a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009524:	2b00      	cmp	r3, #0
 8009526:	d01a      	beq.n	800955e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685b      	ldr	r3, [r3, #4]
 800952e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009546:	d10a      	bne.n	800955e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	605a      	str	r2, [r3, #4]
  }
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b086      	sub	sp, #24
 8009590:	af02      	add	r7, sp, #8
 8009592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2200      	movs	r2, #0
 8009598:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800959c:	f7f8 fb6c 	bl	8001c78 <HAL_GetTick>
 80095a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f003 0308 	and.w	r3, r3, #8
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d10e      	bne.n	80095ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2200      	movs	r2, #0
 80095ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f82f 	bl	8009622 <UART_WaitOnFlagUntilTimeout>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e025      	b.n	800961a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f003 0304 	and.w	r3, r3, #4
 80095d8:	2b04      	cmp	r3, #4
 80095da:	d10e      	bne.n	80095fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095e0:	9300      	str	r3, [sp, #0]
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2200      	movs	r2, #0
 80095e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f000 f819 	bl	8009622 <UART_WaitOnFlagUntilTimeout>
 80095f0:	4603      	mov	r3, r0
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	e00f      	b.n	800961a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2220      	movs	r2, #32
 80095fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b09c      	sub	sp, #112	; 0x70
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	4613      	mov	r3, r2
 8009630:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009632:	e0a9      	b.n	8009788 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963a:	f000 80a5 	beq.w	8009788 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800963e:	f7f8 fb1b 	bl	8001c78 <HAL_GetTick>
 8009642:	4602      	mov	r2, r0
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800964a:	429a      	cmp	r2, r3
 800964c:	d302      	bcc.n	8009654 <UART_WaitOnFlagUntilTimeout+0x32>
 800964e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009650:	2b00      	cmp	r3, #0
 8009652:	d140      	bne.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800965c:	e853 3f00 	ldrex	r3, [r3]
 8009660:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009664:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009668:	667b      	str	r3, [r7, #100]	; 0x64
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	461a      	mov	r2, r3
 8009670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009672:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009674:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009676:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009678:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800967a:	e841 2300 	strex	r3, r2, [r1]
 800967e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e6      	bne.n	8009654 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	3308      	adds	r3, #8
 800968c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009690:	e853 3f00 	ldrex	r3, [r3]
 8009694:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009698:	f023 0301 	bic.w	r3, r3, #1
 800969c:	663b      	str	r3, [r7, #96]	; 0x60
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	3308      	adds	r3, #8
 80096a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80096a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80096a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80096ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80096b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e5      	bne.n	8009686 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2220      	movs	r2, #32
 80096be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2220      	movs	r2, #32
 80096c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80096d2:	2303      	movs	r3, #3
 80096d4:	e069      	b.n	80097aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0304 	and.w	r3, r3, #4
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d051      	beq.n	8009788 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	69db      	ldr	r3, [r3, #28]
 80096ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096f2:	d149      	bne.n	8009788 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009706:	e853 3f00 	ldrex	r3, [r3]
 800970a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800970c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800970e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009712:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	461a      	mov	r2, r3
 800971a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800971c:	637b      	str	r3, [r7, #52]	; 0x34
 800971e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009720:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009724:	e841 2300 	strex	r3, r2, [r1]
 8009728:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e6      	bne.n	80096fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3308      	adds	r3, #8
 8009736:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	613b      	str	r3, [r7, #16]
   return(result);
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	f023 0301 	bic.w	r3, r3, #1
 8009746:	66bb      	str	r3, [r7, #104]	; 0x68
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	3308      	adds	r3, #8
 800974e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009750:	623a      	str	r2, [r7, #32]
 8009752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	69f9      	ldr	r1, [r7, #28]
 8009756:	6a3a      	ldr	r2, [r7, #32]
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	61bb      	str	r3, [r7, #24]
   return(result);
 800975e:	69bb      	ldr	r3, [r7, #24]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e5      	bne.n	8009730 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	2220      	movs	r2, #32
 8009768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2220      	movs	r2, #32
 8009770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2220      	movs	r2, #32
 8009778:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009784:	2303      	movs	r3, #3
 8009786:	e010      	b.n	80097aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	69da      	ldr	r2, [r3, #28]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	4013      	ands	r3, r2
 8009792:	68ba      	ldr	r2, [r7, #8]
 8009794:	429a      	cmp	r2, r3
 8009796:	bf0c      	ite	eq
 8009798:	2301      	moveq	r3, #1
 800979a:	2300      	movne	r3, #0
 800979c:	b2db      	uxtb	r3, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	79fb      	ldrb	r3, [r7, #7]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	f43f af46 	beq.w	8009634 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3770      	adds	r7, #112	; 0x70
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
	...

080097b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b095      	sub	sp, #84	; 0x54
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80097ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097da:	643b      	str	r3, [r7, #64]	; 0x40
 80097dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80097e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80097e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e6      	bne.n	80097bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3308      	adds	r3, #8
 80097f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	6a3b      	ldr	r3, [r7, #32]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80097fe:	69fa      	ldr	r2, [r7, #28]
 8009800:	4b1e      	ldr	r3, [pc, #120]	; (800987c <UART_EndRxTransfer+0xc8>)
 8009802:	4013      	ands	r3, r2
 8009804:	64bb      	str	r3, [r7, #72]	; 0x48
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3308      	adds	r3, #8
 800980c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800980e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009810:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e5      	bne.n	80097ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009826:	2b01      	cmp	r3, #1
 8009828:	d118      	bne.n	800985c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	60bb      	str	r3, [r7, #8]
   return(result);
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	f023 0310 	bic.w	r3, r3, #16
 800983e:	647b      	str	r3, [r7, #68]	; 0x44
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009848:	61bb      	str	r3, [r7, #24]
 800984a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6979      	ldr	r1, [r7, #20]
 800984e:	69ba      	ldr	r2, [r7, #24]
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	613b      	str	r3, [r7, #16]
   return(result);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e6      	bne.n	800982a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2220      	movs	r2, #32
 8009860:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2200      	movs	r2, #0
 8009868:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009870:	bf00      	nop
 8009872:	3754      	adds	r7, #84	; 0x54
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr
 800987c:	effffffe 	.word	0xeffffffe

08009880 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	2200      	movs	r2, #0
 8009892:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	2200      	movs	r2, #0
 800989a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	f7ff f854 	bl	800894c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098a4:	bf00      	nop
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b088      	sub	sp, #32
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	e853 3f00 	ldrex	r3, [r3]
 80098c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80098c2:	68bb      	ldr	r3, [r7, #8]
 80098c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098c8:	61fb      	str	r3, [r7, #28]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	69fb      	ldr	r3, [r7, #28]
 80098d2:	61bb      	str	r3, [r7, #24]
 80098d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d6:	6979      	ldr	r1, [r7, #20]
 80098d8:	69ba      	ldr	r2, [r7, #24]
 80098da:	e841 2300 	strex	r3, r2, [r1]
 80098de:	613b      	str	r3, [r7, #16]
   return(result);
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d1e6      	bne.n	80098b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2220      	movs	r2, #32
 80098ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2200      	movs	r2, #0
 80098f2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f7ff f81f 	bl	8008938 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098fa:	bf00      	nop
 80098fc:	3720      	adds	r7, #32
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800990a:	bf00      	nop
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800994c:	2b01      	cmp	r3, #1
 800994e:	d101      	bne.n	8009954 <HAL_UARTEx_DisableFifoMode+0x16>
 8009950:	2302      	movs	r3, #2
 8009952:	e027      	b.n	80099a4 <HAL_UARTEx_DisableFifoMode+0x66>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2201      	movs	r2, #1
 8009958:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2224      	movs	r2, #36	; 0x24
 8009960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0201 	bic.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009982:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2220      	movs	r2, #32
 8009996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3714      	adds	r7, #20
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d101      	bne.n	80099c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80099c4:	2302      	movs	r3, #2
 80099c6:	e02d      	b.n	8009a24 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2201      	movs	r2, #1
 80099cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2224      	movs	r2, #36	; 0x24
 80099d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	681a      	ldr	r2, [r3, #0]
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f022 0201 	bic.w	r2, r2, #1
 80099ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	683a      	ldr	r2, [r7, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f84f 	bl	8009aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	68fa      	ldr	r2, [r7, #12]
 8009a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2220      	movs	r2, #32
 8009a16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3710      	adds	r7, #16
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d101      	bne.n	8009a44 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009a40:	2302      	movs	r3, #2
 8009a42:	e02d      	b.n	8009aa0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2224      	movs	r2, #36	; 0x24
 8009a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 0201 	bic.w	r2, r2, #1
 8009a6a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	683a      	ldr	r2, [r7, #0]
 8009a7c:	430a      	orrs	r2, r1
 8009a7e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 f811 	bl	8009aa8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2220      	movs	r2, #32
 8009a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2200      	movs	r2, #0
 8009a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a9e:	2300      	movs	r3, #0
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3710      	adds	r7, #16
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d108      	bne.n	8009aca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ac8:	e031      	b.n	8009b2e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009aca:	2310      	movs	r3, #16
 8009acc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ace:	2310      	movs	r3, #16
 8009ad0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	689b      	ldr	r3, [r3, #8]
 8009ad8:	0e5b      	lsrs	r3, r3, #25
 8009ada:	b2db      	uxtb	r3, r3
 8009adc:	f003 0307 	and.w	r3, r3, #7
 8009ae0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	0f5b      	lsrs	r3, r3, #29
 8009aea:	b2db      	uxtb	r3, r3
 8009aec:	f003 0307 	and.w	r3, r3, #7
 8009af0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009af2:	7bbb      	ldrb	r3, [r7, #14]
 8009af4:	7b3a      	ldrb	r2, [r7, #12]
 8009af6:	4911      	ldr	r1, [pc, #68]	; (8009b3c <UARTEx_SetNbDataToProcess+0x94>)
 8009af8:	5c8a      	ldrb	r2, [r1, r2]
 8009afa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009afe:	7b3a      	ldrb	r2, [r7, #12]
 8009b00:	490f      	ldr	r1, [pc, #60]	; (8009b40 <UARTEx_SetNbDataToProcess+0x98>)
 8009b02:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b04:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b08:	b29a      	uxth	r2, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	7b7a      	ldrb	r2, [r7, #13]
 8009b14:	4909      	ldr	r1, [pc, #36]	; (8009b3c <UARTEx_SetNbDataToProcess+0x94>)
 8009b16:	5c8a      	ldrb	r2, [r1, r2]
 8009b18:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b1c:	7b7a      	ldrb	r2, [r7, #13]
 8009b1e:	4908      	ldr	r1, [pc, #32]	; (8009b40 <UARTEx_SetNbDataToProcess+0x98>)
 8009b20:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b22:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009b2e:	bf00      	nop
 8009b30:	3714      	adds	r7, #20
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	0800cb20 	.word	0x0800cb20
 8009b40:	0800cb28 	.word	0x0800cb28

08009b44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009b44:	b084      	sub	sp, #16
 8009b46:	b580      	push	{r7, lr}
 8009b48:	b084      	sub	sp, #16
 8009b4a:	af00      	add	r7, sp, #0
 8009b4c:	6078      	str	r0, [r7, #4]
 8009b4e:	f107 001c 	add.w	r0, r7, #28
 8009b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d120      	bne.n	8009b9e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	4b2a      	ldr	r3, [pc, #168]	; (8009c18 <USB_CoreInit+0xd4>)
 8009b6e:	4013      	ands	r3, r2
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68db      	ldr	r3, [r3, #12]
 8009b78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d105      	bne.n	8009b92 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f000 faac 	bl	800a0f0 <USB_CoreReset>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]
 8009b9c:	e01a      	b.n	8009bd4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 faa0 	bl	800a0f0 <USB_CoreReset>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d106      	bne.n	8009bc8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	639a      	str	r2, [r3, #56]	; 0x38
 8009bc6:	e005      	b.n	8009bd4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d116      	bne.n	8009c08 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009bde:	b29a      	uxth	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009be8:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <USB_CoreInit+0xd8>)
 8009bea:	4313      	orrs	r3, r2
 8009bec:	687a      	ldr	r2, [r7, #4]
 8009bee:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	f043 0206 	orr.w	r2, r3, #6
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	689b      	ldr	r3, [r3, #8]
 8009c00:	f043 0220 	orr.w	r2, r3, #32
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009c14:	b004      	add	sp, #16
 8009c16:	4770      	bx	lr
 8009c18:	ffbdffbf 	.word	0xffbdffbf
 8009c1c:	03ee0000 	.word	0x03ee0000

08009c20 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b083      	sub	sp, #12
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f023 0201 	bic.w	r2, r3, #1
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009c34:	2300      	movs	r3, #0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	370c      	adds	r7, #12
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c40:	4770      	bx	lr

08009c42 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b084      	sub	sp, #16
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	460b      	mov	r3, r1
 8009c4c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009c5e:	78fb      	ldrb	r3, [r7, #3]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d115      	bne.n	8009c90 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	68db      	ldr	r3, [r3, #12]
 8009c68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009c70:	2001      	movs	r0, #1
 8009c72:	f7f8 f80d 	bl	8001c90 <HAL_Delay>
      ms++;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	3301      	adds	r3, #1
 8009c7a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fa29 	bl	800a0d4 <USB_GetMode>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d01e      	beq.n	8009cc6 <USB_SetCurrentMode+0x84>
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2b31      	cmp	r3, #49	; 0x31
 8009c8c:	d9f0      	bls.n	8009c70 <USB_SetCurrentMode+0x2e>
 8009c8e:	e01a      	b.n	8009cc6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009c90:	78fb      	ldrb	r3, [r7, #3]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d115      	bne.n	8009cc2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	68db      	ldr	r3, [r3, #12]
 8009c9a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ca2:	2001      	movs	r0, #1
 8009ca4:	f7f7 fff4 	bl	8001c90 <HAL_Delay>
      ms++;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	3301      	adds	r3, #1
 8009cac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fa10 	bl	800a0d4 <USB_GetMode>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d005      	beq.n	8009cc6 <USB_SetCurrentMode+0x84>
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b31      	cmp	r3, #49	; 0x31
 8009cbe:	d9f0      	bls.n	8009ca2 <USB_SetCurrentMode+0x60>
 8009cc0:	e001      	b.n	8009cc6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e005      	b.n	8009cd2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2b32      	cmp	r3, #50	; 0x32
 8009cca:	d101      	bne.n	8009cd0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009ccc:	2301      	movs	r3, #1
 8009cce:	e000      	b.n	8009cd2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
	...

08009cdc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009cdc:	b084      	sub	sp, #16
 8009cde:	b580      	push	{r7, lr}
 8009ce0:	b086      	sub	sp, #24
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	613b      	str	r3, [r7, #16]
 8009cfa:	e009      	b.n	8009d10 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	693b      	ldr	r3, [r7, #16]
 8009d00:	3340      	adds	r3, #64	; 0x40
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	2200      	movs	r2, #0
 8009d08:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	3301      	adds	r3, #1
 8009d0e:	613b      	str	r3, [r7, #16]
 8009d10:	693b      	ldr	r3, [r7, #16]
 8009d12:	2b0e      	cmp	r3, #14
 8009d14:	d9f2      	bls.n	8009cfc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009d16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d11c      	bne.n	8009d56 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d2a:	f043 0302 	orr.w	r3, r3, #2
 8009d2e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d34:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	e005      	b.n	8009d62 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d5a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009d68:	461a      	mov	r2, r3
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d74:	4619      	mov	r1, r3
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d7c:	461a      	mov	r2, r3
 8009d7e:	680b      	ldr	r3, [r1, #0]
 8009d80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d84:	2b01      	cmp	r3, #1
 8009d86:	d10c      	bne.n	8009da2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d104      	bne.n	8009d98 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009d8e:	2100      	movs	r1, #0
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f965 	bl	800a060 <USB_SetDevSpeed>
 8009d96:	e008      	b.n	8009daa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009d98:	2101      	movs	r1, #1
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f960 	bl	800a060 <USB_SetDevSpeed>
 8009da0:	e003      	b.n	8009daa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009da2:	2103      	movs	r1, #3
 8009da4:	6878      	ldr	r0, [r7, #4]
 8009da6:	f000 f95b 	bl	800a060 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009daa:	2110      	movs	r1, #16
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f8f3 	bl	8009f98 <USB_FlushTxFifo>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d001      	beq.n	8009dbc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009db8:	2301      	movs	r3, #1
 8009dba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 f91f 	bl	800a000 <USB_FlushRxFifo>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dde:	461a      	mov	r2, r3
 8009de0:	2300      	movs	r3, #0
 8009de2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dea:	461a      	mov	r2, r3
 8009dec:	2300      	movs	r3, #0
 8009dee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009df0:	2300      	movs	r3, #0
 8009df2:	613b      	str	r3, [r7, #16]
 8009df4:	e043      	b.n	8009e7e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e0c:	d118      	bne.n	8009e40 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10a      	bne.n	8009e2a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e20:	461a      	mov	r2, r3
 8009e22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	e013      	b.n	8009e52 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	015a      	lsls	r2, r3, #5
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e36:	461a      	mov	r2, r3
 8009e38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009e3c:	6013      	str	r3, [r2, #0]
 8009e3e:	e008      	b.n	8009e52 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	015a      	lsls	r2, r3, #5
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4413      	add	r3, r2
 8009e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	2300      	movs	r3, #0
 8009e50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	015a      	lsls	r2, r3, #5
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	4413      	add	r3, r2
 8009e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e5e:	461a      	mov	r2, r3
 8009e60:	2300      	movs	r3, #0
 8009e62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e70:	461a      	mov	r2, r3
 8009e72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009e76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	613b      	str	r3, [r7, #16]
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d3b7      	bcc.n	8009df6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009e86:	2300      	movs	r3, #0
 8009e88:	613b      	str	r3, [r7, #16]
 8009e8a:	e043      	b.n	8009f14 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ea2:	d118      	bne.n	8009ed6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d10a      	bne.n	8009ec0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	015a      	lsls	r2, r3, #5
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4413      	add	r3, r2
 8009eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eb6:	461a      	mov	r2, r3
 8009eb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	e013      	b.n	8009ee8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	015a      	lsls	r2, r3, #5
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	4413      	add	r3, r2
 8009ec8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ecc:	461a      	mov	r2, r3
 8009ece:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ed2:	6013      	str	r3, [r2, #0]
 8009ed4:	e008      	b.n	8009ee8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	015a      	lsls	r2, r3, #5
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	4413      	add	r3, r2
 8009ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	015a      	lsls	r2, r3, #5
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4413      	add	r3, r2
 8009ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	015a      	lsls	r2, r3, #5
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	4413      	add	r3, r2
 8009f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f06:	461a      	mov	r2, r3
 8009f08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009f0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	3301      	adds	r3, #1
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	429a      	cmp	r2, r3
 8009f1a:	d3b7      	bcc.n	8009e8c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f22:	691b      	ldr	r3, [r3, #16]
 8009f24:	68fa      	ldr	r2, [r7, #12]
 8009f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2200      	movs	r2, #0
 8009f34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009f3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d105      	bne.n	8009f50 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	699b      	ldr	r3, [r3, #24]
 8009f48:	f043 0210 	orr.w	r2, r3, #16
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	699a      	ldr	r2, [r3, #24]
 8009f54:	4b0e      	ldr	r3, [pc, #56]	; (8009f90 <USB_DevInit+0x2b4>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d005      	beq.n	8009f6e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	699b      	ldr	r3, [r3, #24]
 8009f66:	f043 0208 	orr.w	r2, r3, #8
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d105      	bne.n	8009f80 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	699a      	ldr	r2, [r3, #24]
 8009f78:	4b06      	ldr	r3, [pc, #24]	; (8009f94 <USB_DevInit+0x2b8>)
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009f8c:	b004      	add	sp, #16
 8009f8e:	4770      	bx	lr
 8009f90:	803c3800 	.word	0x803c3800
 8009f94:	40000004 	.word	0x40000004

08009f98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009f98:	b480      	push	{r7}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
 8009fa0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	4a13      	ldr	r2, [pc, #76]	; (8009ffc <USB_FlushTxFifo+0x64>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d901      	bls.n	8009fb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009fb4:	2303      	movs	r3, #3
 8009fb6:	e01b      	b.n	8009ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	691b      	ldr	r3, [r3, #16]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	daf2      	bge.n	8009fa6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	019b      	lsls	r3, r3, #6
 8009fc8:	f043 0220 	orr.w	r2, r3, #32
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	4a08      	ldr	r2, [pc, #32]	; (8009ffc <USB_FlushTxFifo+0x64>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d901      	bls.n	8009fe2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e006      	b.n	8009ff0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	f003 0320 	and.w	r3, r3, #32
 8009fea:	2b20      	cmp	r3, #32
 8009fec:	d0f0      	beq.n	8009fd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009fee:	2300      	movs	r3, #0
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr
 8009ffc:	00030d40 	.word	0x00030d40

0800a000 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a008:	2300      	movs	r3, #0
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	3301      	adds	r3, #1
 800a010:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4a11      	ldr	r2, [pc, #68]	; (800a05c <USB_FlushRxFifo+0x5c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d901      	bls.n	800a01e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a01a:	2303      	movs	r3, #3
 800a01c:	e018      	b.n	800a050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	2b00      	cmp	r3, #0
 800a024:	daf2      	bge.n	800a00c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2210      	movs	r2, #16
 800a02e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	3301      	adds	r3, #1
 800a034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	4a08      	ldr	r2, [pc, #32]	; (800a05c <USB_FlushRxFifo+0x5c>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d901      	bls.n	800a042 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a03e:	2303      	movs	r3, #3
 800a040:	e006      	b.n	800a050 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	f003 0310 	and.w	r3, r3, #16
 800a04a:	2b10      	cmp	r3, #16
 800a04c:	d0f0      	beq.n	800a030 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3714      	adds	r7, #20
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr
 800a05c:	00030d40 	.word	0x00030d40

0800a060 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	68f9      	ldr	r1, [r7, #12]
 800a07c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a080:	4313      	orrs	r3, r2
 800a082:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0ac:	f023 0303 	bic.w	r3, r3, #3
 800a0b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0c0:	f043 0302 	orr.w	r3, r3, #2
 800a0c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	f003 0301 	and.w	r3, r3, #1
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	3301      	adds	r3, #1
 800a100:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	4a13      	ldr	r2, [pc, #76]	; (800a154 <USB_CoreReset+0x64>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d901      	bls.n	800a10e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e01b      	b.n	800a146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	691b      	ldr	r3, [r3, #16]
 800a112:	2b00      	cmp	r3, #0
 800a114:	daf2      	bge.n	800a0fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a116:	2300      	movs	r3, #0
 800a118:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	691b      	ldr	r3, [r3, #16]
 800a11e:	f043 0201 	orr.w	r2, r3, #1
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	3301      	adds	r3, #1
 800a12a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4a09      	ldr	r2, [pc, #36]	; (800a154 <USB_CoreReset+0x64>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d901      	bls.n	800a138 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a134:	2303      	movs	r3, #3
 800a136:	e006      	b.n	800a146 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	691b      	ldr	r3, [r3, #16]
 800a13c:	f003 0301 	and.w	r3, r3, #1
 800a140:	2b01      	cmp	r3, #1
 800a142:	d0f0      	beq.n	800a126 <USB_CoreReset+0x36>

  return HAL_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3714      	adds	r7, #20
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	00030d40 	.word	0x00030d40

0800a158 <__libc_init_array>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4d0d      	ldr	r5, [pc, #52]	; (800a190 <__libc_init_array+0x38>)
 800a15c:	4c0d      	ldr	r4, [pc, #52]	; (800a194 <__libc_init_array+0x3c>)
 800a15e:	1b64      	subs	r4, r4, r5
 800a160:	10a4      	asrs	r4, r4, #2
 800a162:	2600      	movs	r6, #0
 800a164:	42a6      	cmp	r6, r4
 800a166:	d109      	bne.n	800a17c <__libc_init_array+0x24>
 800a168:	4d0b      	ldr	r5, [pc, #44]	; (800a198 <__libc_init_array+0x40>)
 800a16a:	4c0c      	ldr	r4, [pc, #48]	; (800a19c <__libc_init_array+0x44>)
 800a16c:	f000 f820 	bl	800a1b0 <_init>
 800a170:	1b64      	subs	r4, r4, r5
 800a172:	10a4      	asrs	r4, r4, #2
 800a174:	2600      	movs	r6, #0
 800a176:	42a6      	cmp	r6, r4
 800a178:	d105      	bne.n	800a186 <__libc_init_array+0x2e>
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a180:	4798      	blx	r3
 800a182:	3601      	adds	r6, #1
 800a184:	e7ee      	b.n	800a164 <__libc_init_array+0xc>
 800a186:	f855 3b04 	ldr.w	r3, [r5], #4
 800a18a:	4798      	blx	r3
 800a18c:	3601      	adds	r6, #1
 800a18e:	e7f2      	b.n	800a176 <__libc_init_array+0x1e>
 800a190:	0800cb38 	.word	0x0800cb38
 800a194:	0800cb38 	.word	0x0800cb38
 800a198:	0800cb38 	.word	0x0800cb38
 800a19c:	0800cb3c 	.word	0x0800cb3c

0800a1a0 <memset>:
 800a1a0:	4402      	add	r2, r0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d100      	bne.n	800a1aa <memset+0xa>
 800a1a8:	4770      	bx	lr
 800a1aa:	f803 1b01 	strb.w	r1, [r3], #1
 800a1ae:	e7f9      	b.n	800a1a4 <memset+0x4>

0800a1b0 <_init>:
 800a1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1b2:	bf00      	nop
 800a1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1b6:	bc08      	pop	{r3}
 800a1b8:	469e      	mov	lr, r3
 800a1ba:	4770      	bx	lr

0800a1bc <_fini>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	bf00      	nop
 800a1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c2:	bc08      	pop	{r3}
 800a1c4:	469e      	mov	lr, r3
 800a1c6:	4770      	bx	lr
