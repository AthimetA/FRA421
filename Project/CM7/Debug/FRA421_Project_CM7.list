
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010964  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  08010c04  08010c04  00020c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080125cc  080125cc  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  080125cc  080125cc  000225cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080125d4  080125d4  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080125d4  080125d4  000225d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080125d8  080125d8  000225d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  080125dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  08012664  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  080126c4  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  08012724  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  08012724  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002641a  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a90  00000000  00000000  0005a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019e8  00000000  00000000  0005bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023aa3  00000000  00000000  0009b03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001937b4  00000000  00000000  000beade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00252292  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076c0  00000000  00000000  002522e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010bec 	.word	0x08010bec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08010bec 	.word	0x08010bec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80e4 	bne.w	8000966 <Player_Reading_Card+0x212>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <Player_Reading_Card+0x21c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fe47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <Player_Reading_Card+0x21c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e03b      	b.n	8000966 <Player_Reading_Card+0x212>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d136      	bne.n	8000966 <Player_Reading_Card+0x212>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d132      	bne.n	8000966 <Player_Reading_Card+0x212>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d92e      	bls.n	8000966 <Player_Reading_Card+0x212>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fe12 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Player_Reading_Card+0x21c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				if(ptrYugiohCard_dst->cardType == 2)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d103      	bne.n	8000948 <Player_Reading_Card+0x1f4>
					ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
 8000946:	e002      	b.n	800094e <Player_Reading_Card+0x1fa>
					ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fee4 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	aaaaaaab 	.word	0xaaaaaaab

08000974 <Player_Reading_Card_Monster_SPS>:

void Player_Reading_Card_Monster_SPS(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	2358      	movs	r3, #88	; 0x58
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3328      	adds	r3, #40	; 0x28
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3318      	adds	r3, #24
 800099e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009a6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8098 	bne.w	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
 80009c2:	e00d      	b.n	80009e0 <Player_Reading_Card_Monster_SPS+0x6c>
			if (ptrYugiohCard_src->cardType == 1) {
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <Player_Reading_Card_Monster_SPS+0x60>
				flag_played = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80009d2:	e008      	b.n	80009e6 <Player_Reading_Card_Monster_SPS+0x72>
			}
			ptrYugiohCard_played++;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3310      	adds	r3, #16
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	ddee      	ble.n	80009c4 <Player_Reading_Card_Monster_SPS+0x50>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	e00f      	b.n	8000a14 <Player_Reading_Card_Monster_SPS+0xa0>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d103      	bne.n	8000a08 <Player_Reading_Card_Monster_SPS+0x94>
				flag_played = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000a06:	e008      	b.n	8000a1a <Player_Reading_Card_Monster_SPS+0xa6>
			}
			ptrYugiohCard_played++;
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	ddec      	ble.n	80009f4 <Player_Reading_Card_Monster_SPS+0x80>
		}

		if (player->turn == first && flag_played == 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12f      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>
 8000a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12b      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>

			if (ptrYugiohCard_src->standPosition < 6)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d85c      	bhi.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fd7c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	69b8      	ldr	r0, [r7, #24]
 8000a3e:	f7ff fe21 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	799a      	ldrb	r2, [r3, #6]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000a48:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4c:	0899      	lsrs	r1, r3, #2
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2200      	movs	r2, #0
 8000a68:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a6a:	69f8      	ldr	r0, [r7, #28]
 8000a6c:	f7ff fe56 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a82:	e034      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d12f      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12b      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d927      	bls.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fd47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	69b8      	ldr	r0, [r7, #24]
 8000aa8:	f7ff fdec 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	799a      	ldrb	r2, [r3, #6]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab6:	0899      	lsrs	r1, r3, #2
 8000ab8:	460b      	mov	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2200      	movs	r2, #0
 8000acc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ad4:	69f8      	ldr	r0, [r7, #28]
 8000ad6:	f7ff fe21 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	2200      	movs	r2, #0
 8000ade:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000aec:	e7ff      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	aaaaaaab 	.word	0xaaaaaaab

08000afc <Player_Reading_Card_Monster_Battle>:

void Player_Reading_Card_Monster_Battle(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3328      	adds	r3, #40	; 0x28
 8000b0c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2358      	movs	r3, #88	; 0x58
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	3328      	adds	r3, #40	; 0x28
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3318      	adds	r3, #24
 8000b26:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b2e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3308      	adds	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d17d      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e00d      	b.n	8000b66 <Player_Reading_Card_Monster_Battle+0x6a>
			if (ptrYugiohCard_src->cardType == 1 ) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <Player_Reading_Card_Monster_Battle+0x5e>
				flag_played = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b58:	e008      	b.n	8000b6c <Player_Reading_Card_Monster_Battle+0x70>
			}
			ptrYugiohCard_played++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	ddee      	ble.n	8000b4a <Player_Reading_Card_Monster_Battle+0x4e>
		}

		if (player->turn == first && flag_played == 0) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d12f      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>
 8000b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	799b      	ldrb	r3, [r3, #6]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d85c      	bhi.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fcd3 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff fd78 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	799a      	ldrb	r2, [r3, #6]
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0899      	lsrs	r1, r3, #2
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bbc:	69b8      	ldr	r0, [r7, #24]
 8000bbe:	f7ff fdad 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000bd4:	e034      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d12f      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d927      	bls.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fc9e 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff fd43 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000c04:	fba3 1302 	umull	r1, r3, r3, r2
 8000c08:	0899      	lsrs	r1, r3, #2
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2200      	movs	r2, #0
 8000c24:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c26:	69b8      	ldr	r0, [r7, #24]
 8000c28:	f7ff fd78 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000c3e:	e7ff      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	aaaaaaab 	.word	0xaaaaaaab

08000c4c <Player_Reading_Card_Trap>:

void Player_Reading_Card_Trap(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3328      	adds	r3, #40	; 0x28
 8000c5c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2358      	movs	r3, #88	; 0x58
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	3328      	adds	r3, #40	; 0x28
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3318      	adds	r3, #24
 8000c76:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c7e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3308      	adds	r3, #8
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	f040 8088 	bne.w	8000da6 <Player_Reading_Card_Trap+0x15a>
	{


		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e017      	b.n	8000ccc <Player_Reading_Card_Trap+0x80>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 3
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10b      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d107      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
					&&ptrYugiohCard_played->actionPoint_Eff > 0) {
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <Player_Reading_Card_Trap+0x74>
				flag_played = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000cbe:	e008      	b.n	8000cd2 <Player_Reading_Card_Trap+0x86>
			}
			ptrYugiohCard_played++;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3310      	adds	r3, #16
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	dde4      	ble.n	8000c9c <Player_Reading_Card_Trap+0x50>
		}

		if (player->turn == first && flag_played == 0) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12f      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>
 8000cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>

			if (ptrYugiohCard_src->standPosition < 6)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d85c      	bhi.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fc20 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff fcc5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	799a      	ldrb	r2, [r3, #6]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	0899      	lsrs	r1, r3, #2
 8000d06:	460b      	mov	r3, r1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f7ff fcfa 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d3a:	e034      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12f      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d12b      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	799b      	ldrb	r3, [r3, #6]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d927      	bls.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fbeb 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff fc90 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	799a      	ldrb	r2, [r3, #6]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	0899      	lsrs	r1, r3, #2
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2200      	movs	r2, #0
 8000d84:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f7ff fcc5 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2200      	movs	r2, #0
 8000d96:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000da4:	e7ff      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	aaaaaaab 	.word	0xaaaaaaab

08000db4 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3328      	adds	r3, #40	; 0x28
 8000dc4:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2358      	movs	r3, #88	; 0x58
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	3328      	adds	r3, #40	; 0x28
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000de6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d17d      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d12f      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>
 8000e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12b      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d85c      	bhi.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fb75 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	69f8      	ldr	r0, [r7, #28]
 8000e4c:	f7ff fc1a 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	799a      	ldrb	r2, [r3, #6]
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0899      	lsrs	r1, r3, #2
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000e78:	6a38      	ldr	r0, [r7, #32]
 8000e7a:	f7ff fc4f 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2200      	movs	r2, #0
 8000e82:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000e90:	e034      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d12f      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12b      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d927      	bls.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fb40 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f7ff fbe5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	799a      	ldrb	r2, [r3, #6]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec4:	0899      	lsrs	r1, r3, #2
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ee2:	6a38      	ldr	r0, [r7, #32]
 8000ee4:	f7ff fc1a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	2200      	movs	r2, #0
 8000eec:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000efa:	e7ff      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	aaaaaaab 	.word	0xaaaaaaab

08000f08 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3328      	adds	r3, #40	; 0x28
 8000f18:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2358      	movs	r3, #88	; 0x58
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	3328      	adds	r3, #40	; 0x28
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3318      	adds	r3, #24
 8000f32:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f3a:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8083 	bne.w	8001058 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3368      	adds	r3, #104	; 0x68
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	e00f      	b.n	8000f7e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d103      	bne.n	8000f72 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000f70:	e008      	b.n	8000f84 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3310      	adds	r3, #16
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2b13      	cmp	r3, #19
 8000f82:	ddec      	ble.n	8000f5e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d12f      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	799b      	ldrb	r3, [r3, #6]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d85c      	bhi.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fac7 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff fb6c 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	799a      	ldrb	r2, [r3, #6]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	0899      	lsrs	r1, r3, #2
 8000fb8:	460b      	mov	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fd4:	69b8      	ldr	r0, [r7, #24]
 8000fd6:	f7ff fba1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000fec:	e034      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12f      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8000ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d12b      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d927      	bls.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fa92 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fb37 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	799a      	ldrb	r2, [r3, #6]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	0899      	lsrs	r1, r3, #2
 8001022:	460b      	mov	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	440b      	add	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2201      	movs	r2, #1
 800103c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb6c 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2200      	movs	r2, #0
 8001048:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001056:	e7ff      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	aaaaaaab 	.word	0xaaaaaaab

08001064 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3328      	adds	r3, #40	; 0x28
 8001074:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	2358      	movs	r3, #88	; 0x58
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	3328      	adds	r3, #40	; 0x28
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3318      	adds	r3, #24
 800108e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001096:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80cb 	bne.w	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e013      	b.n	80010dc <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d107      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80010ce:	e008      	b.n	80010e2 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	3310      	adds	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dde8      	ble.n	80010b4 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d102      	bne.n	80010fc <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3368      	adds	r3, #104	; 0x68
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	e00f      	b.n	8001128 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800111a:	e008      	b.n	800112e <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	3310      	adds	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	3301      	adds	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b13      	cmp	r3, #19
 800112c:	ddec      	ble.n	8001108 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e00f      	b.n	800115c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800114e:	e008      	b.n	8001162 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	3310      	adds	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b04      	cmp	r3, #4
 8001160:	ddec      	ble.n	800113c <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d902      	bls.n	8001170 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12f      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12b      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d85c      	bhi.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9d1 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff fa76 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	799a      	ldrb	r2, [r3, #6]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0899      	lsrs	r1, r3, #2
 80011a4:	460b      	mov	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2200      	movs	r2, #0
 80011b8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2201      	movs	r2, #1
 80011be:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faab 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2200      	movs	r2, #0
 80011ca:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80011d8:	e034      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d12f      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 80011e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12b      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d927      	bls.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f99c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff fa41 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	799a      	ldrb	r2, [r3, #6]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	0899      	lsrs	r1, r3, #2
 800120e:	460b      	mov	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2201      	movs	r2, #1
 8001228:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f7ff fa76 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001242:	e7ff      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	aaaaaaab 	.word	0xaaaaaaab

08001250 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3328      	adds	r3, #40	; 0x28
 8001260:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	2358      	movs	r3, #88	; 0x58
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	3328      	adds	r3, #40	; 0x28
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3318      	adds	r3, #24
 800127a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001282:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3308      	adds	r3, #8
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 80c7 	bne.w	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e00f      	b.n	80012c0 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80012b2:	e008      	b.n	80012c6 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3310      	adds	r3, #16
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	ddec      	ble.n	80012a0 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d102      	bne.n	80012d4 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3368      	adds	r3, #104	; 0x68
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	e00f      	b.n	800131a <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800130c:	e008      	b.n	8001320 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3310      	adds	r3, #16
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3301      	adds	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b13      	cmp	r3, #19
 800131e:	ddec      	ble.n	80012fa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	e00f      	b.n	800134e <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d103      	bne.n	8001342 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001340:	e008      	b.n	8001354 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3310      	adds	r3, #16
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	ddec      	ble.n	800132e <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12f      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>
 800135e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001362:	2b00      	cmp	r3, #0
 8001364:	d12b      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	799b      	ldrb	r3, [r3, #6]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d85c      	bhi.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8df 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff f984 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	799a      	ldrb	r2, [r3, #6]
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	0899      	lsrs	r1, r3, #2
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2200      	movs	r2, #0
 800139c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2201      	movs	r2, #1
 80013a2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f7ff f9b9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2200      	movs	r2, #0
 80013ae:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80013bc:	e034      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d12f      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 80013c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d12b      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d927      	bls.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f8aa 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff f94f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	799a      	ldrb	r2, [r3, #6]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	0899      	lsrs	r1, r3, #2
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2201      	movs	r2, #1
 800140c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800140e:	69b8      	ldr	r0, [r7, #24]
 8001410:	f7ff f984 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001426:	e7ff      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	aaaaaaab 	.word	0xaaaaaaab

08001434 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001450:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	76fb      	strb	r3, [r7, #27]
 8001456:	e00b      	b.n	8001470 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	69f9      	ldr	r1, [r7, #28]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f910 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3310      	adds	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800146a:	7efb      	ldrb	r3, [r7, #27]
 800146c:	3301      	adds	r3, #1
 800146e:	76fb      	strb	r3, [r7, #27]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d9f0      	bls.n	8001458 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800149c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800149e:	2300      	movs	r3, #0
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	e00b      	b.n	80014bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f8ea 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3310      	adds	r3, #16
 80014b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80014b6:	7efb      	ldrb	r3, [r7, #27]
 80014b8:	3301      	adds	r3, #1
 80014ba:	76fb      	strb	r3, [r7, #27]
 80014bc:	7efb      	ldrb	r3, [r7, #27]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d9f0      	bls.n	80014a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3368      	adds	r3, #104	; 0x68
 80014c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00b      	b.n	80014e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f8d5 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3310      	adds	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014e0:	7ebb      	ldrb	r3, [r7, #26]
 80014e2:	3301      	adds	r3, #1
 80014e4:	76bb      	strb	r3, [r7, #26]
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	d9f0      	bls.n	80014ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3308      	adds	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80014f2:	2300      	movs	r3, #0
 80014f4:	767b      	strb	r3, [r7, #25]
 80014f6:	e00b      	b.n	8001510 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8c0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3310      	adds	r3, #16
 8001508:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800150a:	7e7b      	ldrb	r3, [r7, #25]
 800150c:	3301      	adds	r3, #1
 800150e:	767b      	strb	r3, [r7, #25]
 8001510:	7e7b      	ldrb	r3, [r7, #25]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9f0      	bls.n	80014f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f8ad 	bl	8000684 <YUGIOH_card_copy>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001540:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001548:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001550:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001558:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800155a:	2306      	movs	r3, #6
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00c      	b.n	800157a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff f88e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b10      	subs	r3, #16
 800156c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	3b10      	subs	r3, #16
 8001572:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dcef      	bgt.n	8001560 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001598:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80015a0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80015a8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80015b0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80015b2:	2306      	movs	r3, #6
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e02c      	b.n	8001612 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff f862 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3b02      	subs	r3, #2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	1e50      	subs	r0, r2, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b02      	subs	r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	1e50      	subs	r0, r2, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3b10      	subs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3b10      	subs	r3, #16
 800160a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dccf      	bgt.n	80015b8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3368      	adds	r3, #104	; 0x68
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3368      	adds	r3, #104	; 0x68
 800164c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001654:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001656:	2314      	movs	r3, #20
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e00c      	b.n	8001676 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001660:	f7ff f810 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3b10      	subs	r3, #16
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3b10      	subs	r3, #16
 800166e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dcef      	bgt.n	800165c <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3368      	adds	r3, #104	; 0x68
 8001684:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	f7fe fffb 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f7fe fff4 	bl	8000684 <YUGIOH_card_copy>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08c      	sub	sp, #48	; 0x30
 80016a8:	af04      	add	r7, sp, #16
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	3304      	adds	r3, #4
 80016b2:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	3304      	adds	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	3304      	adds	r3, #4
 80016be:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80016c6:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 80016e4:	2108      	movs	r1, #8
 80016e6:	48ad      	ldr	r0, [pc, #692]	; (800199c <GAME_PLAY_Management+0x2f8>)
 80016e8:	f009 f928 	bl	800a93c <HAL_GPIO_ReadPin>
 80016ec:	4603      	mov	r3, r0
 80016ee:	461a      	mov	r2, r3
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 80016f4:	2102      	movs	r1, #2
 80016f6:	48aa      	ldr	r0, [pc, #680]	; (80019a0 <GAME_PLAY_Management+0x2fc>)
 80016f8:	f009 f920 	bl	800a93c <HAL_GPIO_ReadPin>
 80016fc:	4603      	mov	r3, r0
 80016fe:	461a      	mov	r2, r3
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8001704:	2104      	movs	r1, #4
 8001706:	48a5      	ldr	r0, [pc, #660]	; (800199c <GAME_PLAY_Management+0x2f8>)
 8001708:	f009 f918 	bl	800a93c <HAL_GPIO_ReadPin>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8001714:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001718:	48a2      	ldr	r0, [pc, #648]	; (80019a4 <GAME_PLAY_Management+0x300>)
 800171a:	f009 f90f 	bl	800a93c <HAL_GPIO_ReadPin>
 800171e:	4603      	mov	r3, r0
 8001720:	461a      	mov	r2, r3
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800172c:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	3304      	adds	r3, #4
 8001732:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	3304      	adds	r3, #4
 8001738:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 800173a:	7dfb      	ldrb	r3, [r7, #23]
 800173c:	2b04      	cmp	r3, #4
 800173e:	f200 82c7 	bhi.w	8001cd0 <GAME_PLAY_Management+0x62c>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <GAME_PLAY_Management+0xa4>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	0800175d 	.word	0x0800175d
 800174c:	080019d9 	.word	0x080019d9
 8001750:	08001b37 	.word	0x08001b37
 8001754:	08001bb5 	.word	0x08001bb5
 8001758:	08001c5d 	.word	0x08001c5d
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800175c:	4b92      	ldr	r3, [pc, #584]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800175e:	2200      	movs	r2, #0
 8001760:	9202      	str	r2, [sp, #8]
 8001762:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001766:	9201      	str	r2, [sp, #4]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	9200      	str	r2, [sp, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a8f      	ldr	r2, [pc, #572]	; (80019ac <GAME_PLAY_Management+0x308>)
 8001770:	2105      	movs	r1, #5
 8001772:	2005      	movs	r0, #5
 8001774:	f005 f91f 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001778:	4b8b      	ldr	r3, [pc, #556]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800177a:	2200      	movs	r2, #0
 800177c:	9202      	str	r2, [sp, #8]
 800177e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001782:	9201      	str	r2, [sp, #4]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	9200      	str	r2, [sp, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a89      	ldr	r2, [pc, #548]	; (80019b0 <GAME_PLAY_Management+0x30c>)
 800178c:	210f      	movs	r1, #15
 800178e:	2000      	movs	r0, #0
 8001790:	f005 f911 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001794:	4b87      	ldr	r3, [pc, #540]	; (80019b4 <GAME_PLAY_Management+0x310>)
 8001796:	2200      	movs	r2, #0
 8001798:	9202      	str	r2, [sp, #8]
 800179a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800179e:	9201      	str	r2, [sp, #4]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	9200      	str	r2, [sp, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a84      	ldr	r2, [pc, #528]	; (80019b8 <GAME_PLAY_Management+0x314>)
 80017a8:	2123      	movs	r1, #35	; 0x23
 80017aa:	2008      	movs	r0, #8
 80017ac:	f005 f903 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80017b0:	4b80      	ldr	r3, [pc, #512]	; (80019b4 <GAME_PLAY_Management+0x310>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	9202      	str	r2, [sp, #8]
 80017b6:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80017ba:	9201      	str	r2, [sp, #4]
 80017bc:	685a      	ldr	r2, [r3, #4]
 80017be:	9200      	str	r2, [sp, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a7e      	ldr	r2, [pc, #504]	; (80019bc <GAME_PLAY_Management+0x318>)
 80017c4:	213c      	movs	r1, #60	; 0x3c
 80017c6:	2019      	movs	r0, #25
 80017c8:	f005 f8f5 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017cc:	4b76      	ldr	r3, [pc, #472]	; (80019a8 <GAME_PLAY_Management+0x304>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	9202      	str	r2, [sp, #8]
 80017d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <GAME_PLAY_Management+0x30c>)
 80017e0:	214b      	movs	r1, #75	; 0x4b
 80017e2:	2000      	movs	r0, #0
 80017e4:	f005 f8e7 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80017e8:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <GAME_PLAY_Management+0x304>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	9202      	str	r2, [sp, #8]
 80017ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017f2:	9201      	str	r2, [sp, #4]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	9200      	str	r2, [sp, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a71      	ldr	r2, [pc, #452]	; (80019c0 <GAME_PLAY_Management+0x31c>)
 80017fc:	215a      	movs	r1, #90	; 0x5a
 80017fe:	2000      	movs	r0, #0
 8001800:	f005 f8d9 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001804:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <GAME_PLAY_Management+0x304>)
 8001806:	2200      	movs	r2, #0
 8001808:	9202      	str	r2, [sp, #8]
 800180a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	9200      	str	r2, [sp, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a6b      	ldr	r2, [pc, #428]	; (80019c4 <GAME_PLAY_Management+0x320>)
 8001818:	215a      	movs	r1, #90	; 0x5a
 800181a:	205d      	movs	r0, #93	; 0x5d
 800181c:	f005 f8cb 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001820:	4b61      	ldr	r3, [pc, #388]	; (80019a8 <GAME_PLAY_Management+0x304>)
 8001822:	2200      	movs	r2, #0
 8001824:	9202      	str	r2, [sp, #8]
 8001826:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182a:	9201      	str	r2, [sp, #4]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	9200      	str	r2, [sp, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <GAME_PLAY_Management+0x324>)
 8001834:	2169      	movs	r1, #105	; 0x69
 8001836:	2000      	movs	r0, #0
 8001838:	f005 f8bd 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800183c:	4b5a      	ldr	r3, [pc, #360]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800183e:	2200      	movs	r2, #0
 8001840:	9202      	str	r2, [sp, #8]
 8001842:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a5f      	ldr	r2, [pc, #380]	; (80019cc <GAME_PLAY_Management+0x328>)
 8001850:	2169      	movs	r1, #105	; 0x69
 8001852:	2064      	movs	r0, #100	; 0x64
 8001854:	f005 f8af 	bl	80069b6 <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001858:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800185a:	2200      	movs	r2, #0
 800185c:	9202      	str	r2, [sp, #8]
 800185e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001862:	9201      	str	r2, [sp, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	9200      	str	r2, [sp, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a59      	ldr	r2, [pc, #356]	; (80019d0 <GAME_PLAY_Management+0x32c>)
 800186c:	2105      	movs	r1, #5
 800186e:	2005      	movs	r0, #5
 8001870:	f005 f8eb 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001874:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <GAME_PLAY_Management+0x304>)
 8001876:	2200      	movs	r2, #0
 8001878:	9202      	str	r2, [sp, #8]
 800187a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187e:	9201      	str	r2, [sp, #4]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	9200      	str	r2, [sp, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a4a      	ldr	r2, [pc, #296]	; (80019b0 <GAME_PLAY_Management+0x30c>)
 8001888:	210f      	movs	r1, #15
 800188a:	2000      	movs	r0, #0
 800188c:	f005 f8dd 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001890:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <GAME_PLAY_Management+0x310>)
 8001892:	2200      	movs	r2, #0
 8001894:	9202      	str	r2, [sp, #8]
 8001896:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800189a:	9201      	str	r2, [sp, #4]
 800189c:	685a      	ldr	r2, [r3, #4]
 800189e:	9200      	str	r2, [sp, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a45      	ldr	r2, [pc, #276]	; (80019b8 <GAME_PLAY_Management+0x314>)
 80018a4:	2123      	movs	r1, #35	; 0x23
 80018a6:	2008      	movs	r0, #8
 80018a8:	f005 f8cf 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <GAME_PLAY_Management+0x310>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	9202      	str	r2, [sp, #8]
 80018b2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018b6:	9201      	str	r2, [sp, #4]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	9200      	str	r2, [sp, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a3f      	ldr	r2, [pc, #252]	; (80019bc <GAME_PLAY_Management+0x318>)
 80018c0:	213c      	movs	r1, #60	; 0x3c
 80018c2:	2014      	movs	r0, #20
 80018c4:	f005 f8c1 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018c8:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <GAME_PLAY_Management+0x304>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	9202      	str	r2, [sp, #8]
 80018ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d2:	9201      	str	r2, [sp, #4]
 80018d4:	685a      	ldr	r2, [r3, #4]
 80018d6:	9200      	str	r2, [sp, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a35      	ldr	r2, [pc, #212]	; (80019b0 <GAME_PLAY_Management+0x30c>)
 80018dc:	214b      	movs	r1, #75	; 0x4b
 80018de:	2000      	movs	r0, #0
 80018e0:	f005 f8b3 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018e4:	4b30      	ldr	r3, [pc, #192]	; (80019a8 <GAME_PLAY_Management+0x304>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	9202      	str	r2, [sp, #8]
 80018ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ee:	9201      	str	r2, [sp, #4]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	9200      	str	r2, [sp, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a32      	ldr	r2, [pc, #200]	; (80019c0 <GAME_PLAY_Management+0x31c>)
 80018f8:	215a      	movs	r1, #90	; 0x5a
 80018fa:	2000      	movs	r0, #0
 80018fc:	f005 f8a5 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001900:	4b29      	ldr	r3, [pc, #164]	; (80019a8 <GAME_PLAY_Management+0x304>)
 8001902:	2200      	movs	r2, #0
 8001904:	9202      	str	r2, [sp, #8]
 8001906:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800190a:	9201      	str	r2, [sp, #4]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2c      	ldr	r2, [pc, #176]	; (80019c4 <GAME_PLAY_Management+0x320>)
 8001914:	215a      	movs	r1, #90	; 0x5a
 8001916:	205d      	movs	r0, #93	; 0x5d
 8001918:	f005 f897 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800191c:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800191e:	2200      	movs	r2, #0
 8001920:	9202      	str	r2, [sp, #8]
 8001922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001926:	9201      	str	r2, [sp, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	9200      	str	r2, [sp, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a26      	ldr	r2, [pc, #152]	; (80019c8 <GAME_PLAY_Management+0x324>)
 8001930:	2169      	movs	r1, #105	; 0x69
 8001932:	2000      	movs	r0, #0
 8001934:	f005 f889 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <GAME_PLAY_Management+0x304>)
 800193a:	2200      	movs	r2, #0
 800193c:	9202      	str	r2, [sp, #8]
 800193e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001942:	9201      	str	r2, [sp, #4]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	9200      	str	r2, [sp, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a20      	ldr	r2, [pc, #128]	; (80019cc <GAME_PLAY_Management+0x328>)
 800194c:	2169      	movs	r1, #105	; 0x69
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f005 f87b 	bl	8006a4a <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8001954:	2108      	movs	r1, #8
 8001956:	481f      	ldr	r0, [pc, #124]	; (80019d4 <GAME_PLAY_Management+0x330>)
 8001958:	f008 fff0 	bl	800a93c <HAL_GPIO_ReadPin>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10a      	bne.n	8001978 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001962:	2000      	movs	r0, #0
 8001964:	f005 fa8e 	bl	8006e84 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001968:	2000      	movs	r0, #0
 800196a:	f005 fa9c 	bl	8006ea6 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8001976:	e1ab      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
			state_game->PlyerAction_State = PS_AFK;
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	2200      	movs	r2, #0
 800198c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8001998:	e19a      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
 800199a:	bf00      	nop
 800199c:	58020800 	.word	0x58020800
 80019a0:	58020400 	.word	0x58020400
 80019a4:	58021400 	.word	0x58021400
 80019a8:	2400000c 	.word	0x2400000c
 80019ac:	08010c04 	.word	0x08010c04
 80019b0:	08010c10 	.word	0x08010c10
 80019b4:	24000014 	.word	0x24000014
 80019b8:	08010c24 	.word	0x08010c24
 80019bc:	08010c30 	.word	0x08010c30
 80019c0:	08010c38 	.word	0x08010c38
 80019c4:	08010c48 	.word	0x08010c48
 80019c8:	08010c50 	.word	0x08010c50
 80019cc:	08010c60 	.word	0x08010c60
 80019d0:	08010c64 	.word	0x08010c64
 80019d4:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019d8:	4b96      	ldr	r3, [pc, #600]	; (8001c34 <GAME_PLAY_Management+0x590>)
 80019da:	2200      	movs	r2, #0
 80019dc:	9202      	str	r2, [sp, #8]
 80019de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	9200      	str	r2, [sp, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a93      	ldr	r2, [pc, #588]	; (8001c38 <GAME_PLAY_Management+0x594>)
 80019ec:	2105      	movs	r1, #5
 80019ee:	2005      	movs	r0, #5
 80019f0:	f004 ffe1 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80019f4:	4b8f      	ldr	r3, [pc, #572]	; (8001c34 <GAME_PLAY_Management+0x590>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	9202      	str	r2, [sp, #8]
 80019fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019fe:	9201      	str	r2, [sp, #4]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	9200      	str	r2, [sp, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a8d      	ldr	r2, [pc, #564]	; (8001c3c <GAME_PLAY_Management+0x598>)
 8001a08:	210f      	movs	r1, #15
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f004 ffd3 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001a10:	4b8b      	ldr	r3, [pc, #556]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	9202      	str	r2, [sp, #8]
 8001a16:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001a1a:	9201      	str	r2, [sp, #4]
 8001a1c:	685a      	ldr	r2, [r3, #4]
 8001a1e:	9200      	str	r2, [sp, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a88      	ldr	r2, [pc, #544]	; (8001c44 <GAME_PLAY_Management+0x5a0>)
 8001a24:	2123      	movs	r1, #35	; 0x23
 8001a26:	2019      	movs	r0, #25
 8001a28:	f004 ffc5 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001a2c:	4b84      	ldr	r3, [pc, #528]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	9202      	str	r2, [sp, #8]
 8001a32:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a36:	9201      	str	r2, [sp, #4]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	9200      	str	r2, [sp, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a82      	ldr	r2, [pc, #520]	; (8001c48 <GAME_PLAY_Management+0x5a4>)
 8001a40:	213c      	movs	r1, #60	; 0x3c
 8001a42:	2021      	movs	r0, #33	; 0x21
 8001a44:	f004 ffb7 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a48:	4b7a      	ldr	r3, [pc, #488]	; (8001c34 <GAME_PLAY_Management+0x590>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	9202      	str	r2, [sp, #8]
 8001a4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a52:	9201      	str	r2, [sp, #4]
 8001a54:	685a      	ldr	r2, [r3, #4]
 8001a56:	9200      	str	r2, [sp, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a78      	ldr	r2, [pc, #480]	; (8001c3c <GAME_PLAY_Management+0x598>)
 8001a5c:	214b      	movs	r1, #75	; 0x4b
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f004 ffa9 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a64:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <GAME_PLAY_Management+0x590>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	9202      	str	r2, [sp, #8]
 8001a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6e:	9201      	str	r2, [sp, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	9200      	str	r2, [sp, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a75      	ldr	r2, [pc, #468]	; (8001c4c <GAME_PLAY_Management+0x5a8>)
 8001a78:	2105      	movs	r1, #5
 8001a7a:	2005      	movs	r0, #5
 8001a7c:	f004 ffe5 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a80:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <GAME_PLAY_Management+0x590>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	9202      	str	r2, [sp, #8]
 8001a86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a8a:	9201      	str	r2, [sp, #4]
 8001a8c:	685a      	ldr	r2, [r3, #4]
 8001a8e:	9200      	str	r2, [sp, #0]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6a      	ldr	r2, [pc, #424]	; (8001c3c <GAME_PLAY_Management+0x598>)
 8001a94:	210f      	movs	r1, #15
 8001a96:	2000      	movs	r0, #0
 8001a98:	f004 ffd7 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001a9c:	4b68      	ldr	r3, [pc, #416]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	9202      	str	r2, [sp, #8]
 8001aa2:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001aa6:	9201      	str	r2, [sp, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	9200      	str	r2, [sp, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a65      	ldr	r2, [pc, #404]	; (8001c44 <GAME_PLAY_Management+0x5a0>)
 8001ab0:	2123      	movs	r1, #35	; 0x23
 8001ab2:	2019      	movs	r0, #25
 8001ab4:	f004 ffc9 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001ab8:	4b61      	ldr	r3, [pc, #388]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	9202      	str	r2, [sp, #8]
 8001abe:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a61      	ldr	r2, [pc, #388]	; (8001c50 <GAME_PLAY_Management+0x5ac>)
 8001acc:	213c      	movs	r1, #60	; 0x3c
 8001ace:	2025      	movs	r0, #37	; 0x25
 8001ad0:	f004 ffbb 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ad4:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <GAME_PLAY_Management+0x590>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	9202      	str	r2, [sp, #8]
 8001ada:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ade:	9201      	str	r2, [sp, #4]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	9200      	str	r2, [sp, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <GAME_PLAY_Management+0x598>)
 8001ae8:	214b      	movs	r1, #75	; 0x4b
 8001aea:	2000      	movs	r0, #0
 8001aec:	f004 ffad 	bl	8006a4a <ST7735_WriteString1>
		HAL_Delay(3000);
 8001af0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001af4:	f005 fdd4 	bl	80076a0 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f005 f9c3 	bl	8006e84 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f005 f9d1 	bl	8006ea6 <ST7735_FillScreen1>
		MainGUI();
 8001b04:	f003 fe38 	bl	8005778 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001b0e:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001b16:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8001b18:	69f8      	ldr	r0, [r7, #28]
 8001b1a:	f7ff fcb1 	bl	8001480 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8001b1e:	69b8      	ldr	r0, [r7, #24]
 8001b20:	f7ff fcae 	bl	8001480 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8001b34:	e0cc      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
	case first_player:
		if (state_game -> F_flag == 0){
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d12b      	bne.n	8001b98 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8001b40:	4b3f      	ldr	r3, [pc, #252]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	9202      	str	r2, [sp, #8]
 8001b46:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001b4a:	9201      	str	r2, [sp, #4]
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a40      	ldr	r2, [pc, #256]	; (8001c54 <GAME_PLAY_Management+0x5b0>)
 8001b54:	215a      	movs	r1, #90	; 0x5a
 8001b56:	200f      	movs	r0, #15
 8001b58:	f004 ff77 	bl	8006a4a <ST7735_WriteString1>
			HAL_Delay(2000);
 8001b5c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b60:	f005 fd9e 	bl	80076a0 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2326      	movs	r3, #38	; 0x26
 8001b6a:	2280      	movs	r2, #128	; 0x80
 8001b6c:	215a      	movs	r1, #90	; 0x5a
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f005 f88a 	bl	8006c88 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <GAME_PLAY_Management+0x5b4>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	3301      	adds	r3, #1
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <GAME_PLAY_Management+0x5b4>)
 8001b96:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	3304      	adds	r3, #4
 8001b9c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001ba4:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	6839      	ldr	r1, [r7, #0]
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 f899 	bl	8001ce4 <GAME_PLAY_Phase_Management>
		break;
 8001bb2:	e08d      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
	case second_player:
		if (state_game -> S_flag == 0){
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d12b      	bne.n	8001c16 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8001bbe:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <GAME_PLAY_Management+0x59c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	9202      	str	r2, [sp, #8]
 8001bc4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <GAME_PLAY_Management+0x5b0>)
 8001bd2:	215a      	movs	r1, #90	; 0x5a
 8001bd4:	200f      	movs	r0, #15
 8001bd6:	f004 feee 	bl	80069b6 <ST7735_WriteString>
			HAL_Delay(2000);
 8001bda:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001bde:	f005 fd5f 	bl	80076a0 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8001be2:	2300      	movs	r3, #0
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2326      	movs	r3, #38	; 0x26
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	215a      	movs	r1, #90	; 0x5a
 8001bec:	2000      	movs	r0, #0
 8001bee:	f004 ffd7 	bl	8006ba0 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <GAME_PLAY_Management+0x5b4>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <GAME_PLAY_Management+0x5b4>)
 8001c14:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001c1c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3304      	adds	r3, #4
 8001c22:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f85a 	bl	8001ce4 <GAME_PLAY_Phase_Management>
		break;
 8001c30:	e04e      	b.n	8001cd0 <GAME_PLAY_Management+0x62c>
 8001c32:	bf00      	nop
 8001c34:	2400000c 	.word	0x2400000c
 8001c38:	08010c04 	.word	0x08010c04
 8001c3c:	08010c10 	.word	0x08010c10
 8001c40:	24000014 	.word	0x24000014
 8001c44:	08010c70 	.word	0x08010c70
 8001c48:	08010c78 	.word	0x08010c78
 8001c4c:	08010c64 	.word	0x08010c64
 8001c50:	08010c80 	.word	0x08010c80
 8001c54:	08010c88 	.word	0x08010c88
 8001c58:	24000176 	.word	0x24000176
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	2300      	movs	r3, #0
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	2326      	movs	r3, #38	; 0x26
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	215a      	movs	r1, #90	; 0x5a
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f005 f880 	bl	8006d70 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8001c70:	2300      	movs	r3, #0
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	2300      	movs	r3, #0
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2326      	movs	r3, #38	; 0x26
 8001c7a:	2280      	movs	r2, #128	; 0x80
 8001c7c:	215a      	movs	r1, #90	; 0x5a
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f005 f876 	bl	8006d70 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8001c84:	20c8      	movs	r0, #200	; 0xc8
 8001c86:	f005 fd0b 	bl	80076a0 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <GAME_PLAY_Management+0x634>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	9203      	str	r2, [sp, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	9202      	str	r2, [sp, #8]
 8001c94:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001c98:	9201      	str	r2, [sp, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	9200      	str	r2, [sp, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0e      	ldr	r2, [pc, #56]	; (8001cdc <GAME_PLAY_Management+0x638>)
 8001ca2:	215a      	movs	r1, #90	; 0x5a
 8001ca4:	2014      	movs	r0, #20
 8001ca6:	f004 ff1a 	bl	8006ade <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <GAME_PLAY_Management+0x634>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	9203      	str	r2, [sp, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	9202      	str	r2, [sp, #8]
 8001cb4:	221f      	movs	r2, #31
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	9200      	str	r2, [sp, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <GAME_PLAY_Management+0x63c>)
 8001cc0:	215a      	movs	r1, #90	; 0x5a
 8001cc2:	200f      	movs	r0, #15
 8001cc4:	f004 ff0b 	bl	8006ade <ST7735_WriteStringNSS>
		HAL_Delay(200);
 8001cc8:	20c8      	movs	r0, #200	; 0xc8
 8001cca:	f005 fce9 	bl	80076a0 <HAL_Delay>
		break;
 8001cce:	bf00      	nop
	}
}
 8001cd0:	bf00      	nop
 8001cd2:	3720      	adds	r7, #32
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	24000014 	.word	0x24000014
 8001cdc:	08010c94 	.word	0x08010c94
 8001ce0:	08010c9c 	.word	0x08010c9c

08001ce4 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 8001cea:	af04      	add	r7, sp, #16
 8001cec:	f507 7418 	add.w	r4, r7, #608	; 0x260
 8001cf0:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 8001cf4:	6020      	str	r0, [r4, #0]
 8001cf6:	f507 7018 	add.w	r0, r7, #608	; 0x260
 8001cfa:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 8001cfe:	6001      	str	r1, [r0, #0]
 8001d00:	f507 7118 	add.w	r1, r7, #608	; 0x260
 8001d04:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 8001d08:	600a      	str	r2, [r1, #0]
 8001d0a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8001d0e:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8001d12:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 8001d14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d18:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8001d22:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8001d26:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d2a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 8001d34:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 8001d38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d3c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 8001d46:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 8001d4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d4e:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d52:	4618      	mov	r0, r3
 8001d54:	f44f 7307 	mov.w	r3, #540	; 0x21c
 8001d58:	461a      	mov	r2, r3
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	f00e fad0 	bl	8010300 <memset>

	switch (PAS) {
 8001d60:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	f203 82e8 	bhi.w	800533a <GAME_PLAY_Phase_Management+0x3656>
 8001d6a:	a201      	add	r2, pc, #4	; (adr r2, 8001d70 <GAME_PLAY_Phase_Management+0x8c>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	0800532d 	.word	0x0800532d
 8001d74:	08001d81 	.word	0x08001d81
 8001d78:	08001ed9 	.word	0x08001ed9
 8001d7c:	08003ed7 	.word	0x08003ed7
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 8001d80:	48b5      	ldr	r0, [pc, #724]	; (8002058 <GAME_PLAY_Phase_Management+0x374>)
 8001d82:	f00b ff61 	bl	800dc48 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 8001d86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d8a:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8001d8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001d92:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001d96:	6811      	ldr	r1, [r2, #0]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	f003 fdad 	bl	80058f8 <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001d9e:	4baf      	ldr	r3, [pc, #700]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	9202      	str	r2, [sp, #8]
 8001da4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001da8:	9201      	str	r2, [sp, #4]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	9200      	str	r2, [sp, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4aab      	ldr	r2, [pc, #684]	; (8002060 <GAME_PLAY_Phase_Management+0x37c>)
 8001db2:	2123      	movs	r1, #35	; 0x23
 8001db4:	206e      	movs	r0, #110	; 0x6e
 8001db6:	f004 fdfe 	bl	80069b6 <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001dba:	4ba8      	ldr	r3, [pc, #672]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	9202      	str	r2, [sp, #8]
 8001dc0:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001dc4:	9201      	str	r2, [sp, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	9200      	str	r2, [sp, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4aa4      	ldr	r2, [pc, #656]	; (8002060 <GAME_PLAY_Phase_Management+0x37c>)
 8001dce:	2123      	movs	r1, #35	; 0x23
 8001dd0:	206e      	movs	r0, #110	; 0x6e
 8001dd2:	f004 fe3a 	bl	8006a4a <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001dd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001dda:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	4b9e      	ldr	r3, [pc, #632]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001de4:	9203      	str	r2, [sp, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	9202      	str	r2, [sp, #8]
 8001dea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dee:	9201      	str	r2, [sp, #4]
 8001df0:	685a      	ldr	r2, [r3, #4]
 8001df2:	9200      	str	r2, [sp, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a9b      	ldr	r2, [pc, #620]	; (8002064 <GAME_PLAY_Phase_Management+0x380>)
 8001df8:	215a      	movs	r1, #90	; 0x5a
 8001dfa:	2005      	movs	r0, #5
 8001dfc:	f004 fe6f 	bl	8006ade <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001e00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e04:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	781a      	ldrb	r2, [r3, #0]
 8001e0c:	4b93      	ldr	r3, [pc, #588]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001e0e:	9203      	str	r2, [sp, #12]
 8001e10:	2200      	movs	r2, #0
 8001e12:	9202      	str	r2, [sp, #8]
 8001e14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e18:	9201      	str	r2, [sp, #4]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	9200      	str	r2, [sp, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a91      	ldr	r2, [pc, #580]	; (8002068 <GAME_PLAY_Phase_Management+0x384>)
 8001e22:	215a      	movs	r1, #90	; 0x5a
 8001e24:	2005      	movs	r0, #5
 8001e26:	f004 fe5a 	bl	8006ade <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	488f      	ldr	r0, [pc, #572]	; (800206c <GAME_PLAY_Phase_Management+0x388>)
 8001e2e:	f008 fd85 	bl	800a93c <HAL_GPIO_ReadPin>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f043 827b 	bne.w	8005330 <GAME_PLAY_Phase_Management+0x364c>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f005 f822 	bl	8006e84 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f005 f830 	bl	8006ea6 <ST7735_FillScreen1>
			MainGUI();
 8001e46:	f003 fc97 	bl	8005778 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8001e4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2202      	movs	r2, #2
 8001e56:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001e5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e5e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2201      	movs	r2, #1
 8001e66:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8001e6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 8001e78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e7c:	f005 fc10 	bl	80076a0 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001e84:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	781a      	ldrb	r2, [r3, #0]
 8001e8c:	4b73      	ldr	r3, [pc, #460]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001e8e:	9203      	str	r2, [sp, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	9202      	str	r2, [sp, #8]
 8001e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e98:	9201      	str	r2, [sp, #4]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	9200      	str	r2, [sp, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a70      	ldr	r2, [pc, #448]	; (8002064 <GAME_PLAY_Phase_Management+0x380>)
 8001ea2:	215a      	movs	r1, #90	; 0x5a
 8001ea4:	2005      	movs	r0, #5
 8001ea6:	f004 fe1a 	bl	8006ade <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001eaa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001eae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	781a      	ldrb	r2, [r3, #0]
 8001eb6:	4b69      	ldr	r3, [pc, #420]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001eb8:	9203      	str	r2, [sp, #12]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	9202      	str	r2, [sp, #8]
 8001ebe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ec2:	9201      	str	r2, [sp, #4]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	9200      	str	r2, [sp, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a69      	ldr	r2, [pc, #420]	; (8002070 <GAME_PLAY_Phase_Management+0x38c>)
 8001ecc:	215a      	movs	r1, #90	; 0x5a
 8001ece:	2005      	movs	r0, #5
 8001ed0:	f004 fe05 	bl	8006ade <ST7735_WriteStringNSS>
		}
		break;
 8001ed4:	f003 ba2c 	b.w	8005330 <GAME_PLAY_Phase_Management+0x364c>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8001ed8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001edc:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8001ee0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001ee4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001ee8:	6811      	ldr	r1, [r2, #0]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	f003 fd04 	bl	80058f8 <LCDvalue>

		switch (PMS)
 8001ef0:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8001ef4:	2b07      	cmp	r3, #7
 8001ef6:	f203 821d 	bhi.w	8005334 <GAME_PLAY_Phase_Management+0x3650>
 8001efa:	a201      	add	r2, pc, #4	; (adr r2, 8001f00 <GAME_PLAY_Phase_Management+0x21c>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08003ead 	.word	0x08003ead
 8001f04:	08001f21 	.word	0x08001f21
 8001f08:	080020d5 	.word	0x080020d5
 8001f0c:	0800223f 	.word	0x0800223f
 8001f10:	080027c5 	.word	0x080027c5
 8001f14:	08002e81 	.word	0x08002e81
 8001f18:	08002c71 	.word	0x08002c71
 8001f1c:	08002a57 	.word	0x08002a57
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 8001f20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f24:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	f040 80a7 	bne.w	8002080 <GAME_PLAY_Phase_Management+0x39c>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001f32:	4b4a      	ldr	r3, [pc, #296]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	9202      	str	r2, [sp, #8]
 8001f38:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f3c:	9201      	str	r2, [sp, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	9200      	str	r2, [sp, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a4b      	ldr	r2, [pc, #300]	; (8002074 <GAME_PLAY_Phase_Management+0x390>)
 8001f46:	2123      	movs	r1, #35	; 0x23
 8001f48:	206e      	movs	r0, #110	; 0x6e
 8001f4a:	f004 fd34 	bl	80069b6 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001f4e:	4b43      	ldr	r3, [pc, #268]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	9202      	str	r2, [sp, #8]
 8001f54:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f58:	9201      	str	r2, [sp, #4]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	9200      	str	r2, [sp, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a44      	ldr	r2, [pc, #272]	; (8002074 <GAME_PLAY_Phase_Management+0x390>)
 8001f62:	2123      	movs	r1, #35	; 0x23
 8001f64:	206e      	movs	r0, #110	; 0x6e
 8001f66:	f004 fd70 	bl	8006a4a <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	483f      	ldr	r0, [pc, #252]	; (800206c <GAME_PLAY_Phase_Management+0x388>)
 8001f6e:	f008 fce5 	bl	800a93c <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d15b      	bne.n	8002030 <GAME_PLAY_Phase_Management+0x34c>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f004 ff83 	bl	8006e84 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f004 ff91 	bl	8006ea6 <ST7735_FillScreen1>
					MainGUI();
 8001f84:	f003 fbf8 	bl	8005778 <MainGUI>
					state_game->action = 50;
 8001f88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f8c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2232      	movs	r2, #50	; 0x32
 8001f94:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001f96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001f9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 8001fa6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001faa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	f003 fbc1 	bl	8005736 <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 8001fb4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fb8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2203      	movs	r2, #3
 8001fc0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001fc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 8001fd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001fd8:	f005 fb62 	bl	80076a0 <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001fdc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8001fe0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	781a      	ldrb	r2, [r3, #0]
 8001fe8:	4b1c      	ldr	r3, [pc, #112]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8001fea:	9203      	str	r2, [sp, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	9202      	str	r2, [sp, #8]
 8001ff0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ff4:	9201      	str	r2, [sp, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	9200      	str	r2, [sp, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1e      	ldr	r2, [pc, #120]	; (8002078 <GAME_PLAY_Phase_Management+0x394>)
 8001ffe:	215a      	movs	r1, #90	; 0x5a
 8002000:	2005      	movs	r0, #5
 8002002:	f004 fd6c 	bl	8006ade <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8002006:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800200a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	781a      	ldrb	r2, [r3, #0]
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <GAME_PLAY_Phase_Management+0x378>)
 8002014:	9203      	str	r2, [sp, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	9202      	str	r2, [sp, #8]
 800201a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800201e:	9201      	str	r2, [sp, #4]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	9200      	str	r2, [sp, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a15      	ldr	r2, [pc, #84]	; (800207c <GAME_PLAY_Phase_Management+0x398>)
 8002028:	215a      	movs	r1, #90	; 0x5a
 800202a:	2005      	movs	r0, #5
 800202c:	f004 fd57 	bl	8006ade <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8002030:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002034:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002038:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800203c:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002040:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002044:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002048:	6812      	ldr	r2, [r2, #0]
 800204a:	6809      	ldr	r1, [r1, #0]
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	f7fe fb81 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8002052:	f001 bf2e 	b.w	8003eb2 <GAME_PLAY_Phase_Management+0x21ce>
 8002056:	bf00      	nop
 8002058:	240002e8 	.word	0x240002e8
 800205c:	2400000c 	.word	0x2400000c
 8002060:	08010ca8 	.word	0x08010ca8
 8002064:	08010cac 	.word	0x08010cac
 8002068:	08010cbc 	.word	0x08010cbc
 800206c:	58020800 	.word	0x58020800
 8002070:	08010cc8 	.word	0x08010cc8
 8002074:	08010cd8 	.word	0x08010cd8
 8002078:	08010cdc 	.word	0x08010cdc
 800207c:	08010cec 	.word	0x08010cec
			else if (state_game->action == 1)
 8002080:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002084:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	f041 8710 	bne.w	8003eb2 <GAME_PLAY_Phase_Management+0x21ce>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002092:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002096:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	9301      	str	r3, [sp, #4]
 80020a0:	2300      	movs	r3, #0
 80020a2:	9300      	str	r3, [sp, #0]
 80020a4:	2326      	movs	r3, #38	; 0x26
 80020a6:	2280      	movs	r2, #128	; 0x80
 80020a8:	215a      	movs	r1, #90	; 0x5a
 80020aa:	2000      	movs	r0, #0
 80020ac:	f004 fe60 	bl	8006d70 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 80020b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 80020c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2202      	movs	r2, #2
 80020cc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80020d0:	f001 beef 	b.w	8003eb2 <GAME_PLAY_Phase_Management+0x21ce>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80020d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80020d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	781a      	ldrb	r2, [r3, #0]
 80020e0:	4ba6      	ldr	r3, [pc, #664]	; (800237c <GAME_PLAY_Phase_Management+0x698>)
 80020e2:	9203      	str	r2, [sp, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	9202      	str	r2, [sp, #8]
 80020e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ec:	9201      	str	r2, [sp, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	9200      	str	r2, [sp, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4aa2      	ldr	r2, [pc, #648]	; (8002380 <GAME_PLAY_Phase_Management+0x69c>)
 80020f6:	215a      	movs	r1, #90	; 0x5a
 80020f8:	2005      	movs	r0, #5
 80020fa:	f004 fcf0 	bl	8006ade <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80020fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002102:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800210c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8002110:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002114:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800211e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8002122:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002126:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d147      	bne.n	80021c2 <GAME_PLAY_Phase_Management+0x4de>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8002132:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002136:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	789b      	ldrb	r3, [r3, #2]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d10c      	bne.n	800215c <GAME_PLAY_Phase_Management+0x478>
					ptrYugiohCard_src->cardState = 0;
 8002142:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002146:	2200      	movs	r2, #0
 8002148:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 800214a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800214e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2202      	movs	r2, #2
 8002156:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8002158:	f001 beae 	b.w	8003eb8 <GAME_PLAY_Phase_Management+0x21d4>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 800215c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002160:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	785b      	ldrb	r3, [r3, #1]
 8002168:	2b00      	cmp	r3, #0
 800216a:	f041 86a5 	bne.w	8003eb8 <GAME_PLAY_Phase_Management+0x21d4>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 800216e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002172:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002176:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	f003 fa8e 	bl	800569c <YUGIOH_Check_Spell_On_board>
 8002180:	4603      	mov	r3, r0
 8002182:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
					if (idxC != 255) {
 8002186:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 800218a:	2bff      	cmp	r3, #255	; 0xff
 800218c:	d00c      	beq.n	80021a8 <GAME_PLAY_Phase_Management+0x4c4>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 800218e:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002192:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002196:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800219a:	011b      	lsls	r3, r3, #4
 800219c:	3308      	adds	r3, #8
 800219e:	6812      	ldr	r2, [r2, #0]
 80021a0:	4413      	add	r3, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7fe faa5 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 80021a8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80021ac:	2201      	movs	r2, #1
 80021ae:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 80021b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2202      	movs	r2, #2
 80021bc:	701a      	strb	r2, [r3, #0]
			break;
 80021be:	f001 be7b 	b.w	8003eb8 <GAME_PLAY_Phase_Management+0x21d4>
			else if (state_game->action == 2)
 80021c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	f041 8672 	bne.w	8003eb8 <GAME_PLAY_Phase_Management+0x21d4>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80021d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2326      	movs	r3, #38	; 0x26
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	215a      	movs	r1, #90	; 0x5a
 80021ec:	2000      	movs	r0, #0
 80021ee:	f004 fdbf 	bl	8006d70 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80021f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80021f6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	2300      	movs	r3, #0
 8002202:	9300      	str	r3, [sp, #0]
 8002204:	2326      	movs	r3, #38	; 0x26
 8002206:	2280      	movs	r2, #128	; 0x80
 8002208:	215a      	movs	r1, #90	; 0x5a
 800220a:	2000      	movs	r0, #0
 800220c:	f004 fdb0 	bl	8006d70 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002210:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002214:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002218:	f7fe fa34 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 800221c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002220:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2203      	movs	r2, #3
 8002228:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 800222a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800222e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800223a:	f001 be3d 	b.w	8003eb8 <GAME_PLAY_Phase_Management+0x21d4>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 800223e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002242:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800224c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 3)
 8002250:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002254:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b03      	cmp	r3, #3
 800225e:	f041 862e 	bne.w	8003ebe <GAME_PLAY_Phase_Management+0x21da>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8002262:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002266:	785b      	ldrb	r3, [r3, #1]
 8002268:	2b03      	cmp	r3, #3
 800226a:	f040 8093 	bne.w	8002394 <GAME_PLAY_Phase_Management+0x6b0>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800226e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002272:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	781a      	ldrb	r2, [r3, #0]
 800227a:	4b40      	ldr	r3, [pc, #256]	; (800237c <GAME_PLAY_Phase_Management+0x698>)
 800227c:	9203      	str	r2, [sp, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	9202      	str	r2, [sp, #8]
 8002282:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002286:	9201      	str	r2, [sp, #4]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	9200      	str	r2, [sp, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a3d      	ldr	r2, [pc, #244]	; (8002384 <GAME_PLAY_Phase_Management+0x6a0>)
 8002290:	215a      	movs	r1, #90	; 0x5a
 8002292:	2005      	movs	r0, #5
 8002294:	f004 fc23 	bl	8006ade <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002298:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800229c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	781a      	ldrb	r2, [r3, #0]
 80022a4:	4b35      	ldr	r3, [pc, #212]	; (800237c <GAME_PLAY_Phase_Management+0x698>)
 80022a6:	9203      	str	r2, [sp, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	9202      	str	r2, [sp, #8]
 80022ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b0:	9201      	str	r2, [sp, #4]
 80022b2:	685a      	ldr	r2, [r3, #4]
 80022b4:	9200      	str	r2, [sp, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a33      	ldr	r2, [pc, #204]	; (8002388 <GAME_PLAY_Phase_Management+0x6a4>)
 80022ba:	215a      	movs	r1, #90	; 0x5a
 80022bc:	2005      	movs	r0, #5
 80022be:	f004 fc0e 	bl	8006ade <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80022c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80022c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	781a      	ldrb	r2, [r3, #0]
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <GAME_PLAY_Phase_Management+0x698>)
 80022d0:	9203      	str	r2, [sp, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	9202      	str	r2, [sp, #8]
 80022d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022da:	9201      	str	r2, [sp, #4]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	9200      	str	r2, [sp, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a2a      	ldr	r2, [pc, #168]	; (800238c <GAME_PLAY_Phase_Management+0x6a8>)
 80022e4:	2169      	movs	r1, #105	; 0x69
 80022e6:	2005      	movs	r0, #5
 80022e8:	f004 fbf9 	bl	8006ade <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 80022ec:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80022f0:	2200      	movs	r2, #0
 80022f2:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80022f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80022f8:	799a      	ldrb	r2, [r3, #6]
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <GAME_PLAY_Phase_Management+0x6ac>)
 80022fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002300:	0899      	lsrs	r1, r3, #2
 8002302:	460b      	mov	r3, r1
 8002304:	005b      	lsls	r3, r3, #1
 8002306:	440b      	add	r3, r1
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002310:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8002314:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002318:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800231c:	011b      	lsls	r3, r3, #4
 800231e:	3308      	adds	r3, #8
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	4413      	add	r3, r2
 8002324:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002328:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800232c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002330:	f7fe f9a8 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002334:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002338:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	f7ff f879 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002342:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002346:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002350:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe f995 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 800235a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800235e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002368:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800236c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8002378:	f001 bda1 	b.w	8003ebe <GAME_PLAY_Phase_Management+0x21da>
 800237c:	2400000c 	.word	0x2400000c
 8002380:	08010cfc 	.word	0x08010cfc
 8002384:	08010d0c 	.word	0x08010d0c
 8002388:	08010d1c 	.word	0x08010d1c
 800238c:	08010d2c 	.word	0x08010d2c
 8002390:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 2)
 8002394:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002398:	785b      	ldrb	r3, [r3, #1]
 800239a:	2b02      	cmp	r3, #2
 800239c:	f040 8146 	bne.w	800262c <GAME_PLAY_Phase_Management+0x948>
					state_game->count_chain = 1;
 80023a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 80023ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80023b2:	789b      	ldrb	r3, [r3, #2]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	f040 80a7 	bne.w	8002508 <GAME_PLAY_Phase_Management+0x824>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80023ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	781a      	ldrb	r2, [r3, #0]
 80023c6:	4b92      	ldr	r3, [pc, #584]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 80023c8:	9203      	str	r2, [sp, #12]
 80023ca:	2200      	movs	r2, #0
 80023cc:	9202      	str	r2, [sp, #8]
 80023ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023d2:	9201      	str	r2, [sp, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	9200      	str	r2, [sp, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a8e      	ldr	r2, [pc, #568]	; (8002614 <GAME_PLAY_Phase_Management+0x930>)
 80023dc:	215a      	movs	r1, #90	; 0x5a
 80023de:	2005      	movs	r0, #5
 80023e0:	f004 fb7d 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80023e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80023e8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	781a      	ldrb	r2, [r3, #0]
 80023f0:	4b87      	ldr	r3, [pc, #540]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 80023f2:	9203      	str	r2, [sp, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	9202      	str	r2, [sp, #8]
 80023f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023fc:	9201      	str	r2, [sp, #4]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	9200      	str	r2, [sp, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a84      	ldr	r2, [pc, #528]	; (8002618 <GAME_PLAY_Phase_Management+0x934>)
 8002406:	215a      	movs	r1, #90	; 0x5a
 8002408:	2005      	movs	r0, #5
 800240a:	f004 fb68 	bl	8006ade <ST7735_WriteStringNSS>
						state_game->action = 4;
 800240e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002412:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2204      	movs	r2, #4
 800241a:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800241c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002420:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002424:	6818      	ldr	r0, [r3, #0]
 8002426:	f7ff f8b0 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800242a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800242e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002438:	4619      	mov	r1, r3
 800243a:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800243e:	f7fe f921 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8002442:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002446:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002450:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002454:	6812      	ldr	r2, [r2, #0]
 8002456:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 800245a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800245e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002468:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8002472:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002476:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002480:	3301      	adds	r3, #1
 8002482:	b2da      	uxtb	r2, r3
 8002484:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002488:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002492:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002496:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2300      	movs	r3, #0
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	2326      	movs	r3, #38	; 0x26
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	215a      	movs	r1, #90	; 0x5a
 80024aa:	2000      	movs	r0, #0
 80024ac:	f004 fc60 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80024b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024b4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	9301      	str	r3, [sp, #4]
 80024be:	2300      	movs	r3, #0
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	2326      	movs	r3, #38	; 0x26
 80024c4:	2280      	movs	r2, #128	; 0x80
 80024c6:	215a      	movs	r1, #90	; 0x5a
 80024c8:	2000      	movs	r0, #0
 80024ca:	f004 fc51 	bl	8006d70 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80024ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024d2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024d6:	6818      	ldr	r0, [r3, #0]
 80024d8:	f7fe ffac 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80024dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80024ea:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f8c8 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 80024f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80024f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2207      	movs	r2, #7
 8002500:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002504:	f001 bcdb 	b.w	8003ebe <GAME_PLAY_Phase_Management+0x21da>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002508:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800250c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	781a      	ldrb	r2, [r3, #0]
 8002514:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 8002516:	9203      	str	r2, [sp, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	9202      	str	r2, [sp, #8]
 800251c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	9200      	str	r2, [sp, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a3c      	ldr	r2, [pc, #240]	; (800261c <GAME_PLAY_Phase_Management+0x938>)
 800252a:	215a      	movs	r1, #90	; 0x5a
 800252c:	2005      	movs	r0, #5
 800252e:	f004 fad6 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002532:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002536:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	781a      	ldrb	r2, [r3, #0]
 800253e:	4b34      	ldr	r3, [pc, #208]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 8002540:	9203      	str	r2, [sp, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	9202      	str	r2, [sp, #8]
 8002546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254a:	9201      	str	r2, [sp, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	9200      	str	r2, [sp, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a33      	ldr	r2, [pc, #204]	; (8002620 <GAME_PLAY_Phase_Management+0x93c>)
 8002554:	215a      	movs	r1, #90	; 0x5a
 8002556:	2005      	movs	r0, #5
 8002558:	f004 fac1 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800255c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002560:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	781a      	ldrb	r2, [r3, #0]
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <GAME_PLAY_Phase_Management+0x92c>)
 800256a:	9203      	str	r2, [sp, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	9202      	str	r2, [sp, #8]
 8002570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002574:	9201      	str	r2, [sp, #4]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	9200      	str	r2, [sp, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a29      	ldr	r2, [pc, #164]	; (8002624 <GAME_PLAY_Phase_Management+0x940>)
 800257e:	2169      	movs	r1, #105	; 0x69
 8002580:	2005      	movs	r0, #5
 8002582:	f004 faac 	bl	8006ade <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002586:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800258a:	799a      	ldrb	r2, [r3, #6]
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <GAME_PLAY_Phase_Management+0x944>)
 800258e:	fba3 1302 	umull	r1, r3, r3, r2
 8002592:	0899      	lsrs	r1, r3, #2
 8002594:	460b      	mov	r3, r1
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	440b      	add	r3, r1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80025a2:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 80025a6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80025aa:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	3308      	adds	r3, #8
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	4413      	add	r3, r2
 80025b6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80025ba:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80025be:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80025c2:	f7fe f85f 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80025c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f7fe ff30 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80025d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80025e2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe f84c 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80025ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80025fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80025fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2201      	movs	r2, #1
 8002606:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800260a:	f001 bc58 	b.w	8003ebe <GAME_PLAY_Phase_Management+0x21da>
 800260e:	bf00      	nop
 8002610:	2400000c 	.word	0x2400000c
 8002614:	08010d34 	.word	0x08010d34
 8002618:	08010d4c 	.word	0x08010d4c
 800261c:	08010d0c 	.word	0x08010d0c
 8002620:	08010d1c 	.word	0x08010d1c
 8002624:	08010d2c 	.word	0x08010d2c
 8002628:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 800262c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002630:	785b      	ldrb	r3, [r3, #1]
 8002632:	2b01      	cmp	r3, #1
 8002634:	f041 8443 	bne.w	8003ebe <GAME_PLAY_Phase_Management+0x21da>
					state_game->test = 2;
 8002638:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800263c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 8002648:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800264c:	78db      	ldrb	r3, [r3, #3]
 800264e:	2b06      	cmp	r3, #6
 8002650:	f200 80a0 	bhi.w	8002794 <GAME_PLAY_Phase_Management+0xab0>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002654:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002658:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	781a      	ldrb	r2, [r3, #0]
 8002660:	4bc0      	ldr	r3, [pc, #768]	; (8002964 <GAME_PLAY_Phase_Management+0xc80>)
 8002662:	9203      	str	r2, [sp, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	9202      	str	r2, [sp, #8]
 8002668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800266c:	9201      	str	r2, [sp, #4]
 800266e:	685a      	ldr	r2, [r3, #4]
 8002670:	9200      	str	r2, [sp, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4abc      	ldr	r2, [pc, #752]	; (8002968 <GAME_PLAY_Phase_Management+0xc84>)
 8002676:	215a      	movs	r1, #90	; 0x5a
 8002678:	2005      	movs	r0, #5
 800267a:	f004 fa30 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800267e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002682:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	781a      	ldrb	r2, [r3, #0]
 800268a:	4bb6      	ldr	r3, [pc, #728]	; (8002964 <GAME_PLAY_Phase_Management+0xc80>)
 800268c:	9203      	str	r2, [sp, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	9202      	str	r2, [sp, #8]
 8002692:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002696:	9201      	str	r2, [sp, #4]
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	9200      	str	r2, [sp, #0]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4ab3      	ldr	r2, [pc, #716]	; (800296c <GAME_PLAY_Phase_Management+0xc88>)
 80026a0:	2169      	movs	r1, #105	; 0x69
 80026a2:	2005      	movs	r0, #5
 80026a4:	f004 fa1b 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80026a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026ac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	781a      	ldrb	r2, [r3, #0]
 80026b4:	4bab      	ldr	r3, [pc, #684]	; (8002964 <GAME_PLAY_Phase_Management+0xc80>)
 80026b6:	9203      	str	r2, [sp, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	9202      	str	r2, [sp, #8]
 80026bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026c0:	9201      	str	r2, [sp, #4]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	9200      	str	r2, [sp, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4aa9      	ldr	r2, [pc, #676]	; (8002970 <GAME_PLAY_Phase_Management+0xc8c>)
 80026ca:	215a      	movs	r1, #90	; 0x5a
 80026cc:	2005      	movs	r0, #5
 80026ce:	f004 fa06 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80026d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026d6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	4ba1      	ldr	r3, [pc, #644]	; (8002964 <GAME_PLAY_Phase_Management+0xc80>)
 80026e0:	9203      	str	r2, [sp, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	9202      	str	r2, [sp, #8]
 80026e6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80026ea:	9201      	str	r2, [sp, #4]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	9200      	str	r2, [sp, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a9e      	ldr	r2, [pc, #632]	; (800296c <GAME_PLAY_Phase_Management+0xc88>)
 80026f4:	2169      	movs	r1, #105	; 0x69
 80026f6:	2005      	movs	r0, #5
 80026f8:	f004 f9f1 	bl	8006ade <ST7735_WriteStringNSS>
						state_game->test = 1;
 80026fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002700:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800270c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002710:	799a      	ldrb	r2, [r3, #6]
 8002712:	4b98      	ldr	r3, [pc, #608]	; (8002974 <GAME_PLAY_Phase_Management+0xc90>)
 8002714:	fba3 1302 	umull	r1, r3, r3, r2
 8002718:	0899      	lsrs	r1, r3, #2
 800271a:	460b      	mov	r3, r1
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	440b      	add	r3, r1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002728:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 800272c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002730:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002734:	011b      	lsls	r3, r3, #4
 8002736:	3308      	adds	r3, #8
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	4413      	add	r3, r2
 800273c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002740:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002744:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002748:	f7fd ff9c 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800274c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002750:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	f7fe fe6d 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800275a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800275e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002768:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800276c:	4618      	mov	r0, r3
 800276e:	f7fd ff89 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8002772:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002776:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002780:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002784:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002790:	f001 bb95 	b.w	8003ebe <GAME_PLAY_Phase_Management+0x21da>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002794:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002798:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	f7fe fe49 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 80027a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2204      	movs	r2, #4
 80027ae:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 80027b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2204      	movs	r2, #4
 80027bc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80027c0:	f001 bb7d 	b.w	8003ebe <GAME_PLAY_Phase_Management+0x21da>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80027c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80027d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 4)
 80027d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	781b      	ldrb	r3, [r3, #0]
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d111      	bne.n	800280a <GAME_PLAY_Phase_Management+0xb26>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 80027e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027ea:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80027ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027f2:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80027f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027fa:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80027fe:	6812      	ldr	r2, [r2, #0]
 8002800:	6809      	ldr	r1, [r1, #0]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	f7fe f8b6 	bl	8000974 <Player_Reading_Card_Monster_SPS>
 8002808:	e0cf      	b.n	80029aa <GAME_PLAY_Phase_Management+0xcc6>
			}
			else if (state_game->action == 5)
 800280a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800280e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b05      	cmp	r3, #5
 8002818:	d111      	bne.n	800283e <GAME_PLAY_Phase_Management+0xb5a>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 800281a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800281e:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002822:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002826:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800282a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800282e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	6809      	ldr	r1, [r1, #0]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	f7fe f89c 	bl	8000974 <Player_Reading_Card_Monster_SPS>
 800283c:	e0b5      	b.n	80029aa <GAME_PLAY_Phase_Management+0xcc6>
			}
			else if (state_game->action == 6)
 800283e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002842:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b06      	cmp	r3, #6
 800284c:	f040 80ad 	bne.w	80029aa <GAME_PLAY_Phase_Management+0xcc6>
			{
				uint8_t monsterflag = 0 ;
 8002850:	2300      	movs	r3, #0
 8002852:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8002856:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800285a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002864:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8002868:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800286c:	78db      	ldrb	r3, [r3, #3]
 800286e:	2b04      	cmp	r3, #4
 8002870:	d804      	bhi.n	800287c <GAME_PLAY_Phase_Management+0xb98>
				{
					monsterflag += 1;
 8002872:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8002876:	3301      	adds	r3, #1
 8002878:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}
				ptrYugiohCard_dst++;
 800287c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002880:	3310      	adds	r3, #16
 8002882:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8002886:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800288a:	78db      	ldrb	r3, [r3, #3]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d804      	bhi.n	800289a <GAME_PLAY_Phase_Management+0xbb6>
				{
					monsterflag += 1;
 8002890:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 8002894:	3301      	adds	r3, #1
 8002896:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}

				if (monsterflag == 2)
 800289a:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d16a      	bne.n	8002978 <GAME_PLAY_Phase_Management+0xc94>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80028a2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80028a6:	799a      	ldrb	r2, [r3, #6]
 80028a8:	4b32      	ldr	r3, [pc, #200]	; (8002974 <GAME_PLAY_Phase_Management+0xc90>)
 80028aa:	fba3 1302 	umull	r1, r3, r3, r2
 80028ae:	0899      	lsrs	r1, r3, #2
 80028b0:	460b      	mov	r3, r1
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	440b      	add	r3, r1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80028be:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 80028c2:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80028c6:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	3308      	adds	r3, #8
 80028ce:	6812      	ldr	r2, [r2, #0]
 80028d0:	4413      	add	r3, r2
 80028d2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80028d6:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 80028da:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80028de:	f7fd fed1 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 80028e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80028f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028f8:	4611      	mov	r1, r2
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	f7fe fe91 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 8002900:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002904:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 800290e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002912:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002916:	4611      	mov	r1, r2
 8002918:	6818      	ldr	r0, [r3, #0]
 800291a:	f7fe fe82 	bl	8001622 <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800291e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002922:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	f7fe fd84 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800292c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002930:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800293a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fea0 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8002944:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002948:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002952:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002956:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2201      	movs	r2, #1
 800295e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 8002962:	e022      	b.n	80029aa <GAME_PLAY_Phase_Management+0xcc6>
 8002964:	2400000c 	.word	0x2400000c
 8002968:	08010d60 	.word	0x08010d60
 800296c:	08010d6c 	.word	0x08010d6c
 8002970:	08010d78 	.word	0x08010d78
 8002974:	aaaaaaab 	.word	0xaaaaaaab
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002978:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800297c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	f7fe fd57 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8002986:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800298a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8002994:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002998:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029a2:	4619      	mov	r1, r3
 80029a4:	4610      	mov	r0, r2
 80029a6:	f7fd fe6d 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80029aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	4ba8      	ldr	r3, [pc, #672]	; (8002c58 <GAME_PLAY_Phase_Management+0xf74>)
 80029b8:	9203      	str	r2, [sp, #12]
 80029ba:	2200      	movs	r2, #0
 80029bc:	9202      	str	r2, [sp, #8]
 80029be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029c2:	9201      	str	r2, [sp, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	9200      	str	r2, [sp, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4aa4      	ldr	r2, [pc, #656]	; (8002c5c <GAME_PLAY_Phase_Management+0xf78>)
 80029cc:	215a      	movs	r1, #90	; 0x5a
 80029ce:	2005      	movs	r0, #5
 80029d0:	f004 f885 	bl	8006ade <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80029d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	781a      	ldrb	r2, [r3, #0]
 80029e0:	4b9d      	ldr	r3, [pc, #628]	; (8002c58 <GAME_PLAY_Phase_Management+0xf74>)
 80029e2:	9203      	str	r2, [sp, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	9202      	str	r2, [sp, #8]
 80029e8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80029ec:	9201      	str	r2, [sp, #4]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	9200      	str	r2, [sp, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a9a      	ldr	r2, [pc, #616]	; (8002c60 <GAME_PLAY_Phase_Management+0xf7c>)
 80029f6:	2169      	movs	r1, #105	; 0x69
 80029f8:	2005      	movs	r0, #5
 80029fa:	f004 f870 	bl	8006ade <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80029fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a02:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	781a      	ldrb	r2, [r3, #0]
 8002a0a:	4b93      	ldr	r3, [pc, #588]	; (8002c58 <GAME_PLAY_Phase_Management+0xf74>)
 8002a0c:	9203      	str	r2, [sp, #12]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	9202      	str	r2, [sp, #8]
 8002a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a16:	9201      	str	r2, [sp, #4]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	9200      	str	r2, [sp, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a91      	ldr	r2, [pc, #580]	; (8002c64 <GAME_PLAY_Phase_Management+0xf80>)
 8002a20:	215a      	movs	r1, #90	; 0x5a
 8002a22:	2005      	movs	r0, #5
 8002a24:	f004 f85b 	bl	8006ade <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8002a28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a2c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	4b88      	ldr	r3, [pc, #544]	; (8002c58 <GAME_PLAY_Phase_Management+0xf74>)
 8002a36:	9203      	str	r2, [sp, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	9202      	str	r2, [sp, #8]
 8002a3c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002a40:	9201      	str	r2, [sp, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	9200      	str	r2, [sp, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a85      	ldr	r2, [pc, #532]	; (8002c60 <GAME_PLAY_Phase_Management+0xf7c>)
 8002a4a:	2169      	movs	r1, #105	; 0x69
 8002a4c:	2005      	movs	r0, #5
 8002a4e:	f004 f846 	bl	8006ade <ST7735_WriteStringNSS>
			break;
 8002a52:	f001 ba3e 	b.w	8003ed2 <GAME_PLAY_Phase_Management+0x21ee>
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002a56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	4b7d      	ldr	r3, [pc, #500]	; (8002c58 <GAME_PLAY_Phase_Management+0xf74>)
 8002a64:	9203      	str	r2, [sp, #12]
 8002a66:	2200      	movs	r2, #0
 8002a68:	9202      	str	r2, [sp, #8]
 8002a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a6e:	9201      	str	r2, [sp, #4]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	9200      	str	r2, [sp, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a7c      	ldr	r2, [pc, #496]	; (8002c68 <GAME_PLAY_Phase_Management+0xf84>)
 8002a78:	215a      	movs	r1, #90	; 0x5a
 8002a7a:	2005      	movs	r0, #5
 8002a7c:	f004 f82f 	bl	8006ade <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002a80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a84:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	4b72      	ldr	r3, [pc, #456]	; (8002c58 <GAME_PLAY_Phase_Management+0xf74>)
 8002a8e:	9203      	str	r2, [sp, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	9202      	str	r2, [sp, #8]
 8002a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a98:	9201      	str	r2, [sp, #4]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	9200      	str	r2, [sp, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a72      	ldr	r2, [pc, #456]	; (8002c6c <GAME_PLAY_Phase_Management+0xf88>)
 8002aa2:	215a      	movs	r1, #90	; 0x5a
 8002aa4:	2005      	movs	r0, #5
 8002aa6:	f004 f81a 	bl	8006ade <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8002aaa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d138      	bne.n	8002b2c <GAME_PLAY_Phase_Management+0xe48>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 8002aba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002abe:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	789b      	ldrb	r3, [r3, #2]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d11d      	bne.n	8002b06 <GAME_PLAY_Phase_Management+0xe22>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002aca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ace:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	9301      	str	r3, [sp, #4]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2326      	movs	r3, #38	; 0x26
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	215a      	movs	r1, #90	; 0x5a
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f004 f944 	bl	8006d70 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002ae8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2205      	movs	r2, #5
 8002af4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8002af8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002afc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2200      	movs	r2, #0
 8002b04:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8002b06:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b0a:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8002b0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b12:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002b16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b1a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	6809      	ldr	r1, [r1, #0]
 8002b22:	6818      	ldr	r0, [r3, #0]
 8002b24:	f7fe f892 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002b28:	f001 b9cc 	b.w	8003ec4 <GAME_PLAY_Phase_Management+0x21e0>
			else if ((state_game->action == 5 )){
 8002b2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b30:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b05      	cmp	r3, #5
 8002b3a:	f041 81c3 	bne.w	8003ec4 <GAME_PLAY_Phase_Management+0x21e0>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002b3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b42:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2326      	movs	r3, #38	; 0x26
 8002b52:	2280      	movs	r2, #128	; 0x80
 8002b54:	215a      	movs	r1, #90	; 0x5a
 8002b56:	2000      	movs	r0, #0
 8002b58:	f004 f90a 	bl	8006d70 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8002b5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b60:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002b6a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8002b6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b72:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002b76:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	f002 fd62 	bl	8005644 <YUGIOH_Check_Trap_On_board>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
				if (idx != 255)
 8002b86:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d05b      	beq.n	8002c46 <GAME_PLAY_Phase_Management+0xf62>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8002b8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b92:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	f7fe fcf7 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8002b9c:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 8002ba0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002ba4:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	3308      	adds	r3, #8
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8002bb4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002bb8:	2200      	movs	r2, #0
 8002bba:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8002bbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bc0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002bca:	4619      	mov	r1, r3
 8002bcc:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8002bd0:	f7fd fd58 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8002bd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bd8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002be2:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002be6:	6812      	ldr	r2, [r2, #0]
 8002be8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8002bec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bf0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002bfa:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002bfe:	6812      	ldr	r2, [r2, #0]
 8002c00:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8002c04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c08:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002c12:	3301      	adds	r3, #1
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c1a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8002c24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c28:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	2206      	movs	r2, #6
 8002c30:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8002c34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c38:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2204      	movs	r2, #4
 8002c40:	701a      	strb	r2, [r3, #0]
			break;
 8002c42:	f001 b93f 	b.w	8003ec4 <GAME_PLAY_Phase_Management+0x21e0>
					state_game->action = 4;
 8002c46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c4a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2204      	movs	r2, #4
 8002c52:	701a      	strb	r2, [r3, #0]
			break;
 8002c54:	f001 b936 	b.w	8003ec4 <GAME_PLAY_Phase_Management+0x21e0>
 8002c58:	2400000c 	.word	0x2400000c
 8002c5c:	08010d60 	.word	0x08010d60
 8002c60:	08010d6c 	.word	0x08010d6c
 8002c64:	08010d78 	.word	0x08010d78
 8002c68:	08010d88 	.word	0x08010d88
 8002c6c:	08010da0 	.word	0x08010da0
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002c70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c74:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	4b7d      	ldr	r3, [pc, #500]	; (8002e74 <GAME_PLAY_Phase_Management+0x1190>)
 8002c7e:	9203      	str	r2, [sp, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	9202      	str	r2, [sp, #8]
 8002c84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c88:	9201      	str	r2, [sp, #4]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	9200      	str	r2, [sp, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a79      	ldr	r2, [pc, #484]	; (8002e78 <GAME_PLAY_Phase_Management+0x1194>)
 8002c92:	215a      	movs	r1, #90	; 0x5a
 8002c94:	2005      	movs	r0, #5
 8002c96:	f003 ff22 	bl	8006ade <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002c9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c9e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	781a      	ldrb	r2, [r3, #0]
 8002ca6:	4b73      	ldr	r3, [pc, #460]	; (8002e74 <GAME_PLAY_Phase_Management+0x1190>)
 8002ca8:	9203      	str	r2, [sp, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	9202      	str	r2, [sp, #8]
 8002cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cb2:	9201      	str	r2, [sp, #4]
 8002cb4:	685a      	ldr	r2, [r3, #4]
 8002cb6:	9200      	str	r2, [sp, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a70      	ldr	r2, [pc, #448]	; (8002e7c <GAME_PLAY_Phase_Management+0x1198>)
 8002cbc:	215a      	movs	r1, #90	; 0x5a
 8002cbe:	2005      	movs	r0, #5
 8002cc0:	f003 ff0d 	bl	8006ade <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 8002cc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cc8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d147      	bne.n	8002d64 <GAME_PLAY_Phase_Management+0x1080>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8002cd4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cd8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	789b      	ldrb	r3, [r3, #2]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d12c      	bne.n	8002d3e <GAME_PLAY_Phase_Management+0x105a>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002ce4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ce8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2326      	movs	r3, #38	; 0x26
 8002cf8:	2280      	movs	r2, #128	; 0x80
 8002cfa:	215a      	movs	r1, #90	; 0x5a
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	f004 f837 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002d02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d06:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	9301      	str	r3, [sp, #4]
 8002d10:	2300      	movs	r3, #0
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	2326      	movs	r3, #38	; 0x26
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	215a      	movs	r1, #90	; 0x5a
 8002d1a:	2000      	movs	r0, #0
 8002d1c:	f004 f828 	bl	8006d70 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002d20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d24:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2205      	movs	r2, #5
 8002d2c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8002d30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d34:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerAtk);
 8002d3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d42:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8002d46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d4a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002d4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d52:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	6809      	ldr	r1, [r1, #0]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	f7fd ff76 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002d60:	f001 b8b3 	b.w	8003eca <GAME_PLAY_Phase_Management+0x21e6>
			else if ((state_game->action == 5 )){
 8002d64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d68:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	f041 80aa 	bne.w	8003eca <GAME_PLAY_Phase_Management+0x21e6>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002d76:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d7a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002d84:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8002d88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d8c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d90:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002d94:	6818      	ldr	r0, [r3, #0]
 8002d96:	f002 fc55 	bl	8005644 <YUGIOH_Check_Trap_On_board>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
				if (idx != 255)
 8002da0:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8002da4:	2bff      	cmp	r3, #255	; 0xff
 8002da6:	d05b      	beq.n	8002e60 <GAME_PLAY_Phase_Management+0x117c>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8002da8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002db0:	6818      	ldr	r0, [r3, #0]
 8002db2:	f7fe fbea 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002db6:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8002dba:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002dbe:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	3308      	adds	r3, #8
 8002dc6:	6812      	ldr	r2, [r2, #0]
 8002dc8:	4413      	add	r3, r2
 8002dca:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8002dce:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8002dd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dda:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002de4:	4619      	mov	r1, r3
 8002de6:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8002dea:	f7fd fc4b 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8002dee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002df2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002dfc:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002e00:	6812      	ldr	r2, [r2, #0]
 8002e02:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8002e06:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e0a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e14:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8002e1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e34:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8002e3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e42:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2206      	movs	r2, #6
 8002e4a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8002e4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2204      	movs	r2, #4
 8002e5a:	701a      	strb	r2, [r3, #0]
			break;
 8002e5c:	f001 b835 	b.w	8003eca <GAME_PLAY_Phase_Management+0x21e6>
					state_game->action = 4;
 8002e60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	2204      	movs	r2, #4
 8002e6c:	701a      	strb	r2, [r3, #0]
			break;
 8002e6e:	f001 b82c 	b.w	8003eca <GAME_PLAY_Phase_Management+0x21e6>
 8002e72:	bf00      	nop
 8002e74:	2400000c 	.word	0x2400000c
 8002e78:	08010da0 	.word	0x08010da0
 8002e7c:	08010d88 	.word	0x08010d88
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002e80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e84:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	781a      	ldrb	r2, [r3, #0]
 8002e8c:	4b9a      	ldr	r3, [pc, #616]	; (80030f8 <GAME_PLAY_Phase_Management+0x1414>)
 8002e8e:	9203      	str	r2, [sp, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	9202      	str	r2, [sp, #8]
 8002e94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e98:	9201      	str	r2, [sp, #4]
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	9200      	str	r2, [sp, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a96      	ldr	r2, [pc, #600]	; (80030fc <GAME_PLAY_Phase_Management+0x1418>)
 8002ea2:	215a      	movs	r1, #90	; 0x5a
 8002ea4:	2005      	movs	r0, #5
 8002ea6:	f003 fe1a 	bl	8006ade <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8002eaa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002eae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	4b90      	ldr	r3, [pc, #576]	; (80030f8 <GAME_PLAY_Phase_Management+0x1414>)
 8002eb8:	9203      	str	r2, [sp, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	9202      	str	r2, [sp, #8]
 8002ebe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ec2:	9201      	str	r2, [sp, #4]
 8002ec4:	685a      	ldr	r2, [r3, #4]
 8002ec6:	9200      	str	r2, [sp, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a8d      	ldr	r2, [pc, #564]	; (8003100 <GAME_PLAY_Phase_Management+0x141c>)
 8002ecc:	2169      	movs	r1, #105	; 0x69
 8002ece:	2005      	movs	r0, #5
 8002ed0:	f003 fe05 	bl	8006ade <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002ed4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ed8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	781a      	ldrb	r2, [r3, #0]
 8002ee0:	4b85      	ldr	r3, [pc, #532]	; (80030f8 <GAME_PLAY_Phase_Management+0x1414>)
 8002ee2:	9203      	str	r2, [sp, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	9202      	str	r2, [sp, #8]
 8002ee8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002eec:	9201      	str	r2, [sp, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	9200      	str	r2, [sp, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a83      	ldr	r2, [pc, #524]	; (8003104 <GAME_PLAY_Phase_Management+0x1420>)
 8002ef6:	215a      	movs	r1, #90	; 0x5a
 8002ef8:	2005      	movs	r0, #5
 8002efa:	f003 fdf0 	bl	8006ade <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002efe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f02:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	781a      	ldrb	r2, [r3, #0]
 8002f0a:	4b7b      	ldr	r3, [pc, #492]	; (80030f8 <GAME_PLAY_Phase_Management+0x1414>)
 8002f0c:	9203      	str	r2, [sp, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	9202      	str	r2, [sp, #8]
 8002f12:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f16:	9201      	str	r2, [sp, #4]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	9200      	str	r2, [sp, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a78      	ldr	r2, [pc, #480]	; (8003100 <GAME_PLAY_Phase_Management+0x141c>)
 8002f20:	2169      	movs	r1, #105	; 0x69
 8002f22:	2005      	movs	r0, #5
 8002f24:	f003 fddb 	bl	8006ade <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8002f28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f2c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	4619      	mov	r1, r3
 8002f36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f3a:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002f3e:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	4413      	add	r3, r2
 8002f48:	3304      	adds	r3, #4
 8002f4a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8002f4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	785b      	ldrb	r3, [r3, #1]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f60:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002f64:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3304      	adds	r3, #4
 8002f70:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

			if(state_game->action == 4)
 8002f74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	f040 82cd 	bne.w	8003520 <GAME_PLAY_Phase_Management+0x183c>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8002f86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f8a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	785a      	ldrb	r2, [r3, #1]
 8002f92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f96:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f080 825d 	bcs.w	8003460 <GAME_PLAY_Phase_Management+0x177c>
				{
					state_game->test = 165;
 8002fa6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002faa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	22a5      	movs	r2, #165	; 0xa5
 8002fb2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8002fb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	785b      	ldrb	r3, [r3, #1]
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fc8:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8002fcc:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	6812      	ldr	r2, [r2, #0]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

					if (ptrYugiohCard_src->cardSignature == 11)
 8002fdc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b0b      	cmp	r3, #11
 8002fe4:	f040 8096 	bne.w	8003114 <GAME_PLAY_Phase_Management+0x1430>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8002fe8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f002 f9ae 	bl	8005350 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002ff4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fe fb0f 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003004:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003008:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	785b      	ldrb	r3, [r3, #1]
 8003010:	3301      	adds	r3, #1
 8003012:	b2da      	uxtb	r2, r3
 8003014:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003018:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003020:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	781a      	ldrb	r2, [r3, #0]
 8003028:	4b33      	ldr	r3, [pc, #204]	; (80030f8 <GAME_PLAY_Phase_Management+0x1414>)
 800302a:	9203      	str	r2, [sp, #12]
 800302c:	2200      	movs	r2, #0
 800302e:	9202      	str	r2, [sp, #8]
 8003030:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003034:	9201      	str	r2, [sp, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	9200      	str	r2, [sp, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a32      	ldr	r2, [pc, #200]	; (8003108 <GAME_PLAY_Phase_Management+0x1424>)
 800303e:	215a      	movs	r1, #90	; 0x5a
 8003040:	2005      	movs	r0, #5
 8003042:	f003 fd4c 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003046:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	4b2a      	ldr	r3, [pc, #168]	; (80030f8 <GAME_PLAY_Phase_Management+0x1414>)
 8003050:	9203      	str	r2, [sp, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	9202      	str	r2, [sp, #8]
 8003056:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800305a:	9201      	str	r2, [sp, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	9200      	str	r2, [sp, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a2a      	ldr	r2, [pc, #168]	; (800310c <GAME_PLAY_Phase_Management+0x1428>)
 8003064:	2169      	movs	r1, #105	; 0x69
 8003066:	2005      	movs	r0, #5
 8003068:	f003 fd39 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800306c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	781a      	ldrb	r2, [r3, #0]
 8003074:	4b20      	ldr	r3, [pc, #128]	; (80030f8 <GAME_PLAY_Phase_Management+0x1414>)
 8003076:	9203      	str	r2, [sp, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	9202      	str	r2, [sp, #8]
 800307c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003080:	9201      	str	r2, [sp, #4]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	9200      	str	r2, [sp, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a21      	ldr	r2, [pc, #132]	; (8003110 <GAME_PLAY_Phase_Management+0x142c>)
 800308a:	215a      	movs	r1, #90	; 0x5a
 800308c:	2005      	movs	r0, #5
 800308e:	f003 fd26 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003092:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	4b17      	ldr	r3, [pc, #92]	; (80030f8 <GAME_PLAY_Phase_Management+0x1414>)
 800309c:	9203      	str	r2, [sp, #12]
 800309e:	2200      	movs	r2, #0
 80030a0:	9202      	str	r2, [sp, #8]
 80030a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80030a6:	9201      	str	r2, [sp, #4]
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	9200      	str	r2, [sp, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a14      	ldr	r2, [pc, #80]	; (8003100 <GAME_PLAY_Phase_Management+0x141c>)
 80030b0:	2169      	movs	r1, #105	; 0x69
 80030b2:	2005      	movs	r0, #5
 80030b4:	f003 fd13 	bl	8006ade <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80030b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030bc:	f004 faf0 	bl	80076a0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80030c0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	9301      	str	r3, [sp, #4]
 80030ca:	2300      	movs	r3, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	2326      	movs	r3, #38	; 0x26
 80030d0:	2280      	movs	r2, #128	; 0x80
 80030d2:	215a      	movs	r1, #90	; 0x5a
 80030d4:	2000      	movs	r0, #0
 80030d6:	f003 fe4b 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80030da:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	9301      	str	r3, [sp, #4]
 80030e4:	2300      	movs	r3, #0
 80030e6:	9300      	str	r3, [sp, #0]
 80030e8:	2326      	movs	r3, #38	; 0x26
 80030ea:	2280      	movs	r2, #128	; 0x80
 80030ec:	215a      	movs	r1, #90	; 0x5a
 80030ee:	2000      	movs	r0, #0
 80030f0:	f003 fe3e 	bl	8006d70 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 80030f4:	f000 beec 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
 80030f8:	2400000c 	.word	0x2400000c
 80030fc:	08010dbc 	.word	0x08010dbc
 8003100:	08010dcc 	.word	0x08010dcc
 8003104:	08010ddc 	.word	0x08010ddc
 8003108:	08010df0 	.word	0x08010df0
 800310c:	08010e00 	.word	0x08010e00
 8003110:	08010e08 	.word	0x08010e08
					else if (ptrYugiohCard_src->cardSignature == 12)
 8003114:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b0c      	cmp	r3, #12
 800311c:	f040 808c 	bne.w	8003238 <GAME_PLAY_Phase_Management+0x1554>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8003120:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4619      	mov	r1, r3
 800312e:	4610      	mov	r0, r2
 8003130:	f002 f92e 	bl	8005390 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003134:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800313e:	4618      	mov	r0, r3
 8003140:	f7fe fa6f 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003144:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003148:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	785b      	ldrb	r3, [r3, #1]
 8003150:	3301      	adds	r3, #1
 8003152:	b2da      	uxtb	r2, r3
 8003154:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003158:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003160:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	781a      	ldrb	r2, [r3, #0]
 8003168:	4bb5      	ldr	r3, [pc, #724]	; (8003440 <GAME_PLAY_Phase_Management+0x175c>)
 800316a:	9203      	str	r2, [sp, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	9202      	str	r2, [sp, #8]
 8003170:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003174:	9201      	str	r2, [sp, #4]
 8003176:	685a      	ldr	r2, [r3, #4]
 8003178:	9200      	str	r2, [sp, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4ab1      	ldr	r2, [pc, #708]	; (8003444 <GAME_PLAY_Phase_Management+0x1760>)
 800317e:	215a      	movs	r1, #90	; 0x5a
 8003180:	2005      	movs	r0, #5
 8003182:	f003 fcac 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003186:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	781a      	ldrb	r2, [r3, #0]
 800318e:	4bac      	ldr	r3, [pc, #688]	; (8003440 <GAME_PLAY_Phase_Management+0x175c>)
 8003190:	9203      	str	r2, [sp, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	9202      	str	r2, [sp, #8]
 8003196:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800319a:	9201      	str	r2, [sp, #4]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	9200      	str	r2, [sp, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4aa9      	ldr	r2, [pc, #676]	; (8003448 <GAME_PLAY_Phase_Management+0x1764>)
 80031a4:	2169      	movs	r1, #105	; 0x69
 80031a6:	2005      	movs	r0, #5
 80031a8:	f003 fc99 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80031ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	781a      	ldrb	r2, [r3, #0]
 80031b4:	4ba2      	ldr	r3, [pc, #648]	; (8003440 <GAME_PLAY_Phase_Management+0x175c>)
 80031b6:	9203      	str	r2, [sp, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	9202      	str	r2, [sp, #8]
 80031bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031c0:	9201      	str	r2, [sp, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4aa0      	ldr	r2, [pc, #640]	; (800344c <GAME_PLAY_Phase_Management+0x1768>)
 80031ca:	215a      	movs	r1, #90	; 0x5a
 80031cc:	2005      	movs	r0, #5
 80031ce:	f003 fc86 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80031d2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	781a      	ldrb	r2, [r3, #0]
 80031da:	4b99      	ldr	r3, [pc, #612]	; (8003440 <GAME_PLAY_Phase_Management+0x175c>)
 80031dc:	9203      	str	r2, [sp, #12]
 80031de:	2200      	movs	r2, #0
 80031e0:	9202      	str	r2, [sp, #8]
 80031e2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80031e6:	9201      	str	r2, [sp, #4]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	9200      	str	r2, [sp, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a98      	ldr	r2, [pc, #608]	; (8003450 <GAME_PLAY_Phase_Management+0x176c>)
 80031f0:	2169      	movs	r1, #105	; 0x69
 80031f2:	2005      	movs	r0, #5
 80031f4:	f003 fc73 	bl	8006ade <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80031f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031fc:	f004 fa50 	bl	80076a0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003200:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	9301      	str	r3, [sp, #4]
 800320a:	2300      	movs	r3, #0
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2326      	movs	r3, #38	; 0x26
 8003210:	2280      	movs	r2, #128	; 0x80
 8003212:	215a      	movs	r1, #90	; 0x5a
 8003214:	2000      	movs	r0, #0
 8003216:	f003 fdab 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800321a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	9301      	str	r3, [sp, #4]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2326      	movs	r3, #38	; 0x26
 800322a:	2280      	movs	r2, #128	; 0x80
 800322c:	215a      	movs	r1, #90	; 0x5a
 800322e:	2000      	movs	r0, #0
 8003230:	f003 fd9e 	bl	8006d70 <ST7735_FillRectangleNSS>
			break;
 8003234:	f000 be4c 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8003238:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b0d      	cmp	r3, #13
 8003240:	d110      	bne.n	8003264 <GAME_PLAY_Phase_Management+0x1580>
						state_game->test = 166;
 8003242:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003246:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	22a6      	movs	r2, #166	; 0xa6
 800324e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8003252:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003256:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2205      	movs	r2, #5
 800325e:	701a      	strb	r2, [r3, #0]
			break;
 8003260:	f000 be36 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8003264:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b0e      	cmp	r3, #14
 800326c:	d005      	beq.n	800327a <GAME_PLAY_Phase_Management+0x1596>
 800326e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b0f      	cmp	r3, #15
 8003276:	f040 8094 	bne.w	80033a2 <GAME_PLAY_Phase_Management+0x16be>
						state_game->test = 133;
 800327a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800327e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2285      	movs	r2, #133	; 0x85
 8003286:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 800328a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4619      	mov	r1, r3
 8003298:	4610      	mov	r0, r2
 800329a:	f002 f94d 	bl	8005538 <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800329e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7fe f9ba 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 80032ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	785b      	ldrb	r3, [r3, #1]
 80032ba:	3301      	adds	r3, #1
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80032c2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80032ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	4b5b      	ldr	r3, [pc, #364]	; (8003440 <GAME_PLAY_Phase_Management+0x175c>)
 80032d4:	9203      	str	r2, [sp, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	9202      	str	r2, [sp, #8]
 80032da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80032de:	9201      	str	r2, [sp, #4]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	9200      	str	r2, [sp, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a5b      	ldr	r2, [pc, #364]	; (8003454 <GAME_PLAY_Phase_Management+0x1770>)
 80032e8:	215a      	movs	r1, #90	; 0x5a
 80032ea:	2005      	movs	r0, #5
 80032ec:	f003 fbf7 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 80032f0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	781a      	ldrb	r2, [r3, #0]
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <GAME_PLAY_Phase_Management+0x175c>)
 80032fa:	9203      	str	r2, [sp, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	9202      	str	r2, [sp, #8]
 8003300:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003304:	9201      	str	r2, [sp, #4]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	9200      	str	r2, [sp, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a52      	ldr	r2, [pc, #328]	; (8003458 <GAME_PLAY_Phase_Management+0x1774>)
 800330e:	2169      	movs	r1, #105	; 0x69
 8003310:	2005      	movs	r0, #5
 8003312:	f003 fbe4 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003316:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	781a      	ldrb	r2, [r3, #0]
 800331e:	4b48      	ldr	r3, [pc, #288]	; (8003440 <GAME_PLAY_Phase_Management+0x175c>)
 8003320:	9203      	str	r2, [sp, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	9202      	str	r2, [sp, #8]
 8003326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800332a:	9201      	str	r2, [sp, #4]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	9200      	str	r2, [sp, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a46      	ldr	r2, [pc, #280]	; (800344c <GAME_PLAY_Phase_Management+0x1768>)
 8003334:	215a      	movs	r1, #90	; 0x5a
 8003336:	2005      	movs	r0, #5
 8003338:	f003 fbd1 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800333c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <GAME_PLAY_Phase_Management+0x175c>)
 8003346:	9203      	str	r2, [sp, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	9202      	str	r2, [sp, #8]
 800334c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003350:	9201      	str	r2, [sp, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	9200      	str	r2, [sp, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a40      	ldr	r2, [pc, #256]	; (800345c <GAME_PLAY_Phase_Management+0x1778>)
 800335a:	2169      	movs	r1, #105	; 0x69
 800335c:	2005      	movs	r0, #5
 800335e:	f003 fbbe 	bl	8006ade <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003366:	f004 f99b 	bl	80076a0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800336a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	9301      	str	r3, [sp, #4]
 8003374:	2300      	movs	r3, #0
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	2326      	movs	r3, #38	; 0x26
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	215a      	movs	r1, #90	; 0x5a
 800337e:	2000      	movs	r0, #0
 8003380:	f003 fcf6 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003384:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	9301      	str	r3, [sp, #4]
 800338e:	2300      	movs	r3, #0
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	2326      	movs	r3, #38	; 0x26
 8003394:	2280      	movs	r2, #128	; 0x80
 8003396:	215a      	movs	r1, #90	; 0x5a
 8003398:	2000      	movs	r0, #0
 800339a:	f003 fce9 	bl	8006d70 <ST7735_FillRectangleNSS>
			break;
 800339e:	f000 bd97 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
					else if(ptrYugiohCard_src->cardSignature == 16)
 80033a2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d110      	bne.n	80033ce <GAME_PLAY_Phase_Management+0x16ea>
						state_game->test = 124;
 80033ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033b0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	227c      	movs	r2, #124	; 0x7c
 80033b8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80033bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033c0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	2205      	movs	r2, #5
 80033c8:	701a      	strb	r2, [r3, #0]
			break;
 80033ca:	f000 bd81 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
					else if(ptrYugiohCard_src->cardSignature == 17)
 80033ce:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b11      	cmp	r3, #17
 80033d6:	d108      	bne.n	80033ea <GAME_PLAY_Phase_Management+0x1706>
						state_game->action = 5;
 80033d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2205      	movs	r2, #5
 80033e4:	701a      	strb	r2, [r3, #0]
			break;
 80033e6:	f000 bd73 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 80033ea:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d005      	beq.n	8003400 <GAME_PLAY_Phase_Management+0x171c>
 80033f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b13      	cmp	r3, #19
 80033fc:	f040 8568 	bne.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8003400:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	785b      	ldrb	r3, [r3, #1]
 8003408:	2b00      	cmp	r3, #0
 800340a:	f040 8561 	bne.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800340e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003418:	4618      	mov	r0, r3
 800341a:	f7fe f902 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 800341e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003422:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	785b      	ldrb	r3, [r3, #1]
 800342a:	3301      	adds	r3, #1
 800342c:	b2da      	uxtb	r2, r3
 800342e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003432:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	705a      	strb	r2, [r3, #1]
			break;
 800343a:	f000 bd49 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
 800343e:	bf00      	nop
 8003440:	2400000c 	.word	0x2400000c
 8003444:	08010df0 	.word	0x08010df0
 8003448:	08010e18 	.word	0x08010e18
 800344c:	08010e08 	.word	0x08010e08
 8003450:	08010dcc 	.word	0x08010dcc
 8003454:	08010e24 	.word	0x08010e24
 8003458:	08010e34 	.word	0x08010e34
 800345c:	08010e44 	.word	0x08010e44
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003460:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003464:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	2300      	movs	r3, #0
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	2326      	movs	r3, #38	; 0x26
 8003474:	2280      	movs	r2, #128	; 0x80
 8003476:	215a      	movs	r1, #90	; 0x5a
 8003478:	2000      	movs	r0, #0
 800347a:	f003 fc79 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800347e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003482:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	2300      	movs	r3, #0
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	2326      	movs	r3, #38	; 0x26
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	215a      	movs	r1, #90	; 0x5a
 8003496:	2000      	movs	r0, #0
 8003498:	f003 fc6a 	bl	8006d70 <ST7735_FillRectangleNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800349c:	2300      	movs	r3, #0
 800349e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80034a2:	e020      	b.n	80034e6 <GAME_PLAY_Phase_Management+0x1802>
						state_game->ptrChainUser[i] = &dummyPlayer;
 80034a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80034b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	4413      	add	r3, r2
 80034ba:	f107 0210 	add.w	r2, r7, #16
 80034be:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 80034c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80034ce:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4413      	add	r3, r2
 80034d6:	f107 0210 	add.w	r2, r7, #16
 80034da:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80034dc:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80034e0:	3301      	adds	r3, #1
 80034e2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80034e6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80034ea:	2b05      	cmp	r3, #5
 80034ec:	ddda      	ble.n	80034a4 <GAME_PLAY_Phase_Management+0x17c0>
					state_game->ChainCount = 0;
 80034ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034f2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 80034fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003502:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2200      	movs	r2, #0
 800350a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800350c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003510:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800351c:	f000 bcd8 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
			else if (state_game->action == 5)
 8003520:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003524:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	2b05      	cmp	r3, #5
 800352e:	f040 809d 	bne.w	800366c <GAME_PLAY_Phase_Management+0x1988>
				state_game->test = 167;
 8003532:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003536:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	22a7      	movs	r2, #167	; 0xa7
 800353e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8003542:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003546:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	785b      	ldrb	r3, [r3, #1]
 800354e:	4619      	mov	r1, r3
 8003550:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003554:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003558:	f101 0344 	add.w	r3, r1, #68	; 0x44
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	6812      	ldr	r2, [r2, #0]
 8003560:	4413      	add	r3, r2
 8003562:	3304      	adds	r3, #4
 8003564:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 8003568:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	789b      	ldrb	r3, [r3, #2]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d128      	bne.n	80035c6 <GAME_PLAY_Phase_Management+0x18e2>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8003574:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4618      	mov	r0, r3
 800357c:	f7fd ff5a 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&(*ptrUser)->ActtionBuffer[0],&(*ptrUser)->CardInPlayed);
 8003580:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800358a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003594:	4619      	mov	r1, r3
 8003596:	4610      	mov	r0, r2
 8003598:	f7fd f874 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 4;
 800359c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2204      	movs	r2, #4
 80035a8:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 80035aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	785b      	ldrb	r3, [r3, #1]
 80035b6:	3301      	adds	r3, #1
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 80035c6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b0d      	cmp	r3, #13
 80035ce:	d110      	bne.n	80035f2 <GAME_PLAY_Phase_Management+0x190e>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 80035d0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035da:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80035de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035e2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80035e6:	6809      	ldr	r1, [r1, #0]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	f7fd fc8d 	bl	8000f08 <Player_Reading_Card_Reborn>
			break;
 80035ee:	f000 bc6f 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80035f2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b10      	cmp	r3, #16
 80035fa:	d110      	bne.n	800361e <GAME_PLAY_Phase_Management+0x193a>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 80035fc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003606:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800360a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800360e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003612:	6809      	ldr	r1, [r1, #0]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	f7fd fd25 	bl	8001064 <Player_Reading_Card_Ancient_Rule>
			break;
 800361a:	f000 bc59 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
				else if (ptrYugiohCard_src->cardSignature == 17)
 800361e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b11      	cmp	r3, #17
 8003626:	d110      	bne.n	800364a <GAME_PLAY_Phase_Management+0x1966>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 8003628:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003632:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003636:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800363a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800363e:	6809      	ldr	r1, [r1, #0]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	f7fd fbb7 	bl	8000db4 <Player_Reading_Card_Stopdef>
			break;
 8003646:	f000 bc43 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 800364a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003654:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003658:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800365c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003660:	6809      	ldr	r1, [r1, #0]
 8003662:	6818      	ldr	r0, [r3, #0]
 8003664:	f7fd f876 	bl	8000754 <Player_Reading_Card>
			break;
 8003668:	f000 bc32 	b.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
			else if (state_game->action == 6)
 800366c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003670:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b06      	cmp	r3, #6
 800367a:	f040 8429 	bne.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
				state_game->test = 169;
 800367e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003682:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	22a9      	movs	r2, #169	; 0xa9
 800368a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800368e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003692:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	785b      	ldrb	r3, [r3, #1]
 800369a:	4619      	mov	r1, r3
 800369c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036a0:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80036a4:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	6812      	ldr	r2, [r2, #0]
 80036ac:	4413      	add	r3, r2
 80036ae:	3304      	adds	r3, #4
 80036b0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (ptrYugiohCard_src->cardSignature == 13){
 80036b4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	2b0d      	cmp	r3, #13
 80036bc:	f040 819d 	bne.w	80039fa <GAME_PLAY_Phase_Management+0x1d16>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80036c0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	781a      	ldrb	r2, [r3, #0]
 80036c8:	4b66      	ldr	r3, [pc, #408]	; (8003864 <GAME_PLAY_Phase_Management+0x1b80>)
 80036ca:	9203      	str	r2, [sp, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	9202      	str	r2, [sp, #8]
 80036d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036d4:	9201      	str	r2, [sp, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	9200      	str	r2, [sp, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a62      	ldr	r2, [pc, #392]	; (8003868 <GAME_PLAY_Phase_Management+0x1b84>)
 80036de:	215a      	movs	r1, #90	; 0x5a
 80036e0:	2005      	movs	r0, #5
 80036e2:	f003 f9fc 	bl	8006ade <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80036e6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	789b      	ldrb	r3, [r3, #2]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f040 80c4 	bne.w	800387c <GAME_PLAY_Phase_Management+0x1b98>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80036f4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	9301      	str	r3, [sp, #4]
 80036fe:	2300      	movs	r3, #0
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	2326      	movs	r3, #38	; 0x26
 8003704:	2280      	movs	r2, #128	; 0x80
 8003706:	215a      	movs	r1, #90	; 0x5a
 8003708:	2000      	movs	r0, #0
 800370a:	f003 fb31 	bl	8006d70 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 800370e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003712:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	22aa      	movs	r2, #170	; 0xaa
 800371a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 800371e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003728:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 800372c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003730:	2200      	movs	r2, #0
 8003732:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003734:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800373e:	4619      	mov	r1, r3
 8003740:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003744:	f7fc ff9e 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8003748:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4618      	mov	r0, r3
 8003750:	f001 fe5c 	bl	800540c <YUGIOH_Reborn>
						state_game->action = 4;
 8003754:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003758:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2204      	movs	r2, #4
 8003760:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003762:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800376c:	4618      	mov	r0, r3
 800376e:	f7fd ff58 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003772:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003776:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	785b      	ldrb	r3, [r3, #1]
 800377e:	3301      	adds	r3, #1
 8003780:	b2da      	uxtb	r2, r3
 8003782:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003786:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800378e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	781a      	ldrb	r2, [r3, #0]
 8003796:	4b33      	ldr	r3, [pc, #204]	; (8003864 <GAME_PLAY_Phase_Management+0x1b80>)
 8003798:	9203      	str	r2, [sp, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	9202      	str	r2, [sp, #8]
 800379e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037a2:	9201      	str	r2, [sp, #4]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	9200      	str	r2, [sp, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a30      	ldr	r2, [pc, #192]	; (800386c <GAME_PLAY_Phase_Management+0x1b88>)
 80037ac:	215a      	movs	r1, #90	; 0x5a
 80037ae:	2005      	movs	r0, #5
 80037b0:	f003 f995 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80037b4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	781a      	ldrb	r2, [r3, #0]
 80037bc:	4b29      	ldr	r3, [pc, #164]	; (8003864 <GAME_PLAY_Phase_Management+0x1b80>)
 80037be:	9203      	str	r2, [sp, #12]
 80037c0:	2200      	movs	r2, #0
 80037c2:	9202      	str	r2, [sp, #8]
 80037c4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80037c8:	9201      	str	r2, [sp, #4]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	9200      	str	r2, [sp, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a27      	ldr	r2, [pc, #156]	; (8003870 <GAME_PLAY_Phase_Management+0x1b8c>)
 80037d2:	2169      	movs	r1, #105	; 0x69
 80037d4:	2005      	movs	r0, #5
 80037d6:	f003 f982 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80037da:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	781a      	ldrb	r2, [r3, #0]
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <GAME_PLAY_Phase_Management+0x1b80>)
 80037e4:	9203      	str	r2, [sp, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	9202      	str	r2, [sp, #8]
 80037ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ee:	9201      	str	r2, [sp, #4]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	9200      	str	r2, [sp, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <GAME_PLAY_Phase_Management+0x1b90>)
 80037f8:	215a      	movs	r1, #90	; 0x5a
 80037fa:	2005      	movs	r0, #5
 80037fc:	f003 f96f 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003800:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	781a      	ldrb	r2, [r3, #0]
 8003808:	4b16      	ldr	r3, [pc, #88]	; (8003864 <GAME_PLAY_Phase_Management+0x1b80>)
 800380a:	9203      	str	r2, [sp, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	9202      	str	r2, [sp, #8]
 8003810:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003814:	9201      	str	r2, [sp, #4]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	9200      	str	r2, [sp, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <GAME_PLAY_Phase_Management+0x1b94>)
 800381e:	2169      	movs	r1, #105	; 0x69
 8003820:	2005      	movs	r0, #5
 8003822:	f003 f95c 	bl	8006ade <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003826:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800382a:	f003 ff39 	bl	80076a0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800382e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	9301      	str	r3, [sp, #4]
 8003838:	2300      	movs	r3, #0
 800383a:	9300      	str	r3, [sp, #0]
 800383c:	2326      	movs	r3, #38	; 0x26
 800383e:	2280      	movs	r2, #128	; 0x80
 8003840:	215a      	movs	r1, #90	; 0x5a
 8003842:	2000      	movs	r0, #0
 8003844:	f003 fa94 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003848:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	9301      	str	r3, [sp, #4]
 8003852:	2300      	movs	r3, #0
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	2326      	movs	r3, #38	; 0x26
 8003858:	2280      	movs	r2, #128	; 0x80
 800385a:	215a      	movs	r1, #90	; 0x5a
 800385c:	2000      	movs	r0, #0
 800385e:	f003 fa87 	bl	8006d70 <ST7735_FillRectangleNSS>
			break;
 8003862:	e335      	b.n	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
 8003864:	2400000c 	.word	0x2400000c
 8003868:	08010cfc 	.word	0x08010cfc
 800386c:	08010df0 	.word	0x08010df0
 8003870:	08010e50 	.word	0x08010e50
 8003874:	08010e08 	.word	0x08010e08
 8003878:	08010dcc 	.word	0x08010dcc
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 800387c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	785b      	ldrb	r3, [r3, #1]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f040 8323 	bne.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800388a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	9301      	str	r3, [sp, #4]
 8003894:	2300      	movs	r3, #0
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2326      	movs	r3, #38	; 0x26
 800389a:	2280      	movs	r2, #128	; 0x80
 800389c:	215a      	movs	r1, #90	; 0x5a
 800389e:	2000      	movs	r0, #0
 80038a0:	f003 fa66 	bl	8006d70 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 80038a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038a8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	22ab      	movs	r2, #171	; 0xab
 80038b0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80038b4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80038be:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 80038c2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80038c6:	2201      	movs	r2, #1
 80038c8:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80038ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80038d4:	4619      	mov	r1, r3
 80038d6:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80038da:	f7fc fed3 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80038de:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fd91 	bl	800540c <YUGIOH_Reborn>
						state_game->action = 4;
 80038ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038ee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2204      	movs	r2, #4
 80038f6:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80038f8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003902:	4618      	mov	r0, r3
 8003904:	f7fd fe8d 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003908:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800390c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	785b      	ldrb	r3, [r3, #1]
 8003914:	3301      	adds	r3, #1
 8003916:	b2da      	uxtb	r2, r3
 8003918:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800391c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003924:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	4ba5      	ldr	r3, [pc, #660]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 800392e:	9203      	str	r2, [sp, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	9202      	str	r2, [sp, #8]
 8003934:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003938:	9201      	str	r2, [sp, #4]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	9200      	str	r2, [sp, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4aa1      	ldr	r2, [pc, #644]	; (8003bc8 <GAME_PLAY_Phase_Management+0x1ee4>)
 8003942:	215a      	movs	r1, #90	; 0x5a
 8003944:	2005      	movs	r0, #5
 8003946:	f003 f8ca 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800394a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	781a      	ldrb	r2, [r3, #0]
 8003952:	4b9c      	ldr	r3, [pc, #624]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 8003954:	9203      	str	r2, [sp, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	9202      	str	r2, [sp, #8]
 800395a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800395e:	9201      	str	r2, [sp, #4]
 8003960:	685a      	ldr	r2, [r3, #4]
 8003962:	9200      	str	r2, [sp, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a99      	ldr	r2, [pc, #612]	; (8003bcc <GAME_PLAY_Phase_Management+0x1ee8>)
 8003968:	2169      	movs	r1, #105	; 0x69
 800396a:	2005      	movs	r0, #5
 800396c:	f003 f8b7 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003970:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	781a      	ldrb	r2, [r3, #0]
 8003978:	4b92      	ldr	r3, [pc, #584]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 800397a:	9203      	str	r2, [sp, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	9202      	str	r2, [sp, #8]
 8003980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003984:	9201      	str	r2, [sp, #4]
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	9200      	str	r2, [sp, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a90      	ldr	r2, [pc, #576]	; (8003bd0 <GAME_PLAY_Phase_Management+0x1eec>)
 800398e:	215a      	movs	r1, #90	; 0x5a
 8003990:	2005      	movs	r0, #5
 8003992:	f003 f8a4 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003996:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	781a      	ldrb	r2, [r3, #0]
 800399e:	4b89      	ldr	r3, [pc, #548]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 80039a0:	9203      	str	r2, [sp, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	9202      	str	r2, [sp, #8]
 80039a6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80039aa:	9201      	str	r2, [sp, #4]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	9200      	str	r2, [sp, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a88      	ldr	r2, [pc, #544]	; (8003bd4 <GAME_PLAY_Phase_Management+0x1ef0>)
 80039b4:	2169      	movs	r1, #105	; 0x69
 80039b6:	2005      	movs	r0, #5
 80039b8:	f003 f891 	bl	8006ade <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80039bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039c0:	f003 fe6e 	bl	80076a0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80039c4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	9301      	str	r3, [sp, #4]
 80039ce:	2300      	movs	r3, #0
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2326      	movs	r3, #38	; 0x26
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	215a      	movs	r1, #90	; 0x5a
 80039d8:	2000      	movs	r0, #0
 80039da:	f003 f9c9 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80039de:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	2300      	movs	r3, #0
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	2326      	movs	r3, #38	; 0x26
 80039ee:	2280      	movs	r2, #128	; 0x80
 80039f0:	215a      	movs	r1, #90	; 0x5a
 80039f2:	2000      	movs	r0, #0
 80039f4:	f003 f9bc 	bl	8006d70 <ST7735_FillRectangleNSS>
			break;
 80039f8:	e26a      	b.n	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80039fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	2b10      	cmp	r3, #16
 8003a02:	f040 81aa 	bne.w	8003d5a <GAME_PLAY_Phase_Management+0x2076>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003a06:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	2300      	movs	r3, #0
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	2326      	movs	r3, #38	; 0x26
 8003a16:	2280      	movs	r2, #128	; 0x80
 8003a18:	215a      	movs	r1, #90	; 0x5a
 8003a1a:	2000      	movs	r0, #0
 8003a1c:	f003 f9a8 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a20:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	4b66      	ldr	r3, [pc, #408]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 8003a2a:	9203      	str	r2, [sp, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	9202      	str	r2, [sp, #8]
 8003a30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a34:	9201      	str	r2, [sp, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	9200      	str	r2, [sp, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a66      	ldr	r2, [pc, #408]	; (8003bd8 <GAME_PLAY_Phase_Management+0x1ef4>)
 8003a3e:	215a      	movs	r1, #90	; 0x5a
 8003a40:	2005      	movs	r0, #5
 8003a42:	f003 f84c 	bl	8006ade <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8003a46:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	789b      	ldrb	r3, [r3, #2]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f040 80c4 	bne.w	8003bdc <GAME_PLAY_Phase_Management+0x1ef8>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a54:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	9301      	str	r3, [sp, #4]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	2326      	movs	r3, #38	; 0x26
 8003a64:	2280      	movs	r2, #128	; 0x80
 8003a66:	215a      	movs	r1, #90	; 0x5a
 8003a68:	2000      	movs	r0, #0
 8003a6a:	f003 f981 	bl	8006d70 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8003a6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	22aa      	movs	r2, #170	; 0xaa
 8003a7a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8003a7e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003a88:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8003a8c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003a90:	2200      	movs	r2, #0
 8003a92:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003a94:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003aa4:	f7fc fdee 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8003aa8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f001 fd16 	bl	80054e0 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8003ab4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ab8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003ac2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003acc:	4618      	mov	r0, r3
 8003ace:	f7fd fda8 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003ad2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ad6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	785b      	ldrb	r3, [r3, #1]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ae6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003aee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	4b33      	ldr	r3, [pc, #204]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 8003af8:	9203      	str	r2, [sp, #12]
 8003afa:	2200      	movs	r2, #0
 8003afc:	9202      	str	r2, [sp, #8]
 8003afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b02:	9201      	str	r2, [sp, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	9200      	str	r2, [sp, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a2f      	ldr	r2, [pc, #188]	; (8003bc8 <GAME_PLAY_Phase_Management+0x1ee4>)
 8003b0c:	215a      	movs	r1, #90	; 0x5a
 8003b0e:	2005      	movs	r0, #5
 8003b10:	f002 ffe5 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003b14:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	4b29      	ldr	r3, [pc, #164]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 8003b1e:	9203      	str	r2, [sp, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	9202      	str	r2, [sp, #8]
 8003b24:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003b28:	9201      	str	r2, [sp, #4]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	9200      	str	r2, [sp, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a26      	ldr	r2, [pc, #152]	; (8003bcc <GAME_PLAY_Phase_Management+0x1ee8>)
 8003b32:	2169      	movs	r1, #105	; 0x69
 8003b34:	2005      	movs	r0, #5
 8003b36:	f002 ffd2 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003b3a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	4b20      	ldr	r3, [pc, #128]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 8003b44:	9203      	str	r2, [sp, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	9202      	str	r2, [sp, #8]
 8003b4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b4e:	9201      	str	r2, [sp, #4]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	9200      	str	r2, [sp, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a1e      	ldr	r2, [pc, #120]	; (8003bd0 <GAME_PLAY_Phase_Management+0x1eec>)
 8003b58:	215a      	movs	r1, #90	; 0x5a
 8003b5a:	2005      	movs	r0, #5
 8003b5c:	f002 ffbf 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003b60:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	781a      	ldrb	r2, [r3, #0]
 8003b68:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <GAME_PLAY_Phase_Management+0x1ee0>)
 8003b6a:	9203      	str	r2, [sp, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	9202      	str	r2, [sp, #8]
 8003b70:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003b74:	9201      	str	r2, [sp, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	9200      	str	r2, [sp, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a15      	ldr	r2, [pc, #84]	; (8003bd4 <GAME_PLAY_Phase_Management+0x1ef0>)
 8003b7e:	2169      	movs	r1, #105	; 0x69
 8003b80:	2005      	movs	r0, #5
 8003b82:	f002 ffac 	bl	8006ade <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003b86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003b8a:	f003 fd89 	bl	80076a0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003b8e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	2326      	movs	r3, #38	; 0x26
 8003b9e:	2280      	movs	r2, #128	; 0x80
 8003ba0:	215a      	movs	r1, #90	; 0x5a
 8003ba2:	2000      	movs	r0, #0
 8003ba4:	f003 f8e4 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003ba8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	2326      	movs	r3, #38	; 0x26
 8003bb8:	2280      	movs	r2, #128	; 0x80
 8003bba:	215a      	movs	r1, #90	; 0x5a
 8003bbc:	2000      	movs	r0, #0
 8003bbe:	f003 f8d7 	bl	8006d70 <ST7735_FillRectangleNSS>
			break;
 8003bc2:	e185      	b.n	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
 8003bc4:	2400000c 	.word	0x2400000c
 8003bc8:	08010df0 	.word	0x08010df0
 8003bcc:	08010e50 	.word	0x08010e50
 8003bd0:	08010e08 	.word	0x08010e08
 8003bd4:	08010dcc 	.word	0x08010dcc
 8003bd8:	08010cfc 	.word	0x08010cfc
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8003bdc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	785b      	ldrb	r3, [r3, #1]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 8173 	bne.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003bea:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	9301      	str	r3, [sp, #4]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	2326      	movs	r3, #38	; 0x26
 8003bfa:	2280      	movs	r2, #128	; 0x80
 8003bfc:	215a      	movs	r1, #90	; 0x5a
 8003bfe:	2000      	movs	r0, #0
 8003c00:	f003 f8b6 	bl	8006d70 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8003c04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c08:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	22ab      	movs	r2, #171	; 0xab
 8003c10:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8003c14:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c1e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8003c22:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003c26:	2201      	movs	r2, #1
 8003c28:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8003c2a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c34:	4619      	mov	r1, r3
 8003c36:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003c3a:	f7fc fd23 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8003c3e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 fc4b 	bl	80054e0 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8003c4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2204      	movs	r2, #4
 8003c56:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003c58:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fd fcdd 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003c68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c6c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	3301      	adds	r3, #1
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c7c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003c84:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	781a      	ldrb	r2, [r3, #0]
 8003c8c:	4ba3      	ldr	r3, [pc, #652]	; (8003f1c <GAME_PLAY_Phase_Management+0x2238>)
 8003c8e:	9203      	str	r2, [sp, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	9202      	str	r2, [sp, #8]
 8003c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c98:	9201      	str	r2, [sp, #4]
 8003c9a:	685a      	ldr	r2, [r3, #4]
 8003c9c:	9200      	str	r2, [sp, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a9f      	ldr	r2, [pc, #636]	; (8003f20 <GAME_PLAY_Phase_Management+0x223c>)
 8003ca2:	215a      	movs	r1, #90	; 0x5a
 8003ca4:	2005      	movs	r0, #5
 8003ca6:	f002 ff1a 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003caa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	4b9a      	ldr	r3, [pc, #616]	; (8003f1c <GAME_PLAY_Phase_Management+0x2238>)
 8003cb4:	9203      	str	r2, [sp, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	9202      	str	r2, [sp, #8]
 8003cba:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003cbe:	9201      	str	r2, [sp, #4]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	9200      	str	r2, [sp, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a97      	ldr	r2, [pc, #604]	; (8003f24 <GAME_PLAY_Phase_Management+0x2240>)
 8003cc8:	2169      	movs	r1, #105	; 0x69
 8003cca:	2005      	movs	r0, #5
 8003ccc:	f002 ff07 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003cd0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	4b90      	ldr	r3, [pc, #576]	; (8003f1c <GAME_PLAY_Phase_Management+0x2238>)
 8003cda:	9203      	str	r2, [sp, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	9202      	str	r2, [sp, #8]
 8003ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce4:	9201      	str	r2, [sp, #4]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	9200      	str	r2, [sp, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a8e      	ldr	r2, [pc, #568]	; (8003f28 <GAME_PLAY_Phase_Management+0x2244>)
 8003cee:	215a      	movs	r1, #90	; 0x5a
 8003cf0:	2005      	movs	r0, #5
 8003cf2:	f002 fef4 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003cf6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	4b87      	ldr	r3, [pc, #540]	; (8003f1c <GAME_PLAY_Phase_Management+0x2238>)
 8003d00:	9203      	str	r2, [sp, #12]
 8003d02:	2200      	movs	r2, #0
 8003d04:	9202      	str	r2, [sp, #8]
 8003d06:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003d0a:	9201      	str	r2, [sp, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	9200      	str	r2, [sp, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a86      	ldr	r2, [pc, #536]	; (8003f2c <GAME_PLAY_Phase_Management+0x2248>)
 8003d14:	2169      	movs	r1, #105	; 0x69
 8003d16:	2005      	movs	r0, #5
 8003d18:	f002 fee1 	bl	8006ade <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d20:	f003 fcbe 	bl	80076a0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003d24:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	9301      	str	r3, [sp, #4]
 8003d2e:	2300      	movs	r3, #0
 8003d30:	9300      	str	r3, [sp, #0]
 8003d32:	2326      	movs	r3, #38	; 0x26
 8003d34:	2280      	movs	r2, #128	; 0x80
 8003d36:	215a      	movs	r1, #90	; 0x5a
 8003d38:	2000      	movs	r0, #0
 8003d3a:	f003 f819 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003d3e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	9301      	str	r3, [sp, #4]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2326      	movs	r3, #38	; 0x26
 8003d4e:	2280      	movs	r2, #128	; 0x80
 8003d50:	215a      	movs	r1, #90	; 0x5a
 8003d52:	2000      	movs	r0, #0
 8003d54:	f003 f80c 	bl	8006d70 <ST7735_FillRectangleNSS>
			break;
 8003d58:	e0ba      	b.n	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8003d5a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b11      	cmp	r3, #17
 8003d62:	f040 80b5 	bne.w	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 8003d66:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003d70:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8003d74:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003d7e:	4619      	mov	r1, r3
 8003d80:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003d84:	f7fc fc7e 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8003d88:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4619      	mov	r1, r3
 8003d96:	4610      	mov	r0, r2
 8003d98:	f001 fc1e 	bl	80055d8 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8003d9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003da0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2204      	movs	r2, #4
 8003da8:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003daa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fd fc34 	bl	8001622 <YUGIOH_To_GY>
					state_game->count_chain++;
 8003dba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dbe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	785b      	ldrb	r3, [r3, #1]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003dd6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	781a      	ldrb	r2, [r3, #0]
 8003dde:	4b4f      	ldr	r3, [pc, #316]	; (8003f1c <GAME_PLAY_Phase_Management+0x2238>)
 8003de0:	9203      	str	r2, [sp, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	9202      	str	r2, [sp, #8]
 8003de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dea:	9201      	str	r2, [sp, #4]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	9200      	str	r2, [sp, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a4b      	ldr	r2, [pc, #300]	; (8003f20 <GAME_PLAY_Phase_Management+0x223c>)
 8003df4:	215a      	movs	r1, #90	; 0x5a
 8003df6:	2005      	movs	r0, #5
 8003df8:	f002 fe71 	bl	8006ade <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003dfc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	781a      	ldrb	r2, [r3, #0]
 8003e04:	4b45      	ldr	r3, [pc, #276]	; (8003f1c <GAME_PLAY_Phase_Management+0x2238>)
 8003e06:	9203      	str	r2, [sp, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	9202      	str	r2, [sp, #8]
 8003e0c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e10:	9201      	str	r2, [sp, #4]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	9200      	str	r2, [sp, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a45      	ldr	r2, [pc, #276]	; (8003f30 <GAME_PLAY_Phase_Management+0x224c>)
 8003e1a:	2169      	movs	r1, #105	; 0x69
 8003e1c:	2005      	movs	r0, #5
 8003e1e:	f002 fe5e 	bl	8006ade <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003e22:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	781a      	ldrb	r2, [r3, #0]
 8003e2a:	4b3c      	ldr	r3, [pc, #240]	; (8003f1c <GAME_PLAY_Phase_Management+0x2238>)
 8003e2c:	9203      	str	r2, [sp, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	9202      	str	r2, [sp, #8]
 8003e32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e36:	9201      	str	r2, [sp, #4]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	9200      	str	r2, [sp, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3a      	ldr	r2, [pc, #232]	; (8003f28 <GAME_PLAY_Phase_Management+0x2244>)
 8003e40:	215a      	movs	r1, #90	; 0x5a
 8003e42:	2005      	movs	r0, #5
 8003e44:	f002 fe4b 	bl	8006ade <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003e48:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	4b32      	ldr	r3, [pc, #200]	; (8003f1c <GAME_PLAY_Phase_Management+0x2238>)
 8003e52:	9203      	str	r2, [sp, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	9202      	str	r2, [sp, #8]
 8003e58:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003e5c:	9201      	str	r2, [sp, #4]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	9200      	str	r2, [sp, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a31      	ldr	r2, [pc, #196]	; (8003f2c <GAME_PLAY_Phase_Management+0x2248>)
 8003e66:	2169      	movs	r1, #105	; 0x69
 8003e68:	2005      	movs	r0, #5
 8003e6a:	f002 fe38 	bl	8006ade <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 8003e6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e72:	f003 fc15 	bl	80076a0 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003e76:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	2300      	movs	r3, #0
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	2326      	movs	r3, #38	; 0x26
 8003e86:	2280      	movs	r2, #128	; 0x80
 8003e88:	215a      	movs	r1, #90	; 0x5a
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	f002 ff70 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003e90:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	9301      	str	r3, [sp, #4]
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	2326      	movs	r3, #38	; 0x26
 8003ea0:	2280      	movs	r2, #128	; 0x80
 8003ea2:	215a      	movs	r1, #90	; 0x5a
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f002 ff63 	bl	8006d70 <ST7735_FillRectangleNSS>
			break;
 8003eaa:	e011      	b.n	8003ed0 <GAME_PLAY_Phase_Management+0x21ec>
			break;
 8003eac:	bf00      	nop
 8003eae:	f001 ba41 	b.w	8005334 <GAME_PLAY_Phase_Management+0x3650>
			break;
 8003eb2:	bf00      	nop
 8003eb4:	f001 ba3e 	b.w	8005334 <GAME_PLAY_Phase_Management+0x3650>
			break;
 8003eb8:	bf00      	nop
 8003eba:	f001 ba3b 	b.w	8005334 <GAME_PLAY_Phase_Management+0x3650>
			break;
 8003ebe:	bf00      	nop
 8003ec0:	f001 ba38 	b.w	8005334 <GAME_PLAY_Phase_Management+0x3650>
			break;
 8003ec4:	bf00      	nop
 8003ec6:	f001 ba35 	b.w	8005334 <GAME_PLAY_Phase_Management+0x3650>
			break;
 8003eca:	bf00      	nop
 8003ecc:	f001 ba32 	b.w	8005334 <GAME_PLAY_Phase_Management+0x3650>
			break;
 8003ed0:	bf00      	nop
		}
		break;
 8003ed2:	f001 ba2f 	b.w	8005334 <GAME_PLAY_Phase_Management+0x3650>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8003ed6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003eda:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003ede:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ee2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003ee6:	6811      	ldr	r1, [r2, #0]
 8003ee8:	6818      	ldr	r0, [r3, #0]
 8003eea:	f001 fd05 	bl	80058f8 <LCDvalue>
			switch(PBS){
 8003eee:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	f201 8220 	bhi.w	8005338 <GAME_PLAY_Phase_Management+0x3654>
 8003ef8:	a201      	add	r2, pc, #4	; (adr r2, 8003f00 <GAME_PLAY_Phase_Management+0x221c>)
 8003efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efe:	bf00      	nop
 8003f00:	08005315 	.word	0x08005315
 8003f04:	08003f35 	.word	0x08003f35
 8003f08:	08004665 	.word	0x08004665
 8003f0c:	0800432f 	.word	0x0800432f
 8003f10:	08004999 	.word	0x08004999
 8003f14:	08004c75 	.word	0x08004c75
 8003f18:	080051a5 	.word	0x080051a5
 8003f1c:	2400000c 	.word	0x2400000c
 8003f20:	08010df0 	.word	0x08010df0
 8003f24:	08010e50 	.word	0x08010e50
 8003f28:	08010e08 	.word	0x08010e08
 8003f2c:	08010dcc 	.word	0x08010dcc
 8003f30:	08010e60 	.word	0x08010e60
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8003f34:	4ba2      	ldr	r3, [pc, #648]	; (80041c0 <GAME_PLAY_Phase_Management+0x24dc>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	9202      	str	r2, [sp, #8]
 8003f3a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f3e:	9201      	str	r2, [sp, #4]
 8003f40:	685a      	ldr	r2, [r3, #4]
 8003f42:	9200      	str	r2, [sp, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a9f      	ldr	r2, [pc, #636]	; (80041c4 <GAME_PLAY_Phase_Management+0x24e0>)
 8003f48:	2123      	movs	r1, #35	; 0x23
 8003f4a:	206e      	movs	r0, #110	; 0x6e
 8003f4c:	f002 fd33 	bl	80069b6 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8003f50:	4b9b      	ldr	r3, [pc, #620]	; (80041c0 <GAME_PLAY_Phase_Management+0x24dc>)
 8003f52:	2200      	movs	r2, #0
 8003f54:	9202      	str	r2, [sp, #8]
 8003f56:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003f5a:	9201      	str	r2, [sp, #4]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	9200      	str	r2, [sp, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a98      	ldr	r2, [pc, #608]	; (80041c4 <GAME_PLAY_Phase_Management+0x24e0>)
 8003f64:	2123      	movs	r1, #35	; 0x23
 8003f66:	206e      	movs	r0, #110	; 0x6e
 8003f68:	f002 fd6f 	bl	8006a4a <ST7735_WriteString1>
				if(state_game->action == 50){
 8003f6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f70:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b32      	cmp	r3, #50	; 0x32
 8003f7a:	f040 809b 	bne.w	80040b4 <GAME_PLAY_Phase_Management+0x23d0>
					Player_Reading_Card_Monster_Battle(RFIDmain, state_game, playerDef);
 8003f7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f82:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003f86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f8a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8003f8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f92:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	6809      	ldr	r1, [r1, #0]
 8003f9a:	6818      	ldr	r0, [r3, #0]
 8003f9c:	f7fc fdae 	bl	8000afc <Player_Reading_Card_Monster_Battle>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4889      	ldr	r0, [pc, #548]	; (80041c8 <GAME_PLAY_Phase_Management+0x24e4>)
 8003fa4:	f006 fcca 	bl	800a93c <HAL_GPIO_ReadPin>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	f041 81b4 	bne.w	8005318 <GAME_PLAY_Phase_Management+0x3634>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8003fb0:	4886      	ldr	r0, [pc, #536]	; (80041cc <GAME_PLAY_Phase_Management+0x24e8>)
 8003fb2:	f009 fec1 	bl	800dd38 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8003fb6:	4986      	ldr	r1, [pc, #536]	; (80041d0 <GAME_PLAY_Phase_Management+0x24ec>)
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003fc4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fc8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	9301      	str	r3, [sp, #4]
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	2326      	movs	r3, #38	; 0x26
 8003fd8:	2280      	movs	r2, #128	; 0x80
 8003fda:	215a      	movs	r1, #90	; 0x5a
 8003fdc:	2000      	movs	r0, #0
 8003fde:	f002 fec7 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003fe2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fe6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	781a      	ldrb	r2, [r3, #0]
 8003fee:	4b79      	ldr	r3, [pc, #484]	; (80041d4 <GAME_PLAY_Phase_Management+0x24f0>)
 8003ff0:	9203      	str	r2, [sp, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	9202      	str	r2, [sp, #8]
 8003ff6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003ffa:	9201      	str	r2, [sp, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	9200      	str	r2, [sp, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a75      	ldr	r2, [pc, #468]	; (80041d8 <GAME_PLAY_Phase_Management+0x24f4>)
 8004004:	215a      	movs	r1, #90	; 0x5a
 8004006:	200f      	movs	r0, #15
 8004008:	f002 fd69 	bl	8006ade <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 800400c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004010:	f003 fb46 	bl	80076a0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004014:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004018:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	9301      	str	r3, [sp, #4]
 8004022:	2300      	movs	r3, #0
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	2326      	movs	r3, #38	; 0x26
 8004028:	2280      	movs	r2, #128	; 0x80
 800402a:	215a      	movs	r1, #90	; 0x5a
 800402c:	2000      	movs	r0, #0
 800402e:	f002 fe9f 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004032:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004036:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	9301      	str	r3, [sp, #4]
 8004040:	2300      	movs	r3, #0
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	2326      	movs	r3, #38	; 0x26
 8004046:	2280      	movs	r2, #128	; 0x80
 8004048:	215a      	movs	r1, #90	; 0x5a
 800404a:	2000      	movs	r0, #0
 800404c:	f002 fe90 	bl	8006d70 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8004050:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004054:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2200      	movs	r2, #0
 800405c:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 800405e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004062:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	f001 fb44 	bl	80056f4 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 800406c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004070:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 800407a:	2b02      	cmp	r3, #2
 800407c:	d108      	bne.n	8004090 <GAME_PLAY_Phase_Management+0x23ac>
							state_game->MainGame_State = second_player;
 800407e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004082:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2203      	movs	r2, #3
 800408a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 800408e:	e007      	b.n	80040a0 <GAME_PLAY_Phase_Management+0x23bc>
						}
						else{
							state_game->MainGame_State = first_player;
 8004090:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004094:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 80040a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 80040b0:	f001 b932 	b.w	8005318 <GAME_PLAY_Phase_Management+0x3634>
				else if(state_game->action == 51){
 80040b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b33      	cmp	r3, #51	; 0x33
 80040c2:	f041 8129 	bne.w	8005318 <GAME_PLAY_Phase_Management+0x3634>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80040c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	9301      	str	r3, [sp, #4]
 80040d4:	2300      	movs	r3, #0
 80040d6:	9300      	str	r3, [sp, #0]
 80040d8:	2326      	movs	r3, #38	; 0x26
 80040da:	2280      	movs	r2, #128	; 0x80
 80040dc:	215a      	movs	r1, #90	; 0x5a
 80040de:	2000      	movs	r0, #0
 80040e0:	f002 fe46 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80040e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040e8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	9301      	str	r3, [sp, #4]
 80040f2:	2300      	movs	r3, #0
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	2326      	movs	r3, #38	; 0x26
 80040f8:	2280      	movs	r2, #128	; 0x80
 80040fa:	215a      	movs	r1, #90	; 0x5a
 80040fc:	2000      	movs	r0, #0
 80040fe:	f002 fe37 	bl	8006d70 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 8004102:	2300      	movs	r3, #0
 8004104:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004108:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800410c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004116:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 800411a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800411e:	799b      	ldrb	r3, [r3, #6]
 8004120:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8004124:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004128:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	3338      	adds	r3, #56	; 0x38
 8004130:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8004134:	2300      	movs	r3, #0
 8004136:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 800413a:	e013      	b.n	8004164 <GAME_PLAY_Phase_Management+0x2480>
						if(ptrYugiohCard_dst->cardData == 0){
 800413c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <GAME_PLAY_Phase_Management+0x246c>
							check_def_mon++;
 8004146:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 800414a:	3301      	adds	r3, #1
 800414c:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 8004150:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004154:	3310      	adds	r3, #16
 8004156:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 800415a:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 800415e:	3301      	adds	r3, #1
 8004160:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8004164:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8004168:	2b02      	cmp	r3, #2
 800416a:	d9e7      	bls.n	800413c <GAME_PLAY_Phase_Management+0x2458>
					uint8_t flag_can_atk = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004172:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004176:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004180:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8004184:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004188:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3338      	adds	r3, #56	; 0x38
 8004190:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8004194:	2300      	movs	r3, #0
 8004196:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 800419a:	e02c      	b.n	80041f6 <GAME_PLAY_Phase_Management+0x2512>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 800419c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d11a      	bne.n	80041e2 <GAME_PLAY_Phase_Management+0x24fe>
							if(ptrYugiohCard_dst->cardState == 1){
 80041ac:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80041b0:	789b      	ldrb	r3, [r3, #2]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d112      	bne.n	80041dc <GAME_PLAY_Phase_Management+0x24f8>
								flag_can_atk = 2;
 80041b6:	2302      	movs	r3, #2
 80041b8:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 80041bc:	e01f      	b.n	80041fe <GAME_PLAY_Phase_Management+0x251a>
 80041be:	bf00      	nop
 80041c0:	2400000c 	.word	0x2400000c
 80041c4:	08010e70 	.word	0x08010e70
 80041c8:	58020800 	.word	0x58020800
 80041cc:	240002e8 	.word	0x240002e8
 80041d0:	24000ea0 	.word	0x24000ea0
 80041d4:	24000014 	.word	0x24000014
 80041d8:	08010e74 	.word	0x08010e74
								flag_can_atk = 1;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 80041e2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80041e6:	3310      	adds	r3, #16
 80041e8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 80041ec:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 80041f0:	3301      	adds	r3, #1
 80041f2:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 80041f6:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d9ce      	bls.n	800419c <GAME_PLAY_Phase_Management+0x24b8>
					if (check_def_mon < 3)
 80041fe:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004202:	2b02      	cmp	r3, #2
 8004204:	d810      	bhi.n	8004228 <GAME_PLAY_Phase_Management+0x2544>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8004206:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 800420a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800420e:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004212:	6812      	ldr	r2, [r2, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	4413      	add	r3, r2
 800421a:	3304      	adds	r3, #4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d102      	bne.n	8004228 <GAME_PLAY_Phase_Management+0x2544>
							flag_can_atk = 1;
 8004222:	2301      	movs	r3, #1
 8004224:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 8004228:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 800422c:	2b02      	cmp	r3, #2
 800422e:	d165      	bne.n	80042fc <GAME_PLAY_Phase_Management+0x2618>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8004230:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004234:	7a1b      	ldrb	r3, [r3, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d047      	beq.n	80042ca <GAME_PLAY_Phase_Management+0x25e6>
 800423a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800423e:	789b      	ldrb	r3, [r3, #2]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d142      	bne.n	80042ca <GAME_PLAY_Phase_Management+0x25e6>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8004244:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004248:	7a1b      	ldrb	r3, [r3, #8]
 800424a:	3b01      	subs	r3, #1
 800424c:	b2da      	uxtb	r2, r3
 800424e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004252:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8004254:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004258:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004262:	4619      	mov	r1, r3
 8004264:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004268:	f7fc fa0c 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 800426c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004270:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800427a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 800427e:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004282:	2b03      	cmp	r3, #3
 8004284:	d104      	bne.n	8004290 <GAME_PLAY_Phase_Management+0x25ac>
								ptrYugiohCard_dst->targetPosition = 99;
 8004286:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800428a:	2263      	movs	r2, #99	; 0x63
 800428c:	71da      	strb	r2, [r3, #7]
 800428e:	e004      	b.n	800429a <GAME_PLAY_Phase_Management+0x25b6>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8004290:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004294:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 8004298:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 800429a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800429e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	f7fd f8c6 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 80042a8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042ac:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2234      	movs	r2, #52	; 0x34
 80042b4:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 80042b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042ba:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2203      	movs	r2, #3
 80042c2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80042c6:	f001 b827 	b.w	8005318 <GAME_PLAY_Phase_Management+0x3634>
							state_game->test = 222;
 80042ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042ce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	22de      	movs	r2, #222	; 0xde
 80042d6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 80042da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042de:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2232      	movs	r2, #50	; 0x32
 80042e6:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 80042e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80042ec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80042f8:	f001 b80e 	b.w	8005318 <GAME_PLAY_Phase_Management+0x3634>
						state_game->test = 223;
 80042fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004300:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	22df      	movs	r2, #223	; 0xdf
 8004308:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 800430c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004310:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2232      	movs	r2, #50	; 0x32
 8004318:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800431a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800431e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800432a:	f000 bff5 	b.w	8005318 <GAME_PLAY_Phase_Management+0x3634>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800432e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004332:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	4bc5      	ldr	r3, [pc, #788]	; (8004650 <GAME_PLAY_Phase_Management+0x296c>)
 800433c:	9203      	str	r2, [sp, #12]
 800433e:	2200      	movs	r2, #0
 8004340:	9202      	str	r2, [sp, #8]
 8004342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004346:	9201      	str	r2, [sp, #4]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	9200      	str	r2, [sp, #0]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4ac1      	ldr	r2, [pc, #772]	; (8004654 <GAME_PLAY_Phase_Management+0x2970>)
 8004350:	215a      	movs	r1, #90	; 0x5a
 8004352:	2005      	movs	r0, #5
 8004354:	f002 fbc3 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004358:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800435c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	781a      	ldrb	r2, [r3, #0]
 8004364:	4bba      	ldr	r3, [pc, #744]	; (8004650 <GAME_PLAY_Phase_Management+0x296c>)
 8004366:	9203      	str	r2, [sp, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	9202      	str	r2, [sp, #8]
 800436c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004370:	9201      	str	r2, [sp, #4]
 8004372:	685a      	ldr	r2, [r3, #4]
 8004374:	9200      	str	r2, [sp, #0]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4ab7      	ldr	r2, [pc, #732]	; (8004658 <GAME_PLAY_Phase_Management+0x2974>)
 800437a:	2169      	movs	r1, #105	; 0x69
 800437c:	2005      	movs	r0, #5
 800437e:	f002 fbae 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004382:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004386:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	781a      	ldrb	r2, [r3, #0]
 800438e:	4bb0      	ldr	r3, [pc, #704]	; (8004650 <GAME_PLAY_Phase_Management+0x296c>)
 8004390:	9203      	str	r2, [sp, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	9202      	str	r2, [sp, #8]
 8004396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439a:	9201      	str	r2, [sp, #4]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	9200      	str	r2, [sp, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4aae      	ldr	r2, [pc, #696]	; (800465c <GAME_PLAY_Phase_Management+0x2978>)
 80043a4:	215a      	movs	r1, #90	; 0x5a
 80043a6:	2005      	movs	r0, #5
 80043a8:	f002 fb99 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80043ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043b0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	781a      	ldrb	r2, [r3, #0]
 80043b8:	4ba5      	ldr	r3, [pc, #660]	; (8004650 <GAME_PLAY_Phase_Management+0x296c>)
 80043ba:	9203      	str	r2, [sp, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	9202      	str	r2, [sp, #8]
 80043c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043c4:	9201      	str	r2, [sp, #4]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4aa4      	ldr	r2, [pc, #656]	; (8004660 <GAME_PLAY_Phase_Management+0x297c>)
 80043ce:	2169      	movs	r1, #105	; 0x69
 80043d0:	2005      	movs	r0, #5
 80043d2:	f002 fb84 	bl	8006ade <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 80043d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b34      	cmp	r3, #52	; 0x34
 80043e4:	d141      	bne.n	800446a <GAME_PLAY_Phase_Management+0x2786>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 80043e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043ea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	789b      	ldrb	r3, [r3, #2]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d115      	bne.n	8004422 <GAME_PLAY_Phase_Management+0x273e>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 80043f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80043fa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2204      	movs	r2, #4
 8004402:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 8004406:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800440a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2236      	movs	r2, #54	; 0x36
 8004412:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 8004414:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004418:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2200      	movs	r2, #0
 8004420:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8004422:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004426:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 800442a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800442e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004432:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004436:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800443a:	6812      	ldr	r2, [r2, #0]
 800443c:	6809      	ldr	r1, [r1, #0]
 800443e:	6818      	ldr	r0, [r3, #0]
 8004440:	f7fc fc04 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 8004444:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004448:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 800444c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004450:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004454:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004458:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	6809      	ldr	r1, [r1, #0]
 8004460:	6818      	ldr	r0, [r3, #0]
 8004462:	f7fc fef5 	bl	8001250 <Player_Reading_Card_Monster_Effect>





				break;
 8004466:	f000 bf59 	b.w	800531c <GAME_PLAY_Phase_Management+0x3638>
				else if ((state_game->action == 53 ))
 800446a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800446e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	2b35      	cmp	r3, #53	; 0x35
 8004478:	f040 8750 	bne.w	800531c <GAME_PLAY_Phase_Management+0x3638>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800447c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004480:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	9301      	str	r3, [sp, #4]
 800448a:	2300      	movs	r3, #0
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	2326      	movs	r3, #38	; 0x26
 8004490:	2280      	movs	r2, #128	; 0x80
 8004492:	215a      	movs	r1, #90	; 0x5a
 8004494:	2000      	movs	r0, #0
 8004496:	f002 fc6b 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800449a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800449e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	9301      	str	r3, [sp, #4]
 80044a8:	2300      	movs	r3, #0
 80044aa:	9300      	str	r3, [sp, #0]
 80044ac:	2326      	movs	r3, #38	; 0x26
 80044ae:	2280      	movs	r2, #128	; 0x80
 80044b0:	215a      	movs	r1, #90	; 0x5a
 80044b2:	2000      	movs	r0, #0
 80044b4:	f002 fc5c 	bl	8006d70 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80044b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044bc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80044c6:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 80044ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044ce:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80044d2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	f001 f8b4 	bl	8005644 <YUGIOH_Check_Trap_On_board>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					if(ptrYugiohCard_src->cardSignature == 3){
 80044e2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b03      	cmp	r3, #3
 80044ea:	d14f      	bne.n	800458c <GAME_PLAY_Phase_Management+0x28a8>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 80044ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044f4:	6818      	ldr	r0, [r3, #0]
 80044f6:	f7fd f848 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 80044fa:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80044fe:	2200      	movs	r2, #0
 8004500:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8004502:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004506:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004510:	4619      	mov	r1, r3
 8004512:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8004516:	f7fc f8b5 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 800451a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800451e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004528:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800452c:	6812      	ldr	r2, [r2, #0]
 800452e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 8004532:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004536:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004540:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 800454a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800454e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004558:	3301      	adds	r3, #1
 800455a:	b2da      	uxtb	r2, r3
 800455c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004560:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 800456a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800456e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 800457a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800457e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2234      	movs	r2, #52	; 0x34
 8004586:	701a      	strb	r2, [r3, #0]
				break;
 8004588:	f000 bec8 	b.w	800531c <GAME_PLAY_Phase_Management+0x3638>
						if (idx != 255)
 800458c:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8004590:	2bff      	cmp	r3, #255	; 0xff
 8004592:	f000 86c3 	beq.w	800531c <GAME_PLAY_Phase_Management+0x3638>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8004596:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800459a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	f7fc fff3 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80045a4:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 80045a8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80045ac:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	3308      	adds	r3, #8
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	4413      	add	r3, r2
 80045b8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80045bc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80045c0:	2200      	movs	r2, #0
 80045c2:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80045c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80045d2:	4619      	mov	r1, r3
 80045d4:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80045d8:	f7fc f854 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 80045dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80045ea:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 80045f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80045f8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004602:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 800460c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004610:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800461a:	3301      	adds	r3, #1
 800461c:	b2da      	uxtb	r2, r3
 800461e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004622:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 800462c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004630:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 800463c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004640:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2234      	movs	r2, #52	; 0x34
 8004648:	701a      	strb	r2, [r3, #0]
				break;
 800464a:	f000 be67 	b.w	800531c <GAME_PLAY_Phase_Management+0x3638>
 800464e:	bf00      	nop
 8004650:	2400000c 	.word	0x2400000c
 8004654:	08010e80 	.word	0x08010e80
 8004658:	08010e90 	.word	0x08010e90
 800465c:	08010e9c 	.word	0x08010e9c
 8004660:	08010eac 	.word	0x08010eac
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004664:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004668:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	781a      	ldrb	r2, [r3, #0]
 8004670:	4bc4      	ldr	r3, [pc, #784]	; (8004984 <GAME_PLAY_Phase_Management+0x2ca0>)
 8004672:	9203      	str	r2, [sp, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	9202      	str	r2, [sp, #8]
 8004678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800467c:	9201      	str	r2, [sp, #4]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	9200      	str	r2, [sp, #0]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4ac0      	ldr	r2, [pc, #768]	; (8004988 <GAME_PLAY_Phase_Management+0x2ca4>)
 8004686:	215a      	movs	r1, #90	; 0x5a
 8004688:	2005      	movs	r0, #5
 800468a:	f002 fa28 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800468e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004692:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	4bba      	ldr	r3, [pc, #744]	; (8004984 <GAME_PLAY_Phase_Management+0x2ca0>)
 800469c:	9203      	str	r2, [sp, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	9202      	str	r2, [sp, #8]
 80046a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046a6:	9201      	str	r2, [sp, #4]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	9200      	str	r2, [sp, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4ab7      	ldr	r2, [pc, #732]	; (800498c <GAME_PLAY_Phase_Management+0x2ca8>)
 80046b0:	2169      	movs	r1, #105	; 0x69
 80046b2:	2005      	movs	r0, #5
 80046b4:	f002 fa13 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80046b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046bc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	781a      	ldrb	r2, [r3, #0]
 80046c4:	4baf      	ldr	r3, [pc, #700]	; (8004984 <GAME_PLAY_Phase_Management+0x2ca0>)
 80046c6:	9203      	str	r2, [sp, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	9202      	str	r2, [sp, #8]
 80046cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046d0:	9201      	str	r2, [sp, #4]
 80046d2:	685a      	ldr	r2, [r3, #4]
 80046d4:	9200      	str	r2, [sp, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4aad      	ldr	r2, [pc, #692]	; (8004990 <GAME_PLAY_Phase_Management+0x2cac>)
 80046da:	215a      	movs	r1, #90	; 0x5a
 80046dc:	2005      	movs	r0, #5
 80046de:	f002 f9fe 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80046e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046e6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	4ba5      	ldr	r3, [pc, #660]	; (8004984 <GAME_PLAY_Phase_Management+0x2ca0>)
 80046f0:	9203      	str	r2, [sp, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	9202      	str	r2, [sp, #8]
 80046f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046fa:	9201      	str	r2, [sp, #4]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	9200      	str	r2, [sp, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4aa4      	ldr	r2, [pc, #656]	; (8004994 <GAME_PLAY_Phase_Management+0x2cb0>)
 8004704:	2169      	movs	r1, #105	; 0x69
 8004706:	2005      	movs	r0, #5
 8004708:	f002 f9e9 	bl	8006ade <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 800470c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004710:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b34      	cmp	r3, #52	; 0x34
 800471a:	d141      	bne.n	80047a0 <GAME_PLAY_Phase_Management+0x2abc>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 800471c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004720:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	789b      	ldrb	r3, [r3, #2]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d115      	bne.n	8004758 <GAME_PLAY_Phase_Management+0x2a74>
						//affect
						state_game->action = 54;
 800472c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004730:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2236      	movs	r2, #54	; 0x36
 8004738:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 800473a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800473e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2204      	movs	r2, #4
 8004746:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 800474a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800474e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2200      	movs	r2, #0
 8004756:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8004758:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800475c:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004760:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004764:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004768:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800476c:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	6809      	ldr	r1, [r1, #0]
 8004774:	6818      	ldr	r0, [r3, #0]
 8004776:	f7fc fa69 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 800477a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800477e:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004782:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004786:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800478a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800478e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	6809      	ldr	r1, [r1, #0]
 8004796:	6818      	ldr	r0, [r3, #0]
 8004798:	f7fc fd5a 	bl	8001250 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 800479c:	f000 bdc0 	b.w	8005320 <GAME_PLAY_Phase_Management+0x363c>
				else if ((state_game->action == 53 )){
 80047a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b35      	cmp	r3, #53	; 0x35
 80047ae:	f040 85b7 	bne.w	8005320 <GAME_PLAY_Phase_Management+0x363c>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80047b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	9301      	str	r3, [sp, #4]
 80047c0:	2300      	movs	r3, #0
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2326      	movs	r3, #38	; 0x26
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	215a      	movs	r1, #90	; 0x5a
 80047ca:	2000      	movs	r0, #0
 80047cc:	f002 fad0 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80047d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047d4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	9301      	str	r3, [sp, #4]
 80047de:	2300      	movs	r3, #0
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	2326      	movs	r3, #38	; 0x26
 80047e4:	2280      	movs	r2, #128	; 0x80
 80047e6:	215a      	movs	r1, #90	; 0x5a
 80047e8:	2000      	movs	r0, #0
 80047ea:	f002 fac1 	bl	8006d70 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80047ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80047f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80047fc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8004800:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004804:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004808:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800480c:	6818      	ldr	r0, [r3, #0]
 800480e:	f000 ff19 	bl	8005644 <YUGIOH_Check_Trap_On_board>
 8004812:	4603      	mov	r3, r0
 8004814:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					if(ptrYugiohCard_src->cardSignature == 3){
 8004818:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d14f      	bne.n	80048c2 <GAME_PLAY_Phase_Management+0x2bde>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8004822:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004826:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	f7fc fead 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8004830:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004834:	2200      	movs	r2, #0
 8004836:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8004838:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800483c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004846:	4619      	mov	r1, r3
 8004848:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800484c:	f7fb ff1a 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8004850:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004854:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800485e:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8004868:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800486c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004876:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8004880:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004884:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800488e:	3301      	adds	r3, #1
 8004890:	b2da      	uxtb	r2, r3
 8004892:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004896:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 80048a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2203      	movs	r2, #3
 80048ac:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80048b0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048b4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2234      	movs	r2, #52	; 0x34
 80048bc:	701a      	strb	r2, [r3, #0]
				break;
 80048be:	f000 bd2f 	b.w	8005320 <GAME_PLAY_Phase_Management+0x363c>
						if (idx != 255)
 80048c2:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80048c6:	2bff      	cmp	r3, #255	; 0xff
 80048c8:	f000 852a 	beq.w	8005320 <GAME_PLAY_Phase_Management+0x363c>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 80048cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048d0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	f7fc fe58 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80048da:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 80048de:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80048e2:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	3308      	adds	r3, #8
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	4413      	add	r3, r2
 80048ee:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80048f2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80048f6:	2200      	movs	r2, #0
 80048f8:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80048fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80048fe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004908:	4619      	mov	r1, r3
 800490a:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800490e:	f7fb feb9 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8004912:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004916:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004920:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 800492a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800492e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004938:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8004942:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004946:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004950:	3301      	adds	r3, #1
 8004952:	b2da      	uxtb	r2, r3
 8004954:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004958:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8004962:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004966:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 8004972:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004976:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2234      	movs	r2, #52	; 0x34
 800497e:	701a      	strb	r2, [r3, #0]
				break;
 8004980:	f000 bcce 	b.w	8005320 <GAME_PLAY_Phase_Management+0x363c>
 8004984:	2400000c 	.word	0x2400000c
 8004988:	08010e9c 	.word	0x08010e9c
 800498c:	08010eb8 	.word	0x08010eb8
 8004990:	08010ec0 	.word	0x08010ec0
 8004994:	08010ed0 	.word	0x08010ed0
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004998:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800499c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	781a      	ldrb	r2, [r3, #0]
 80049a4:	4bb1      	ldr	r3, [pc, #708]	; (8004c6c <GAME_PLAY_Phase_Management+0x2f88>)
 80049a6:	9203      	str	r2, [sp, #12]
 80049a8:	2200      	movs	r2, #0
 80049aa:	9202      	str	r2, [sp, #8]
 80049ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049b0:	9201      	str	r2, [sp, #4]
 80049b2:	685a      	ldr	r2, [r3, #4]
 80049b4:	9200      	str	r2, [sp, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4aad      	ldr	r2, [pc, #692]	; (8004c70 <GAME_PLAY_Phase_Management+0x2f8c>)
 80049ba:	215a      	movs	r1, #90	; 0x5a
 80049bc:	2005      	movs	r0, #5
 80049be:	f002 f88e 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80049c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	781a      	ldrb	r2, [r3, #0]
 80049ce:	4ba7      	ldr	r3, [pc, #668]	; (8004c6c <GAME_PLAY_Phase_Management+0x2f88>)
 80049d0:	9203      	str	r2, [sp, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	9202      	str	r2, [sp, #8]
 80049d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80049da:	9201      	str	r2, [sp, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	9200      	str	r2, [sp, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4aa3      	ldr	r2, [pc, #652]	; (8004c70 <GAME_PLAY_Phase_Management+0x2f8c>)
 80049e4:	215a      	movs	r1, #90	; 0x5a
 80049e6:	2005      	movs	r0, #5
 80049e8:	f002 f879 	bl	8006ade <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 80049ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049f0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	4619      	mov	r1, r3
 80049fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049fe:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004a02:	f501 7394 	add.w	r3, r1, #296	; 0x128
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8004a12:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a16:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	785b      	ldrb	r3, [r3, #1]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a24:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004a28:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	4413      	add	r3, r2
 8004a32:	3304      	adds	r3, #4
 8004a34:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

				if(state_game->action == 54)
 8004a38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a3c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	2b36      	cmp	r3, #54	; 0x36
 8004a46:	f040 846d 	bne.w	8005324 <GAME_PLAY_Phase_Management+0x3640>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8004a4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	785a      	ldrb	r2, [r3, #1]
 8004a56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a5a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004a64:	429a      	cmp	r2, r3
 8004a66:	f080 80a2 	bcs.w	8004bae <GAME_PLAY_Phase_Management+0x2eca>
					{
						state_game->test = 165;
 8004a6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	22a5      	movs	r2, #165	; 0xa5
 8004a76:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8004a7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	785b      	ldrb	r3, [r3, #1]
 8004a86:	4619      	mov	r1, r3
 8004a88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a8c:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004a90:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	4413      	add	r3, r2
 8004a9a:	3304      	adds	r3, #4
 8004a9c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

						if (ptrYugiohCard_src->cardSignature == 3)
 8004aa0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b03      	cmp	r3, #3
 8004aa8:	d11d      	bne.n	8004ae6 <GAME_PLAY_Phase_Management+0x2e02>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 8004aaa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2262      	movs	r2, #98	; 0x62
 8004ab2:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004ab6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f7fc fdae 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8004ac6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004aca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	785b      	ldrb	r3, [r3, #1]
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ada:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8004ae2:	f000 bc1f 	b.w	8005324 <GAME_PLAY_Phase_Management+0x3640>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8004ae6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004aea:	781b      	ldrb	r3, [r3, #0]
 8004aec:	2b0e      	cmp	r3, #14
 8004aee:	d004      	beq.n	8004afa <GAME_PLAY_Phase_Management+0x2e16>
 8004af0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b0f      	cmp	r3, #15
 8004af8:	d128      	bne.n	8004b4c <GAME_PLAY_Phase_Management+0x2e68>
							state_game->test = 133;
 8004afa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004afe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2285      	movs	r2, #133	; 0x85
 8004b06:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8004b0a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4619      	mov	r1, r3
 8004b18:	4610      	mov	r0, r2
 8004b1a:	f000 fd0d 	bl	8005538 <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004b1e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fc fd7a 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8004b2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b32:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b42:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	705a      	strb	r2, [r3, #1]
				break;
 8004b4a:	e3eb      	b.n	8005324 <GAME_PLAY_Phase_Management+0x3640>
						else if(ptrYugiohCard_src->cardSignature == 20){
 8004b4c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	2b14      	cmp	r3, #20
 8004b54:	f040 83e6 	bne.w	8005324 <GAME_PLAY_Phase_Management+0x3640>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004b58:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc fd5d 	bl	8001622 <YUGIOH_To_GY>
							if(state_game->MainGame_State == first_player){
 8004b68:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b6c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d108      	bne.n	8004b8c <GAME_PLAY_Phase_Management+0x2ea8>
								state_game->MainGame_State = second_player;
 8004b7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b7e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2203      	movs	r2, #3
 8004b86:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8004b8a:	e007      	b.n	8004b9c <GAME_PLAY_Phase_Management+0x2eb8>
								state_game->MainGame_State = first_player;
 8004b8c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b90:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2202      	movs	r2, #2
 8004b98:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 8004b9c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ba0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 8004bac:	e3ba      	b.n	8005324 <GAME_PLAY_Phase_Management+0x3640>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004bae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bb2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	9301      	str	r3, [sp, #4]
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	2326      	movs	r3, #38	; 0x26
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	215a      	movs	r1, #90	; 0x5a
 8004bc6:	2000      	movs	r0, #0
 8004bc8:	f002 f8d2 	bl	8006d70 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004bcc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bd0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	2300      	movs	r3, #0
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	2326      	movs	r3, #38	; 0x26
 8004be0:	2280      	movs	r2, #128	; 0x80
 8004be2:	215a      	movs	r1, #90	; 0x5a
 8004be4:	2000      	movs	r0, #0
 8004be6:	f002 f8c3 	bl	8006d70 <ST7735_FillRectangleNSS>
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004bea:	2300      	movs	r3, #0
 8004bec:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8004bf0:	e020      	b.n	8004c34 <GAME_PLAY_Phase_Management+0x2f50>
							state_game->ptrChainUser[i] = &dummyPlayer;
 8004bf2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bf6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c00:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	f107 0210 	add.w	r2, r7, #16
 8004c0c:	605a      	str	r2, [r3, #4]
							state_game->ptrChainOpponent[i] = &dummyPlayer;
 8004c0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c12:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c1c:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	f107 0210 	add.w	r2, r7, #16
 8004c28:	605a      	str	r2, [r3, #4]
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8004c2a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c2e:	3301      	adds	r3, #1
 8004c30:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8004c34:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8004c38:	2b05      	cmp	r3, #5
 8004c3a:	ddda      	ble.n	8004bf2 <GAME_PLAY_Phase_Management+0x2f0e>
						state_game->ChainCount = 0;
 8004c3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c40:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->action = 50;
 8004c4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2232      	movs	r2, #50	; 0x32
 8004c58:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8004c5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c5e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2205      	movs	r2, #5
 8004c66:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004c6a:	e35b      	b.n	8005324 <GAME_PLAY_Phase_Management+0x3640>
 8004c6c:	2400000c 	.word	0x2400000c
 8004c70:	08010ee0 	.word	0x08010ee0
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8004c74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c78:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004c82:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8004c86:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c8a:	791b      	ldrb	r3, [r3, #4]
 8004c8c:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243

				if(ptrYugiohCard_src->targetPosition == 99)
 8004c90:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c94:	79db      	ldrb	r3, [r3, #7]
 8004c96:	2b63      	cmp	r3, #99	; 0x63
 8004c98:	d122      	bne.n	8004ce0 <GAME_PLAY_Phase_Management+0x2ffc>
				{
					playerDef->life_point -= atk*100;
 8004c9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004c9e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	889a      	ldrh	r2, [r3, #4]
 8004ca6:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4619      	mov	r1, r3
 8004cae:	0249      	lsls	r1, r1, #9
 8004cb0:	1ac9      	subs	r1, r1, r3
 8004cb2:	0089      	lsls	r1, r1, #2
 8004cb4:	4419      	add	r1, r3
 8004cb6:	00c9      	lsls	r1, r1, #3
 8004cb8:	1acb      	subs	r3, r1, r3
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	4413      	add	r3, r2
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cc6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8004cce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cd2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2206      	movs	r2, #6
 8004cda:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					}
				}


				break;
 8004cde:	e323      	b.n	8005328 <GAME_PLAY_Phase_Management+0x3644>
				else if(ptrYugiohCard_src->targetPosition == 98)
 8004ce0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004ce4:	79db      	ldrb	r3, [r3, #7]
 8004ce6:	2b62      	cmp	r3, #98	; 0x62
 8004ce8:	d108      	bne.n	8004cfc <GAME_PLAY_Phase_Management+0x3018>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8004cea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2206      	movs	r2, #6
 8004cf6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004cfa:	e315      	b.n	8005328 <GAME_PLAY_Phase_Management+0x3644>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8004cfc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d00:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	3308      	adds	r3, #8
 8004d08:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8004d0c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004d10:	79db      	ldrb	r3, [r3, #7]
 8004d12:	4619      	mov	r1, r3
 8004d14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d18:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004d1c:	010b      	lsls	r3, r1, #4
 8004d1e:	3308      	adds	r3, #8
 8004d20:	6812      	ldr	r2, [r2, #0]
 8004d22:	4413      	add	r3, r2
 8004d24:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 8004d28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d2c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2236      	movs	r2, #54	; 0x36
 8004d34:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8004d38:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004d3c:	789b      	ldrb	r3, [r3, #2]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	f040 8100 	bne.w	8004f44 <GAME_PLAY_Phase_Management+0x3260>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004d44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d48:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	781a      	ldrb	r2, [r3, #0]
 8004d50:	4b77      	ldr	r3, [pc, #476]	; (8004f30 <GAME_PLAY_Phase_Management+0x324c>)
 8004d52:	9203      	str	r2, [sp, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	9202      	str	r2, [sp, #8]
 8004d58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d5c:	9201      	str	r2, [sp, #4]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	9200      	str	r2, [sp, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a73      	ldr	r2, [pc, #460]	; (8004f34 <GAME_PLAY_Phase_Management+0x3250>)
 8004d66:	215a      	movs	r1, #90	; 0x5a
 8004d68:	2005      	movs	r0, #5
 8004d6a:	f001 feb8 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004d6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d72:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	781a      	ldrb	r2, [r3, #0]
 8004d7a:	4b6d      	ldr	r3, [pc, #436]	; (8004f30 <GAME_PLAY_Phase_Management+0x324c>)
 8004d7c:	9203      	str	r2, [sp, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	9202      	str	r2, [sp, #8]
 8004d82:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004d86:	9201      	str	r2, [sp, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	9200      	str	r2, [sp, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a6a      	ldr	r2, [pc, #424]	; (8004f38 <GAME_PLAY_Phase_Management+0x3254>)
 8004d90:	2169      	movs	r1, #105	; 0x69
 8004d92:	2005      	movs	r0, #5
 8004d94:	f001 fea3 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004d98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d9c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	781a      	ldrb	r2, [r3, #0]
 8004da4:	4b62      	ldr	r3, [pc, #392]	; (8004f30 <GAME_PLAY_Phase_Management+0x324c>)
 8004da6:	9203      	str	r2, [sp, #12]
 8004da8:	2200      	movs	r2, #0
 8004daa:	9202      	str	r2, [sp, #8]
 8004dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004db0:	9201      	str	r2, [sp, #4]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	9200      	str	r2, [sp, #0]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a60      	ldr	r2, [pc, #384]	; (8004f3c <GAME_PLAY_Phase_Management+0x3258>)
 8004dba:	215a      	movs	r1, #90	; 0x5a
 8004dbc:	2005      	movs	r0, #5
 8004dbe:	f001 fe8e 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004dc2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dc6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	781a      	ldrb	r2, [r3, #0]
 8004dce:	4b58      	ldr	r3, [pc, #352]	; (8004f30 <GAME_PLAY_Phase_Management+0x324c>)
 8004dd0:	9203      	str	r2, [sp, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	9202      	str	r2, [sp, #8]
 8004dd6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004dda:	9201      	str	r2, [sp, #4]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	9200      	str	r2, [sp, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a57      	ldr	r2, [pc, #348]	; (8004f40 <GAME_PLAY_Phase_Management+0x325c>)
 8004de4:	2169      	movs	r1, #105	; 0x69
 8004de6:	2005      	movs	r0, #5
 8004de8:	f001 fe79 	bl	8006ade <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 8004dec:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004df0:	795b      	ldrb	r3, [r3, #5]
 8004df2:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
						if(atk < def){
 8004df6:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8004dfa:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d25e      	bcs.n	8004ec0 <GAME_PLAY_Phase_Management+0x31dc>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004e02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	9301      	str	r3, [sp, #4]
 8004e10:	2300      	movs	r3, #0
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	2326      	movs	r3, #38	; 0x26
 8004e16:	2280      	movs	r2, #128	; 0x80
 8004e18:	215a      	movs	r1, #90	; 0x5a
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f001 ffa8 	bl	8006d70 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004e20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e24:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	2300      	movs	r3, #0
 8004e30:	9300      	str	r3, [sp, #0]
 8004e32:	2326      	movs	r3, #38	; 0x26
 8004e34:	2280      	movs	r2, #128	; 0x80
 8004e36:	215a      	movs	r1, #90	; 0x5a
 8004e38:	2000      	movs	r0, #0
 8004e3a:	f001 ff99 	bl	8006d70 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 8004e3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e42:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	889a      	ldrh	r2, [r3, #4]
 8004e4a:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
 8004e4e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8004e52:	1acb      	subs	r3, r1, r3
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	4619      	mov	r1, r3
 8004e58:	0249      	lsls	r1, r1, #9
 8004e5a:	1ac9      	subs	r1, r1, r3
 8004e5c:	0089      	lsls	r1, r1, #2
 8004e5e:	4419      	add	r1, r3
 8004e60:	00c9      	lsls	r1, r1, #3
 8004e62:	1acb      	subs	r3, r1, r3
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e70:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8004e78:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004e7c:	799b      	ldrb	r3, [r3, #6]
 8004e7e:	4619      	mov	r1, r3
 8004e80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e84:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8004e88:	010b      	lsls	r3, r1, #4
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	6812      	ldr	r2, [r2, #0]
 8004e8e:	441a      	add	r2, r3
 8004e90:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e94:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004e98:	4611      	mov	r1, r2
 8004e9a:	6818      	ldr	r0, [r3, #0]
 8004e9c:	f7fc fbc1 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8004ea0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ea4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ea8:	6818      	ldr	r0, [r3, #0]
 8004eaa:	f7fc fac3 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004eae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004eb2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2206      	movs	r2, #6
 8004eba:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004ebe:	e233      	b.n	8005328 <GAME_PLAY_Phase_Management+0x3644>
						else if(atk > def){
 8004ec0:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8004ec4:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	f240 822d 	bls.w	8005328 <GAME_PLAY_Phase_Management+0x3644>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004ece:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ed2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	9301      	str	r3, [sp, #4]
 8004edc:	2300      	movs	r3, #0
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	2326      	movs	r3, #38	; 0x26
 8004ee2:	2280      	movs	r2, #128	; 0x80
 8004ee4:	215a      	movs	r1, #90	; 0x5a
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f001 ff42 	bl	8006d70 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004eec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ef0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	2300      	movs	r3, #0
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	2326      	movs	r3, #38	; 0x26
 8004f00:	2280      	movs	r2, #128	; 0x80
 8004f02:	215a      	movs	r1, #90	; 0x5a
 8004f04:	2000      	movs	r0, #0
 8004f06:	f001 ff33 	bl	8006d70 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8004f0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f0e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f12:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8004f16:	6818      	ldr	r0, [r3, #0]
 8004f18:	f7fc fb83 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8004f1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f20:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2206      	movs	r2, #6
 8004f28:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004f2c:	e1fc      	b.n	8005328 <GAME_PLAY_Phase_Management+0x3644>
 8004f2e:	bf00      	nop
 8004f30:	2400000c 	.word	0x2400000c
 8004f34:	08010ef0 	.word	0x08010ef0
 8004f38:	08010f00 	.word	0x08010f00
 8004f3c:	08010f10 	.word	0x08010f10
 8004f40:	08010f20 	.word	0x08010f20
					else if(ptrYugiohCard_dst->cardState == 1){
 8004f44:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004f48:	789b      	ldrb	r3, [r3, #2]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	f040 81ec 	bne.w	8005328 <GAME_PLAY_Phase_Management+0x3644>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004f50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f54:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	781a      	ldrb	r2, [r3, #0]
 8004f5c:	4bba      	ldr	r3, [pc, #744]	; (8005248 <GAME_PLAY_Phase_Management+0x3564>)
 8004f5e:	9203      	str	r2, [sp, #12]
 8004f60:	2200      	movs	r2, #0
 8004f62:	9202      	str	r2, [sp, #8]
 8004f64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f68:	9201      	str	r2, [sp, #4]
 8004f6a:	685a      	ldr	r2, [r3, #4]
 8004f6c:	9200      	str	r2, [sp, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4ab6      	ldr	r2, [pc, #728]	; (800524c <GAME_PLAY_Phase_Management+0x3568>)
 8004f72:	215a      	movs	r1, #90	; 0x5a
 8004f74:	2005      	movs	r0, #5
 8004f76:	f001 fdb2 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004f7a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f7e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	4bb0      	ldr	r3, [pc, #704]	; (8005248 <GAME_PLAY_Phase_Management+0x3564>)
 8004f88:	9203      	str	r2, [sp, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	9202      	str	r2, [sp, #8]
 8004f8e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004f92:	9201      	str	r2, [sp, #4]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	9200      	str	r2, [sp, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4aad      	ldr	r2, [pc, #692]	; (8005250 <GAME_PLAY_Phase_Management+0x356c>)
 8004f9c:	2169      	movs	r1, #105	; 0x69
 8004f9e:	2005      	movs	r0, #5
 8004fa0:	f001 fd9d 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004fa4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fa8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	781a      	ldrb	r2, [r3, #0]
 8004fb0:	4ba5      	ldr	r3, [pc, #660]	; (8005248 <GAME_PLAY_Phase_Management+0x3564>)
 8004fb2:	9203      	str	r2, [sp, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	9202      	str	r2, [sp, #8]
 8004fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fbc:	9201      	str	r2, [sp, #4]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	9200      	str	r2, [sp, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4aa3      	ldr	r2, [pc, #652]	; (8005254 <GAME_PLAY_Phase_Management+0x3570>)
 8004fc6:	215a      	movs	r1, #90	; 0x5a
 8004fc8:	2005      	movs	r0, #5
 8004fca:	f001 fd88 	bl	8006ade <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004fce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fd2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	781a      	ldrb	r2, [r3, #0]
 8004fda:	4b9b      	ldr	r3, [pc, #620]	; (8005248 <GAME_PLAY_Phase_Management+0x3564>)
 8004fdc:	9203      	str	r2, [sp, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	9202      	str	r2, [sp, #8]
 8004fe2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004fe6:	9201      	str	r2, [sp, #4]
 8004fe8:	685a      	ldr	r2, [r3, #4]
 8004fea:	9200      	str	r2, [sp, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a9a      	ldr	r2, [pc, #616]	; (8005258 <GAME_PLAY_Phase_Management+0x3574>)
 8004ff0:	2169      	movs	r1, #105	; 0x69
 8004ff2:	2005      	movs	r0, #5
 8004ff4:	f001 fd73 	bl	8006ade <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8004ff8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004ffc:	791b      	ldrb	r3, [r3, #4]
 8004ffe:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
						state_game->test = 60;
 8005002:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005006:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	223c      	movs	r2, #60	; 0x3c
 800500e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 8005012:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005016:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 800501a:	429a      	cmp	r2, r3
 800501c:	d266      	bcs.n	80050ec <GAME_PLAY_Phase_Management+0x3408>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800501e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005022:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	2300      	movs	r3, #0
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	2326      	movs	r3, #38	; 0x26
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	215a      	movs	r1, #90	; 0x5a
 8005036:	2000      	movs	r0, #0
 8005038:	f001 fe9a 	bl	8006d70 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800503c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005040:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	9301      	str	r3, [sp, #4]
 800504a:	2300      	movs	r3, #0
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	2326      	movs	r3, #38	; 0x26
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	215a      	movs	r1, #90	; 0x5a
 8005054:	2000      	movs	r0, #0
 8005056:	f001 fe8b 	bl	8006d70 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 800505a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800505e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	223d      	movs	r2, #61	; 0x3d
 8005066:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 800506a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800506e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	889a      	ldrh	r2, [r3, #4]
 8005076:	f897 1242 	ldrb.w	r1, [r7, #578]	; 0x242
 800507a:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 800507e:	1acb      	subs	r3, r1, r3
 8005080:	b29b      	uxth	r3, r3
 8005082:	4619      	mov	r1, r3
 8005084:	0249      	lsls	r1, r1, #9
 8005086:	1ac9      	subs	r1, r1, r3
 8005088:	0089      	lsls	r1, r1, #2
 800508a:	4419      	add	r1, r3
 800508c:	00c9      	lsls	r1, r1, #3
 800508e:	1acb      	subs	r3, r1, r3
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	b29b      	uxth	r3, r3
 8005094:	4413      	add	r3, r2
 8005096:	b29a      	uxth	r2, r3
 8005098:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800509c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 80050a4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80050a8:	799b      	ldrb	r3, [r3, #6]
 80050aa:	4619      	mov	r1, r3
 80050ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050b0:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80050b4:	010b      	lsls	r3, r1, #4
 80050b6:	3308      	adds	r3, #8
 80050b8:	6812      	ldr	r2, [r2, #0]
 80050ba:	441a      	add	r2, r3
 80050bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050c4:	4611      	mov	r1, r2
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	f7fc faab 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80050cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	f7fc f9ad 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 80050da:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050de:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2206      	movs	r2, #6
 80050e6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80050ea:	e11d      	b.n	8005328 <GAME_PLAY_Phase_Management+0x3644>
						else if(atk > atk2){
 80050ec:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 80050f0:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 80050f4:	429a      	cmp	r2, r3
 80050f6:	f240 8117 	bls.w	8005328 <GAME_PLAY_Phase_Management+0x3644>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80050fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	2300      	movs	r3, #0
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	2326      	movs	r3, #38	; 0x26
 800510e:	2280      	movs	r2, #128	; 0x80
 8005110:	215a      	movs	r1, #90	; 0x5a
 8005112:	2000      	movs	r0, #0
 8005114:	f001 fe2c 	bl	8006d70 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005118:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800511c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	9301      	str	r3, [sp, #4]
 8005126:	2300      	movs	r3, #0
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	2326      	movs	r3, #38	; 0x26
 800512c:	2280      	movs	r2, #128	; 0x80
 800512e:	215a      	movs	r1, #90	; 0x5a
 8005130:	2000      	movs	r0, #0
 8005132:	f001 fe1d 	bl	8006d70 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 8005136:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800513a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2246      	movs	r2, #70	; 0x46
 8005142:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8005146:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800514a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	889a      	ldrh	r2, [r3, #4]
 8005152:	f897 1243 	ldrb.w	r1, [r7, #579]	; 0x243
 8005156:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 800515a:	1acb      	subs	r3, r1, r3
 800515c:	b29b      	uxth	r3, r3
 800515e:	4619      	mov	r1, r3
 8005160:	0249      	lsls	r1, r1, #9
 8005162:	1ac9      	subs	r1, r1, r3
 8005164:	0089      	lsls	r1, r1, #2
 8005166:	4419      	add	r1, r3
 8005168:	00c9      	lsls	r1, r1, #3
 800516a:	1acb      	subs	r3, r1, r3
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	b29b      	uxth	r3, r3
 8005170:	4413      	add	r3, r2
 8005172:	b29a      	uxth	r2, r3
 8005174:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005178:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8005180:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005184:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005188:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	f7fc fa48 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005192:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005196:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2206      	movs	r2, #6
 800519e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80051a2:	e0c1      	b.n	8005328 <GAME_PLAY_Phase_Management+0x3644>
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80051a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051a8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	781a      	ldrb	r2, [r3, #0]
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <GAME_PLAY_Phase_Management+0x3564>)
 80051b2:	9203      	str	r2, [sp, #12]
 80051b4:	2200      	movs	r2, #0
 80051b6:	9202      	str	r2, [sp, #8]
 80051b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051bc:	9201      	str	r2, [sp, #4]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	9200      	str	r2, [sp, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a25      	ldr	r2, [pc, #148]	; (800525c <GAME_PLAY_Phase_Management+0x3578>)
 80051c6:	215a      	movs	r1, #90	; 0x5a
 80051c8:	2005      	movs	r0, #5
 80051ca:	f001 fc88 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80051ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051d2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	4b1b      	ldr	r3, [pc, #108]	; (8005248 <GAME_PLAY_Phase_Management+0x3564>)
 80051dc:	9203      	str	r2, [sp, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	9202      	str	r2, [sp, #8]
 80051e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80051e6:	9201      	str	r2, [sp, #4]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	9200      	str	r2, [sp, #0]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a1c      	ldr	r2, [pc, #112]	; (8005260 <GAME_PLAY_Phase_Management+0x357c>)
 80051f0:	215a      	movs	r1, #90	; 0x5a
 80051f2:	2005      	movs	r0, #5
 80051f4:	f001 fc73 	bl	8006ade <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80051f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051fc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005206:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				YUGIOH_card_clear(ptrYugiohCard_src);
 800520a:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800520e:	f7fb fa70 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8005212:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005216:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	889b      	ldrh	r3, [r3, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d009      	beq.n	8005236 <GAME_PLAY_Phase_Management+0x3552>
 8005222:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005226:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	889b      	ldrh	r3, [r3, #4]
 800522e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005232:	4293      	cmp	r3, r2
 8005234:	d916      	bls.n	8005264 <GAME_PLAY_Phase_Management+0x3580>
					state_game->MainGame_State = Game_Ended;
 8005236:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800523a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2204      	movs	r2, #4
 8005242:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8005246:	e070      	b.n	800532a <GAME_PLAY_Phase_Management+0x3646>
 8005248:	2400000c 	.word	0x2400000c
 800524c:	08010ef0 	.word	0x08010ef0
 8005250:	08010f34 	.word	0x08010f34
 8005254:	08010f10 	.word	0x08010f10
 8005258:	08010f44 	.word	0x08010f44
 800525c:	08010f58 	.word	0x08010f58
 8005260:	08010f68 	.word	0x08010f68
					state_game->action = 50;
 8005264:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005268:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2232      	movs	r2, #50	; 0x32
 8005270:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005272:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005276:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	2300      	movs	r3, #0
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	2326      	movs	r3, #38	; 0x26
 8005286:	2280      	movs	r2, #128	; 0x80
 8005288:	215a      	movs	r1, #90	; 0x5a
 800528a:	2000      	movs	r0, #0
 800528c:	f001 fd70 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005290:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005294:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	9301      	str	r3, [sp, #4]
 800529e:	2300      	movs	r3, #0
 80052a0:	9300      	str	r3, [sp, #0]
 80052a2:	2326      	movs	r3, #38	; 0x26
 80052a4:	2280      	movs	r2, #128	; 0x80
 80052a6:	215a      	movs	r1, #90	; 0x5a
 80052a8:	2000      	movs	r0, #0
 80052aa:	f001 fd61 	bl	8006d70 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80052ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	781a      	ldrb	r2, [r3, #0]
 80052ba:	4b22      	ldr	r3, [pc, #136]	; (8005344 <GAME_PLAY_Phase_Management+0x3660>)
 80052bc:	9203      	str	r2, [sp, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	9202      	str	r2, [sp, #8]
 80052c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052c6:	9201      	str	r2, [sp, #4]
 80052c8:	685a      	ldr	r2, [r3, #4]
 80052ca:	9200      	str	r2, [sp, #0]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a1e      	ldr	r2, [pc, #120]	; (8005348 <GAME_PLAY_Phase_Management+0x3664>)
 80052d0:	215a      	movs	r1, #90	; 0x5a
 80052d2:	2005      	movs	r0, #5
 80052d4:	f001 fc03 	bl	8006ade <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80052d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052dc:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	781a      	ldrb	r2, [r3, #0]
 80052e4:	4b17      	ldr	r3, [pc, #92]	; (8005344 <GAME_PLAY_Phase_Management+0x3660>)
 80052e6:	9203      	str	r2, [sp, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	9202      	str	r2, [sp, #8]
 80052ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80052f0:	9201      	str	r2, [sp, #4]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	9200      	str	r2, [sp, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a14      	ldr	r2, [pc, #80]	; (800534c <GAME_PLAY_Phase_Management+0x3668>)
 80052fa:	215a      	movs	r1, #90	; 0x5a
 80052fc:	2005      	movs	r0, #5
 80052fe:	f001 fbee 	bl	8006ade <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8005302:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005306:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005312:	e00a      	b.n	800532a <GAME_PLAY_Phase_Management+0x3646>
				break;
 8005314:	bf00      	nop
 8005316:	e00f      	b.n	8005338 <GAME_PLAY_Phase_Management+0x3654>
				break;
 8005318:	bf00      	nop
 800531a:	e00d      	b.n	8005338 <GAME_PLAY_Phase_Management+0x3654>
				break;
 800531c:	bf00      	nop
 800531e:	e00b      	b.n	8005338 <GAME_PLAY_Phase_Management+0x3654>
				break;
 8005320:	bf00      	nop
 8005322:	e009      	b.n	8005338 <GAME_PLAY_Phase_Management+0x3654>
				break;
 8005324:	bf00      	nop
 8005326:	e007      	b.n	8005338 <GAME_PLAY_Phase_Management+0x3654>
				break;
 8005328:	bf00      	nop
			}
			break;
 800532a:	e005      	b.n	8005338 <GAME_PLAY_Phase_Management+0x3654>
		break;
 800532c:	bf00      	nop
 800532e:	e004      	b.n	800533a <GAME_PLAY_Phase_Management+0x3656>
		break;
 8005330:	bf00      	nop
 8005332:	e002      	b.n	800533a <GAME_PLAY_Phase_Management+0x3656>
		break;
 8005334:	bf00      	nop
 8005336:	e000      	b.n	800533a <GAME_PLAY_Phase_Management+0x3656>
			break;
 8005338:	bf00      	nop

	}
}
 800533a:	bf00      	nop
 800533c:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8005340:	46bd      	mov	sp, r7
 8005342:	bd90      	pop	{r4, r7, pc}
 8005344:	2400000c 	.word	0x2400000c
 8005348:	08010f58 	.word	0x08010f58
 800534c:	08010f68 	.word	0x08010f68

08005350 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3338      	adds	r3, #56	; 0x38
 800535c:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800535e:	2300      	movs	r3, #0
 8005360:	72fb      	strb	r3, [r7, #11]
 8005362:	e00d      	b.n	8005380 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 800536c:	68f9      	ldr	r1, [r7, #12]
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7fc f957 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	3310      	adds	r3, #16
 8005378:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800537a:	7afb      	ldrb	r3, [r7, #11]
 800537c:	3301      	adds	r3, #1
 800537e:	72fb      	strb	r3, [r7, #11]
 8005380:	7afb      	ldrb	r3, [r7, #11]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d9ee      	bls.n	8005364 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	3710      	adds	r7, #16
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3308      	adds	r3, #8
 800539e:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	3338      	adds	r3, #56	; 0x38
 80053a4:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	3308      	adds	r3, #8
 80053aa:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	3338      	adds	r3, #56	; 0x38
 80053b0:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80053b2:	2300      	movs	r3, #0
 80053b4:	73fb      	strb	r3, [r7, #15]
 80053b6:	e00d      	b.n	80053d4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 80053c0:	6979      	ldr	r1, [r7, #20]
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f7fc f92d 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 80053c8:	697b      	ldr	r3, [r7, #20]
 80053ca:	3310      	adds	r3, #16
 80053cc:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80053ce:	7bfb      	ldrb	r3, [r7, #15]
 80053d0:	3301      	adds	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
 80053d4:	7bfb      	ldrb	r3, [r7, #15]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d9ee      	bls.n	80053b8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80053da:	2300      	movs	r3, #0
 80053dc:	73bb      	strb	r3, [r7, #14]
 80053de:	e00d      	b.n	80053fc <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 80053e8:	6939      	ldr	r1, [r7, #16]
 80053ea:	6838      	ldr	r0, [r7, #0]
 80053ec:	f7fc f919 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	3310      	adds	r3, #16
 80053f4:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80053f6:	7bbb      	ldrb	r3, [r7, #14]
 80053f8:	3301      	adds	r3, #1
 80053fa:	73bb      	strb	r3, [r7, #14]
 80053fc:	7bbb      	ldrb	r3, [r7, #14]
 80053fe:	2b02      	cmp	r3, #2
 8005400:	d9ee      	bls.n	80053e0 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8005402:	bf00      	nop
 8005404:	bf00      	nop
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8005418:	2300      	movs	r3, #0
 800541a:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005422:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3368      	adds	r3, #104	; 0x68
 8005428:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3368      	adds	r3, #104	; 0x68
 800542e:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8005430:	2300      	movs	r3, #0
 8005432:	74fb      	strb	r3, [r7, #19]
 8005434:	e010      	b.n	8005458 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	429a      	cmp	r2, r3
 8005440:	d104      	bne.n	800544c <YUGIOH_Reborn+0x40>
			flag = 1;
 8005442:	2301      	movs	r3, #1
 8005444:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 8005446:	7cfb      	ldrb	r3, [r7, #19]
 8005448:	77bb      	strb	r3, [r7, #30]
			break;
 800544a:	e008      	b.n	800545e <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	3310      	adds	r3, #16
 8005450:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8005452:	7cfb      	ldrb	r3, [r7, #19]
 8005454:	3301      	adds	r3, #1
 8005456:	74fb      	strb	r3, [r7, #19]
 8005458:	7cfb      	ldrb	r3, [r7, #19]
 800545a:	2b13      	cmp	r3, #19
 800545c:	d9eb      	bls.n	8005436 <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3338      	adds	r3, #56	; 0x38
 8005462:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 8005464:	7ffb      	ldrb	r3, [r7, #31]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d134      	bne.n	80054d4 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 800546a:	69bb      	ldr	r3, [r7, #24]
 800546c:	799a      	ldrb	r2, [r3, #6]
 800546e:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <YUGIOH_Reborn+0xd0>)
 8005470:	fba3 1302 	umull	r1, r3, r3, r2
 8005474:	0899      	lsrs	r1, r3, #2
 8005476:	460b      	mov	r3, r1
 8005478:	005b      	lsls	r3, r3, #1
 800547a:	440b      	add	r3, r1
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 8005482:	7afb      	ldrb	r3, [r7, #11]
 8005484:	011b      	lsls	r3, r3, #4
 8005486:	3308      	adds	r3, #8
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	4413      	add	r3, r2
 800548c:	4619      	mov	r1, r3
 800548e:	69b8      	ldr	r0, [r7, #24]
 8005490:	f7fb f8f8 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 8005494:	7fbb      	ldrb	r3, [r7, #30]
 8005496:	3301      	adds	r3, #1
 8005498:	011b      	lsls	r3, r3, #4
 800549a:	3368      	adds	r3, #104	; 0x68
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80054a2:	7fbb      	ldrb	r3, [r7, #30]
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	3368      	adds	r3, #104	; 0x68
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	4413      	add	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80054ae:	7fbb      	ldrb	r3, [r7, #30]
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e00c      	b.n	80054ce <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80054b4:	6979      	ldr	r1, [r7, #20]
 80054b6:	69b8      	ldr	r0, [r7, #24]
 80054b8:	f7fb f8e4 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	3310      	adds	r3, #16
 80054c0:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	3310      	adds	r3, #16
 80054c6:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3301      	adds	r3, #1
 80054cc:	60fb      	str	r3, [r7, #12]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2b13      	cmp	r3, #19
 80054d2:	ddef      	ble.n	80054b4 <YUGIOH_Reborn+0xa8>
		}


	}
}
 80054d4:	bf00      	nop
 80054d6:	3720      	adds	r7, #32
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	aaaaaaab 	.word	0xaaaaaaab

080054e0 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80054ee:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80054f6:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	799a      	ldrb	r2, [r3, #6]
 80054fc:	4b0d      	ldr	r3, [pc, #52]	; (8005534 <YUGIOH_Ancient_Rules+0x54>)
 80054fe:	fba3 1302 	umull	r1, r3, r3, r2
 8005502:	0899      	lsrs	r1, r3, #2
 8005504:	460b      	mov	r3, r1
 8005506:	005b      	lsls	r3, r3, #1
 8005508:	440b      	add	r3, r1
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	1ad3      	subs	r3, r2, r3
 800550e:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3308      	adds	r3, #8
 8005514:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 8005516:	7cfb      	ldrb	r3, [r7, #19]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	3308      	adds	r3, #8
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	4413      	add	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8005522:	68f9      	ldr	r1, [r7, #12]
 8005524:	6978      	ldr	r0, [r7, #20]
 8005526:	f7fb f8ad 	bl	8000684 <YUGIOH_card_copy>

}
 800552a:	bf00      	nop
 800552c:	3718      	adds	r7, #24
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	aaaaaaab 	.word	0xaaaaaaab

08005538 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3308      	adds	r3, #8
 8005546:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3338      	adds	r3, #56	; 0x38
 800554c:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	3308      	adds	r3, #8
 8005552:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3338      	adds	r3, #56	; 0x38
 8005558:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 800555a:	2300      	movs	r3, #0
 800555c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800555e:	2300      	movs	r3, #0
 8005560:	73bb      	strb	r3, [r7, #14]
 8005562:	e00c      	b.n	800557e <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d102      	bne.n	8005572 <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	3301      	adds	r3, #1
 8005570:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	3310      	adds	r3, #16
 8005576:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8005578:	7bbb      	ldrb	r3, [r7, #14]
 800557a:	3301      	adds	r3, #1
 800557c:	73bb      	strb	r3, [r7, #14]
 800557e:	7bbb      	ldrb	r3, [r7, #14]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d9ef      	bls.n	8005564 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8005584:	2300      	movs	r3, #0
 8005586:	737b      	strb	r3, [r7, #13]
 8005588:	e00c      	b.n	80055a4 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d102      	bne.n	8005598 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	3301      	adds	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	3310      	adds	r3, #16
 800559c:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800559e:	7b7b      	ldrb	r3, [r7, #13]
 80055a0:	3301      	adds	r3, #1
 80055a2:	737b      	strb	r3, [r7, #13]
 80055a4:	7b7b      	ldrb	r3, [r7, #13]
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d9ef      	bls.n	800558a <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	889a      	ldrh	r2, [r3, #4]
 80055ae:	7bfb      	ldrb	r3, [r7, #15]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	4619      	mov	r1, r3
 80055b4:	0089      	lsls	r1, r1, #2
 80055b6:	440b      	add	r3, r1
 80055b8:	4619      	mov	r1, r3
 80055ba:	0109      	lsls	r1, r1, #4
 80055bc:	1acb      	subs	r3, r1, r3
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	4413      	add	r3, r2
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	809a      	strh	r2, [r3, #4]

}
 80055ca:	bf00      	nop
 80055cc:	371c      	adds	r7, #28
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80055e8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80055f0:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	799a      	ldrb	r2, [r3, #6]
 80055f6:	4b12      	ldr	r3, [pc, #72]	; (8005640 <YUGIOH_Stop_Defense+0x68>)
 80055f8:	fba3 1302 	umull	r1, r3, r3, r2
 80055fc:	0899      	lsrs	r1, r3, #2
 80055fe:	460b      	mov	r3, r1
 8005600:	005b      	lsls	r3, r3, #1
 8005602:	440b      	add	r3, r1
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8005610:	7cfb      	ldrb	r3, [r7, #19]
 8005612:	011b      	lsls	r3, r3, #4
 8005614:	3308      	adds	r3, #8
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	4413      	add	r3, r2
 800561a:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	789b      	ldrb	r3, [r3, #2]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d106      	bne.n	8005632 <YUGIOH_Stop_Defense+0x5a>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d002      	beq.n	8005632 <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2201      	movs	r2, #1
 8005630:	709a      	strb	r2, [r3, #2]
	}

}
 8005632:	bf00      	nop
 8005634:	371c      	adds	r7, #28
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	aaaaaaab 	.word	0xaaaaaaab

08005644 <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	3308      	adds	r3, #8
 8005652:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8005654:	2300      	movs	r3, #0
 8005656:	60bb      	str	r3, [r7, #8]
 8005658:	e016      	b.n	8005688 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	429a      	cmp	r2, r3
 8005664:	d10a      	bne.n	800567c <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	7a5b      	ldrb	r3, [r3, #9]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d006      	beq.n	800567c <YUGIOH_Check_Trap_On_board+0x38>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	2b03      	cmp	r3, #3
 8005674:	d102      	bne.n	800567c <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	b2db      	uxtb	r3, r3
 800567a:	e009      	b.n	8005690 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	3310      	adds	r3, #16
 8005680:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	3301      	adds	r3, #1
 8005686:	60bb      	str	r3, [r7, #8]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	2b02      	cmp	r3, #2
 800568c:	dde5      	ble.n	800565a <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 800568e:	23ff      	movs	r3, #255	; 0xff
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 800569c:	b480      	push	{r7}
 800569e:	b085      	sub	sp, #20
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	3308      	adds	r3, #8
 80056aa:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 80056ac:	2300      	movs	r3, #0
 80056ae:	60bb      	str	r3, [r7, #8]
 80056b0:	e016      	b.n	80056e0 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68da      	ldr	r2, [r3, #12]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d10a      	bne.n	80056d4 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	7a5b      	ldrb	r3, [r3, #9]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d006      	beq.n	80056d4 <YUGIOH_Check_Spell_On_board+0x38>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	785b      	ldrb	r3, [r3, #1]
 80056ca:	2b02      	cmp	r3, #2
 80056cc:	d102      	bne.n	80056d4 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	e009      	b.n	80056e8 <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3310      	adds	r3, #16
 80056d8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	3301      	adds	r3, #1
 80056de:	60bb      	str	r3, [r7, #8]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	dde5      	ble.n	80056b2 <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 80056e6:	23ff      	movs	r3, #255	; 0xff
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3714      	adds	r7, #20
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3308      	adds	r3, #8
 8005700:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
 8005706:	e00c      	b.n	8005722 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3310      	adds	r3, #16
 800571a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	3301      	adds	r3, #1
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	2b02      	cmp	r3, #2
 8005726:	ddef      	ble.n	8005708 <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	3338      	adds	r3, #56	; 0x38
 8005742:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8005744:	2303      	movs	r3, #3
 8005746:	60bb      	str	r3, [r7, #8]
 8005748:	e00c      	b.n	8005764 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2201      	movs	r2, #1
 8005756:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3310      	adds	r3, #16
 800575c:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	3301      	adds	r3, #1
 8005762:	60bb      	str	r3, [r7, #8]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2b05      	cmp	r3, #5
 8005768:	ddef      	ble.n	800574a <YUGIOH_Monster_Activated+0x14>
	}
}
 800576a:	bf00      	nop
 800576c:	bf00      	nop
 800576e:	3714      	adds	r7, #20
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <MainGUI>:
void MainGUI()
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800577e:	4b55      	ldr	r3, [pc, #340]	; (80058d4 <MainGUI+0x15c>)
 8005780:	2200      	movs	r2, #0
 8005782:	9202      	str	r2, [sp, #8]
 8005784:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005788:	9201      	str	r2, [sp, #4]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	9200      	str	r2, [sp, #0]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a51      	ldr	r2, [pc, #324]	; (80058d8 <MainGUI+0x160>)
 8005792:	2105      	movs	r1, #5
 8005794:	2005      	movs	r0, #5
 8005796:	f001 f958 	bl	8006a4a <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800579a:	4b4e      	ldr	r3, [pc, #312]	; (80058d4 <MainGUI+0x15c>)
 800579c:	2200      	movs	r2, #0
 800579e:	9202      	str	r2, [sp, #8]
 80057a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057a4:	9201      	str	r2, [sp, #4]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	9200      	str	r2, [sp, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a4b      	ldr	r2, [pc, #300]	; (80058dc <MainGUI+0x164>)
 80057ae:	2114      	movs	r1, #20
 80057b0:	2005      	movs	r0, #5
 80057b2:	f001 f94a 	bl	8006a4a <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80057b6:	4b47      	ldr	r3, [pc, #284]	; (80058d4 <MainGUI+0x15c>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	9202      	str	r2, [sp, #8]
 80057bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c0:	9201      	str	r2, [sp, #4]
 80057c2:	685a      	ldr	r2, [r3, #4]
 80057c4:	9200      	str	r2, [sp, #0]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a45      	ldr	r2, [pc, #276]	; (80058e0 <MainGUI+0x168>)
 80057ca:	2123      	movs	r1, #35	; 0x23
 80057cc:	2005      	movs	r0, #5
 80057ce:	f001 f93c 	bl	8006a4a <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80057d2:	4b40      	ldr	r3, [pc, #256]	; (80058d4 <MainGUI+0x15c>)
 80057d4:	2200      	movs	r2, #0
 80057d6:	9202      	str	r2, [sp, #8]
 80057d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057dc:	9201      	str	r2, [sp, #4]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	9200      	str	r2, [sp, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a3f      	ldr	r2, [pc, #252]	; (80058e4 <MainGUI+0x16c>)
 80057e6:	2123      	movs	r1, #35	; 0x23
 80057e8:	203c      	movs	r0, #60	; 0x3c
 80057ea:	f001 f8e4 	bl	80069b6 <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80057ee:	4b39      	ldr	r3, [pc, #228]	; (80058d4 <MainGUI+0x15c>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	9202      	str	r2, [sp, #8]
 80057f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057f8:	9201      	str	r2, [sp, #4]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	9200      	str	r2, [sp, #0]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a39      	ldr	r2, [pc, #228]	; (80058e8 <MainGUI+0x170>)
 8005802:	2132      	movs	r1, #50	; 0x32
 8005804:	2000      	movs	r0, #0
 8005806:	f001 f920 	bl	8006a4a <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800580a:	4b32      	ldr	r3, [pc, #200]	; (80058d4 <MainGUI+0x15c>)
 800580c:	2200      	movs	r2, #0
 800580e:	9202      	str	r2, [sp, #8]
 8005810:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005814:	9201      	str	r2, [sp, #4]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	9200      	str	r2, [sp, #0]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a33      	ldr	r2, [pc, #204]	; (80058ec <MainGUI+0x174>)
 800581e:	213c      	movs	r1, #60	; 0x3c
 8005820:	2000      	movs	r0, #0
 8005822:	f001 f912 	bl	8006a4a <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8005826:	4b2b      	ldr	r3, [pc, #172]	; (80058d4 <MainGUI+0x15c>)
 8005828:	2200      	movs	r2, #0
 800582a:	9202      	str	r2, [sp, #8]
 800582c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005830:	9201      	str	r2, [sp, #4]
 8005832:	685a      	ldr	r2, [r3, #4]
 8005834:	9200      	str	r2, [sp, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a2d      	ldr	r2, [pc, #180]	; (80058f0 <MainGUI+0x178>)
 800583a:	2105      	movs	r1, #5
 800583c:	2005      	movs	r0, #5
 800583e:	f001 f8ba 	bl	80069b6 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005842:	4b24      	ldr	r3, [pc, #144]	; (80058d4 <MainGUI+0x15c>)
 8005844:	2200      	movs	r2, #0
 8005846:	9202      	str	r2, [sp, #8]
 8005848:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800584c:	9201      	str	r2, [sp, #4]
 800584e:	685a      	ldr	r2, [r3, #4]
 8005850:	9200      	str	r2, [sp, #0]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a21      	ldr	r2, [pc, #132]	; (80058dc <MainGUI+0x164>)
 8005856:	2114      	movs	r1, #20
 8005858:	2005      	movs	r0, #5
 800585a:	f001 f8ac 	bl	80069b6 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800585e:	4b1d      	ldr	r3, [pc, #116]	; (80058d4 <MainGUI+0x15c>)
 8005860:	2200      	movs	r2, #0
 8005862:	9202      	str	r2, [sp, #8]
 8005864:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005868:	9201      	str	r2, [sp, #4]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	9200      	str	r2, [sp, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <MainGUI+0x17c>)
 8005872:	2123      	movs	r1, #35	; 0x23
 8005874:	2005      	movs	r0, #5
 8005876:	f001 f89e 	bl	80069b6 <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800587a:	4b16      	ldr	r3, [pc, #88]	; (80058d4 <MainGUI+0x15c>)
 800587c:	2200      	movs	r2, #0
 800587e:	9202      	str	r2, [sp, #8]
 8005880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005884:	9201      	str	r2, [sp, #4]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	9200      	str	r2, [sp, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a15      	ldr	r2, [pc, #84]	; (80058e4 <MainGUI+0x16c>)
 800588e:	2123      	movs	r1, #35	; 0x23
 8005890:	203c      	movs	r0, #60	; 0x3c
 8005892:	f001 f8da 	bl	8006a4a <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8005896:	4b0f      	ldr	r3, [pc, #60]	; (80058d4 <MainGUI+0x15c>)
 8005898:	2200      	movs	r2, #0
 800589a:	9202      	str	r2, [sp, #8]
 800589c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058a0:	9201      	str	r2, [sp, #4]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	9200      	str	r2, [sp, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a0f      	ldr	r2, [pc, #60]	; (80058e8 <MainGUI+0x170>)
 80058aa:	2132      	movs	r1, #50	; 0x32
 80058ac:	2000      	movs	r0, #0
 80058ae:	f001 f882 	bl	80069b6 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80058b2:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <MainGUI+0x15c>)
 80058b4:	2200      	movs	r2, #0
 80058b6:	9202      	str	r2, [sp, #8]
 80058b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058bc:	9201      	str	r2, [sp, #4]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	9200      	str	r2, [sp, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a09      	ldr	r2, [pc, #36]	; (80058ec <MainGUI+0x174>)
 80058c6:	213c      	movs	r1, #60	; 0x3c
 80058c8:	2000      	movs	r0, #0
 80058ca:	f001 f874 	bl	80069b6 <ST7735_WriteString>
}
 80058ce:	bf00      	nop
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	2400000c 	.word	0x2400000c
 80058d8:	08010c64 	.word	0x08010c64
 80058dc:	08010f78 	.word	0x08010f78
 80058e0:	08010f88 	.word	0x08010f88
 80058e4:	08010f90 	.word	0x08010f90
 80058e8:	08010f98 	.word	0x08010f98
 80058ec:	08010c10 	.word	0x08010c10
 80058f0:	08010c04 	.word	0x08010c04
 80058f4:	08010fac 	.word	0x08010fac

080058f8 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b088      	sub	sp, #32
 80058fc:	af04      	add	r7, sp, #16
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8005902:	2300      	movs	r3, #0
 8005904:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8005906:	4b49      	ldr	r3, [pc, #292]	; (8005a2c <LCDvalue+0x134>)
 8005908:	881a      	ldrh	r2, [r3, #0]
 800590a:	4b49      	ldr	r3, [pc, #292]	; (8005a30 <LCDvalue+0x138>)
 800590c:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 800590e:	4b49      	ldr	r3, [pc, #292]	; (8005a34 <LCDvalue+0x13c>)
 8005910:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005914:	4a48      	ldr	r2, [pc, #288]	; (8005a38 <LCDvalue+0x140>)
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	f7fa fd31 	bl	8000380 <__aeabi_uldivmod>
 800591e:	4602      	mov	r2, r0
 8005920:	460b      	mov	r3, r1
 8005922:	4613      	mov	r3, r2
 8005924:	817b      	strh	r3, [r7, #10]
	time -= a;
 8005926:	4b42      	ldr	r3, [pc, #264]	; (8005a30 <LCDvalue+0x138>)
 8005928:	881a      	ldrh	r2, [r3, #0]
 800592a:	897b      	ldrh	r3, [r7, #10]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	b29a      	uxth	r2, r3
 8005930:	4b3f      	ldr	r3, [pc, #252]	; (8005a30 <LCDvalue+0x138>)
 8005932:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8005934:	4b3e      	ldr	r3, [pc, #248]	; (8005a30 <LCDvalue+0x138>)
 8005936:	881b      	ldrh	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	4940      	ldr	r1, [pc, #256]	; (8005a3c <LCDvalue+0x144>)
 800593c:	4840      	ldr	r0, [pc, #256]	; (8005a40 <LCDvalue+0x148>)
 800593e:	f00a fdd7 	bl	80104f0 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8005942:	2300      	movs	r3, #0
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e012      	b.n	800596e <LCDvalue+0x76>
		if(t_c[i] == 0){
 8005948:	4a3d      	ldr	r2, [pc, #244]	; (8005a40 <LCDvalue+0x148>)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	4413      	add	r3, r2
 800594e:	781b      	ldrb	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <LCDvalue+0x70>
			t_c[i] = 32;
 8005954:	4a3a      	ldr	r2, [pc, #232]	; (8005a40 <LCDvalue+0x148>)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	4413      	add	r3, r2
 800595a:	2220      	movs	r2, #32
 800595c:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	4a37      	ldr	r2, [pc, #220]	; (8005a40 <LCDvalue+0x148>)
 8005964:	2120      	movs	r1, #32
 8005966:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b02      	cmp	r3, #2
 8005972:	dde9      	ble.n	8005948 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8005974:	4b2e      	ldr	r3, [pc, #184]	; (8005a30 <LCDvalue+0x138>)
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	f040 811d 	bne.w	8005bb8 <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 800597e:	4831      	ldr	r0, [pc, #196]	; (8005a44 <LCDvalue+0x14c>)
 8005980:	f008 f9da 	bl	800dd38 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8005984:	4b2a      	ldr	r3, [pc, #168]	; (8005a30 <LCDvalue+0x138>)
 8005986:	2200      	movs	r2, #0
 8005988:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 800598a:	2000      	movs	r0, #0
 800598c:	f001 fa7a 	bl	8006e84 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8005990:	2000      	movs	r0, #0
 8005992:	f001 fa88 	bl	8006ea6 <ST7735_FillScreen1>
		while(time == 0){
 8005996:	e10a      	b.n	8005bae <LCDvalue+0x2b6>
			uint8_t credit = 1;
 8005998:	2301      	movs	r3, #1
 800599a:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 800599c:	7a7b      	ldrb	r3, [r7, #9]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d15e      	bne.n	8005a60 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	781a      	ldrb	r2, [r3, #0]
 80059a6:	4b28      	ldr	r3, [pc, #160]	; (8005a48 <LCDvalue+0x150>)
 80059a8:	9203      	str	r2, [sp, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	9202      	str	r2, [sp, #8]
 80059ae:	221f      	movs	r2, #31
 80059b0:	9201      	str	r2, [sp, #4]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	9200      	str	r2, [sp, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a24      	ldr	r2, [pc, #144]	; (8005a4c <LCDvalue+0x154>)
 80059ba:	2123      	movs	r1, #35	; 0x23
 80059bc:	200f      	movs	r0, #15
 80059be:	f001 f88e 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	4b22      	ldr	r3, [pc, #136]	; (8005a50 <LCDvalue+0x158>)
 80059c8:	9203      	str	r2, [sp, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	9202      	str	r2, [sp, #8]
 80059ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059d2:	9201      	str	r2, [sp, #4]
 80059d4:	685a      	ldr	r2, [r3, #4]
 80059d6:	9200      	str	r2, [sp, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1e      	ldr	r2, [pc, #120]	; (8005a54 <LCDvalue+0x15c>)
 80059dc:	213c      	movs	r1, #60	; 0x3c
 80059de:	2005      	movs	r0, #5
 80059e0:	f001 f87d 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	781a      	ldrb	r2, [r3, #0]
 80059e8:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <LCDvalue+0x150>)
 80059ea:	9203      	str	r2, [sp, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	9202      	str	r2, [sp, #8]
 80059f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80059f4:	9201      	str	r2, [sp, #4]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	9200      	str	r2, [sp, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a16      	ldr	r2, [pc, #88]	; (8005a58 <LCDvalue+0x160>)
 80059fe:	2123      	movs	r1, #35	; 0x23
 8005a00:	2014      	movs	r0, #20
 8005a02:	f001 f86c 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	4b11      	ldr	r3, [pc, #68]	; (8005a50 <LCDvalue+0x158>)
 8005a0c:	9203      	str	r2, [sp, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	9202      	str	r2, [sp, #8]
 8005a12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a16:	9201      	str	r2, [sp, #4]
 8005a18:	685a      	ldr	r2, [r3, #4]
 8005a1a:	9200      	str	r2, [sp, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a0f      	ldr	r2, [pc, #60]	; (8005a5c <LCDvalue+0x164>)
 8005a20:	213c      	movs	r1, #60	; 0x3c
 8005a22:	2000      	movs	r0, #0
 8005a24:	f001 f85b 	bl	8006ade <ST7735_WriteStringNSS>
 8005a28:	e0c1      	b.n	8005bae <LCDvalue+0x2b6>
 8005a2a:	bf00      	nop
 8005a2c:	24000000 	.word	0x24000000
 8005a30:	24000174 	.word	0x24000174
 8005a34:	24000ea0 	.word	0x24000ea0
 8005a38:	000f4240 	.word	0x000f4240
 8005a3c:	08010fb4 	.word	0x08010fb4
 8005a40:	24000170 	.word	0x24000170
 8005a44:	240002e8 	.word	0x240002e8
 8005a48:	24000014 	.word	0x24000014
 8005a4c:	08010c9c 	.word	0x08010c9c
 8005a50:	2400000c 	.word	0x2400000c
 8005a54:	08010fb8 	.word	0x08010fb8
 8005a58:	08010c94 	.word	0x08010c94
 8005a5c:	08010fcc 	.word	0x08010fcc
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 8005a60:	7a7b      	ldrb	r3, [r7, #9]
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	f040 80a3 	bne.w	8005bae <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	781a      	ldrb	r2, [r3, #0]
 8005a6c:	4ba1      	ldr	r3, [pc, #644]	; (8005cf4 <LCDvalue+0x3fc>)
 8005a6e:	9203      	str	r2, [sp, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	9202      	str	r2, [sp, #8]
 8005a74:	221f      	movs	r2, #31
 8005a76:	9201      	str	r2, [sp, #4]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	9200      	str	r2, [sp, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a9e      	ldr	r2, [pc, #632]	; (8005cf8 <LCDvalue+0x400>)
 8005a80:	2119      	movs	r1, #25
 8005a82:	200f      	movs	r0, #15
 8005a84:	f001 f82b 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	4b9b      	ldr	r3, [pc, #620]	; (8005cfc <LCDvalue+0x404>)
 8005a8e:	9203      	str	r2, [sp, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	9202      	str	r2, [sp, #8]
 8005a94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a98:	9201      	str	r2, [sp, #4]
 8005a9a:	685a      	ldr	r2, [r3, #4]
 8005a9c:	9200      	str	r2, [sp, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a97      	ldr	r2, [pc, #604]	; (8005d00 <LCDvalue+0x408>)
 8005aa2:	2132      	movs	r1, #50	; 0x32
 8005aa4:	2005      	movs	r0, #5
 8005aa6:	f001 f81a 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	4b91      	ldr	r3, [pc, #580]	; (8005cf4 <LCDvalue+0x3fc>)
 8005ab0:	9203      	str	r2, [sp, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	9202      	str	r2, [sp, #8]
 8005ab6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005aba:	9201      	str	r2, [sp, #4]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	9200      	str	r2, [sp, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a90      	ldr	r2, [pc, #576]	; (8005d04 <LCDvalue+0x40c>)
 8005ac4:	2119      	movs	r1, #25
 8005ac6:	2014      	movs	r0, #20
 8005ac8:	f001 f809 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	781a      	ldrb	r2, [r3, #0]
 8005ad0:	4b8a      	ldr	r3, [pc, #552]	; (8005cfc <LCDvalue+0x404>)
 8005ad2:	9203      	str	r2, [sp, #12]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	9202      	str	r2, [sp, #8]
 8005ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005adc:	9201      	str	r2, [sp, #4]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	9200      	str	r2, [sp, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a88      	ldr	r2, [pc, #544]	; (8005d08 <LCDvalue+0x410>)
 8005ae6:	2132      	movs	r1, #50	; 0x32
 8005ae8:	2000      	movs	r0, #0
 8005aea:	f000 fff8 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 8005aee:	4b83      	ldr	r3, [pc, #524]	; (8005cfc <LCDvalue+0x404>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	9203      	str	r2, [sp, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	9202      	str	r2, [sp, #8]
 8005af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005afc:	9201      	str	r2, [sp, #4]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	9200      	str	r2, [sp, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a81      	ldr	r2, [pc, #516]	; (8005d0c <LCDvalue+0x414>)
 8005b06:	2141      	movs	r1, #65	; 0x41
 8005b08:	2000      	movs	r0, #0
 8005b0a:	f000 ffe8 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 8005b0e:	4b7b      	ldr	r3, [pc, #492]	; (8005cfc <LCDvalue+0x404>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	9203      	str	r2, [sp, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	9202      	str	r2, [sp, #8]
 8005b18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005b1c:	9201      	str	r2, [sp, #4]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	9200      	str	r2, [sp, #0]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a79      	ldr	r2, [pc, #484]	; (8005d0c <LCDvalue+0x414>)
 8005b26:	2141      	movs	r1, #65	; 0x41
 8005b28:	2000      	movs	r0, #0
 8005b2a:	f000 ffd8 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 8005b2e:	4b73      	ldr	r3, [pc, #460]	; (8005cfc <LCDvalue+0x404>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	9203      	str	r2, [sp, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	9202      	str	r2, [sp, #8]
 8005b38:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8005b3c:	9201      	str	r2, [sp, #4]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	9200      	str	r2, [sp, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a72      	ldr	r2, [pc, #456]	; (8005d10 <LCDvalue+0x418>)
 8005b46:	2164      	movs	r1, #100	; 0x64
 8005b48:	2000      	movs	r0, #0
 8005b4a:	f000 ffc8 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8005b4e:	4b6b      	ldr	r3, [pc, #428]	; (8005cfc <LCDvalue+0x404>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	9203      	str	r2, [sp, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	9202      	str	r2, [sp, #8]
 8005b58:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005b5c:	9201      	str	r2, [sp, #4]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	9200      	str	r2, [sp, #0]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a6b      	ldr	r2, [pc, #428]	; (8005d14 <LCDvalue+0x41c>)
 8005b66:	2173      	movs	r1, #115	; 0x73
 8005b68:	2000      	movs	r0, #0
 8005b6a:	f000 ffb8 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 8005b6e:	4b63      	ldr	r3, [pc, #396]	; (8005cfc <LCDvalue+0x404>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	9203      	str	r2, [sp, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	9202      	str	r2, [sp, #8]
 8005b78:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005b7c:	9201      	str	r2, [sp, #4]
 8005b7e:	685a      	ldr	r2, [r3, #4]
 8005b80:	9200      	str	r2, [sp, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a64      	ldr	r2, [pc, #400]	; (8005d18 <LCDvalue+0x420>)
 8005b86:	2173      	movs	r1, #115	; 0x73
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f000 ffa8 	bl	8006ade <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 8005b8e:	4b5b      	ldr	r3, [pc, #364]	; (8005cfc <LCDvalue+0x404>)
 8005b90:	2201      	movs	r2, #1
 8005b92:	9203      	str	r2, [sp, #12]
 8005b94:	2200      	movs	r2, #0
 8005b96:	9202      	str	r2, [sp, #8]
 8005b98:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005b9c:	9201      	str	r2, [sp, #4]
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	9200      	str	r2, [sp, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a5d      	ldr	r2, [pc, #372]	; (8005d1c <LCDvalue+0x424>)
 8005ba6:	215a      	movs	r1, #90	; 0x5a
 8005ba8:	2000      	movs	r0, #0
 8005baa:	f000 ff98 	bl	8006ade <ST7735_WriteStringNSS>
		while(time == 0){
 8005bae:	4b5c      	ldr	r3, [pc, #368]	; (8005d20 <LCDvalue+0x428>)
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f43f aef0 	beq.w	8005998 <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	889b      	ldrh	r3, [r3, #4]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4959      	ldr	r1, [pc, #356]	; (8005d24 <LCDvalue+0x42c>)
 8005bc0:	4859      	ldr	r0, [pc, #356]	; (8005d28 <LCDvalue+0x430>)
 8005bc2:	f00a fc95 	bl	80104f0 <siprintf>
	if(C_LP_ATK[3] == 0){
 8005bc6:	4b58      	ldr	r3, [pc, #352]	; (8005d28 <LCDvalue+0x430>)
 8005bc8:	78db      	ldrb	r3, [r3, #3]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10e      	bne.n	8005bec <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8005bce:	4b56      	ldr	r3, [pc, #344]	; (8005d28 <LCDvalue+0x430>)
 8005bd0:	789a      	ldrb	r2, [r3, #2]
 8005bd2:	4b55      	ldr	r3, [pc, #340]	; (8005d28 <LCDvalue+0x430>)
 8005bd4:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8005bd6:	4b54      	ldr	r3, [pc, #336]	; (8005d28 <LCDvalue+0x430>)
 8005bd8:	785a      	ldrb	r2, [r3, #1]
 8005bda:	4b53      	ldr	r3, [pc, #332]	; (8005d28 <LCDvalue+0x430>)
 8005bdc:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8005bde:	4b52      	ldr	r3, [pc, #328]	; (8005d28 <LCDvalue+0x430>)
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	4b51      	ldr	r3, [pc, #324]	; (8005d28 <LCDvalue+0x430>)
 8005be4:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8005be6:	4b50      	ldr	r3, [pc, #320]	; (8005d28 <LCDvalue+0x430>)
 8005be8:	2220      	movs	r2, #32
 8005bea:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	781a      	ldrb	r2, [r3, #0]
 8005bf0:	4b42      	ldr	r3, [pc, #264]	; (8005cfc <LCDvalue+0x404>)
 8005bf2:	9203      	str	r2, [sp, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	9202      	str	r2, [sp, #8]
 8005bf8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005bfc:	9201      	str	r2, [sp, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	9200      	str	r2, [sp, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a48      	ldr	r2, [pc, #288]	; (8005d28 <LCDvalue+0x430>)
 8005c06:	2114      	movs	r1, #20
 8005c08:	205a      	movs	r0, #90	; 0x5a
 8005c0a:	f000 ff68 	bl	8006ade <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	781a      	ldrb	r2, [r3, #0]
 8005c12:	4b3a      	ldr	r3, [pc, #232]	; (8005cfc <LCDvalue+0x404>)
 8005c14:	9203      	str	r2, [sp, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	9202      	str	r2, [sp, #8]
 8005c1a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005c1e:	9201      	str	r2, [sp, #4]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	9200      	str	r2, [sp, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a41      	ldr	r2, [pc, #260]	; (8005d2c <LCDvalue+0x434>)
 8005c28:	2132      	movs	r1, #50	; 0x32
 8005c2a:	2069      	movs	r0, #105	; 0x69
 8005c2c:	f000 ff57 	bl	8006ade <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	889b      	ldrh	r3, [r3, #4]
 8005c34:	461a      	mov	r2, r3
 8005c36:	493b      	ldr	r1, [pc, #236]	; (8005d24 <LCDvalue+0x42c>)
 8005c38:	483d      	ldr	r0, [pc, #244]	; (8005d30 <LCDvalue+0x438>)
 8005c3a:	f00a fc59 	bl	80104f0 <siprintf>
	if(C_LP_DEF[3] == 0){
 8005c3e:	4b3c      	ldr	r3, [pc, #240]	; (8005d30 <LCDvalue+0x438>)
 8005c40:	78db      	ldrb	r3, [r3, #3]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10e      	bne.n	8005c64 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8005c46:	4b3a      	ldr	r3, [pc, #232]	; (8005d30 <LCDvalue+0x438>)
 8005c48:	789a      	ldrb	r2, [r3, #2]
 8005c4a:	4b39      	ldr	r3, [pc, #228]	; (8005d30 <LCDvalue+0x438>)
 8005c4c:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8005c4e:	4b38      	ldr	r3, [pc, #224]	; (8005d30 <LCDvalue+0x438>)
 8005c50:	785a      	ldrb	r2, [r3, #1]
 8005c52:	4b37      	ldr	r3, [pc, #220]	; (8005d30 <LCDvalue+0x438>)
 8005c54:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 8005c56:	4b36      	ldr	r3, [pc, #216]	; (8005d30 <LCDvalue+0x438>)
 8005c58:	781a      	ldrb	r2, [r3, #0]
 8005c5a:	4b35      	ldr	r3, [pc, #212]	; (8005d30 <LCDvalue+0x438>)
 8005c5c:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8005c5e:	4b34      	ldr	r3, [pc, #208]	; (8005d30 <LCDvalue+0x438>)
 8005c60:	2220      	movs	r2, #32
 8005c62:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781a      	ldrb	r2, [r3, #0]
 8005c68:	4b24      	ldr	r3, [pc, #144]	; (8005cfc <LCDvalue+0x404>)
 8005c6a:	9203      	str	r2, [sp, #12]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	9202      	str	r2, [sp, #8]
 8005c70:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005c74:	9201      	str	r2, [sp, #4]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	9200      	str	r2, [sp, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a2c      	ldr	r2, [pc, #176]	; (8005d30 <LCDvalue+0x438>)
 8005c7e:	2114      	movs	r1, #20
 8005c80:	205a      	movs	r0, #90	; 0x5a
 8005c82:	f000 ff2c 	bl	8006ade <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	781a      	ldrb	r2, [r3, #0]
 8005c8a:	4b1c      	ldr	r3, [pc, #112]	; (8005cfc <LCDvalue+0x404>)
 8005c8c:	9203      	str	r2, [sp, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	9202      	str	r2, [sp, #8]
 8005c92:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005c96:	9201      	str	r2, [sp, #4]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	9200      	str	r2, [sp, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <LCDvalue+0x43c>)
 8005ca0:	2132      	movs	r1, #50	; 0x32
 8005ca2:	2069      	movs	r0, #105	; 0x69
 8005ca4:	f000 ff1b 	bl	8006ade <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 8005ca8:	4b23      	ldr	r3, [pc, #140]	; (8005d38 <LCDvalue+0x440>)
 8005caa:	781b      	ldrb	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	491d      	ldr	r1, [pc, #116]	; (8005d24 <LCDvalue+0x42c>)
 8005cb0:	4822      	ldr	r0, [pc, #136]	; (8005d3c <LCDvalue+0x444>)
 8005cb2:	f00a fc1d 	bl	80104f0 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8005cb6:	4b11      	ldr	r3, [pc, #68]	; (8005cfc <LCDvalue+0x404>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	9203      	str	r2, [sp, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	9202      	str	r2, [sp, #8]
 8005cc0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005cc4:	9201      	str	r2, [sp, #4]
 8005cc6:	685a      	ldr	r2, [r3, #4]
 8005cc8:	9200      	str	r2, [sp, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <LCDvalue+0x444>)
 8005cce:	2123      	movs	r1, #35	; 0x23
 8005cd0:	2032      	movs	r0, #50	; 0x32
 8005cd2:	f000 ff04 	bl	8006ade <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 8005cd6:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <LCDvalue+0x404>)
 8005cd8:	2201      	movs	r2, #1
 8005cda:	9203      	str	r2, [sp, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	9202      	str	r2, [sp, #8]
 8005ce0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005ce4:	9201      	str	r2, [sp, #4]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	9200      	str	r2, [sp, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a13      	ldr	r2, [pc, #76]	; (8005d3c <LCDvalue+0x444>)
 8005cee:	2123      	movs	r1, #35	; 0x23
 8005cf0:	2032      	movs	r0, #50	; 0x32
 8005cf2:	e025      	b.n	8005d40 <LCDvalue+0x448>
 8005cf4:	24000014 	.word	0x24000014
 8005cf8:	08010c9c 	.word	0x08010c9c
 8005cfc:	2400000c 	.word	0x2400000c
 8005d00:	08010fb8 	.word	0x08010fb8
 8005d04:	08010c94 	.word	0x08010c94
 8005d08:	08010fcc 	.word	0x08010fcc
 8005d0c:	08010c10 	.word	0x08010c10
 8005d10:	08010fe0 	.word	0x08010fe0
 8005d14:	08010fec 	.word	0x08010fec
 8005d18:	08010ffc 	.word	0x08010ffc
 8005d1c:	08011008 	.word	0x08011008
 8005d20:	24000174 	.word	0x24000174
 8005d24:	08010fb4 	.word	0x08010fb4
 8005d28:	24000164 	.word	0x24000164
 8005d2c:	24000170 	.word	0x24000170
 8005d30:	24000168 	.word	0x24000168
 8005d34:	08010c60 	.word	0x08010c60
 8005d38:	24000176 	.word	0x24000176
 8005d3c:	2400016c 	.word	0x2400016c
 8005d40:	f000 fecd 	bl	8006ade <ST7735_WriteStringNSS>

}
 8005d44:	bf00      	nop
 8005d46:	3710      	adds	r7, #16
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005d50:	4b3d      	ldr	r3, [pc, #244]	; (8005e48 <SystemInit+0xfc>)
 8005d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d56:	4a3c      	ldr	r2, [pc, #240]	; (8005e48 <SystemInit+0xfc>)
 8005d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005d60:	4b39      	ldr	r3, [pc, #228]	; (8005e48 <SystemInit+0xfc>)
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	4a38      	ldr	r2, [pc, #224]	; (8005e48 <SystemInit+0xfc>)
 8005d66:	f043 0310 	orr.w	r3, r3, #16
 8005d6a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005d6c:	4b37      	ldr	r3, [pc, #220]	; (8005e4c <SystemInit+0x100>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	2b06      	cmp	r3, #6
 8005d76:	d807      	bhi.n	8005d88 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005d78:	4b34      	ldr	r3, [pc, #208]	; (8005e4c <SystemInit+0x100>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f023 030f 	bic.w	r3, r3, #15
 8005d80:	4a32      	ldr	r2, [pc, #200]	; (8005e4c <SystemInit+0x100>)
 8005d82:	f043 0307 	orr.w	r3, r3, #7
 8005d86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005d88:	4b31      	ldr	r3, [pc, #196]	; (8005e50 <SystemInit+0x104>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a30      	ldr	r2, [pc, #192]	; (8005e50 <SystemInit+0x104>)
 8005d8e:	f043 0301 	orr.w	r3, r3, #1
 8005d92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005d94:	4b2e      	ldr	r3, [pc, #184]	; (8005e50 <SystemInit+0x104>)
 8005d96:	2200      	movs	r2, #0
 8005d98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005d9a:	4b2d      	ldr	r3, [pc, #180]	; (8005e50 <SystemInit+0x104>)
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	492c      	ldr	r1, [pc, #176]	; (8005e50 <SystemInit+0x104>)
 8005da0:	4b2c      	ldr	r3, [pc, #176]	; (8005e54 <SystemInit+0x108>)
 8005da2:	4013      	ands	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005da6:	4b29      	ldr	r3, [pc, #164]	; (8005e4c <SystemInit+0x100>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005db2:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <SystemInit+0x100>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f023 030f 	bic.w	r3, r3, #15
 8005dba:	4a24      	ldr	r2, [pc, #144]	; (8005e4c <SystemInit+0x100>)
 8005dbc:	f043 0307 	orr.w	r3, r3, #7
 8005dc0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005dc2:	4b23      	ldr	r3, [pc, #140]	; (8005e50 <SystemInit+0x104>)
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005dc8:	4b21      	ldr	r3, [pc, #132]	; (8005e50 <SystemInit+0x104>)
 8005dca:	2200      	movs	r2, #0
 8005dcc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005dce:	4b20      	ldr	r3, [pc, #128]	; (8005e50 <SystemInit+0x104>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005dd4:	4b1e      	ldr	r3, [pc, #120]	; (8005e50 <SystemInit+0x104>)
 8005dd6:	4a20      	ldr	r2, [pc, #128]	; (8005e58 <SystemInit+0x10c>)
 8005dd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005dda:	4b1d      	ldr	r3, [pc, #116]	; (8005e50 <SystemInit+0x104>)
 8005ddc:	4a1f      	ldr	r2, [pc, #124]	; (8005e5c <SystemInit+0x110>)
 8005dde:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005de0:	4b1b      	ldr	r3, [pc, #108]	; (8005e50 <SystemInit+0x104>)
 8005de2:	4a1f      	ldr	r2, [pc, #124]	; (8005e60 <SystemInit+0x114>)
 8005de4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005de6:	4b1a      	ldr	r3, [pc, #104]	; (8005e50 <SystemInit+0x104>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005dec:	4b18      	ldr	r3, [pc, #96]	; (8005e50 <SystemInit+0x104>)
 8005dee:	4a1c      	ldr	r2, [pc, #112]	; (8005e60 <SystemInit+0x114>)
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005df2:	4b17      	ldr	r3, [pc, #92]	; (8005e50 <SystemInit+0x104>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005df8:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <SystemInit+0x104>)
 8005dfa:	4a19      	ldr	r2, [pc, #100]	; (8005e60 <SystemInit+0x114>)
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005dfe:	4b14      	ldr	r3, [pc, #80]	; (8005e50 <SystemInit+0x104>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e04:	4b12      	ldr	r3, [pc, #72]	; (8005e50 <SystemInit+0x104>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a11      	ldr	r2, [pc, #68]	; (8005e50 <SystemInit+0x104>)
 8005e0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005e10:	4b0f      	ldr	r3, [pc, #60]	; (8005e50 <SystemInit+0x104>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005e16:	4b13      	ldr	r3, [pc, #76]	; (8005e64 <SystemInit+0x118>)
 8005e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e1a:	4a12      	ldr	r2, [pc, #72]	; (8005e64 <SystemInit+0x118>)
 8005e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e20:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005e22:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <SystemInit+0x11c>)
 8005e24:	681a      	ldr	r2, [r3, #0]
 8005e26:	4b11      	ldr	r3, [pc, #68]	; (8005e6c <SystemInit+0x120>)
 8005e28:	4013      	ands	r3, r2
 8005e2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e2e:	d202      	bcs.n	8005e36 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005e30:	4b0f      	ldr	r3, [pc, #60]	; (8005e70 <SystemInit+0x124>)
 8005e32:	2201      	movs	r2, #1
 8005e34:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005e36:	4b0f      	ldr	r3, [pc, #60]	; (8005e74 <SystemInit+0x128>)
 8005e38:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005e3c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8005e3e:	bf00      	nop
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr
 8005e48:	e000ed00 	.word	0xe000ed00
 8005e4c:	52002000 	.word	0x52002000
 8005e50:	58024400 	.word	0x58024400
 8005e54:	eaf6ed7f 	.word	0xeaf6ed7f
 8005e58:	02020200 	.word	0x02020200
 8005e5c:	01ff0000 	.word	0x01ff0000
 8005e60:	01010280 	.word	0x01010280
 8005e64:	580000c0 	.word	0x580000c0
 8005e68:	5c001000 	.word	0x5c001000
 8005e6c:	ffff0000 	.word	0xffff0000
 8005e70:	51008108 	.word	0x51008108
 8005e74:	52004000 	.word	0x52004000

08005e78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8005e7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e82:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8005e84:	bf00      	nop
 8005e86:	4b37      	ldr	r3, [pc, #220]	; (8005f64 <main+0xec>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d004      	beq.n	8005e9c <main+0x24>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1e5a      	subs	r2, r3, #1
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	dcf4      	bgt.n	8005e86 <main+0xe>
	if ( timeout < 0 )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da01      	bge.n	8005ea6 <main+0x2e>
	{
		Error_Handler();
 8005ea2:	f000 fbeb 	bl	800667c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005ea6:	f001 fb69 	bl	800757c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005eaa:	f000 f863 	bl	8005f74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005eae:	f000 f8e5 	bl	800607c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8005eb2:	4b2c      	ldr	r3, [pc, #176]	; (8005f64 <main+0xec>)
 8005eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eb8:	4a2a      	ldr	r2, [pc, #168]	; (8005f64 <main+0xec>)
 8005eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ebe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ec2:	4b28      	ldr	r3, [pc, #160]	; (8005f64 <main+0xec>)
 8005ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ec8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ecc:	603b      	str	r3, [r7, #0]
 8005ece:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8005ed0:	2000      	movs	r0, #0
 8005ed2:	f004 fd7f 	bl	800a9d4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	2000      	movs	r0, #0
 8005eda:	f004 fd95 	bl	800aa08 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8005ede:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ee2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8005ee4:	bf00      	nop
 8005ee6:	4b1f      	ldr	r3, [pc, #124]	; (8005f64 <main+0xec>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d104      	bne.n	8005efc <main+0x84>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	1e5a      	subs	r2, r3, #1
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	dcf4      	bgt.n	8005ee6 <main+0x6e>
	if ( timeout < 0 )
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	da01      	bge.n	8005f06 <main+0x8e>
	{
		Error_Handler();
 8005f02:	f000 fbbb 	bl	800667c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f06:	f000 fa6d 	bl	80063e4 <MX_GPIO_Init>
  MX_ETH_Init();
 8005f0a:	f000 f8e9 	bl	80060e0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8005f0e:	f000 f9c1 	bl	8006294 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8005f12:	f000 fa3f 	bl	8006394 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005f16:	f000 fa0b 	bl	8006330 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8005f1a:	f000 f92d 	bl	8006178 <MX_SPI3_Init>
  MX_TIM7_Init();
 8005f1e:	f000 f983 	bl	8006228 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8005f22:	f000 fcb3 	bl	800688c <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8005f26:	2000      	movs	r0, #0
 8005f28:	f000 ffbd 	bl	8006ea6 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8005f2c:	2000      	movs	r0, #0
 8005f2e:	f000 ffa9 	bl	8006e84 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8005f32:	f001 fba9 	bl	8007688 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <main+0xf0>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	2bc8      	cmp	r3, #200	; 0xc8
 8005f40:	d9f7      	bls.n	8005f32 <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8005f42:	f001 fba1 	bl	8007688 <HAL_GetTick>
 8005f46:	4603      	mov	r3, r0
 8005f48:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <main+0xf0>)
 8005f4a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8005f4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f50:	4806      	ldr	r0, [pc, #24]	; (8005f6c <main+0xf4>)
 8005f52:	f004 fd24 	bl	800a99e <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8005f56:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8005f5a:	4905      	ldr	r1, [pc, #20]	; (8005f70 <main+0xf8>)
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7fb fba1 	bl	80016a4 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8005f62:	e7e6      	b.n	8005f32 <main+0xba>
 8005f64:	58024400 	.word	0x58024400
 8005f68:	24000e98 	.word	0x24000e98
 8005f6c:	58020400 	.word	0x58020400
 8005f70:	240009c0 	.word	0x240009c0

08005f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b09c      	sub	sp, #112	; 0x70
 8005f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f7e:	224c      	movs	r2, #76	; 0x4c
 8005f80:	2100      	movs	r1, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	f00a f9bc 	bl	8010300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005f88:	1d3b      	adds	r3, r7, #4
 8005f8a:	2220      	movs	r2, #32
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f00a f9b6 	bl	8010300 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8005f94:	2004      	movs	r0, #4
 8005f96:	f004 fe93 	bl	800acc0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	603b      	str	r3, [r7, #0]
 8005f9e:	4b34      	ldr	r3, [pc, #208]	; (8006070 <SystemClock_Config+0xfc>)
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	4a33      	ldr	r2, [pc, #204]	; (8006070 <SystemClock_Config+0xfc>)
 8005fa4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005fa8:	6193      	str	r3, [r2, #24]
 8005faa:	4b31      	ldr	r3, [pc, #196]	; (8006070 <SystemClock_Config+0xfc>)
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	4b2f      	ldr	r3, [pc, #188]	; (8006074 <SystemClock_Config+0x100>)
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	4a2e      	ldr	r2, [pc, #184]	; (8006074 <SystemClock_Config+0x100>)
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fc0:	4b2c      	ldr	r3, [pc, #176]	; (8006074 <SystemClock_Config+0x100>)
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005fcc:	bf00      	nop
 8005fce:	4b28      	ldr	r3, [pc, #160]	; (8006070 <SystemClock_Config+0xfc>)
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005fd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fda:	d1f8      	bne.n	8005fce <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005fdc:	4b26      	ldr	r3, [pc, #152]	; (8006078 <SystemClock_Config+0x104>)
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	f023 0303 	bic.w	r3, r3, #3
 8005fe4:	4a24      	ldr	r2, [pc, #144]	; (8006078 <SystemClock_Config+0x104>)
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005fec:	2301      	movs	r3, #1
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8005ff0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ff6:	2302      	movs	r3, #2
 8005ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005ffa:	2302      	movs	r3, #2
 8005ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005ffe:	2301      	movs	r3, #1
 8006000:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8006002:	2378      	movs	r3, #120	; 0x78
 8006004:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006006:	2302      	movs	r3, #2
 8006008:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800600a:	2302      	movs	r3, #2
 800600c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800600e:	2302      	movs	r3, #2
 8006010:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8006012:	230c      	movs	r3, #12
 8006014:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006016:	2300      	movs	r3, #0
 8006018:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800601a:	2300      	movs	r3, #0
 800601c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800601e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006022:	4618      	mov	r0, r3
 8006024:	f004 feb6 	bl	800ad94 <HAL_RCC_OscConfig>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800602e:	f000 fb25 	bl	800667c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006032:	233f      	movs	r3, #63	; 0x3f
 8006034:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006036:	2303      	movs	r3, #3
 8006038:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800603e:	2308      	movs	r3, #8
 8006040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006042:	2340      	movs	r3, #64	; 0x40
 8006044:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8006046:	2340      	movs	r3, #64	; 0x40
 8006048:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800604a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800604e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006050:	2340      	movs	r3, #64	; 0x40
 8006052:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006054:	1d3b      	adds	r3, r7, #4
 8006056:	2104      	movs	r1, #4
 8006058:	4618      	mov	r0, r3
 800605a:	f005 fac9 	bl	800b5f0 <HAL_RCC_ClockConfig>
 800605e:	4603      	mov	r3, r0
 8006060:	2b00      	cmp	r3, #0
 8006062:	d001      	beq.n	8006068 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8006064:	f000 fb0a 	bl	800667c <Error_Handler>
  }
}
 8006068:	bf00      	nop
 800606a:	3770      	adds	r7, #112	; 0x70
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	58024800 	.word	0x58024800
 8006074:	58000400 	.word	0x58000400
 8006078:	58024400 	.word	0x58024400

0800607c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b0b0      	sub	sp, #192	; 0xc0
 8006080:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006082:	1d3b      	adds	r3, r7, #4
 8006084:	22bc      	movs	r2, #188	; 0xbc
 8006086:	2100      	movs	r1, #0
 8006088:	4618      	mov	r0, r3
 800608a:	f00a f939 	bl	8010300 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 800608e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8006092:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8006094:	2301      	movs	r3, #1
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8006098:	2318      	movs	r3, #24
 800609a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800609c:	2302      	movs	r3, #2
 800609e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80060a0:	2304      	movs	r3, #4
 80060a2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80060a4:	2302      	movs	r3, #2
 80060a6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80060a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80060ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80060b2:	2300      	movs	r3, #0
 80060b4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80060b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80060ba:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80060bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80060c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060c4:	1d3b      	adds	r3, r7, #4
 80060c6:	4618      	mov	r0, r3
 80060c8:	f005 fe1e 	bl	800bd08 <HAL_RCCEx_PeriphCLKConfig>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d001      	beq.n	80060d6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80060d2:	f000 fad3 	bl	800667c <Error_Handler>
  }
}
 80060d6:	bf00      	nop
 80060d8:	37c0      	adds	r7, #192	; 0xc0
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
	...

080060e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80060e4:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <MX_ETH_Init+0x80>)
 80060e6:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <MX_ETH_Init+0x84>)
 80060e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80060ea:	4b1f      	ldr	r3, [pc, #124]	; (8006168 <MX_ETH_Init+0x88>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80060f0:	4b1d      	ldr	r3, [pc, #116]	; (8006168 <MX_ETH_Init+0x88>)
 80060f2:	2280      	movs	r2, #128	; 0x80
 80060f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80060f6:	4b1c      	ldr	r3, [pc, #112]	; (8006168 <MX_ETH_Init+0x88>)
 80060f8:	22e1      	movs	r2, #225	; 0xe1
 80060fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80060fc:	4b1a      	ldr	r3, [pc, #104]	; (8006168 <MX_ETH_Init+0x88>)
 80060fe:	2200      	movs	r2, #0
 8006100:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8006102:	4b19      	ldr	r3, [pc, #100]	; (8006168 <MX_ETH_Init+0x88>)
 8006104:	2200      	movs	r2, #0
 8006106:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8006108:	4b17      	ldr	r3, [pc, #92]	; (8006168 <MX_ETH_Init+0x88>)
 800610a:	2200      	movs	r2, #0
 800610c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800610e:	4b14      	ldr	r3, [pc, #80]	; (8006160 <MX_ETH_Init+0x80>)
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <MX_ETH_Init+0x88>)
 8006112:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006114:	4b12      	ldr	r3, [pc, #72]	; (8006160 <MX_ETH_Init+0x80>)
 8006116:	2201      	movs	r2, #1
 8006118:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800611a:	4b11      	ldr	r3, [pc, #68]	; (8006160 <MX_ETH_Init+0x80>)
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <MX_ETH_Init+0x8c>)
 800611e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006120:	4b0f      	ldr	r3, [pc, #60]	; (8006160 <MX_ETH_Init+0x80>)
 8006122:	4a13      	ldr	r2, [pc, #76]	; (8006170 <MX_ETH_Init+0x90>)
 8006124:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <MX_ETH_Init+0x80>)
 8006128:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800612c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800612e:	480c      	ldr	r0, [pc, #48]	; (8006160 <MX_ETH_Init+0x80>)
 8006130:	f003 fe30 	bl	8009d94 <HAL_ETH_Init>
 8006134:	4603      	mov	r3, r0
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800613a:	f000 fa9f 	bl	800667c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800613e:	2238      	movs	r2, #56	; 0x38
 8006140:	2100      	movs	r1, #0
 8006142:	480c      	ldr	r0, [pc, #48]	; (8006174 <MX_ETH_Init+0x94>)
 8006144:	f00a f8dc 	bl	8010300 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006148:	4b0a      	ldr	r3, [pc, #40]	; (8006174 <MX_ETH_Init+0x94>)
 800614a:	2221      	movs	r2, #33	; 0x21
 800614c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800614e:	4b09      	ldr	r3, [pc, #36]	; (8006174 <MX_ETH_Init+0x94>)
 8006150:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006154:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006156:	4b07      	ldr	r3, [pc, #28]	; (8006174 <MX_ETH_Init+0x94>)
 8006158:	2200      	movs	r2, #0
 800615a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800615c:	bf00      	nop
 800615e:	bd80      	pop	{r7, pc}
 8006160:	240001b0 	.word	0x240001b0
 8006164:	40028000 	.word	0x40028000
 8006168:	24000ea8 	.word	0x24000ea8
 800616c:	240000e8 	.word	0x240000e8
 8006170:	24000088 	.word	0x24000088
 8006174:	24000178 	.word	0x24000178

08006178 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800617c:	4b28      	ldr	r3, [pc, #160]	; (8006220 <MX_SPI3_Init+0xa8>)
 800617e:	4a29      	ldr	r2, [pc, #164]	; (8006224 <MX_SPI3_Init+0xac>)
 8006180:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006182:	4b27      	ldr	r3, [pc, #156]	; (8006220 <MX_SPI3_Init+0xa8>)
 8006184:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006188:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 800618a:	4b25      	ldr	r3, [pc, #148]	; (8006220 <MX_SPI3_Init+0xa8>)
 800618c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006190:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006192:	4b23      	ldr	r3, [pc, #140]	; (8006220 <MX_SPI3_Init+0xa8>)
 8006194:	2207      	movs	r2, #7
 8006196:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006198:	4b21      	ldr	r3, [pc, #132]	; (8006220 <MX_SPI3_Init+0xa8>)
 800619a:	2200      	movs	r2, #0
 800619c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800619e:	4b20      	ldr	r3, [pc, #128]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80061a4:	4b1e      	ldr	r3, [pc, #120]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80061aa:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80061ac:	4b1c      	ldr	r3, [pc, #112]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061b2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80061b4:	4b1a      	ldr	r3, [pc, #104]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80061ba:	4b19      	ldr	r3, [pc, #100]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061bc:	2200      	movs	r2, #0
 80061be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061c0:	4b17      	ldr	r3, [pc, #92]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80061c6:	4b16      	ldr	r3, [pc, #88]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80061cc:	4b14      	ldr	r3, [pc, #80]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80061d2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80061d4:	4b12      	ldr	r3, [pc, #72]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80061da:	4b11      	ldr	r3, [pc, #68]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061dc:	2200      	movs	r2, #0
 80061de:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80061e0:	4b0f      	ldr	r3, [pc, #60]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061e2:	2200      	movs	r2, #0
 80061e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80061e6:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80061ec:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <MX_SPI3_Init+0xa8>)
 80061fa:	2200      	movs	r2, #0
 80061fc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80061fe:	4b08      	ldr	r3, [pc, #32]	; (8006220 <MX_SPI3_Init+0xa8>)
 8006200:	2200      	movs	r2, #0
 8006202:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8006204:	4b06      	ldr	r3, [pc, #24]	; (8006220 <MX_SPI3_Init+0xa8>)
 8006206:	2200      	movs	r2, #0
 8006208:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800620a:	4805      	ldr	r0, [pc, #20]	; (8006220 <MX_SPI3_Init+0xa8>)
 800620c:	f007 f8e4 	bl	800d3d8 <HAL_SPI_Init>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8006216:	f000 fa31 	bl	800667c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800621a:	bf00      	nop
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	24000260 	.word	0x24000260
 8006224:	40003c00 	.word	0x40003c00

08006228 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800622e:	1d3b      	adds	r3, r7, #4
 8006230:	2200      	movs	r2, #0
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	605a      	str	r2, [r3, #4]
 8006236:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006238:	4b14      	ldr	r3, [pc, #80]	; (800628c <MX_TIM7_Init+0x64>)
 800623a:	4a15      	ldr	r2, [pc, #84]	; (8006290 <MX_TIM7_Init+0x68>)
 800623c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <MX_TIM7_Init+0x64>)
 8006240:	22ef      	movs	r2, #239	; 0xef
 8006242:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006244:	4b11      	ldr	r3, [pc, #68]	; (800628c <MX_TIM7_Init+0x64>)
 8006246:	2200      	movs	r2, #0
 8006248:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800624a:	4b10      	ldr	r3, [pc, #64]	; (800628c <MX_TIM7_Init+0x64>)
 800624c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006250:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006252:	4b0e      	ldr	r3, [pc, #56]	; (800628c <MX_TIM7_Init+0x64>)
 8006254:	2200      	movs	r2, #0
 8006256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006258:	480c      	ldr	r0, [pc, #48]	; (800628c <MX_TIM7_Init+0x64>)
 800625a:	f007 fc9e 	bl	800db9a <HAL_TIM_Base_Init>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8006264:	f000 fa0a 	bl	800667c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006268:	2300      	movs	r3, #0
 800626a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006270:	1d3b      	adds	r3, r7, #4
 8006272:	4619      	mov	r1, r3
 8006274:	4805      	ldr	r0, [pc, #20]	; (800628c <MX_TIM7_Init+0x64>)
 8006276:	f007 ff6f 	bl	800e158 <HAL_TIMEx_MasterConfigSynchronization>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006280:	f000 f9fc 	bl	800667c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	240002e8 	.word	0x240002e8
 8006290:	40001400 	.word	0x40001400

08006294 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006298:	4b22      	ldr	r3, [pc, #136]	; (8006324 <MX_USART3_UART_Init+0x90>)
 800629a:	4a23      	ldr	r2, [pc, #140]	; (8006328 <MX_USART3_UART_Init+0x94>)
 800629c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 800629e:	4b21      	ldr	r3, [pc, #132]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062a0:	4a22      	ldr	r2, [pc, #136]	; (800632c <MX_USART3_UART_Init+0x98>)
 80062a2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80062a4:	4b1f      	ldr	r3, [pc, #124]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062a6:	2200      	movs	r2, #0
 80062a8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80062aa:	4b1e      	ldr	r3, [pc, #120]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80062b0:	4b1c      	ldr	r3, [pc, #112]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80062b6:	4b1b      	ldr	r3, [pc, #108]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062b8:	220c      	movs	r2, #12
 80062ba:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80062bc:	4b19      	ldr	r3, [pc, #100]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062be:	2200      	movs	r2, #0
 80062c0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80062c2:	4b18      	ldr	r3, [pc, #96]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062c4:	2200      	movs	r2, #0
 80062c6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80062c8:	4b16      	ldr	r3, [pc, #88]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80062ce:	4b15      	ldr	r3, [pc, #84]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80062d4:	4b13      	ldr	r3, [pc, #76]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80062da:	4812      	ldr	r0, [pc, #72]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062dc:	f007 ffe8 	bl	800e2b0 <HAL_UART_Init>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80062e6:	f000 f9c9 	bl	800667c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062ea:	2100      	movs	r1, #0
 80062ec:	480d      	ldr	r0, [pc, #52]	; (8006324 <MX_USART3_UART_Init+0x90>)
 80062ee:	f009 fc09 	bl	800fb04 <HAL_UARTEx_SetTxFifoThreshold>
 80062f2:	4603      	mov	r3, r0
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d001      	beq.n	80062fc <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80062f8:	f000 f9c0 	bl	800667c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80062fc:	2100      	movs	r1, #0
 80062fe:	4809      	ldr	r0, [pc, #36]	; (8006324 <MX_USART3_UART_Init+0x90>)
 8006300:	f009 fc3e 	bl	800fb80 <HAL_UARTEx_SetRxFifoThreshold>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d001      	beq.n	800630e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800630a:	f000 f9b7 	bl	800667c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800630e:	4805      	ldr	r0, [pc, #20]	; (8006324 <MX_USART3_UART_Init+0x90>)
 8006310:	f009 fbbf 	bl	800fa92 <HAL_UARTEx_DisableFifoMode>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800631a:	f000 f9af 	bl	800667c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800631e:	bf00      	nop
 8006320:	bd80      	pop	{r7, pc}
 8006322:	bf00      	nop
 8006324:	24000334 	.word	0x24000334
 8006328:	40004800 	.word	0x40004800
 800632c:	0005dc00 	.word	0x0005dc00

08006330 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006334:	4b15      	ldr	r3, [pc, #84]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006336:	4a16      	ldr	r2, [pc, #88]	; (8006390 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8006338:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800633a:	4b14      	ldr	r3, [pc, #80]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800633c:	2209      	movs	r2, #9
 800633e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006340:	4b12      	ldr	r3, [pc, #72]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006342:	2202      	movs	r2, #2
 8006344:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006346:	4b11      	ldr	r3, [pc, #68]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006348:	2200      	movs	r2, #0
 800634a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800634c:	4b0f      	ldr	r3, [pc, #60]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800634e:	2202      	movs	r2, #2
 8006350:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006352:	4b0e      	ldr	r3, [pc, #56]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006354:	2200      	movs	r2, #0
 8006356:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006358:	4b0c      	ldr	r3, [pc, #48]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800635a:	2200      	movs	r2, #0
 800635c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800635e:	4b0b      	ldr	r3, [pc, #44]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006360:	2200      	movs	r2, #0
 8006362:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8006364:	4b09      	ldr	r3, [pc, #36]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006366:	2201      	movs	r2, #1
 8006368:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800636a:	4b08      	ldr	r3, [pc, #32]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800636c:	2201      	movs	r2, #1
 800636e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006370:	4b06      	ldr	r3, [pc, #24]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006372:	2200      	movs	r2, #0
 8006374:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006376:	4805      	ldr	r0, [pc, #20]	; (800638c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006378:	f004 fb5a 	bl	800aa30 <HAL_PCD_Init>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8006382:	f000 f97b 	bl	800667c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006386:	bf00      	nop
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	240004b4 	.word	0x240004b4
 8006390:	40080000 	.word	0x40080000

08006394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800639a:	4b11      	ldr	r3, [pc, #68]	; (80063e0 <MX_DMA_Init+0x4c>)
 800639c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063a0:	4a0f      	ldr	r2, [pc, #60]	; (80063e0 <MX_DMA_Init+0x4c>)
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <MX_DMA_Init+0x4c>)
 80063ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	607b      	str	r3, [r7, #4]
 80063b6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80063b8:	2200      	movs	r2, #0
 80063ba:	2100      	movs	r1, #0
 80063bc:	200c      	movs	r0, #12
 80063be:	f001 fa8e 	bl	80078de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80063c2:	200c      	movs	r0, #12
 80063c4:	f001 faa5 	bl	8007912 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80063c8:	2200      	movs	r2, #0
 80063ca:	2100      	movs	r1, #0
 80063cc:	200f      	movs	r0, #15
 80063ce:	f001 fa86 	bl	80078de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80063d2:	200f      	movs	r0, #15
 80063d4:	f001 fa9d 	bl	8007912 <HAL_NVIC_EnableIRQ>

}
 80063d8:	bf00      	nop
 80063da:	3708      	adds	r7, #8
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	58024400 	.word	0x58024400

080063e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08e      	sub	sp, #56	; 0x38
 80063e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80063ee:	2200      	movs	r2, #0
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	605a      	str	r2, [r3, #4]
 80063f4:	609a      	str	r2, [r3, #8]
 80063f6:	60da      	str	r2, [r3, #12]
 80063f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80063fa:	4b8a      	ldr	r3, [pc, #552]	; (8006624 <MX_GPIO_Init+0x240>)
 80063fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006400:	4a88      	ldr	r2, [pc, #544]	; (8006624 <MX_GPIO_Init+0x240>)
 8006402:	f043 0304 	orr.w	r3, r3, #4
 8006406:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800640a:	4b86      	ldr	r3, [pc, #536]	; (8006624 <MX_GPIO_Init+0x240>)
 800640c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	623b      	str	r3, [r7, #32]
 8006416:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006418:	4b82      	ldr	r3, [pc, #520]	; (8006624 <MX_GPIO_Init+0x240>)
 800641a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800641e:	4a81      	ldr	r2, [pc, #516]	; (8006624 <MX_GPIO_Init+0x240>)
 8006420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006424:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006428:	4b7e      	ldr	r3, [pc, #504]	; (8006624 <MX_GPIO_Init+0x240>)
 800642a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800642e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006436:	4b7b      	ldr	r3, [pc, #492]	; (8006624 <MX_GPIO_Init+0x240>)
 8006438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800643c:	4a79      	ldr	r2, [pc, #484]	; (8006624 <MX_GPIO_Init+0x240>)
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006446:	4b77      	ldr	r3, [pc, #476]	; (8006624 <MX_GPIO_Init+0x240>)
 8006448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800644c:	f003 0301 	and.w	r3, r3, #1
 8006450:	61bb      	str	r3, [r7, #24]
 8006452:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006454:	4b73      	ldr	r3, [pc, #460]	; (8006624 <MX_GPIO_Init+0x240>)
 8006456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800645a:	4a72      	ldr	r2, [pc, #456]	; (8006624 <MX_GPIO_Init+0x240>)
 800645c:	f043 0302 	orr.w	r3, r3, #2
 8006460:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006464:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <MX_GPIO_Init+0x240>)
 8006466:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	617b      	str	r3, [r7, #20]
 8006470:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006472:	4b6c      	ldr	r3, [pc, #432]	; (8006624 <MX_GPIO_Init+0x240>)
 8006474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006478:	4a6a      	ldr	r2, [pc, #424]	; (8006624 <MX_GPIO_Init+0x240>)
 800647a:	f043 0320 	orr.w	r3, r3, #32
 800647e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006482:	4b68      	ldr	r3, [pc, #416]	; (8006624 <MX_GPIO_Init+0x240>)
 8006484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	613b      	str	r3, [r7, #16]
 800648e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006490:	4b64      	ldr	r3, [pc, #400]	; (8006624 <MX_GPIO_Init+0x240>)
 8006492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006496:	4a63      	ldr	r2, [pc, #396]	; (8006624 <MX_GPIO_Init+0x240>)
 8006498:	f043 0310 	orr.w	r3, r3, #16
 800649c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064a0:	4b60      	ldr	r3, [pc, #384]	; (8006624 <MX_GPIO_Init+0x240>)
 80064a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064a6:	f003 0310 	and.w	r3, r3, #16
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80064ae:	4b5d      	ldr	r3, [pc, #372]	; (8006624 <MX_GPIO_Init+0x240>)
 80064b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064b4:	4a5b      	ldr	r2, [pc, #364]	; (8006624 <MX_GPIO_Init+0x240>)
 80064b6:	f043 0308 	orr.w	r3, r3, #8
 80064ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064be:	4b59      	ldr	r3, [pc, #356]	; (8006624 <MX_GPIO_Init+0x240>)
 80064c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064c4:	f003 0308 	and.w	r3, r3, #8
 80064c8:	60bb      	str	r3, [r7, #8]
 80064ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80064cc:	4b55      	ldr	r3, [pc, #340]	; (8006624 <MX_GPIO_Init+0x240>)
 80064ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064d2:	4a54      	ldr	r2, [pc, #336]	; (8006624 <MX_GPIO_Init+0x240>)
 80064d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80064dc:	4b51      	ldr	r3, [pc, #324]	; (8006624 <MX_GPIO_Init+0x240>)
 80064de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 80064ea:	2201      	movs	r2, #1
 80064ec:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80064f0:	484d      	ldr	r0, [pc, #308]	; (8006628 <MX_GPIO_Init+0x244>)
 80064f2:	f004 fa3b 	bl	800a96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 80064f6:	2200      	movs	r2, #0
 80064f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80064fc:	484a      	ldr	r0, [pc, #296]	; (8006628 <MX_GPIO_Init+0x244>)
 80064fe:	f004 fa35 	bl	800a96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8006502:	2200      	movs	r2, #0
 8006504:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006508:	4848      	ldr	r0, [pc, #288]	; (800662c <MX_GPIO_Init+0x248>)
 800650a:	f004 fa2f 	bl	800a96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800650e:	2200      	movs	r2, #0
 8006510:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006514:	4846      	ldr	r0, [pc, #280]	; (8006630 <MX_GPIO_Init+0x24c>)
 8006516:	f004 fa29 	bl	800a96c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800651a:	2201      	movs	r2, #1
 800651c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006520:	4844      	ldr	r0, [pc, #272]	; (8006634 <MX_GPIO_Init+0x250>)
 8006522:	f004 fa23 	bl	800a96c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8006526:	230d      	movs	r3, #13
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800652a:	2300      	movs	r3, #0
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652e:	2300      	movs	r3, #0
 8006530:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006532:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006536:	4619      	mov	r1, r3
 8006538:	483f      	ldr	r0, [pc, #252]	; (8006638 <MX_GPIO_Init+0x254>)
 800653a:	f004 f84f 	bl	800a5dc <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800653e:	2308      	movs	r3, #8
 8006540:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006542:	2300      	movs	r3, #0
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006546:	2300      	movs	r3, #0
 8006548:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800654a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800654e:	4619      	mov	r1, r3
 8006550:	483a      	ldr	r0, [pc, #232]	; (800663c <MX_GPIO_Init+0x258>)
 8006552:	f004 f843 	bl	800a5dc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8006556:	2302      	movs	r3, #2
 8006558:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800655a:	2300      	movs	r3, #0
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800655e:	2300      	movs	r3, #0
 8006560:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8006562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006566:	4619      	mov	r1, r3
 8006568:	4830      	ldr	r0, [pc, #192]	; (800662c <MX_GPIO_Init+0x248>)
 800656a:	f004 f837 	bl	800a5dc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 800656e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006572:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006574:	2300      	movs	r3, #0
 8006576:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006578:	2300      	movs	r3, #0
 800657a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 800657c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006580:	4619      	mov	r1, r3
 8006582:	482f      	ldr	r0, [pc, #188]	; (8006640 <MX_GPIO_Init+0x25c>)
 8006584:	f004 f82a 	bl	800a5dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8006588:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800658c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800658e:	2301      	movs	r3, #1
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006592:	2300      	movs	r3, #0
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006596:	2300      	movs	r3, #0
 8006598:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800659a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800659e:	4619      	mov	r1, r3
 80065a0:	4821      	ldr	r0, [pc, #132]	; (8006628 <MX_GPIO_Init+0x244>)
 80065a2:	f004 f81b 	bl	800a5dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80065a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065ac:	2301      	movs	r3, #1
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065b4:	2300      	movs	r3, #0
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80065b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065bc:	4619      	mov	r1, r3
 80065be:	481b      	ldr	r0, [pc, #108]	; (800662c <MX_GPIO_Init+0x248>)
 80065c0:	f004 f80c 	bl	800a5dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80065c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80065ca:	2301      	movs	r3, #1
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ce:	2300      	movs	r3, #0
 80065d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80065d2:	2300      	movs	r3, #0
 80065d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80065d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065da:	4619      	mov	r1, r3
 80065dc:	4814      	ldr	r0, [pc, #80]	; (8006630 <MX_GPIO_Init+0x24c>)
 80065de:	f003 fffd 	bl	800a5dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80065e2:	2380      	movs	r3, #128	; 0x80
 80065e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80065e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ec:	2300      	movs	r3, #0
 80065ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80065f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065f4:	4619      	mov	r1, r3
 80065f6:	480f      	ldr	r0, [pc, #60]	; (8006634 <MX_GPIO_Init+0x250>)
 80065f8:	f003 fff0 	bl	800a5dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80065fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006602:	2301      	movs	r3, #1
 8006604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006606:	2300      	movs	r3, #0
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800660a:	2300      	movs	r3, #0
 800660c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800660e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006612:	4619      	mov	r1, r3
 8006614:	4807      	ldr	r0, [pc, #28]	; (8006634 <MX_GPIO_Init+0x250>)
 8006616:	f003 ffe1 	bl	800a5dc <HAL_GPIO_Init>

}
 800661a:	bf00      	nop
 800661c:	3738      	adds	r7, #56	; 0x38
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	58024400 	.word	0x58024400
 8006628:	58021000 	.word	0x58021000
 800662c:	58020400 	.word	0x58020400
 8006630:	58020c00 	.word	0x58020c00
 8006634:	58021800 	.word	0x58021800
 8006638:	58020800 	.word	0x58020800
 800663c:	58020000 	.word	0x58020000
 8006640:	58021400 	.word	0x58021400

08006644 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8006644:	b4b0      	push	{r4, r5, r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4a09      	ldr	r2, [pc, #36]	; (8006674 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d10a      	bne.n	800666a <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8006654:	4b08      	ldr	r3, [pc, #32]	; (8006678 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800665a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800665e:	1854      	adds	r4, r2, r1
 8006660:	f143 0500 	adc.w	r5, r3, #0
 8006664:	4b04      	ldr	r3, [pc, #16]	; (8006678 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006666:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 800666a:	bf00      	nop
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	bcb0      	pop	{r4, r5, r7}
 8006672:	4770      	bx	lr
 8006674:	240002e8 	.word	0x240002e8
 8006678:	24000ea0 	.word	0x24000ea0

0800667c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800667c:	b480      	push	{r7}
 800667e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006680:	b672      	cpsid	i
}
 8006682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8006684:	e7fe      	b.n	8006684 <Error_Handler+0x8>
	...

08006688 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8006688:	b580      	push	{r7, lr}
 800668a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 800668c:	2200      	movs	r2, #0
 800668e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006692:	4802      	ldr	r0, [pc, #8]	; (800669c <ST7735_Select+0x14>)
 8006694:	f004 f96a 	bl	800a96c <HAL_GPIO_WritePin>
}
 8006698:	bf00      	nop
 800669a:	bd80      	pop	{r7, pc}
 800669c:	58021000 	.word	0x58021000

080066a0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80066a4:	2201      	movs	r2, #1
 80066a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066aa:	4802      	ldr	r0, [pc, #8]	; (80066b4 <ST7735_Unselect+0x14>)
 80066ac:	f004 f95e 	bl	800a96c <HAL_GPIO_WritePin>
}
 80066b0:	bf00      	nop
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	58021000 	.word	0x58021000

080066b8 <ST7735_Select1>:
static void ST7735_Select1() {
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80066bc:	2200      	movs	r2, #0
 80066be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066c2:	4802      	ldr	r0, [pc, #8]	; (80066cc <ST7735_Select1+0x14>)
 80066c4:	f004 f952 	bl	800a96c <HAL_GPIO_WritePin>
}
 80066c8:	bf00      	nop
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	58021000 	.word	0x58021000

080066d0 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80066d4:	2201      	movs	r2, #1
 80066d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066da:	4802      	ldr	r0, [pc, #8]	; (80066e4 <ST7735_Unselect1+0x14>)
 80066dc:	f004 f946 	bl	800a96c <HAL_GPIO_WritePin>
}
 80066e0:	bf00      	nop
 80066e2:	bd80      	pop	{r7, pc}
 80066e4:	58021000 	.word	0x58021000

080066e8 <ST7735_Reset>:

static void ST7735_Reset() {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80066ec:	2200      	movs	r2, #0
 80066ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80066f2:	4807      	ldr	r0, [pc, #28]	; (8006710 <ST7735_Reset+0x28>)
 80066f4:	f004 f93a 	bl	800a96c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80066f8:	2005      	movs	r0, #5
 80066fa:	f000 ffd1 	bl	80076a0 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80066fe:	2201      	movs	r2, #1
 8006700:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006704:	4802      	ldr	r0, [pc, #8]	; (8006710 <ST7735_Reset+0x28>)
 8006706:	f004 f931 	bl	800a96c <HAL_GPIO_WritePin>
}
 800670a:	bf00      	nop
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	58021000 	.word	0x58021000

08006714 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800671e:	2200      	movs	r2, #0
 8006720:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006724:	4806      	ldr	r0, [pc, #24]	; (8006740 <ST7735_WriteCommand+0x2c>)
 8006726:	f004 f921 	bl	800a96c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800672a:	1df9      	adds	r1, r7, #7
 800672c:	f04f 33ff 	mov.w	r3, #4294967295
 8006730:	2201      	movs	r2, #1
 8006732:	4804      	ldr	r0, [pc, #16]	; (8006744 <ST7735_WriteCommand+0x30>)
 8006734:	f006 ff56 	bl	800d5e4 <HAL_SPI_Transmit>
}
 8006738:	bf00      	nop
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}
 8006740:	58021800 	.word	0x58021800
 8006744:	24000260 	.word	0x24000260

08006748 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006752:	2201      	movs	r2, #1
 8006754:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006758:	4807      	ldr	r0, [pc, #28]	; (8006778 <ST7735_WriteData+0x30>)
 800675a:	f004 f907 	bl	800a96c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	b29a      	uxth	r2, r3
 8006762:	f04f 33ff 	mov.w	r3, #4294967295
 8006766:	6879      	ldr	r1, [r7, #4]
 8006768:	4804      	ldr	r0, [pc, #16]	; (800677c <ST7735_WriteData+0x34>)
 800676a:	f006 ff3b 	bl	800d5e4 <HAL_SPI_Transmit>
}
 800676e:	bf00      	nop
 8006770:	3708      	adds	r7, #8
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
 8006776:	bf00      	nop
 8006778:	58021800 	.word	0x58021800
 800677c:	24000260 	.word	0x24000260

08006780 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	781b      	ldrb	r3, [r3, #0]
 8006790:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 8006792:	e034      	b.n	80067fe <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 800679e:	7afb      	ldrb	r3, [r7, #11]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff ffb7 	bl	8006714 <ST7735_WriteCommand>

		numArgs = *addr++;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	607a      	str	r2, [r7, #4]
 80067ac:	781b      	ldrb	r3, [r3, #0]
 80067ae:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 80067b0:	7abb      	ldrb	r3, [r7, #10]
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b8:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 80067ba:	7abb      	ldrb	r3, [r7, #10]
 80067bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067c0:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 80067c2:	7abb      	ldrb	r3, [r7, #10]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 80067c8:	7abb      	ldrb	r3, [r7, #10]
 80067ca:	4619      	mov	r1, r3
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7ff ffbb 	bl	8006748 <ST7735_WriteData>
			addr += numArgs;
 80067d2:	7abb      	ldrb	r3, [r7, #10]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	4413      	add	r3, r2
 80067d8:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 80067da:	89bb      	ldrh	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00e      	beq.n	80067fe <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	607a      	str	r2, [r7, #4]
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 80067ea:	89bb      	ldrh	r3, [r7, #12]
 80067ec:	2bff      	cmp	r3, #255	; 0xff
 80067ee:	d102      	bne.n	80067f6 <ST7735_ExecuteCommandList+0x76>
 80067f0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80067f4:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 80067f6:	89bb      	ldrh	r3, [r7, #12]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f000 ff51 	bl	80076a0 <HAL_Delay>
	while(numCommands--) {
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
 8006800:	1e5a      	subs	r2, r3, #1
 8006802:	73fa      	strb	r2, [r7, #15]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1c5      	bne.n	8006794 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8006812:	b590      	push	{r4, r7, lr}
 8006814:	b085      	sub	sp, #20
 8006816:	af00      	add	r7, sp, #0
 8006818:	4604      	mov	r4, r0
 800681a:	4608      	mov	r0, r1
 800681c:	4611      	mov	r1, r2
 800681e:	461a      	mov	r2, r3
 8006820:	4623      	mov	r3, r4
 8006822:	71fb      	strb	r3, [r7, #7]
 8006824:	4603      	mov	r3, r0
 8006826:	71bb      	strb	r3, [r7, #6]
 8006828:	460b      	mov	r3, r1
 800682a:	717b      	strb	r3, [r7, #5]
 800682c:	4613      	mov	r3, r2
 800682e:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8006830:	202a      	movs	r0, #42	; 0x2a
 8006832:	f7ff ff6f 	bl	8006714 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8006836:	2300      	movs	r3, #0
 8006838:	733b      	strb	r3, [r7, #12]
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	3302      	adds	r3, #2
 800683e:	b2db      	uxtb	r3, r3
 8006840:	737b      	strb	r3, [r7, #13]
 8006842:	2300      	movs	r3, #0
 8006844:	73bb      	strb	r3, [r7, #14]
 8006846:	797b      	ldrb	r3, [r7, #5]
 8006848:	3302      	adds	r3, #2
 800684a:	b2db      	uxtb	r3, r3
 800684c:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 800684e:	f107 030c 	add.w	r3, r7, #12
 8006852:	2104      	movs	r1, #4
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff ff77 	bl	8006748 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 800685a:	202b      	movs	r0, #43	; 0x2b
 800685c:	f7ff ff5a 	bl	8006714 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8006860:	79bb      	ldrb	r3, [r7, #6]
 8006862:	3301      	adds	r3, #1
 8006864:	b2db      	uxtb	r3, r3
 8006866:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8006868:	793b      	ldrb	r3, [r7, #4]
 800686a:	3301      	adds	r3, #1
 800686c:	b2db      	uxtb	r3, r3
 800686e:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006870:	f107 030c 	add.w	r3, r7, #12
 8006874:	2104      	movs	r1, #4
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff ff66 	bl	8006748 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 800687c:	202c      	movs	r0, #44	; 0x2c
 800687e:	f7ff ff49 	bl	8006714 <ST7735_WriteCommand>
}
 8006882:	bf00      	nop
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	bd90      	pop	{r4, r7, pc}
	...

0800688c <ST7735_Init>:

void ST7735_Init() {
 800688c:	b580      	push	{r7, lr}
 800688e:	af00      	add	r7, sp, #0
	ST7735_Select();
 8006890:	f7ff fefa 	bl	8006688 <ST7735_Select>
	ST7735_Select1();
 8006894:	f7ff ff10 	bl	80066b8 <ST7735_Select1>
	ST7735_Reset();
 8006898:	f7ff ff26 	bl	80066e8 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 800689c:	4807      	ldr	r0, [pc, #28]	; (80068bc <ST7735_Init+0x30>)
 800689e:	f7ff ff6f 	bl	8006780 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 80068a2:	4807      	ldr	r0, [pc, #28]	; (80068c0 <ST7735_Init+0x34>)
 80068a4:	f7ff ff6c 	bl	8006780 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 80068a8:	4806      	ldr	r0, [pc, #24]	; (80068c4 <ST7735_Init+0x38>)
 80068aa:	f7ff ff69 	bl	8006780 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 80068ae:	f7ff fef7 	bl	80066a0 <ST7735_Unselect>
	ST7735_Unselect1();
 80068b2:	f7ff ff0d 	bl	80066d0 <ST7735_Unselect1>
}
 80068b6:	bf00      	nop
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	080124f0 	.word	0x080124f0
 80068c0:	0801252c 	.word	0x0801252c
 80068c4:	0801253c 	.word	0x0801253c

080068c8 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80068c8:	b082      	sub	sp, #8
 80068ca:	b590      	push	{r4, r7, lr}
 80068cc:	b089      	sub	sp, #36	; 0x24
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
 80068d2:	4603      	mov	r3, r0
 80068d4:	80fb      	strh	r3, [r7, #6]
 80068d6:	460b      	mov	r3, r1
 80068d8:	80bb      	strh	r3, [r7, #4]
 80068da:	4613      	mov	r3, r2
 80068dc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80068de:	88fb      	ldrh	r3, [r7, #6]
 80068e0:	b2d8      	uxtb	r0, r3
 80068e2:	88bb      	ldrh	r3, [r7, #4]
 80068e4:	b2d9      	uxtb	r1, r3
 80068e6:	88fb      	ldrh	r3, [r7, #6]
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80068ee:	4413      	add	r3, r2
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	3b01      	subs	r3, #1
 80068f4:	b2dc      	uxtb	r4, r3
 80068f6:	88bb      	ldrh	r3, [r7, #4]
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80068fe:	4413      	add	r3, r2
 8006900:	b2db      	uxtb	r3, r3
 8006902:	3b01      	subs	r3, #1
 8006904:	b2db      	uxtb	r3, r3
 8006906:	4622      	mov	r2, r4
 8006908:	f7ff ff83 	bl	8006812 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 800690c:	2300      	movs	r3, #0
 800690e:	61fb      	str	r3, [r7, #28]
 8006910:	e043      	b.n	800699a <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8006912:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	3b20      	subs	r3, #32
 8006918:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800691c:	fb01 f303 	mul.w	r3, r1, r3
 8006920:	4619      	mov	r1, r3
 8006922:	69fb      	ldr	r3, [r7, #28]
 8006924:	440b      	add	r3, r1
 8006926:	005b      	lsls	r3, r3, #1
 8006928:	4413      	add	r3, r2
 800692a:	881b      	ldrh	r3, [r3, #0]
 800692c:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
 8006932:	e029      	b.n	8006988 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	fa02 f303 	lsl.w	r3, r2, r3
 800693c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00e      	beq.n	8006962 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8006944:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	b29b      	uxth	r3, r3
 800694a:	b2db      	uxtb	r3, r3
 800694c:	743b      	strb	r3, [r7, #16]
 800694e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006950:	b2db      	uxtb	r3, r3
 8006952:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8006954:	f107 0310 	add.w	r3, r7, #16
 8006958:	2102      	movs	r1, #2
 800695a:	4618      	mov	r0, r3
 800695c:	f7ff fef4 	bl	8006748 <ST7735_WriteData>
 8006960:	e00f      	b.n	8006982 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8006962:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006966:	0a1b      	lsrs	r3, r3, #8
 8006968:	b29b      	uxth	r3, r3
 800696a:	b2db      	uxtb	r3, r3
 800696c:	733b      	strb	r3, [r7, #12]
 800696e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006972:	b2db      	uxtb	r3, r3
 8006974:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8006976:	f107 030c 	add.w	r3, r7, #12
 800697a:	2102      	movs	r1, #2
 800697c:	4618      	mov	r0, r3
 800697e:	f7ff fee3 	bl	8006748 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	3301      	adds	r3, #1
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800698c:	461a      	mov	r2, r3
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	4293      	cmp	r3, r2
 8006992:	d3cf      	bcc.n	8006934 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	3301      	adds	r3, #1
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800699e:	461a      	mov	r2, r3
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d3b5      	bcc.n	8006912 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	3724      	adds	r7, #36	; 0x24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80069b2:	b002      	add	sp, #8
 80069b4:	4770      	bx	lr

080069b6 <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80069b6:	b082      	sub	sp, #8
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b086      	sub	sp, #24
 80069bc:	af04      	add	r7, sp, #16
 80069be:	603a      	str	r2, [r7, #0]
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	4603      	mov	r3, r0
 80069c4:	80fb      	strh	r3, [r7, #6]
 80069c6:	460b      	mov	r3, r1
 80069c8:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 80069ca:	f7ff fe5d 	bl	8006688 <ST7735_Select>

	while(*str) {
 80069ce:	e02d      	b.n	8006a2c <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80069d0:	88fb      	ldrh	r3, [r7, #6]
 80069d2:	7d3a      	ldrb	r2, [r7, #20]
 80069d4:	4413      	add	r3, r2
 80069d6:	2b7f      	cmp	r3, #127	; 0x7f
 80069d8:	dd13      	ble.n	8006a02 <ST7735_WriteString+0x4c>
			x = 0;
 80069da:	2300      	movs	r3, #0
 80069dc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80069de:	7d7b      	ldrb	r3, [r7, #21]
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	88bb      	ldrh	r3, [r7, #4]
 80069e4:	4413      	add	r3, r2
 80069e6:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80069e8:	88bb      	ldrh	r3, [r7, #4]
 80069ea:	7d7a      	ldrb	r2, [r7, #21]
 80069ec:	4413      	add	r3, r2
 80069ee:	2b7f      	cmp	r3, #127	; 0x7f
 80069f0:	dc21      	bgt.n	8006a36 <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	2b20      	cmp	r3, #32
 80069f8:	d103      	bne.n	8006a02 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	3301      	adds	r3, #1
 80069fe:	603b      	str	r3, [r7, #0]
				continue;
 8006a00:	e014      	b.n	8006a2c <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	781a      	ldrb	r2, [r3, #0]
 8006a06:	88b9      	ldrh	r1, [r7, #4]
 8006a08:	88f8      	ldrh	r0, [r7, #6]
 8006a0a:	8c3b      	ldrh	r3, [r7, #32]
 8006a0c:	9302      	str	r3, [sp, #8]
 8006a0e:	8bbb      	ldrh	r3, [r7, #28]
 8006a10:	9301      	str	r3, [sp, #4]
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	9300      	str	r3, [sp, #0]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f7ff ff56 	bl	80068c8 <ST7735_WriteChar>
		x += font.width;
 8006a1c:	7d3b      	ldrb	r3, [r7, #20]
 8006a1e:	b29a      	uxth	r2, r3
 8006a20:	88fb      	ldrh	r3, [r7, #6]
 8006a22:	4413      	add	r3, r2
 8006a24:	80fb      	strh	r3, [r7, #6]
		str++;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1cd      	bne.n	80069d0 <ST7735_WriteString+0x1a>
 8006a34:	e000      	b.n	8006a38 <ST7735_WriteString+0x82>
				break;
 8006a36:	bf00      	nop
	}

	ST7735_Unselect();
 8006a38:	f7ff fe32 	bl	80066a0 <ST7735_Unselect>
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a46:	b002      	add	sp, #8
 8006a48:	4770      	bx	lr

08006a4a <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af04      	add	r7, sp, #16
 8006a52:	603a      	str	r2, [r7, #0]
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	4603      	mov	r3, r0
 8006a58:	80fb      	strh	r3, [r7, #6]
 8006a5a:	460b      	mov	r3, r1
 8006a5c:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8006a5e:	f7ff fe2b 	bl	80066b8 <ST7735_Select1>

	while(*str) {
 8006a62:	e02d      	b.n	8006ac0 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	7d3a      	ldrb	r2, [r7, #20]
 8006a68:	4413      	add	r3, r2
 8006a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8006a6c:	dd13      	ble.n	8006a96 <ST7735_WriteString1+0x4c>
			x = 0;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006a72:	7d7b      	ldrb	r3, [r7, #21]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	88bb      	ldrh	r3, [r7, #4]
 8006a78:	4413      	add	r3, r2
 8006a7a:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006a7c:	88bb      	ldrh	r3, [r7, #4]
 8006a7e:	7d7a      	ldrb	r2, [r7, #21]
 8006a80:	4413      	add	r3, r2
 8006a82:	2b7f      	cmp	r3, #127	; 0x7f
 8006a84:	dc21      	bgt.n	8006aca <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	d103      	bne.n	8006a96 <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	3301      	adds	r3, #1
 8006a92:	603b      	str	r3, [r7, #0]
				continue;
 8006a94:	e014      	b.n	8006ac0 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	781a      	ldrb	r2, [r3, #0]
 8006a9a:	88b9      	ldrh	r1, [r7, #4]
 8006a9c:	88f8      	ldrh	r0, [r7, #6]
 8006a9e:	8c3b      	ldrh	r3, [r7, #32]
 8006aa0:	9302      	str	r3, [sp, #8]
 8006aa2:	8bbb      	ldrh	r3, [r7, #28]
 8006aa4:	9301      	str	r3, [sp, #4]
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	f7ff ff0c 	bl	80068c8 <ST7735_WriteChar>
		x += font.width;
 8006ab0:	7d3b      	ldrb	r3, [r7, #20]
 8006ab2:	b29a      	uxth	r2, r3
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	4413      	add	r3, r2
 8006ab8:	80fb      	strh	r3, [r7, #6]
		str++;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1cd      	bne.n	8006a64 <ST7735_WriteString1+0x1a>
 8006ac8:	e000      	b.n	8006acc <ST7735_WriteString1+0x82>
				break;
 8006aca:	bf00      	nop
	}

	ST7735_Unselect1();
 8006acc:	f7ff fe00 	bl	80066d0 <ST7735_Unselect1>
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ada:	b002      	add	sp, #8
 8006adc:	4770      	bx	lr

08006ade <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8006ade:	b082      	sub	sp, #8
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b086      	sub	sp, #24
 8006ae4:	af04      	add	r7, sp, #16
 8006ae6:	603a      	str	r2, [r7, #0]
 8006ae8:	617b      	str	r3, [r7, #20]
 8006aea:	4603      	mov	r3, r0
 8006aec:	80fb      	strh	r3, [r7, #6]
 8006aee:	460b      	mov	r3, r1
 8006af0:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8006af2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d102      	bne.n	8006b00 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8006afa:	f7ff fdc5 	bl	8006688 <ST7735_Select>
 8006afe:	e034      	b.n	8006b6a <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8006b00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d130      	bne.n	8006b6a <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8006b08:	f7ff fdd6 	bl	80066b8 <ST7735_Select1>

	}


	while(*str) {
 8006b0c:	e02d      	b.n	8006b6a <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	7d3a      	ldrb	r2, [r7, #20]
 8006b12:	4413      	add	r3, r2
 8006b14:	2b7f      	cmp	r3, #127	; 0x7f
 8006b16:	dd13      	ble.n	8006b40 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006b1c:	7d7b      	ldrb	r3, [r7, #21]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	88bb      	ldrh	r3, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006b26:	88bb      	ldrh	r3, [r7, #4]
 8006b28:	7d7a      	ldrb	r2, [r7, #21]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b2e:	dc21      	bgt.n	8006b74 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d103      	bne.n	8006b40 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	603b      	str	r3, [r7, #0]
				continue;
 8006b3e:	e014      	b.n	8006b6a <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781a      	ldrb	r2, [r3, #0]
 8006b44:	88b9      	ldrh	r1, [r7, #4]
 8006b46:	88f8      	ldrh	r0, [r7, #6]
 8006b48:	8c3b      	ldrh	r3, [r7, #32]
 8006b4a:	9302      	str	r3, [sp, #8]
 8006b4c:	8bbb      	ldrh	r3, [r7, #28]
 8006b4e:	9301      	str	r3, [sp, #4]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f7ff feb7 	bl	80068c8 <ST7735_WriteChar>
		x += font.width;
 8006b5a:	7d3b      	ldrb	r3, [r7, #20]
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	4413      	add	r3, r2
 8006b62:	80fb      	strh	r3, [r7, #6]
		str++;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	3301      	adds	r3, #1
 8006b68:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1cd      	bne.n	8006b0e <ST7735_WriteStringNSS+0x30>
 8006b72:	e000      	b.n	8006b76 <ST7735_WriteStringNSS+0x98>
				break;
 8006b74:	bf00      	nop
	}
	if(NSS == 0){
 8006b76:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d102      	bne.n	8006b84 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 8006b7e:	f7ff fd8f 	bl	80066a0 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8006b82:	e005      	b.n	8006b90 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8006b84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d101      	bne.n	8006b90 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 8006b8c:	f7ff fda0 	bl	80066d0 <ST7735_Unselect1>
}
 8006b90:	bf00      	nop
 8006b92:	3708      	adds	r7, #8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b9a:	b002      	add	sp, #8
 8006b9c:	4770      	bx	lr
	...

08006ba0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8006ba0:	b590      	push	{r4, r7, lr}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	4623      	mov	r3, r4
 8006bb0:	80fb      	strh	r3, [r7, #6]
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	80bb      	strh	r3, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	807b      	strh	r3, [r7, #2]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006bbe:	88fb      	ldrh	r3, [r7, #6]
 8006bc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc2:	d858      	bhi.n	8006c76 <ST7735_FillRectangle+0xd6>
 8006bc4:	88bb      	ldrh	r3, [r7, #4]
 8006bc6:	2b7f      	cmp	r3, #127	; 0x7f
 8006bc8:	d855      	bhi.n	8006c76 <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006bca:	88fa      	ldrh	r2, [r7, #6]
 8006bcc:	887b      	ldrh	r3, [r7, #2]
 8006bce:	4413      	add	r3, r2
 8006bd0:	2b80      	cmp	r3, #128	; 0x80
 8006bd2:	dd03      	ble.n	8006bdc <ST7735_FillRectangle+0x3c>
 8006bd4:	88fb      	ldrh	r3, [r7, #6]
 8006bd6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006bda:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006bdc:	88ba      	ldrh	r2, [r7, #4]
 8006bde:	883b      	ldrh	r3, [r7, #0]
 8006be0:	4413      	add	r3, r2
 8006be2:	2b80      	cmp	r3, #128	; 0x80
 8006be4:	dd03      	ble.n	8006bee <ST7735_FillRectangle+0x4e>
 8006be6:	88bb      	ldrh	r3, [r7, #4]
 8006be8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006bec:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8006bee:	f7ff fd4b 	bl	8006688 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006bf2:	88fb      	ldrh	r3, [r7, #6]
 8006bf4:	b2d8      	uxtb	r0, r3
 8006bf6:	88bb      	ldrh	r3, [r7, #4]
 8006bf8:	b2d9      	uxtb	r1, r3
 8006bfa:	88fb      	ldrh	r3, [r7, #6]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	887b      	ldrh	r3, [r7, #2]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	4413      	add	r3, r2
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	3b01      	subs	r3, #1
 8006c08:	b2dc      	uxtb	r4, r3
 8006c0a:	88bb      	ldrh	r3, [r7, #4]
 8006c0c:	b2da      	uxtb	r2, r3
 8006c0e:	883b      	ldrh	r3, [r7, #0]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	4413      	add	r3, r2
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	3b01      	subs	r3, #1
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	4622      	mov	r2, r4
 8006c1c:	f7ff fdf9 	bl	8006812 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006c20:	8c3b      	ldrh	r3, [r7, #32]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	733b      	strb	r3, [r7, #12]
 8006c2a:	8c3b      	ldrh	r3, [r7, #32]
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006c30:	2201      	movs	r2, #1
 8006c32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006c36:	4812      	ldr	r0, [pc, #72]	; (8006c80 <ST7735_FillRectangle+0xe0>)
 8006c38:	f003 fe98 	bl	800a96c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006c3c:	883b      	ldrh	r3, [r7, #0]
 8006c3e:	80bb      	strh	r3, [r7, #4]
 8006c40:	e013      	b.n	8006c6a <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8006c42:	887b      	ldrh	r3, [r7, #2]
 8006c44:	80fb      	strh	r3, [r7, #6]
 8006c46:	e00a      	b.n	8006c5e <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006c48:	f107 010c 	add.w	r1, r7, #12
 8006c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8006c50:	2202      	movs	r2, #2
 8006c52:	480c      	ldr	r0, [pc, #48]	; (8006c84 <ST7735_FillRectangle+0xe4>)
 8006c54:	f006 fcc6 	bl	800d5e4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006c58:	88fb      	ldrh	r3, [r7, #6]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	80fb      	strh	r3, [r7, #6]
 8006c5e:	88fb      	ldrh	r3, [r7, #6]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1f1      	bne.n	8006c48 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8006c64:	88bb      	ldrh	r3, [r7, #4]
 8006c66:	3b01      	subs	r3, #1
 8006c68:	80bb      	strh	r3, [r7, #4]
 8006c6a:	88bb      	ldrh	r3, [r7, #4]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d1e8      	bne.n	8006c42 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8006c70:	f7ff fd16 	bl	80066a0 <ST7735_Unselect>
 8006c74:	e000      	b.n	8006c78 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006c76:	bf00      	nop
}
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd90      	pop	{r4, r7, pc}
 8006c7e:	bf00      	nop
 8006c80:	58021800 	.word	0x58021800
 8006c84:	24000260 	.word	0x24000260

08006c88 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8006c88:	b590      	push	{r4, r7, lr}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4604      	mov	r4, r0
 8006c90:	4608      	mov	r0, r1
 8006c92:	4611      	mov	r1, r2
 8006c94:	461a      	mov	r2, r3
 8006c96:	4623      	mov	r3, r4
 8006c98:	80fb      	strh	r3, [r7, #6]
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	80bb      	strh	r3, [r7, #4]
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	807b      	strh	r3, [r7, #2]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006ca6:	88fb      	ldrh	r3, [r7, #6]
 8006ca8:	2b7f      	cmp	r3, #127	; 0x7f
 8006caa:	d858      	bhi.n	8006d5e <ST7735_FillRectangle1+0xd6>
 8006cac:	88bb      	ldrh	r3, [r7, #4]
 8006cae:	2b7f      	cmp	r3, #127	; 0x7f
 8006cb0:	d855      	bhi.n	8006d5e <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006cb2:	88fa      	ldrh	r2, [r7, #6]
 8006cb4:	887b      	ldrh	r3, [r7, #2]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	2b80      	cmp	r3, #128	; 0x80
 8006cba:	dd03      	ble.n	8006cc4 <ST7735_FillRectangle1+0x3c>
 8006cbc:	88fb      	ldrh	r3, [r7, #6]
 8006cbe:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006cc2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006cc4:	88ba      	ldrh	r2, [r7, #4]
 8006cc6:	883b      	ldrh	r3, [r7, #0]
 8006cc8:	4413      	add	r3, r2
 8006cca:	2b80      	cmp	r3, #128	; 0x80
 8006ccc:	dd03      	ble.n	8006cd6 <ST7735_FillRectangle1+0x4e>
 8006cce:	88bb      	ldrh	r3, [r7, #4]
 8006cd0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006cd4:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8006cd6:	f7ff fcef 	bl	80066b8 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	b2d8      	uxtb	r0, r3
 8006cde:	88bb      	ldrh	r3, [r7, #4]
 8006ce0:	b2d9      	uxtb	r1, r3
 8006ce2:	88fb      	ldrh	r3, [r7, #6]
 8006ce4:	b2da      	uxtb	r2, r3
 8006ce6:	887b      	ldrh	r3, [r7, #2]
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	4413      	add	r3, r2
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	b2dc      	uxtb	r4, r3
 8006cf2:	88bb      	ldrh	r3, [r7, #4]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	883b      	ldrh	r3, [r7, #0]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	4622      	mov	r2, r4
 8006d04:	f7ff fd85 	bl	8006812 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006d08:	8c3b      	ldrh	r3, [r7, #32]
 8006d0a:	0a1b      	lsrs	r3, r3, #8
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	733b      	strb	r3, [r7, #12]
 8006d12:	8c3b      	ldrh	r3, [r7, #32]
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d1e:	4812      	ldr	r0, [pc, #72]	; (8006d68 <ST7735_FillRectangle1+0xe0>)
 8006d20:	f003 fe24 	bl	800a96c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006d24:	883b      	ldrh	r3, [r7, #0]
 8006d26:	80bb      	strh	r3, [r7, #4]
 8006d28:	e013      	b.n	8006d52 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8006d2a:	887b      	ldrh	r3, [r7, #2]
 8006d2c:	80fb      	strh	r3, [r7, #6]
 8006d2e:	e00a      	b.n	8006d46 <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006d30:	f107 010c 	add.w	r1, r7, #12
 8006d34:	f04f 33ff 	mov.w	r3, #4294967295
 8006d38:	2202      	movs	r2, #2
 8006d3a:	480c      	ldr	r0, [pc, #48]	; (8006d6c <ST7735_FillRectangle1+0xe4>)
 8006d3c:	f006 fc52 	bl	800d5e4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006d40:	88fb      	ldrh	r3, [r7, #6]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	80fb      	strh	r3, [r7, #6]
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1f1      	bne.n	8006d30 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8006d4c:	88bb      	ldrh	r3, [r7, #4]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	80bb      	strh	r3, [r7, #4]
 8006d52:	88bb      	ldrh	r3, [r7, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e8      	bne.n	8006d2a <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8006d58:	f7ff fcba 	bl	80066d0 <ST7735_Unselect1>
 8006d5c:	e000      	b.n	8006d60 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006d5e:	bf00      	nop
}
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd90      	pop	{r4, r7, pc}
 8006d66:	bf00      	nop
 8006d68:	58021800 	.word	0x58021800
 8006d6c:	24000260 	.word	0x24000260

08006d70 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8006d70:	b590      	push	{r4, r7, lr}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	4604      	mov	r4, r0
 8006d78:	4608      	mov	r0, r1
 8006d7a:	4611      	mov	r1, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4623      	mov	r3, r4
 8006d80:	80fb      	strh	r3, [r7, #6]
 8006d82:	4603      	mov	r3, r0
 8006d84:	80bb      	strh	r3, [r7, #4]
 8006d86:	460b      	mov	r3, r1
 8006d88:	807b      	strh	r3, [r7, #2]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006d8e:	88fb      	ldrh	r3, [r7, #6]
 8006d90:	2b7f      	cmp	r3, #127	; 0x7f
 8006d92:	d86e      	bhi.n	8006e72 <ST7735_FillRectangleNSS+0x102>
 8006d94:	88bb      	ldrh	r3, [r7, #4]
 8006d96:	2b7f      	cmp	r3, #127	; 0x7f
 8006d98:	d86b      	bhi.n	8006e72 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006d9a:	88fa      	ldrh	r2, [r7, #6]
 8006d9c:	887b      	ldrh	r3, [r7, #2]
 8006d9e:	4413      	add	r3, r2
 8006da0:	2b80      	cmp	r3, #128	; 0x80
 8006da2:	dd03      	ble.n	8006dac <ST7735_FillRectangleNSS+0x3c>
 8006da4:	88fb      	ldrh	r3, [r7, #6]
 8006da6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006daa:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006dac:	88ba      	ldrh	r2, [r7, #4]
 8006dae:	883b      	ldrh	r3, [r7, #0]
 8006db0:	4413      	add	r3, r2
 8006db2:	2b80      	cmp	r3, #128	; 0x80
 8006db4:	dd03      	ble.n	8006dbe <ST7735_FillRectangleNSS+0x4e>
 8006db6:	88bb      	ldrh	r3, [r7, #4]
 8006db8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006dbc:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8006dbe:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d102      	bne.n	8006dcc <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8006dc6:	f7ff fc5f 	bl	8006688 <ST7735_Select>
 8006dca:	e005      	b.n	8006dd8 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8006dcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8006dd4:	f7ff fc70 	bl	80066b8 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006dd8:	88fb      	ldrh	r3, [r7, #6]
 8006dda:	b2d8      	uxtb	r0, r3
 8006ddc:	88bb      	ldrh	r3, [r7, #4]
 8006dde:	b2d9      	uxtb	r1, r3
 8006de0:	88fb      	ldrh	r3, [r7, #6]
 8006de2:	b2da      	uxtb	r2, r3
 8006de4:	887b      	ldrh	r3, [r7, #2]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b2dc      	uxtb	r4, r3
 8006df0:	88bb      	ldrh	r3, [r7, #4]
 8006df2:	b2da      	uxtb	r2, r3
 8006df4:	883b      	ldrh	r3, [r7, #0]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	4413      	add	r3, r2
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	b2db      	uxtb	r3, r3
 8006e00:	4622      	mov	r2, r4
 8006e02:	f7ff fd06 	bl	8006812 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006e06:	8c3b      	ldrh	r3, [r7, #32]
 8006e08:	0a1b      	lsrs	r3, r3, #8
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	733b      	strb	r3, [r7, #12]
 8006e10:	8c3b      	ldrh	r3, [r7, #32]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006e16:	2201      	movs	r2, #1
 8006e18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e1c:	4817      	ldr	r0, [pc, #92]	; (8006e7c <ST7735_FillRectangleNSS+0x10c>)
 8006e1e:	f003 fda5 	bl	800a96c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006e22:	883b      	ldrh	r3, [r7, #0]
 8006e24:	80bb      	strh	r3, [r7, #4]
 8006e26:	e013      	b.n	8006e50 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	80fb      	strh	r3, [r7, #6]
 8006e2c:	e00a      	b.n	8006e44 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006e2e:	f107 010c 	add.w	r1, r7, #12
 8006e32:	f04f 33ff 	mov.w	r3, #4294967295
 8006e36:	2202      	movs	r2, #2
 8006e38:	4811      	ldr	r0, [pc, #68]	; (8006e80 <ST7735_FillRectangleNSS+0x110>)
 8006e3a:	f006 fbd3 	bl	800d5e4 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	3b01      	subs	r3, #1
 8006e42:	80fb      	strh	r3, [r7, #6]
 8006e44:	88fb      	ldrh	r3, [r7, #6]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1f1      	bne.n	8006e2e <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8006e4a:	88bb      	ldrh	r3, [r7, #4]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	80bb      	strh	r3, [r7, #4]
 8006e50:	88bb      	ldrh	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d1e8      	bne.n	8006e28 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8006e56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d102      	bne.n	8006e64 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8006e5e:	f7ff fc1f 	bl	80066a0 <ST7735_Unselect>
 8006e62:	e007      	b.n	8006e74 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8006e64:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d103      	bne.n	8006e74 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8006e6c:	f7ff fc30 	bl	80066d0 <ST7735_Unselect1>
 8006e70:	e000      	b.n	8006e74 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006e72:	bf00      	nop
	}
}
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd90      	pop	{r4, r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	58021800 	.word	0x58021800
 8006e80:	24000260 	.word	0x24000260

08006e84 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006e8e:	88fb      	ldrh	r3, [r7, #6]
 8006e90:	9300      	str	r3, [sp, #0]
 8006e92:	2380      	movs	r3, #128	; 0x80
 8006e94:	2280      	movs	r2, #128	; 0x80
 8006e96:	2100      	movs	r1, #0
 8006e98:	2000      	movs	r0, #0
 8006e9a:	f7ff fe81 	bl	8006ba0 <ST7735_FillRectangle>
}
 8006e9e:	bf00      	nop
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}

08006ea6 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8006ea6:	b580      	push	{r7, lr}
 8006ea8:	b084      	sub	sp, #16
 8006eaa:	af02      	add	r7, sp, #8
 8006eac:	4603      	mov	r3, r0
 8006eae:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006eb0:	88fb      	ldrh	r3, [r7, #6]
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2380      	movs	r3, #128	; 0x80
 8006eb6:	2280      	movs	r2, #128	; 0x80
 8006eb8:	2100      	movs	r1, #0
 8006eba:	2000      	movs	r0, #0
 8006ebc:	f7ff fee4 	bl	8006c88 <ST7735_FillRectangle1>
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <HAL_MspInit+0x30>)
 8006ed0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ed4:	4a08      	ldr	r2, [pc, #32]	; (8006ef8 <HAL_MspInit+0x30>)
 8006ed6:	f043 0302 	orr.w	r3, r3, #2
 8006eda:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006ede:	4b06      	ldr	r3, [pc, #24]	; (8006ef8 <HAL_MspInit+0x30>)
 8006ee0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	607b      	str	r3, [r7, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006eec:	bf00      	nop
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	58024400 	.word	0x58024400

08006efc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08e      	sub	sp, #56	; 0x38
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
 8006f0c:	605a      	str	r2, [r3, #4]
 8006f0e:	609a      	str	r2, [r3, #8]
 8006f10:	60da      	str	r2, [r3, #12]
 8006f12:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a59      	ldr	r2, [pc, #356]	; (8007080 <HAL_ETH_MspInit+0x184>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	f040 80ab 	bne.w	8007076 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8006f20:	4b58      	ldr	r3, [pc, #352]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f26:	4a57      	ldr	r2, [pc, #348]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f2c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f30:	4b54      	ldr	r3, [pc, #336]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f3a:	623b      	str	r3, [r7, #32]
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8006f3e:	4b51      	ldr	r3, [pc, #324]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f44:	4a4f      	ldr	r2, [pc, #316]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f4a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f4e:	4b4d      	ldr	r3, [pc, #308]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f58:	61fb      	str	r3, [r7, #28]
 8006f5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8006f5c:	4b49      	ldr	r3, [pc, #292]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f5e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f62:	4a48      	ldr	r2, [pc, #288]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f68:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f6c:	4b45      	ldr	r3, [pc, #276]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f6e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f76:	61bb      	str	r3, [r7, #24]
 8006f78:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f7a:	4b42      	ldr	r3, [pc, #264]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f80:	4a40      	ldr	r2, [pc, #256]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f82:	f043 0304 	orr.w	r3, r3, #4
 8006f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006f8a:	4b3e      	ldr	r3, [pc, #248]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	617b      	str	r3, [r7, #20]
 8006f96:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f98:	4b3a      	ldr	r3, [pc, #232]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f9e:	4a39      	ldr	r2, [pc, #228]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006fa0:	f043 0301 	orr.w	r3, r3, #1
 8006fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fa8:	4b36      	ldr	r3, [pc, #216]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	613b      	str	r3, [r7, #16]
 8006fb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fb6:	4b33      	ldr	r3, [pc, #204]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fbc:	4a31      	ldr	r2, [pc, #196]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006fbe:	f043 0302 	orr.w	r3, r3, #2
 8006fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fcc:	f003 0302 	and.w	r3, r3, #2
 8006fd0:	60fb      	str	r3, [r7, #12]
 8006fd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006fd4:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fda:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006fdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006fe4:	4b27      	ldr	r3, [pc, #156]	; (8007084 <HAL_ETH_MspInit+0x188>)
 8006fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fee:	60bb      	str	r3, [r7, #8]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8006ff2:	2332      	movs	r3, #50	; 0x32
 8006ff4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff6:	2302      	movs	r3, #2
 8006ff8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ffe:	2300      	movs	r3, #0
 8007000:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007002:	230b      	movs	r3, #11
 8007004:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800700a:	4619      	mov	r1, r3
 800700c:	481e      	ldr	r0, [pc, #120]	; (8007088 <HAL_ETH_MspInit+0x18c>)
 800700e:	f003 fae5 	bl	800a5dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8007012:	2386      	movs	r3, #134	; 0x86
 8007014:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007016:	2302      	movs	r3, #2
 8007018:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701a:	2300      	movs	r3, #0
 800701c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800701e:	2300      	movs	r3, #0
 8007020:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007022:	230b      	movs	r3, #11
 8007024:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007026:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800702a:	4619      	mov	r1, r3
 800702c:	4817      	ldr	r0, [pc, #92]	; (800708c <HAL_ETH_MspInit+0x190>)
 800702e:	f003 fad5 	bl	800a5dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8007032:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007038:	2302      	movs	r3, #2
 800703a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800703c:	2300      	movs	r3, #0
 800703e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007040:	2300      	movs	r3, #0
 8007042:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007044:	230b      	movs	r3, #11
 8007046:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800704c:	4619      	mov	r1, r3
 800704e:	4810      	ldr	r0, [pc, #64]	; (8007090 <HAL_ETH_MspInit+0x194>)
 8007050:	f003 fac4 	bl	800a5dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8007054:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705a:	2302      	movs	r3, #2
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800705e:	2300      	movs	r3, #0
 8007060:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007062:	2300      	movs	r3, #0
 8007064:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007066:	230b      	movs	r3, #11
 8007068:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800706a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800706e:	4619      	mov	r1, r3
 8007070:	4808      	ldr	r0, [pc, #32]	; (8007094 <HAL_ETH_MspInit+0x198>)
 8007072:	f003 fab3 	bl	800a5dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8007076:	bf00      	nop
 8007078:	3738      	adds	r7, #56	; 0x38
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40028000 	.word	0x40028000
 8007084:	58024400 	.word	0x58024400
 8007088:	58020800 	.word	0x58020800
 800708c:	58020000 	.word	0x58020000
 8007090:	58020400 	.word	0x58020400
 8007094:	58021800 	.word	0x58021800

08007098 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b08a      	sub	sp, #40	; 0x28
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070a0:	f107 0314 	add.w	r3, r7, #20
 80070a4:	2200      	movs	r2, #0
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	605a      	str	r2, [r3, #4]
 80070aa:	609a      	str	r2, [r3, #8]
 80070ac:	60da      	str	r2, [r3, #12]
 80070ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a2a      	ldr	r2, [pc, #168]	; (8007160 <HAL_SPI_MspInit+0xc8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d14d      	bne.n	8007156 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80070ba:	4b2a      	ldr	r3, [pc, #168]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 80070bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070c0:	4a28      	ldr	r2, [pc, #160]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 80070c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80070ca:	4b26      	ldr	r3, [pc, #152]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 80070cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070d4:	613b      	str	r3, [r7, #16]
 80070d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070d8:	4b22      	ldr	r3, [pc, #136]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 80070da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070de:	4a21      	ldr	r2, [pc, #132]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 80070e0:	f043 0302 	orr.w	r3, r3, #2
 80070e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070e8:	4b1e      	ldr	r3, [pc, #120]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 80070ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070ee:	f003 0302 	and.w	r3, r3, #2
 80070f2:	60fb      	str	r3, [r7, #12]
 80070f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070f6:	4b1b      	ldr	r3, [pc, #108]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 80070f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070fc:	4a19      	ldr	r2, [pc, #100]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 80070fe:	f043 0304 	orr.w	r3, r3, #4
 8007102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007106:	4b17      	ldr	r3, [pc, #92]	; (8007164 <HAL_SPI_MspInit+0xcc>)
 8007108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	60bb      	str	r3, [r7, #8]
 8007112:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007114:	2304      	movs	r3, #4
 8007116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007118:	2302      	movs	r3, #2
 800711a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800711c:	2302      	movs	r3, #2
 800711e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007120:	2300      	movs	r3, #0
 8007122:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007124:	2307      	movs	r3, #7
 8007126:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007128:	f107 0314 	add.w	r3, r7, #20
 800712c:	4619      	mov	r1, r3
 800712e:	480e      	ldr	r0, [pc, #56]	; (8007168 <HAL_SPI_MspInit+0xd0>)
 8007130:	f003 fa54 	bl	800a5dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800713a:	2302      	movs	r3, #2
 800713c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800713e:	2302      	movs	r3, #2
 8007140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007142:	2300      	movs	r3, #0
 8007144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007146:	2306      	movs	r3, #6
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800714a:	f107 0314 	add.w	r3, r7, #20
 800714e:	4619      	mov	r1, r3
 8007150:	4806      	ldr	r0, [pc, #24]	; (800716c <HAL_SPI_MspInit+0xd4>)
 8007152:	f003 fa43 	bl	800a5dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007156:	bf00      	nop
 8007158:	3728      	adds	r7, #40	; 0x28
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	40003c00 	.word	0x40003c00
 8007164:	58024400 	.word	0x58024400
 8007168:	58020400 	.word	0x58020400
 800716c:	58020800 	.word	0x58020800

08007170 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a0e      	ldr	r2, [pc, #56]	; (80071b8 <HAL_TIM_Base_MspInit+0x48>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d116      	bne.n	80071b0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007182:	4b0e      	ldr	r3, [pc, #56]	; (80071bc <HAL_TIM_Base_MspInit+0x4c>)
 8007184:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007188:	4a0c      	ldr	r2, [pc, #48]	; (80071bc <HAL_TIM_Base_MspInit+0x4c>)
 800718a:	f043 0320 	orr.w	r3, r3, #32
 800718e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007192:	4b0a      	ldr	r3, [pc, #40]	; (80071bc <HAL_TIM_Base_MspInit+0x4c>)
 8007194:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80071a0:	2200      	movs	r2, #0
 80071a2:	2100      	movs	r1, #0
 80071a4:	2037      	movs	r0, #55	; 0x37
 80071a6:	f000 fb9a 	bl	80078de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80071aa:	2037      	movs	r0, #55	; 0x37
 80071ac:	f000 fbb1 	bl	8007912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80071b0:	bf00      	nop
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40001400 	.word	0x40001400
 80071bc:	58024400 	.word	0x58024400

080071c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b0b8      	sub	sp, #224	; 0xe0
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80071cc:	2200      	movs	r2, #0
 80071ce:	601a      	str	r2, [r3, #0]
 80071d0:	605a      	str	r2, [r3, #4]
 80071d2:	609a      	str	r2, [r3, #8]
 80071d4:	60da      	str	r2, [r3, #12]
 80071d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80071d8:	f107 0310 	add.w	r3, r7, #16
 80071dc:	22bc      	movs	r2, #188	; 0xbc
 80071de:	2100      	movs	r1, #0
 80071e0:	4618      	mov	r0, r3
 80071e2:	f009 f88d 	bl	8010300 <memset>
  if(huart->Instance==USART3)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a57      	ldr	r2, [pc, #348]	; (8007348 <HAL_UART_MspInit+0x188>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	f040 80a6 	bne.w	800733e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80071f2:	2302      	movs	r3, #2
 80071f4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80071f6:	2300      	movs	r3, #0
 80071f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80071fc:	f107 0310 	add.w	r3, r7, #16
 8007200:	4618      	mov	r0, r3
 8007202:	f004 fd81 	bl	800bd08 <HAL_RCCEx_PeriphCLKConfig>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800720c:	f7ff fa36 	bl	800667c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007210:	4b4e      	ldr	r3, [pc, #312]	; (800734c <HAL_UART_MspInit+0x18c>)
 8007212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007216:	4a4d      	ldr	r2, [pc, #308]	; (800734c <HAL_UART_MspInit+0x18c>)
 8007218:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800721c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007220:	4b4a      	ldr	r3, [pc, #296]	; (800734c <HAL_UART_MspInit+0x18c>)
 8007222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007226:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800722e:	4b47      	ldr	r3, [pc, #284]	; (800734c <HAL_UART_MspInit+0x18c>)
 8007230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007234:	4a45      	ldr	r2, [pc, #276]	; (800734c <HAL_UART_MspInit+0x18c>)
 8007236:	f043 0308 	orr.w	r3, r3, #8
 800723a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800723e:	4b43      	ldr	r3, [pc, #268]	; (800734c <HAL_UART_MspInit+0x18c>)
 8007240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007244:	f003 0308 	and.w	r3, r3, #8
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800724c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007250:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007254:	2302      	movs	r3, #2
 8007256:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725a:	2300      	movs	r3, #0
 800725c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007260:	2300      	movs	r3, #0
 8007262:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8007266:	2307      	movs	r3, #7
 8007268:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800726c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007270:	4619      	mov	r1, r3
 8007272:	4837      	ldr	r0, [pc, #220]	; (8007350 <HAL_UART_MspInit+0x190>)
 8007274:	f003 f9b2 	bl	800a5dc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007278:	4b36      	ldr	r3, [pc, #216]	; (8007354 <HAL_UART_MspInit+0x194>)
 800727a:	4a37      	ldr	r2, [pc, #220]	; (8007358 <HAL_UART_MspInit+0x198>)
 800727c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800727e:	4b35      	ldr	r3, [pc, #212]	; (8007354 <HAL_UART_MspInit+0x194>)
 8007280:	222d      	movs	r2, #45	; 0x2d
 8007282:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007284:	4b33      	ldr	r3, [pc, #204]	; (8007354 <HAL_UART_MspInit+0x194>)
 8007286:	2200      	movs	r2, #0
 8007288:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800728a:	4b32      	ldr	r3, [pc, #200]	; (8007354 <HAL_UART_MspInit+0x194>)
 800728c:	2200      	movs	r2, #0
 800728e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007290:	4b30      	ldr	r3, [pc, #192]	; (8007354 <HAL_UART_MspInit+0x194>)
 8007292:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007296:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007298:	4b2e      	ldr	r3, [pc, #184]	; (8007354 <HAL_UART_MspInit+0x194>)
 800729a:	2200      	movs	r2, #0
 800729c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800729e:	4b2d      	ldr	r3, [pc, #180]	; (8007354 <HAL_UART_MspInit+0x194>)
 80072a0:	2200      	movs	r2, #0
 80072a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80072a4:	4b2b      	ldr	r3, [pc, #172]	; (8007354 <HAL_UART_MspInit+0x194>)
 80072a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80072aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80072ac:	4b29      	ldr	r3, [pc, #164]	; (8007354 <HAL_UART_MspInit+0x194>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80072b2:	4b28      	ldr	r3, [pc, #160]	; (8007354 <HAL_UART_MspInit+0x194>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80072b8:	4826      	ldr	r0, [pc, #152]	; (8007354 <HAL_UART_MspInit+0x194>)
 80072ba:	f000 fb45 	bl	8007948 <HAL_DMA_Init>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d001      	beq.n	80072c8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80072c4:	f7ff f9da 	bl	800667c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a22      	ldr	r2, [pc, #136]	; (8007354 <HAL_UART_MspInit+0x194>)
 80072cc:	67da      	str	r2, [r3, #124]	; 0x7c
 80072ce:	4a21      	ldr	r2, [pc, #132]	; (8007354 <HAL_UART_MspInit+0x194>)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80072d4:	4b21      	ldr	r3, [pc, #132]	; (800735c <HAL_UART_MspInit+0x19c>)
 80072d6:	4a22      	ldr	r2, [pc, #136]	; (8007360 <HAL_UART_MspInit+0x1a0>)
 80072d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80072da:	4b20      	ldr	r3, [pc, #128]	; (800735c <HAL_UART_MspInit+0x19c>)
 80072dc:	222e      	movs	r2, #46	; 0x2e
 80072de:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072e0:	4b1e      	ldr	r3, [pc, #120]	; (800735c <HAL_UART_MspInit+0x19c>)
 80072e2:	2240      	movs	r2, #64	; 0x40
 80072e4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80072e6:	4b1d      	ldr	r3, [pc, #116]	; (800735c <HAL_UART_MspInit+0x19c>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80072ec:	4b1b      	ldr	r3, [pc, #108]	; (800735c <HAL_UART_MspInit+0x19c>)
 80072ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80072f2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80072f4:	4b19      	ldr	r3, [pc, #100]	; (800735c <HAL_UART_MspInit+0x19c>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80072fa:	4b18      	ldr	r3, [pc, #96]	; (800735c <HAL_UART_MspInit+0x19c>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8007300:	4b16      	ldr	r3, [pc, #88]	; (800735c <HAL_UART_MspInit+0x19c>)
 8007302:	2200      	movs	r2, #0
 8007304:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007306:	4b15      	ldr	r3, [pc, #84]	; (800735c <HAL_UART_MspInit+0x19c>)
 8007308:	2200      	movs	r2, #0
 800730a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <HAL_UART_MspInit+0x19c>)
 800730e:	2200      	movs	r2, #0
 8007310:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8007312:	4812      	ldr	r0, [pc, #72]	; (800735c <HAL_UART_MspInit+0x19c>)
 8007314:	f000 fb18 	bl	8007948 <HAL_DMA_Init>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d001      	beq.n	8007322 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800731e:	f7ff f9ad 	bl	800667c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a0d      	ldr	r2, [pc, #52]	; (800735c <HAL_UART_MspInit+0x19c>)
 8007326:	679a      	str	r2, [r3, #120]	; 0x78
 8007328:	4a0c      	ldr	r2, [pc, #48]	; (800735c <HAL_UART_MspInit+0x19c>)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800732e:	2200      	movs	r2, #0
 8007330:	2100      	movs	r1, #0
 8007332:	2027      	movs	r0, #39	; 0x27
 8007334:	f000 fad3 	bl	80078de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007338:	2027      	movs	r0, #39	; 0x27
 800733a:	f000 faea 	bl	8007912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800733e:	bf00      	nop
 8007340:	37e0      	adds	r7, #224	; 0xe0
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}
 8007346:	bf00      	nop
 8007348:	40004800 	.word	0x40004800
 800734c:	58024400 	.word	0x58024400
 8007350:	58020c00 	.word	0x58020c00
 8007354:	240003c4 	.word	0x240003c4
 8007358:	40020028 	.word	0x40020028
 800735c:	2400043c 	.word	0x2400043c
 8007360:	40020070 	.word	0x40020070

08007364 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	; 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800736c:	f107 0314 	add.w	r3, r7, #20
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	605a      	str	r2, [r3, #4]
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	60da      	str	r2, [r3, #12]
 800737a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a22      	ldr	r2, [pc, #136]	; (800740c <HAL_PCD_MspInit+0xa8>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d13d      	bne.n	8007402 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8007386:	f003 fcf5 	bl	800ad74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800738a:	4b21      	ldr	r3, [pc, #132]	; (8007410 <HAL_PCD_MspInit+0xac>)
 800738c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007390:	4a1f      	ldr	r2, [pc, #124]	; (8007410 <HAL_PCD_MspInit+0xac>)
 8007392:	f043 0301 	orr.w	r3, r3, #1
 8007396:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800739a:	4b1d      	ldr	r3, [pc, #116]	; (8007410 <HAL_PCD_MspInit+0xac>)
 800739c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073a0:	f003 0301 	and.w	r3, r3, #1
 80073a4:	613b      	str	r3, [r7, #16]
 80073a6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80073a8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80073ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ae:	2302      	movs	r3, #2
 80073b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073b6:	2300      	movs	r3, #0
 80073b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80073ba:	230a      	movs	r3, #10
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073be:	f107 0314 	add.w	r3, r7, #20
 80073c2:	4619      	mov	r1, r3
 80073c4:	4813      	ldr	r0, [pc, #76]	; (8007414 <HAL_PCD_MspInit+0xb0>)
 80073c6:	f003 f909 	bl	800a5dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80073ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073d8:	f107 0314 	add.w	r3, r7, #20
 80073dc:	4619      	mov	r1, r3
 80073de:	480d      	ldr	r0, [pc, #52]	; (8007414 <HAL_PCD_MspInit+0xb0>)
 80073e0:	f003 f8fc 	bl	800a5dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073e4:	4b0a      	ldr	r3, [pc, #40]	; (8007410 <HAL_PCD_MspInit+0xac>)
 80073e6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073ea:	4a09      	ldr	r2, [pc, #36]	; (8007410 <HAL_PCD_MspInit+0xac>)
 80073ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073f0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <HAL_PCD_MspInit+0xac>)
 80073f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80073fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8007402:	bf00      	nop
 8007404:	3728      	adds	r7, #40	; 0x28
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	40080000 	.word	0x40080000
 8007410:	58024400 	.word	0x58024400
 8007414:	58020000 	.word	0x58020000

08007418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007418:	b480      	push	{r7}
 800741a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800741c:	e7fe      	b.n	800741c <NMI_Handler+0x4>

0800741e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800741e:	b480      	push	{r7}
 8007420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007422:	e7fe      	b.n	8007422 <HardFault_Handler+0x4>

08007424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007424:	b480      	push	{r7}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007428:	e7fe      	b.n	8007428 <MemManage_Handler+0x4>

0800742a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800742a:	b480      	push	{r7}
 800742c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800742e:	e7fe      	b.n	800742e <BusFault_Handler+0x4>

08007430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007434:	e7fe      	b.n	8007434 <UsageFault_Handler+0x4>

08007436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007436:	b480      	push	{r7}
 8007438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800743a:	bf00      	nop
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007444:	b480      	push	{r7}
 8007446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007448:	bf00      	nop
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007452:	b480      	push	{r7}
 8007454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007456:	bf00      	nop
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007464:	f000 f8fc 	bl	8007660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007468:	bf00      	nop
 800746a:	bd80      	pop	{r7, pc}

0800746c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007470:	4802      	ldr	r0, [pc, #8]	; (800747c <DMA1_Stream1_IRQHandler+0x10>)
 8007472:	f001 fb29 	bl	8008ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8007476:	bf00      	nop
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	240003c4 	.word	0x240003c4

08007480 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007480:	b580      	push	{r7, lr}
 8007482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8007484:	4802      	ldr	r0, [pc, #8]	; (8007490 <DMA1_Stream4_IRQHandler+0x10>)
 8007486:	f001 fb1f 	bl	8008ac8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800748a:	bf00      	nop
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	2400043c 	.word	0x2400043c

08007494 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007498:	4802      	ldr	r0, [pc, #8]	; (80074a4 <USART3_IRQHandler+0x10>)
 800749a:	f006 ff59 	bl	800e350 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800749e:	bf00      	nop
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	24000334 	.word	0x24000334

080074a8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80074ac:	4802      	ldr	r0, [pc, #8]	; (80074b8 <TIM7_IRQHandler+0x10>)
 80074ae:	f006 fc72 	bl	800dd96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80074b2:	bf00      	nop
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	240002e8 	.word	0x240002e8

080074bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80074c4:	4a14      	ldr	r2, [pc, #80]	; (8007518 <_sbrk+0x5c>)
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <_sbrk+0x60>)
 80074c8:	1ad3      	subs	r3, r2, r3
 80074ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80074d0:	4b13      	ldr	r3, [pc, #76]	; (8007520 <_sbrk+0x64>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80074d8:	4b11      	ldr	r3, [pc, #68]	; (8007520 <_sbrk+0x64>)
 80074da:	4a12      	ldr	r2, [pc, #72]	; (8007524 <_sbrk+0x68>)
 80074dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80074de:	4b10      	ldr	r3, [pc, #64]	; (8007520 <_sbrk+0x64>)
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d207      	bcs.n	80074fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80074ec:	f008 fede 	bl	80102ac <__errno>
 80074f0:	4603      	mov	r3, r0
 80074f2:	220c      	movs	r2, #12
 80074f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80074f6:	f04f 33ff 	mov.w	r3, #4294967295
 80074fa:	e009      	b.n	8007510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80074fc:	4b08      	ldr	r3, [pc, #32]	; (8007520 <_sbrk+0x64>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007502:	4b07      	ldr	r3, [pc, #28]	; (8007520 <_sbrk+0x64>)
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4413      	add	r3, r2
 800750a:	4a05      	ldr	r2, [pc, #20]	; (8007520 <_sbrk+0x64>)
 800750c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800750e:	68fb      	ldr	r3, [r7, #12]
}
 8007510:	4618      	mov	r0, r3
 8007512:	3718      	adds	r7, #24
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	24080000 	.word	0x24080000
 800751c:	00000400 	.word	0x00000400
 8007520:	24000eb0 	.word	0x24000eb0
 8007524:	24000ec8 	.word	0x24000ec8

08007528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007560 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800752c:	f7fe fc0e 	bl	8005d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007530:	480c      	ldr	r0, [pc, #48]	; (8007564 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007532:	490d      	ldr	r1, [pc, #52]	; (8007568 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007534:	4a0d      	ldr	r2, [pc, #52]	; (800756c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007538:	e002      	b.n	8007540 <LoopCopyDataInit>

0800753a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800753a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800753c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800753e:	3304      	adds	r3, #4

08007540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007544:	d3f9      	bcc.n	800753a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007546:	4a0a      	ldr	r2, [pc, #40]	; (8007570 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007548:	4c0a      	ldr	r4, [pc, #40]	; (8007574 <LoopFillZerobss+0x22>)
  movs r3, #0
 800754a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800754c:	e001      	b.n	8007552 <LoopFillZerobss>

0800754e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800754e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007550:	3204      	adds	r2, #4

08007552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007554:	d3fb      	bcc.n	800754e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007556:	f008 feaf 	bl	80102b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800755a:	f7fe fc8d 	bl	8005e78 <main>
  bx  lr
 800755e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007560:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8007564:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007568:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 800756c:	080125dc 	.word	0x080125dc
  ldr r2, =_sbss
 8007570:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8007574:	24000ec8 	.word	0x24000ec8

08007578 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007578:	e7fe      	b.n	8007578 <ADC3_IRQHandler>
	...

0800757c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007582:	2003      	movs	r0, #3
 8007584:	f000 f9a0 	bl	80078c8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007588:	f004 f9e8 	bl	800b95c <HAL_RCC_GetSysClockFreq>
 800758c:	4602      	mov	r2, r0
 800758e:	4b15      	ldr	r3, [pc, #84]	; (80075e4 <HAL_Init+0x68>)
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	0a1b      	lsrs	r3, r3, #8
 8007594:	f003 030f 	and.w	r3, r3, #15
 8007598:	4913      	ldr	r1, [pc, #76]	; (80075e8 <HAL_Init+0x6c>)
 800759a:	5ccb      	ldrb	r3, [r1, r3]
 800759c:	f003 031f 	and.w	r3, r3, #31
 80075a0:	fa22 f303 	lsr.w	r3, r2, r3
 80075a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80075a6:	4b0f      	ldr	r3, [pc, #60]	; (80075e4 <HAL_Init+0x68>)
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	4a0e      	ldr	r2, [pc, #56]	; (80075e8 <HAL_Init+0x6c>)
 80075b0:	5cd3      	ldrb	r3, [r2, r3]
 80075b2:	f003 031f 	and.w	r3, r3, #31
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
 80075bc:	4a0b      	ldr	r2, [pc, #44]	; (80075ec <HAL_Init+0x70>)
 80075be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80075c0:	4a0b      	ldr	r2, [pc, #44]	; (80075f0 <HAL_Init+0x74>)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80075c6:	2000      	movs	r0, #0
 80075c8:	f000 f814 	bl	80075f4 <HAL_InitTick>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d001      	beq.n	80075d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e002      	b.n	80075dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80075d6:	f7ff fc77 	bl	8006ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	58024400 	.word	0x58024400
 80075e8:	08011018 	.word	0x08011018
 80075ec:	24000008 	.word	0x24000008
 80075f0:	24000004 	.word	0x24000004

080075f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b082      	sub	sp, #8
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80075fc:	4b15      	ldr	r3, [pc, #84]	; (8007654 <HAL_InitTick+0x60>)
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e021      	b.n	800764c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007608:	4b13      	ldr	r3, [pc, #76]	; (8007658 <HAL_InitTick+0x64>)
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	4b11      	ldr	r3, [pc, #68]	; (8007654 <HAL_InitTick+0x60>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	4619      	mov	r1, r3
 8007612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007616:	fbb3 f3f1 	udiv	r3, r3, r1
 800761a:	fbb2 f3f3 	udiv	r3, r2, r3
 800761e:	4618      	mov	r0, r3
 8007620:	f000 f985 	bl	800792e <HAL_SYSTICK_Config>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e00e      	b.n	800764c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b0f      	cmp	r3, #15
 8007632:	d80a      	bhi.n	800764a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007634:	2200      	movs	r2, #0
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	f000 f94f 	bl	80078de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007640:	4a06      	ldr	r2, [pc, #24]	; (800765c <HAL_InitTick+0x68>)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	e000      	b.n	800764c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
}
 800764c:	4618      	mov	r0, r3
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	24000020 	.word	0x24000020
 8007658:	24000004 	.word	0x24000004
 800765c:	2400001c 	.word	0x2400001c

08007660 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007664:	4b06      	ldr	r3, [pc, #24]	; (8007680 <HAL_IncTick+0x20>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	461a      	mov	r2, r3
 800766a:	4b06      	ldr	r3, [pc, #24]	; (8007684 <HAL_IncTick+0x24>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4413      	add	r3, r2
 8007670:	4a04      	ldr	r2, [pc, #16]	; (8007684 <HAL_IncTick+0x24>)
 8007672:	6013      	str	r3, [r2, #0]
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	24000020 	.word	0x24000020
 8007684:	24000eb4 	.word	0x24000eb4

08007688 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  return uwTick;
 800768c:	4b03      	ldr	r3, [pc, #12]	; (800769c <HAL_GetTick+0x14>)
 800768e:	681b      	ldr	r3, [r3, #0]
}
 8007690:	4618      	mov	r0, r3
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	24000eb4 	.word	0x24000eb4

080076a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80076a8:	f7ff ffee 	bl	8007688 <HAL_GetTick>
 80076ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076b8:	d005      	beq.n	80076c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80076ba:	4b0a      	ldr	r3, [pc, #40]	; (80076e4 <HAL_Delay+0x44>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	461a      	mov	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4413      	add	r3, r2
 80076c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80076c6:	bf00      	nop
 80076c8:	f7ff ffde 	bl	8007688 <HAL_GetTick>
 80076cc:	4602      	mov	r2, r0
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	1ad3      	subs	r3, r2, r3
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d8f7      	bhi.n	80076c8 <HAL_Delay+0x28>
  {
  }
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	24000020 	.word	0x24000020

080076e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80076e8:	b480      	push	{r7}
 80076ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80076ec:	4b03      	ldr	r3, [pc, #12]	; (80076fc <HAL_GetREVID+0x14>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	0c1b      	lsrs	r3, r3, #16
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	5c001000 	.word	0x5c001000

08007700 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007710:	4904      	ldr	r1, [pc, #16]	; (8007724 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4313      	orrs	r3, r2
 8007716:	604b      	str	r3, [r1, #4]
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr
 8007724:	58000400 	.word	0x58000400

08007728 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f003 0307 	and.w	r3, r3, #7
 8007736:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007738:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <__NVIC_SetPriorityGrouping+0x40>)
 800773a:	68db      	ldr	r3, [r3, #12]
 800773c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007744:	4013      	ands	r3, r2
 8007746:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007750:	4b06      	ldr	r3, [pc, #24]	; (800776c <__NVIC_SetPriorityGrouping+0x44>)
 8007752:	4313      	orrs	r3, r2
 8007754:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007756:	4a04      	ldr	r2, [pc, #16]	; (8007768 <__NVIC_SetPriorityGrouping+0x40>)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	60d3      	str	r3, [r2, #12]
}
 800775c:	bf00      	nop
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	e000ed00 	.word	0xe000ed00
 800776c:	05fa0000 	.word	0x05fa0000

08007770 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007770:	b480      	push	{r7}
 8007772:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007774:	4b04      	ldr	r3, [pc, #16]	; (8007788 <__NVIC_GetPriorityGrouping+0x18>)
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	0a1b      	lsrs	r3, r3, #8
 800777a:	f003 0307 	and.w	r3, r3, #7
}
 800777e:	4618      	mov	r0, r3
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	e000ed00 	.word	0xe000ed00

0800778c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007796:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800779a:	2b00      	cmp	r3, #0
 800779c:	db0b      	blt.n	80077b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800779e:	88fb      	ldrh	r3, [r7, #6]
 80077a0:	f003 021f 	and.w	r2, r3, #31
 80077a4:	4907      	ldr	r1, [pc, #28]	; (80077c4 <__NVIC_EnableIRQ+0x38>)
 80077a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077aa:	095b      	lsrs	r3, r3, #5
 80077ac:	2001      	movs	r0, #1
 80077ae:	fa00 f202 	lsl.w	r2, r0, r2
 80077b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80077b6:	bf00      	nop
 80077b8:	370c      	adds	r7, #12
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	e000e100 	.word	0xe000e100

080077c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80077d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	db0a      	blt.n	80077f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	490c      	ldr	r1, [pc, #48]	; (8007814 <__NVIC_SetPriority+0x4c>)
 80077e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80077e6:	0112      	lsls	r2, r2, #4
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	440b      	add	r3, r1
 80077ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80077f0:	e00a      	b.n	8007808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	4908      	ldr	r1, [pc, #32]	; (8007818 <__NVIC_SetPriority+0x50>)
 80077f8:	88fb      	ldrh	r3, [r7, #6]
 80077fa:	f003 030f 	and.w	r3, r3, #15
 80077fe:	3b04      	subs	r3, #4
 8007800:	0112      	lsls	r2, r2, #4
 8007802:	b2d2      	uxtb	r2, r2
 8007804:	440b      	add	r3, r1
 8007806:	761a      	strb	r2, [r3, #24]
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	e000e100 	.word	0xe000e100
 8007818:	e000ed00 	.word	0xe000ed00

0800781c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800781c:	b480      	push	{r7}
 800781e:	b089      	sub	sp, #36	; 0x24
 8007820:	af00      	add	r7, sp, #0
 8007822:	60f8      	str	r0, [r7, #12]
 8007824:	60b9      	str	r1, [r7, #8]
 8007826:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f1c3 0307 	rsb	r3, r3, #7
 8007836:	2b04      	cmp	r3, #4
 8007838:	bf28      	it	cs
 800783a:	2304      	movcs	r3, #4
 800783c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	3304      	adds	r3, #4
 8007842:	2b06      	cmp	r3, #6
 8007844:	d902      	bls.n	800784c <NVIC_EncodePriority+0x30>
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	3b03      	subs	r3, #3
 800784a:	e000      	b.n	800784e <NVIC_EncodePriority+0x32>
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007850:	f04f 32ff 	mov.w	r2, #4294967295
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	fa02 f303 	lsl.w	r3, r2, r3
 800785a:	43da      	mvns	r2, r3
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	401a      	ands	r2, r3
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007864:	f04f 31ff 	mov.w	r1, #4294967295
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	fa01 f303 	lsl.w	r3, r1, r3
 800786e:	43d9      	mvns	r1, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007874:	4313      	orrs	r3, r2
         );
}
 8007876:	4618      	mov	r0, r3
 8007878:	3724      	adds	r7, #36	; 0x24
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr
	...

08007884 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	3b01      	subs	r3, #1
 8007890:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007894:	d301      	bcc.n	800789a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007896:	2301      	movs	r3, #1
 8007898:	e00f      	b.n	80078ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800789a:	4a0a      	ldr	r2, [pc, #40]	; (80078c4 <SysTick_Config+0x40>)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3b01      	subs	r3, #1
 80078a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078a2:	210f      	movs	r1, #15
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	f7ff ff8e 	bl	80077c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078ac:	4b05      	ldr	r3, [pc, #20]	; (80078c4 <SysTick_Config+0x40>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078b2:	4b04      	ldr	r3, [pc, #16]	; (80078c4 <SysTick_Config+0x40>)
 80078b4:	2207      	movs	r2, #7
 80078b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80078b8:	2300      	movs	r3, #0
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3708      	adds	r7, #8
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	e000e010 	.word	0xe000e010

080078c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7ff ff29 	bl	8007728 <__NVIC_SetPriorityGrouping>
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b086      	sub	sp, #24
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	4603      	mov	r3, r0
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80078ec:	f7ff ff40 	bl	8007770 <__NVIC_GetPriorityGrouping>
 80078f0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	68b9      	ldr	r1, [r7, #8]
 80078f6:	6978      	ldr	r0, [r7, #20]
 80078f8:	f7ff ff90 	bl	800781c <NVIC_EncodePriority>
 80078fc:	4602      	mov	r2, r0
 80078fe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f7ff ff5f 	bl	80077c8 <__NVIC_SetPriority>
}
 800790a:	bf00      	nop
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	4603      	mov	r3, r0
 800791a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800791c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007920:	4618      	mov	r0, r3
 8007922:	f7ff ff33 	bl	800778c <__NVIC_EnableIRQ>
}
 8007926:	bf00      	nop
 8007928:	3708      	adds	r7, #8
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}

0800792e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f7ff ffa4 	bl	8007884 <SysTick_Config>
 800793c:	4603      	mov	r3, r0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
	...

08007948 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b086      	sub	sp, #24
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007950:	f7ff fe9a 	bl	8007688 <HAL_GetTick>
 8007954:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d101      	bne.n	8007960 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e316      	b.n	8007f8e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a66      	ldr	r2, [pc, #408]	; (8007b00 <HAL_DMA_Init+0x1b8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d04a      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a65      	ldr	r2, [pc, #404]	; (8007b04 <HAL_DMA_Init+0x1bc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d045      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a63      	ldr	r2, [pc, #396]	; (8007b08 <HAL_DMA_Init+0x1c0>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d040      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a62      	ldr	r2, [pc, #392]	; (8007b0c <HAL_DMA_Init+0x1c4>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d03b      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	4a60      	ldr	r2, [pc, #384]	; (8007b10 <HAL_DMA_Init+0x1c8>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d036      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a5f      	ldr	r2, [pc, #380]	; (8007b14 <HAL_DMA_Init+0x1cc>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d031      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a5d      	ldr	r2, [pc, #372]	; (8007b18 <HAL_DMA_Init+0x1d0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d02c      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a5c      	ldr	r2, [pc, #368]	; (8007b1c <HAL_DMA_Init+0x1d4>)
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d027      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a5a      	ldr	r2, [pc, #360]	; (8007b20 <HAL_DMA_Init+0x1d8>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d022      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a59      	ldr	r2, [pc, #356]	; (8007b24 <HAL_DMA_Init+0x1dc>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d01d      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a57      	ldr	r2, [pc, #348]	; (8007b28 <HAL_DMA_Init+0x1e0>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d018      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4a56      	ldr	r2, [pc, #344]	; (8007b2c <HAL_DMA_Init+0x1e4>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a54      	ldr	r2, [pc, #336]	; (8007b30 <HAL_DMA_Init+0x1e8>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d00e      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a53      	ldr	r2, [pc, #332]	; (8007b34 <HAL_DMA_Init+0x1ec>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d009      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a51      	ldr	r2, [pc, #324]	; (8007b38 <HAL_DMA_Init+0x1f0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d004      	beq.n	8007a00 <HAL_DMA_Init+0xb8>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a50      	ldr	r2, [pc, #320]	; (8007b3c <HAL_DMA_Init+0x1f4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d101      	bne.n	8007a04 <HAL_DMA_Init+0xbc>
 8007a00:	2301      	movs	r3, #1
 8007a02:	e000      	b.n	8007a06 <HAL_DMA_Init+0xbe>
 8007a04:	2300      	movs	r3, #0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 813b 	beq.w	8007c82 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2202      	movs	r2, #2
 8007a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a37      	ldr	r2, [pc, #220]	; (8007b00 <HAL_DMA_Init+0x1b8>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d04a      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a36      	ldr	r2, [pc, #216]	; (8007b04 <HAL_DMA_Init+0x1bc>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d045      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a34      	ldr	r2, [pc, #208]	; (8007b08 <HAL_DMA_Init+0x1c0>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d040      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a33      	ldr	r2, [pc, #204]	; (8007b0c <HAL_DMA_Init+0x1c4>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d03b      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a31      	ldr	r2, [pc, #196]	; (8007b10 <HAL_DMA_Init+0x1c8>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d036      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a30      	ldr	r2, [pc, #192]	; (8007b14 <HAL_DMA_Init+0x1cc>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d031      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a2e      	ldr	r2, [pc, #184]	; (8007b18 <HAL_DMA_Init+0x1d0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d02c      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a2d      	ldr	r2, [pc, #180]	; (8007b1c <HAL_DMA_Init+0x1d4>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d027      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a2b      	ldr	r2, [pc, #172]	; (8007b20 <HAL_DMA_Init+0x1d8>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d022      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a2a      	ldr	r2, [pc, #168]	; (8007b24 <HAL_DMA_Init+0x1dc>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d01d      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a28      	ldr	r2, [pc, #160]	; (8007b28 <HAL_DMA_Init+0x1e0>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d018      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a27      	ldr	r2, [pc, #156]	; (8007b2c <HAL_DMA_Init+0x1e4>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d013      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a25      	ldr	r2, [pc, #148]	; (8007b30 <HAL_DMA_Init+0x1e8>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d00e      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a24      	ldr	r2, [pc, #144]	; (8007b34 <HAL_DMA_Init+0x1ec>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d009      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a22      	ldr	r2, [pc, #136]	; (8007b38 <HAL_DMA_Init+0x1f0>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d004      	beq.n	8007abc <HAL_DMA_Init+0x174>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a21      	ldr	r2, [pc, #132]	; (8007b3c <HAL_DMA_Init+0x1f4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d108      	bne.n	8007ace <HAL_DMA_Init+0x186>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0201 	bic.w	r2, r2, #1
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	e007      	b.n	8007ade <HAL_DMA_Init+0x196>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f022 0201 	bic.w	r2, r2, #1
 8007adc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007ade:	e02f      	b.n	8007b40 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ae0:	f7ff fdd2 	bl	8007688 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b05      	cmp	r3, #5
 8007aec:	d928      	bls.n	8007b40 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2220      	movs	r2, #32
 8007af2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2203      	movs	r2, #3
 8007af8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e246      	b.n	8007f8e <HAL_DMA_Init+0x646>
 8007b00:	40020010 	.word	0x40020010
 8007b04:	40020028 	.word	0x40020028
 8007b08:	40020040 	.word	0x40020040
 8007b0c:	40020058 	.word	0x40020058
 8007b10:	40020070 	.word	0x40020070
 8007b14:	40020088 	.word	0x40020088
 8007b18:	400200a0 	.word	0x400200a0
 8007b1c:	400200b8 	.word	0x400200b8
 8007b20:	40020410 	.word	0x40020410
 8007b24:	40020428 	.word	0x40020428
 8007b28:	40020440 	.word	0x40020440
 8007b2c:	40020458 	.word	0x40020458
 8007b30:	40020470 	.word	0x40020470
 8007b34:	40020488 	.word	0x40020488
 8007b38:	400204a0 	.word	0x400204a0
 8007b3c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f003 0301 	and.w	r3, r3, #1
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1c8      	bne.n	8007ae0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b56:	697a      	ldr	r2, [r7, #20]
 8007b58:	4b83      	ldr	r3, [pc, #524]	; (8007d68 <HAL_DMA_Init+0x420>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007b66:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b72:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b7e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6a1b      	ldr	r3, [r3, #32]
 8007b84:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	2b04      	cmp	r3, #4
 8007b92:	d107      	bne.n	8007ba4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	697a      	ldr	r2, [r7, #20]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007ba4:	4b71      	ldr	r3, [pc, #452]	; (8007d6c <HAL_DMA_Init+0x424>)
 8007ba6:	681a      	ldr	r2, [r3, #0]
 8007ba8:	4b71      	ldr	r3, [pc, #452]	; (8007d70 <HAL_DMA_Init+0x428>)
 8007baa:	4013      	ands	r3, r2
 8007bac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bb0:	d328      	bcc.n	8007c04 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b28      	cmp	r3, #40	; 0x28
 8007bb8:	d903      	bls.n	8007bc2 <HAL_DMA_Init+0x27a>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8007bc0:	d917      	bls.n	8007bf2 <HAL_DMA_Init+0x2aa>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2b3e      	cmp	r3, #62	; 0x3e
 8007bc8:	d903      	bls.n	8007bd2 <HAL_DMA_Init+0x28a>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	2b42      	cmp	r3, #66	; 0x42
 8007bd0:	d90f      	bls.n	8007bf2 <HAL_DMA_Init+0x2aa>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	2b46      	cmp	r3, #70	; 0x46
 8007bd8:	d903      	bls.n	8007be2 <HAL_DMA_Init+0x29a>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2b48      	cmp	r3, #72	; 0x48
 8007be0:	d907      	bls.n	8007bf2 <HAL_DMA_Init+0x2aa>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	2b4e      	cmp	r3, #78	; 0x4e
 8007be8:	d905      	bls.n	8007bf6 <HAL_DMA_Init+0x2ae>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	2b52      	cmp	r3, #82	; 0x52
 8007bf0:	d801      	bhi.n	8007bf6 <HAL_DMA_Init+0x2ae>
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e000      	b.n	8007bf8 <HAL_DMA_Init+0x2b0>
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d003      	beq.n	8007c04 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c02:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	697a      	ldr	r2, [r7, #20]
 8007c0a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	f023 0307 	bic.w	r3, r3, #7
 8007c1a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	697a      	ldr	r2, [r7, #20]
 8007c22:	4313      	orrs	r3, r2
 8007c24:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	2b04      	cmp	r3, #4
 8007c2c:	d117      	bne.n	8007c5e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	697a      	ldr	r2, [r7, #20]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00e      	beq.n	8007c5e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f001 ff1d 	bl	8009a80 <DMA_CheckFifoParam>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d008      	beq.n	8007c5e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2240      	movs	r2, #64	; 0x40
 8007c50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2201      	movs	r2, #1
 8007c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e197      	b.n	8007f8e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	697a      	ldr	r2, [r7, #20]
 8007c64:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f001 fe58 	bl	800991c <DMA_CalcBaseAndBitshift>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c74:	f003 031f 	and.w	r3, r3, #31
 8007c78:	223f      	movs	r2, #63	; 0x3f
 8007c7a:	409a      	lsls	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	609a      	str	r2, [r3, #8]
 8007c80:	e0cd      	b.n	8007e1e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a3b      	ldr	r2, [pc, #236]	; (8007d74 <HAL_DMA_Init+0x42c>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d022      	beq.n	8007cd2 <HAL_DMA_Init+0x38a>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a39      	ldr	r2, [pc, #228]	; (8007d78 <HAL_DMA_Init+0x430>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d01d      	beq.n	8007cd2 <HAL_DMA_Init+0x38a>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a38      	ldr	r2, [pc, #224]	; (8007d7c <HAL_DMA_Init+0x434>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d018      	beq.n	8007cd2 <HAL_DMA_Init+0x38a>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a36      	ldr	r2, [pc, #216]	; (8007d80 <HAL_DMA_Init+0x438>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d013      	beq.n	8007cd2 <HAL_DMA_Init+0x38a>
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4a35      	ldr	r2, [pc, #212]	; (8007d84 <HAL_DMA_Init+0x43c>)
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d00e      	beq.n	8007cd2 <HAL_DMA_Init+0x38a>
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a33      	ldr	r2, [pc, #204]	; (8007d88 <HAL_DMA_Init+0x440>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d009      	beq.n	8007cd2 <HAL_DMA_Init+0x38a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a32      	ldr	r2, [pc, #200]	; (8007d8c <HAL_DMA_Init+0x444>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d004      	beq.n	8007cd2 <HAL_DMA_Init+0x38a>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a30      	ldr	r2, [pc, #192]	; (8007d90 <HAL_DMA_Init+0x448>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d101      	bne.n	8007cd6 <HAL_DMA_Init+0x38e>
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e000      	b.n	8007cd8 <HAL_DMA_Init+0x390>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 8097 	beq.w	8007e0c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a24      	ldr	r2, [pc, #144]	; (8007d74 <HAL_DMA_Init+0x42c>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d021      	beq.n	8007d2c <HAL_DMA_Init+0x3e4>
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a22      	ldr	r2, [pc, #136]	; (8007d78 <HAL_DMA_Init+0x430>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d01c      	beq.n	8007d2c <HAL_DMA_Init+0x3e4>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	4a21      	ldr	r2, [pc, #132]	; (8007d7c <HAL_DMA_Init+0x434>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d017      	beq.n	8007d2c <HAL_DMA_Init+0x3e4>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a1f      	ldr	r2, [pc, #124]	; (8007d80 <HAL_DMA_Init+0x438>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d012      	beq.n	8007d2c <HAL_DMA_Init+0x3e4>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a1e      	ldr	r2, [pc, #120]	; (8007d84 <HAL_DMA_Init+0x43c>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d00d      	beq.n	8007d2c <HAL_DMA_Init+0x3e4>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a1c      	ldr	r2, [pc, #112]	; (8007d88 <HAL_DMA_Init+0x440>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d008      	beq.n	8007d2c <HAL_DMA_Init+0x3e4>
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a1b      	ldr	r2, [pc, #108]	; (8007d8c <HAL_DMA_Init+0x444>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d003      	beq.n	8007d2c <HAL_DMA_Init+0x3e4>
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4a19      	ldr	r2, [pc, #100]	; (8007d90 <HAL_DMA_Init+0x448>)
 8007d2a:	4293      	cmp	r3, r2
 8007d2c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2202      	movs	r2, #2
 8007d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <HAL_DMA_Init+0x44c>)
 8007d4a:	4013      	ands	r3, r2
 8007d4c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d020      	beq.n	8007d98 <HAL_DMA_Init+0x450>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	2b80      	cmp	r3, #128	; 0x80
 8007d5c:	d102      	bne.n	8007d64 <HAL_DMA_Init+0x41c>
 8007d5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d62:	e01a      	b.n	8007d9a <HAL_DMA_Init+0x452>
 8007d64:	2300      	movs	r3, #0
 8007d66:	e018      	b.n	8007d9a <HAL_DMA_Init+0x452>
 8007d68:	fe10803f 	.word	0xfe10803f
 8007d6c:	5c001000 	.word	0x5c001000
 8007d70:	ffff0000 	.word	0xffff0000
 8007d74:	58025408 	.word	0x58025408
 8007d78:	5802541c 	.word	0x5802541c
 8007d7c:	58025430 	.word	0x58025430
 8007d80:	58025444 	.word	0x58025444
 8007d84:	58025458 	.word	0x58025458
 8007d88:	5802546c 	.word	0x5802546c
 8007d8c:	58025480 	.word	0x58025480
 8007d90:	58025494 	.word	0x58025494
 8007d94:	fffe000f 	.word	0xfffe000f
 8007d98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	68d2      	ldr	r2, [r2, #12]
 8007d9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007da0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007da8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69db      	ldr	r3, [r3, #28]
 8007dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6a1b      	ldr	r3, [r3, #32]
 8007dc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007dc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	4b6e      	ldr	r3, [pc, #440]	; (8007f98 <HAL_DMA_Init+0x650>)
 8007de0:	4413      	add	r3, r2
 8007de2:	4a6e      	ldr	r2, [pc, #440]	; (8007f9c <HAL_DMA_Init+0x654>)
 8007de4:	fba2 2303 	umull	r2, r3, r2, r3
 8007de8:	091b      	lsrs	r3, r3, #4
 8007dea:	009a      	lsls	r2, r3, #2
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 fd93 	bl	800991c <DMA_CalcBaseAndBitshift>
 8007df6:	4603      	mov	r3, r0
 8007df8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dfe:	f003 031f 	and.w	r3, r3, #31
 8007e02:	2201      	movs	r2, #1
 8007e04:	409a      	lsls	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	605a      	str	r2, [r3, #4]
 8007e0a:	e008      	b.n	8007e1e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2240      	movs	r2, #64	; 0x40
 8007e10:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2203      	movs	r2, #3
 8007e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	e0b7      	b.n	8007f8e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	4a5f      	ldr	r2, [pc, #380]	; (8007fa0 <HAL_DMA_Init+0x658>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d072      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a5d      	ldr	r2, [pc, #372]	; (8007fa4 <HAL_DMA_Init+0x65c>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d06d      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a5c      	ldr	r2, [pc, #368]	; (8007fa8 <HAL_DMA_Init+0x660>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d068      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	4a5a      	ldr	r2, [pc, #360]	; (8007fac <HAL_DMA_Init+0x664>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d063      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4a59      	ldr	r2, [pc, #356]	; (8007fb0 <HAL_DMA_Init+0x668>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d05e      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a57      	ldr	r2, [pc, #348]	; (8007fb4 <HAL_DMA_Init+0x66c>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d059      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a56      	ldr	r2, [pc, #344]	; (8007fb8 <HAL_DMA_Init+0x670>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d054      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	4a54      	ldr	r2, [pc, #336]	; (8007fbc <HAL_DMA_Init+0x674>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d04f      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4a53      	ldr	r2, [pc, #332]	; (8007fc0 <HAL_DMA_Init+0x678>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d04a      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4a51      	ldr	r2, [pc, #324]	; (8007fc4 <HAL_DMA_Init+0x67c>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d045      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a50      	ldr	r2, [pc, #320]	; (8007fc8 <HAL_DMA_Init+0x680>)
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d040      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	4a4e      	ldr	r2, [pc, #312]	; (8007fcc <HAL_DMA_Init+0x684>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d03b      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a4d      	ldr	r2, [pc, #308]	; (8007fd0 <HAL_DMA_Init+0x688>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d036      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a4b      	ldr	r2, [pc, #300]	; (8007fd4 <HAL_DMA_Init+0x68c>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d031      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4a4a      	ldr	r2, [pc, #296]	; (8007fd8 <HAL_DMA_Init+0x690>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d02c      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a48      	ldr	r2, [pc, #288]	; (8007fdc <HAL_DMA_Init+0x694>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d027      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a47      	ldr	r2, [pc, #284]	; (8007fe0 <HAL_DMA_Init+0x698>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d022      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a45      	ldr	r2, [pc, #276]	; (8007fe4 <HAL_DMA_Init+0x69c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d01d      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a44      	ldr	r2, [pc, #272]	; (8007fe8 <HAL_DMA_Init+0x6a0>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d018      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a42      	ldr	r2, [pc, #264]	; (8007fec <HAL_DMA_Init+0x6a4>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d013      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a41      	ldr	r2, [pc, #260]	; (8007ff0 <HAL_DMA_Init+0x6a8>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d00e      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a3f      	ldr	r2, [pc, #252]	; (8007ff4 <HAL_DMA_Init+0x6ac>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d009      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a3e      	ldr	r2, [pc, #248]	; (8007ff8 <HAL_DMA_Init+0x6b0>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d004      	beq.n	8007f0e <HAL_DMA_Init+0x5c6>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a3c      	ldr	r2, [pc, #240]	; (8007ffc <HAL_DMA_Init+0x6b4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d101      	bne.n	8007f12 <HAL_DMA_Init+0x5ca>
 8007f0e:	2301      	movs	r3, #1
 8007f10:	e000      	b.n	8007f14 <HAL_DMA_Init+0x5cc>
 8007f12:	2300      	movs	r3, #0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d032      	beq.n	8007f7e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f001 fe2d 	bl	8009b78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	2b80      	cmp	r3, #128	; 0x80
 8007f24:	d102      	bne.n	8007f2c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685a      	ldr	r2, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007f40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d010      	beq.n	8007f6c <HAL_DMA_Init+0x624>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	2b08      	cmp	r3, #8
 8007f50:	d80c      	bhi.n	8007f6c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f001 feaa 	bl	8009cac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f64:	687a      	ldr	r2, [r7, #4]
 8007f66:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007f68:	605a      	str	r2, [r3, #4]
 8007f6a:	e008      	b.n	8007f7e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2200      	movs	r2, #0
 8007f76:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2201      	movs	r2, #1
 8007f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	a7fdabf8 	.word	0xa7fdabf8
 8007f9c:	cccccccd 	.word	0xcccccccd
 8007fa0:	40020010 	.word	0x40020010
 8007fa4:	40020028 	.word	0x40020028
 8007fa8:	40020040 	.word	0x40020040
 8007fac:	40020058 	.word	0x40020058
 8007fb0:	40020070 	.word	0x40020070
 8007fb4:	40020088 	.word	0x40020088
 8007fb8:	400200a0 	.word	0x400200a0
 8007fbc:	400200b8 	.word	0x400200b8
 8007fc0:	40020410 	.word	0x40020410
 8007fc4:	40020428 	.word	0x40020428
 8007fc8:	40020440 	.word	0x40020440
 8007fcc:	40020458 	.word	0x40020458
 8007fd0:	40020470 	.word	0x40020470
 8007fd4:	40020488 	.word	0x40020488
 8007fd8:	400204a0 	.word	0x400204a0
 8007fdc:	400204b8 	.word	0x400204b8
 8007fe0:	58025408 	.word	0x58025408
 8007fe4:	5802541c 	.word	0x5802541c
 8007fe8:	58025430 	.word	0x58025430
 8007fec:	58025444 	.word	0x58025444
 8007ff0:	58025458 	.word	0x58025458
 8007ff4:	5802546c 	.word	0x5802546c
 8007ff8:	58025480 	.word	0x58025480
 8007ffc:	58025494 	.word	0x58025494

08008000 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008008:	f7ff fb3e 	bl	8007688 <HAL_GetTick>
 800800c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e2dc      	b.n	80085d2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800801e:	b2db      	uxtb	r3, r3
 8008020:	2b02      	cmp	r3, #2
 8008022:	d008      	beq.n	8008036 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2280      	movs	r2, #128	; 0x80
 8008028:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8008032:	2301      	movs	r3, #1
 8008034:	e2cd      	b.n	80085d2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a76      	ldr	r2, [pc, #472]	; (8008214 <HAL_DMA_Abort+0x214>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d04a      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a74      	ldr	r2, [pc, #464]	; (8008218 <HAL_DMA_Abort+0x218>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d045      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a73      	ldr	r2, [pc, #460]	; (800821c <HAL_DMA_Abort+0x21c>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d040      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a71      	ldr	r2, [pc, #452]	; (8008220 <HAL_DMA_Abort+0x220>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d03b      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a70      	ldr	r2, [pc, #448]	; (8008224 <HAL_DMA_Abort+0x224>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d036      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a6e      	ldr	r2, [pc, #440]	; (8008228 <HAL_DMA_Abort+0x228>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d031      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a6d      	ldr	r2, [pc, #436]	; (800822c <HAL_DMA_Abort+0x22c>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d02c      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a6b      	ldr	r2, [pc, #428]	; (8008230 <HAL_DMA_Abort+0x230>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d027      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a6a      	ldr	r2, [pc, #424]	; (8008234 <HAL_DMA_Abort+0x234>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d022      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a68      	ldr	r2, [pc, #416]	; (8008238 <HAL_DMA_Abort+0x238>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d01d      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a67      	ldr	r2, [pc, #412]	; (800823c <HAL_DMA_Abort+0x23c>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d018      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a65      	ldr	r2, [pc, #404]	; (8008240 <HAL_DMA_Abort+0x240>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d013      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	4a64      	ldr	r2, [pc, #400]	; (8008244 <HAL_DMA_Abort+0x244>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d00e      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a62      	ldr	r2, [pc, #392]	; (8008248 <HAL_DMA_Abort+0x248>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d009      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4a61      	ldr	r2, [pc, #388]	; (800824c <HAL_DMA_Abort+0x24c>)
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d004      	beq.n	80080d6 <HAL_DMA_Abort+0xd6>
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a5f      	ldr	r2, [pc, #380]	; (8008250 <HAL_DMA_Abort+0x250>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d101      	bne.n	80080da <HAL_DMA_Abort+0xda>
 80080d6:	2301      	movs	r3, #1
 80080d8:	e000      	b.n	80080dc <HAL_DMA_Abort+0xdc>
 80080da:	2300      	movs	r3, #0
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d013      	beq.n	8008108 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	681a      	ldr	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f022 021e 	bic.w	r2, r2, #30
 80080ee:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	695a      	ldr	r2, [r3, #20]
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080fe:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	617b      	str	r3, [r7, #20]
 8008106:	e00a      	b.n	800811e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 020e 	bic.w	r2, r2, #14
 8008116:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a3c      	ldr	r2, [pc, #240]	; (8008214 <HAL_DMA_Abort+0x214>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d072      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a3a      	ldr	r2, [pc, #232]	; (8008218 <HAL_DMA_Abort+0x218>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d06d      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a39      	ldr	r2, [pc, #228]	; (800821c <HAL_DMA_Abort+0x21c>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d068      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a37      	ldr	r2, [pc, #220]	; (8008220 <HAL_DMA_Abort+0x220>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d063      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a36      	ldr	r2, [pc, #216]	; (8008224 <HAL_DMA_Abort+0x224>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d05e      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a34      	ldr	r2, [pc, #208]	; (8008228 <HAL_DMA_Abort+0x228>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d059      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a33      	ldr	r2, [pc, #204]	; (800822c <HAL_DMA_Abort+0x22c>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d054      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a31      	ldr	r2, [pc, #196]	; (8008230 <HAL_DMA_Abort+0x230>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d04f      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a30      	ldr	r2, [pc, #192]	; (8008234 <HAL_DMA_Abort+0x234>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d04a      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a2e      	ldr	r2, [pc, #184]	; (8008238 <HAL_DMA_Abort+0x238>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d045      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a2d      	ldr	r2, [pc, #180]	; (800823c <HAL_DMA_Abort+0x23c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d040      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a2b      	ldr	r2, [pc, #172]	; (8008240 <HAL_DMA_Abort+0x240>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d03b      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2a      	ldr	r2, [pc, #168]	; (8008244 <HAL_DMA_Abort+0x244>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d036      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a28      	ldr	r2, [pc, #160]	; (8008248 <HAL_DMA_Abort+0x248>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d031      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a27      	ldr	r2, [pc, #156]	; (800824c <HAL_DMA_Abort+0x24c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d02c      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a25      	ldr	r2, [pc, #148]	; (8008250 <HAL_DMA_Abort+0x250>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d027      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a24      	ldr	r2, [pc, #144]	; (8008254 <HAL_DMA_Abort+0x254>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d022      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a22      	ldr	r2, [pc, #136]	; (8008258 <HAL_DMA_Abort+0x258>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d01d      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a21      	ldr	r2, [pc, #132]	; (800825c <HAL_DMA_Abort+0x25c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d018      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1f      	ldr	r2, [pc, #124]	; (8008260 <HAL_DMA_Abort+0x260>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d013      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a1e      	ldr	r2, [pc, #120]	; (8008264 <HAL_DMA_Abort+0x264>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d00e      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1c      	ldr	r2, [pc, #112]	; (8008268 <HAL_DMA_Abort+0x268>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d009      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1b      	ldr	r2, [pc, #108]	; (800826c <HAL_DMA_Abort+0x26c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d004      	beq.n	800820e <HAL_DMA_Abort+0x20e>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a19      	ldr	r2, [pc, #100]	; (8008270 <HAL_DMA_Abort+0x270>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d132      	bne.n	8008274 <HAL_DMA_Abort+0x274>
 800820e:	2301      	movs	r3, #1
 8008210:	e031      	b.n	8008276 <HAL_DMA_Abort+0x276>
 8008212:	bf00      	nop
 8008214:	40020010 	.word	0x40020010
 8008218:	40020028 	.word	0x40020028
 800821c:	40020040 	.word	0x40020040
 8008220:	40020058 	.word	0x40020058
 8008224:	40020070 	.word	0x40020070
 8008228:	40020088 	.word	0x40020088
 800822c:	400200a0 	.word	0x400200a0
 8008230:	400200b8 	.word	0x400200b8
 8008234:	40020410 	.word	0x40020410
 8008238:	40020428 	.word	0x40020428
 800823c:	40020440 	.word	0x40020440
 8008240:	40020458 	.word	0x40020458
 8008244:	40020470 	.word	0x40020470
 8008248:	40020488 	.word	0x40020488
 800824c:	400204a0 	.word	0x400204a0
 8008250:	400204b8 	.word	0x400204b8
 8008254:	58025408 	.word	0x58025408
 8008258:	5802541c 	.word	0x5802541c
 800825c:	58025430 	.word	0x58025430
 8008260:	58025444 	.word	0x58025444
 8008264:	58025458 	.word	0x58025458
 8008268:	5802546c 	.word	0x5802546c
 800826c:	58025480 	.word	0x58025480
 8008270:	58025494 	.word	0x58025494
 8008274:	2300      	movs	r3, #0
 8008276:	2b00      	cmp	r3, #0
 8008278:	d007      	beq.n	800828a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008288:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a6d      	ldr	r2, [pc, #436]	; (8008444 <HAL_DMA_Abort+0x444>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d04a      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a6b      	ldr	r2, [pc, #428]	; (8008448 <HAL_DMA_Abort+0x448>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d045      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a6a      	ldr	r2, [pc, #424]	; (800844c <HAL_DMA_Abort+0x44c>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d040      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4a68      	ldr	r2, [pc, #416]	; (8008450 <HAL_DMA_Abort+0x450>)
 80082ae:	4293      	cmp	r3, r2
 80082b0:	d03b      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a67      	ldr	r2, [pc, #412]	; (8008454 <HAL_DMA_Abort+0x454>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d036      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a65      	ldr	r2, [pc, #404]	; (8008458 <HAL_DMA_Abort+0x458>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d031      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4a64      	ldr	r2, [pc, #400]	; (800845c <HAL_DMA_Abort+0x45c>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d02c      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	4a62      	ldr	r2, [pc, #392]	; (8008460 <HAL_DMA_Abort+0x460>)
 80082d6:	4293      	cmp	r3, r2
 80082d8:	d027      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4a61      	ldr	r2, [pc, #388]	; (8008464 <HAL_DMA_Abort+0x464>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d022      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a5f      	ldr	r2, [pc, #380]	; (8008468 <HAL_DMA_Abort+0x468>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d01d      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a5e      	ldr	r2, [pc, #376]	; (800846c <HAL_DMA_Abort+0x46c>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d018      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a5c      	ldr	r2, [pc, #368]	; (8008470 <HAL_DMA_Abort+0x470>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d013      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a5b      	ldr	r2, [pc, #364]	; (8008474 <HAL_DMA_Abort+0x474>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d00e      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4a59      	ldr	r2, [pc, #356]	; (8008478 <HAL_DMA_Abort+0x478>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d009      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a58      	ldr	r2, [pc, #352]	; (800847c <HAL_DMA_Abort+0x47c>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d004      	beq.n	800832a <HAL_DMA_Abort+0x32a>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a56      	ldr	r2, [pc, #344]	; (8008480 <HAL_DMA_Abort+0x480>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d108      	bne.n	800833c <HAL_DMA_Abort+0x33c>
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0201 	bic.w	r2, r2, #1
 8008338:	601a      	str	r2, [r3, #0]
 800833a:	e007      	b.n	800834c <HAL_DMA_Abort+0x34c>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	681a      	ldr	r2, [r3, #0]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f022 0201 	bic.w	r2, r2, #1
 800834a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800834c:	e013      	b.n	8008376 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800834e:	f7ff f99b 	bl	8007688 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	2b05      	cmp	r3, #5
 800835a:	d90c      	bls.n	8008376 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2220      	movs	r2, #32
 8008360:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2203      	movs	r2, #3
 8008366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e12d      	b.n	80085d2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 0301 	and.w	r3, r3, #1
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1e5      	bne.n	800834e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a2f      	ldr	r2, [pc, #188]	; (8008444 <HAL_DMA_Abort+0x444>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d04a      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a2d      	ldr	r2, [pc, #180]	; (8008448 <HAL_DMA_Abort+0x448>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d045      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a2c      	ldr	r2, [pc, #176]	; (800844c <HAL_DMA_Abort+0x44c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d040      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a2a      	ldr	r2, [pc, #168]	; (8008450 <HAL_DMA_Abort+0x450>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d03b      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a29      	ldr	r2, [pc, #164]	; (8008454 <HAL_DMA_Abort+0x454>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d036      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a27      	ldr	r2, [pc, #156]	; (8008458 <HAL_DMA_Abort+0x458>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d031      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a26      	ldr	r2, [pc, #152]	; (800845c <HAL_DMA_Abort+0x45c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d02c      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a24      	ldr	r2, [pc, #144]	; (8008460 <HAL_DMA_Abort+0x460>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d027      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a23      	ldr	r2, [pc, #140]	; (8008464 <HAL_DMA_Abort+0x464>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d022      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a21      	ldr	r2, [pc, #132]	; (8008468 <HAL_DMA_Abort+0x468>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01d      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a20      	ldr	r2, [pc, #128]	; (800846c <HAL_DMA_Abort+0x46c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d018      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a1e      	ldr	r2, [pc, #120]	; (8008470 <HAL_DMA_Abort+0x470>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a1d      	ldr	r2, [pc, #116]	; (8008474 <HAL_DMA_Abort+0x474>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00e      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a1b      	ldr	r2, [pc, #108]	; (8008478 <HAL_DMA_Abort+0x478>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d009      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a1a      	ldr	r2, [pc, #104]	; (800847c <HAL_DMA_Abort+0x47c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <HAL_DMA_Abort+0x422>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a18      	ldr	r2, [pc, #96]	; (8008480 <HAL_DMA_Abort+0x480>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d101      	bne.n	8008426 <HAL_DMA_Abort+0x426>
 8008422:	2301      	movs	r3, #1
 8008424:	e000      	b.n	8008428 <HAL_DMA_Abort+0x428>
 8008426:	2300      	movs	r3, #0
 8008428:	2b00      	cmp	r3, #0
 800842a:	d02b      	beq.n	8008484 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008430:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008436:	f003 031f 	and.w	r3, r3, #31
 800843a:	223f      	movs	r2, #63	; 0x3f
 800843c:	409a      	lsls	r2, r3
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	609a      	str	r2, [r3, #8]
 8008442:	e02a      	b.n	800849a <HAL_DMA_Abort+0x49a>
 8008444:	40020010 	.word	0x40020010
 8008448:	40020028 	.word	0x40020028
 800844c:	40020040 	.word	0x40020040
 8008450:	40020058 	.word	0x40020058
 8008454:	40020070 	.word	0x40020070
 8008458:	40020088 	.word	0x40020088
 800845c:	400200a0 	.word	0x400200a0
 8008460:	400200b8 	.word	0x400200b8
 8008464:	40020410 	.word	0x40020410
 8008468:	40020428 	.word	0x40020428
 800846c:	40020440 	.word	0x40020440
 8008470:	40020458 	.word	0x40020458
 8008474:	40020470 	.word	0x40020470
 8008478:	40020488 	.word	0x40020488
 800847c:	400204a0 	.word	0x400204a0
 8008480:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008488:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800848e:	f003 031f 	and.w	r3, r3, #31
 8008492:	2201      	movs	r2, #1
 8008494:	409a      	lsls	r2, r3
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4a4f      	ldr	r2, [pc, #316]	; (80085dc <HAL_DMA_Abort+0x5dc>)
 80084a0:	4293      	cmp	r3, r2
 80084a2:	d072      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a4d      	ldr	r2, [pc, #308]	; (80085e0 <HAL_DMA_Abort+0x5e0>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d06d      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a4c      	ldr	r2, [pc, #304]	; (80085e4 <HAL_DMA_Abort+0x5e4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d068      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a4a      	ldr	r2, [pc, #296]	; (80085e8 <HAL_DMA_Abort+0x5e8>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d063      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a49      	ldr	r2, [pc, #292]	; (80085ec <HAL_DMA_Abort+0x5ec>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d05e      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a47      	ldr	r2, [pc, #284]	; (80085f0 <HAL_DMA_Abort+0x5f0>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d059      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a46      	ldr	r2, [pc, #280]	; (80085f4 <HAL_DMA_Abort+0x5f4>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d054      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a44      	ldr	r2, [pc, #272]	; (80085f8 <HAL_DMA_Abort+0x5f8>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d04f      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a43      	ldr	r2, [pc, #268]	; (80085fc <HAL_DMA_Abort+0x5fc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d04a      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a41      	ldr	r2, [pc, #260]	; (8008600 <HAL_DMA_Abort+0x600>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d045      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	4a40      	ldr	r2, [pc, #256]	; (8008604 <HAL_DMA_Abort+0x604>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d040      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a3e      	ldr	r2, [pc, #248]	; (8008608 <HAL_DMA_Abort+0x608>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d03b      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4a3d      	ldr	r2, [pc, #244]	; (800860c <HAL_DMA_Abort+0x60c>)
 8008518:	4293      	cmp	r3, r2
 800851a:	d036      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a3b      	ldr	r2, [pc, #236]	; (8008610 <HAL_DMA_Abort+0x610>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d031      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a3a      	ldr	r2, [pc, #232]	; (8008614 <HAL_DMA_Abort+0x614>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d02c      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a38      	ldr	r2, [pc, #224]	; (8008618 <HAL_DMA_Abort+0x618>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d027      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a37      	ldr	r2, [pc, #220]	; (800861c <HAL_DMA_Abort+0x61c>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d022      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a35      	ldr	r2, [pc, #212]	; (8008620 <HAL_DMA_Abort+0x620>)
 800854a:	4293      	cmp	r3, r2
 800854c:	d01d      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	4a34      	ldr	r2, [pc, #208]	; (8008624 <HAL_DMA_Abort+0x624>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d018      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	4a32      	ldr	r2, [pc, #200]	; (8008628 <HAL_DMA_Abort+0x628>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d013      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a31      	ldr	r2, [pc, #196]	; (800862c <HAL_DMA_Abort+0x62c>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d00e      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a2f      	ldr	r2, [pc, #188]	; (8008630 <HAL_DMA_Abort+0x630>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d009      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a2e      	ldr	r2, [pc, #184]	; (8008634 <HAL_DMA_Abort+0x634>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d004      	beq.n	800858a <HAL_DMA_Abort+0x58a>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a2c      	ldr	r2, [pc, #176]	; (8008638 <HAL_DMA_Abort+0x638>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d101      	bne.n	800858e <HAL_DMA_Abort+0x58e>
 800858a:	2301      	movs	r3, #1
 800858c:	e000      	b.n	8008590 <HAL_DMA_Abort+0x590>
 800858e:	2300      	movs	r3, #0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d015      	beq.n	80085c0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800859c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00c      	beq.n	80085c0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80085b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085b4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085ba:	687a      	ldr	r2, [r7, #4]
 80085bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80085be:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80085d0:	2300      	movs	r3, #0
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	40020010 	.word	0x40020010
 80085e0:	40020028 	.word	0x40020028
 80085e4:	40020040 	.word	0x40020040
 80085e8:	40020058 	.word	0x40020058
 80085ec:	40020070 	.word	0x40020070
 80085f0:	40020088 	.word	0x40020088
 80085f4:	400200a0 	.word	0x400200a0
 80085f8:	400200b8 	.word	0x400200b8
 80085fc:	40020410 	.word	0x40020410
 8008600:	40020428 	.word	0x40020428
 8008604:	40020440 	.word	0x40020440
 8008608:	40020458 	.word	0x40020458
 800860c:	40020470 	.word	0x40020470
 8008610:	40020488 	.word	0x40020488
 8008614:	400204a0 	.word	0x400204a0
 8008618:	400204b8 	.word	0x400204b8
 800861c:	58025408 	.word	0x58025408
 8008620:	5802541c 	.word	0x5802541c
 8008624:	58025430 	.word	0x58025430
 8008628:	58025444 	.word	0x58025444
 800862c:	58025458 	.word	0x58025458
 8008630:	5802546c 	.word	0x5802546c
 8008634:	58025480 	.word	0x58025480
 8008638:	58025494 	.word	0x58025494

0800863c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b084      	sub	sp, #16
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e237      	b.n	8008abe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b02      	cmp	r3, #2
 8008658:	d004      	beq.n	8008664 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2280      	movs	r2, #128	; 0x80
 800865e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	e22c      	b.n	8008abe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a5c      	ldr	r2, [pc, #368]	; (80087dc <HAL_DMA_Abort_IT+0x1a0>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d04a      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a5b      	ldr	r2, [pc, #364]	; (80087e0 <HAL_DMA_Abort_IT+0x1a4>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d045      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a59      	ldr	r2, [pc, #356]	; (80087e4 <HAL_DMA_Abort_IT+0x1a8>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d040      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a58      	ldr	r2, [pc, #352]	; (80087e8 <HAL_DMA_Abort_IT+0x1ac>)
 8008688:	4293      	cmp	r3, r2
 800868a:	d03b      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a56      	ldr	r2, [pc, #344]	; (80087ec <HAL_DMA_Abort_IT+0x1b0>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d036      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a55      	ldr	r2, [pc, #340]	; (80087f0 <HAL_DMA_Abort_IT+0x1b4>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d031      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a53      	ldr	r2, [pc, #332]	; (80087f4 <HAL_DMA_Abort_IT+0x1b8>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d02c      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a52      	ldr	r2, [pc, #328]	; (80087f8 <HAL_DMA_Abort_IT+0x1bc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d027      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a50      	ldr	r2, [pc, #320]	; (80087fc <HAL_DMA_Abort_IT+0x1c0>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d022      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a4f      	ldr	r2, [pc, #316]	; (8008800 <HAL_DMA_Abort_IT+0x1c4>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d01d      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a4d      	ldr	r2, [pc, #308]	; (8008804 <HAL_DMA_Abort_IT+0x1c8>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d018      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	4a4c      	ldr	r2, [pc, #304]	; (8008808 <HAL_DMA_Abort_IT+0x1cc>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d013      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a4a      	ldr	r2, [pc, #296]	; (800880c <HAL_DMA_Abort_IT+0x1d0>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d00e      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a49      	ldr	r2, [pc, #292]	; (8008810 <HAL_DMA_Abort_IT+0x1d4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d009      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a47      	ldr	r2, [pc, #284]	; (8008814 <HAL_DMA_Abort_IT+0x1d8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d004      	beq.n	8008704 <HAL_DMA_Abort_IT+0xc8>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a46      	ldr	r2, [pc, #280]	; (8008818 <HAL_DMA_Abort_IT+0x1dc>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d101      	bne.n	8008708 <HAL_DMA_Abort_IT+0xcc>
 8008704:	2301      	movs	r3, #1
 8008706:	e000      	b.n	800870a <HAL_DMA_Abort_IT+0xce>
 8008708:	2300      	movs	r3, #0
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 8086 	beq.w	800881c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2204      	movs	r2, #4
 8008714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a2f      	ldr	r2, [pc, #188]	; (80087dc <HAL_DMA_Abort_IT+0x1a0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d04a      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a2e      	ldr	r2, [pc, #184]	; (80087e0 <HAL_DMA_Abort_IT+0x1a4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d045      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a2c      	ldr	r2, [pc, #176]	; (80087e4 <HAL_DMA_Abort_IT+0x1a8>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d040      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a2b      	ldr	r2, [pc, #172]	; (80087e8 <HAL_DMA_Abort_IT+0x1ac>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d03b      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a29      	ldr	r2, [pc, #164]	; (80087ec <HAL_DMA_Abort_IT+0x1b0>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d036      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a28      	ldr	r2, [pc, #160]	; (80087f0 <HAL_DMA_Abort_IT+0x1b4>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d031      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a26      	ldr	r2, [pc, #152]	; (80087f4 <HAL_DMA_Abort_IT+0x1b8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d02c      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a25      	ldr	r2, [pc, #148]	; (80087f8 <HAL_DMA_Abort_IT+0x1bc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d027      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a23      	ldr	r2, [pc, #140]	; (80087fc <HAL_DMA_Abort_IT+0x1c0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d022      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a22      	ldr	r2, [pc, #136]	; (8008800 <HAL_DMA_Abort_IT+0x1c4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d01d      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a20      	ldr	r2, [pc, #128]	; (8008804 <HAL_DMA_Abort_IT+0x1c8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d018      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a1f      	ldr	r2, [pc, #124]	; (8008808 <HAL_DMA_Abort_IT+0x1cc>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d013      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a1d      	ldr	r2, [pc, #116]	; (800880c <HAL_DMA_Abort_IT+0x1d0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d00e      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a1c      	ldr	r2, [pc, #112]	; (8008810 <HAL_DMA_Abort_IT+0x1d4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d009      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a1a      	ldr	r2, [pc, #104]	; (8008814 <HAL_DMA_Abort_IT+0x1d8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d004      	beq.n	80087b8 <HAL_DMA_Abort_IT+0x17c>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a19      	ldr	r2, [pc, #100]	; (8008818 <HAL_DMA_Abort_IT+0x1dc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d108      	bne.n	80087ca <HAL_DMA_Abort_IT+0x18e>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	681a      	ldr	r2, [r3, #0]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f022 0201 	bic.w	r2, r2, #1
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	e178      	b.n	8008abc <HAL_DMA_Abort_IT+0x480>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	681a      	ldr	r2, [r3, #0]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0201 	bic.w	r2, r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	e16f      	b.n	8008abc <HAL_DMA_Abort_IT+0x480>
 80087dc:	40020010 	.word	0x40020010
 80087e0:	40020028 	.word	0x40020028
 80087e4:	40020040 	.word	0x40020040
 80087e8:	40020058 	.word	0x40020058
 80087ec:	40020070 	.word	0x40020070
 80087f0:	40020088 	.word	0x40020088
 80087f4:	400200a0 	.word	0x400200a0
 80087f8:	400200b8 	.word	0x400200b8
 80087fc:	40020410 	.word	0x40020410
 8008800:	40020428 	.word	0x40020428
 8008804:	40020440 	.word	0x40020440
 8008808:	40020458 	.word	0x40020458
 800880c:	40020470 	.word	0x40020470
 8008810:	40020488 	.word	0x40020488
 8008814:	400204a0 	.word	0x400204a0
 8008818:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	681a      	ldr	r2, [r3, #0]
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f022 020e 	bic.w	r2, r2, #14
 800882a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a6c      	ldr	r2, [pc, #432]	; (80089e4 <HAL_DMA_Abort_IT+0x3a8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d04a      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a6b      	ldr	r2, [pc, #428]	; (80089e8 <HAL_DMA_Abort_IT+0x3ac>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d045      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a69      	ldr	r2, [pc, #420]	; (80089ec <HAL_DMA_Abort_IT+0x3b0>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d040      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a68      	ldr	r2, [pc, #416]	; (80089f0 <HAL_DMA_Abort_IT+0x3b4>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d03b      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a66      	ldr	r2, [pc, #408]	; (80089f4 <HAL_DMA_Abort_IT+0x3b8>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d036      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a65      	ldr	r2, [pc, #404]	; (80089f8 <HAL_DMA_Abort_IT+0x3bc>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d031      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a63      	ldr	r2, [pc, #396]	; (80089fc <HAL_DMA_Abort_IT+0x3c0>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d02c      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a62      	ldr	r2, [pc, #392]	; (8008a00 <HAL_DMA_Abort_IT+0x3c4>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d027      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a60      	ldr	r2, [pc, #384]	; (8008a04 <HAL_DMA_Abort_IT+0x3c8>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d022      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a5f      	ldr	r2, [pc, #380]	; (8008a08 <HAL_DMA_Abort_IT+0x3cc>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d01d      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a5d      	ldr	r2, [pc, #372]	; (8008a0c <HAL_DMA_Abort_IT+0x3d0>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d018      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a5c      	ldr	r2, [pc, #368]	; (8008a10 <HAL_DMA_Abort_IT+0x3d4>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d013      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a5a      	ldr	r2, [pc, #360]	; (8008a14 <HAL_DMA_Abort_IT+0x3d8>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00e      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a59      	ldr	r2, [pc, #356]	; (8008a18 <HAL_DMA_Abort_IT+0x3dc>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d009      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a57      	ldr	r2, [pc, #348]	; (8008a1c <HAL_DMA_Abort_IT+0x3e0>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d004      	beq.n	80088cc <HAL_DMA_Abort_IT+0x290>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a56      	ldr	r2, [pc, #344]	; (8008a20 <HAL_DMA_Abort_IT+0x3e4>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d108      	bne.n	80088de <HAL_DMA_Abort_IT+0x2a2>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	e007      	b.n	80088ee <HAL_DMA_Abort_IT+0x2b2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0201 	bic.w	r2, r2, #1
 80088ec:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a3c      	ldr	r2, [pc, #240]	; (80089e4 <HAL_DMA_Abort_IT+0x3a8>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d072      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a3a      	ldr	r2, [pc, #232]	; (80089e8 <HAL_DMA_Abort_IT+0x3ac>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d06d      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a39      	ldr	r2, [pc, #228]	; (80089ec <HAL_DMA_Abort_IT+0x3b0>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d068      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4a37      	ldr	r2, [pc, #220]	; (80089f0 <HAL_DMA_Abort_IT+0x3b4>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d063      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a36      	ldr	r2, [pc, #216]	; (80089f4 <HAL_DMA_Abort_IT+0x3b8>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d05e      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a34      	ldr	r2, [pc, #208]	; (80089f8 <HAL_DMA_Abort_IT+0x3bc>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d059      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a33      	ldr	r2, [pc, #204]	; (80089fc <HAL_DMA_Abort_IT+0x3c0>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d054      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a31      	ldr	r2, [pc, #196]	; (8008a00 <HAL_DMA_Abort_IT+0x3c4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d04f      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a30      	ldr	r2, [pc, #192]	; (8008a04 <HAL_DMA_Abort_IT+0x3c8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d04a      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a2e      	ldr	r2, [pc, #184]	; (8008a08 <HAL_DMA_Abort_IT+0x3cc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d045      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a2d      	ldr	r2, [pc, #180]	; (8008a0c <HAL_DMA_Abort_IT+0x3d0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d040      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a2b      	ldr	r2, [pc, #172]	; (8008a10 <HAL_DMA_Abort_IT+0x3d4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d03b      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a2a      	ldr	r2, [pc, #168]	; (8008a14 <HAL_DMA_Abort_IT+0x3d8>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d036      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a28      	ldr	r2, [pc, #160]	; (8008a18 <HAL_DMA_Abort_IT+0x3dc>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d031      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a27      	ldr	r2, [pc, #156]	; (8008a1c <HAL_DMA_Abort_IT+0x3e0>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d02c      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a25      	ldr	r2, [pc, #148]	; (8008a20 <HAL_DMA_Abort_IT+0x3e4>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d027      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a24      	ldr	r2, [pc, #144]	; (8008a24 <HAL_DMA_Abort_IT+0x3e8>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d022      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4a22      	ldr	r2, [pc, #136]	; (8008a28 <HAL_DMA_Abort_IT+0x3ec>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d01d      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a21      	ldr	r2, [pc, #132]	; (8008a2c <HAL_DMA_Abort_IT+0x3f0>)
 80089a8:	4293      	cmp	r3, r2
 80089aa:	d018      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	4a1f      	ldr	r2, [pc, #124]	; (8008a30 <HAL_DMA_Abort_IT+0x3f4>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a1e      	ldr	r2, [pc, #120]	; (8008a34 <HAL_DMA_Abort_IT+0x3f8>)
 80089bc:	4293      	cmp	r3, r2
 80089be:	d00e      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4a1c      	ldr	r2, [pc, #112]	; (8008a38 <HAL_DMA_Abort_IT+0x3fc>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d009      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	4a1b      	ldr	r2, [pc, #108]	; (8008a3c <HAL_DMA_Abort_IT+0x400>)
 80089d0:	4293      	cmp	r3, r2
 80089d2:	d004      	beq.n	80089de <HAL_DMA_Abort_IT+0x3a2>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a19      	ldr	r2, [pc, #100]	; (8008a40 <HAL_DMA_Abort_IT+0x404>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d132      	bne.n	8008a44 <HAL_DMA_Abort_IT+0x408>
 80089de:	2301      	movs	r3, #1
 80089e0:	e031      	b.n	8008a46 <HAL_DMA_Abort_IT+0x40a>
 80089e2:	bf00      	nop
 80089e4:	40020010 	.word	0x40020010
 80089e8:	40020028 	.word	0x40020028
 80089ec:	40020040 	.word	0x40020040
 80089f0:	40020058 	.word	0x40020058
 80089f4:	40020070 	.word	0x40020070
 80089f8:	40020088 	.word	0x40020088
 80089fc:	400200a0 	.word	0x400200a0
 8008a00:	400200b8 	.word	0x400200b8
 8008a04:	40020410 	.word	0x40020410
 8008a08:	40020428 	.word	0x40020428
 8008a0c:	40020440 	.word	0x40020440
 8008a10:	40020458 	.word	0x40020458
 8008a14:	40020470 	.word	0x40020470
 8008a18:	40020488 	.word	0x40020488
 8008a1c:	400204a0 	.word	0x400204a0
 8008a20:	400204b8 	.word	0x400204b8
 8008a24:	58025408 	.word	0x58025408
 8008a28:	5802541c 	.word	0x5802541c
 8008a2c:	58025430 	.word	0x58025430
 8008a30:	58025444 	.word	0x58025444
 8008a34:	58025458 	.word	0x58025458
 8008a38:	5802546c 	.word	0x5802546c
 8008a3c:	58025480 	.word	0x58025480
 8008a40:	58025494 	.word	0x58025494
 8008a44:	2300      	movs	r3, #0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d028      	beq.n	8008a9c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a4e:	681a      	ldr	r2, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a58:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a5e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a64:	f003 031f 	and.w	r3, r3, #31
 8008a68:	2201      	movs	r2, #1
 8008a6a:	409a      	lsls	r2, r3
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a74:	687a      	ldr	r2, [r7, #4]
 8008a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008a78:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00c      	beq.n	8008a9c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a86:	681a      	ldr	r2, [r3, #0]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a90:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008a9a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d003      	beq.n	8008abc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008abc:	2300      	movs	r3, #0
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop

08008ac8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b08a      	sub	sp, #40	; 0x28
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008ad4:	4b67      	ldr	r3, [pc, #412]	; (8008c74 <HAL_DMA_IRQHandler+0x1ac>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	4a67      	ldr	r2, [pc, #412]	; (8008c78 <HAL_DMA_IRQHandler+0x1b0>)
 8008ada:	fba2 2303 	umull	r2, r3, r2, r3
 8008ade:	0a9b      	lsrs	r3, r3, #10
 8008ae0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aec:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	4a5f      	ldr	r2, [pc, #380]	; (8008c7c <HAL_DMA_IRQHandler+0x1b4>)
 8008b00:	4293      	cmp	r3, r2
 8008b02:	d04a      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a5d      	ldr	r2, [pc, #372]	; (8008c80 <HAL_DMA_IRQHandler+0x1b8>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d045      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4a5c      	ldr	r2, [pc, #368]	; (8008c84 <HAL_DMA_IRQHandler+0x1bc>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d040      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a5a      	ldr	r2, [pc, #360]	; (8008c88 <HAL_DMA_IRQHandler+0x1c0>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d03b      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a59      	ldr	r2, [pc, #356]	; (8008c8c <HAL_DMA_IRQHandler+0x1c4>)
 8008b28:	4293      	cmp	r3, r2
 8008b2a:	d036      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a57      	ldr	r2, [pc, #348]	; (8008c90 <HAL_DMA_IRQHandler+0x1c8>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d031      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a56      	ldr	r2, [pc, #344]	; (8008c94 <HAL_DMA_IRQHandler+0x1cc>)
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d02c      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a54      	ldr	r2, [pc, #336]	; (8008c98 <HAL_DMA_IRQHandler+0x1d0>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d027      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a53      	ldr	r2, [pc, #332]	; (8008c9c <HAL_DMA_IRQHandler+0x1d4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d022      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a51      	ldr	r2, [pc, #324]	; (8008ca0 <HAL_DMA_IRQHandler+0x1d8>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d01d      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a50      	ldr	r2, [pc, #320]	; (8008ca4 <HAL_DMA_IRQHandler+0x1dc>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d018      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	4a4e      	ldr	r2, [pc, #312]	; (8008ca8 <HAL_DMA_IRQHandler+0x1e0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d013      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a4d      	ldr	r2, [pc, #308]	; (8008cac <HAL_DMA_IRQHandler+0x1e4>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d00e      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a4b      	ldr	r2, [pc, #300]	; (8008cb0 <HAL_DMA_IRQHandler+0x1e8>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d009      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	4a4a      	ldr	r2, [pc, #296]	; (8008cb4 <HAL_DMA_IRQHandler+0x1ec>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d004      	beq.n	8008b9a <HAL_DMA_IRQHandler+0xd2>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a48      	ldr	r2, [pc, #288]	; (8008cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d101      	bne.n	8008b9e <HAL_DMA_IRQHandler+0xd6>
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	e000      	b.n	8008ba0 <HAL_DMA_IRQHandler+0xd8>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 842b 	beq.w	80093fc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008baa:	f003 031f 	and.w	r3, r3, #31
 8008bae:	2208      	movs	r2, #8
 8008bb0:	409a      	lsls	r2, r3
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	4013      	ands	r3, r2
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80a2 	beq.w	8008d00 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a2e      	ldr	r2, [pc, #184]	; (8008c7c <HAL_DMA_IRQHandler+0x1b4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d04a      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	4a2d      	ldr	r2, [pc, #180]	; (8008c80 <HAL_DMA_IRQHandler+0x1b8>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d045      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a2b      	ldr	r2, [pc, #172]	; (8008c84 <HAL_DMA_IRQHandler+0x1bc>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d040      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a2a      	ldr	r2, [pc, #168]	; (8008c88 <HAL_DMA_IRQHandler+0x1c0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d03b      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a28      	ldr	r2, [pc, #160]	; (8008c8c <HAL_DMA_IRQHandler+0x1c4>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d036      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a27      	ldr	r2, [pc, #156]	; (8008c90 <HAL_DMA_IRQHandler+0x1c8>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d031      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4a25      	ldr	r2, [pc, #148]	; (8008c94 <HAL_DMA_IRQHandler+0x1cc>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d02c      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a24      	ldr	r2, [pc, #144]	; (8008c98 <HAL_DMA_IRQHandler+0x1d0>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d027      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a22      	ldr	r2, [pc, #136]	; (8008c9c <HAL_DMA_IRQHandler+0x1d4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d022      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a21      	ldr	r2, [pc, #132]	; (8008ca0 <HAL_DMA_IRQHandler+0x1d8>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d01d      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a1f      	ldr	r2, [pc, #124]	; (8008ca4 <HAL_DMA_IRQHandler+0x1dc>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d018      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4a1e      	ldr	r2, [pc, #120]	; (8008ca8 <HAL_DMA_IRQHandler+0x1e0>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d013      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4a1c      	ldr	r2, [pc, #112]	; (8008cac <HAL_DMA_IRQHandler+0x1e4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00e      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <HAL_DMA_IRQHandler+0x1e8>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d009      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a19      	ldr	r2, [pc, #100]	; (8008cb4 <HAL_DMA_IRQHandler+0x1ec>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <HAL_DMA_IRQHandler+0x194>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a18      	ldr	r2, [pc, #96]	; (8008cb8 <HAL_DMA_IRQHandler+0x1f0>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d12f      	bne.n	8008cbc <HAL_DMA_IRQHandler+0x1f4>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	bf14      	ite	ne
 8008c6a:	2301      	movne	r3, #1
 8008c6c:	2300      	moveq	r3, #0
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	e02e      	b.n	8008cd0 <HAL_DMA_IRQHandler+0x208>
 8008c72:	bf00      	nop
 8008c74:	24000004 	.word	0x24000004
 8008c78:	1b4e81b5 	.word	0x1b4e81b5
 8008c7c:	40020010 	.word	0x40020010
 8008c80:	40020028 	.word	0x40020028
 8008c84:	40020040 	.word	0x40020040
 8008c88:	40020058 	.word	0x40020058
 8008c8c:	40020070 	.word	0x40020070
 8008c90:	40020088 	.word	0x40020088
 8008c94:	400200a0 	.word	0x400200a0
 8008c98:	400200b8 	.word	0x400200b8
 8008c9c:	40020410 	.word	0x40020410
 8008ca0:	40020428 	.word	0x40020428
 8008ca4:	40020440 	.word	0x40020440
 8008ca8:	40020458 	.word	0x40020458
 8008cac:	40020470 	.word	0x40020470
 8008cb0:	40020488 	.word	0x40020488
 8008cb4:	400204a0 	.word	0x400204a0
 8008cb8:	400204b8 	.word	0x400204b8
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0308 	and.w	r3, r3, #8
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	bf14      	ite	ne
 8008cca:	2301      	movne	r3, #1
 8008ccc:	2300      	moveq	r3, #0
 8008cce:	b2db      	uxtb	r3, r3
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d015      	beq.n	8008d00 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	681a      	ldr	r2, [r3, #0]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0204 	bic.w	r2, r2, #4
 8008ce2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ce8:	f003 031f 	and.w	r3, r3, #31
 8008cec:	2208      	movs	r2, #8
 8008cee:	409a      	lsls	r2, r3
 8008cf0:	6a3b      	ldr	r3, [r7, #32]
 8008cf2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cf8:	f043 0201 	orr.w	r2, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d04:	f003 031f 	and.w	r3, r3, #31
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d06e      	beq.n	8008df4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a69      	ldr	r2, [pc, #420]	; (8008ec0 <HAL_DMA_IRQHandler+0x3f8>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d04a      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a67      	ldr	r2, [pc, #412]	; (8008ec4 <HAL_DMA_IRQHandler+0x3fc>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d045      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a66      	ldr	r2, [pc, #408]	; (8008ec8 <HAL_DMA_IRQHandler+0x400>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d040      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a64      	ldr	r2, [pc, #400]	; (8008ecc <HAL_DMA_IRQHandler+0x404>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d03b      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4a63      	ldr	r2, [pc, #396]	; (8008ed0 <HAL_DMA_IRQHandler+0x408>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d036      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a61      	ldr	r2, [pc, #388]	; (8008ed4 <HAL_DMA_IRQHandler+0x40c>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d031      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a60      	ldr	r2, [pc, #384]	; (8008ed8 <HAL_DMA_IRQHandler+0x410>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d02c      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a5e      	ldr	r2, [pc, #376]	; (8008edc <HAL_DMA_IRQHandler+0x414>)
 8008d62:	4293      	cmp	r3, r2
 8008d64:	d027      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a5d      	ldr	r2, [pc, #372]	; (8008ee0 <HAL_DMA_IRQHandler+0x418>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d022      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a5b      	ldr	r2, [pc, #364]	; (8008ee4 <HAL_DMA_IRQHandler+0x41c>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d01d      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a5a      	ldr	r2, [pc, #360]	; (8008ee8 <HAL_DMA_IRQHandler+0x420>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d018      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a58      	ldr	r2, [pc, #352]	; (8008eec <HAL_DMA_IRQHandler+0x424>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d013      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a57      	ldr	r2, [pc, #348]	; (8008ef0 <HAL_DMA_IRQHandler+0x428>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d00e      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a55      	ldr	r2, [pc, #340]	; (8008ef4 <HAL_DMA_IRQHandler+0x42c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d009      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	4a54      	ldr	r2, [pc, #336]	; (8008ef8 <HAL_DMA_IRQHandler+0x430>)
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d004      	beq.n	8008db6 <HAL_DMA_IRQHandler+0x2ee>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a52      	ldr	r2, [pc, #328]	; (8008efc <HAL_DMA_IRQHandler+0x434>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d10a      	bne.n	8008dcc <HAL_DMA_IRQHandler+0x304>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	695b      	ldr	r3, [r3, #20]
 8008dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	bf14      	ite	ne
 8008dc4:	2301      	movne	r3, #1
 8008dc6:	2300      	moveq	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	e003      	b.n	8008dd4 <HAL_DMA_IRQHandler+0x30c>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d00d      	beq.n	8008df4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	2201      	movs	r2, #1
 8008de2:	409a      	lsls	r2, r3
 8008de4:	6a3b      	ldr	r3, [r7, #32]
 8008de6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dec:	f043 0202 	orr.w	r2, r3, #2
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df8:	f003 031f 	and.w	r3, r3, #31
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	409a      	lsls	r2, r3
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	4013      	ands	r3, r2
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 808f 	beq.w	8008f28 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a2c      	ldr	r2, [pc, #176]	; (8008ec0 <HAL_DMA_IRQHandler+0x3f8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d04a      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2a      	ldr	r2, [pc, #168]	; (8008ec4 <HAL_DMA_IRQHandler+0x3fc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d045      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a29      	ldr	r2, [pc, #164]	; (8008ec8 <HAL_DMA_IRQHandler+0x400>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d040      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a27      	ldr	r2, [pc, #156]	; (8008ecc <HAL_DMA_IRQHandler+0x404>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d03b      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a26      	ldr	r2, [pc, #152]	; (8008ed0 <HAL_DMA_IRQHandler+0x408>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d036      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a24      	ldr	r2, [pc, #144]	; (8008ed4 <HAL_DMA_IRQHandler+0x40c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d031      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a23      	ldr	r2, [pc, #140]	; (8008ed8 <HAL_DMA_IRQHandler+0x410>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d02c      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a21      	ldr	r2, [pc, #132]	; (8008edc <HAL_DMA_IRQHandler+0x414>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d027      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a20      	ldr	r2, [pc, #128]	; (8008ee0 <HAL_DMA_IRQHandler+0x418>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d022      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a1e      	ldr	r2, [pc, #120]	; (8008ee4 <HAL_DMA_IRQHandler+0x41c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d01d      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a1d      	ldr	r2, [pc, #116]	; (8008ee8 <HAL_DMA_IRQHandler+0x420>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d018      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a1b      	ldr	r2, [pc, #108]	; (8008eec <HAL_DMA_IRQHandler+0x424>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d013      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a1a      	ldr	r2, [pc, #104]	; (8008ef0 <HAL_DMA_IRQHandler+0x428>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d00e      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a18      	ldr	r2, [pc, #96]	; (8008ef4 <HAL_DMA_IRQHandler+0x42c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d009      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a17      	ldr	r2, [pc, #92]	; (8008ef8 <HAL_DMA_IRQHandler+0x430>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d004      	beq.n	8008eaa <HAL_DMA_IRQHandler+0x3e2>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a15      	ldr	r2, [pc, #84]	; (8008efc <HAL_DMA_IRQHandler+0x434>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d12a      	bne.n	8008f00 <HAL_DMA_IRQHandler+0x438>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bf14      	ite	ne
 8008eb8:	2301      	movne	r3, #1
 8008eba:	2300      	moveq	r3, #0
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	e023      	b.n	8008f08 <HAL_DMA_IRQHandler+0x440>
 8008ec0:	40020010 	.word	0x40020010
 8008ec4:	40020028 	.word	0x40020028
 8008ec8:	40020040 	.word	0x40020040
 8008ecc:	40020058 	.word	0x40020058
 8008ed0:	40020070 	.word	0x40020070
 8008ed4:	40020088 	.word	0x40020088
 8008ed8:	400200a0 	.word	0x400200a0
 8008edc:	400200b8 	.word	0x400200b8
 8008ee0:	40020410 	.word	0x40020410
 8008ee4:	40020428 	.word	0x40020428
 8008ee8:	40020440 	.word	0x40020440
 8008eec:	40020458 	.word	0x40020458
 8008ef0:	40020470 	.word	0x40020470
 8008ef4:	40020488 	.word	0x40020488
 8008ef8:	400204a0 	.word	0x400204a0
 8008efc:	400204b8 	.word	0x400204b8
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	2300      	movs	r3, #0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00d      	beq.n	8008f28 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f10:	f003 031f 	and.w	r3, r3, #31
 8008f14:	2204      	movs	r2, #4
 8008f16:	409a      	lsls	r2, r3
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f20:	f043 0204 	orr.w	r2, r3, #4
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f2c:	f003 031f 	and.w	r3, r3, #31
 8008f30:	2210      	movs	r2, #16
 8008f32:	409a      	lsls	r2, r3
 8008f34:	69bb      	ldr	r3, [r7, #24]
 8008f36:	4013      	ands	r3, r2
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 80a6 	beq.w	800908a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a85      	ldr	r2, [pc, #532]	; (8009158 <HAL_DMA_IRQHandler+0x690>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d04a      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a83      	ldr	r2, [pc, #524]	; (800915c <HAL_DMA_IRQHandler+0x694>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d045      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a82      	ldr	r2, [pc, #520]	; (8009160 <HAL_DMA_IRQHandler+0x698>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d040      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a80      	ldr	r2, [pc, #512]	; (8009164 <HAL_DMA_IRQHandler+0x69c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d03b      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a7f      	ldr	r2, [pc, #508]	; (8009168 <HAL_DMA_IRQHandler+0x6a0>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d036      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a7d      	ldr	r2, [pc, #500]	; (800916c <HAL_DMA_IRQHandler+0x6a4>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d031      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a7c      	ldr	r2, [pc, #496]	; (8009170 <HAL_DMA_IRQHandler+0x6a8>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d02c      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a7a      	ldr	r2, [pc, #488]	; (8009174 <HAL_DMA_IRQHandler+0x6ac>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d027      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a79      	ldr	r2, [pc, #484]	; (8009178 <HAL_DMA_IRQHandler+0x6b0>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d022      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a77      	ldr	r2, [pc, #476]	; (800917c <HAL_DMA_IRQHandler+0x6b4>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d01d      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	4a76      	ldr	r2, [pc, #472]	; (8009180 <HAL_DMA_IRQHandler+0x6b8>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d018      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a74      	ldr	r2, [pc, #464]	; (8009184 <HAL_DMA_IRQHandler+0x6bc>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d013      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4a73      	ldr	r2, [pc, #460]	; (8009188 <HAL_DMA_IRQHandler+0x6c0>)
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	d00e      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	4a71      	ldr	r2, [pc, #452]	; (800918c <HAL_DMA_IRQHandler+0x6c4>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d009      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a70      	ldr	r2, [pc, #448]	; (8009190 <HAL_DMA_IRQHandler+0x6c8>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d004      	beq.n	8008fde <HAL_DMA_IRQHandler+0x516>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a6e      	ldr	r2, [pc, #440]	; (8009194 <HAL_DMA_IRQHandler+0x6cc>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d10a      	bne.n	8008ff4 <HAL_DMA_IRQHandler+0x52c>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f003 0308 	and.w	r3, r3, #8
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bf14      	ite	ne
 8008fec:	2301      	movne	r3, #1
 8008fee:	2300      	moveq	r3, #0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	e009      	b.n	8009008 <HAL_DMA_IRQHandler+0x540>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f003 0304 	and.w	r3, r3, #4
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bf14      	ite	ne
 8009002:	2301      	movne	r3, #1
 8009004:	2300      	moveq	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d03e      	beq.n	800908a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009010:	f003 031f 	and.w	r3, r3, #31
 8009014:	2210      	movs	r2, #16
 8009016:	409a      	lsls	r2, r3
 8009018:	6a3b      	ldr	r3, [r7, #32]
 800901a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009026:	2b00      	cmp	r3, #0
 8009028:	d018      	beq.n	800905c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d108      	bne.n	800904a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903c:	2b00      	cmp	r3, #0
 800903e:	d024      	beq.n	800908a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	4798      	blx	r3
 8009048:	e01f      	b.n	800908a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01b      	beq.n	800908a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	4798      	blx	r3
 800905a:	e016      	b.n	800908a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009066:	2b00      	cmp	r3, #0
 8009068:	d107      	bne.n	800907a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	681a      	ldr	r2, [r3, #0]
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f022 0208 	bic.w	r2, r2, #8
 8009078:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800907e:	2b00      	cmp	r3, #0
 8009080:	d003      	beq.n	800908a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800908e:	f003 031f 	and.w	r3, r3, #31
 8009092:	2220      	movs	r2, #32
 8009094:	409a      	lsls	r2, r3
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	4013      	ands	r3, r2
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8110 	beq.w	80092c0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a2c      	ldr	r2, [pc, #176]	; (8009158 <HAL_DMA_IRQHandler+0x690>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d04a      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a2b      	ldr	r2, [pc, #172]	; (800915c <HAL_DMA_IRQHandler+0x694>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d045      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4a29      	ldr	r2, [pc, #164]	; (8009160 <HAL_DMA_IRQHandler+0x698>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d040      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a28      	ldr	r2, [pc, #160]	; (8009164 <HAL_DMA_IRQHandler+0x69c>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d03b      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	4a26      	ldr	r2, [pc, #152]	; (8009168 <HAL_DMA_IRQHandler+0x6a0>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d036      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	4a25      	ldr	r2, [pc, #148]	; (800916c <HAL_DMA_IRQHandler+0x6a4>)
 80090d8:	4293      	cmp	r3, r2
 80090da:	d031      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a23      	ldr	r2, [pc, #140]	; (8009170 <HAL_DMA_IRQHandler+0x6a8>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d02c      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a22      	ldr	r2, [pc, #136]	; (8009174 <HAL_DMA_IRQHandler+0x6ac>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d027      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a20      	ldr	r2, [pc, #128]	; (8009178 <HAL_DMA_IRQHandler+0x6b0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d022      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a1f      	ldr	r2, [pc, #124]	; (800917c <HAL_DMA_IRQHandler+0x6b4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d01d      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <HAL_DMA_IRQHandler+0x6b8>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d018      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1c      	ldr	r2, [pc, #112]	; (8009184 <HAL_DMA_IRQHandler+0x6bc>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d013      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a1a      	ldr	r2, [pc, #104]	; (8009188 <HAL_DMA_IRQHandler+0x6c0>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d00e      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a19      	ldr	r2, [pc, #100]	; (800918c <HAL_DMA_IRQHandler+0x6c4>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d009      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a17      	ldr	r2, [pc, #92]	; (8009190 <HAL_DMA_IRQHandler+0x6c8>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d004      	beq.n	8009140 <HAL_DMA_IRQHandler+0x678>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a16      	ldr	r2, [pc, #88]	; (8009194 <HAL_DMA_IRQHandler+0x6cc>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d12b      	bne.n	8009198 <HAL_DMA_IRQHandler+0x6d0>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 0310 	and.w	r3, r3, #16
 800914a:	2b00      	cmp	r3, #0
 800914c:	bf14      	ite	ne
 800914e:	2301      	movne	r3, #1
 8009150:	2300      	moveq	r3, #0
 8009152:	b2db      	uxtb	r3, r3
 8009154:	e02a      	b.n	80091ac <HAL_DMA_IRQHandler+0x6e4>
 8009156:	bf00      	nop
 8009158:	40020010 	.word	0x40020010
 800915c:	40020028 	.word	0x40020028
 8009160:	40020040 	.word	0x40020040
 8009164:	40020058 	.word	0x40020058
 8009168:	40020070 	.word	0x40020070
 800916c:	40020088 	.word	0x40020088
 8009170:	400200a0 	.word	0x400200a0
 8009174:	400200b8 	.word	0x400200b8
 8009178:	40020410 	.word	0x40020410
 800917c:	40020428 	.word	0x40020428
 8009180:	40020440 	.word	0x40020440
 8009184:	40020458 	.word	0x40020458
 8009188:	40020470 	.word	0x40020470
 800918c:	40020488 	.word	0x40020488
 8009190:	400204a0 	.word	0x400204a0
 8009194:	400204b8 	.word	0x400204b8
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	bf14      	ite	ne
 80091a6:	2301      	movne	r3, #1
 80091a8:	2300      	moveq	r3, #0
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f000 8087 	beq.w	80092c0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091b6:	f003 031f 	and.w	r3, r3, #31
 80091ba:	2220      	movs	r2, #32
 80091bc:	409a      	lsls	r2, r3
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d139      	bne.n	8009242 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 0216 	bic.w	r2, r2, #22
 80091dc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	695a      	ldr	r2, [r3, #20]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091ec:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d103      	bne.n	80091fe <HAL_DMA_IRQHandler+0x736>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d007      	beq.n	800920e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 0208 	bic.w	r2, r2, #8
 800920c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009212:	f003 031f 	and.w	r3, r3, #31
 8009216:	223f      	movs	r2, #63	; 0x3f
 8009218:	409a      	lsls	r2, r3
 800921a:	6a3b      	ldr	r3, [r7, #32]
 800921c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009232:	2b00      	cmp	r3, #0
 8009234:	f000 834a 	beq.w	80098cc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	4798      	blx	r3
          }
          return;
 8009240:	e344      	b.n	80098cc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d018      	beq.n	8009282 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d108      	bne.n	8009270 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009262:	2b00      	cmp	r3, #0
 8009264:	d02c      	beq.n	80092c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	4798      	blx	r3
 800926e:	e027      	b.n	80092c0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009274:	2b00      	cmp	r3, #0
 8009276:	d023      	beq.n	80092c0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	4798      	blx	r3
 8009280:	e01e      	b.n	80092c0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10f      	bne.n	80092b0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f022 0210 	bic.w	r2, r2, #16
 800929e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2201      	movs	r2, #1
 80092a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2200      	movs	r2, #0
 80092ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d003      	beq.n	80092c0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	f000 8306 	beq.w	80098d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	f000 8088 	beq.w	80093e8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2204      	movs	r2, #4
 80092dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	4a7a      	ldr	r2, [pc, #488]	; (80094d0 <HAL_DMA_IRQHandler+0xa08>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d04a      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	4a79      	ldr	r2, [pc, #484]	; (80094d4 <HAL_DMA_IRQHandler+0xa0c>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d045      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a77      	ldr	r2, [pc, #476]	; (80094d8 <HAL_DMA_IRQHandler+0xa10>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d040      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	4a76      	ldr	r2, [pc, #472]	; (80094dc <HAL_DMA_IRQHandler+0xa14>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d03b      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a74      	ldr	r2, [pc, #464]	; (80094e0 <HAL_DMA_IRQHandler+0xa18>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d036      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a73      	ldr	r2, [pc, #460]	; (80094e4 <HAL_DMA_IRQHandler+0xa1c>)
 8009318:	4293      	cmp	r3, r2
 800931a:	d031      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4a71      	ldr	r2, [pc, #452]	; (80094e8 <HAL_DMA_IRQHandler+0xa20>)
 8009322:	4293      	cmp	r3, r2
 8009324:	d02c      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a70      	ldr	r2, [pc, #448]	; (80094ec <HAL_DMA_IRQHandler+0xa24>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d027      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	4a6e      	ldr	r2, [pc, #440]	; (80094f0 <HAL_DMA_IRQHandler+0xa28>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d022      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4a6d      	ldr	r2, [pc, #436]	; (80094f4 <HAL_DMA_IRQHandler+0xa2c>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d01d      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	4a6b      	ldr	r2, [pc, #428]	; (80094f8 <HAL_DMA_IRQHandler+0xa30>)
 800934a:	4293      	cmp	r3, r2
 800934c:	d018      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a6a      	ldr	r2, [pc, #424]	; (80094fc <HAL_DMA_IRQHandler+0xa34>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d013      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a68      	ldr	r2, [pc, #416]	; (8009500 <HAL_DMA_IRQHandler+0xa38>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d00e      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a67      	ldr	r2, [pc, #412]	; (8009504 <HAL_DMA_IRQHandler+0xa3c>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d009      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a65      	ldr	r2, [pc, #404]	; (8009508 <HAL_DMA_IRQHandler+0xa40>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d004      	beq.n	8009380 <HAL_DMA_IRQHandler+0x8b8>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a64      	ldr	r2, [pc, #400]	; (800950c <HAL_DMA_IRQHandler+0xa44>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d108      	bne.n	8009392 <HAL_DMA_IRQHandler+0x8ca>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f022 0201 	bic.w	r2, r2, #1
 800938e:	601a      	str	r2, [r3, #0]
 8009390:	e007      	b.n	80093a2 <HAL_DMA_IRQHandler+0x8da>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f022 0201 	bic.w	r2, r2, #1
 80093a0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3301      	adds	r3, #1
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d307      	bcc.n	80093be <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1f2      	bne.n	80093a2 <HAL_DMA_IRQHandler+0x8da>
 80093bc:	e000      	b.n	80093c0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80093be:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d004      	beq.n	80093d8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2203      	movs	r2, #3
 80093d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80093d6:	e003      	b.n	80093e0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	f000 8272 	beq.w	80098d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	4798      	blx	r3
 80093fa:	e26c      	b.n	80098d6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	4a43      	ldr	r2, [pc, #268]	; (8009510 <HAL_DMA_IRQHandler+0xa48>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d022      	beq.n	800944c <HAL_DMA_IRQHandler+0x984>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a42      	ldr	r2, [pc, #264]	; (8009514 <HAL_DMA_IRQHandler+0xa4c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d01d      	beq.n	800944c <HAL_DMA_IRQHandler+0x984>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a40      	ldr	r2, [pc, #256]	; (8009518 <HAL_DMA_IRQHandler+0xa50>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d018      	beq.n	800944c <HAL_DMA_IRQHandler+0x984>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a3f      	ldr	r2, [pc, #252]	; (800951c <HAL_DMA_IRQHandler+0xa54>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d013      	beq.n	800944c <HAL_DMA_IRQHandler+0x984>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a3d      	ldr	r2, [pc, #244]	; (8009520 <HAL_DMA_IRQHandler+0xa58>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d00e      	beq.n	800944c <HAL_DMA_IRQHandler+0x984>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a3c      	ldr	r2, [pc, #240]	; (8009524 <HAL_DMA_IRQHandler+0xa5c>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d009      	beq.n	800944c <HAL_DMA_IRQHandler+0x984>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a3a      	ldr	r2, [pc, #232]	; (8009528 <HAL_DMA_IRQHandler+0xa60>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d004      	beq.n	800944c <HAL_DMA_IRQHandler+0x984>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a39      	ldr	r2, [pc, #228]	; (800952c <HAL_DMA_IRQHandler+0xa64>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d101      	bne.n	8009450 <HAL_DMA_IRQHandler+0x988>
 800944c:	2301      	movs	r3, #1
 800944e:	e000      	b.n	8009452 <HAL_DMA_IRQHandler+0x98a>
 8009450:	2300      	movs	r3, #0
 8009452:	2b00      	cmp	r3, #0
 8009454:	f000 823f 	beq.w	80098d6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009464:	f003 031f 	and.w	r3, r3, #31
 8009468:	2204      	movs	r2, #4
 800946a:	409a      	lsls	r2, r3
 800946c:	697b      	ldr	r3, [r7, #20]
 800946e:	4013      	ands	r3, r2
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 80cd 	beq.w	8009610 <HAL_DMA_IRQHandler+0xb48>
 8009476:	693b      	ldr	r3, [r7, #16]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80c7 	beq.w	8009610 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009486:	f003 031f 	and.w	r3, r3, #31
 800948a:	2204      	movs	r2, #4
 800948c:	409a      	lsls	r2, r3
 800948e:	69fb      	ldr	r3, [r7, #28]
 8009490:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009498:	2b00      	cmp	r3, #0
 800949a:	d049      	beq.n	8009530 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f000 8210 	beq.w	80098d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094b8:	e20a      	b.n	80098d0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	f000 8206 	beq.w	80098d0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80094cc:	e200      	b.n	80098d0 <HAL_DMA_IRQHandler+0xe08>
 80094ce:	bf00      	nop
 80094d0:	40020010 	.word	0x40020010
 80094d4:	40020028 	.word	0x40020028
 80094d8:	40020040 	.word	0x40020040
 80094dc:	40020058 	.word	0x40020058
 80094e0:	40020070 	.word	0x40020070
 80094e4:	40020088 	.word	0x40020088
 80094e8:	400200a0 	.word	0x400200a0
 80094ec:	400200b8 	.word	0x400200b8
 80094f0:	40020410 	.word	0x40020410
 80094f4:	40020428 	.word	0x40020428
 80094f8:	40020440 	.word	0x40020440
 80094fc:	40020458 	.word	0x40020458
 8009500:	40020470 	.word	0x40020470
 8009504:	40020488 	.word	0x40020488
 8009508:	400204a0 	.word	0x400204a0
 800950c:	400204b8 	.word	0x400204b8
 8009510:	58025408 	.word	0x58025408
 8009514:	5802541c 	.word	0x5802541c
 8009518:	58025430 	.word	0x58025430
 800951c:	58025444 	.word	0x58025444
 8009520:	58025458 	.word	0x58025458
 8009524:	5802546c 	.word	0x5802546c
 8009528:	58025480 	.word	0x58025480
 800952c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	f003 0320 	and.w	r3, r3, #32
 8009536:	2b00      	cmp	r3, #0
 8009538:	d160      	bne.n	80095fc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a7f      	ldr	r2, [pc, #508]	; (800973c <HAL_DMA_IRQHandler+0xc74>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d04a      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a7d      	ldr	r2, [pc, #500]	; (8009740 <HAL_DMA_IRQHandler+0xc78>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d045      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a7c      	ldr	r2, [pc, #496]	; (8009744 <HAL_DMA_IRQHandler+0xc7c>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d040      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4a7a      	ldr	r2, [pc, #488]	; (8009748 <HAL_DMA_IRQHandler+0xc80>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d03b      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a79      	ldr	r2, [pc, #484]	; (800974c <HAL_DMA_IRQHandler+0xc84>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d036      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	4a77      	ldr	r2, [pc, #476]	; (8009750 <HAL_DMA_IRQHandler+0xc88>)
 8009572:	4293      	cmp	r3, r2
 8009574:	d031      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a76      	ldr	r2, [pc, #472]	; (8009754 <HAL_DMA_IRQHandler+0xc8c>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d02c      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a74      	ldr	r2, [pc, #464]	; (8009758 <HAL_DMA_IRQHandler+0xc90>)
 8009586:	4293      	cmp	r3, r2
 8009588:	d027      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4a73      	ldr	r2, [pc, #460]	; (800975c <HAL_DMA_IRQHandler+0xc94>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d022      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a71      	ldr	r2, [pc, #452]	; (8009760 <HAL_DMA_IRQHandler+0xc98>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d01d      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a70      	ldr	r2, [pc, #448]	; (8009764 <HAL_DMA_IRQHandler+0xc9c>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d018      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a6e      	ldr	r2, [pc, #440]	; (8009768 <HAL_DMA_IRQHandler+0xca0>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d013      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a6d      	ldr	r2, [pc, #436]	; (800976c <HAL_DMA_IRQHandler+0xca4>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d00e      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a6b      	ldr	r2, [pc, #428]	; (8009770 <HAL_DMA_IRQHandler+0xca8>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d009      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a6a      	ldr	r2, [pc, #424]	; (8009774 <HAL_DMA_IRQHandler+0xcac>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d004      	beq.n	80095da <HAL_DMA_IRQHandler+0xb12>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a68      	ldr	r2, [pc, #416]	; (8009778 <HAL_DMA_IRQHandler+0xcb0>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d108      	bne.n	80095ec <HAL_DMA_IRQHandler+0xb24>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0208 	bic.w	r2, r2, #8
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	e007      	b.n	80095fc <HAL_DMA_IRQHandler+0xb34>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f022 0204 	bic.w	r2, r2, #4
 80095fa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009600:	2b00      	cmp	r3, #0
 8009602:	f000 8165 	beq.w	80098d0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800960e:	e15f      	b.n	80098d0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009614:	f003 031f 	and.w	r3, r3, #31
 8009618:	2202      	movs	r2, #2
 800961a:	409a      	lsls	r2, r3
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	4013      	ands	r3, r2
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 80c5 	beq.w	80097b0 <HAL_DMA_IRQHandler+0xce8>
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	f003 0302 	and.w	r3, r3, #2
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80bf 	beq.w	80097b0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009636:	f003 031f 	and.w	r3, r3, #31
 800963a:	2202      	movs	r2, #2
 800963c:	409a      	lsls	r2, r3
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d018      	beq.n	800967e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d109      	bne.n	800966a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800965a:	2b00      	cmp	r3, #0
 800965c:	f000 813a 	beq.w	80098d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009668:	e134      	b.n	80098d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 8130 	beq.w	80098d4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800967c:	e12a      	b.n	80098d4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f003 0320 	and.w	r3, r3, #32
 8009684:	2b00      	cmp	r3, #0
 8009686:	f040 8089 	bne.w	800979c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a2b      	ldr	r2, [pc, #172]	; (800973c <HAL_DMA_IRQHandler+0xc74>)
 8009690:	4293      	cmp	r3, r2
 8009692:	d04a      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a29      	ldr	r2, [pc, #164]	; (8009740 <HAL_DMA_IRQHandler+0xc78>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d045      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a28      	ldr	r2, [pc, #160]	; (8009744 <HAL_DMA_IRQHandler+0xc7c>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d040      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	4a26      	ldr	r2, [pc, #152]	; (8009748 <HAL_DMA_IRQHandler+0xc80>)
 80096ae:	4293      	cmp	r3, r2
 80096b0:	d03b      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4a25      	ldr	r2, [pc, #148]	; (800974c <HAL_DMA_IRQHandler+0xc84>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d036      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4a23      	ldr	r2, [pc, #140]	; (8009750 <HAL_DMA_IRQHandler+0xc88>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d031      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	4a22      	ldr	r2, [pc, #136]	; (8009754 <HAL_DMA_IRQHandler+0xc8c>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d02c      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a20      	ldr	r2, [pc, #128]	; (8009758 <HAL_DMA_IRQHandler+0xc90>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d027      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a1f      	ldr	r2, [pc, #124]	; (800975c <HAL_DMA_IRQHandler+0xc94>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d022      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	4a1d      	ldr	r2, [pc, #116]	; (8009760 <HAL_DMA_IRQHandler+0xc98>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d01d      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	4a1c      	ldr	r2, [pc, #112]	; (8009764 <HAL_DMA_IRQHandler+0xc9c>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d018      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4a1a      	ldr	r2, [pc, #104]	; (8009768 <HAL_DMA_IRQHandler+0xca0>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d013      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	4a19      	ldr	r2, [pc, #100]	; (800976c <HAL_DMA_IRQHandler+0xca4>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00e      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	4a17      	ldr	r2, [pc, #92]	; (8009770 <HAL_DMA_IRQHandler+0xca8>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d009      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a16      	ldr	r2, [pc, #88]	; (8009774 <HAL_DMA_IRQHandler+0xcac>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d004      	beq.n	800972a <HAL_DMA_IRQHandler+0xc62>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a14      	ldr	r2, [pc, #80]	; (8009778 <HAL_DMA_IRQHandler+0xcb0>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d128      	bne.n	800977c <HAL_DMA_IRQHandler+0xcb4>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	681a      	ldr	r2, [r3, #0]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f022 0214 	bic.w	r2, r2, #20
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	e027      	b.n	800978c <HAL_DMA_IRQHandler+0xcc4>
 800973c:	40020010 	.word	0x40020010
 8009740:	40020028 	.word	0x40020028
 8009744:	40020040 	.word	0x40020040
 8009748:	40020058 	.word	0x40020058
 800974c:	40020070 	.word	0x40020070
 8009750:	40020088 	.word	0x40020088
 8009754:	400200a0 	.word	0x400200a0
 8009758:	400200b8 	.word	0x400200b8
 800975c:	40020410 	.word	0x40020410
 8009760:	40020428 	.word	0x40020428
 8009764:	40020440 	.word	0x40020440
 8009768:	40020458 	.word	0x40020458
 800976c:	40020470 	.word	0x40020470
 8009770:	40020488 	.word	0x40020488
 8009774:	400204a0 	.word	0x400204a0
 8009778:	400204b8 	.word	0x400204b8
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	681a      	ldr	r2, [r3, #0]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 020a 	bic.w	r2, r2, #10
 800978a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	f000 8097 	beq.w	80098d4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097ae:	e091      	b.n	80098d4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b4:	f003 031f 	and.w	r3, r3, #31
 80097b8:	2208      	movs	r2, #8
 80097ba:	409a      	lsls	r2, r3
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	4013      	ands	r3, r2
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	f000 8088 	beq.w	80098d6 <HAL_DMA_IRQHandler+0xe0e>
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	f003 0308 	and.w	r3, r3, #8
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 8082 	beq.w	80098d6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a41      	ldr	r2, [pc, #260]	; (80098dc <HAL_DMA_IRQHandler+0xe14>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d04a      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a3f      	ldr	r2, [pc, #252]	; (80098e0 <HAL_DMA_IRQHandler+0xe18>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d045      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a3e      	ldr	r2, [pc, #248]	; (80098e4 <HAL_DMA_IRQHandler+0xe1c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d040      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a3c      	ldr	r2, [pc, #240]	; (80098e8 <HAL_DMA_IRQHandler+0xe20>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d03b      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a3b      	ldr	r2, [pc, #236]	; (80098ec <HAL_DMA_IRQHandler+0xe24>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d036      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a39      	ldr	r2, [pc, #228]	; (80098f0 <HAL_DMA_IRQHandler+0xe28>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d031      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a38      	ldr	r2, [pc, #224]	; (80098f4 <HAL_DMA_IRQHandler+0xe2c>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d02c      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a36      	ldr	r2, [pc, #216]	; (80098f8 <HAL_DMA_IRQHandler+0xe30>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d027      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4a35      	ldr	r2, [pc, #212]	; (80098fc <HAL_DMA_IRQHandler+0xe34>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d022      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a33      	ldr	r2, [pc, #204]	; (8009900 <HAL_DMA_IRQHandler+0xe38>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d01d      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	4a32      	ldr	r2, [pc, #200]	; (8009904 <HAL_DMA_IRQHandler+0xe3c>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d018      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a30      	ldr	r2, [pc, #192]	; (8009908 <HAL_DMA_IRQHandler+0xe40>)
 8009846:	4293      	cmp	r3, r2
 8009848:	d013      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a2f      	ldr	r2, [pc, #188]	; (800990c <HAL_DMA_IRQHandler+0xe44>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d00e      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a2d      	ldr	r2, [pc, #180]	; (8009910 <HAL_DMA_IRQHandler+0xe48>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d009      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a2c      	ldr	r2, [pc, #176]	; (8009914 <HAL_DMA_IRQHandler+0xe4c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d004      	beq.n	8009872 <HAL_DMA_IRQHandler+0xdaa>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a2a      	ldr	r2, [pc, #168]	; (8009918 <HAL_DMA_IRQHandler+0xe50>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d108      	bne.n	8009884 <HAL_DMA_IRQHandler+0xdbc>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	f022 021c 	bic.w	r2, r2, #28
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	e007      	b.n	8009894 <HAL_DMA_IRQHandler+0xdcc>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	681a      	ldr	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f022 020e 	bic.w	r2, r2, #14
 8009892:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009898:	f003 031f 	and.w	r3, r3, #31
 800989c:	2201      	movs	r2, #1
 800989e:	409a      	lsls	r2, r3
 80098a0:	69fb      	ldr	r3, [r7, #28]
 80098a2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2201      	movs	r2, #1
 80098a8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2200      	movs	r2, #0
 80098b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d009      	beq.n	80098d6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	4798      	blx	r3
 80098ca:	e004      	b.n	80098d6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80098cc:	bf00      	nop
 80098ce:	e002      	b.n	80098d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098d0:	bf00      	nop
 80098d2:	e000      	b.n	80098d6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098d4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80098d6:	3728      	adds	r7, #40	; 0x28
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40020010 	.word	0x40020010
 80098e0:	40020028 	.word	0x40020028
 80098e4:	40020040 	.word	0x40020040
 80098e8:	40020058 	.word	0x40020058
 80098ec:	40020070 	.word	0x40020070
 80098f0:	40020088 	.word	0x40020088
 80098f4:	400200a0 	.word	0x400200a0
 80098f8:	400200b8 	.word	0x400200b8
 80098fc:	40020410 	.word	0x40020410
 8009900:	40020428 	.word	0x40020428
 8009904:	40020440 	.word	0x40020440
 8009908:	40020458 	.word	0x40020458
 800990c:	40020470 	.word	0x40020470
 8009910:	40020488 	.word	0x40020488
 8009914:	400204a0 	.word	0x400204a0
 8009918:	400204b8 	.word	0x400204b8

0800991c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800991c:	b480      	push	{r7}
 800991e:	b085      	sub	sp, #20
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a42      	ldr	r2, [pc, #264]	; (8009a34 <DMA_CalcBaseAndBitshift+0x118>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d04a      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a41      	ldr	r2, [pc, #260]	; (8009a38 <DMA_CalcBaseAndBitshift+0x11c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d045      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a3f      	ldr	r2, [pc, #252]	; (8009a3c <DMA_CalcBaseAndBitshift+0x120>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d040      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a3e      	ldr	r2, [pc, #248]	; (8009a40 <DMA_CalcBaseAndBitshift+0x124>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d03b      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a3c      	ldr	r2, [pc, #240]	; (8009a44 <DMA_CalcBaseAndBitshift+0x128>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d036      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a3b      	ldr	r2, [pc, #236]	; (8009a48 <DMA_CalcBaseAndBitshift+0x12c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d031      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a39      	ldr	r2, [pc, #228]	; (8009a4c <DMA_CalcBaseAndBitshift+0x130>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d02c      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a38      	ldr	r2, [pc, #224]	; (8009a50 <DMA_CalcBaseAndBitshift+0x134>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d027      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a36      	ldr	r2, [pc, #216]	; (8009a54 <DMA_CalcBaseAndBitshift+0x138>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d022      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a35      	ldr	r2, [pc, #212]	; (8009a58 <DMA_CalcBaseAndBitshift+0x13c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d01d      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a33      	ldr	r2, [pc, #204]	; (8009a5c <DMA_CalcBaseAndBitshift+0x140>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d018      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a32      	ldr	r2, [pc, #200]	; (8009a60 <DMA_CalcBaseAndBitshift+0x144>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d013      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a30      	ldr	r2, [pc, #192]	; (8009a64 <DMA_CalcBaseAndBitshift+0x148>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d00e      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a2f      	ldr	r2, [pc, #188]	; (8009a68 <DMA_CalcBaseAndBitshift+0x14c>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d009      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a2d      	ldr	r2, [pc, #180]	; (8009a6c <DMA_CalcBaseAndBitshift+0x150>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d004      	beq.n	80099c4 <DMA_CalcBaseAndBitshift+0xa8>
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a2c      	ldr	r2, [pc, #176]	; (8009a70 <DMA_CalcBaseAndBitshift+0x154>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d101      	bne.n	80099c8 <DMA_CalcBaseAndBitshift+0xac>
 80099c4:	2301      	movs	r3, #1
 80099c6:	e000      	b.n	80099ca <DMA_CalcBaseAndBitshift+0xae>
 80099c8:	2300      	movs	r3, #0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d024      	beq.n	8009a18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	3b10      	subs	r3, #16
 80099d6:	4a27      	ldr	r2, [pc, #156]	; (8009a74 <DMA_CalcBaseAndBitshift+0x158>)
 80099d8:	fba2 2303 	umull	r2, r3, r2, r3
 80099dc:	091b      	lsrs	r3, r3, #4
 80099de:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	4a24      	ldr	r2, [pc, #144]	; (8009a78 <DMA_CalcBaseAndBitshift+0x15c>)
 80099e8:	5cd3      	ldrb	r3, [r2, r3]
 80099ea:	461a      	mov	r2, r3
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2b03      	cmp	r3, #3
 80099f4:	d908      	bls.n	8009a08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	461a      	mov	r2, r3
 80099fc:	4b1f      	ldr	r3, [pc, #124]	; (8009a7c <DMA_CalcBaseAndBitshift+0x160>)
 80099fe:	4013      	ands	r3, r2
 8009a00:	1d1a      	adds	r2, r3, #4
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	659a      	str	r2, [r3, #88]	; 0x58
 8009a06:	e00d      	b.n	8009a24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	4b1b      	ldr	r3, [pc, #108]	; (8009a7c <DMA_CalcBaseAndBitshift+0x160>)
 8009a10:	4013      	ands	r3, r2
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	6593      	str	r3, [r2, #88]	; 0x58
 8009a16:	e005      	b.n	8009a24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	3714      	adds	r7, #20
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	40020010 	.word	0x40020010
 8009a38:	40020028 	.word	0x40020028
 8009a3c:	40020040 	.word	0x40020040
 8009a40:	40020058 	.word	0x40020058
 8009a44:	40020070 	.word	0x40020070
 8009a48:	40020088 	.word	0x40020088
 8009a4c:	400200a0 	.word	0x400200a0
 8009a50:	400200b8 	.word	0x400200b8
 8009a54:	40020410 	.word	0x40020410
 8009a58:	40020428 	.word	0x40020428
 8009a5c:	40020440 	.word	0x40020440
 8009a60:	40020458 	.word	0x40020458
 8009a64:	40020470 	.word	0x40020470
 8009a68:	40020488 	.word	0x40020488
 8009a6c:	400204a0 	.word	0x400204a0
 8009a70:	400204b8 	.word	0x400204b8
 8009a74:	aaaaaaab 	.word	0xaaaaaaab
 8009a78:	08012568 	.word	0x08012568
 8009a7c:	fffffc00 	.word	0xfffffc00

08009a80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b085      	sub	sp, #20
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	699b      	ldr	r3, [r3, #24]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d120      	bne.n	8009ad6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a98:	2b03      	cmp	r3, #3
 8009a9a:	d858      	bhi.n	8009b4e <DMA_CheckFifoParam+0xce>
 8009a9c:	a201      	add	r2, pc, #4	; (adr r2, 8009aa4 <DMA_CheckFifoParam+0x24>)
 8009a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aa2:	bf00      	nop
 8009aa4:	08009ab5 	.word	0x08009ab5
 8009aa8:	08009ac7 	.word	0x08009ac7
 8009aac:	08009ab5 	.word	0x08009ab5
 8009ab0:	08009b4f 	.word	0x08009b4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d048      	beq.n	8009b52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ac4:	e045      	b.n	8009b52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009ace:	d142      	bne.n	8009b56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009ad4:	e03f      	b.n	8009b56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ade:	d123      	bne.n	8009b28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae4:	2b03      	cmp	r3, #3
 8009ae6:	d838      	bhi.n	8009b5a <DMA_CheckFifoParam+0xda>
 8009ae8:	a201      	add	r2, pc, #4	; (adr r2, 8009af0 <DMA_CheckFifoParam+0x70>)
 8009aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aee:	bf00      	nop
 8009af0:	08009b01 	.word	0x08009b01
 8009af4:	08009b07 	.word	0x08009b07
 8009af8:	08009b01 	.word	0x08009b01
 8009afc:	08009b19 	.word	0x08009b19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	73fb      	strb	r3, [r7, #15]
        break;
 8009b04:	e030      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d025      	beq.n	8009b5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b16:	e022      	b.n	8009b5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b1c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009b20:	d11f      	bne.n	8009b62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009b22:	2301      	movs	r3, #1
 8009b24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009b26:	e01c      	b.n	8009b62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d902      	bls.n	8009b36 <DMA_CheckFifoParam+0xb6>
 8009b30:	2b03      	cmp	r3, #3
 8009b32:	d003      	beq.n	8009b3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009b34:	e018      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	73fb      	strb	r3, [r7, #15]
        break;
 8009b3a:	e015      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00e      	beq.n	8009b66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4c:	e00b      	b.n	8009b66 <DMA_CheckFifoParam+0xe6>
        break;
 8009b4e:	bf00      	nop
 8009b50:	e00a      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b52:	bf00      	nop
 8009b54:	e008      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b56:	bf00      	nop
 8009b58:	e006      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b5a:	bf00      	nop
 8009b5c:	e004      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b5e:	bf00      	nop
 8009b60:	e002      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
        break;
 8009b62:	bf00      	nop
 8009b64:	e000      	b.n	8009b68 <DMA_CheckFifoParam+0xe8>
    break;
 8009b66:	bf00      	nop
    }
  }

  return status;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3714      	adds	r7, #20
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop

08009b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a38      	ldr	r2, [pc, #224]	; (8009c6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d022      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a36      	ldr	r2, [pc, #216]	; (8009c70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d01d      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a35      	ldr	r2, [pc, #212]	; (8009c74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d018      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a33      	ldr	r2, [pc, #204]	; (8009c78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d013      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a32      	ldr	r2, [pc, #200]	; (8009c7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d00e      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a30      	ldr	r2, [pc, #192]	; (8009c80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d009      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a2f      	ldr	r2, [pc, #188]	; (8009c84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d004      	beq.n	8009bd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a2d      	ldr	r2, [pc, #180]	; (8009c88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d101      	bne.n	8009bda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e000      	b.n	8009bdc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01a      	beq.n	8009c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	3b08      	subs	r3, #8
 8009be8:	4a28      	ldr	r2, [pc, #160]	; (8009c8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009bea:	fba2 2303 	umull	r2, r3, r2, r3
 8009bee:	091b      	lsrs	r3, r3, #4
 8009bf0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	4b26      	ldr	r3, [pc, #152]	; (8009c90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009bf6:	4413      	add	r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a24      	ldr	r2, [pc, #144]	; (8009c94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009c04:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f003 031f 	and.w	r3, r3, #31
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	409a      	lsls	r2, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009c14:	e024      	b.n	8009c60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	3b10      	subs	r3, #16
 8009c1e:	4a1e      	ldr	r2, [pc, #120]	; (8009c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009c20:	fba2 2303 	umull	r2, r3, r2, r3
 8009c24:	091b      	lsrs	r3, r3, #4
 8009c26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	4a1c      	ldr	r2, [pc, #112]	; (8009c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d806      	bhi.n	8009c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	4a1b      	ldr	r2, [pc, #108]	; (8009ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d902      	bls.n	8009c3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3308      	adds	r3, #8
 8009c3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009c3e:	68fa      	ldr	r2, [r7, #12]
 8009c40:	4b18      	ldr	r3, [pc, #96]	; (8009ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009c42:	4413      	add	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	461a      	mov	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	4a16      	ldr	r2, [pc, #88]	; (8009ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009c50:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	f003 031f 	and.w	r3, r3, #31
 8009c58:	2201      	movs	r2, #1
 8009c5a:	409a      	lsls	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009c60:	bf00      	nop
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	58025408 	.word	0x58025408
 8009c70:	5802541c 	.word	0x5802541c
 8009c74:	58025430 	.word	0x58025430
 8009c78:	58025444 	.word	0x58025444
 8009c7c:	58025458 	.word	0x58025458
 8009c80:	5802546c 	.word	0x5802546c
 8009c84:	58025480 	.word	0x58025480
 8009c88:	58025494 	.word	0x58025494
 8009c8c:	cccccccd 	.word	0xcccccccd
 8009c90:	16009600 	.word	0x16009600
 8009c94:	58025880 	.word	0x58025880
 8009c98:	aaaaaaab 	.word	0xaaaaaaab
 8009c9c:	400204b8 	.word	0x400204b8
 8009ca0:	4002040f 	.word	0x4002040f
 8009ca4:	10008200 	.word	0x10008200
 8009ca8:	40020880 	.word	0x40020880

08009cac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	b2db      	uxtb	r3, r3
 8009cba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d04a      	beq.n	8009d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	2b08      	cmp	r3, #8
 8009cc6:	d847      	bhi.n	8009d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a25      	ldr	r2, [pc, #148]	; (8009d64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d022      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a24      	ldr	r2, [pc, #144]	; (8009d68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d01d      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a22      	ldr	r2, [pc, #136]	; (8009d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d018      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a21      	ldr	r2, [pc, #132]	; (8009d70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d013      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a1f      	ldr	r2, [pc, #124]	; (8009d74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00e      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a1e      	ldr	r2, [pc, #120]	; (8009d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d009      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a1c      	ldr	r2, [pc, #112]	; (8009d7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a1b      	ldr	r2, [pc, #108]	; (8009d80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d101      	bne.n	8009d1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009d18:	2301      	movs	r3, #1
 8009d1a:	e000      	b.n	8009d1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d22:	68fa      	ldr	r2, [r7, #12]
 8009d24:	4b17      	ldr	r3, [pc, #92]	; (8009d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009d26:	4413      	add	r3, r2
 8009d28:	009b      	lsls	r3, r3, #2
 8009d2a:	461a      	mov	r2, r3
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a15      	ldr	r2, [pc, #84]	; (8009d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009d34:	671a      	str	r2, [r3, #112]	; 0x70
 8009d36:	e009      	b.n	8009d4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009d38:	68fa      	ldr	r2, [r7, #12]
 8009d3a:	4b14      	ldr	r3, [pc, #80]	; (8009d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	461a      	mov	r2, r3
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a11      	ldr	r2, [pc, #68]	; (8009d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009d4a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	2201      	movs	r2, #1
 8009d52:	409a      	lsls	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009d58:	bf00      	nop
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	58025408 	.word	0x58025408
 8009d68:	5802541c 	.word	0x5802541c
 8009d6c:	58025430 	.word	0x58025430
 8009d70:	58025444 	.word	0x58025444
 8009d74:	58025458 	.word	0x58025458
 8009d78:	5802546c 	.word	0x5802546c
 8009d7c:	58025480 	.word	0x58025480
 8009d80:	58025494 	.word	0x58025494
 8009d84:	1600963f 	.word	0x1600963f
 8009d88:	58025940 	.word	0x58025940
 8009d8c:	1000823f 	.word	0x1000823f
 8009d90:	40020940 	.word	0x40020940

08009d94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d101      	bne.n	8009da6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e0cf      	b.n	8009f46 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d106      	bne.n	8009dbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2223      	movs	r2, #35	; 0x23
 8009db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7fd f89f 	bl	8006efc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009dbe:	4b64      	ldr	r3, [pc, #400]	; (8009f50 <HAL_ETH_Init+0x1bc>)
 8009dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dc4:	4a62      	ldr	r2, [pc, #392]	; (8009f50 <HAL_ETH_Init+0x1bc>)
 8009dc6:	f043 0302 	orr.w	r3, r3, #2
 8009dca:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009dce:	4b60      	ldr	r3, [pc, #384]	; (8009f50 <HAL_ETH_Init+0x1bc>)
 8009dd0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009dd4:	f003 0302 	and.w	r3, r3, #2
 8009dd8:	60bb      	str	r3, [r7, #8]
 8009dda:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7a1b      	ldrb	r3, [r3, #8]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d103      	bne.n	8009dec <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009de4:	2000      	movs	r0, #0
 8009de6:	f7fd fc8b 	bl	8007700 <HAL_SYSCFG_ETHInterfaceSelect>
 8009dea:	e003      	b.n	8009df4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009dec:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009df0:	f7fd fc86 	bl	8007700 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009df4:	4b57      	ldr	r3, [pc, #348]	; (8009f54 <HAL_ETH_Init+0x1c0>)
 8009df6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	6812      	ldr	r2, [r2, #0]
 8009e06:	f043 0301 	orr.w	r3, r3, #1
 8009e0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009e10:	f7fd fc3a 	bl	8007688 <HAL_GetTick>
 8009e14:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009e16:	e011      	b.n	8009e3c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009e18:	f7fd fc36 	bl	8007688 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009e26:	d909      	bls.n	8009e3c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2204      	movs	r2, #4
 8009e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	22e0      	movs	r2, #224	; 0xe0
 8009e34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e084      	b.n	8009f46 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1e4      	bne.n	8009e18 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f886 	bl	8009f60 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009e54:	f001 fefc 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 8009e58:	4603      	mov	r3, r0
 8009e5a:	4a3f      	ldr	r2, [pc, #252]	; (8009f58 <HAL_ETH_Init+0x1c4>)
 8009e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009e60:	0c9a      	lsrs	r2, r3, #18
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	3a01      	subs	r2, #1
 8009e68:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fa71 	bl	800a354 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e7a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009e7e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	6812      	ldr	r2, [r2, #0]
 8009e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009e8e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	695b      	ldr	r3, [r3, #20]
 8009e96:	f003 0303 	and.w	r3, r3, #3
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	22e0      	movs	r2, #224	; 0xe0
 8009eaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e049      	b.n	8009f46 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009eba:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8009ebe:	4b27      	ldr	r3, [pc, #156]	; (8009f5c <HAL_ETH_Init+0x1c8>)
 8009ec0:	4013      	ands	r3, r2
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	6952      	ldr	r2, [r2, #20]
 8009ec6:	0051      	lsls	r1, r2, #1
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6812      	ldr	r2, [r2, #0]
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009ed2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 fad9 	bl	800a48e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 fb1f 	bl	800a520 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	685b      	ldr	r3, [r3, #4]
 8009ee6:	3305      	adds	r3, #5
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	021a      	lsls	r2, r3, #8
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	430a      	orrs	r2, r1
 8009efc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	3303      	adds	r3, #3
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	061a      	lsls	r2, r3, #24
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	3302      	adds	r3, #2
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	041b      	lsls	r3, r3, #16
 8009f14:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009f20:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	685b      	ldr	r3, [r3, #4]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8009f2e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009f30:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2210      	movs	r2, #16
 8009f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f44:	2300      	movs	r3, #0
}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3710      	adds	r7, #16
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	58024400 	.word	0x58024400
 8009f54:	58000400 	.word	0x58000400
 8009f58:	431bde83 	.word	0x431bde83
 8009f5c:	ffff8001 	.word	0xffff8001

08009f60 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009f70:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009f78:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8009f7a:	f001 fe69 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 8009f7e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	4a1e      	ldr	r2, [pc, #120]	; (8009ffc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d908      	bls.n	8009f9a <HAL_ETH_SetMDIOClockRange+0x3a>
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	4a1d      	ldr	r2, [pc, #116]	; (800a000 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d804      	bhi.n	8009f9a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009f96:	60fb      	str	r3, [r7, #12]
 8009f98:	e027      	b.n	8009fea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	4a18      	ldr	r2, [pc, #96]	; (800a000 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8009f9e:	4293      	cmp	r3, r2
 8009fa0:	d908      	bls.n	8009fb4 <HAL_ETH_SetMDIOClockRange+0x54>
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	4a17      	ldr	r2, [pc, #92]	; (800a004 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d204      	bcs.n	8009fb4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009fb0:	60fb      	str	r3, [r7, #12]
 8009fb2:	e01a      	b.n	8009fea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4a13      	ldr	r2, [pc, #76]	; (800a004 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8009fb8:	4293      	cmp	r3, r2
 8009fba:	d303      	bcc.n	8009fc4 <HAL_ETH_SetMDIOClockRange+0x64>
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	4a12      	ldr	r2, [pc, #72]	; (800a008 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d911      	bls.n	8009fe8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4a10      	ldr	r2, [pc, #64]	; (800a008 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d908      	bls.n	8009fde <HAL_ETH_SetMDIOClockRange+0x7e>
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	4a0f      	ldr	r2, [pc, #60]	; (800a00c <HAL_ETH_SetMDIOClockRange+0xac>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	d804      	bhi.n	8009fde <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fda:	60fb      	str	r3, [r7, #12]
 8009fdc:	e005      	b.n	8009fea <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009fe4:	60fb      	str	r3, [r7, #12]
 8009fe6:	e000      	b.n	8009fea <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8009fe8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	68fa      	ldr	r2, [r7, #12]
 8009ff0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8009ff4:	bf00      	nop
 8009ff6:	3710      	adds	r7, #16
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}
 8009ffc:	01312cff 	.word	0x01312cff
 800a000:	02160ebf 	.word	0x02160ebf
 800a004:	03938700 	.word	0x03938700
 800a008:	05f5e0ff 	.word	0x05f5e0ff
 800a00c:	08f0d17f 	.word	0x08f0d17f

0800a010 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a010:	b480      	push	{r7}
 800a012:	b085      	sub	sp, #20
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a022:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	791b      	ldrb	r3, [r3, #4]
 800a028:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a02a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	7b1b      	ldrb	r3, [r3, #12]
 800a030:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a032:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	7b5b      	ldrb	r3, [r3, #13]
 800a038:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a03a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	7b9b      	ldrb	r3, [r3, #14]
 800a040:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a042:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	7bdb      	ldrb	r3, [r3, #15]
 800a048:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a04a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a04c:	683a      	ldr	r2, [r7, #0]
 800a04e:	7c12      	ldrb	r2, [r2, #16]
 800a050:	2a00      	cmp	r2, #0
 800a052:	d102      	bne.n	800a05a <ETH_SetMACConfig+0x4a>
 800a054:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a058:	e000      	b.n	800a05c <ETH_SetMACConfig+0x4c>
 800a05a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a05c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a05e:	683a      	ldr	r2, [r7, #0]
 800a060:	7c52      	ldrb	r2, [r2, #17]
 800a062:	2a00      	cmp	r2, #0
 800a064:	d102      	bne.n	800a06c <ETH_SetMACConfig+0x5c>
 800a066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a06a:	e000      	b.n	800a06e <ETH_SetMACConfig+0x5e>
 800a06c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a06e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	7c9b      	ldrb	r3, [r3, #18]
 800a074:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a076:	431a      	orrs	r2, r3
               macconf->Speed |
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a07c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a082:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	7f1b      	ldrb	r3, [r3, #28]
 800a088:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a08a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	7f5b      	ldrb	r3, [r3, #29]
 800a090:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a092:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a094:	683a      	ldr	r2, [r7, #0]
 800a096:	7f92      	ldrb	r2, [r2, #30]
 800a098:	2a00      	cmp	r2, #0
 800a09a:	d102      	bne.n	800a0a2 <ETH_SetMACConfig+0x92>
 800a09c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a0a0:	e000      	b.n	800a0a4 <ETH_SetMACConfig+0x94>
 800a0a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a0a4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	7fdb      	ldrb	r3, [r3, #31]
 800a0aa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a0ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a0ae:	683a      	ldr	r2, [r7, #0]
 800a0b0:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a0b4:	2a00      	cmp	r2, #0
 800a0b6:	d102      	bne.n	800a0be <ETH_SetMACConfig+0xae>
 800a0b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a0bc:	e000      	b.n	800a0c0 <ETH_SetMACConfig+0xb0>
 800a0be:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a0c0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a0c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a0ce:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a0d0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a0d6:	4313      	orrs	r3, r2
 800a0d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	4b56      	ldr	r3, [pc, #344]	; (800a23c <ETH_SetMACConfig+0x22c>)
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	6812      	ldr	r2, [r2, #0]
 800a0e8:	68f9      	ldr	r1, [r7, #12]
 800a0ea:	430b      	orrs	r3, r1
 800a0ec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0f2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a0fa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a0fc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a104:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a106:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a10e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a110:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a112:	683a      	ldr	r2, [r7, #0]
 800a114:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a118:	2a00      	cmp	r2, #0
 800a11a:	d102      	bne.n	800a122 <ETH_SetMACConfig+0x112>
 800a11c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a120:	e000      	b.n	800a124 <ETH_SetMACConfig+0x114>
 800a122:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a124:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a12a:	4313      	orrs	r3, r2
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	685a      	ldr	r2, [r3, #4]
 800a134:	4b42      	ldr	r3, [pc, #264]	; (800a240 <ETH_SetMACConfig+0x230>)
 800a136:	4013      	ands	r3, r2
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	6812      	ldr	r2, [r2, #0]
 800a13c:	68f9      	ldr	r1, [r7, #12]
 800a13e:	430b      	orrs	r3, r1
 800a140:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a148:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	68da      	ldr	r2, [r3, #12]
 800a158:	4b3a      	ldr	r3, [pc, #232]	; (800a244 <ETH_SetMACConfig+0x234>)
 800a15a:	4013      	ands	r3, r2
 800a15c:	687a      	ldr	r2, [r7, #4]
 800a15e:	6812      	ldr	r2, [r2, #0]
 800a160:	68f9      	ldr	r1, [r7, #12]
 800a162:	430b      	orrs	r3, r1
 800a164:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a16c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a172:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800a17a:	2a00      	cmp	r2, #0
 800a17c:	d101      	bne.n	800a182 <ETH_SetMACConfig+0x172>
 800a17e:	2280      	movs	r2, #128	; 0x80
 800a180:	e000      	b.n	800a184 <ETH_SetMACConfig+0x174>
 800a182:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a184:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a18a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a18c:	4313      	orrs	r3, r2
 800a18e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a196:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800a19a:	4013      	ands	r3, r2
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	6812      	ldr	r2, [r2, #0]
 800a1a0:	68f9      	ldr	r1, [r7, #12]
 800a1a2:	430b      	orrs	r3, r1
 800a1a4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a1ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a1b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c2:	f023 0103 	bic.w	r1, r3, #3
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	430a      	orrs	r2, r1
 800a1ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800a1da:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	430a      	orrs	r2, r1
 800a1e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a1f0:	683a      	ldr	r2, [r7, #0]
 800a1f2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a1f6:	2a00      	cmp	r2, #0
 800a1f8:	d101      	bne.n	800a1fe <ETH_SetMACConfig+0x1ee>
 800a1fa:	2240      	movs	r2, #64	; 0x40
 800a1fc:	e000      	b.n	800a200 <ETH_SetMACConfig+0x1f0>
 800a1fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a200:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a208:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a20a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a212:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a214:	4313      	orrs	r3, r2
 800a216:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800a220:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	430a      	orrs	r2, r1
 800a22c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800a230:	bf00      	nop
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	00048083 	.word	0x00048083
 800a240:	c0f88000 	.word	0xc0f88000
 800a244:	fffffef0 	.word	0xfffffef0

0800a248 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
 800a250:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	4b38      	ldr	r3, [pc, #224]	; (800a340 <ETH_SetDMAConfig+0xf8>)
 800a25e:	4013      	ands	r3, r2
 800a260:	683a      	ldr	r2, [r7, #0]
 800a262:	6811      	ldr	r1, [r2, #0]
 800a264:	687a      	ldr	r2, [r7, #4]
 800a266:	6812      	ldr	r2, [r2, #0]
 800a268:	430b      	orrs	r3, r1
 800a26a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a26e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	791b      	ldrb	r3, [r3, #4]
 800a274:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a27a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	7b1b      	ldrb	r3, [r3, #12]
 800a280:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a282:	4313      	orrs	r3, r2
 800a284:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	4b2c      	ldr	r3, [pc, #176]	; (800a344 <ETH_SetDMAConfig+0xfc>)
 800a292:	4013      	ands	r3, r2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	68f9      	ldr	r1, [r7, #12]
 800a29a:	430b      	orrs	r3, r1
 800a29c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2a0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	7b5b      	ldrb	r3, [r3, #13]
 800a2a6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2b8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a2bc:	4b22      	ldr	r3, [pc, #136]	; (800a348 <ETH_SetDMAConfig+0x100>)
 800a2be:	4013      	ands	r3, r2
 800a2c0:	687a      	ldr	r2, [r7, #4]
 800a2c2:	6812      	ldr	r2, [r2, #0]
 800a2c4:	68f9      	ldr	r1, [r7, #12]
 800a2c6:	430b      	orrs	r3, r1
 800a2c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a2cc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a2d0:	683b      	ldr	r3, [r7, #0]
 800a2d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	7d1b      	ldrb	r3, [r3, #20]
 800a2d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a2da:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	7f5b      	ldrb	r3, [r3, #29]
 800a2e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a2ee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a2f2:	4b16      	ldr	r3, [pc, #88]	; (800a34c <ETH_SetDMAConfig+0x104>)
 800a2f4:	4013      	ands	r3, r2
 800a2f6:	687a      	ldr	r2, [r7, #4]
 800a2f8:	6812      	ldr	r2, [r2, #0]
 800a2fa:	68f9      	ldr	r1, [r7, #12]
 800a2fc:	430b      	orrs	r3, r1
 800a2fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a302:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a306:	683b      	ldr	r3, [r7, #0]
 800a308:	7f1b      	ldrb	r3, [r3, #28]
 800a30a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a310:	4313      	orrs	r3, r2
 800a312:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a31c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <ETH_SetDMAConfig+0x108>)
 800a322:	4013      	ands	r3, r2
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	6812      	ldr	r2, [r2, #0]
 800a328:	68f9      	ldr	r1, [r7, #12]
 800a32a:	430b      	orrs	r3, r1
 800a32c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a330:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a334:	bf00      	nop
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	ffff87fd 	.word	0xffff87fd
 800a344:	ffff2ffe 	.word	0xffff2ffe
 800a348:	fffec000 	.word	0xfffec000
 800a34c:	ffc0efef 	.word	0xffc0efef
 800a350:	7fc0ffff 	.word	0x7fc0ffff

0800a354 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b0a4      	sub	sp, #144	; 0x90
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a35c:	2301      	movs	r3, #1
 800a35e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a362:	2300      	movs	r3, #0
 800a364:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a366:	2300      	movs	r3, #0
 800a368:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a36c:	2300      	movs	r3, #0
 800a36e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a372:	2301      	movs	r3, #1
 800a374:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a378:	2301      	movs	r3, #1
 800a37a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a37e:	2301      	movs	r3, #1
 800a380:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a384:	2300      	movs	r3, #0
 800a386:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a38a:	2301      	movs	r3, #1
 800a38c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a394:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a396:	2300      	movs	r3, #0
 800a398:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a3ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800a3b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800a3bc:	2301      	movs	r3, #1
 800a3be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a3ec:	2320      	movs	r3, #32
 800a3ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a3fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a402:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a408:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a40a:	2300      	movs	r3, #0
 800a40c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a410:	2302      	movs	r3, #2
 800a412:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a416:	2300      	movs	r3, #0
 800a418:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a41c:	2300      	movs	r3, #0
 800a41e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a422:	2300      	movs	r3, #0
 800a424:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a428:	2301      	movs	r3, #1
 800a42a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a42e:	2300      	movs	r3, #0
 800a430:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a432:	2301      	movs	r3, #1
 800a434:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a438:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f7ff fde6 	bl	800a010 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a444:	2301      	movs	r3, #1
 800a446:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a448:	2301      	movs	r3, #1
 800a44a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a44c:	2300      	movs	r3, #0
 800a44e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a450:	2300      	movs	r3, #0
 800a452:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a456:	2300      	movs	r3, #0
 800a458:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a45a:	2300      	movs	r3, #0
 800a45c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a45e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a462:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a464:	2300      	movs	r3, #0
 800a466:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a468:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a46c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a46e:	2300      	movs	r3, #0
 800a470:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a474:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a478:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a47a:	f107 0308 	add.w	r3, r7, #8
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f7ff fee1 	bl	800a248 <ETH_SetDMAConfig>
}
 800a486:	bf00      	nop
 800a488:	3790      	adds	r7, #144	; 0x90
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a48e:	b480      	push	{r7}
 800a490:	b085      	sub	sp, #20
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]
 800a49a:	e01d      	b.n	800a4d8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	68d9      	ldr	r1, [r3, #12]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	005b      	lsls	r3, r3, #1
 800a4a6:	4413      	add	r3, r2
 800a4a8:	00db      	lsls	r3, r3, #3
 800a4aa:	440b      	add	r3, r1
 800a4ac:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a4ba:	68bb      	ldr	r3, [r7, #8]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	3206      	adds	r2, #6
 800a4ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2b03      	cmp	r3, #3
 800a4dc:	d9de      	bls.n	800a49c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4ec:	461a      	mov	r2, r3
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68da      	ldr	r2, [r3, #12]
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a500:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	68da      	ldr	r2, [r3, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a510:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800a514:	bf00      	nop
 800a516:	3714      	adds	r7, #20
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a528:	2300      	movs	r3, #0
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	e023      	b.n	800a576 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6919      	ldr	r1, [r3, #16]
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	4613      	mov	r3, r2
 800a536:	005b      	lsls	r3, r3, #1
 800a538:	4413      	add	r3, r2
 800a53a:	00db      	lsls	r3, r3, #3
 800a53c:	440b      	add	r3, r1
 800a53e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a540:	68bb      	ldr	r3, [r7, #8]
 800a542:	2200      	movs	r2, #0
 800a544:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2200      	movs	r2, #0
 800a54a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	2200      	movs	r2, #0
 800a550:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a552:	68bb      	ldr	r3, [r7, #8]
 800a554:	2200      	movs	r2, #0
 800a556:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	2200      	movs	r2, #0
 800a55c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a55e:	68bb      	ldr	r3, [r7, #8]
 800a560:	2200      	movs	r2, #0
 800a562:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a564:	68b9      	ldr	r1, [r7, #8]
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	3212      	adds	r2, #18
 800a56c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	3301      	adds	r3, #1
 800a574:	60fb      	str	r3, [r7, #12]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2b03      	cmp	r3, #3
 800a57a:	d9d8      	bls.n	800a52e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2200      	movs	r2, #0
 800a586:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2200      	movs	r2, #0
 800a58c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2200      	movs	r2, #0
 800a592:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2200      	movs	r2, #0
 800a598:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5a2:	461a      	mov	r2, r3
 800a5a4:	2303      	movs	r3, #3
 800a5a6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	691a      	ldr	r2, [r3, #16]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5b6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ca:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800a5ce:	bf00      	nop
 800a5d0:	3714      	adds	r7, #20
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr
	...

0800a5dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b089      	sub	sp, #36	; 0x24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a5ea:	4b89      	ldr	r3, [pc, #548]	; (800a810 <HAL_GPIO_Init+0x234>)
 800a5ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a5ee:	e194      	b.n	800a91a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	69fb      	ldr	r3, [r7, #28]
 800a5f8:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fc:	4013      	ands	r3, r2
 800a5fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 8186 	beq.w	800a914 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	f003 0303 	and.w	r3, r3, #3
 800a610:	2b01      	cmp	r3, #1
 800a612:	d005      	beq.n	800a620 <HAL_GPIO_Init+0x44>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685b      	ldr	r3, [r3, #4]
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d130      	bne.n	800a682 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a626:	69fb      	ldr	r3, [r7, #28]
 800a628:	005b      	lsls	r3, r3, #1
 800a62a:	2203      	movs	r2, #3
 800a62c:	fa02 f303 	lsl.w	r3, r2, r3
 800a630:	43db      	mvns	r3, r3
 800a632:	69ba      	ldr	r2, [r7, #24]
 800a634:	4013      	ands	r3, r2
 800a636:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	68da      	ldr	r2, [r3, #12]
 800a63c:	69fb      	ldr	r3, [r7, #28]
 800a63e:	005b      	lsls	r3, r3, #1
 800a640:	fa02 f303 	lsl.w	r3, r2, r3
 800a644:	69ba      	ldr	r2, [r7, #24]
 800a646:	4313      	orrs	r3, r2
 800a648:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	69ba      	ldr	r2, [r7, #24]
 800a64e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a656:	2201      	movs	r2, #1
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	fa02 f303 	lsl.w	r3, r2, r3
 800a65e:	43db      	mvns	r3, r3
 800a660:	69ba      	ldr	r2, [r7, #24]
 800a662:	4013      	ands	r3, r2
 800a664:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	091b      	lsrs	r3, r3, #4
 800a66c:	f003 0201 	and.w	r2, r3, #1
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	fa02 f303 	lsl.w	r3, r2, r3
 800a676:	69ba      	ldr	r2, [r7, #24]
 800a678:	4313      	orrs	r3, r2
 800a67a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	69ba      	ldr	r2, [r7, #24]
 800a680:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a682:	683b      	ldr	r3, [r7, #0]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	f003 0303 	and.w	r3, r3, #3
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	d017      	beq.n	800a6be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	68db      	ldr	r3, [r3, #12]
 800a692:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	005b      	lsls	r3, r3, #1
 800a698:	2203      	movs	r2, #3
 800a69a:	fa02 f303 	lsl.w	r3, r2, r3
 800a69e:	43db      	mvns	r3, r3
 800a6a0:	69ba      	ldr	r2, [r7, #24]
 800a6a2:	4013      	ands	r3, r2
 800a6a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a6a6:	683b      	ldr	r3, [r7, #0]
 800a6a8:	689a      	ldr	r2, [r3, #8]
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	005b      	lsls	r3, r3, #1
 800a6ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b2:	69ba      	ldr	r2, [r7, #24]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	69ba      	ldr	r2, [r7, #24]
 800a6bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f003 0303 	and.w	r3, r3, #3
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d123      	bne.n	800a712 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	08da      	lsrs	r2, r3, #3
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	3208      	adds	r2, #8
 800a6d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a6d8:	69fb      	ldr	r3, [r7, #28]
 800a6da:	f003 0307 	and.w	r3, r3, #7
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	220f      	movs	r2, #15
 800a6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6e6:	43db      	mvns	r3, r3
 800a6e8:	69ba      	ldr	r2, [r7, #24]
 800a6ea:	4013      	ands	r3, r2
 800a6ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	691a      	ldr	r2, [r3, #16]
 800a6f2:	69fb      	ldr	r3, [r7, #28]
 800a6f4:	f003 0307 	and.w	r3, r3, #7
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	fa02 f303 	lsl.w	r3, r2, r3
 800a6fe:	69ba      	ldr	r2, [r7, #24]
 800a700:	4313      	orrs	r3, r2
 800a702:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	08da      	lsrs	r2, r3, #3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3208      	adds	r2, #8
 800a70c:	69b9      	ldr	r1, [r7, #24]
 800a70e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a718:	69fb      	ldr	r3, [r7, #28]
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	2203      	movs	r2, #3
 800a71e:	fa02 f303 	lsl.w	r3, r2, r3
 800a722:	43db      	mvns	r3, r3
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	4013      	ands	r3, r2
 800a728:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	f003 0203 	and.w	r2, r3, #3
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	005b      	lsls	r3, r3, #1
 800a736:	fa02 f303 	lsl.w	r3, r2, r3
 800a73a:	69ba      	ldr	r2, [r7, #24]
 800a73c:	4313      	orrs	r3, r2
 800a73e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f000 80e0 	beq.w	800a914 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a754:	4b2f      	ldr	r3, [pc, #188]	; (800a814 <HAL_GPIO_Init+0x238>)
 800a756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a75a:	4a2e      	ldr	r2, [pc, #184]	; (800a814 <HAL_GPIO_Init+0x238>)
 800a75c:	f043 0302 	orr.w	r3, r3, #2
 800a760:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a764:	4b2b      	ldr	r3, [pc, #172]	; (800a814 <HAL_GPIO_Init+0x238>)
 800a766:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a76a:	f003 0302 	and.w	r3, r3, #2
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a772:	4a29      	ldr	r2, [pc, #164]	; (800a818 <HAL_GPIO_Init+0x23c>)
 800a774:	69fb      	ldr	r3, [r7, #28]
 800a776:	089b      	lsrs	r3, r3, #2
 800a778:	3302      	adds	r3, #2
 800a77a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a77e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a780:	69fb      	ldr	r3, [r7, #28]
 800a782:	f003 0303 	and.w	r3, r3, #3
 800a786:	009b      	lsls	r3, r3, #2
 800a788:	220f      	movs	r2, #15
 800a78a:	fa02 f303 	lsl.w	r3, r2, r3
 800a78e:	43db      	mvns	r3, r3
 800a790:	69ba      	ldr	r2, [r7, #24]
 800a792:	4013      	ands	r3, r2
 800a794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a20      	ldr	r2, [pc, #128]	; (800a81c <HAL_GPIO_Init+0x240>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d052      	beq.n	800a844 <HAL_GPIO_Init+0x268>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4a1f      	ldr	r2, [pc, #124]	; (800a820 <HAL_GPIO_Init+0x244>)
 800a7a2:	4293      	cmp	r3, r2
 800a7a4:	d031      	beq.n	800a80a <HAL_GPIO_Init+0x22e>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a1e      	ldr	r2, [pc, #120]	; (800a824 <HAL_GPIO_Init+0x248>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d02b      	beq.n	800a806 <HAL_GPIO_Init+0x22a>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a1d      	ldr	r2, [pc, #116]	; (800a828 <HAL_GPIO_Init+0x24c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d025      	beq.n	800a802 <HAL_GPIO_Init+0x226>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a1c      	ldr	r2, [pc, #112]	; (800a82c <HAL_GPIO_Init+0x250>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d01f      	beq.n	800a7fe <HAL_GPIO_Init+0x222>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a1b      	ldr	r2, [pc, #108]	; (800a830 <HAL_GPIO_Init+0x254>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d019      	beq.n	800a7fa <HAL_GPIO_Init+0x21e>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a1a      	ldr	r2, [pc, #104]	; (800a834 <HAL_GPIO_Init+0x258>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d013      	beq.n	800a7f6 <HAL_GPIO_Init+0x21a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a19      	ldr	r2, [pc, #100]	; (800a838 <HAL_GPIO_Init+0x25c>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d00d      	beq.n	800a7f2 <HAL_GPIO_Init+0x216>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a18      	ldr	r2, [pc, #96]	; (800a83c <HAL_GPIO_Init+0x260>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d007      	beq.n	800a7ee <HAL_GPIO_Init+0x212>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	4a17      	ldr	r2, [pc, #92]	; (800a840 <HAL_GPIO_Init+0x264>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d101      	bne.n	800a7ea <HAL_GPIO_Init+0x20e>
 800a7e6:	2309      	movs	r3, #9
 800a7e8:	e02d      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a7ea:	230a      	movs	r3, #10
 800a7ec:	e02b      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a7ee:	2308      	movs	r3, #8
 800a7f0:	e029      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a7f2:	2307      	movs	r3, #7
 800a7f4:	e027      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a7f6:	2306      	movs	r3, #6
 800a7f8:	e025      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a7fa:	2305      	movs	r3, #5
 800a7fc:	e023      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a7fe:	2304      	movs	r3, #4
 800a800:	e021      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a802:	2303      	movs	r3, #3
 800a804:	e01f      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a806:	2302      	movs	r3, #2
 800a808:	e01d      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a80a:	2301      	movs	r3, #1
 800a80c:	e01b      	b.n	800a846 <HAL_GPIO_Init+0x26a>
 800a80e:	bf00      	nop
 800a810:	58000080 	.word	0x58000080
 800a814:	58024400 	.word	0x58024400
 800a818:	58000400 	.word	0x58000400
 800a81c:	58020000 	.word	0x58020000
 800a820:	58020400 	.word	0x58020400
 800a824:	58020800 	.word	0x58020800
 800a828:	58020c00 	.word	0x58020c00
 800a82c:	58021000 	.word	0x58021000
 800a830:	58021400 	.word	0x58021400
 800a834:	58021800 	.word	0x58021800
 800a838:	58021c00 	.word	0x58021c00
 800a83c:	58022000 	.word	0x58022000
 800a840:	58022400 	.word	0x58022400
 800a844:	2300      	movs	r3, #0
 800a846:	69fa      	ldr	r2, [r7, #28]
 800a848:	f002 0203 	and.w	r2, r2, #3
 800a84c:	0092      	lsls	r2, r2, #2
 800a84e:	4093      	lsls	r3, r2
 800a850:	69ba      	ldr	r2, [r7, #24]
 800a852:	4313      	orrs	r3, r2
 800a854:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a856:	4938      	ldr	r1, [pc, #224]	; (800a938 <HAL_GPIO_Init+0x35c>)
 800a858:	69fb      	ldr	r3, [r7, #28]
 800a85a:	089b      	lsrs	r3, r3, #2
 800a85c:	3302      	adds	r3, #2
 800a85e:	69ba      	ldr	r2, [r7, #24]
 800a860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	43db      	mvns	r3, r3
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	4013      	ands	r3, r2
 800a874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d003      	beq.n	800a88a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a882:	69ba      	ldr	r2, [r7, #24]
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	4313      	orrs	r3, r2
 800a888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a88a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	43db      	mvns	r3, r3
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	4013      	ands	r3, r2
 800a8a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	685b      	ldr	r3, [r3, #4]
 800a8a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d003      	beq.n	800a8b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a8b0:	69ba      	ldr	r2, [r7, #24]
 800a8b2:	693b      	ldr	r3, [r7, #16]
 800a8b4:	4313      	orrs	r3, r2
 800a8b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a8b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8bc:	69bb      	ldr	r3, [r7, #24]
 800a8be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a8c0:	697b      	ldr	r3, [r7, #20]
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	43db      	mvns	r3, r3
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d003      	beq.n	800a8e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	69ba      	ldr	r2, [r7, #24]
 800a8e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	43db      	mvns	r3, r3
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a902:	2b00      	cmp	r3, #0
 800a904:	d003      	beq.n	800a90e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	693b      	ldr	r3, [r7, #16]
 800a90a:	4313      	orrs	r3, r2
 800a90c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	69ba      	ldr	r2, [r7, #24]
 800a912:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	3301      	adds	r3, #1
 800a918:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	fa22 f303 	lsr.w	r3, r2, r3
 800a924:	2b00      	cmp	r3, #0
 800a926:	f47f ae63 	bne.w	800a5f0 <HAL_GPIO_Init+0x14>
  }
}
 800a92a:	bf00      	nop
 800a92c:	bf00      	nop
 800a92e:	3724      	adds	r7, #36	; 0x24
 800a930:	46bd      	mov	sp, r7
 800a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a936:	4770      	bx	lr
 800a938:	58000400 	.word	0x58000400

0800a93c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a93c:	b480      	push	{r7}
 800a93e:	b085      	sub	sp, #20
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	460b      	mov	r3, r1
 800a946:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	691a      	ldr	r2, [r3, #16]
 800a94c:	887b      	ldrh	r3, [r7, #2]
 800a94e:	4013      	ands	r3, r2
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a954:	2301      	movs	r3, #1
 800a956:	73fb      	strb	r3, [r7, #15]
 800a958:	e001      	b.n	800a95e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a95e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b083      	sub	sp, #12
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	807b      	strh	r3, [r7, #2]
 800a978:	4613      	mov	r3, r2
 800a97a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a97c:	787b      	ldrb	r3, [r7, #1]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d003      	beq.n	800a98a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a982:	887a      	ldrh	r2, [r7, #2]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800a988:	e003      	b.n	800a992 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800a98a:	887b      	ldrh	r3, [r7, #2]
 800a98c:	041a      	lsls	r2, r3, #16
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	619a      	str	r2, [r3, #24]
}
 800a992:	bf00      	nop
 800a994:	370c      	adds	r7, #12
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a99e:	b480      	push	{r7}
 800a9a0:	b085      	sub	sp, #20
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	695b      	ldr	r3, [r3, #20]
 800a9ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a9b0:	887a      	ldrh	r2, [r7, #2]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	4013      	ands	r3, r2
 800a9b6:	041a      	lsls	r2, r3, #16
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	43d9      	mvns	r1, r3
 800a9bc:	887b      	ldrh	r3, [r7, #2]
 800a9be:	400b      	ands	r3, r1
 800a9c0:	431a      	orrs	r2, r3
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	619a      	str	r2, [r3, #24]
}
 800a9c6:	bf00      	nop
 800a9c8:	3714      	adds	r7, #20
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d0:	4770      	bx	lr
	...

0800a9d4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b083      	sub	sp, #12
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800a9dc:	4a08      	ldr	r2, [pc, #32]	; (800aa00 <HAL_HSEM_FastTake+0x2c>)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	3320      	adds	r3, #32
 800a9e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9e6:	4a07      	ldr	r2, [pc, #28]	; (800aa04 <HAL_HSEM_FastTake+0x30>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d101      	bne.n	800a9f0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	e000      	b.n	800a9f2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800a9f0:	2301      	movs	r3, #1
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	58026400 	.word	0x58026400
 800aa04:	80000300 	.word	0x80000300

0800aa08 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800aa12:	4906      	ldr	r1, [pc, #24]	; (800aa2c <HAL_HSEM_Release+0x24>)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800aa20:	bf00      	nop
 800aa22:	370c      	adds	r7, #12
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr
 800aa2c:	58026400 	.word	0x58026400

0800aa30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800aa30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa32:	b08f      	sub	sp, #60	; 0x3c
 800aa34:	af0a      	add	r7, sp, #40	; 0x28
 800aa36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d101      	bne.n	800aa42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e116      	b.n	800ac70 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800aa4e:	b2db      	uxtb	r3, r3
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d106      	bne.n	800aa62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f7fc fc81 	bl	8007364 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2203      	movs	r2, #3
 800aa66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d102      	bne.n	800aa7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2200      	movs	r2, #0
 800aa7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4618      	mov	r0, r3
 800aa82:	f005 f977 	bl	800fd74 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	603b      	str	r3, [r7, #0]
 800aa8c:	687e      	ldr	r6, [r7, #4]
 800aa8e:	466d      	mov	r5, sp
 800aa90:	f106 0410 	add.w	r4, r6, #16
 800aa94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800aa9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800aa9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800aaa0:	e885 0003 	stmia.w	r5, {r0, r1}
 800aaa4:	1d33      	adds	r3, r6, #4
 800aaa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aaa8:	6838      	ldr	r0, [r7, #0]
 800aaaa:	f005 f8f5 	bl	800fc98 <USB_CoreInit>
 800aaae:	4603      	mov	r3, r0
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d005      	beq.n	800aac0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	2202      	movs	r2, #2
 800aab8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e0d7      	b.n	800ac70 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2100      	movs	r1, #0
 800aac6:	4618      	mov	r0, r3
 800aac8:	f005 f965 	bl	800fd96 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800aacc:	2300      	movs	r3, #0
 800aace:	73fb      	strb	r3, [r7, #15]
 800aad0:	e04a      	b.n	800ab68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800aad2:	7bfa      	ldrb	r2, [r7, #15]
 800aad4:	6879      	ldr	r1, [r7, #4]
 800aad6:	4613      	mov	r3, r2
 800aad8:	00db      	lsls	r3, r3, #3
 800aada:	4413      	add	r3, r2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	440b      	add	r3, r1
 800aae0:	333d      	adds	r3, #61	; 0x3d
 800aae2:	2201      	movs	r2, #1
 800aae4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800aae6:	7bfa      	ldrb	r2, [r7, #15]
 800aae8:	6879      	ldr	r1, [r7, #4]
 800aaea:	4613      	mov	r3, r2
 800aaec:	00db      	lsls	r3, r3, #3
 800aaee:	4413      	add	r3, r2
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	440b      	add	r3, r1
 800aaf4:	333c      	adds	r3, #60	; 0x3c
 800aaf6:	7bfa      	ldrb	r2, [r7, #15]
 800aaf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800aafa:	7bfa      	ldrb	r2, [r7, #15]
 800aafc:	7bfb      	ldrb	r3, [r7, #15]
 800aafe:	b298      	uxth	r0, r3
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	4613      	mov	r3, r2
 800ab04:	00db      	lsls	r3, r3, #3
 800ab06:	4413      	add	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	440b      	add	r3, r1
 800ab0c:	3344      	adds	r3, #68	; 0x44
 800ab0e:	4602      	mov	r2, r0
 800ab10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ab12:	7bfa      	ldrb	r2, [r7, #15]
 800ab14:	6879      	ldr	r1, [r7, #4]
 800ab16:	4613      	mov	r3, r2
 800ab18:	00db      	lsls	r3, r3, #3
 800ab1a:	4413      	add	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	440b      	add	r3, r1
 800ab20:	3340      	adds	r3, #64	; 0x40
 800ab22:	2200      	movs	r2, #0
 800ab24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ab26:	7bfa      	ldrb	r2, [r7, #15]
 800ab28:	6879      	ldr	r1, [r7, #4]
 800ab2a:	4613      	mov	r3, r2
 800ab2c:	00db      	lsls	r3, r3, #3
 800ab2e:	4413      	add	r3, r2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	440b      	add	r3, r1
 800ab34:	3348      	adds	r3, #72	; 0x48
 800ab36:	2200      	movs	r2, #0
 800ab38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ab3a:	7bfa      	ldrb	r2, [r7, #15]
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	00db      	lsls	r3, r3, #3
 800ab42:	4413      	add	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	334c      	adds	r3, #76	; 0x4c
 800ab4a:	2200      	movs	r2, #0
 800ab4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ab4e:	7bfa      	ldrb	r2, [r7, #15]
 800ab50:	6879      	ldr	r1, [r7, #4]
 800ab52:	4613      	mov	r3, r2
 800ab54:	00db      	lsls	r3, r3, #3
 800ab56:	4413      	add	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	440b      	add	r3, r1
 800ab5c:	3354      	adds	r3, #84	; 0x54
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab62:	7bfb      	ldrb	r3, [r7, #15]
 800ab64:	3301      	adds	r3, #1
 800ab66:	73fb      	strb	r3, [r7, #15]
 800ab68:	7bfa      	ldrb	r2, [r7, #15]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	685b      	ldr	r3, [r3, #4]
 800ab6e:	429a      	cmp	r2, r3
 800ab70:	d3af      	bcc.n	800aad2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ab72:	2300      	movs	r3, #0
 800ab74:	73fb      	strb	r3, [r7, #15]
 800ab76:	e044      	b.n	800ac02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ab78:	7bfa      	ldrb	r2, [r7, #15]
 800ab7a:	6879      	ldr	r1, [r7, #4]
 800ab7c:	4613      	mov	r3, r2
 800ab7e:	00db      	lsls	r3, r3, #3
 800ab80:	4413      	add	r3, r2
 800ab82:	009b      	lsls	r3, r3, #2
 800ab84:	440b      	add	r3, r1
 800ab86:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ab8e:	7bfa      	ldrb	r2, [r7, #15]
 800ab90:	6879      	ldr	r1, [r7, #4]
 800ab92:	4613      	mov	r3, r2
 800ab94:	00db      	lsls	r3, r3, #3
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	440b      	add	r3, r1
 800ab9c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800aba0:	7bfa      	ldrb	r2, [r7, #15]
 800aba2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800aba4:	7bfa      	ldrb	r2, [r7, #15]
 800aba6:	6879      	ldr	r1, [r7, #4]
 800aba8:	4613      	mov	r3, r2
 800abaa:	00db      	lsls	r3, r3, #3
 800abac:	4413      	add	r3, r2
 800abae:	009b      	lsls	r3, r3, #2
 800abb0:	440b      	add	r3, r1
 800abb2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800abb6:	2200      	movs	r2, #0
 800abb8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800abba:	7bfa      	ldrb	r2, [r7, #15]
 800abbc:	6879      	ldr	r1, [r7, #4]
 800abbe:	4613      	mov	r3, r2
 800abc0:	00db      	lsls	r3, r3, #3
 800abc2:	4413      	add	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	440b      	add	r3, r1
 800abc8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800abcc:	2200      	movs	r2, #0
 800abce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800abd0:	7bfa      	ldrb	r2, [r7, #15]
 800abd2:	6879      	ldr	r1, [r7, #4]
 800abd4:	4613      	mov	r3, r2
 800abd6:	00db      	lsls	r3, r3, #3
 800abd8:	4413      	add	r3, r2
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	440b      	add	r3, r1
 800abde:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800abe6:	7bfa      	ldrb	r2, [r7, #15]
 800abe8:	6879      	ldr	r1, [r7, #4]
 800abea:	4613      	mov	r3, r2
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800abf8:	2200      	movs	r2, #0
 800abfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abfc:	7bfb      	ldrb	r3, [r7, #15]
 800abfe:	3301      	adds	r3, #1
 800ac00:	73fb      	strb	r3, [r7, #15]
 800ac02:	7bfa      	ldrb	r2, [r7, #15]
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d3b5      	bcc.n	800ab78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	603b      	str	r3, [r7, #0]
 800ac12:	687e      	ldr	r6, [r7, #4]
 800ac14:	466d      	mov	r5, sp
 800ac16:	f106 0410 	add.w	r4, r6, #16
 800ac1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ac20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ac22:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ac26:	e885 0003 	stmia.w	r5, {r0, r1}
 800ac2a:	1d33      	adds	r3, r6, #4
 800ac2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ac2e:	6838      	ldr	r0, [r7, #0]
 800ac30:	f005 f8fe 	bl	800fe30 <USB_DevInit>
 800ac34:	4603      	mov	r3, r0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d005      	beq.n	800ac46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	2202      	movs	r2, #2
 800ac3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ac42:	2301      	movs	r3, #1
 800ac44:	e014      	b.n	800ac70 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d102      	bne.n	800ac64 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 f80a 	bl	800ac78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f005 fabc 	bl	80101e6 <USB_DevDisconnect>

  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3714      	adds	r7, #20
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ac78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2200      	movs	r2, #0
 800ac92:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	699b      	ldr	r3, [r3, #24]
 800ac9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aca6:	4b05      	ldr	r3, [pc, #20]	; (800acbc <HAL_PCDEx_ActivateLPM+0x44>)
 800aca8:	4313      	orrs	r3, r2
 800acaa:	68fa      	ldr	r2, [r7, #12]
 800acac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800acae:	2300      	movs	r3, #0
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	10000003 	.word	0x10000003

0800acc0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b084      	sub	sp, #16
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800acc8:	4b29      	ldr	r3, [pc, #164]	; (800ad70 <HAL_PWREx_ConfigSupply+0xb0>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	f003 0307 	and.w	r3, r3, #7
 800acd0:	2b06      	cmp	r3, #6
 800acd2:	d00a      	beq.n	800acea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800acd4:	4b26      	ldr	r3, [pc, #152]	; (800ad70 <HAL_PWREx_ConfigSupply+0xb0>)
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	429a      	cmp	r2, r3
 800ace0:	d001      	beq.n	800ace6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	e040      	b.n	800ad68 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ace6:	2300      	movs	r3, #0
 800ace8:	e03e      	b.n	800ad68 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800acea:	4b21      	ldr	r3, [pc, #132]	; (800ad70 <HAL_PWREx_ConfigSupply+0xb0>)
 800acec:	68db      	ldr	r3, [r3, #12]
 800acee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800acf2:	491f      	ldr	r1, [pc, #124]	; (800ad70 <HAL_PWREx_ConfigSupply+0xb0>)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4313      	orrs	r3, r2
 800acf8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800acfa:	f7fc fcc5 	bl	8007688 <HAL_GetTick>
 800acfe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ad00:	e009      	b.n	800ad16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ad02:	f7fc fcc1 	bl	8007688 <HAL_GetTick>
 800ad06:	4602      	mov	r2, r0
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	1ad3      	subs	r3, r2, r3
 800ad0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad10:	d901      	bls.n	800ad16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e028      	b.n	800ad68 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ad16:	4b16      	ldr	r3, [pc, #88]	; (800ad70 <HAL_PWREx_ConfigSupply+0xb0>)
 800ad18:	685b      	ldr	r3, [r3, #4]
 800ad1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad22:	d1ee      	bne.n	800ad02 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b1e      	cmp	r3, #30
 800ad28:	d008      	beq.n	800ad3c <HAL_PWREx_ConfigSupply+0x7c>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2b2e      	cmp	r3, #46	; 0x2e
 800ad2e:	d005      	beq.n	800ad3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b1d      	cmp	r3, #29
 800ad34:	d002      	beq.n	800ad3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2b2d      	cmp	r3, #45	; 0x2d
 800ad3a:	d114      	bne.n	800ad66 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ad3c:	f7fc fca4 	bl	8007688 <HAL_GetTick>
 800ad40:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ad42:	e009      	b.n	800ad58 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ad44:	f7fc fca0 	bl	8007688 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad52:	d901      	bls.n	800ad58 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e007      	b.n	800ad68 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ad58:	4b05      	ldr	r3, [pc, #20]	; (800ad70 <HAL_PWREx_ConfigSupply+0xb0>)
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad64:	d1ee      	bne.n	800ad44 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	58024800 	.word	0x58024800

0800ad74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800ad74:	b480      	push	{r7}
 800ad76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800ad78:	4b05      	ldr	r3, [pc, #20]	; (800ad90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ad7a:	68db      	ldr	r3, [r3, #12]
 800ad7c:	4a04      	ldr	r2, [pc, #16]	; (800ad90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ad7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad82:	60d3      	str	r3, [r2, #12]
}
 800ad84:	bf00      	nop
 800ad86:	46bd      	mov	sp, r7
 800ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	58024800 	.word	0x58024800

0800ad94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b08c      	sub	sp, #48	; 0x30
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	f000 bc1d 	b.w	800b5e2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f003 0301 	and.w	r3, r3, #1
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8087 	beq.w	800aec4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800adb6:	4b99      	ldr	r3, [pc, #612]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800adb8:	691b      	ldr	r3, [r3, #16]
 800adba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800adbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800adc0:	4b96      	ldr	r3, [pc, #600]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800adc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adc4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800adc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc8:	2b10      	cmp	r3, #16
 800adca:	d007      	beq.n	800addc <HAL_RCC_OscConfig+0x48>
 800adcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adce:	2b18      	cmp	r3, #24
 800add0:	d110      	bne.n	800adf4 <HAL_RCC_OscConfig+0x60>
 800add2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add4:	f003 0303 	and.w	r3, r3, #3
 800add8:	2b02      	cmp	r3, #2
 800adda:	d10b      	bne.n	800adf4 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800addc:	4b8f      	ldr	r3, [pc, #572]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d06c      	beq.n	800aec2 <HAL_RCC_OscConfig+0x12e>
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d168      	bne.n	800aec2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	e3f6      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adfc:	d106      	bne.n	800ae0c <HAL_RCC_OscConfig+0x78>
 800adfe:	4b87      	ldr	r3, [pc, #540]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	4a86      	ldr	r2, [pc, #536]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae08:	6013      	str	r3, [r2, #0]
 800ae0a:	e02e      	b.n	800ae6a <HAL_RCC_OscConfig+0xd6>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	685b      	ldr	r3, [r3, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10c      	bne.n	800ae2e <HAL_RCC_OscConfig+0x9a>
 800ae14:	4b81      	ldr	r3, [pc, #516]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	4a80      	ldr	r2, [pc, #512]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae1e:	6013      	str	r3, [r2, #0]
 800ae20:	4b7e      	ldr	r3, [pc, #504]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a7d      	ldr	r2, [pc, #500]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae2a:	6013      	str	r3, [r2, #0]
 800ae2c:	e01d      	b.n	800ae6a <HAL_RCC_OscConfig+0xd6>
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	685b      	ldr	r3, [r3, #4]
 800ae32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ae36:	d10c      	bne.n	800ae52 <HAL_RCC_OscConfig+0xbe>
 800ae38:	4b78      	ldr	r3, [pc, #480]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a77      	ldr	r2, [pc, #476]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ae42:	6013      	str	r3, [r2, #0]
 800ae44:	4b75      	ldr	r3, [pc, #468]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	4a74      	ldr	r2, [pc, #464]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ae4e:	6013      	str	r3, [r2, #0]
 800ae50:	e00b      	b.n	800ae6a <HAL_RCC_OscConfig+0xd6>
 800ae52:	4b72      	ldr	r3, [pc, #456]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a71      	ldr	r2, [pc, #452]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ae5c:	6013      	str	r3, [r2, #0]
 800ae5e:	4b6f      	ldr	r3, [pc, #444]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a6e      	ldr	r2, [pc, #440]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ae68:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d013      	beq.n	800ae9a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae72:	f7fc fc09 	bl	8007688 <HAL_GetTick>
 800ae76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae78:	e008      	b.n	800ae8c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ae7a:	f7fc fc05 	bl	8007688 <HAL_GetTick>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	2b64      	cmp	r3, #100	; 0x64
 800ae86:	d901      	bls.n	800ae8c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800ae88:	2303      	movs	r3, #3
 800ae8a:	e3aa      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ae8c:	4b63      	ldr	r3, [pc, #396]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d0f0      	beq.n	800ae7a <HAL_RCC_OscConfig+0xe6>
 800ae98:	e014      	b.n	800aec4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae9a:	f7fc fbf5 	bl	8007688 <HAL_GetTick>
 800ae9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aea0:	e008      	b.n	800aeb4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800aea2:	f7fc fbf1 	bl	8007688 <HAL_GetTick>
 800aea6:	4602      	mov	r2, r0
 800aea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	2b64      	cmp	r3, #100	; 0x64
 800aeae:	d901      	bls.n	800aeb4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e396      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aeb4:	4b59      	ldr	r3, [pc, #356]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d1f0      	bne.n	800aea2 <HAL_RCC_OscConfig+0x10e>
 800aec0:	e000      	b.n	800aec4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aec2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0302 	and.w	r3, r3, #2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	f000 80cb 	beq.w	800b068 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aed2:	4b52      	ldr	r3, [pc, #328]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aeda:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aedc:	4b4f      	ldr	r3, [pc, #316]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800aede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aee0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d007      	beq.n	800aef8 <HAL_RCC_OscConfig+0x164>
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	2b18      	cmp	r3, #24
 800aeec:	d156      	bne.n	800af9c <HAL_RCC_OscConfig+0x208>
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d151      	bne.n	800af9c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aef8:	4b48      	ldr	r3, [pc, #288]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0304 	and.w	r3, r3, #4
 800af00:	2b00      	cmp	r3, #0
 800af02:	d005      	beq.n	800af10 <HAL_RCC_OscConfig+0x17c>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e368      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800af10:	4b42      	ldr	r3, [pc, #264]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f023 0219 	bic.w	r2, r3, #25
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	493f      	ldr	r1, [pc, #252]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af1e:	4313      	orrs	r3, r2
 800af20:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800af22:	f7fc fbb1 	bl	8007688 <HAL_GetTick>
 800af26:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af28:	e008      	b.n	800af3c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800af2a:	f7fc fbad 	bl	8007688 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	2b02      	cmp	r3, #2
 800af36:	d901      	bls.n	800af3c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800af38:	2303      	movs	r3, #3
 800af3a:	e352      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800af3c:	4b37      	ldr	r3, [pc, #220]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	f003 0304 	and.w	r3, r3, #4
 800af44:	2b00      	cmp	r3, #0
 800af46:	d0f0      	beq.n	800af2a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af48:	f7fc fbce 	bl	80076e8 <HAL_GetREVID>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f241 0203 	movw	r2, #4099	; 0x1003
 800af52:	4293      	cmp	r3, r2
 800af54:	d817      	bhi.n	800af86 <HAL_RCC_OscConfig+0x1f2>
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	2b40      	cmp	r3, #64	; 0x40
 800af5c:	d108      	bne.n	800af70 <HAL_RCC_OscConfig+0x1dc>
 800af5e:	4b2f      	ldr	r3, [pc, #188]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800af66:	4a2d      	ldr	r2, [pc, #180]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af6e:	e07b      	b.n	800b068 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af70:	4b2a      	ldr	r3, [pc, #168]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	691b      	ldr	r3, [r3, #16]
 800af7c:	031b      	lsls	r3, r3, #12
 800af7e:	4927      	ldr	r1, [pc, #156]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af80:	4313      	orrs	r3, r2
 800af82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af84:	e070      	b.n	800b068 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800af86:	4b25      	ldr	r3, [pc, #148]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	691b      	ldr	r3, [r3, #16]
 800af92:	061b      	lsls	r3, r3, #24
 800af94:	4921      	ldr	r1, [pc, #132]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800af96:	4313      	orrs	r3, r2
 800af98:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800af9a:	e065      	b.n	800b068 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	68db      	ldr	r3, [r3, #12]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d048      	beq.n	800b036 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800afa4:	4b1d      	ldr	r3, [pc, #116]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f023 0219 	bic.w	r2, r3, #25
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	68db      	ldr	r3, [r3, #12]
 800afb0:	491a      	ldr	r1, [pc, #104]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800afb2:	4313      	orrs	r3, r2
 800afb4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afb6:	f7fc fb67 	bl	8007688 <HAL_GetTick>
 800afba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800afbc:	e008      	b.n	800afd0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800afbe:	f7fc fb63 	bl	8007688 <HAL_GetTick>
 800afc2:	4602      	mov	r2, r0
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	1ad3      	subs	r3, r2, r3
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d901      	bls.n	800afd0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800afcc:	2303      	movs	r3, #3
 800afce:	e308      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800afd0:	4b12      	ldr	r3, [pc, #72]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0304 	and.w	r3, r3, #4
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d0f0      	beq.n	800afbe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800afdc:	f7fc fb84 	bl	80076e8 <HAL_GetREVID>
 800afe0:	4603      	mov	r3, r0
 800afe2:	f241 0203 	movw	r2, #4099	; 0x1003
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d81a      	bhi.n	800b020 <HAL_RCC_OscConfig+0x28c>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	691b      	ldr	r3, [r3, #16]
 800afee:	2b40      	cmp	r3, #64	; 0x40
 800aff0:	d108      	bne.n	800b004 <HAL_RCC_OscConfig+0x270>
 800aff2:	4b0a      	ldr	r3, [pc, #40]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800aff4:	685b      	ldr	r3, [r3, #4]
 800aff6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800affa:	4a08      	ldr	r2, [pc, #32]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800affc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b000:	6053      	str	r3, [r2, #4]
 800b002:	e031      	b.n	800b068 <HAL_RCC_OscConfig+0x2d4>
 800b004:	4b05      	ldr	r3, [pc, #20]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	691b      	ldr	r3, [r3, #16]
 800b010:	031b      	lsls	r3, r3, #12
 800b012:	4902      	ldr	r1, [pc, #8]	; (800b01c <HAL_RCC_OscConfig+0x288>)
 800b014:	4313      	orrs	r3, r2
 800b016:	604b      	str	r3, [r1, #4]
 800b018:	e026      	b.n	800b068 <HAL_RCC_OscConfig+0x2d4>
 800b01a:	bf00      	nop
 800b01c:	58024400 	.word	0x58024400
 800b020:	4b9a      	ldr	r3, [pc, #616]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	691b      	ldr	r3, [r3, #16]
 800b02c:	061b      	lsls	r3, r3, #24
 800b02e:	4997      	ldr	r1, [pc, #604]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b030:	4313      	orrs	r3, r2
 800b032:	604b      	str	r3, [r1, #4]
 800b034:	e018      	b.n	800b068 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b036:	4b95      	ldr	r3, [pc, #596]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a94      	ldr	r2, [pc, #592]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b03c:	f023 0301 	bic.w	r3, r3, #1
 800b040:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b042:	f7fc fb21 	bl	8007688 <HAL_GetTick>
 800b046:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b048:	e008      	b.n	800b05c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b04a:	f7fc fb1d 	bl	8007688 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	d901      	bls.n	800b05c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e2c2      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b05c:	4b8b      	ldr	r3, [pc, #556]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0304 	and.w	r3, r3, #4
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1f0      	bne.n	800b04a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f003 0310 	and.w	r3, r3, #16
 800b070:	2b00      	cmp	r3, #0
 800b072:	f000 80a9 	beq.w	800b1c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b076:	4b85      	ldr	r3, [pc, #532]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b078:	691b      	ldr	r3, [r3, #16]
 800b07a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b07e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b080:	4b82      	ldr	r3, [pc, #520]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b084:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	2b08      	cmp	r3, #8
 800b08a:	d007      	beq.n	800b09c <HAL_RCC_OscConfig+0x308>
 800b08c:	69bb      	ldr	r3, [r7, #24]
 800b08e:	2b18      	cmp	r3, #24
 800b090:	d13a      	bne.n	800b108 <HAL_RCC_OscConfig+0x374>
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f003 0303 	and.w	r3, r3, #3
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d135      	bne.n	800b108 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b09c:	4b7b      	ldr	r3, [pc, #492]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d005      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x320>
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	69db      	ldr	r3, [r3, #28]
 800b0ac:	2b80      	cmp	r3, #128	; 0x80
 800b0ae:	d001      	beq.n	800b0b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e296      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b0b4:	f7fc fb18 	bl	80076e8 <HAL_GetREVID>
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	f241 0203 	movw	r2, #4099	; 0x1003
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d817      	bhi.n	800b0f2 <HAL_RCC_OscConfig+0x35e>
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	6a1b      	ldr	r3, [r3, #32]
 800b0c6:	2b20      	cmp	r3, #32
 800b0c8:	d108      	bne.n	800b0dc <HAL_RCC_OscConfig+0x348>
 800b0ca:	4b70      	ldr	r3, [pc, #448]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b0d2:	4a6e      	ldr	r2, [pc, #440]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b0d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b0d8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b0da:	e075      	b.n	800b1c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b0dc:	4b6b      	ldr	r3, [pc, #428]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b0de:	685b      	ldr	r3, [r3, #4]
 800b0e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	6a1b      	ldr	r3, [r3, #32]
 800b0e8:	069b      	lsls	r3, r3, #26
 800b0ea:	4968      	ldr	r1, [pc, #416]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b0f0:	e06a      	b.n	800b1c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b0f2:	4b66      	ldr	r3, [pc, #408]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b0f4:	68db      	ldr	r3, [r3, #12]
 800b0f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6a1b      	ldr	r3, [r3, #32]
 800b0fe:	061b      	lsls	r3, r3, #24
 800b100:	4962      	ldr	r1, [pc, #392]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b102:	4313      	orrs	r3, r2
 800b104:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b106:	e05f      	b.n	800b1c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	69db      	ldr	r3, [r3, #28]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d042      	beq.n	800b196 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b110:	4b5e      	ldr	r3, [pc, #376]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4a5d      	ldr	r2, [pc, #372]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b11a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b11c:	f7fc fab4 	bl	8007688 <HAL_GetTick>
 800b120:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b122:	e008      	b.n	800b136 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b124:	f7fc fab0 	bl	8007688 <HAL_GetTick>
 800b128:	4602      	mov	r2, r0
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	1ad3      	subs	r3, r2, r3
 800b12e:	2b02      	cmp	r3, #2
 800b130:	d901      	bls.n	800b136 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b132:	2303      	movs	r3, #3
 800b134:	e255      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b136:	4b55      	ldr	r3, [pc, #340]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0f0      	beq.n	800b124 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b142:	f7fc fad1 	bl	80076e8 <HAL_GetREVID>
 800b146:	4603      	mov	r3, r0
 800b148:	f241 0203 	movw	r2, #4099	; 0x1003
 800b14c:	4293      	cmp	r3, r2
 800b14e:	d817      	bhi.n	800b180 <HAL_RCC_OscConfig+0x3ec>
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	2b20      	cmp	r3, #32
 800b156:	d108      	bne.n	800b16a <HAL_RCC_OscConfig+0x3d6>
 800b158:	4b4c      	ldr	r3, [pc, #304]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b15a:	685b      	ldr	r3, [r3, #4]
 800b15c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b160:	4a4a      	ldr	r2, [pc, #296]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b162:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b166:	6053      	str	r3, [r2, #4]
 800b168:	e02e      	b.n	800b1c8 <HAL_RCC_OscConfig+0x434>
 800b16a:	4b48      	ldr	r3, [pc, #288]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a1b      	ldr	r3, [r3, #32]
 800b176:	069b      	lsls	r3, r3, #26
 800b178:	4944      	ldr	r1, [pc, #272]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	604b      	str	r3, [r1, #4]
 800b17e:	e023      	b.n	800b1c8 <HAL_RCC_OscConfig+0x434>
 800b180:	4b42      	ldr	r3, [pc, #264]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	061b      	lsls	r3, r3, #24
 800b18e:	493f      	ldr	r1, [pc, #252]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b190:	4313      	orrs	r3, r2
 800b192:	60cb      	str	r3, [r1, #12]
 800b194:	e018      	b.n	800b1c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b196:	4b3d      	ldr	r3, [pc, #244]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	4a3c      	ldr	r2, [pc, #240]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b19c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1a2:	f7fc fa71 	bl	8007688 <HAL_GetTick>
 800b1a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b1a8:	e008      	b.n	800b1bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b1aa:	f7fc fa6d 	bl	8007688 <HAL_GetTick>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	1ad3      	subs	r3, r2, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d901      	bls.n	800b1bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e212      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b1bc:	4b33      	ldr	r3, [pc, #204]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d1f0      	bne.n	800b1aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0308 	and.w	r3, r3, #8
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d036      	beq.n	800b242 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	695b      	ldr	r3, [r3, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d019      	beq.n	800b210 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1dc:	4b2b      	ldr	r3, [pc, #172]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b1de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1e0:	4a2a      	ldr	r2, [pc, #168]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b1e2:	f043 0301 	orr.w	r3, r3, #1
 800b1e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b1e8:	f7fc fa4e 	bl	8007688 <HAL_GetTick>
 800b1ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b1ee:	e008      	b.n	800b202 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b1f0:	f7fc fa4a 	bl	8007688 <HAL_GetTick>
 800b1f4:	4602      	mov	r2, r0
 800b1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	2b02      	cmp	r3, #2
 800b1fc:	d901      	bls.n	800b202 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b1fe:	2303      	movs	r3, #3
 800b200:	e1ef      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b202:	4b22      	ldr	r3, [pc, #136]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b206:	f003 0302 	and.w	r3, r3, #2
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d0f0      	beq.n	800b1f0 <HAL_RCC_OscConfig+0x45c>
 800b20e:	e018      	b.n	800b242 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b210:	4b1e      	ldr	r3, [pc, #120]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b214:	4a1d      	ldr	r2, [pc, #116]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b216:	f023 0301 	bic.w	r3, r3, #1
 800b21a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b21c:	f7fc fa34 	bl	8007688 <HAL_GetTick>
 800b220:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b222:	e008      	b.n	800b236 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b224:	f7fc fa30 	bl	8007688 <HAL_GetTick>
 800b228:	4602      	mov	r2, r0
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	1ad3      	subs	r3, r2, r3
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d901      	bls.n	800b236 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b232:	2303      	movs	r3, #3
 800b234:	e1d5      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b236:	4b15      	ldr	r3, [pc, #84]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b238:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b23a:	f003 0302 	and.w	r3, r3, #2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d1f0      	bne.n	800b224 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0320 	and.w	r3, r3, #32
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d039      	beq.n	800b2c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	699b      	ldr	r3, [r3, #24]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d01c      	beq.n	800b290 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b256:	4b0d      	ldr	r3, [pc, #52]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a0c      	ldr	r2, [pc, #48]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b25c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b260:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b262:	f7fc fa11 	bl	8007688 <HAL_GetTick>
 800b266:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b268:	e008      	b.n	800b27c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b26a:	f7fc fa0d 	bl	8007688 <HAL_GetTick>
 800b26e:	4602      	mov	r2, r0
 800b270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b272:	1ad3      	subs	r3, r2, r3
 800b274:	2b02      	cmp	r3, #2
 800b276:	d901      	bls.n	800b27c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b278:	2303      	movs	r3, #3
 800b27a:	e1b2      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b27c:	4b03      	ldr	r3, [pc, #12]	; (800b28c <HAL_RCC_OscConfig+0x4f8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d0f0      	beq.n	800b26a <HAL_RCC_OscConfig+0x4d6>
 800b288:	e01b      	b.n	800b2c2 <HAL_RCC_OscConfig+0x52e>
 800b28a:	bf00      	nop
 800b28c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b290:	4b9b      	ldr	r3, [pc, #620]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a9a      	ldr	r2, [pc, #616]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b296:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b29a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b29c:	f7fc f9f4 	bl	8007688 <HAL_GetTick>
 800b2a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2a2:	e008      	b.n	800b2b6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b2a4:	f7fc f9f0 	bl	8007688 <HAL_GetTick>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ac:	1ad3      	subs	r3, r2, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d901      	bls.n	800b2b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b2b2:	2303      	movs	r3, #3
 800b2b4:	e195      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b2b6:	4b92      	ldr	r3, [pc, #584]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1f0      	bne.n	800b2a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f003 0304 	and.w	r3, r3, #4
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	f000 8081 	beq.w	800b3d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b2d0:	4b8c      	ldr	r3, [pc, #560]	; (800b504 <HAL_RCC_OscConfig+0x770>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a8b      	ldr	r2, [pc, #556]	; (800b504 <HAL_RCC_OscConfig+0x770>)
 800b2d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2dc:	f7fc f9d4 	bl	8007688 <HAL_GetTick>
 800b2e0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2e2:	e008      	b.n	800b2f6 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b2e4:	f7fc f9d0 	bl	8007688 <HAL_GetTick>
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ec:	1ad3      	subs	r3, r2, r3
 800b2ee:	2b64      	cmp	r3, #100	; 0x64
 800b2f0:	d901      	bls.n	800b2f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	e175      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2f6:	4b83      	ldr	r3, [pc, #524]	; (800b504 <HAL_RCC_OscConfig+0x770>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d0f0      	beq.n	800b2e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	2b01      	cmp	r3, #1
 800b308:	d106      	bne.n	800b318 <HAL_RCC_OscConfig+0x584>
 800b30a:	4b7d      	ldr	r3, [pc, #500]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b30c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b30e:	4a7c      	ldr	r2, [pc, #496]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b310:	f043 0301 	orr.w	r3, r3, #1
 800b314:	6713      	str	r3, [r2, #112]	; 0x70
 800b316:	e02d      	b.n	800b374 <HAL_RCC_OscConfig+0x5e0>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	689b      	ldr	r3, [r3, #8]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10c      	bne.n	800b33a <HAL_RCC_OscConfig+0x5a6>
 800b320:	4b77      	ldr	r3, [pc, #476]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b324:	4a76      	ldr	r2, [pc, #472]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b326:	f023 0301 	bic.w	r3, r3, #1
 800b32a:	6713      	str	r3, [r2, #112]	; 0x70
 800b32c:	4b74      	ldr	r3, [pc, #464]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b32e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b330:	4a73      	ldr	r2, [pc, #460]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b332:	f023 0304 	bic.w	r3, r3, #4
 800b336:	6713      	str	r3, [r2, #112]	; 0x70
 800b338:	e01c      	b.n	800b374 <HAL_RCC_OscConfig+0x5e0>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	689b      	ldr	r3, [r3, #8]
 800b33e:	2b05      	cmp	r3, #5
 800b340:	d10c      	bne.n	800b35c <HAL_RCC_OscConfig+0x5c8>
 800b342:	4b6f      	ldr	r3, [pc, #444]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b346:	4a6e      	ldr	r2, [pc, #440]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b348:	f043 0304 	orr.w	r3, r3, #4
 800b34c:	6713      	str	r3, [r2, #112]	; 0x70
 800b34e:	4b6c      	ldr	r3, [pc, #432]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b352:	4a6b      	ldr	r2, [pc, #428]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b354:	f043 0301 	orr.w	r3, r3, #1
 800b358:	6713      	str	r3, [r2, #112]	; 0x70
 800b35a:	e00b      	b.n	800b374 <HAL_RCC_OscConfig+0x5e0>
 800b35c:	4b68      	ldr	r3, [pc, #416]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b35e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b360:	4a67      	ldr	r2, [pc, #412]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b362:	f023 0301 	bic.w	r3, r3, #1
 800b366:	6713      	str	r3, [r2, #112]	; 0x70
 800b368:	4b65      	ldr	r3, [pc, #404]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b36a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b36c:	4a64      	ldr	r2, [pc, #400]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b36e:	f023 0304 	bic.w	r3, r3, #4
 800b372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d015      	beq.n	800b3a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b37c:	f7fc f984 	bl	8007688 <HAL_GetTick>
 800b380:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b382:	e00a      	b.n	800b39a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b384:	f7fc f980 	bl	8007688 <HAL_GetTick>
 800b388:	4602      	mov	r2, r0
 800b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b38c:	1ad3      	subs	r3, r2, r3
 800b38e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b392:	4293      	cmp	r3, r2
 800b394:	d901      	bls.n	800b39a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b396:	2303      	movs	r3, #3
 800b398:	e123      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b39a:	4b59      	ldr	r3, [pc, #356]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b39c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b39e:	f003 0302 	and.w	r3, r3, #2
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d0ee      	beq.n	800b384 <HAL_RCC_OscConfig+0x5f0>
 800b3a6:	e014      	b.n	800b3d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3a8:	f7fc f96e 	bl	8007688 <HAL_GetTick>
 800b3ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3ae:	e00a      	b.n	800b3c6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b3b0:	f7fc f96a 	bl	8007688 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d901      	bls.n	800b3c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b3c2:	2303      	movs	r3, #3
 800b3c4:	e10d      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b3c6:	4b4e      	ldr	r3, [pc, #312]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ca:	f003 0302 	and.w	r3, r3, #2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d1ee      	bne.n	800b3b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	f000 8102 	beq.w	800b5e0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b3dc:	4b48      	ldr	r3, [pc, #288]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b3de:	691b      	ldr	r3, [r3, #16]
 800b3e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b3e4:	2b18      	cmp	r3, #24
 800b3e6:	f000 80bd 	beq.w	800b564 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3ee:	2b02      	cmp	r3, #2
 800b3f0:	f040 809e 	bne.w	800b530 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b3f4:	4b42      	ldr	r3, [pc, #264]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a41      	ldr	r2, [pc, #260]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b3fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b3fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b400:	f7fc f942 	bl	8007688 <HAL_GetTick>
 800b404:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b406:	e008      	b.n	800b41a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b408:	f7fc f93e 	bl	8007688 <HAL_GetTick>
 800b40c:	4602      	mov	r2, r0
 800b40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b410:	1ad3      	subs	r3, r2, r3
 800b412:	2b02      	cmp	r3, #2
 800b414:	d901      	bls.n	800b41a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b416:	2303      	movs	r3, #3
 800b418:	e0e3      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b41a:	4b39      	ldr	r3, [pc, #228]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d1f0      	bne.n	800b408 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b426:	4b36      	ldr	r3, [pc, #216]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b428:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b42a:	4b37      	ldr	r3, [pc, #220]	; (800b508 <HAL_RCC_OscConfig+0x774>)
 800b42c:	4013      	ands	r3, r2
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b436:	0112      	lsls	r2, r2, #4
 800b438:	430a      	orrs	r2, r1
 800b43a:	4931      	ldr	r1, [pc, #196]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b43c:	4313      	orrs	r3, r2
 800b43e:	628b      	str	r3, [r1, #40]	; 0x28
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b444:	3b01      	subs	r3, #1
 800b446:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44e:	3b01      	subs	r3, #1
 800b450:	025b      	lsls	r3, r3, #9
 800b452:	b29b      	uxth	r3, r3
 800b454:	431a      	orrs	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45a:	3b01      	subs	r3, #1
 800b45c:	041b      	lsls	r3, r3, #16
 800b45e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b462:	431a      	orrs	r2, r3
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b468:	3b01      	subs	r3, #1
 800b46a:	061b      	lsls	r3, r3, #24
 800b46c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b470:	4923      	ldr	r1, [pc, #140]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b472:	4313      	orrs	r3, r2
 800b474:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b476:	4b22      	ldr	r3, [pc, #136]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47a:	4a21      	ldr	r2, [pc, #132]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b47c:	f023 0301 	bic.w	r3, r3, #1
 800b480:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b482:	4b1f      	ldr	r3, [pc, #124]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b486:	4b21      	ldr	r3, [pc, #132]	; (800b50c <HAL_RCC_OscConfig+0x778>)
 800b488:	4013      	ands	r3, r2
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b48e:	00d2      	lsls	r2, r2, #3
 800b490:	491b      	ldr	r1, [pc, #108]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b492:	4313      	orrs	r3, r2
 800b494:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b496:	4b1a      	ldr	r3, [pc, #104]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	f023 020c 	bic.w	r2, r3, #12
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a2:	4917      	ldr	r1, [pc, #92]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b4a8:	4b15      	ldr	r3, [pc, #84]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ac:	f023 0202 	bic.w	r2, r3, #2
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4b4:	4912      	ldr	r1, [pc, #72]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b4ba:	4b11      	ldr	r3, [pc, #68]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4be:	4a10      	ldr	r2, [pc, #64]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b4c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4c6:	4b0e      	ldr	r3, [pc, #56]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	4a0d      	ldr	r2, [pc, #52]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b4d2:	4b0b      	ldr	r3, [pc, #44]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d6:	4a0a      	ldr	r2, [pc, #40]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b4dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b4de:	4b08      	ldr	r3, [pc, #32]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4e2:	4a07      	ldr	r2, [pc, #28]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4e4:	f043 0301 	orr.w	r3, r3, #1
 800b4e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4ea:	4b05      	ldr	r3, [pc, #20]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	4a04      	ldr	r2, [pc, #16]	; (800b500 <HAL_RCC_OscConfig+0x76c>)
 800b4f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f6:	f7fc f8c7 	bl	8007688 <HAL_GetTick>
 800b4fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b4fc:	e011      	b.n	800b522 <HAL_RCC_OscConfig+0x78e>
 800b4fe:	bf00      	nop
 800b500:	58024400 	.word	0x58024400
 800b504:	58024800 	.word	0x58024800
 800b508:	fffffc0c 	.word	0xfffffc0c
 800b50c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b510:	f7fc f8ba 	bl	8007688 <HAL_GetTick>
 800b514:	4602      	mov	r2, r0
 800b516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b518:	1ad3      	subs	r3, r2, r3
 800b51a:	2b02      	cmp	r3, #2
 800b51c:	d901      	bls.n	800b522 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e05f      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b522:	4b32      	ldr	r3, [pc, #200]	; (800b5ec <HAL_RCC_OscConfig+0x858>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d0f0      	beq.n	800b510 <HAL_RCC_OscConfig+0x77c>
 800b52e:	e057      	b.n	800b5e0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b530:	4b2e      	ldr	r3, [pc, #184]	; (800b5ec <HAL_RCC_OscConfig+0x858>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	4a2d      	ldr	r2, [pc, #180]	; (800b5ec <HAL_RCC_OscConfig+0x858>)
 800b536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b53a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b53c:	f7fc f8a4 	bl	8007688 <HAL_GetTick>
 800b540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b542:	e008      	b.n	800b556 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b544:	f7fc f8a0 	bl	8007688 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d901      	bls.n	800b556 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e045      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b556:	4b25      	ldr	r3, [pc, #148]	; (800b5ec <HAL_RCC_OscConfig+0x858>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1f0      	bne.n	800b544 <HAL_RCC_OscConfig+0x7b0>
 800b562:	e03d      	b.n	800b5e0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b564:	4b21      	ldr	r3, [pc, #132]	; (800b5ec <HAL_RCC_OscConfig+0x858>)
 800b566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b568:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b56a:	4b20      	ldr	r3, [pc, #128]	; (800b5ec <HAL_RCC_OscConfig+0x858>)
 800b56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b56e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b574:	2b01      	cmp	r3, #1
 800b576:	d031      	beq.n	800b5dc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	f003 0203 	and.w	r2, r3, #3
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b582:	429a      	cmp	r2, r3
 800b584:	d12a      	bne.n	800b5dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	091b      	lsrs	r3, r3, #4
 800b58a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b592:	429a      	cmp	r2, r3
 800b594:	d122      	bne.n	800b5dc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d11a      	bne.n	800b5dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	0a5b      	lsrs	r3, r3, #9
 800b5aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5b2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d111      	bne.n	800b5dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	0c1b      	lsrs	r3, r3, #16
 800b5bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d108      	bne.n	800b5dc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	0e1b      	lsrs	r3, r3, #24
 800b5ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d001      	beq.n	800b5e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	e000      	b.n	800b5e2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b5e0:	2300      	movs	r3, #0
}
 800b5e2:	4618      	mov	r0, r3
 800b5e4:	3730      	adds	r7, #48	; 0x30
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	58024400 	.word	0x58024400

0800b5f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b086      	sub	sp, #24
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b600:	2301      	movs	r3, #1
 800b602:	e19c      	b.n	800b93e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b604:	4b8a      	ldr	r3, [pc, #552]	; (800b830 <HAL_RCC_ClockConfig+0x240>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	f003 030f 	and.w	r3, r3, #15
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d910      	bls.n	800b634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b612:	4b87      	ldr	r3, [pc, #540]	; (800b830 <HAL_RCC_ClockConfig+0x240>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f023 020f 	bic.w	r2, r3, #15
 800b61a:	4985      	ldr	r1, [pc, #532]	; (800b830 <HAL_RCC_ClockConfig+0x240>)
 800b61c:	683b      	ldr	r3, [r7, #0]
 800b61e:	4313      	orrs	r3, r2
 800b620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b622:	4b83      	ldr	r3, [pc, #524]	; (800b830 <HAL_RCC_ClockConfig+0x240>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 030f 	and.w	r3, r3, #15
 800b62a:	683a      	ldr	r2, [r7, #0]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	d001      	beq.n	800b634 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	e184      	b.n	800b93e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f003 0304 	and.w	r3, r3, #4
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d010      	beq.n	800b662 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691a      	ldr	r2, [r3, #16]
 800b644:	4b7b      	ldr	r3, [pc, #492]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b646:	699b      	ldr	r3, [r3, #24]
 800b648:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d908      	bls.n	800b662 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b650:	4b78      	ldr	r3, [pc, #480]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b652:	699b      	ldr	r3, [r3, #24]
 800b654:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	4975      	ldr	r1, [pc, #468]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0308 	and.w	r3, r3, #8
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d010      	beq.n	800b690 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	695a      	ldr	r2, [r3, #20]
 800b672:	4b70      	ldr	r3, [pc, #448]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b674:	69db      	ldr	r3, [r3, #28]
 800b676:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d908      	bls.n	800b690 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b67e:	4b6d      	ldr	r3, [pc, #436]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b680:	69db      	ldr	r3, [r3, #28]
 800b682:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	496a      	ldr	r1, [pc, #424]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b68c:	4313      	orrs	r3, r2
 800b68e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0310 	and.w	r3, r3, #16
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d010      	beq.n	800b6be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	699a      	ldr	r2, [r3, #24]
 800b6a0:	4b64      	ldr	r3, [pc, #400]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b6a2:	69db      	ldr	r3, [r3, #28]
 800b6a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6a8:	429a      	cmp	r2, r3
 800b6aa:	d908      	bls.n	800b6be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b6ac:	4b61      	ldr	r3, [pc, #388]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b6ae:	69db      	ldr	r3, [r3, #28]
 800b6b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	699b      	ldr	r3, [r3, #24]
 800b6b8:	495e      	ldr	r1, [pc, #376]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b6ba:	4313      	orrs	r3, r2
 800b6bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	f003 0320 	and.w	r3, r3, #32
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d010      	beq.n	800b6ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	69da      	ldr	r2, [r3, #28]
 800b6ce:	4b59      	ldr	r3, [pc, #356]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b6d0:	6a1b      	ldr	r3, [r3, #32]
 800b6d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d908      	bls.n	800b6ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b6da:	4b56      	ldr	r3, [pc, #344]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b6dc:	6a1b      	ldr	r3, [r3, #32]
 800b6de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	69db      	ldr	r3, [r3, #28]
 800b6e6:	4953      	ldr	r1, [pc, #332]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f003 0302 	and.w	r3, r3, #2
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d010      	beq.n	800b71a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	68da      	ldr	r2, [r3, #12]
 800b6fc:	4b4d      	ldr	r3, [pc, #308]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b6fe:	699b      	ldr	r3, [r3, #24]
 800b700:	f003 030f 	and.w	r3, r3, #15
 800b704:	429a      	cmp	r2, r3
 800b706:	d908      	bls.n	800b71a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b708:	4b4a      	ldr	r3, [pc, #296]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b70a:	699b      	ldr	r3, [r3, #24]
 800b70c:	f023 020f 	bic.w	r2, r3, #15
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	4947      	ldr	r1, [pc, #284]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b716:	4313      	orrs	r3, r2
 800b718:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	2b00      	cmp	r3, #0
 800b724:	d055      	beq.n	800b7d2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b726:	4b43      	ldr	r3, [pc, #268]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	689b      	ldr	r3, [r3, #8]
 800b732:	4940      	ldr	r1, [pc, #256]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b734:	4313      	orrs	r3, r2
 800b736:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	d107      	bne.n	800b750 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b740:	4b3c      	ldr	r3, [pc, #240]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d121      	bne.n	800b790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	e0f6      	b.n	800b93e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685b      	ldr	r3, [r3, #4]
 800b754:	2b03      	cmp	r3, #3
 800b756:	d107      	bne.n	800b768 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b758:	4b36      	ldr	r3, [pc, #216]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b760:	2b00      	cmp	r3, #0
 800b762:	d115      	bne.n	800b790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b764:	2301      	movs	r3, #1
 800b766:	e0ea      	b.n	800b93e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d107      	bne.n	800b780 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b770:	4b30      	ldr	r3, [pc, #192]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d109      	bne.n	800b790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e0de      	b.n	800b93e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b780:	4b2c      	ldr	r3, [pc, #176]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f003 0304 	and.w	r3, r3, #4
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d101      	bne.n	800b790 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	e0d6      	b.n	800b93e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b790:	4b28      	ldr	r3, [pc, #160]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b792:	691b      	ldr	r3, [r3, #16]
 800b794:	f023 0207 	bic.w	r2, r3, #7
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	4925      	ldr	r1, [pc, #148]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b7a2:	f7fb ff71 	bl	8007688 <HAL_GetTick>
 800b7a6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7a8:	e00a      	b.n	800b7c0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7aa:	f7fb ff6d 	bl	8007688 <HAL_GetTick>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	1ad3      	subs	r3, r2, r3
 800b7b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d901      	bls.n	800b7c0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b7bc:	2303      	movs	r3, #3
 800b7be:	e0be      	b.n	800b93e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b7c0:	4b1c      	ldr	r3, [pc, #112]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b7c2:	691b      	ldr	r3, [r3, #16]
 800b7c4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	00db      	lsls	r3, r3, #3
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d1eb      	bne.n	800b7aa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	f003 0302 	and.w	r3, r3, #2
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d010      	beq.n	800b800 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	68da      	ldr	r2, [r3, #12]
 800b7e2:	4b14      	ldr	r3, [pc, #80]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b7e4:	699b      	ldr	r3, [r3, #24]
 800b7e6:	f003 030f 	and.w	r3, r3, #15
 800b7ea:	429a      	cmp	r2, r3
 800b7ec:	d208      	bcs.n	800b800 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b7ee:	4b11      	ldr	r3, [pc, #68]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	f023 020f 	bic.w	r2, r3, #15
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	68db      	ldr	r3, [r3, #12]
 800b7fa:	490e      	ldr	r1, [pc, #56]	; (800b834 <HAL_RCC_ClockConfig+0x244>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b800:	4b0b      	ldr	r3, [pc, #44]	; (800b830 <HAL_RCC_ClockConfig+0x240>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 030f 	and.w	r3, r3, #15
 800b808:	683a      	ldr	r2, [r7, #0]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d214      	bcs.n	800b838 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b80e:	4b08      	ldr	r3, [pc, #32]	; (800b830 <HAL_RCC_ClockConfig+0x240>)
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	f023 020f 	bic.w	r2, r3, #15
 800b816:	4906      	ldr	r1, [pc, #24]	; (800b830 <HAL_RCC_ClockConfig+0x240>)
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	4313      	orrs	r3, r2
 800b81c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b81e:	4b04      	ldr	r3, [pc, #16]	; (800b830 <HAL_RCC_ClockConfig+0x240>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	f003 030f 	and.w	r3, r3, #15
 800b826:	683a      	ldr	r2, [r7, #0]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d005      	beq.n	800b838 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b82c:	2301      	movs	r3, #1
 800b82e:	e086      	b.n	800b93e <HAL_RCC_ClockConfig+0x34e>
 800b830:	52002000 	.word	0x52002000
 800b834:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0304 	and.w	r3, r3, #4
 800b840:	2b00      	cmp	r3, #0
 800b842:	d010      	beq.n	800b866 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691a      	ldr	r2, [r3, #16]
 800b848:	4b3f      	ldr	r3, [pc, #252]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b84a:	699b      	ldr	r3, [r3, #24]
 800b84c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b850:	429a      	cmp	r2, r3
 800b852:	d208      	bcs.n	800b866 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b854:	4b3c      	ldr	r3, [pc, #240]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	4939      	ldr	r1, [pc, #228]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b862:	4313      	orrs	r3, r2
 800b864:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f003 0308 	and.w	r3, r3, #8
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d010      	beq.n	800b894 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	695a      	ldr	r2, [r3, #20]
 800b876:	4b34      	ldr	r3, [pc, #208]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b878:	69db      	ldr	r3, [r3, #28]
 800b87a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b87e:	429a      	cmp	r2, r3
 800b880:	d208      	bcs.n	800b894 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b882:	4b31      	ldr	r3, [pc, #196]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b884:	69db      	ldr	r3, [r3, #28]
 800b886:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	492e      	ldr	r1, [pc, #184]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b890:	4313      	orrs	r3, r2
 800b892:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0310 	and.w	r3, r3, #16
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d010      	beq.n	800b8c2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	699a      	ldr	r2, [r3, #24]
 800b8a4:	4b28      	ldr	r3, [pc, #160]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b8a6:	69db      	ldr	r3, [r3, #28]
 800b8a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d208      	bcs.n	800b8c2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b8b0:	4b25      	ldr	r3, [pc, #148]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b8b2:	69db      	ldr	r3, [r3, #28]
 800b8b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	699b      	ldr	r3, [r3, #24]
 800b8bc:	4922      	ldr	r1, [pc, #136]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 0320 	and.w	r3, r3, #32
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d010      	beq.n	800b8f0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	69da      	ldr	r2, [r3, #28]
 800b8d2:	4b1d      	ldr	r3, [pc, #116]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b8d4:	6a1b      	ldr	r3, [r3, #32]
 800b8d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d208      	bcs.n	800b8f0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b8de:	4b1a      	ldr	r3, [pc, #104]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b8e0:	6a1b      	ldr	r3, [r3, #32]
 800b8e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	69db      	ldr	r3, [r3, #28]
 800b8ea:	4917      	ldr	r1, [pc, #92]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b8f0:	f000 f834 	bl	800b95c <HAL_RCC_GetSysClockFreq>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	4b14      	ldr	r3, [pc, #80]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	0a1b      	lsrs	r3, r3, #8
 800b8fc:	f003 030f 	and.w	r3, r3, #15
 800b900:	4912      	ldr	r1, [pc, #72]	; (800b94c <HAL_RCC_ClockConfig+0x35c>)
 800b902:	5ccb      	ldrb	r3, [r1, r3]
 800b904:	f003 031f 	and.w	r3, r3, #31
 800b908:	fa22 f303 	lsr.w	r3, r2, r3
 800b90c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b90e:	4b0e      	ldr	r3, [pc, #56]	; (800b948 <HAL_RCC_ClockConfig+0x358>)
 800b910:	699b      	ldr	r3, [r3, #24]
 800b912:	f003 030f 	and.w	r3, r3, #15
 800b916:	4a0d      	ldr	r2, [pc, #52]	; (800b94c <HAL_RCC_ClockConfig+0x35c>)
 800b918:	5cd3      	ldrb	r3, [r2, r3]
 800b91a:	f003 031f 	and.w	r3, r3, #31
 800b91e:	693a      	ldr	r2, [r7, #16]
 800b920:	fa22 f303 	lsr.w	r3, r2, r3
 800b924:	4a0a      	ldr	r2, [pc, #40]	; (800b950 <HAL_RCC_ClockConfig+0x360>)
 800b926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b928:	4a0a      	ldr	r2, [pc, #40]	; (800b954 <HAL_RCC_ClockConfig+0x364>)
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800b92e:	4b0a      	ldr	r3, [pc, #40]	; (800b958 <HAL_RCC_ClockConfig+0x368>)
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4618      	mov	r0, r3
 800b934:	f7fb fe5e 	bl	80075f4 <HAL_InitTick>
 800b938:	4603      	mov	r3, r0
 800b93a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	58024400 	.word	0x58024400
 800b94c:	08011018 	.word	0x08011018
 800b950:	24000008 	.word	0x24000008
 800b954:	24000004 	.word	0x24000004
 800b958:	2400001c 	.word	0x2400001c

0800b95c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b089      	sub	sp, #36	; 0x24
 800b960:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b962:	4bb3      	ldr	r3, [pc, #716]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b96a:	2b18      	cmp	r3, #24
 800b96c:	f200 8155 	bhi.w	800bc1a <HAL_RCC_GetSysClockFreq+0x2be>
 800b970:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b976:	bf00      	nop
 800b978:	0800b9dd 	.word	0x0800b9dd
 800b97c:	0800bc1b 	.word	0x0800bc1b
 800b980:	0800bc1b 	.word	0x0800bc1b
 800b984:	0800bc1b 	.word	0x0800bc1b
 800b988:	0800bc1b 	.word	0x0800bc1b
 800b98c:	0800bc1b 	.word	0x0800bc1b
 800b990:	0800bc1b 	.word	0x0800bc1b
 800b994:	0800bc1b 	.word	0x0800bc1b
 800b998:	0800ba03 	.word	0x0800ba03
 800b99c:	0800bc1b 	.word	0x0800bc1b
 800b9a0:	0800bc1b 	.word	0x0800bc1b
 800b9a4:	0800bc1b 	.word	0x0800bc1b
 800b9a8:	0800bc1b 	.word	0x0800bc1b
 800b9ac:	0800bc1b 	.word	0x0800bc1b
 800b9b0:	0800bc1b 	.word	0x0800bc1b
 800b9b4:	0800bc1b 	.word	0x0800bc1b
 800b9b8:	0800ba09 	.word	0x0800ba09
 800b9bc:	0800bc1b 	.word	0x0800bc1b
 800b9c0:	0800bc1b 	.word	0x0800bc1b
 800b9c4:	0800bc1b 	.word	0x0800bc1b
 800b9c8:	0800bc1b 	.word	0x0800bc1b
 800b9cc:	0800bc1b 	.word	0x0800bc1b
 800b9d0:	0800bc1b 	.word	0x0800bc1b
 800b9d4:	0800bc1b 	.word	0x0800bc1b
 800b9d8:	0800ba0f 	.word	0x0800ba0f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9dc:	4b94      	ldr	r3, [pc, #592]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f003 0320 	and.w	r3, r3, #32
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d009      	beq.n	800b9fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9e8:	4b91      	ldr	r3, [pc, #580]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	08db      	lsrs	r3, r3, #3
 800b9ee:	f003 0303 	and.w	r3, r3, #3
 800b9f2:	4a90      	ldr	r2, [pc, #576]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b9f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800b9fa:	e111      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b9fc:	4b8d      	ldr	r3, [pc, #564]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b9fe:	61bb      	str	r3, [r7, #24]
    break;
 800ba00:	e10e      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800ba02:	4b8d      	ldr	r3, [pc, #564]	; (800bc38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ba04:	61bb      	str	r3, [r7, #24]
    break;
 800ba06:	e10b      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800ba08:	4b8c      	ldr	r3, [pc, #560]	; (800bc3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ba0a:	61bb      	str	r3, [r7, #24]
    break;
 800ba0c:	e108      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba0e:	4b88      	ldr	r3, [pc, #544]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba12:	f003 0303 	and.w	r3, r3, #3
 800ba16:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800ba18:	4b85      	ldr	r3, [pc, #532]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba1c:	091b      	lsrs	r3, r3, #4
 800ba1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba22:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ba24:	4b82      	ldr	r3, [pc, #520]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba28:	f003 0301 	and.w	r3, r3, #1
 800ba2c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ba2e:	4b80      	ldr	r3, [pc, #512]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba32:	08db      	lsrs	r3, r3, #3
 800ba34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba38:	68fa      	ldr	r2, [r7, #12]
 800ba3a:	fb02 f303 	mul.w	r3, r2, r3
 800ba3e:	ee07 3a90 	vmov	s15, r3
 800ba42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba46:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 80e1 	beq.w	800bc14 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b02      	cmp	r3, #2
 800ba56:	f000 8083 	beq.w	800bb60 <HAL_RCC_GetSysClockFreq+0x204>
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	f200 80a1 	bhi.w	800bba4 <HAL_RCC_GetSysClockFreq+0x248>
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d003      	beq.n	800ba70 <HAL_RCC_GetSysClockFreq+0x114>
 800ba68:	697b      	ldr	r3, [r7, #20]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d056      	beq.n	800bb1c <HAL_RCC_GetSysClockFreq+0x1c0>
 800ba6e:	e099      	b.n	800bba4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba70:	4b6f      	ldr	r3, [pc, #444]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 0320 	and.w	r3, r3, #32
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d02d      	beq.n	800bad8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ba7c:	4b6c      	ldr	r3, [pc, #432]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	08db      	lsrs	r3, r3, #3
 800ba82:	f003 0303 	and.w	r3, r3, #3
 800ba86:	4a6b      	ldr	r2, [pc, #428]	; (800bc34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ba88:	fa22 f303 	lsr.w	r3, r2, r3
 800ba8c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	ee07 3a90 	vmov	s15, r3
 800ba94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	ee07 3a90 	vmov	s15, r3
 800ba9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baa6:	4b62      	ldr	r3, [pc, #392]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800baa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baae:	ee07 3a90 	vmov	s15, r3
 800bab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bab6:	ed97 6a02 	vldr	s12, [r7, #8]
 800baba:	eddf 5a61 	vldr	s11, [pc, #388]	; 800bc40 <HAL_RCC_GetSysClockFreq+0x2e4>
 800babe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bac6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bace:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bad2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bad6:	e087      	b.n	800bbe8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	ee07 3a90 	vmov	s15, r3
 800bade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bae2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bc44 <HAL_RCC_GetSysClockFreq+0x2e8>
 800bae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baea:	4b51      	ldr	r3, [pc, #324]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800baec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800baee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800baf2:	ee07 3a90 	vmov	s15, r3
 800baf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bafa:	ed97 6a02 	vldr	s12, [r7, #8]
 800bafe:	eddf 5a50 	vldr	s11, [pc, #320]	; 800bc40 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb1a:	e065      	b.n	800bbe8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	ee07 3a90 	vmov	s15, r3
 800bb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb26:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bc48 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bb2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb2e:	4b40      	ldr	r3, [pc, #256]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb36:	ee07 3a90 	vmov	s15, r3
 800bb3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb3e:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb42:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bc40 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb5e:	e043      	b.n	800bbe8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb60:	693b      	ldr	r3, [r7, #16]
 800bb62:	ee07 3a90 	vmov	s15, r3
 800bb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb6a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bc4c <HAL_RCC_GetSysClockFreq+0x2f0>
 800bb6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb72:	4b2f      	ldr	r3, [pc, #188]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb7a:	ee07 3a90 	vmov	s15, r3
 800bb7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb82:	ed97 6a02 	vldr	s12, [r7, #8]
 800bb86:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bc40 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bb8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bba2:	e021      	b.n	800bbe8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbae:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bc48 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bbb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbb6:	4b1e      	ldr	r3, [pc, #120]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbbe:	ee07 3a90 	vmov	s15, r3
 800bbc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbc6:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbca:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bc40 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbe6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bbe8:	4b11      	ldr	r3, [pc, #68]	; (800bc30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbec:	0a5b      	lsrs	r3, r3, #9
 800bbee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbf2:	3301      	adds	r3, #1
 800bbf4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	ee07 3a90 	vmov	s15, r3
 800bbfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc00:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc0c:	ee17 3a90 	vmov	r3, s15
 800bc10:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800bc12:	e005      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800bc14:	2300      	movs	r3, #0
 800bc16:	61bb      	str	r3, [r7, #24]
    break;
 800bc18:	e002      	b.n	800bc20 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800bc1a:	4b07      	ldr	r3, [pc, #28]	; (800bc38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bc1c:	61bb      	str	r3, [r7, #24]
    break;
 800bc1e:	bf00      	nop
  }

  return sysclockfreq;
 800bc20:	69bb      	ldr	r3, [r7, #24]
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3724      	adds	r7, #36	; 0x24
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	58024400 	.word	0x58024400
 800bc34:	03d09000 	.word	0x03d09000
 800bc38:	003d0900 	.word	0x003d0900
 800bc3c:	007a1200 	.word	0x007a1200
 800bc40:	46000000 	.word	0x46000000
 800bc44:	4c742400 	.word	0x4c742400
 800bc48:	4a742400 	.word	0x4a742400
 800bc4c:	4af42400 	.word	0x4af42400

0800bc50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bc56:	f7ff fe81 	bl	800b95c <HAL_RCC_GetSysClockFreq>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	4b10      	ldr	r3, [pc, #64]	; (800bca0 <HAL_RCC_GetHCLKFreq+0x50>)
 800bc5e:	699b      	ldr	r3, [r3, #24]
 800bc60:	0a1b      	lsrs	r3, r3, #8
 800bc62:	f003 030f 	and.w	r3, r3, #15
 800bc66:	490f      	ldr	r1, [pc, #60]	; (800bca4 <HAL_RCC_GetHCLKFreq+0x54>)
 800bc68:	5ccb      	ldrb	r3, [r1, r3]
 800bc6a:	f003 031f 	and.w	r3, r3, #31
 800bc6e:	fa22 f303 	lsr.w	r3, r2, r3
 800bc72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <HAL_RCC_GetHCLKFreq+0x50>)
 800bc76:	699b      	ldr	r3, [r3, #24]
 800bc78:	f003 030f 	and.w	r3, r3, #15
 800bc7c:	4a09      	ldr	r2, [pc, #36]	; (800bca4 <HAL_RCC_GetHCLKFreq+0x54>)
 800bc7e:	5cd3      	ldrb	r3, [r2, r3]
 800bc80:	f003 031f 	and.w	r3, r3, #31
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	fa22 f303 	lsr.w	r3, r2, r3
 800bc8a:	4a07      	ldr	r2, [pc, #28]	; (800bca8 <HAL_RCC_GetHCLKFreq+0x58>)
 800bc8c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bc8e:	4a07      	ldr	r2, [pc, #28]	; (800bcac <HAL_RCC_GetHCLKFreq+0x5c>)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bc94:	4b04      	ldr	r3, [pc, #16]	; (800bca8 <HAL_RCC_GetHCLKFreq+0x58>)
 800bc96:	681b      	ldr	r3, [r3, #0]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}
 800bca0:	58024400 	.word	0x58024400
 800bca4:	08011018 	.word	0x08011018
 800bca8:	24000008 	.word	0x24000008
 800bcac:	24000004 	.word	0x24000004

0800bcb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bcb4:	f7ff ffcc 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	4b06      	ldr	r3, [pc, #24]	; (800bcd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	091b      	lsrs	r3, r3, #4
 800bcc0:	f003 0307 	and.w	r3, r3, #7
 800bcc4:	4904      	ldr	r1, [pc, #16]	; (800bcd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bcc6:	5ccb      	ldrb	r3, [r1, r3]
 800bcc8:	f003 031f 	and.w	r3, r3, #31
 800bccc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bcd0:	4618      	mov	r0, r3
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	58024400 	.word	0x58024400
 800bcd8:	08011018 	.word	0x08011018

0800bcdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bce0:	f7ff ffb6 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 800bce4:	4602      	mov	r2, r0
 800bce6:	4b06      	ldr	r3, [pc, #24]	; (800bd00 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bce8:	69db      	ldr	r3, [r3, #28]
 800bcea:	0a1b      	lsrs	r3, r3, #8
 800bcec:	f003 0307 	and.w	r3, r3, #7
 800bcf0:	4904      	ldr	r1, [pc, #16]	; (800bd04 <HAL_RCC_GetPCLK2Freq+0x28>)
 800bcf2:	5ccb      	ldrb	r3, [r1, r3]
 800bcf4:	f003 031f 	and.w	r3, r3, #31
 800bcf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	bd80      	pop	{r7, pc}
 800bd00:	58024400 	.word	0x58024400
 800bd04:	08011018 	.word	0x08011018

0800bd08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800bd10:	2300      	movs	r3, #0
 800bd12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800bd14:	2300      	movs	r3, #0
 800bd16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d03f      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd2c:	d02a      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800bd2e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bd32:	d824      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bd34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd38:	d018      	beq.n	800bd6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800bd3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bd3e:	d81e      	bhi.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d003      	beq.n	800bd4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800bd44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bd48:	d007      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800bd4a:	e018      	b.n	800bd7e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd4c:	4ba3      	ldr	r3, [pc, #652]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd50:	4aa2      	ldr	r2, [pc, #648]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bd58:	e015      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	3304      	adds	r3, #4
 800bd5e:	2102      	movs	r1, #2
 800bd60:	4618      	mov	r0, r3
 800bd62:	f001 f9d5 	bl	800d110 <RCCEx_PLL2_Config>
 800bd66:	4603      	mov	r3, r0
 800bd68:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bd6a:	e00c      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	3324      	adds	r3, #36	; 0x24
 800bd70:	2102      	movs	r1, #2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f001 fa7e 	bl	800d274 <RCCEx_PLL3_Config>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800bd7c:	e003      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bd7e:	2301      	movs	r3, #1
 800bd80:	75fb      	strb	r3, [r7, #23]
      break;
 800bd82:	e000      	b.n	800bd86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800bd84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bd86:	7dfb      	ldrb	r3, [r7, #23]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d109      	bne.n	800bda0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bd8c:	4b93      	ldr	r3, [pc, #588]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd98:	4990      	ldr	r1, [pc, #576]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bd9a:	4313      	orrs	r3, r2
 800bd9c:	650b      	str	r3, [r1, #80]	; 0x50
 800bd9e:	e001      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bda0:	7dfb      	ldrb	r3, [r7, #23]
 800bda2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d03d      	beq.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdb4:	2b04      	cmp	r3, #4
 800bdb6:	d826      	bhi.n	800be06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800bdb8:	a201      	add	r2, pc, #4	; (adr r2, 800bdc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800bdba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbe:	bf00      	nop
 800bdc0:	0800bdd5 	.word	0x0800bdd5
 800bdc4:	0800bde3 	.word	0x0800bde3
 800bdc8:	0800bdf5 	.word	0x0800bdf5
 800bdcc:	0800be0d 	.word	0x0800be0d
 800bdd0:	0800be0d 	.word	0x0800be0d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdd4:	4b81      	ldr	r3, [pc, #516]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd8:	4a80      	ldr	r2, [pc, #512]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bdda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bdde:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bde0:	e015      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	3304      	adds	r3, #4
 800bde6:	2100      	movs	r1, #0
 800bde8:	4618      	mov	r0, r3
 800bdea:	f001 f991 	bl	800d110 <RCCEx_PLL2_Config>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bdf2:	e00c      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	3324      	adds	r3, #36	; 0x24
 800bdf8:	2100      	movs	r1, #0
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	f001 fa3a 	bl	800d274 <RCCEx_PLL3_Config>
 800be00:	4603      	mov	r3, r0
 800be02:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800be04:	e003      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	75fb      	strb	r3, [r7, #23]
      break;
 800be0a:	e000      	b.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800be0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d109      	bne.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800be14:	4b71      	ldr	r3, [pc, #452]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be18:	f023 0207 	bic.w	r2, r3, #7
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be20:	496e      	ldr	r1, [pc, #440]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be22:	4313      	orrs	r3, r2
 800be24:	650b      	str	r3, [r1, #80]	; 0x50
 800be26:	e001      	b.n	800be2c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be28:	7dfb      	ldrb	r3, [r7, #23]
 800be2a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be34:	2b00      	cmp	r3, #0
 800be36:	d042      	beq.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be40:	d02b      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x192>
 800be42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be46:	d825      	bhi.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800be48:	2bc0      	cmp	r3, #192	; 0xc0
 800be4a:	d028      	beq.n	800be9e <HAL_RCCEx_PeriphCLKConfig+0x196>
 800be4c:	2bc0      	cmp	r3, #192	; 0xc0
 800be4e:	d821      	bhi.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800be50:	2b80      	cmp	r3, #128	; 0x80
 800be52:	d016      	beq.n	800be82 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800be54:	2b80      	cmp	r3, #128	; 0x80
 800be56:	d81d      	bhi.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d002      	beq.n	800be62 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800be5c:	2b40      	cmp	r3, #64	; 0x40
 800be5e:	d007      	beq.n	800be70 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800be60:	e018      	b.n	800be94 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be62:	4b5e      	ldr	r3, [pc, #376]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be66:	4a5d      	ldr	r2, [pc, #372]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800be6e:	e017      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	3304      	adds	r3, #4
 800be74:	2100      	movs	r1, #0
 800be76:	4618      	mov	r0, r3
 800be78:	f001 f94a 	bl	800d110 <RCCEx_PLL2_Config>
 800be7c:	4603      	mov	r3, r0
 800be7e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800be80:	e00e      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	3324      	adds	r3, #36	; 0x24
 800be86:	2100      	movs	r1, #0
 800be88:	4618      	mov	r0, r3
 800be8a:	f001 f9f3 	bl	800d274 <RCCEx_PLL3_Config>
 800be8e:	4603      	mov	r3, r0
 800be90:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800be92:	e005      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	75fb      	strb	r3, [r7, #23]
      break;
 800be98:	e002      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800be9a:	bf00      	nop
 800be9c:	e000      	b.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800be9e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bea0:	7dfb      	ldrb	r3, [r7, #23]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d109      	bne.n	800beba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bea6:	4b4d      	ldr	r3, [pc, #308]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800beaa:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800beb2:	494a      	ldr	r1, [pc, #296]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800beb4:	4313      	orrs	r3, r2
 800beb6:	650b      	str	r3, [r1, #80]	; 0x50
 800beb8:	e001      	b.n	800bebe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beba:	7dfb      	ldrb	r3, [r7, #23]
 800bebc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d049      	beq.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bed4:	d030      	beq.n	800bf38 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bed6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800beda:	d82a      	bhi.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bedc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bee0:	d02c      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800bee2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bee6:	d824      	bhi.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bee8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800beec:	d018      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800beee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bef2:	d81e      	bhi.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d003      	beq.n	800bf00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800befc:	d007      	beq.n	800bf0e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800befe:	e018      	b.n	800bf32 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf00:	4b36      	ldr	r3, [pc, #216]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	4a35      	ldr	r2, [pc, #212]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf0c:	e017      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	3304      	adds	r3, #4
 800bf12:	2100      	movs	r1, #0
 800bf14:	4618      	mov	r0, r3
 800bf16:	f001 f8fb 	bl	800d110 <RCCEx_PLL2_Config>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bf1e:	e00e      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3324      	adds	r3, #36	; 0x24
 800bf24:	2100      	movs	r1, #0
 800bf26:	4618      	mov	r0, r3
 800bf28:	f001 f9a4 	bl	800d274 <RCCEx_PLL3_Config>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bf30:	e005      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bf32:	2301      	movs	r3, #1
 800bf34:	75fb      	strb	r3, [r7, #23]
      break;
 800bf36:	e002      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bf38:	bf00      	nop
 800bf3a:	e000      	b.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800bf3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10a      	bne.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bf44:	4b25      	ldr	r3, [pc, #148]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bf52:	4922      	ldr	r1, [pc, #136]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf54:	4313      	orrs	r3, r2
 800bf56:	658b      	str	r3, [r1, #88]	; 0x58
 800bf58:	e001      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf5a:	7dfb      	ldrb	r3, [r7, #23]
 800bf5c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d04b      	beq.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bf70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf74:	d030      	beq.n	800bfd8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800bf76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf7a:	d82a      	bhi.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bf7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf80:	d02e      	beq.n	800bfe0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800bf82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf86:	d824      	bhi.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bf88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf8c:	d018      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800bf8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf92:	d81e      	bhi.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d003      	beq.n	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800bf98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf9c:	d007      	beq.n	800bfae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800bf9e:	e018      	b.n	800bfd2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfa0:	4b0e      	ldr	r3, [pc, #56]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa4:	4a0d      	ldr	r2, [pc, #52]	; (800bfdc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfaa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bfac:	e019      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	3304      	adds	r3, #4
 800bfb2:	2100      	movs	r1, #0
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f001 f8ab 	bl	800d110 <RCCEx_PLL2_Config>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800bfbe:	e010      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	3324      	adds	r3, #36	; 0x24
 800bfc4:	2100      	movs	r1, #0
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f001 f954 	bl	800d274 <RCCEx_PLL3_Config>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bfd0:	e007      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	75fb      	strb	r3, [r7, #23]
      break;
 800bfd6:	e004      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800bfd8:	bf00      	nop
 800bfda:	e002      	b.n	800bfe2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800bfdc:	58024400 	.word	0x58024400
      break;
 800bfe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d10a      	bne.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bfe8:	4b99      	ldr	r3, [pc, #612]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bfea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfec:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800bff6:	4996      	ldr	r1, [pc, #600]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800bff8:	4313      	orrs	r3, r2
 800bffa:	658b      	str	r3, [r1, #88]	; 0x58
 800bffc:	e001      	b.n	800c002 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bffe:	7dfb      	ldrb	r3, [r7, #23]
 800c000:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d032      	beq.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c012:	2b30      	cmp	r3, #48	; 0x30
 800c014:	d01c      	beq.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c016:	2b30      	cmp	r3, #48	; 0x30
 800c018:	d817      	bhi.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c01a:	2b20      	cmp	r3, #32
 800c01c:	d00c      	beq.n	800c038 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c01e:	2b20      	cmp	r3, #32
 800c020:	d813      	bhi.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c022:	2b00      	cmp	r3, #0
 800c024:	d016      	beq.n	800c054 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c026:	2b10      	cmp	r3, #16
 800c028:	d10f      	bne.n	800c04a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c02a:	4b89      	ldr	r3, [pc, #548]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c02c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c02e:	4a88      	ldr	r2, [pc, #544]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c030:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c034:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c036:	e00e      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	3304      	adds	r3, #4
 800c03c:	2102      	movs	r1, #2
 800c03e:	4618      	mov	r0, r3
 800c040:	f001 f866 	bl	800d110 <RCCEx_PLL2_Config>
 800c044:	4603      	mov	r3, r0
 800c046:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c048:	e005      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c04a:	2301      	movs	r3, #1
 800c04c:	75fb      	strb	r3, [r7, #23]
      break;
 800c04e:	e002      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c050:	bf00      	nop
 800c052:	e000      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c054:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d109      	bne.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c05c:	4b7c      	ldr	r3, [pc, #496]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c05e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c060:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c068:	4979      	ldr	r1, [pc, #484]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c06a:	4313      	orrs	r3, r2
 800c06c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c06e:	e001      	b.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c070:	7dfb      	ldrb	r3, [r7, #23]
 800c072:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d047      	beq.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c088:	d030      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c08a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c08e:	d82a      	bhi.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c090:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c094:	d02c      	beq.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c09a:	d824      	bhi.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c09c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0a0:	d018      	beq.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c0a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0a6:	d81e      	bhi.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d003      	beq.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c0ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b0:	d007      	beq.n	800c0c2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c0b2:	e018      	b.n	800c0e6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c0b4:	4b66      	ldr	r3, [pc, #408]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	4a65      	ldr	r2, [pc, #404]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c0ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c0c0:	e017      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	3304      	adds	r3, #4
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f001 f821 	bl	800d110 <RCCEx_PLL2_Config>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c0d2:	e00e      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	3324      	adds	r3, #36	; 0x24
 800c0d8:	2100      	movs	r1, #0
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f001 f8ca 	bl	800d274 <RCCEx_PLL3_Config>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c0e4:	e005      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ea:	e002      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c0ec:	bf00      	nop
 800c0ee:	e000      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c0f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d109      	bne.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c0f8:	4b55      	ldr	r3, [pc, #340]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c104:	4952      	ldr	r1, [pc, #328]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c106:	4313      	orrs	r3, r2
 800c108:	650b      	str	r3, [r1, #80]	; 0x50
 800c10a:	e001      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c10c:	7dfb      	ldrb	r3, [r7, #23]
 800c10e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d049      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c124:	d02e      	beq.n	800c184 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c126:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c12a:	d828      	bhi.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c12c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c130:	d02a      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c132:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c136:	d822      	bhi.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c138:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c13c:	d026      	beq.n	800c18c <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c13e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c142:	d81c      	bhi.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c144:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c148:	d010      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800c14a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c14e:	d816      	bhi.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c150:	2b00      	cmp	r3, #0
 800c152:	d01d      	beq.n	800c190 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c158:	d111      	bne.n	800c17e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	3304      	adds	r3, #4
 800c15e:	2101      	movs	r1, #1
 800c160:	4618      	mov	r0, r3
 800c162:	f000 ffd5 	bl	800d110 <RCCEx_PLL2_Config>
 800c166:	4603      	mov	r3, r0
 800c168:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c16a:	e012      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	3324      	adds	r3, #36	; 0x24
 800c170:	2101      	movs	r1, #1
 800c172:	4618      	mov	r0, r3
 800c174:	f001 f87e 	bl	800d274 <RCCEx_PLL3_Config>
 800c178:	4603      	mov	r3, r0
 800c17a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c17c:	e009      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c17e:	2301      	movs	r3, #1
 800c180:	75fb      	strb	r3, [r7, #23]
      break;
 800c182:	e006      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c184:	bf00      	nop
 800c186:	e004      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c188:	bf00      	nop
 800c18a:	e002      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c18c:	bf00      	nop
 800c18e:	e000      	b.n	800c192 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c190:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c192:	7dfb      	ldrb	r3, [r7, #23]
 800c194:	2b00      	cmp	r3, #0
 800c196:	d109      	bne.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c198:	4b2d      	ldr	r3, [pc, #180]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c19a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c19c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c1a4:	492a      	ldr	r1, [pc, #168]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	650b      	str	r3, [r1, #80]	; 0x50
 800c1aa:	e001      	b.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1ac:	7dfb      	ldrb	r3, [r7, #23]
 800c1ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d04d      	beq.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c1c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1c6:	d02e      	beq.n	800c226 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c1c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c1cc:	d828      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c1ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d2:	d02a      	beq.n	800c22a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c1d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c1d8:	d822      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c1da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1de:	d026      	beq.n	800c22e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800c1e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c1e4:	d81c      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c1e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1ea:	d010      	beq.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c1ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1f0:	d816      	bhi.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d01d      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800c1f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1fa:	d111      	bne.n	800c220 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3304      	adds	r3, #4
 800c200:	2101      	movs	r1, #1
 800c202:	4618      	mov	r0, r3
 800c204:	f000 ff84 	bl	800d110 <RCCEx_PLL2_Config>
 800c208:	4603      	mov	r3, r0
 800c20a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c20c:	e012      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	3324      	adds	r3, #36	; 0x24
 800c212:	2101      	movs	r1, #1
 800c214:	4618      	mov	r0, r3
 800c216:	f001 f82d 	bl	800d274 <RCCEx_PLL3_Config>
 800c21a:	4603      	mov	r3, r0
 800c21c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c21e:	e009      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c220:	2301      	movs	r3, #1
 800c222:	75fb      	strb	r3, [r7, #23]
      break;
 800c224:	e006      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c226:	bf00      	nop
 800c228:	e004      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c22a:	bf00      	nop
 800c22c:	e002      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c22e:	bf00      	nop
 800c230:	e000      	b.n	800c234 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c232:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c234:	7dfb      	ldrb	r3, [r7, #23]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d10c      	bne.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c23a:	4b05      	ldr	r3, [pc, #20]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c23c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c23e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c248:	4901      	ldr	r1, [pc, #4]	; (800c250 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c24a:	4313      	orrs	r3, r2
 800c24c:	658b      	str	r3, [r1, #88]	; 0x58
 800c24e:	e003      	b.n	800c258 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c250:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c254:	7dfb      	ldrb	r3, [r7, #23]
 800c256:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c260:	2b00      	cmp	r3, #0
 800c262:	d02f      	beq.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c26c:	d00e      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0x584>
 800c26e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c272:	d814      	bhi.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0x596>
 800c274:	2b00      	cmp	r3, #0
 800c276:	d015      	beq.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800c278:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c27c:	d10f      	bne.n	800c29e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c27e:	4baf      	ldr	r3, [pc, #700]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c282:	4aae      	ldr	r2, [pc, #696]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c284:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c288:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c28a:	e00c      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	3304      	adds	r3, #4
 800c290:	2101      	movs	r1, #1
 800c292:	4618      	mov	r0, r3
 800c294:	f000 ff3c 	bl	800d110 <RCCEx_PLL2_Config>
 800c298:	4603      	mov	r3, r0
 800c29a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c29c:	e003      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c2a2:	e000      	b.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800c2a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c2a6:	7dfb      	ldrb	r3, [r7, #23]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d109      	bne.n	800c2c0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c2ac:	4ba3      	ldr	r3, [pc, #652]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c2ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2b0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2b8:	49a0      	ldr	r1, [pc, #640]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c2ba:	4313      	orrs	r3, r2
 800c2bc:	650b      	str	r3, [r1, #80]	; 0x50
 800c2be:	e001      	b.n	800c2c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c0:	7dfb      	ldrb	r3, [r7, #23]
 800c2c2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d032      	beq.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d81b      	bhi.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c2d8:	a201      	add	r2, pc, #4	; (adr r2, 800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2de:	bf00      	nop
 800c2e0:	0800c317 	.word	0x0800c317
 800c2e4:	0800c2f1 	.word	0x0800c2f1
 800c2e8:	0800c2ff 	.word	0x0800c2ff
 800c2ec:	0800c317 	.word	0x0800c317
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c2f0:	4b92      	ldr	r3, [pc, #584]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f4:	4a91      	ldr	r2, [pc, #580]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c2f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c2fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c2fc:	e00c      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	3304      	adds	r3, #4
 800c302:	2102      	movs	r1, #2
 800c304:	4618      	mov	r0, r3
 800c306:	f000 ff03 	bl	800d110 <RCCEx_PLL2_Config>
 800c30a:	4603      	mov	r3, r0
 800c30c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c30e:	e003      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	75fb      	strb	r3, [r7, #23]
      break;
 800c314:	e000      	b.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c316:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c318:	7dfb      	ldrb	r3, [r7, #23]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d109      	bne.n	800c332 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c31e:	4b87      	ldr	r3, [pc, #540]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c322:	f023 0203 	bic.w	r2, r3, #3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c32a:	4984      	ldr	r1, [pc, #528]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c32c:	4313      	orrs	r3, r2
 800c32e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c330:	e001      	b.n	800c336 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
 800c334:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c33e:	2b00      	cmp	r3, #0
 800c340:	f000 8086 	beq.w	800c450 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c344:	4b7e      	ldr	r3, [pc, #504]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	4a7d      	ldr	r2, [pc, #500]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c34a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c34e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c350:	f7fb f99a 	bl	8007688 <HAL_GetTick>
 800c354:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c356:	e009      	b.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c358:	f7fb f996 	bl	8007688 <HAL_GetTick>
 800c35c:	4602      	mov	r2, r0
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	2b64      	cmp	r3, #100	; 0x64
 800c364:	d902      	bls.n	800c36c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c366:	2303      	movs	r3, #3
 800c368:	75fb      	strb	r3, [r7, #23]
        break;
 800c36a:	e005      	b.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c36c:	4b74      	ldr	r3, [pc, #464]	; (800c540 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c374:	2b00      	cmp	r3, #0
 800c376:	d0ef      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c378:	7dfb      	ldrb	r3, [r7, #23]
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d166      	bne.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c37e:	4b6f      	ldr	r3, [pc, #444]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c388:	4053      	eors	r3, r2
 800c38a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d013      	beq.n	800c3ba <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c392:	4b6a      	ldr	r3, [pc, #424]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c39a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c39c:	4b67      	ldr	r3, [pc, #412]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3a0:	4a66      	ldr	r2, [pc, #408]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c3a8:	4b64      	ldr	r3, [pc, #400]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ac:	4a63      	ldr	r2, [pc, #396]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c3b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c3b4:	4a61      	ldr	r2, [pc, #388]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c3c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3c4:	d115      	bne.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3c6:	f7fb f95f 	bl	8007688 <HAL_GetTick>
 800c3ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3cc:	e00b      	b.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c3ce:	f7fb f95b 	bl	8007688 <HAL_GetTick>
 800c3d2:	4602      	mov	r2, r0
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	1ad3      	subs	r3, r2, r3
 800c3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d902      	bls.n	800c3e6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	75fb      	strb	r3, [r7, #23]
            break;
 800c3e4:	e005      	b.n	800c3f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c3e6:	4b55      	ldr	r3, [pc, #340]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3ea:	f003 0302 	and.w	r3, r3, #2
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0ed      	beq.n	800c3ce <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c3f2:	7dfb      	ldrb	r3, [r7, #23]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d126      	bne.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c402:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c406:	d10d      	bne.n	800c424 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c408:	4b4c      	ldr	r3, [pc, #304]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c416:	0919      	lsrs	r1, r3, #4
 800c418:	4b4a      	ldr	r3, [pc, #296]	; (800c544 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800c41a:	400b      	ands	r3, r1
 800c41c:	4947      	ldr	r1, [pc, #284]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c41e:	4313      	orrs	r3, r2
 800c420:	610b      	str	r3, [r1, #16]
 800c422:	e005      	b.n	800c430 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c424:	4b45      	ldr	r3, [pc, #276]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	4a44      	ldr	r2, [pc, #272]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c42a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c42e:	6113      	str	r3, [r2, #16]
 800c430:	4b42      	ldr	r3, [pc, #264]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c432:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c43a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c43e:	493f      	ldr	r1, [pc, #252]	; (800c53c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c440:	4313      	orrs	r3, r2
 800c442:	670b      	str	r3, [r1, #112]	; 0x70
 800c444:	e004      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	75bb      	strb	r3, [r7, #22]
 800c44a:	e001      	b.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
 800c44e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	2b00      	cmp	r3, #0
 800c45a:	f000 8085 	beq.w	800c568 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c462:	2b28      	cmp	r3, #40	; 0x28
 800c464:	d866      	bhi.n	800c534 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c466:	a201      	add	r2, pc, #4	; (adr r2, 800c46c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c46c:	0800c549 	.word	0x0800c549
 800c470:	0800c535 	.word	0x0800c535
 800c474:	0800c535 	.word	0x0800c535
 800c478:	0800c535 	.word	0x0800c535
 800c47c:	0800c535 	.word	0x0800c535
 800c480:	0800c535 	.word	0x0800c535
 800c484:	0800c535 	.word	0x0800c535
 800c488:	0800c535 	.word	0x0800c535
 800c48c:	0800c511 	.word	0x0800c511
 800c490:	0800c535 	.word	0x0800c535
 800c494:	0800c535 	.word	0x0800c535
 800c498:	0800c535 	.word	0x0800c535
 800c49c:	0800c535 	.word	0x0800c535
 800c4a0:	0800c535 	.word	0x0800c535
 800c4a4:	0800c535 	.word	0x0800c535
 800c4a8:	0800c535 	.word	0x0800c535
 800c4ac:	0800c523 	.word	0x0800c523
 800c4b0:	0800c535 	.word	0x0800c535
 800c4b4:	0800c535 	.word	0x0800c535
 800c4b8:	0800c535 	.word	0x0800c535
 800c4bc:	0800c535 	.word	0x0800c535
 800c4c0:	0800c535 	.word	0x0800c535
 800c4c4:	0800c535 	.word	0x0800c535
 800c4c8:	0800c535 	.word	0x0800c535
 800c4cc:	0800c549 	.word	0x0800c549
 800c4d0:	0800c535 	.word	0x0800c535
 800c4d4:	0800c535 	.word	0x0800c535
 800c4d8:	0800c535 	.word	0x0800c535
 800c4dc:	0800c535 	.word	0x0800c535
 800c4e0:	0800c535 	.word	0x0800c535
 800c4e4:	0800c535 	.word	0x0800c535
 800c4e8:	0800c535 	.word	0x0800c535
 800c4ec:	0800c549 	.word	0x0800c549
 800c4f0:	0800c535 	.word	0x0800c535
 800c4f4:	0800c535 	.word	0x0800c535
 800c4f8:	0800c535 	.word	0x0800c535
 800c4fc:	0800c535 	.word	0x0800c535
 800c500:	0800c535 	.word	0x0800c535
 800c504:	0800c535 	.word	0x0800c535
 800c508:	0800c535 	.word	0x0800c535
 800c50c:	0800c549 	.word	0x0800c549
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	3304      	adds	r3, #4
 800c514:	2101      	movs	r1, #1
 800c516:	4618      	mov	r0, r3
 800c518:	f000 fdfa 	bl	800d110 <RCCEx_PLL2_Config>
 800c51c:	4603      	mov	r3, r0
 800c51e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c520:	e013      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	3324      	adds	r3, #36	; 0x24
 800c526:	2101      	movs	r1, #1
 800c528:	4618      	mov	r0, r3
 800c52a:	f000 fea3 	bl	800d274 <RCCEx_PLL3_Config>
 800c52e:	4603      	mov	r3, r0
 800c530:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c532:	e00a      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c534:	2301      	movs	r3, #1
 800c536:	75fb      	strb	r3, [r7, #23]
      break;
 800c538:	e007      	b.n	800c54a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c53a:	bf00      	nop
 800c53c:	58024400 	.word	0x58024400
 800c540:	58024800 	.word	0x58024800
 800c544:	00ffffcf 	.word	0x00ffffcf
      break;
 800c548:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c54a:	7dfb      	ldrb	r3, [r7, #23]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d109      	bne.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c550:	4b96      	ldr	r3, [pc, #600]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c554:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c55c:	4993      	ldr	r1, [pc, #588]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c55e:	4313      	orrs	r3, r2
 800c560:	654b      	str	r3, [r1, #84]	; 0x54
 800c562:	e001      	b.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c564:	7dfb      	ldrb	r3, [r7, #23]
 800c566:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0302 	and.w	r3, r3, #2
 800c570:	2b00      	cmp	r3, #0
 800c572:	d038      	beq.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c578:	2b05      	cmp	r3, #5
 800c57a:	d821      	bhi.n	800c5c0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c57c:	a201      	add	r2, pc, #4	; (adr r2, 800c584 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800c57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c582:	bf00      	nop
 800c584:	0800c5c7 	.word	0x0800c5c7
 800c588:	0800c59d 	.word	0x0800c59d
 800c58c:	0800c5af 	.word	0x0800c5af
 800c590:	0800c5c7 	.word	0x0800c5c7
 800c594:	0800c5c7 	.word	0x0800c5c7
 800c598:	0800c5c7 	.word	0x0800c5c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	3304      	adds	r3, #4
 800c5a0:	2101      	movs	r1, #1
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f000 fdb4 	bl	800d110 <RCCEx_PLL2_Config>
 800c5a8:	4603      	mov	r3, r0
 800c5aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c5ac:	e00c      	b.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	3324      	adds	r3, #36	; 0x24
 800c5b2:	2101      	movs	r1, #1
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f000 fe5d 	bl	800d274 <RCCEx_PLL3_Config>
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c5be:	e003      	b.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c5c0:	2301      	movs	r3, #1
 800c5c2:	75fb      	strb	r3, [r7, #23]
      break;
 800c5c4:	e000      	b.n	800c5c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c5c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c5c8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d109      	bne.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c5ce:	4b77      	ldr	r3, [pc, #476]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c5d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c5d2:	f023 0207 	bic.w	r2, r3, #7
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5da:	4974      	ldr	r1, [pc, #464]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	654b      	str	r3, [r1, #84]	; 0x54
 800c5e0:	e001      	b.n	800c5e6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5e2:	7dfb      	ldrb	r3, [r7, #23]
 800c5e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f003 0304 	and.w	r3, r3, #4
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d03a      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c5f8:	2b05      	cmp	r3, #5
 800c5fa:	d821      	bhi.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c5fc:	a201      	add	r2, pc, #4	; (adr r2, 800c604 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c5fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c602:	bf00      	nop
 800c604:	0800c647 	.word	0x0800c647
 800c608:	0800c61d 	.word	0x0800c61d
 800c60c:	0800c62f 	.word	0x0800c62f
 800c610:	0800c647 	.word	0x0800c647
 800c614:	0800c647 	.word	0x0800c647
 800c618:	0800c647 	.word	0x0800c647
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	3304      	adds	r3, #4
 800c620:	2101      	movs	r1, #1
 800c622:	4618      	mov	r0, r3
 800c624:	f000 fd74 	bl	800d110 <RCCEx_PLL2_Config>
 800c628:	4603      	mov	r3, r0
 800c62a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c62c:	e00c      	b.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3324      	adds	r3, #36	; 0x24
 800c632:	2101      	movs	r1, #1
 800c634:	4618      	mov	r0, r3
 800c636:	f000 fe1d 	bl	800d274 <RCCEx_PLL3_Config>
 800c63a:	4603      	mov	r3, r0
 800c63c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c63e:	e003      	b.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c640:	2301      	movs	r3, #1
 800c642:	75fb      	strb	r3, [r7, #23]
      break;
 800c644:	e000      	b.n	800c648 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c646:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c648:	7dfb      	ldrb	r3, [r7, #23]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d10a      	bne.n	800c664 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c64e:	4b57      	ldr	r3, [pc, #348]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c652:	f023 0207 	bic.w	r2, r3, #7
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c65c:	4953      	ldr	r1, [pc, #332]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c65e:	4313      	orrs	r3, r2
 800c660:	658b      	str	r3, [r1, #88]	; 0x58
 800c662:	e001      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c664:	7dfb      	ldrb	r3, [r7, #23]
 800c666:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 0320 	and.w	r3, r3, #32
 800c670:	2b00      	cmp	r3, #0
 800c672:	d04b      	beq.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c67a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c67e:	d02e      	beq.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c680:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c684:	d828      	bhi.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c68a:	d02a      	beq.n	800c6e2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c68c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c690:	d822      	bhi.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c692:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c696:	d026      	beq.n	800c6e6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c698:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c69c:	d81c      	bhi.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c69e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a2:	d010      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c6a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c6a8:	d816      	bhi.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d01d      	beq.n	800c6ea <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c6ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c6b2:	d111      	bne.n	800c6d8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fd28 	bl	800d110 <RCCEx_PLL2_Config>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c6c4:	e012      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	3324      	adds	r3, #36	; 0x24
 800c6ca:	2102      	movs	r1, #2
 800c6cc:	4618      	mov	r0, r3
 800c6ce:	f000 fdd1 	bl	800d274 <RCCEx_PLL3_Config>
 800c6d2:	4603      	mov	r3, r0
 800c6d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c6d6:	e009      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6d8:	2301      	movs	r3, #1
 800c6da:	75fb      	strb	r3, [r7, #23]
      break;
 800c6dc:	e006      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c6de:	bf00      	nop
 800c6e0:	e004      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c6e2:	bf00      	nop
 800c6e4:	e002      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c6e6:	bf00      	nop
 800c6e8:	e000      	b.n	800c6ec <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c6ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6ec:	7dfb      	ldrb	r3, [r7, #23]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d10a      	bne.n	800c708 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c6f2:	4b2e      	ldr	r3, [pc, #184]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c700:	492a      	ldr	r1, [pc, #168]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c702:	4313      	orrs	r3, r2
 800c704:	654b      	str	r3, [r1, #84]	; 0x54
 800c706:	e001      	b.n	800c70c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c708:	7dfb      	ldrb	r3, [r7, #23]
 800c70a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c714:	2b00      	cmp	r3, #0
 800c716:	d04d      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c71e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c722:	d02e      	beq.n	800c782 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c724:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c728:	d828      	bhi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c72a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c72e:	d02a      	beq.n	800c786 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c734:	d822      	bhi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c73a:	d026      	beq.n	800c78a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c73c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c740:	d81c      	bhi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c746:	d010      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c74c:	d816      	bhi.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d01d      	beq.n	800c78e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c756:	d111      	bne.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	3304      	adds	r3, #4
 800c75c:	2100      	movs	r1, #0
 800c75e:	4618      	mov	r0, r3
 800c760:	f000 fcd6 	bl	800d110 <RCCEx_PLL2_Config>
 800c764:	4603      	mov	r3, r0
 800c766:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c768:	e012      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	3324      	adds	r3, #36	; 0x24
 800c76e:	2102      	movs	r1, #2
 800c770:	4618      	mov	r0, r3
 800c772:	f000 fd7f 	bl	800d274 <RCCEx_PLL3_Config>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c77a:	e009      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	75fb      	strb	r3, [r7, #23]
      break;
 800c780:	e006      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c782:	bf00      	nop
 800c784:	e004      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c786:	bf00      	nop
 800c788:	e002      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c78a:	bf00      	nop
 800c78c:	e000      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c78e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d10c      	bne.n	800c7b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c796:	4b05      	ldr	r3, [pc, #20]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c79a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c7a4:	4901      	ldr	r1, [pc, #4]	; (800c7ac <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c7a6:	4313      	orrs	r3, r2
 800c7a8:	658b      	str	r3, [r1, #88]	; 0x58
 800c7aa:	e003      	b.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c7ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7b0:	7dfb      	ldrb	r3, [r7, #23]
 800c7b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d04b      	beq.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c7c6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7ca:	d02e      	beq.n	800c82a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c7cc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c7d0:	d828      	bhi.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c7d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7d6:	d02a      	beq.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c7d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7dc:	d822      	bhi.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c7de:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c7e2:	d026      	beq.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c7e4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c7e8:	d81c      	bhi.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c7ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7ee:	d010      	beq.n	800c812 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c7f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c7f4:	d816      	bhi.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d01d      	beq.n	800c836 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c7fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7fe:	d111      	bne.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	3304      	adds	r3, #4
 800c804:	2100      	movs	r1, #0
 800c806:	4618      	mov	r0, r3
 800c808:	f000 fc82 	bl	800d110 <RCCEx_PLL2_Config>
 800c80c:	4603      	mov	r3, r0
 800c80e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c810:	e012      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	3324      	adds	r3, #36	; 0x24
 800c816:	2102      	movs	r1, #2
 800c818:	4618      	mov	r0, r3
 800c81a:	f000 fd2b 	bl	800d274 <RCCEx_PLL3_Config>
 800c81e:	4603      	mov	r3, r0
 800c820:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c822:	e009      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	75fb      	strb	r3, [r7, #23]
      break;
 800c828:	e006      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c82a:	bf00      	nop
 800c82c:	e004      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c82e:	bf00      	nop
 800c830:	e002      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c832:	bf00      	nop
 800c834:	e000      	b.n	800c838 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c836:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c838:	7dfb      	ldrb	r3, [r7, #23]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10a      	bne.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c83e:	4b9d      	ldr	r3, [pc, #628]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c84c:	4999      	ldr	r1, [pc, #612]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c84e:	4313      	orrs	r3, r2
 800c850:	658b      	str	r3, [r1, #88]	; 0x58
 800c852:	e001      	b.n	800c858 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c854:	7dfb      	ldrb	r3, [r7, #23]
 800c856:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f003 0308 	and.w	r3, r3, #8
 800c860:	2b00      	cmp	r3, #0
 800c862:	d01a      	beq.n	800c89a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c86a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c86e:	d10a      	bne.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	3324      	adds	r3, #36	; 0x24
 800c874:	2102      	movs	r1, #2
 800c876:	4618      	mov	r0, r3
 800c878:	f000 fcfc 	bl	800d274 <RCCEx_PLL3_Config>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d001      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c882:	2301      	movs	r3, #1
 800c884:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c886:	4b8b      	ldr	r3, [pc, #556]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c88a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c894:	4987      	ldr	r1, [pc, #540]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c896:	4313      	orrs	r3, r2
 800c898:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f003 0310 	and.w	r3, r3, #16
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d01a      	beq.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c8b0:	d10a      	bne.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	3324      	adds	r3, #36	; 0x24
 800c8b6:	2102      	movs	r1, #2
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 fcdb 	bl	800d274 <RCCEx_PLL3_Config>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d001      	beq.n	800c8c8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c8c8:	4b7a      	ldr	r3, [pc, #488]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c8ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c8d6:	4977      	ldr	r1, [pc, #476]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d034      	beq.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c8ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f2:	d01d      	beq.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c8f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f8:	d817      	bhi.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d003      	beq.n	800c906 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c8fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c902:	d009      	beq.n	800c918 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c904:	e011      	b.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	3304      	adds	r3, #4
 800c90a:	2100      	movs	r1, #0
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 fbff 	bl	800d110 <RCCEx_PLL2_Config>
 800c912:	4603      	mov	r3, r0
 800c914:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c916:	e00c      	b.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	3324      	adds	r3, #36	; 0x24
 800c91c:	2102      	movs	r1, #2
 800c91e:	4618      	mov	r0, r3
 800c920:	f000 fca8 	bl	800d274 <RCCEx_PLL3_Config>
 800c924:	4603      	mov	r3, r0
 800c926:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800c928:	e003      	b.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c92a:	2301      	movs	r3, #1
 800c92c:	75fb      	strb	r3, [r7, #23]
      break;
 800c92e:	e000      	b.n	800c932 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800c930:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c932:	7dfb      	ldrb	r3, [r7, #23]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d10a      	bne.n	800c94e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c938:	4b5e      	ldr	r3, [pc, #376]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c93a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c93c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c946:	495b      	ldr	r1, [pc, #364]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c948:	4313      	orrs	r3, r2
 800c94a:	658b      	str	r3, [r1, #88]	; 0x58
 800c94c:	e001      	b.n	800c952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c94e:	7dfb      	ldrb	r3, [r7, #23]
 800c950:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d033      	beq.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c964:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c968:	d01c      	beq.n	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800c96a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800c96e:	d816      	bhi.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800c970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c974:	d003      	beq.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800c976:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c97a:	d007      	beq.n	800c98c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800c97c:	e00f      	b.n	800c99e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c97e:	4b4d      	ldr	r3, [pc, #308]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c982:	4a4c      	ldr	r2, [pc, #304]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c988:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800c98a:	e00c      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	3324      	adds	r3, #36	; 0x24
 800c990:	2101      	movs	r1, #1
 800c992:	4618      	mov	r0, r3
 800c994:	f000 fc6e 	bl	800d274 <RCCEx_PLL3_Config>
 800c998:	4603      	mov	r3, r0
 800c99a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800c99c:	e003      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c9a2:	e000      	b.n	800c9a6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800c9a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d10a      	bne.n	800c9c2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c9ac:	4b41      	ldr	r3, [pc, #260]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ba:	493e      	ldr	r1, [pc, #248]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	654b      	str	r3, [r1, #84]	; 0x54
 800c9c0:	e001      	b.n	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9c2:	7dfb      	ldrb	r3, [r7, #23]
 800c9c4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d029      	beq.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d003      	beq.n	800c9e2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800c9da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9de:	d007      	beq.n	800c9f0 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800c9e0:	e00f      	b.n	800ca02 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c9e2:	4b34      	ldr	r3, [pc, #208]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e6:	4a33      	ldr	r2, [pc, #204]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c9ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800c9ee:	e00b      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	2102      	movs	r1, #2
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 fb8a 	bl	800d110 <RCCEx_PLL2_Config>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800ca00:	e002      	b.n	800ca08 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800ca02:	2301      	movs	r3, #1
 800ca04:	75fb      	strb	r3, [r7, #23]
      break;
 800ca06:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca08:	7dfb      	ldrb	r3, [r7, #23]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d109      	bne.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ca0e:	4b29      	ldr	r3, [pc, #164]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ca1a:	4926      	ldr	r1, [pc, #152]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca1c:	4313      	orrs	r3, r2
 800ca1e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ca20:	e001      	b.n	800ca26 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca22:	7dfb      	ldrb	r3, [r7, #23]
 800ca24:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d00a      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	3324      	adds	r3, #36	; 0x24
 800ca36:	2102      	movs	r1, #2
 800ca38:	4618      	mov	r0, r3
 800ca3a:	f000 fc1b 	bl	800d274 <RCCEx_PLL3_Config>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d001      	beq.n	800ca48 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
 800ca46:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d033      	beq.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ca58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca5c:	d017      	beq.n	800ca8e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800ca5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ca62:	d811      	bhi.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800ca64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca68:	d013      	beq.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800ca6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca6e:	d80b      	bhi.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d010      	beq.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800ca74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca78:	d106      	bne.n	800ca88 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca7a:	4b0e      	ldr	r3, [pc, #56]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7e:	4a0d      	ldr	r2, [pc, #52]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca84:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800ca86:	e007      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca88:	2301      	movs	r3, #1
 800ca8a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca8c:	e004      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ca8e:	bf00      	nop
 800ca90:	e002      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ca92:	bf00      	nop
 800ca94:	e000      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800ca96:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca98:	7dfb      	ldrb	r3, [r7, #23]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d10c      	bne.n	800cab8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ca9e:	4b05      	ldr	r3, [pc, #20]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800caa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caa2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800caaa:	4902      	ldr	r1, [pc, #8]	; (800cab4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800caac:	4313      	orrs	r3, r2
 800caae:	654b      	str	r3, [r1, #84]	; 0x54
 800cab0:	e004      	b.n	800cabc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800cab2:	bf00      	nop
 800cab4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cab8:	7dfb      	ldrb	r3, [r7, #23]
 800caba:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d008      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cac8:	4b31      	ldr	r3, [pc, #196]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800caca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cacc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cad4:	492e      	ldr	r1, [pc, #184]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cad6:	4313      	orrs	r3, r2
 800cad8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d009      	beq.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cae6:	4b2a      	ldr	r3, [pc, #168]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cae8:	691b      	ldr	r3, [r3, #16]
 800caea:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800caf4:	4926      	ldr	r1, [pc, #152]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800caf6:	4313      	orrs	r3, r2
 800caf8:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d008      	beq.n	800cb18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cb06:	4b22      	ldr	r3, [pc, #136]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb12:	491f      	ldr	r1, [pc, #124]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb14:	4313      	orrs	r3, r2
 800cb16:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d00d      	beq.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cb24:	4b1a      	ldr	r3, [pc, #104]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	4a19      	ldr	r2, [pc, #100]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cb2e:	6113      	str	r3, [r2, #16]
 800cb30:	4b17      	ldr	r3, [pc, #92]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb32:	691a      	ldr	r2, [r3, #16]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cb3a:	4915      	ldr	r1, [pc, #84]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	da08      	bge.n	800cb5a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cb48:	4b11      	ldr	r3, [pc, #68]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb4c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb54:	490e      	ldr	r1, [pc, #56]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb56:	4313      	orrs	r3, r2
 800cb58:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d009      	beq.n	800cb7a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cb66:	4b0a      	ldr	r3, [pc, #40]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb74:	4906      	ldr	r1, [pc, #24]	; (800cb90 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cb76:	4313      	orrs	r3, r2
 800cb78:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800cb7a:	7dbb      	ldrb	r3, [r7, #22]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d101      	bne.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e000      	b.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800cb84:	2301      	movs	r3, #1
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	58024400 	.word	0x58024400

0800cb94 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cb98:	f7ff f85a 	bl	800bc50 <HAL_RCC_GetHCLKFreq>
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cba0:	6a1b      	ldr	r3, [r3, #32]
 800cba2:	091b      	lsrs	r3, r3, #4
 800cba4:	f003 0307 	and.w	r3, r3, #7
 800cba8:	4904      	ldr	r1, [pc, #16]	; (800cbbc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cbaa:	5ccb      	ldrb	r3, [r1, r3]
 800cbac:	f003 031f 	and.w	r3, r3, #31
 800cbb0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	58024400 	.word	0x58024400
 800cbbc:	08011018 	.word	0x08011018

0800cbc0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b089      	sub	sp, #36	; 0x24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbc8:	4ba1      	ldr	r3, [pc, #644]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbcc:	f003 0303 	and.w	r3, r3, #3
 800cbd0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800cbd2:	4b9f      	ldr	r3, [pc, #636]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd6:	0b1b      	lsrs	r3, r3, #12
 800cbd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbdc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cbde:	4b9c      	ldr	r3, [pc, #624]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe2:	091b      	lsrs	r3, r3, #4
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800cbea:	4b99      	ldr	r3, [pc, #612]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbee:	08db      	lsrs	r3, r3, #3
 800cbf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	fb02 f303 	mul.w	r3, r2, r3
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 8111 	beq.w	800ce30 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	f000 8083 	beq.w	800cd1c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	f200 80a1 	bhi.w	800cd60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d003      	beq.n	800cc2c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d056      	beq.n	800ccd8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cc2a:	e099      	b.n	800cd60 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc2c:	4b88      	ldr	r3, [pc, #544]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 0320 	and.w	r3, r3, #32
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d02d      	beq.n	800cc94 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cc38:	4b85      	ldr	r3, [pc, #532]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	08db      	lsrs	r3, r3, #3
 800cc3e:	f003 0303 	and.w	r3, r3, #3
 800cc42:	4a84      	ldr	r2, [pc, #528]	; (800ce54 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cc44:	fa22 f303 	lsr.w	r3, r2, r3
 800cc48:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	ee07 3a90 	vmov	s15, r3
 800cc50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	ee07 3a90 	vmov	s15, r3
 800cc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc62:	4b7b      	ldr	r3, [pc, #492]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cc7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cc92:	e087      	b.n	800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce5c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca6:	4b6a      	ldr	r3, [pc, #424]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ccbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ccd6:	e065      	b.n	800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccea:	4b59      	ldr	r3, [pc, #356]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd1a:	e043      	b.n	800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd2e:	4b48      	ldr	r3, [pc, #288]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cd5e:	e021      	b.n	800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce60 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd72:	4b37      	ldr	r3, [pc, #220]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd7a:	ee07 3a90 	vmov	s15, r3
 800cd7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd82:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cda2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800cda4:	4b2a      	ldr	r3, [pc, #168]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda8:	0a5b      	lsrs	r3, r3, #9
 800cdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdae:	ee07 3a90 	vmov	s15, r3
 800cdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdca:	ee17 2a90 	vmov	r2, s15
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800cdd2:	4b1f      	ldr	r3, [pc, #124]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdd6:	0c1b      	lsrs	r3, r3, #16
 800cdd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cddc:	ee07 3a90 	vmov	s15, r3
 800cde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cde4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cde8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdec:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdf8:	ee17 2a90 	vmov	r2, s15
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800ce00:	4b13      	ldr	r3, [pc, #76]	; (800ce50 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce04:	0e1b      	lsrs	r3, r3, #24
 800ce06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce0a:	ee07 3a90 	vmov	s15, r3
 800ce0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce26:	ee17 2a90 	vmov	r2, s15
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ce2e:	e008      	b.n	800ce42 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	609a      	str	r2, [r3, #8]
}
 800ce42:	bf00      	nop
 800ce44:	3724      	adds	r7, #36	; 0x24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	58024400 	.word	0x58024400
 800ce54:	03d09000 	.word	0x03d09000
 800ce58:	46000000 	.word	0x46000000
 800ce5c:	4c742400 	.word	0x4c742400
 800ce60:	4a742400 	.word	0x4a742400
 800ce64:	4af42400 	.word	0x4af42400

0800ce68 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b089      	sub	sp, #36	; 0x24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce70:	4ba1      	ldr	r3, [pc, #644]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce74:	f003 0303 	and.w	r3, r3, #3
 800ce78:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800ce7a:	4b9f      	ldr	r3, [pc, #636]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7e:	0d1b      	lsrs	r3, r3, #20
 800ce80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce84:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ce86:	4b9c      	ldr	r3, [pc, #624]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	0a1b      	lsrs	r3, r3, #8
 800ce8c:	f003 0301 	and.w	r3, r3, #1
 800ce90:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800ce92:	4b99      	ldr	r3, [pc, #612]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce96:	08db      	lsrs	r3, r3, #3
 800ce98:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce9c:	693a      	ldr	r2, [r7, #16]
 800ce9e:	fb02 f303 	mul.w	r3, r2, r3
 800cea2:	ee07 3a90 	vmov	s15, r3
 800cea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceaa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ceae:	697b      	ldr	r3, [r7, #20]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 8111 	beq.w	800d0d8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ceb6:	69bb      	ldr	r3, [r7, #24]
 800ceb8:	2b02      	cmp	r3, #2
 800ceba:	f000 8083 	beq.w	800cfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cebe:	69bb      	ldr	r3, [r7, #24]
 800cec0:	2b02      	cmp	r3, #2
 800cec2:	f200 80a1 	bhi.w	800d008 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d003      	beq.n	800ced4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d056      	beq.n	800cf80 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ced2:	e099      	b.n	800d008 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ced4:	4b88      	ldr	r3, [pc, #544]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f003 0320 	and.w	r3, r3, #32
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d02d      	beq.n	800cf3c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cee0:	4b85      	ldr	r3, [pc, #532]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	08db      	lsrs	r3, r3, #3
 800cee6:	f003 0303 	and.w	r3, r3, #3
 800ceea:	4a84      	ldr	r2, [pc, #528]	; (800d0fc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ceec:	fa22 f303 	lsr.w	r3, r2, r3
 800cef0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	ee07 3a90 	vmov	s15, r3
 800cef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	ee07 3a90 	vmov	s15, r3
 800cf02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf0a:	4b7b      	ldr	r3, [pc, #492]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf12:	ee07 3a90 	vmov	s15, r3
 800cf16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf1e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf36:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cf3a:	e087      	b.n	800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf3c:	697b      	ldr	r3, [r7, #20]
 800cf3e:	ee07 3a90 	vmov	s15, r3
 800cf42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d104 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cf4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf4e:	4b6a      	ldr	r3, [pc, #424]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf56:	ee07 3a90 	vmov	s15, r3
 800cf5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf62:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cf66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cf7e:	e065      	b.n	800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cf80:	697b      	ldr	r3, [r7, #20]
 800cf82:	ee07 3a90 	vmov	s15, r3
 800cf86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf8a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cf8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf92:	4b59      	ldr	r3, [pc, #356]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cfc2:	e043      	b.n	800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	ee07 3a90 	vmov	s15, r3
 800cfca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfce:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d10c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cfd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd6:	4b48      	ldr	r3, [pc, #288]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfde:	ee07 3a90 	vmov	s15, r3
 800cfe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfea:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d002:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d006:	e021      	b.n	800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	ee07 3a90 	vmov	s15, r3
 800d00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d012:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d108 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d01a:	4b37      	ldr	r3, [pc, #220]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d022:	ee07 3a90 	vmov	s15, r3
 800d026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d02a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d02e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d03a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d046:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d04a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d04c:	4b2a      	ldr	r3, [pc, #168]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d050:	0a5b      	lsrs	r3, r3, #9
 800d052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d056:	ee07 3a90 	vmov	s15, r3
 800d05a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d062:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d066:	edd7 6a07 	vldr	s13, [r7, #28]
 800d06a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d06e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d072:	ee17 2a90 	vmov	r2, s15
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d07a:	4b1f      	ldr	r3, [pc, #124]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07e:	0c1b      	lsrs	r3, r3, #16
 800d080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d084:	ee07 3a90 	vmov	s15, r3
 800d088:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d08c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d090:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d094:	edd7 6a07 	vldr	s13, [r7, #28]
 800d098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d09c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0a0:	ee17 2a90 	vmov	r2, s15
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d0a8:	4b13      	ldr	r3, [pc, #76]	; (800d0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ac:	0e1b      	lsrs	r3, r3, #24
 800d0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b2:	ee07 3a90 	vmov	s15, r3
 800d0b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0ce:	ee17 2a90 	vmov	r2, s15
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d0d6:	e008      	b.n	800d0ea <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2200      	movs	r2, #0
 800d0dc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	609a      	str	r2, [r3, #8]
}
 800d0ea:	bf00      	nop
 800d0ec:	3724      	adds	r7, #36	; 0x24
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr
 800d0f6:	bf00      	nop
 800d0f8:	58024400 	.word	0x58024400
 800d0fc:	03d09000 	.word	0x03d09000
 800d100:	46000000 	.word	0x46000000
 800d104:	4c742400 	.word	0x4c742400
 800d108:	4a742400 	.word	0x4a742400
 800d10c:	4af42400 	.word	0x4af42400

0800d110 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d11a:	2300      	movs	r3, #0
 800d11c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d11e:	4b53      	ldr	r3, [pc, #332]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d122:	f003 0303 	and.w	r3, r3, #3
 800d126:	2b03      	cmp	r3, #3
 800d128:	d101      	bne.n	800d12e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e099      	b.n	800d262 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d12e:	4b4f      	ldr	r3, [pc, #316]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	4a4e      	ldr	r2, [pc, #312]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d134:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d13a:	f7fa faa5 	bl	8007688 <HAL_GetTick>
 800d13e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d140:	e008      	b.n	800d154 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d142:	f7fa faa1 	bl	8007688 <HAL_GetTick>
 800d146:	4602      	mov	r2, r0
 800d148:	68bb      	ldr	r3, [r7, #8]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	2b02      	cmp	r3, #2
 800d14e:	d901      	bls.n	800d154 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e086      	b.n	800d262 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d154:	4b45      	ldr	r3, [pc, #276]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d1f0      	bne.n	800d142 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d160:	4b42      	ldr	r3, [pc, #264]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d164:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	031b      	lsls	r3, r3, #12
 800d16e:	493f      	ldr	r1, [pc, #252]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d170:	4313      	orrs	r3, r2
 800d172:	628b      	str	r3, [r1, #40]	; 0x28
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	685b      	ldr	r3, [r3, #4]
 800d178:	3b01      	subs	r3, #1
 800d17a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	3b01      	subs	r3, #1
 800d184:	025b      	lsls	r3, r3, #9
 800d186:	b29b      	uxth	r3, r3
 800d188:	431a      	orrs	r2, r3
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	68db      	ldr	r3, [r3, #12]
 800d18e:	3b01      	subs	r3, #1
 800d190:	041b      	lsls	r3, r3, #16
 800d192:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d196:	431a      	orrs	r2, r3
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	691b      	ldr	r3, [r3, #16]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	061b      	lsls	r3, r3, #24
 800d1a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1a4:	4931      	ldr	r1, [pc, #196]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1a6:	4313      	orrs	r3, r2
 800d1a8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d1aa:	4b30      	ldr	r3, [pc, #192]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	492d      	ldr	r1, [pc, #180]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1b8:	4313      	orrs	r3, r2
 800d1ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d1bc:	4b2b      	ldr	r3, [pc, #172]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c0:	f023 0220 	bic.w	r2, r3, #32
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	699b      	ldr	r3, [r3, #24]
 800d1c8:	4928      	ldr	r1, [pc, #160]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1ca:	4313      	orrs	r3, r2
 800d1cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d1ce:	4b27      	ldr	r3, [pc, #156]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d2:	4a26      	ldr	r2, [pc, #152]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1d4:	f023 0310 	bic.w	r3, r3, #16
 800d1d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d1da:	4b24      	ldr	r3, [pc, #144]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1de:	4b24      	ldr	r3, [pc, #144]	; (800d270 <RCCEx_PLL2_Config+0x160>)
 800d1e0:	4013      	ands	r3, r2
 800d1e2:	687a      	ldr	r2, [r7, #4]
 800d1e4:	69d2      	ldr	r2, [r2, #28]
 800d1e6:	00d2      	lsls	r2, r2, #3
 800d1e8:	4920      	ldr	r1, [pc, #128]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1ea:	4313      	orrs	r3, r2
 800d1ec:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d1ee:	4b1f      	ldr	r3, [pc, #124]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f2:	4a1e      	ldr	r2, [pc, #120]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d1f4:	f043 0310 	orr.w	r3, r3, #16
 800d1f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d106      	bne.n	800d20e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d200:	4b1a      	ldr	r3, [pc, #104]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d204:	4a19      	ldr	r2, [pc, #100]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d20a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d20c:	e00f      	b.n	800d22e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d106      	bne.n	800d222 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d214:	4b15      	ldr	r3, [pc, #84]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d218:	4a14      	ldr	r2, [pc, #80]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d21a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d21e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d220:	e005      	b.n	800d22e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d222:	4b12      	ldr	r3, [pc, #72]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d226:	4a11      	ldr	r2, [pc, #68]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d228:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d22c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d22e:	4b0f      	ldr	r3, [pc, #60]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	4a0e      	ldr	r2, [pc, #56]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d234:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d238:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d23a:	f7fa fa25 	bl	8007688 <HAL_GetTick>
 800d23e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d240:	e008      	b.n	800d254 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d242:	f7fa fa21 	bl	8007688 <HAL_GetTick>
 800d246:	4602      	mov	r2, r0
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	1ad3      	subs	r3, r2, r3
 800d24c:	2b02      	cmp	r3, #2
 800d24e:	d901      	bls.n	800d254 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d250:	2303      	movs	r3, #3
 800d252:	e006      	b.n	800d262 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d254:	4b05      	ldr	r3, [pc, #20]	; (800d26c <RCCEx_PLL2_Config+0x15c>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d0f0      	beq.n	800d242 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d260:	7bfb      	ldrb	r3, [r7, #15]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}
 800d26a:	bf00      	nop
 800d26c:	58024400 	.word	0x58024400
 800d270:	ffff0007 	.word	0xffff0007

0800d274 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d27e:	2300      	movs	r3, #0
 800d280:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d282:	4b53      	ldr	r3, [pc, #332]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d286:	f003 0303 	and.w	r3, r3, #3
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	d101      	bne.n	800d292 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d28e:	2301      	movs	r3, #1
 800d290:	e099      	b.n	800d3c6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d292:	4b4f      	ldr	r3, [pc, #316]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	4a4e      	ldr	r2, [pc, #312]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d298:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d29c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d29e:	f7fa f9f3 	bl	8007688 <HAL_GetTick>
 800d2a2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2a4:	e008      	b.n	800d2b8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d2a6:	f7fa f9ef 	bl	8007688 <HAL_GetTick>
 800d2aa:	4602      	mov	r2, r0
 800d2ac:	68bb      	ldr	r3, [r7, #8]
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d901      	bls.n	800d2b8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2b4:	2303      	movs	r3, #3
 800d2b6:	e086      	b.n	800d3c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2b8:	4b45      	ldr	r3, [pc, #276]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d1f0      	bne.n	800d2a6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d2c4:	4b42      	ldr	r3, [pc, #264]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d2c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	051b      	lsls	r3, r3, #20
 800d2d2:	493f      	ldr	r1, [pc, #252]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	628b      	str	r3, [r1, #40]	; 0x28
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	3b01      	subs	r3, #1
 800d2de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	689b      	ldr	r3, [r3, #8]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	025b      	lsls	r3, r3, #9
 800d2ea:	b29b      	uxth	r3, r3
 800d2ec:	431a      	orrs	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	041b      	lsls	r3, r3, #16
 800d2f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2fa:	431a      	orrs	r2, r3
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	691b      	ldr	r3, [r3, #16]
 800d300:	3b01      	subs	r3, #1
 800d302:	061b      	lsls	r3, r3, #24
 800d304:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d308:	4931      	ldr	r1, [pc, #196]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d30a:	4313      	orrs	r3, r2
 800d30c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d30e:	4b30      	ldr	r3, [pc, #192]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d312:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	695b      	ldr	r3, [r3, #20]
 800d31a:	492d      	ldr	r1, [pc, #180]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d31c:	4313      	orrs	r3, r2
 800d31e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d320:	4b2b      	ldr	r3, [pc, #172]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d324:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	699b      	ldr	r3, [r3, #24]
 800d32c:	4928      	ldr	r1, [pc, #160]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d32e:	4313      	orrs	r3, r2
 800d330:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d332:	4b27      	ldr	r3, [pc, #156]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d336:	4a26      	ldr	r2, [pc, #152]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d33c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d33e:	4b24      	ldr	r3, [pc, #144]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d342:	4b24      	ldr	r3, [pc, #144]	; (800d3d4 <RCCEx_PLL3_Config+0x160>)
 800d344:	4013      	ands	r3, r2
 800d346:	687a      	ldr	r2, [r7, #4]
 800d348:	69d2      	ldr	r2, [r2, #28]
 800d34a:	00d2      	lsls	r2, r2, #3
 800d34c:	4920      	ldr	r1, [pc, #128]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d34e:	4313      	orrs	r3, r2
 800d350:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d352:	4b1f      	ldr	r3, [pc, #124]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d356:	4a1e      	ldr	r2, [pc, #120]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d35c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d106      	bne.n	800d372 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d364:	4b1a      	ldr	r3, [pc, #104]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d368:	4a19      	ldr	r2, [pc, #100]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d36a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d36e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d370:	e00f      	b.n	800d392 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d106      	bne.n	800d386 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d378:	4b15      	ldr	r3, [pc, #84]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d37c:	4a14      	ldr	r2, [pc, #80]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d37e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d382:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d384:	e005      	b.n	800d392 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d386:	4b12      	ldr	r3, [pc, #72]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d38a:	4a11      	ldr	r2, [pc, #68]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d38c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d390:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d392:	4b0f      	ldr	r3, [pc, #60]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a0e      	ldr	r2, [pc, #56]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d398:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d39c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d39e:	f7fa f973 	bl	8007688 <HAL_GetTick>
 800d3a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3a4:	e008      	b.n	800d3b8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d3a6:	f7fa f96f 	bl	8007688 <HAL_GetTick>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	1ad3      	subs	r3, r2, r3
 800d3b0:	2b02      	cmp	r3, #2
 800d3b2:	d901      	bls.n	800d3b8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3b4:	2303      	movs	r3, #3
 800d3b6:	e006      	b.n	800d3c6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <RCCEx_PLL3_Config+0x15c>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d0f0      	beq.n	800d3a6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	3710      	adds	r7, #16
 800d3ca:	46bd      	mov	sp, r7
 800d3cc:	bd80      	pop	{r7, pc}
 800d3ce:	bf00      	nop
 800d3d0:	58024400 	.word	0x58024400
 800d3d4:	ffff0007 	.word	0xffff0007

0800d3d8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d3d8:	b580      	push	{r7, lr}
 800d3da:	b084      	sub	sp, #16
 800d3dc:	af00      	add	r7, sp, #0
 800d3de:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d101      	bne.n	800d3ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	e0f1      	b.n	800d5ce <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	4a78      	ldr	r2, [pc, #480]	; (800d5d8 <HAL_SPI_Init+0x200>)
 800d3f6:	4293      	cmp	r3, r2
 800d3f8:	d00f      	beq.n	800d41a <HAL_SPI_Init+0x42>
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	4a77      	ldr	r2, [pc, #476]	; (800d5dc <HAL_SPI_Init+0x204>)
 800d400:	4293      	cmp	r3, r2
 800d402:	d00a      	beq.n	800d41a <HAL_SPI_Init+0x42>
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4a75      	ldr	r2, [pc, #468]	; (800d5e0 <HAL_SPI_Init+0x208>)
 800d40a:	4293      	cmp	r3, r2
 800d40c:	d005      	beq.n	800d41a <HAL_SPI_Init+0x42>
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68db      	ldr	r3, [r3, #12]
 800d412:	2b0f      	cmp	r3, #15
 800d414:	d901      	bls.n	800d41a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d416:	2301      	movs	r3, #1
 800d418:	e0d9      	b.n	800d5ce <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	f000 fba2 	bl	800db64 <SPI_GetPacketSize>
 800d420:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	4a6c      	ldr	r2, [pc, #432]	; (800d5d8 <HAL_SPI_Init+0x200>)
 800d428:	4293      	cmp	r3, r2
 800d42a:	d00c      	beq.n	800d446 <HAL_SPI_Init+0x6e>
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4a6a      	ldr	r2, [pc, #424]	; (800d5dc <HAL_SPI_Init+0x204>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d007      	beq.n	800d446 <HAL_SPI_Init+0x6e>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a69      	ldr	r2, [pc, #420]	; (800d5e0 <HAL_SPI_Init+0x208>)
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d002      	beq.n	800d446 <HAL_SPI_Init+0x6e>
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2b08      	cmp	r3, #8
 800d444:	d811      	bhi.n	800d46a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d44a:	4a63      	ldr	r2, [pc, #396]	; (800d5d8 <HAL_SPI_Init+0x200>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d009      	beq.n	800d464 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	4a61      	ldr	r2, [pc, #388]	; (800d5dc <HAL_SPI_Init+0x204>)
 800d456:	4293      	cmp	r3, r2
 800d458:	d004      	beq.n	800d464 <HAL_SPI_Init+0x8c>
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	4a60      	ldr	r2, [pc, #384]	; (800d5e0 <HAL_SPI_Init+0x208>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d104      	bne.n	800d46e <HAL_SPI_Init+0x96>
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b10      	cmp	r3, #16
 800d468:	d901      	bls.n	800d46e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d46a:	2301      	movs	r3, #1
 800d46c:	e0af      	b.n	800d5ce <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d474:	b2db      	uxtb	r3, r3
 800d476:	2b00      	cmp	r3, #0
 800d478:	d106      	bne.n	800d488 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f7f9 fe08 	bl	8007098 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2202      	movs	r2, #2
 800d48c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	681a      	ldr	r2, [r3, #0]
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	f022 0201 	bic.w	r2, r2, #1
 800d49e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d4aa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	699b      	ldr	r3, [r3, #24]
 800d4b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d4b4:	d119      	bne.n	800d4ea <HAL_SPI_Init+0x112>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d4be:	d103      	bne.n	800d4c8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d008      	beq.n	800d4da <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d10c      	bne.n	800d4ea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d4d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d4d8:	d107      	bne.n	800d4ea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	681a      	ldr	r2, [r3, #0]
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d4e8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	69da      	ldr	r2, [r3, #28]
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	68bb      	ldr	r3, [r7, #8]
 800d4f6:	431a      	orrs	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fc:	ea42 0103 	orr.w	r1, r2, r3
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68da      	ldr	r2, [r3, #12]
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	681b      	ldr	r3, [r3, #0]
 800d508:	430a      	orrs	r2, r1
 800d50a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d514:	431a      	orrs	r2, r3
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51a:	431a      	orrs	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	699b      	ldr	r3, [r3, #24]
 800d520:	431a      	orrs	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	691b      	ldr	r3, [r3, #16]
 800d526:	431a      	orrs	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	695b      	ldr	r3, [r3, #20]
 800d52c:	431a      	orrs	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6a1b      	ldr	r3, [r3, #32]
 800d532:	431a      	orrs	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	431a      	orrs	r2, r3
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d53e:	431a      	orrs	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	689b      	ldr	r3, [r3, #8]
 800d544:	431a      	orrs	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d54a:	ea42 0103 	orr.w	r1, r2, r3
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	430a      	orrs	r2, r1
 800d558:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d113      	bne.n	800d58a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d574:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d588:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f022 0201 	bic.w	r2, r2, #1
 800d598:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00a      	beq.n	800d5bc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	430a      	orrs	r2, r1
 800d5ba:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d5cc:	2300      	movs	r3, #0
}
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	3710      	adds	r7, #16
 800d5d2:	46bd      	mov	sp, r7
 800d5d4:	bd80      	pop	{r7, pc}
 800d5d6:	bf00      	nop
 800d5d8:	40013000 	.word	0x40013000
 800d5dc:	40003800 	.word	0x40003800
 800d5e0:	40003c00 	.word	0x40003c00

0800d5e4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b08a      	sub	sp, #40	; 0x28
 800d5e8:	af02      	add	r7, sp, #8
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	603b      	str	r3, [r7, #0]
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	3320      	adds	r3, #32
 800d5fa:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d606:	2b01      	cmp	r3, #1
 800d608:	d101      	bne.n	800d60e <HAL_SPI_Transmit+0x2a>
 800d60a:	2302      	movs	r3, #2
 800d60c:	e1d7      	b.n	800d9be <HAL_SPI_Transmit+0x3da>
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2201      	movs	r2, #1
 800d612:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d616:	f7fa f837 	bl	8007688 <HAL_GetTick>
 800d61a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d622:	b2db      	uxtb	r3, r3
 800d624:	2b01      	cmp	r3, #1
 800d626:	d007      	beq.n	800d638 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d628:	2302      	movs	r3, #2
 800d62a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2200      	movs	r2, #0
 800d630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d634:	7efb      	ldrb	r3, [r7, #27]
 800d636:	e1c2      	b.n	800d9be <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d638:	68bb      	ldr	r3, [r7, #8]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d002      	beq.n	800d644 <HAL_SPI_Transmit+0x60>
 800d63e:	88fb      	ldrh	r3, [r7, #6]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d107      	bne.n	800d654 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d644:	2301      	movs	r3, #1
 800d646:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d650:	7efb      	ldrb	r3, [r7, #27]
 800d652:	e1b4      	b.n	800d9be <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	2203      	movs	r2, #3
 800d658:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	2200      	movs	r2, #0
 800d660:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	88fa      	ldrh	r2, [r7, #6]
 800d66e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	88fa      	ldrh	r2, [r7, #6]
 800d676:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2200      	movs	r2, #0
 800d67e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2200      	movs	r2, #0
 800d684:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2200      	movs	r2, #0
 800d694:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2200      	movs	r2, #0
 800d69a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	689b      	ldr	r3, [r3, #8]
 800d6a0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d6a4:	d107      	bne.n	800d6b6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d6b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	685a      	ldr	r2, [r3, #4]
 800d6bc:	4b96      	ldr	r3, [pc, #600]	; (800d918 <HAL_SPI_Transmit+0x334>)
 800d6be:	4013      	ands	r3, r2
 800d6c0:	88f9      	ldrh	r1, [r7, #6]
 800d6c2:	68fa      	ldr	r2, [r7, #12]
 800d6c4:	6812      	ldr	r2, [r2, #0]
 800d6c6:	430b      	orrs	r3, r1
 800d6c8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	681a      	ldr	r2, [r3, #0]
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f042 0201 	orr.w	r2, r2, #1
 800d6d8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	685b      	ldr	r3, [r3, #4]
 800d6de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d6e2:	d107      	bne.n	800d6f4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	681a      	ldr	r2, [r3, #0]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d6f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	68db      	ldr	r3, [r3, #12]
 800d6f8:	2b0f      	cmp	r3, #15
 800d6fa:	d947      	bls.n	800d78c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d6fc:	e03f      	b.n	800d77e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	695b      	ldr	r3, [r3, #20]
 800d704:	f003 0302 	and.w	r3, r3, #2
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d114      	bne.n	800d736 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	6812      	ldr	r2, [r2, #0]
 800d716:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d71c:	1d1a      	adds	r2, r3, #4
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d728:	b29b      	uxth	r3, r3
 800d72a:	3b01      	subs	r3, #1
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d734:	e023      	b.n	800d77e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d736:	f7f9 ffa7 	bl	8007688 <HAL_GetTick>
 800d73a:	4602      	mov	r2, r0
 800d73c:	697b      	ldr	r3, [r7, #20]
 800d73e:	1ad3      	subs	r3, r2, r3
 800d740:	683a      	ldr	r2, [r7, #0]
 800d742:	429a      	cmp	r2, r3
 800d744:	d803      	bhi.n	800d74e <HAL_SPI_Transmit+0x16a>
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d74c:	d102      	bne.n	800d754 <HAL_SPI_Transmit+0x170>
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d114      	bne.n	800d77e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d754:	68f8      	ldr	r0, [r7, #12]
 800d756:	f000 f937 	bl	800d9c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	2200      	movs	r2, #0
 800d75e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d768:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2201      	movs	r2, #1
 800d776:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d77a:	2303      	movs	r3, #3
 800d77c:	e11f      	b.n	800d9be <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d784:	b29b      	uxth	r3, r3
 800d786:	2b00      	cmp	r3, #0
 800d788:	d1b9      	bne.n	800d6fe <HAL_SPI_Transmit+0x11a>
 800d78a:	e0f2      	b.n	800d972 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	2b07      	cmp	r3, #7
 800d792:	f240 80e7 	bls.w	800d964 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d796:	e05d      	b.n	800d854 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	695b      	ldr	r3, [r3, #20]
 800d79e:	f003 0302 	and.w	r3, r3, #2
 800d7a2:	2b02      	cmp	r3, #2
 800d7a4:	d132      	bne.n	800d80c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7ac:	b29b      	uxth	r3, r3
 800d7ae:	2b01      	cmp	r3, #1
 800d7b0:	d918      	bls.n	800d7e4 <HAL_SPI_Transmit+0x200>
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d014      	beq.n	800d7e4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	6812      	ldr	r2, [r2, #0]
 800d7c4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ca:	1d1a      	adds	r2, r3, #4
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7d6:	b29b      	uxth	r3, r3
 800d7d8:	3b02      	subs	r3, #2
 800d7da:	b29a      	uxth	r2, r3
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d7e2:	e037      	b.n	800d854 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7e8:	881a      	ldrh	r2, [r3, #0]
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7f2:	1c9a      	adds	r2, r3, #2
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d7fe:	b29b      	uxth	r3, r3
 800d800:	3b01      	subs	r3, #1
 800d802:	b29a      	uxth	r2, r3
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d80a:	e023      	b.n	800d854 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d80c:	f7f9 ff3c 	bl	8007688 <HAL_GetTick>
 800d810:	4602      	mov	r2, r0
 800d812:	697b      	ldr	r3, [r7, #20]
 800d814:	1ad3      	subs	r3, r2, r3
 800d816:	683a      	ldr	r2, [r7, #0]
 800d818:	429a      	cmp	r2, r3
 800d81a:	d803      	bhi.n	800d824 <HAL_SPI_Transmit+0x240>
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d822:	d102      	bne.n	800d82a <HAL_SPI_Transmit+0x246>
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d114      	bne.n	800d854 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f000 f8cc 	bl	800d9c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	2200      	movs	r2, #0
 800d834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d83e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	2201      	movs	r2, #1
 800d84c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d850:	2303      	movs	r3, #3
 800d852:	e0b4      	b.n	800d9be <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d85a:	b29b      	uxth	r3, r3
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d19b      	bne.n	800d798 <HAL_SPI_Transmit+0x1b4>
 800d860:	e087      	b.n	800d972 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	695b      	ldr	r3, [r3, #20]
 800d868:	f003 0302 	and.w	r3, r3, #2
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d155      	bne.n	800d91c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d876:	b29b      	uxth	r3, r3
 800d878:	2b03      	cmp	r3, #3
 800d87a:	d918      	bls.n	800d8ae <HAL_SPI_Transmit+0x2ca>
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d880:	2b40      	cmp	r3, #64	; 0x40
 800d882:	d914      	bls.n	800d8ae <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	6812      	ldr	r2, [r2, #0]
 800d88e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d894:	1d1a      	adds	r2, r3, #4
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	3b04      	subs	r3, #4
 800d8a4:	b29a      	uxth	r2, r3
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d8ac:	e05a      	b.n	800d964 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8b4:	b29b      	uxth	r3, r3
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d917      	bls.n	800d8ea <HAL_SPI_Transmit+0x306>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d013      	beq.n	800d8ea <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8c6:	881a      	ldrh	r2, [r3, #0]
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8d0:	1c9a      	adds	r2, r3, #2
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8dc:	b29b      	uxth	r3, r3
 800d8de:	3b02      	subs	r3, #2
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d8e8:	e03c      	b.n	800d964 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	3320      	adds	r3, #32
 800d8f4:	7812      	ldrb	r2, [r2, #0]
 800d8f6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8fc:	1c5a      	adds	r2, r3, #1
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d908:	b29b      	uxth	r3, r3
 800d90a:	3b01      	subs	r3, #1
 800d90c:	b29a      	uxth	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d914:	e026      	b.n	800d964 <HAL_SPI_Transmit+0x380>
 800d916:	bf00      	nop
 800d918:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d91c:	f7f9 feb4 	bl	8007688 <HAL_GetTick>
 800d920:	4602      	mov	r2, r0
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	1ad3      	subs	r3, r2, r3
 800d926:	683a      	ldr	r2, [r7, #0]
 800d928:	429a      	cmp	r2, r3
 800d92a:	d803      	bhi.n	800d934 <HAL_SPI_Transmit+0x350>
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d932:	d102      	bne.n	800d93a <HAL_SPI_Transmit+0x356>
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d114      	bne.n	800d964 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d93a:	68f8      	ldr	r0, [r7, #12]
 800d93c:	f000 f844 	bl	800d9c8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2200      	movs	r2, #0
 800d944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d94e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	2201      	movs	r2, #1
 800d95c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d960:	2303      	movs	r3, #3
 800d962:	e02c      	b.n	800d9be <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	f47f af78 	bne.w	800d862 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	9300      	str	r3, [sp, #0]
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	2200      	movs	r2, #0
 800d97a:	2108      	movs	r1, #8
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f000 f8c3 	bl	800db08 <SPI_WaitOnFlagUntilTimeout>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d007      	beq.n	800d998 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d98e:	f043 0220 	orr.w	r2, r3, #32
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800d998:	68f8      	ldr	r0, [r7, #12]
 800d99a:	f000 f815 	bl	800d9c8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2201      	movs	r2, #1
 800d9aa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d001      	beq.n	800d9bc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	e000      	b.n	800d9be <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800d9bc:	7efb      	ldrb	r3, [r7, #27]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3720      	adds	r7, #32
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop

0800d9c8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	695b      	ldr	r3, [r3, #20]
 800d9d6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	699a      	ldr	r2, [r3, #24]
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	f042 0208 	orr.w	r2, r2, #8
 800d9e6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	699a      	ldr	r2, [r3, #24]
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f042 0210 	orr.w	r2, r2, #16
 800d9f6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681a      	ldr	r2, [r3, #0]
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	f022 0201 	bic.w	r2, r2, #1
 800da06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	6919      	ldr	r1, [r3, #16]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	4b3c      	ldr	r3, [pc, #240]	; (800db04 <SPI_CloseTransfer+0x13c>)
 800da14:	400b      	ands	r3, r1
 800da16:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689a      	ldr	r2, [r3, #8]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800da26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da2e:	b2db      	uxtb	r3, r3
 800da30:	2b04      	cmp	r3, #4
 800da32:	d014      	beq.n	800da5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	f003 0320 	and.w	r3, r3, #32
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00f      	beq.n	800da5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	699a      	ldr	r2, [r3, #24]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f042 0220 	orr.w	r2, r2, #32
 800da5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da64:	b2db      	uxtb	r3, r3
 800da66:	2b03      	cmp	r3, #3
 800da68:	d014      	beq.n	800da94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da70:	2b00      	cmp	r3, #0
 800da72:	d00f      	beq.n	800da94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da7a:	f043 0204 	orr.w	r2, r3, #4
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	699a      	ldr	r2, [r3, #24]
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00f      	beq.n	800dabe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daa4:	f043 0201 	orr.w	r2, r3, #1
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	681b      	ldr	r3, [r3, #0]
 800dab2:	699a      	ldr	r2, [r3, #24]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dabc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d00f      	beq.n	800dae8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dace:	f043 0208 	orr.w	r2, r3, #8
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	699a      	ldr	r2, [r3, #24]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dae6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	2200      	movs	r2, #0
 800daf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800daf8:	bf00      	nop
 800dafa:	3714      	adds	r7, #20
 800dafc:	46bd      	mov	sp, r7
 800dafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db02:	4770      	bx	lr
 800db04:	fffffc90 	.word	0xfffffc90

0800db08 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	60f8      	str	r0, [r7, #12]
 800db10:	60b9      	str	r1, [r7, #8]
 800db12:	603b      	str	r3, [r7, #0]
 800db14:	4613      	mov	r3, r2
 800db16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800db18:	e010      	b.n	800db3c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db1a:	f7f9 fdb5 	bl	8007688 <HAL_GetTick>
 800db1e:	4602      	mov	r2, r0
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	69ba      	ldr	r2, [r7, #24]
 800db26:	429a      	cmp	r2, r3
 800db28:	d803      	bhi.n	800db32 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800db2a:	69bb      	ldr	r3, [r7, #24]
 800db2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db30:	d102      	bne.n	800db38 <SPI_WaitOnFlagUntilTimeout+0x30>
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d101      	bne.n	800db3c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800db38:	2303      	movs	r3, #3
 800db3a:	e00f      	b.n	800db5c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	695a      	ldr	r2, [r3, #20]
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	4013      	ands	r3, r2
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	429a      	cmp	r2, r3
 800db4a:	bf0c      	ite	eq
 800db4c:	2301      	moveq	r3, #1
 800db4e:	2300      	movne	r3, #0
 800db50:	b2db      	uxtb	r3, r3
 800db52:	461a      	mov	r2, r3
 800db54:	79fb      	ldrb	r3, [r7, #7]
 800db56:	429a      	cmp	r2, r3
 800db58:	d0df      	beq.n	800db1a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800db5a:	2300      	movs	r3, #0
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800db64:	b480      	push	{r7}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db70:	095b      	lsrs	r3, r3, #5
 800db72:	3301      	adds	r3, #1
 800db74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68db      	ldr	r3, [r3, #12]
 800db7a:	3301      	adds	r3, #1
 800db7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	3307      	adds	r3, #7
 800db82:	08db      	lsrs	r3, r3, #3
 800db84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	68fa      	ldr	r2, [r7, #12]
 800db8a:	fb02 f303 	mul.w	r3, r2, r3
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3714      	adds	r7, #20
 800db92:	46bd      	mov	sp, r7
 800db94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db98:	4770      	bx	lr

0800db9a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800db9a:	b580      	push	{r7, lr}
 800db9c:	b082      	sub	sp, #8
 800db9e:	af00      	add	r7, sp, #0
 800dba0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d101      	bne.n	800dbac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e049      	b.n	800dc40 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d106      	bne.n	800dbc6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f7f9 fad5 	bl	8007170 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2202      	movs	r2, #2
 800dbca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	3304      	adds	r3, #4
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	4610      	mov	r0, r2
 800dbda:	f000 fa23 	bl	800e024 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2201      	movs	r2, #1
 800dbea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2201      	movs	r2, #1
 800dc02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	2201      	movs	r2, #1
 800dc22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2201      	movs	r2, #1
 800dc32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	2201      	movs	r2, #1
 800dc3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc3e:	2300      	movs	r3, #0
}
 800dc40:	4618      	mov	r0, r3
 800dc42:	3708      	adds	r7, #8
 800dc44:	46bd      	mov	sp, r7
 800dc46:	bd80      	pop	{r7, pc}

0800dc48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b085      	sub	sp, #20
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b01      	cmp	r3, #1
 800dc5a:	d001      	beq.n	800dc60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	e054      	b.n	800dd0a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	2202      	movs	r2, #2
 800dc64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	68da      	ldr	r2, [r3, #12]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f042 0201 	orr.w	r2, r2, #1
 800dc76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	4a26      	ldr	r2, [pc, #152]	; (800dd18 <HAL_TIM_Base_Start_IT+0xd0>)
 800dc7e:	4293      	cmp	r3, r2
 800dc80:	d022      	beq.n	800dcc8 <HAL_TIM_Base_Start_IT+0x80>
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc8a:	d01d      	beq.n	800dcc8 <HAL_TIM_Base_Start_IT+0x80>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	4a22      	ldr	r2, [pc, #136]	; (800dd1c <HAL_TIM_Base_Start_IT+0xd4>)
 800dc92:	4293      	cmp	r3, r2
 800dc94:	d018      	beq.n	800dcc8 <HAL_TIM_Base_Start_IT+0x80>
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	4a21      	ldr	r2, [pc, #132]	; (800dd20 <HAL_TIM_Base_Start_IT+0xd8>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	d013      	beq.n	800dcc8 <HAL_TIM_Base_Start_IT+0x80>
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a1f      	ldr	r2, [pc, #124]	; (800dd24 <HAL_TIM_Base_Start_IT+0xdc>)
 800dca6:	4293      	cmp	r3, r2
 800dca8:	d00e      	beq.n	800dcc8 <HAL_TIM_Base_Start_IT+0x80>
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	4a1e      	ldr	r2, [pc, #120]	; (800dd28 <HAL_TIM_Base_Start_IT+0xe0>)
 800dcb0:	4293      	cmp	r3, r2
 800dcb2:	d009      	beq.n	800dcc8 <HAL_TIM_Base_Start_IT+0x80>
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4a1c      	ldr	r2, [pc, #112]	; (800dd2c <HAL_TIM_Base_Start_IT+0xe4>)
 800dcba:	4293      	cmp	r3, r2
 800dcbc:	d004      	beq.n	800dcc8 <HAL_TIM_Base_Start_IT+0x80>
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	4a1b      	ldr	r2, [pc, #108]	; (800dd30 <HAL_TIM_Base_Start_IT+0xe8>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	d115      	bne.n	800dcf4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	689a      	ldr	r2, [r3, #8]
 800dcce:	4b19      	ldr	r3, [pc, #100]	; (800dd34 <HAL_TIM_Base_Start_IT+0xec>)
 800dcd0:	4013      	ands	r3, r2
 800dcd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	2b06      	cmp	r3, #6
 800dcd8:	d015      	beq.n	800dd06 <HAL_TIM_Base_Start_IT+0xbe>
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dce0:	d011      	beq.n	800dd06 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	f042 0201 	orr.w	r2, r2, #1
 800dcf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dcf2:	e008      	b.n	800dd06 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	681a      	ldr	r2, [r3, #0]
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	f042 0201 	orr.w	r2, r2, #1
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	e000      	b.n	800dd08 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dd06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800dd08:	2300      	movs	r3, #0
}
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	3714      	adds	r7, #20
 800dd0e:	46bd      	mov	sp, r7
 800dd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd14:	4770      	bx	lr
 800dd16:	bf00      	nop
 800dd18:	40010000 	.word	0x40010000
 800dd1c:	40000400 	.word	0x40000400
 800dd20:	40000800 	.word	0x40000800
 800dd24:	40000c00 	.word	0x40000c00
 800dd28:	40010400 	.word	0x40010400
 800dd2c:	40001800 	.word	0x40001800
 800dd30:	40014000 	.word	0x40014000
 800dd34:	00010007 	.word	0x00010007

0800dd38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800dd38:	b480      	push	{r7}
 800dd3a:	b083      	sub	sp, #12
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68da      	ldr	r2, [r3, #12]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f022 0201 	bic.w	r2, r2, #1
 800dd4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6a1a      	ldr	r2, [r3, #32]
 800dd56:	f241 1311 	movw	r3, #4369	; 0x1111
 800dd5a:	4013      	ands	r3, r2
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d10f      	bne.n	800dd80 <HAL_TIM_Base_Stop_IT+0x48>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	6a1a      	ldr	r2, [r3, #32]
 800dd66:	f240 4344 	movw	r3, #1092	; 0x444
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d107      	bne.n	800dd80 <HAL_TIM_Base_Stop_IT+0x48>
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	681a      	ldr	r2, [r3, #0]
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	f022 0201 	bic.w	r2, r2, #1
 800dd7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2201      	movs	r2, #1
 800dd84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	370c      	adds	r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr

0800dd96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800dd96:	b580      	push	{r7, lr}
 800dd98:	b082      	sub	sp, #8
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	691b      	ldr	r3, [r3, #16]
 800dda4:	f003 0302 	and.w	r3, r3, #2
 800dda8:	2b02      	cmp	r3, #2
 800ddaa:	d122      	bne.n	800ddf2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	68db      	ldr	r3, [r3, #12]
 800ddb2:	f003 0302 	and.w	r3, r3, #2
 800ddb6:	2b02      	cmp	r3, #2
 800ddb8:	d11b      	bne.n	800ddf2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	f06f 0202 	mvn.w	r2, #2
 800ddc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	699b      	ldr	r3, [r3, #24]
 800ddd0:	f003 0303 	and.w	r3, r3, #3
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d003      	beq.n	800dde0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f905 	bl	800dfe8 <HAL_TIM_IC_CaptureCallback>
 800ddde:	e005      	b.n	800ddec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 f8f7 	bl	800dfd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f000 f908 	bl	800dffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	2200      	movs	r2, #0
 800ddf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	691b      	ldr	r3, [r3, #16]
 800ddf8:	f003 0304 	and.w	r3, r3, #4
 800ddfc:	2b04      	cmp	r3, #4
 800ddfe:	d122      	bne.n	800de46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	68db      	ldr	r3, [r3, #12]
 800de06:	f003 0304 	and.w	r3, r3, #4
 800de0a:	2b04      	cmp	r3, #4
 800de0c:	d11b      	bne.n	800de46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	f06f 0204 	mvn.w	r2, #4
 800de16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2202      	movs	r2, #2
 800de1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	699b      	ldr	r3, [r3, #24]
 800de24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d003      	beq.n	800de34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f000 f8db 	bl	800dfe8 <HAL_TIM_IC_CaptureCallback>
 800de32:	e005      	b.n	800de40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de34:	6878      	ldr	r0, [r7, #4]
 800de36:	f000 f8cd 	bl	800dfd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f8de 	bl	800dffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	2200      	movs	r2, #0
 800de44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	691b      	ldr	r3, [r3, #16]
 800de4c:	f003 0308 	and.w	r3, r3, #8
 800de50:	2b08      	cmp	r3, #8
 800de52:	d122      	bne.n	800de9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	68db      	ldr	r3, [r3, #12]
 800de5a:	f003 0308 	and.w	r3, r3, #8
 800de5e:	2b08      	cmp	r3, #8
 800de60:	d11b      	bne.n	800de9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f06f 0208 	mvn.w	r2, #8
 800de6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2204      	movs	r2, #4
 800de70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	69db      	ldr	r3, [r3, #28]
 800de78:	f003 0303 	and.w	r3, r3, #3
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d003      	beq.n	800de88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f000 f8b1 	bl	800dfe8 <HAL_TIM_IC_CaptureCallback>
 800de86:	e005      	b.n	800de94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f8a3 	bl	800dfd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f000 f8b4 	bl	800dffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	691b      	ldr	r3, [r3, #16]
 800dea0:	f003 0310 	and.w	r3, r3, #16
 800dea4:	2b10      	cmp	r3, #16
 800dea6:	d122      	bne.n	800deee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	68db      	ldr	r3, [r3, #12]
 800deae:	f003 0310 	and.w	r3, r3, #16
 800deb2:	2b10      	cmp	r3, #16
 800deb4:	d11b      	bne.n	800deee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f06f 0210 	mvn.w	r2, #16
 800debe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2208      	movs	r2, #8
 800dec4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	69db      	ldr	r3, [r3, #28]
 800decc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d003      	beq.n	800dedc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f887 	bl	800dfe8 <HAL_TIM_IC_CaptureCallback>
 800deda:	e005      	b.n	800dee8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 f879 	bl	800dfd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 f88a 	bl	800dffc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	691b      	ldr	r3, [r3, #16]
 800def4:	f003 0301 	and.w	r3, r3, #1
 800def8:	2b01      	cmp	r3, #1
 800defa:	d10e      	bne.n	800df1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	f003 0301 	and.w	r3, r3, #1
 800df06:	2b01      	cmp	r3, #1
 800df08:	d107      	bne.n	800df1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	f06f 0201 	mvn.w	r2, #1
 800df12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f7f8 fb95 	bl	8006644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	691b      	ldr	r3, [r3, #16]
 800df20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df24:	2b80      	cmp	r3, #128	; 0x80
 800df26:	d10e      	bne.n	800df46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	68db      	ldr	r3, [r3, #12]
 800df2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df32:	2b80      	cmp	r3, #128	; 0x80
 800df34:	d107      	bne.n	800df46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800df3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f9a1 	bl	800e288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df54:	d10e      	bne.n	800df74 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	68db      	ldr	r3, [r3, #12]
 800df5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df60:	2b80      	cmp	r3, #128	; 0x80
 800df62:	d107      	bne.n	800df74 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800df6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 f994 	bl	800e29c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	691b      	ldr	r3, [r3, #16]
 800df7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df7e:	2b40      	cmp	r3, #64	; 0x40
 800df80:	d10e      	bne.n	800dfa0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df8c:	2b40      	cmp	r3, #64	; 0x40
 800df8e:	d107      	bne.n	800dfa0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800df98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f000 f838 	bl	800e010 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	691b      	ldr	r3, [r3, #16]
 800dfa6:	f003 0320 	and.w	r3, r3, #32
 800dfaa:	2b20      	cmp	r3, #32
 800dfac:	d10e      	bne.n	800dfcc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	68db      	ldr	r3, [r3, #12]
 800dfb4:	f003 0320 	and.w	r3, r3, #32
 800dfb8:	2b20      	cmp	r3, #32
 800dfba:	d107      	bne.n	800dfcc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	f06f 0220 	mvn.w	r2, #32
 800dfc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f954 	bl	800e274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dfcc:	bf00      	nop
 800dfce:	3708      	adds	r7, #8
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dfd4:	b480      	push	{r7}
 800dfd6:	b083      	sub	sp, #12
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dfdc:	bf00      	nop
 800dfde:	370c      	adds	r7, #12
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe6:	4770      	bx	lr

0800dfe8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dfe8:	b480      	push	{r7}
 800dfea:	b083      	sub	sp, #12
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dff0:	bf00      	nop
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e004:	bf00      	nop
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e010:	b480      	push	{r7}
 800e012:	b083      	sub	sp, #12
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e018:	bf00      	nop
 800e01a:	370c      	adds	r7, #12
 800e01c:	46bd      	mov	sp, r7
 800e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e022:	4770      	bx	lr

0800e024 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e024:	b480      	push	{r7}
 800e026:	b085      	sub	sp, #20
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a40      	ldr	r2, [pc, #256]	; (800e138 <TIM_Base_SetConfig+0x114>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d013      	beq.n	800e064 <TIM_Base_SetConfig+0x40>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e042:	d00f      	beq.n	800e064 <TIM_Base_SetConfig+0x40>
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	4a3d      	ldr	r2, [pc, #244]	; (800e13c <TIM_Base_SetConfig+0x118>)
 800e048:	4293      	cmp	r3, r2
 800e04a:	d00b      	beq.n	800e064 <TIM_Base_SetConfig+0x40>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	4a3c      	ldr	r2, [pc, #240]	; (800e140 <TIM_Base_SetConfig+0x11c>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d007      	beq.n	800e064 <TIM_Base_SetConfig+0x40>
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4a3b      	ldr	r2, [pc, #236]	; (800e144 <TIM_Base_SetConfig+0x120>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d003      	beq.n	800e064 <TIM_Base_SetConfig+0x40>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	4a3a      	ldr	r2, [pc, #232]	; (800e148 <TIM_Base_SetConfig+0x124>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d108      	bne.n	800e076 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e06a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	68fa      	ldr	r2, [r7, #12]
 800e072:	4313      	orrs	r3, r2
 800e074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a2f      	ldr	r2, [pc, #188]	; (800e138 <TIM_Base_SetConfig+0x114>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d01f      	beq.n	800e0be <TIM_Base_SetConfig+0x9a>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e084:	d01b      	beq.n	800e0be <TIM_Base_SetConfig+0x9a>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4a2c      	ldr	r2, [pc, #176]	; (800e13c <TIM_Base_SetConfig+0x118>)
 800e08a:	4293      	cmp	r3, r2
 800e08c:	d017      	beq.n	800e0be <TIM_Base_SetConfig+0x9a>
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	4a2b      	ldr	r2, [pc, #172]	; (800e140 <TIM_Base_SetConfig+0x11c>)
 800e092:	4293      	cmp	r3, r2
 800e094:	d013      	beq.n	800e0be <TIM_Base_SetConfig+0x9a>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	4a2a      	ldr	r2, [pc, #168]	; (800e144 <TIM_Base_SetConfig+0x120>)
 800e09a:	4293      	cmp	r3, r2
 800e09c:	d00f      	beq.n	800e0be <TIM_Base_SetConfig+0x9a>
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	4a29      	ldr	r2, [pc, #164]	; (800e148 <TIM_Base_SetConfig+0x124>)
 800e0a2:	4293      	cmp	r3, r2
 800e0a4:	d00b      	beq.n	800e0be <TIM_Base_SetConfig+0x9a>
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	4a28      	ldr	r2, [pc, #160]	; (800e14c <TIM_Base_SetConfig+0x128>)
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d007      	beq.n	800e0be <TIM_Base_SetConfig+0x9a>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	4a27      	ldr	r2, [pc, #156]	; (800e150 <TIM_Base_SetConfig+0x12c>)
 800e0b2:	4293      	cmp	r3, r2
 800e0b4:	d003      	beq.n	800e0be <TIM_Base_SetConfig+0x9a>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	4a26      	ldr	r2, [pc, #152]	; (800e154 <TIM_Base_SetConfig+0x130>)
 800e0ba:	4293      	cmp	r3, r2
 800e0bc:	d108      	bne.n	800e0d0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e0c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	695b      	ldr	r3, [r3, #20]
 800e0da:	4313      	orrs	r3, r2
 800e0dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	68fa      	ldr	r2, [r7, #12]
 800e0e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e0e4:	683b      	ldr	r3, [r7, #0]
 800e0e6:	689a      	ldr	r2, [r3, #8]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e0ec:	683b      	ldr	r3, [r7, #0]
 800e0ee:	681a      	ldr	r2, [r3, #0]
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	4a10      	ldr	r2, [pc, #64]	; (800e138 <TIM_Base_SetConfig+0x114>)
 800e0f8:	4293      	cmp	r3, r2
 800e0fa:	d00f      	beq.n	800e11c <TIM_Base_SetConfig+0xf8>
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	4a12      	ldr	r2, [pc, #72]	; (800e148 <TIM_Base_SetConfig+0x124>)
 800e100:	4293      	cmp	r3, r2
 800e102:	d00b      	beq.n	800e11c <TIM_Base_SetConfig+0xf8>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	4a11      	ldr	r2, [pc, #68]	; (800e14c <TIM_Base_SetConfig+0x128>)
 800e108:	4293      	cmp	r3, r2
 800e10a:	d007      	beq.n	800e11c <TIM_Base_SetConfig+0xf8>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	4a10      	ldr	r2, [pc, #64]	; (800e150 <TIM_Base_SetConfig+0x12c>)
 800e110:	4293      	cmp	r3, r2
 800e112:	d003      	beq.n	800e11c <TIM_Base_SetConfig+0xf8>
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	4a0f      	ldr	r2, [pc, #60]	; (800e154 <TIM_Base_SetConfig+0x130>)
 800e118:	4293      	cmp	r3, r2
 800e11a:	d103      	bne.n	800e124 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	691a      	ldr	r2, [r3, #16]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	2201      	movs	r2, #1
 800e128:	615a      	str	r2, [r3, #20]
}
 800e12a:	bf00      	nop
 800e12c:	3714      	adds	r7, #20
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr
 800e136:	bf00      	nop
 800e138:	40010000 	.word	0x40010000
 800e13c:	40000400 	.word	0x40000400
 800e140:	40000800 	.word	0x40000800
 800e144:	40000c00 	.word	0x40000c00
 800e148:	40010400 	.word	0x40010400
 800e14c:	40014000 	.word	0x40014000
 800e150:	40014400 	.word	0x40014400
 800e154:	40014800 	.word	0x40014800

0800e158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e158:	b480      	push	{r7}
 800e15a:	b085      	sub	sp, #20
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e168:	2b01      	cmp	r3, #1
 800e16a:	d101      	bne.n	800e170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e16c:	2302      	movs	r3, #2
 800e16e:	e06d      	b.n	800e24c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2201      	movs	r2, #1
 800e174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2202      	movs	r2, #2
 800e17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	681b      	ldr	r3, [r3, #0]
 800e184:	685b      	ldr	r3, [r3, #4]
 800e186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	689b      	ldr	r3, [r3, #8]
 800e18e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	4a30      	ldr	r2, [pc, #192]	; (800e258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e196:	4293      	cmp	r3, r2
 800e198:	d004      	beq.n	800e1a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	4a2f      	ldr	r2, [pc, #188]	; (800e25c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	d108      	bne.n	800e1b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e1aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e1ac:	683b      	ldr	r3, [r7, #0]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	4313      	orrs	r3, r2
 800e1b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e1bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4a20      	ldr	r2, [pc, #128]	; (800e258 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d022      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1e2:	d01d      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	4a1d      	ldr	r2, [pc, #116]	; (800e260 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e1ea:	4293      	cmp	r3, r2
 800e1ec:	d018      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4a1c      	ldr	r2, [pc, #112]	; (800e264 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e1f4:	4293      	cmp	r3, r2
 800e1f6:	d013      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	4a1a      	ldr	r2, [pc, #104]	; (800e268 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e1fe:	4293      	cmp	r3, r2
 800e200:	d00e      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	4a15      	ldr	r2, [pc, #84]	; (800e25c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d009      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4a16      	ldr	r2, [pc, #88]	; (800e26c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e212:	4293      	cmp	r3, r2
 800e214:	d004      	beq.n	800e220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	4a15      	ldr	r2, [pc, #84]	; (800e270 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d10c      	bne.n	800e23a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e226:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	68ba      	ldr	r2, [r7, #8]
 800e22e:	4313      	orrs	r3, r2
 800e230:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	68ba      	ldr	r2, [r7, #8]
 800e238:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	2201      	movs	r2, #1
 800e23e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	2200      	movs	r2, #0
 800e246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e24a:	2300      	movs	r3, #0
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3714      	adds	r7, #20
 800e250:	46bd      	mov	sp, r7
 800e252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e256:	4770      	bx	lr
 800e258:	40010000 	.word	0x40010000
 800e25c:	40010400 	.word	0x40010400
 800e260:	40000400 	.word	0x40000400
 800e264:	40000800 	.word	0x40000800
 800e268:	40000c00 	.word	0x40000c00
 800e26c:	40001800 	.word	0x40001800
 800e270:	40014000 	.word	0x40014000

0800e274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e274:	b480      	push	{r7}
 800e276:	b083      	sub	sp, #12
 800e278:	af00      	add	r7, sp, #0
 800e27a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e27c:	bf00      	nop
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr

0800e288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e288:	b480      	push	{r7}
 800e28a:	b083      	sub	sp, #12
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e290:	bf00      	nop
 800e292:	370c      	adds	r7, #12
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b083      	sub	sp, #12
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e2a4:	bf00      	nop
 800e2a6:	370c      	adds	r7, #12
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d101      	bne.n	800e2c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e042      	b.n	800e348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d106      	bne.n	800e2da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f7f8 ff73 	bl	80071c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2224      	movs	r2, #36	; 0x24
 800e2de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	681a      	ldr	r2, [r3, #0]
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f022 0201 	bic.w	r2, r2, #1
 800e2f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fbea 	bl	800eacc <UART_SetConfig>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d101      	bne.n	800e302 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e2fe:	2301      	movs	r3, #1
 800e300:	e022      	b.n	800e348 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e306:	2b00      	cmp	r3, #0
 800e308:	d002      	beq.n	800e310 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f001 f946 	bl	800f59c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	685a      	ldr	r2, [r3, #4]
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e31e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689a      	ldr	r2, [r3, #8]
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e32e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	681a      	ldr	r2, [r3, #0]
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f042 0201 	orr.w	r2, r2, #1
 800e33e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f001 f9cd 	bl	800f6e0 <UART_CheckIdleState>
 800e346:	4603      	mov	r3, r0
}
 800e348:	4618      	mov	r0, r3
 800e34a:	3708      	adds	r7, #8
 800e34c:	46bd      	mov	sp, r7
 800e34e:	bd80      	pop	{r7, pc}

0800e350 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b0ba      	sub	sp, #232	; 0xe8
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	69db      	ldr	r3, [r3, #28]
 800e35e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	681b      	ldr	r3, [r3, #0]
 800e368:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	689b      	ldr	r3, [r3, #8]
 800e372:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e376:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e37a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e37e:	4013      	ands	r3, r2
 800e380:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d11b      	bne.n	800e3c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e38c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e390:	f003 0320 	and.w	r3, r3, #32
 800e394:	2b00      	cmp	r3, #0
 800e396:	d015      	beq.n	800e3c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e39c:	f003 0320 	and.w	r3, r3, #32
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d105      	bne.n	800e3b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e3a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e3a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d009      	beq.n	800e3c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	f000 835a 	beq.w	800ea6e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	4798      	blx	r3
      }
      return;
 800e3c2:	e354      	b.n	800ea6e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e3c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	f000 811f 	beq.w	800e60c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e3ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e3d2:	4b8b      	ldr	r3, [pc, #556]	; (800e600 <HAL_UART_IRQHandler+0x2b0>)
 800e3d4:	4013      	ands	r3, r2
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d106      	bne.n	800e3e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e3da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e3de:	4b89      	ldr	r3, [pc, #548]	; (800e604 <HAL_UART_IRQHandler+0x2b4>)
 800e3e0:	4013      	ands	r3, r2
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 8112 	beq.w	800e60c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e3e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e3ec:	f003 0301 	and.w	r3, r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d011      	beq.n	800e418 <HAL_UART_IRQHandler+0xc8>
 800e3f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e3f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d00b      	beq.n	800e418 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	2201      	movs	r2, #1
 800e406:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e40e:	f043 0201 	orr.w	r2, r3, #1
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e418:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e41c:	f003 0302 	and.w	r3, r3, #2
 800e420:	2b00      	cmp	r3, #0
 800e422:	d011      	beq.n	800e448 <HAL_UART_IRQHandler+0xf8>
 800e424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e428:	f003 0301 	and.w	r3, r3, #1
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00b      	beq.n	800e448 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	2202      	movs	r2, #2
 800e436:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e43e:	f043 0204 	orr.w	r2, r3, #4
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e44c:	f003 0304 	and.w	r3, r3, #4
 800e450:	2b00      	cmp	r3, #0
 800e452:	d011      	beq.n	800e478 <HAL_UART_IRQHandler+0x128>
 800e454:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e458:	f003 0301 	and.w	r3, r3, #1
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d00b      	beq.n	800e478 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2204      	movs	r2, #4
 800e466:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e46e:	f043 0202 	orr.w	r2, r3, #2
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e47c:	f003 0308 	and.w	r3, r3, #8
 800e480:	2b00      	cmp	r3, #0
 800e482:	d017      	beq.n	800e4b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e488:	f003 0320 	and.w	r3, r3, #32
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d105      	bne.n	800e49c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e490:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e494:	4b5a      	ldr	r3, [pc, #360]	; (800e600 <HAL_UART_IRQHandler+0x2b0>)
 800e496:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d00b      	beq.n	800e4b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	2208      	movs	r2, #8
 800e4a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4aa:	f043 0208 	orr.w	r2, r3, #8
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d012      	beq.n	800e4e6 <HAL_UART_IRQHandler+0x196>
 800e4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00c      	beq.n	800e4e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e4d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4dc:	f043 0220 	orr.w	r2, r3, #32
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f000 82c0 	beq.w	800ea72 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e4f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4f6:	f003 0320 	and.w	r3, r3, #32
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d013      	beq.n	800e526 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e4fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e502:	f003 0320 	and.w	r3, r3, #32
 800e506:	2b00      	cmp	r3, #0
 800e508:	d105      	bne.n	800e516 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e50a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e50e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e512:	2b00      	cmp	r3, #0
 800e514:	d007      	beq.n	800e526 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d003      	beq.n	800e526 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e522:	6878      	ldr	r0, [r7, #4]
 800e524:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e52c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e53a:	2b40      	cmp	r3, #64	; 0x40
 800e53c:	d005      	beq.n	800e54a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e53e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e542:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e546:	2b00      	cmp	r3, #0
 800e548:	d04f      	beq.n	800e5ea <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e54a:	6878      	ldr	r0, [r7, #4]
 800e54c:	f001 f9dc 	bl	800f908 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	689b      	ldr	r3, [r3, #8]
 800e556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e55a:	2b40      	cmp	r3, #64	; 0x40
 800e55c:	d141      	bne.n	800e5e2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	3308      	adds	r3, #8
 800e564:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e568:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e56c:	e853 3f00 	ldrex	r3, [r3]
 800e570:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e574:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e57c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	3308      	adds	r3, #8
 800e586:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e58a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e58e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e592:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e596:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e59a:	e841 2300 	strex	r3, r2, [r1]
 800e59e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e5a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d1d9      	bne.n	800e55e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d013      	beq.n	800e5da <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5b6:	4a14      	ldr	r2, [pc, #80]	; (800e608 <HAL_UART_IRQHandler+0x2b8>)
 800e5b8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5be:	4618      	mov	r0, r3
 800e5c0:	f7fa f83c 	bl	800863c <HAL_DMA_Abort_IT>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d017      	beq.n	800e5fa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5d8:	e00f      	b.n	800e5fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 fa60 	bl	800eaa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5e0:	e00b      	b.n	800e5fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e5e2:	6878      	ldr	r0, [r7, #4]
 800e5e4:	f000 fa5c 	bl	800eaa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5e8:	e007      	b.n	800e5fa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f000 fa58 	bl	800eaa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e5f8:	e23b      	b.n	800ea72 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e5fa:	bf00      	nop
    return;
 800e5fc:	e239      	b.n	800ea72 <HAL_UART_IRQHandler+0x722>
 800e5fe:	bf00      	nop
 800e600:	10000001 	.word	0x10000001
 800e604:	04000120 	.word	0x04000120
 800e608:	0800f9d5 	.word	0x0800f9d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e610:	2b01      	cmp	r3, #1
 800e612:	f040 81ce 	bne.w	800e9b2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e61a:	f003 0310 	and.w	r3, r3, #16
 800e61e:	2b00      	cmp	r3, #0
 800e620:	f000 81c7 	beq.w	800e9b2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e628:	f003 0310 	and.w	r3, r3, #16
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f000 81c0 	beq.w	800e9b2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	2210      	movs	r2, #16
 800e638:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	689b      	ldr	r3, [r3, #8]
 800e640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e644:	2b40      	cmp	r3, #64	; 0x40
 800e646:	f040 813b 	bne.w	800e8c0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a8b      	ldr	r2, [pc, #556]	; (800e880 <HAL_UART_IRQHandler+0x530>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d059      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a89      	ldr	r2, [pc, #548]	; (800e884 <HAL_UART_IRQHandler+0x534>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d053      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	4a87      	ldr	r2, [pc, #540]	; (800e888 <HAL_UART_IRQHandler+0x538>)
 800e66a:	4293      	cmp	r3, r2
 800e66c:	d04d      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a85      	ldr	r2, [pc, #532]	; (800e88c <HAL_UART_IRQHandler+0x53c>)
 800e676:	4293      	cmp	r3, r2
 800e678:	d047      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a83      	ldr	r2, [pc, #524]	; (800e890 <HAL_UART_IRQHandler+0x540>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d041      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4a81      	ldr	r2, [pc, #516]	; (800e894 <HAL_UART_IRQHandler+0x544>)
 800e68e:	4293      	cmp	r3, r2
 800e690:	d03b      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4a7f      	ldr	r2, [pc, #508]	; (800e898 <HAL_UART_IRQHandler+0x548>)
 800e69a:	4293      	cmp	r3, r2
 800e69c:	d035      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4a7d      	ldr	r2, [pc, #500]	; (800e89c <HAL_UART_IRQHandler+0x54c>)
 800e6a6:	4293      	cmp	r3, r2
 800e6a8:	d02f      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4a7b      	ldr	r2, [pc, #492]	; (800e8a0 <HAL_UART_IRQHandler+0x550>)
 800e6b2:	4293      	cmp	r3, r2
 800e6b4:	d029      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	4a79      	ldr	r2, [pc, #484]	; (800e8a4 <HAL_UART_IRQHandler+0x554>)
 800e6be:	4293      	cmp	r3, r2
 800e6c0:	d023      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	4a77      	ldr	r2, [pc, #476]	; (800e8a8 <HAL_UART_IRQHandler+0x558>)
 800e6ca:	4293      	cmp	r3, r2
 800e6cc:	d01d      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	4a75      	ldr	r2, [pc, #468]	; (800e8ac <HAL_UART_IRQHandler+0x55c>)
 800e6d6:	4293      	cmp	r3, r2
 800e6d8:	d017      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	4a73      	ldr	r2, [pc, #460]	; (800e8b0 <HAL_UART_IRQHandler+0x560>)
 800e6e2:	4293      	cmp	r3, r2
 800e6e4:	d011      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	4a71      	ldr	r2, [pc, #452]	; (800e8b4 <HAL_UART_IRQHandler+0x564>)
 800e6ee:	4293      	cmp	r3, r2
 800e6f0:	d00b      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4a6f      	ldr	r2, [pc, #444]	; (800e8b8 <HAL_UART_IRQHandler+0x568>)
 800e6fa:	4293      	cmp	r3, r2
 800e6fc:	d005      	beq.n	800e70a <HAL_UART_IRQHandler+0x3ba>
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	4a6d      	ldr	r2, [pc, #436]	; (800e8bc <HAL_UART_IRQHandler+0x56c>)
 800e706:	4293      	cmp	r3, r2
 800e708:	d105      	bne.n	800e716 <HAL_UART_IRQHandler+0x3c6>
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	b29b      	uxth	r3, r3
 800e714:	e004      	b.n	800e720 <HAL_UART_IRQHandler+0x3d0>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	b29b      	uxth	r3, r3
 800e720:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e724:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f000 81a4 	beq.w	800ea76 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e734:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e738:	429a      	cmp	r2, r3
 800e73a:	f080 819c 	bcs.w	800ea76 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e744:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e74c:	69db      	ldr	r3, [r3, #28]
 800e74e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e752:	f000 8086 	beq.w	800e862 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e75e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e762:	e853 3f00 	ldrex	r3, [r3]
 800e766:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e76a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e76e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e772:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	461a      	mov	r2, r3
 800e77c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e780:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e784:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e788:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e78c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e790:	e841 2300 	strex	r3, r2, [r1]
 800e794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e798:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d1da      	bne.n	800e756 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	3308      	adds	r3, #8
 800e7a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e7aa:	e853 3f00 	ldrex	r3, [r3]
 800e7ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e7b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e7b2:	f023 0301 	bic.w	r3, r3, #1
 800e7b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	3308      	adds	r3, #8
 800e7c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e7c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e7c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e7ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e7cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e7d0:	e841 2300 	strex	r3, r2, [r1]
 800e7d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e7d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d1e1      	bne.n	800e7a0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	3308      	adds	r3, #8
 800e7e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e7e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e7e6:	e853 3f00 	ldrex	r3, [r3]
 800e7ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e7ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e7f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3308      	adds	r3, #8
 800e7fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e800:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e802:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e804:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e806:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e808:	e841 2300 	strex	r3, r2, [r1]
 800e80c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e80e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e810:	2b00      	cmp	r3, #0
 800e812:	d1e3      	bne.n	800e7dc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	2220      	movs	r2, #32
 800e818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2200      	movs	r2, #0
 800e820:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e82a:	e853 3f00 	ldrex	r3, [r3]
 800e82e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e832:	f023 0310 	bic.w	r3, r3, #16
 800e836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	461a      	mov	r2, r3
 800e840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e844:	65bb      	str	r3, [r7, #88]	; 0x58
 800e846:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e84a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e84c:	e841 2300 	strex	r3, r2, [r1]
 800e850:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e854:	2b00      	cmp	r3, #0
 800e856:	d1e4      	bne.n	800e822 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e85c:	4618      	mov	r0, r3
 800e85e:	f7f9 fbcf 	bl	8008000 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e86e:	b29b      	uxth	r3, r3
 800e870:	1ad3      	subs	r3, r2, r3
 800e872:	b29b      	uxth	r3, r3
 800e874:	4619      	mov	r1, r3
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 f91c 	bl	800eab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e87c:	e0fb      	b.n	800ea76 <HAL_UART_IRQHandler+0x726>
 800e87e:	bf00      	nop
 800e880:	40020010 	.word	0x40020010
 800e884:	40020028 	.word	0x40020028
 800e888:	40020040 	.word	0x40020040
 800e88c:	40020058 	.word	0x40020058
 800e890:	40020070 	.word	0x40020070
 800e894:	40020088 	.word	0x40020088
 800e898:	400200a0 	.word	0x400200a0
 800e89c:	400200b8 	.word	0x400200b8
 800e8a0:	40020410 	.word	0x40020410
 800e8a4:	40020428 	.word	0x40020428
 800e8a8:	40020440 	.word	0x40020440
 800e8ac:	40020458 	.word	0x40020458
 800e8b0:	40020470 	.word	0x40020470
 800e8b4:	40020488 	.word	0x40020488
 800e8b8:	400204a0 	.word	0x400204a0
 800e8bc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8cc:	b29b      	uxth	r3, r3
 800e8ce:	1ad3      	subs	r3, r2, r3
 800e8d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e8da:	b29b      	uxth	r3, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f000 80cc 	beq.w	800ea7a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e8e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	f000 80c7 	beq.w	800ea7a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f4:	e853 3f00 	ldrex	r3, [r3]
 800e8f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e900:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	461a      	mov	r2, r3
 800e90a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e90e:	647b      	str	r3, [r7, #68]	; 0x44
 800e910:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e912:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e914:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e916:	e841 2300 	strex	r3, r2, [r1]
 800e91a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e91c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1e4      	bne.n	800e8ec <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3308      	adds	r3, #8
 800e928:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e92c:	e853 3f00 	ldrex	r3, [r3]
 800e930:	623b      	str	r3, [r7, #32]
   return(result);
 800e932:	6a3a      	ldr	r2, [r7, #32]
 800e934:	4b54      	ldr	r3, [pc, #336]	; (800ea88 <HAL_UART_IRQHandler+0x738>)
 800e936:	4013      	ands	r3, r2
 800e938:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	3308      	adds	r3, #8
 800e942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800e946:	633a      	str	r2, [r7, #48]	; 0x30
 800e948:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e94a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e94c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e94e:	e841 2300 	strex	r3, r2, [r1]
 800e952:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	2b00      	cmp	r3, #0
 800e958:	d1e3      	bne.n	800e922 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	2220      	movs	r2, #32
 800e95e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	2200      	movs	r2, #0
 800e966:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e974:	693b      	ldr	r3, [r7, #16]
 800e976:	e853 3f00 	ldrex	r3, [r3]
 800e97a:	60fb      	str	r3, [r7, #12]
   return(result);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f023 0310 	bic.w	r3, r3, #16
 800e982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	461a      	mov	r2, r3
 800e98c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e990:	61fb      	str	r3, [r7, #28]
 800e992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e994:	69b9      	ldr	r1, [r7, #24]
 800e996:	69fa      	ldr	r2, [r7, #28]
 800e998:	e841 2300 	strex	r3, r2, [r1]
 800e99c:	617b      	str	r3, [r7, #20]
   return(result);
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d1e4      	bne.n	800e96e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800e9a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 f882 	bl	800eab4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e9b0:	e063      	b.n	800ea7a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d00e      	beq.n	800e9dc <HAL_UART_IRQHandler+0x68c>
 800e9be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e9c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d008      	beq.n	800e9dc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800e9d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f001 f83e 	bl	800fa56 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e9da:	e051      	b.n	800ea80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800e9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e9e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d014      	beq.n	800ea12 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800e9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e9ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d105      	bne.n	800ea00 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800e9f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e9f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d008      	beq.n	800ea12 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d03a      	beq.n	800ea7e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea0c:	6878      	ldr	r0, [r7, #4]
 800ea0e:	4798      	blx	r3
    }
    return;
 800ea10:	e035      	b.n	800ea7e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ea12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d009      	beq.n	800ea32 <HAL_UART_IRQHandler+0x6e2>
 800ea1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d003      	beq.n	800ea32 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 ffe8 	bl	800fa00 <UART_EndTransmit_IT>
    return;
 800ea30:	e026      	b.n	800ea80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ea32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d009      	beq.n	800ea52 <HAL_UART_IRQHandler+0x702>
 800ea3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea42:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d003      	beq.n	800ea52 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f001 f817 	bl	800fa7e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea50:	e016      	b.n	800ea80 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ea52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ea56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d010      	beq.n	800ea80 <HAL_UART_IRQHandler+0x730>
 800ea5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	da0c      	bge.n	800ea80 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ea66:	6878      	ldr	r0, [r7, #4]
 800ea68:	f000 ffff 	bl	800fa6a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ea6c:	e008      	b.n	800ea80 <HAL_UART_IRQHandler+0x730>
      return;
 800ea6e:	bf00      	nop
 800ea70:	e006      	b.n	800ea80 <HAL_UART_IRQHandler+0x730>
    return;
 800ea72:	bf00      	nop
 800ea74:	e004      	b.n	800ea80 <HAL_UART_IRQHandler+0x730>
      return;
 800ea76:	bf00      	nop
 800ea78:	e002      	b.n	800ea80 <HAL_UART_IRQHandler+0x730>
      return;
 800ea7a:	bf00      	nop
 800ea7c:	e000      	b.n	800ea80 <HAL_UART_IRQHandler+0x730>
    return;
 800ea7e:	bf00      	nop
  }
}
 800ea80:	37e8      	adds	r7, #232	; 0xe8
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop
 800ea88:	effffffe 	.word	0xeffffffe

0800ea8c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ea8c:	b480      	push	{r7}
 800ea8e:	b083      	sub	sp, #12
 800ea90:	af00      	add	r7, sp, #0
 800ea92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ea94:	bf00      	nop
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eaa8:	bf00      	nop
 800eaaa:	370c      	adds	r7, #12
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr

0800eab4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800eac0:	bf00      	nop
 800eac2:	370c      	adds	r7, #12
 800eac4:	46bd      	mov	sp, r7
 800eac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaca:	4770      	bx	lr

0800eacc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800eacc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ead0:	b092      	sub	sp, #72	; 0x48
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ead6:	2300      	movs	r3, #0
 800ead8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800eadc:	697b      	ldr	r3, [r7, #20]
 800eade:	689a      	ldr	r2, [r3, #8]
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	691b      	ldr	r3, [r3, #16]
 800eae4:	431a      	orrs	r2, r3
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	695b      	ldr	r3, [r3, #20]
 800eaea:	431a      	orrs	r2, r3
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	69db      	ldr	r3, [r3, #28]
 800eaf0:	4313      	orrs	r3, r2
 800eaf2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681a      	ldr	r2, [r3, #0]
 800eafa:	4bbe      	ldr	r3, [pc, #760]	; (800edf4 <UART_SetConfig+0x328>)
 800eafc:	4013      	ands	r3, r2
 800eafe:	697a      	ldr	r2, [r7, #20]
 800eb00:	6812      	ldr	r2, [r2, #0]
 800eb02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb04:	430b      	orrs	r3, r1
 800eb06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	68da      	ldr	r2, [r3, #12]
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	430a      	orrs	r2, r1
 800eb1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	699b      	ldr	r3, [r3, #24]
 800eb22:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	4ab3      	ldr	r2, [pc, #716]	; (800edf8 <UART_SetConfig+0x32c>)
 800eb2a:	4293      	cmp	r3, r2
 800eb2c:	d004      	beq.n	800eb38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	6a1b      	ldr	r3, [r3, #32]
 800eb32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eb34:	4313      	orrs	r3, r2
 800eb36:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	689a      	ldr	r2, [r3, #8]
 800eb3e:	4baf      	ldr	r3, [pc, #700]	; (800edfc <UART_SetConfig+0x330>)
 800eb40:	4013      	ands	r3, r2
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	6812      	ldr	r2, [r2, #0]
 800eb46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eb48:	430b      	orrs	r3, r1
 800eb4a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb52:	f023 010f 	bic.w	r1, r3, #15
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	430a      	orrs	r2, r1
 800eb60:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	4aa6      	ldr	r2, [pc, #664]	; (800ee00 <UART_SetConfig+0x334>)
 800eb68:	4293      	cmp	r3, r2
 800eb6a:	d177      	bne.n	800ec5c <UART_SetConfig+0x190>
 800eb6c:	4ba5      	ldr	r3, [pc, #660]	; (800ee04 <UART_SetConfig+0x338>)
 800eb6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eb70:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800eb74:	2b28      	cmp	r3, #40	; 0x28
 800eb76:	d86d      	bhi.n	800ec54 <UART_SetConfig+0x188>
 800eb78:	a201      	add	r2, pc, #4	; (adr r2, 800eb80 <UART_SetConfig+0xb4>)
 800eb7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb7e:	bf00      	nop
 800eb80:	0800ec25 	.word	0x0800ec25
 800eb84:	0800ec55 	.word	0x0800ec55
 800eb88:	0800ec55 	.word	0x0800ec55
 800eb8c:	0800ec55 	.word	0x0800ec55
 800eb90:	0800ec55 	.word	0x0800ec55
 800eb94:	0800ec55 	.word	0x0800ec55
 800eb98:	0800ec55 	.word	0x0800ec55
 800eb9c:	0800ec55 	.word	0x0800ec55
 800eba0:	0800ec2d 	.word	0x0800ec2d
 800eba4:	0800ec55 	.word	0x0800ec55
 800eba8:	0800ec55 	.word	0x0800ec55
 800ebac:	0800ec55 	.word	0x0800ec55
 800ebb0:	0800ec55 	.word	0x0800ec55
 800ebb4:	0800ec55 	.word	0x0800ec55
 800ebb8:	0800ec55 	.word	0x0800ec55
 800ebbc:	0800ec55 	.word	0x0800ec55
 800ebc0:	0800ec35 	.word	0x0800ec35
 800ebc4:	0800ec55 	.word	0x0800ec55
 800ebc8:	0800ec55 	.word	0x0800ec55
 800ebcc:	0800ec55 	.word	0x0800ec55
 800ebd0:	0800ec55 	.word	0x0800ec55
 800ebd4:	0800ec55 	.word	0x0800ec55
 800ebd8:	0800ec55 	.word	0x0800ec55
 800ebdc:	0800ec55 	.word	0x0800ec55
 800ebe0:	0800ec3d 	.word	0x0800ec3d
 800ebe4:	0800ec55 	.word	0x0800ec55
 800ebe8:	0800ec55 	.word	0x0800ec55
 800ebec:	0800ec55 	.word	0x0800ec55
 800ebf0:	0800ec55 	.word	0x0800ec55
 800ebf4:	0800ec55 	.word	0x0800ec55
 800ebf8:	0800ec55 	.word	0x0800ec55
 800ebfc:	0800ec55 	.word	0x0800ec55
 800ec00:	0800ec45 	.word	0x0800ec45
 800ec04:	0800ec55 	.word	0x0800ec55
 800ec08:	0800ec55 	.word	0x0800ec55
 800ec0c:	0800ec55 	.word	0x0800ec55
 800ec10:	0800ec55 	.word	0x0800ec55
 800ec14:	0800ec55 	.word	0x0800ec55
 800ec18:	0800ec55 	.word	0x0800ec55
 800ec1c:	0800ec55 	.word	0x0800ec55
 800ec20:	0800ec4d 	.word	0x0800ec4d
 800ec24:	2301      	movs	r3, #1
 800ec26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec2a:	e222      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ec2c:	2304      	movs	r3, #4
 800ec2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec32:	e21e      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ec34:	2308      	movs	r3, #8
 800ec36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec3a:	e21a      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ec3c:	2310      	movs	r3, #16
 800ec3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec42:	e216      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ec44:	2320      	movs	r3, #32
 800ec46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec4a:	e212      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ec4c:	2340      	movs	r3, #64	; 0x40
 800ec4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec52:	e20e      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ec54:	2380      	movs	r3, #128	; 0x80
 800ec56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec5a:	e20a      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	4a69      	ldr	r2, [pc, #420]	; (800ee08 <UART_SetConfig+0x33c>)
 800ec62:	4293      	cmp	r3, r2
 800ec64:	d130      	bne.n	800ecc8 <UART_SetConfig+0x1fc>
 800ec66:	4b67      	ldr	r3, [pc, #412]	; (800ee04 <UART_SetConfig+0x338>)
 800ec68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec6a:	f003 0307 	and.w	r3, r3, #7
 800ec6e:	2b05      	cmp	r3, #5
 800ec70:	d826      	bhi.n	800ecc0 <UART_SetConfig+0x1f4>
 800ec72:	a201      	add	r2, pc, #4	; (adr r2, 800ec78 <UART_SetConfig+0x1ac>)
 800ec74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec78:	0800ec91 	.word	0x0800ec91
 800ec7c:	0800ec99 	.word	0x0800ec99
 800ec80:	0800eca1 	.word	0x0800eca1
 800ec84:	0800eca9 	.word	0x0800eca9
 800ec88:	0800ecb1 	.word	0x0800ecb1
 800ec8c:	0800ecb9 	.word	0x0800ecb9
 800ec90:	2300      	movs	r3, #0
 800ec92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec96:	e1ec      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ec98:	2304      	movs	r3, #4
 800ec9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ec9e:	e1e8      	b.n	800f072 <UART_SetConfig+0x5a6>
 800eca0:	2308      	movs	r3, #8
 800eca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eca6:	e1e4      	b.n	800f072 <UART_SetConfig+0x5a6>
 800eca8:	2310      	movs	r3, #16
 800ecaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecae:	e1e0      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ecb0:	2320      	movs	r3, #32
 800ecb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecb6:	e1dc      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ecb8:	2340      	movs	r3, #64	; 0x40
 800ecba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecbe:	e1d8      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ecc0:	2380      	movs	r3, #128	; 0x80
 800ecc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ecc6:	e1d4      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a4f      	ldr	r2, [pc, #316]	; (800ee0c <UART_SetConfig+0x340>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d130      	bne.n	800ed34 <UART_SetConfig+0x268>
 800ecd2:	4b4c      	ldr	r3, [pc, #304]	; (800ee04 <UART_SetConfig+0x338>)
 800ecd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecd6:	f003 0307 	and.w	r3, r3, #7
 800ecda:	2b05      	cmp	r3, #5
 800ecdc:	d826      	bhi.n	800ed2c <UART_SetConfig+0x260>
 800ecde:	a201      	add	r2, pc, #4	; (adr r2, 800ece4 <UART_SetConfig+0x218>)
 800ece0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ece4:	0800ecfd 	.word	0x0800ecfd
 800ece8:	0800ed05 	.word	0x0800ed05
 800ecec:	0800ed0d 	.word	0x0800ed0d
 800ecf0:	0800ed15 	.word	0x0800ed15
 800ecf4:	0800ed1d 	.word	0x0800ed1d
 800ecf8:	0800ed25 	.word	0x0800ed25
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed02:	e1b6      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed04:	2304      	movs	r3, #4
 800ed06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed0a:	e1b2      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed0c:	2308      	movs	r3, #8
 800ed0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed12:	e1ae      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed14:	2310      	movs	r3, #16
 800ed16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed1a:	e1aa      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed1c:	2320      	movs	r3, #32
 800ed1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed22:	e1a6      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed24:	2340      	movs	r3, #64	; 0x40
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2a:	e1a2      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed2c:	2380      	movs	r3, #128	; 0x80
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed32:	e19e      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4a35      	ldr	r2, [pc, #212]	; (800ee10 <UART_SetConfig+0x344>)
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d130      	bne.n	800eda0 <UART_SetConfig+0x2d4>
 800ed3e:	4b31      	ldr	r3, [pc, #196]	; (800ee04 <UART_SetConfig+0x338>)
 800ed40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed42:	f003 0307 	and.w	r3, r3, #7
 800ed46:	2b05      	cmp	r3, #5
 800ed48:	d826      	bhi.n	800ed98 <UART_SetConfig+0x2cc>
 800ed4a:	a201      	add	r2, pc, #4	; (adr r2, 800ed50 <UART_SetConfig+0x284>)
 800ed4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed50:	0800ed69 	.word	0x0800ed69
 800ed54:	0800ed71 	.word	0x0800ed71
 800ed58:	0800ed79 	.word	0x0800ed79
 800ed5c:	0800ed81 	.word	0x0800ed81
 800ed60:	0800ed89 	.word	0x0800ed89
 800ed64:	0800ed91 	.word	0x0800ed91
 800ed68:	2300      	movs	r3, #0
 800ed6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed6e:	e180      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed70:	2304      	movs	r3, #4
 800ed72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed76:	e17c      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed78:	2308      	movs	r3, #8
 800ed7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed7e:	e178      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed80:	2310      	movs	r3, #16
 800ed82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed86:	e174      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed88:	2320      	movs	r3, #32
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8e:	e170      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed90:	2340      	movs	r3, #64	; 0x40
 800ed92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed96:	e16c      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ed98:	2380      	movs	r3, #128	; 0x80
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9e:	e168      	b.n	800f072 <UART_SetConfig+0x5a6>
 800eda0:	697b      	ldr	r3, [r7, #20]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	4a1b      	ldr	r2, [pc, #108]	; (800ee14 <UART_SetConfig+0x348>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d142      	bne.n	800ee30 <UART_SetConfig+0x364>
 800edaa:	4b16      	ldr	r3, [pc, #88]	; (800ee04 <UART_SetConfig+0x338>)
 800edac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edae:	f003 0307 	and.w	r3, r3, #7
 800edb2:	2b05      	cmp	r3, #5
 800edb4:	d838      	bhi.n	800ee28 <UART_SetConfig+0x35c>
 800edb6:	a201      	add	r2, pc, #4	; (adr r2, 800edbc <UART_SetConfig+0x2f0>)
 800edb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edbc:	0800edd5 	.word	0x0800edd5
 800edc0:	0800eddd 	.word	0x0800eddd
 800edc4:	0800ede5 	.word	0x0800ede5
 800edc8:	0800eded 	.word	0x0800eded
 800edcc:	0800ee19 	.word	0x0800ee19
 800edd0:	0800ee21 	.word	0x0800ee21
 800edd4:	2300      	movs	r3, #0
 800edd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edda:	e14a      	b.n	800f072 <UART_SetConfig+0x5a6>
 800eddc:	2304      	movs	r3, #4
 800edde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ede2:	e146      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ede4:	2308      	movs	r3, #8
 800ede6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edea:	e142      	b.n	800f072 <UART_SetConfig+0x5a6>
 800edec:	2310      	movs	r3, #16
 800edee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edf2:	e13e      	b.n	800f072 <UART_SetConfig+0x5a6>
 800edf4:	cfff69f3 	.word	0xcfff69f3
 800edf8:	58000c00 	.word	0x58000c00
 800edfc:	11fff4ff 	.word	0x11fff4ff
 800ee00:	40011000 	.word	0x40011000
 800ee04:	58024400 	.word	0x58024400
 800ee08:	40004400 	.word	0x40004400
 800ee0c:	40004800 	.word	0x40004800
 800ee10:	40004c00 	.word	0x40004c00
 800ee14:	40005000 	.word	0x40005000
 800ee18:	2320      	movs	r3, #32
 800ee1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1e:	e128      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ee20:	2340      	movs	r3, #64	; 0x40
 800ee22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee26:	e124      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ee28:	2380      	movs	r3, #128	; 0x80
 800ee2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2e:	e120      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	4acb      	ldr	r2, [pc, #812]	; (800f164 <UART_SetConfig+0x698>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	d176      	bne.n	800ef28 <UART_SetConfig+0x45c>
 800ee3a:	4bcb      	ldr	r3, [pc, #812]	; (800f168 <UART_SetConfig+0x69c>)
 800ee3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ee42:	2b28      	cmp	r3, #40	; 0x28
 800ee44:	d86c      	bhi.n	800ef20 <UART_SetConfig+0x454>
 800ee46:	a201      	add	r2, pc, #4	; (adr r2, 800ee4c <UART_SetConfig+0x380>)
 800ee48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee4c:	0800eef1 	.word	0x0800eef1
 800ee50:	0800ef21 	.word	0x0800ef21
 800ee54:	0800ef21 	.word	0x0800ef21
 800ee58:	0800ef21 	.word	0x0800ef21
 800ee5c:	0800ef21 	.word	0x0800ef21
 800ee60:	0800ef21 	.word	0x0800ef21
 800ee64:	0800ef21 	.word	0x0800ef21
 800ee68:	0800ef21 	.word	0x0800ef21
 800ee6c:	0800eef9 	.word	0x0800eef9
 800ee70:	0800ef21 	.word	0x0800ef21
 800ee74:	0800ef21 	.word	0x0800ef21
 800ee78:	0800ef21 	.word	0x0800ef21
 800ee7c:	0800ef21 	.word	0x0800ef21
 800ee80:	0800ef21 	.word	0x0800ef21
 800ee84:	0800ef21 	.word	0x0800ef21
 800ee88:	0800ef21 	.word	0x0800ef21
 800ee8c:	0800ef01 	.word	0x0800ef01
 800ee90:	0800ef21 	.word	0x0800ef21
 800ee94:	0800ef21 	.word	0x0800ef21
 800ee98:	0800ef21 	.word	0x0800ef21
 800ee9c:	0800ef21 	.word	0x0800ef21
 800eea0:	0800ef21 	.word	0x0800ef21
 800eea4:	0800ef21 	.word	0x0800ef21
 800eea8:	0800ef21 	.word	0x0800ef21
 800eeac:	0800ef09 	.word	0x0800ef09
 800eeb0:	0800ef21 	.word	0x0800ef21
 800eeb4:	0800ef21 	.word	0x0800ef21
 800eeb8:	0800ef21 	.word	0x0800ef21
 800eebc:	0800ef21 	.word	0x0800ef21
 800eec0:	0800ef21 	.word	0x0800ef21
 800eec4:	0800ef21 	.word	0x0800ef21
 800eec8:	0800ef21 	.word	0x0800ef21
 800eecc:	0800ef11 	.word	0x0800ef11
 800eed0:	0800ef21 	.word	0x0800ef21
 800eed4:	0800ef21 	.word	0x0800ef21
 800eed8:	0800ef21 	.word	0x0800ef21
 800eedc:	0800ef21 	.word	0x0800ef21
 800eee0:	0800ef21 	.word	0x0800ef21
 800eee4:	0800ef21 	.word	0x0800ef21
 800eee8:	0800ef21 	.word	0x0800ef21
 800eeec:	0800ef19 	.word	0x0800ef19
 800eef0:	2301      	movs	r3, #1
 800eef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eef6:	e0bc      	b.n	800f072 <UART_SetConfig+0x5a6>
 800eef8:	2304      	movs	r3, #4
 800eefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eefe:	e0b8      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef00:	2308      	movs	r3, #8
 800ef02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef06:	e0b4      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef08:	2310      	movs	r3, #16
 800ef0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef0e:	e0b0      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef10:	2320      	movs	r3, #32
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef16:	e0ac      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef18:	2340      	movs	r3, #64	; 0x40
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1e:	e0a8      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef20:	2380      	movs	r3, #128	; 0x80
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e0a4      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a8f      	ldr	r2, [pc, #572]	; (800f16c <UART_SetConfig+0x6a0>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d130      	bne.n	800ef94 <UART_SetConfig+0x4c8>
 800ef32:	4b8d      	ldr	r3, [pc, #564]	; (800f168 <UART_SetConfig+0x69c>)
 800ef34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef36:	f003 0307 	and.w	r3, r3, #7
 800ef3a:	2b05      	cmp	r3, #5
 800ef3c:	d826      	bhi.n	800ef8c <UART_SetConfig+0x4c0>
 800ef3e:	a201      	add	r2, pc, #4	; (adr r2, 800ef44 <UART_SetConfig+0x478>)
 800ef40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef44:	0800ef5d 	.word	0x0800ef5d
 800ef48:	0800ef65 	.word	0x0800ef65
 800ef4c:	0800ef6d 	.word	0x0800ef6d
 800ef50:	0800ef75 	.word	0x0800ef75
 800ef54:	0800ef7d 	.word	0x0800ef7d
 800ef58:	0800ef85 	.word	0x0800ef85
 800ef5c:	2300      	movs	r3, #0
 800ef5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef62:	e086      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef64:	2304      	movs	r3, #4
 800ef66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef6a:	e082      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef6c:	2308      	movs	r3, #8
 800ef6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef72:	e07e      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef74:	2310      	movs	r3, #16
 800ef76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef7a:	e07a      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef7c:	2320      	movs	r3, #32
 800ef7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef82:	e076      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef84:	2340      	movs	r3, #64	; 0x40
 800ef86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef8a:	e072      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef8c:	2380      	movs	r3, #128	; 0x80
 800ef8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef92:	e06e      	b.n	800f072 <UART_SetConfig+0x5a6>
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	4a75      	ldr	r2, [pc, #468]	; (800f170 <UART_SetConfig+0x6a4>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d130      	bne.n	800f000 <UART_SetConfig+0x534>
 800ef9e:	4b72      	ldr	r3, [pc, #456]	; (800f168 <UART_SetConfig+0x69c>)
 800efa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800efa2:	f003 0307 	and.w	r3, r3, #7
 800efa6:	2b05      	cmp	r3, #5
 800efa8:	d826      	bhi.n	800eff8 <UART_SetConfig+0x52c>
 800efaa:	a201      	add	r2, pc, #4	; (adr r2, 800efb0 <UART_SetConfig+0x4e4>)
 800efac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efb0:	0800efc9 	.word	0x0800efc9
 800efb4:	0800efd1 	.word	0x0800efd1
 800efb8:	0800efd9 	.word	0x0800efd9
 800efbc:	0800efe1 	.word	0x0800efe1
 800efc0:	0800efe9 	.word	0x0800efe9
 800efc4:	0800eff1 	.word	0x0800eff1
 800efc8:	2300      	movs	r3, #0
 800efca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efce:	e050      	b.n	800f072 <UART_SetConfig+0x5a6>
 800efd0:	2304      	movs	r3, #4
 800efd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efd6:	e04c      	b.n	800f072 <UART_SetConfig+0x5a6>
 800efd8:	2308      	movs	r3, #8
 800efda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efde:	e048      	b.n	800f072 <UART_SetConfig+0x5a6>
 800efe0:	2310      	movs	r3, #16
 800efe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efe6:	e044      	b.n	800f072 <UART_SetConfig+0x5a6>
 800efe8:	2320      	movs	r3, #32
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efee:	e040      	b.n	800f072 <UART_SetConfig+0x5a6>
 800eff0:	2340      	movs	r3, #64	; 0x40
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff6:	e03c      	b.n	800f072 <UART_SetConfig+0x5a6>
 800eff8:	2380      	movs	r3, #128	; 0x80
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effe:	e038      	b.n	800f072 <UART_SetConfig+0x5a6>
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	4a5b      	ldr	r2, [pc, #364]	; (800f174 <UART_SetConfig+0x6a8>)
 800f006:	4293      	cmp	r3, r2
 800f008:	d130      	bne.n	800f06c <UART_SetConfig+0x5a0>
 800f00a:	4b57      	ldr	r3, [pc, #348]	; (800f168 <UART_SetConfig+0x69c>)
 800f00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f00e:	f003 0307 	and.w	r3, r3, #7
 800f012:	2b05      	cmp	r3, #5
 800f014:	d826      	bhi.n	800f064 <UART_SetConfig+0x598>
 800f016:	a201      	add	r2, pc, #4	; (adr r2, 800f01c <UART_SetConfig+0x550>)
 800f018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f01c:	0800f035 	.word	0x0800f035
 800f020:	0800f03d 	.word	0x0800f03d
 800f024:	0800f045 	.word	0x0800f045
 800f028:	0800f04d 	.word	0x0800f04d
 800f02c:	0800f055 	.word	0x0800f055
 800f030:	0800f05d 	.word	0x0800f05d
 800f034:	2302      	movs	r3, #2
 800f036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f03a:	e01a      	b.n	800f072 <UART_SetConfig+0x5a6>
 800f03c:	2304      	movs	r3, #4
 800f03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f042:	e016      	b.n	800f072 <UART_SetConfig+0x5a6>
 800f044:	2308      	movs	r3, #8
 800f046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f04a:	e012      	b.n	800f072 <UART_SetConfig+0x5a6>
 800f04c:	2310      	movs	r3, #16
 800f04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f052:	e00e      	b.n	800f072 <UART_SetConfig+0x5a6>
 800f054:	2320      	movs	r3, #32
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e00a      	b.n	800f072 <UART_SetConfig+0x5a6>
 800f05c:	2340      	movs	r3, #64	; 0x40
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e006      	b.n	800f072 <UART_SetConfig+0x5a6>
 800f064:	2380      	movs	r3, #128	; 0x80
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e002      	b.n	800f072 <UART_SetConfig+0x5a6>
 800f06c:	2380      	movs	r3, #128	; 0x80
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	4a3f      	ldr	r2, [pc, #252]	; (800f174 <UART_SetConfig+0x6a8>)
 800f078:	4293      	cmp	r3, r2
 800f07a:	f040 80f8 	bne.w	800f26e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f07e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f082:	2b20      	cmp	r3, #32
 800f084:	dc46      	bgt.n	800f114 <UART_SetConfig+0x648>
 800f086:	2b02      	cmp	r3, #2
 800f088:	f2c0 8082 	blt.w	800f190 <UART_SetConfig+0x6c4>
 800f08c:	3b02      	subs	r3, #2
 800f08e:	2b1e      	cmp	r3, #30
 800f090:	d87e      	bhi.n	800f190 <UART_SetConfig+0x6c4>
 800f092:	a201      	add	r2, pc, #4	; (adr r2, 800f098 <UART_SetConfig+0x5cc>)
 800f094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f098:	0800f11b 	.word	0x0800f11b
 800f09c:	0800f191 	.word	0x0800f191
 800f0a0:	0800f123 	.word	0x0800f123
 800f0a4:	0800f191 	.word	0x0800f191
 800f0a8:	0800f191 	.word	0x0800f191
 800f0ac:	0800f191 	.word	0x0800f191
 800f0b0:	0800f133 	.word	0x0800f133
 800f0b4:	0800f191 	.word	0x0800f191
 800f0b8:	0800f191 	.word	0x0800f191
 800f0bc:	0800f191 	.word	0x0800f191
 800f0c0:	0800f191 	.word	0x0800f191
 800f0c4:	0800f191 	.word	0x0800f191
 800f0c8:	0800f191 	.word	0x0800f191
 800f0cc:	0800f191 	.word	0x0800f191
 800f0d0:	0800f143 	.word	0x0800f143
 800f0d4:	0800f191 	.word	0x0800f191
 800f0d8:	0800f191 	.word	0x0800f191
 800f0dc:	0800f191 	.word	0x0800f191
 800f0e0:	0800f191 	.word	0x0800f191
 800f0e4:	0800f191 	.word	0x0800f191
 800f0e8:	0800f191 	.word	0x0800f191
 800f0ec:	0800f191 	.word	0x0800f191
 800f0f0:	0800f191 	.word	0x0800f191
 800f0f4:	0800f191 	.word	0x0800f191
 800f0f8:	0800f191 	.word	0x0800f191
 800f0fc:	0800f191 	.word	0x0800f191
 800f100:	0800f191 	.word	0x0800f191
 800f104:	0800f191 	.word	0x0800f191
 800f108:	0800f191 	.word	0x0800f191
 800f10c:	0800f191 	.word	0x0800f191
 800f110:	0800f183 	.word	0x0800f183
 800f114:	2b40      	cmp	r3, #64	; 0x40
 800f116:	d037      	beq.n	800f188 <UART_SetConfig+0x6bc>
 800f118:	e03a      	b.n	800f190 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f11a:	f7fd fd3b 	bl	800cb94 <HAL_RCCEx_GetD3PCLK1Freq>
 800f11e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f120:	e03c      	b.n	800f19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f122:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f126:	4618      	mov	r0, r3
 800f128:	f7fd fd4a 	bl	800cbc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f12e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f130:	e034      	b.n	800f19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f132:	f107 0318 	add.w	r3, r7, #24
 800f136:	4618      	mov	r0, r3
 800f138:	f7fd fe96 	bl	800ce68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f13c:	69fb      	ldr	r3, [r7, #28]
 800f13e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f140:	e02c      	b.n	800f19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f142:	4b09      	ldr	r3, [pc, #36]	; (800f168 <UART_SetConfig+0x69c>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	f003 0320 	and.w	r3, r3, #32
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d016      	beq.n	800f17c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f14e:	4b06      	ldr	r3, [pc, #24]	; (800f168 <UART_SetConfig+0x69c>)
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	08db      	lsrs	r3, r3, #3
 800f154:	f003 0303 	and.w	r3, r3, #3
 800f158:	4a07      	ldr	r2, [pc, #28]	; (800f178 <UART_SetConfig+0x6ac>)
 800f15a:	fa22 f303 	lsr.w	r3, r2, r3
 800f15e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f160:	e01c      	b.n	800f19c <UART_SetConfig+0x6d0>
 800f162:	bf00      	nop
 800f164:	40011400 	.word	0x40011400
 800f168:	58024400 	.word	0x58024400
 800f16c:	40007800 	.word	0x40007800
 800f170:	40007c00 	.word	0x40007c00
 800f174:	58000c00 	.word	0x58000c00
 800f178:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f17c:	4b9d      	ldr	r3, [pc, #628]	; (800f3f4 <UART_SetConfig+0x928>)
 800f17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f180:	e00c      	b.n	800f19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f182:	4b9d      	ldr	r3, [pc, #628]	; (800f3f8 <UART_SetConfig+0x92c>)
 800f184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f186:	e009      	b.n	800f19c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f18e:	e005      	b.n	800f19c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f190:	2300      	movs	r3, #0
 800f192:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f194:	2301      	movs	r3, #1
 800f196:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f19a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f19c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	f000 81de 	beq.w	800f560 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a8:	4a94      	ldr	r2, [pc, #592]	; (800f3fc <UART_SetConfig+0x930>)
 800f1aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ae:	461a      	mov	r2, r3
 800f1b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1b6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f1b8:	697b      	ldr	r3, [r7, #20]
 800f1ba:	685a      	ldr	r2, [r3, #4]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	005b      	lsls	r3, r3, #1
 800f1c0:	4413      	add	r3, r2
 800f1c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1c4:	429a      	cmp	r2, r3
 800f1c6:	d305      	bcc.n	800f1d4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f1c8:	697b      	ldr	r3, [r7, #20]
 800f1ca:	685b      	ldr	r3, [r3, #4]
 800f1cc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f1ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d903      	bls.n	800f1dc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f1d4:	2301      	movs	r3, #1
 800f1d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f1da:	e1c1      	b.n	800f560 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1de:	2200      	movs	r2, #0
 800f1e0:	60bb      	str	r3, [r7, #8]
 800f1e2:	60fa      	str	r2, [r7, #12]
 800f1e4:	697b      	ldr	r3, [r7, #20]
 800f1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e8:	4a84      	ldr	r2, [pc, #528]	; (800f3fc <UART_SetConfig+0x930>)
 800f1ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1ee:	b29b      	uxth	r3, r3
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	603b      	str	r3, [r7, #0]
 800f1f4:	607a      	str	r2, [r7, #4]
 800f1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f1fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f1fe:	f7f1 f8bf 	bl	8000380 <__aeabi_uldivmod>
 800f202:	4602      	mov	r2, r0
 800f204:	460b      	mov	r3, r1
 800f206:	4610      	mov	r0, r2
 800f208:	4619      	mov	r1, r3
 800f20a:	f04f 0200 	mov.w	r2, #0
 800f20e:	f04f 0300 	mov.w	r3, #0
 800f212:	020b      	lsls	r3, r1, #8
 800f214:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f218:	0202      	lsls	r2, r0, #8
 800f21a:	6979      	ldr	r1, [r7, #20]
 800f21c:	6849      	ldr	r1, [r1, #4]
 800f21e:	0849      	lsrs	r1, r1, #1
 800f220:	2000      	movs	r0, #0
 800f222:	460c      	mov	r4, r1
 800f224:	4605      	mov	r5, r0
 800f226:	eb12 0804 	adds.w	r8, r2, r4
 800f22a:	eb43 0905 	adc.w	r9, r3, r5
 800f22e:	697b      	ldr	r3, [r7, #20]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	2200      	movs	r2, #0
 800f234:	469a      	mov	sl, r3
 800f236:	4693      	mov	fp, r2
 800f238:	4652      	mov	r2, sl
 800f23a:	465b      	mov	r3, fp
 800f23c:	4640      	mov	r0, r8
 800f23e:	4649      	mov	r1, r9
 800f240:	f7f1 f89e 	bl	8000380 <__aeabi_uldivmod>
 800f244:	4602      	mov	r2, r0
 800f246:	460b      	mov	r3, r1
 800f248:	4613      	mov	r3, r2
 800f24a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f24c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f252:	d308      	bcc.n	800f266 <UART_SetConfig+0x79a>
 800f254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f25a:	d204      	bcs.n	800f266 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f25c:	697b      	ldr	r3, [r7, #20]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f262:	60da      	str	r2, [r3, #12]
 800f264:	e17c      	b.n	800f560 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f266:	2301      	movs	r3, #1
 800f268:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f26c:	e178      	b.n	800f560 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	69db      	ldr	r3, [r3, #28]
 800f272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f276:	f040 80c5 	bne.w	800f404 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f27a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f27e:	2b20      	cmp	r3, #32
 800f280:	dc48      	bgt.n	800f314 <UART_SetConfig+0x848>
 800f282:	2b00      	cmp	r3, #0
 800f284:	db7b      	blt.n	800f37e <UART_SetConfig+0x8b2>
 800f286:	2b20      	cmp	r3, #32
 800f288:	d879      	bhi.n	800f37e <UART_SetConfig+0x8b2>
 800f28a:	a201      	add	r2, pc, #4	; (adr r2, 800f290 <UART_SetConfig+0x7c4>)
 800f28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f290:	0800f31b 	.word	0x0800f31b
 800f294:	0800f323 	.word	0x0800f323
 800f298:	0800f37f 	.word	0x0800f37f
 800f29c:	0800f37f 	.word	0x0800f37f
 800f2a0:	0800f32b 	.word	0x0800f32b
 800f2a4:	0800f37f 	.word	0x0800f37f
 800f2a8:	0800f37f 	.word	0x0800f37f
 800f2ac:	0800f37f 	.word	0x0800f37f
 800f2b0:	0800f33b 	.word	0x0800f33b
 800f2b4:	0800f37f 	.word	0x0800f37f
 800f2b8:	0800f37f 	.word	0x0800f37f
 800f2bc:	0800f37f 	.word	0x0800f37f
 800f2c0:	0800f37f 	.word	0x0800f37f
 800f2c4:	0800f37f 	.word	0x0800f37f
 800f2c8:	0800f37f 	.word	0x0800f37f
 800f2cc:	0800f37f 	.word	0x0800f37f
 800f2d0:	0800f34b 	.word	0x0800f34b
 800f2d4:	0800f37f 	.word	0x0800f37f
 800f2d8:	0800f37f 	.word	0x0800f37f
 800f2dc:	0800f37f 	.word	0x0800f37f
 800f2e0:	0800f37f 	.word	0x0800f37f
 800f2e4:	0800f37f 	.word	0x0800f37f
 800f2e8:	0800f37f 	.word	0x0800f37f
 800f2ec:	0800f37f 	.word	0x0800f37f
 800f2f0:	0800f37f 	.word	0x0800f37f
 800f2f4:	0800f37f 	.word	0x0800f37f
 800f2f8:	0800f37f 	.word	0x0800f37f
 800f2fc:	0800f37f 	.word	0x0800f37f
 800f300:	0800f37f 	.word	0x0800f37f
 800f304:	0800f37f 	.word	0x0800f37f
 800f308:	0800f37f 	.word	0x0800f37f
 800f30c:	0800f37f 	.word	0x0800f37f
 800f310:	0800f371 	.word	0x0800f371
 800f314:	2b40      	cmp	r3, #64	; 0x40
 800f316:	d02e      	beq.n	800f376 <UART_SetConfig+0x8aa>
 800f318:	e031      	b.n	800f37e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f31a:	f7fc fcc9 	bl	800bcb0 <HAL_RCC_GetPCLK1Freq>
 800f31e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f320:	e033      	b.n	800f38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f322:	f7fc fcdb 	bl	800bcdc <HAL_RCC_GetPCLK2Freq>
 800f326:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f328:	e02f      	b.n	800f38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f32a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f32e:	4618      	mov	r0, r3
 800f330:	f7fd fc46 	bl	800cbc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f336:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f338:	e027      	b.n	800f38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f33a:	f107 0318 	add.w	r3, r7, #24
 800f33e:	4618      	mov	r0, r3
 800f340:	f7fd fd92 	bl	800ce68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f344:	69fb      	ldr	r3, [r7, #28]
 800f346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f348:	e01f      	b.n	800f38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f34a:	4b2d      	ldr	r3, [pc, #180]	; (800f400 <UART_SetConfig+0x934>)
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	f003 0320 	and.w	r3, r3, #32
 800f352:	2b00      	cmp	r3, #0
 800f354:	d009      	beq.n	800f36a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f356:	4b2a      	ldr	r3, [pc, #168]	; (800f400 <UART_SetConfig+0x934>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	08db      	lsrs	r3, r3, #3
 800f35c:	f003 0303 	and.w	r3, r3, #3
 800f360:	4a24      	ldr	r2, [pc, #144]	; (800f3f4 <UART_SetConfig+0x928>)
 800f362:	fa22 f303 	lsr.w	r3, r2, r3
 800f366:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f368:	e00f      	b.n	800f38a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f36a:	4b22      	ldr	r3, [pc, #136]	; (800f3f4 <UART_SetConfig+0x928>)
 800f36c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f36e:	e00c      	b.n	800f38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f370:	4b21      	ldr	r3, [pc, #132]	; (800f3f8 <UART_SetConfig+0x92c>)
 800f372:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f374:	e009      	b.n	800f38a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f37c:	e005      	b.n	800f38a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f37e:	2300      	movs	r3, #0
 800f380:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f382:	2301      	movs	r3, #1
 800f384:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f388:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f000 80e7 	beq.w	800f560 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f396:	4a19      	ldr	r2, [pc, #100]	; (800f3fc <UART_SetConfig+0x930>)
 800f398:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f39c:	461a      	mov	r2, r3
 800f39e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3a0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f3a4:	005a      	lsls	r2, r3, #1
 800f3a6:	697b      	ldr	r3, [r7, #20]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	085b      	lsrs	r3, r3, #1
 800f3ac:	441a      	add	r2, r3
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	685b      	ldr	r3, [r3, #4]
 800f3b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f3b6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ba:	2b0f      	cmp	r3, #15
 800f3bc:	d916      	bls.n	800f3ec <UART_SetConfig+0x920>
 800f3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3c4:	d212      	bcs.n	800f3ec <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	f023 030f 	bic.w	r3, r3, #15
 800f3ce:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d2:	085b      	lsrs	r3, r3, #1
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	f003 0307 	and.w	r3, r3, #7
 800f3da:	b29a      	uxth	r2, r3
 800f3dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f3de:	4313      	orrs	r3, r2
 800f3e0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f3e2:	697b      	ldr	r3, [r7, #20]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f3e8:	60da      	str	r2, [r3, #12]
 800f3ea:	e0b9      	b.n	800f560 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f3ec:	2301      	movs	r3, #1
 800f3ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f3f2:	e0b5      	b.n	800f560 <UART_SetConfig+0xa94>
 800f3f4:	03d09000 	.word	0x03d09000
 800f3f8:	003d0900 	.word	0x003d0900
 800f3fc:	08012570 	.word	0x08012570
 800f400:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f404:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f408:	2b20      	cmp	r3, #32
 800f40a:	dc49      	bgt.n	800f4a0 <UART_SetConfig+0x9d4>
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	db7c      	blt.n	800f50a <UART_SetConfig+0xa3e>
 800f410:	2b20      	cmp	r3, #32
 800f412:	d87a      	bhi.n	800f50a <UART_SetConfig+0xa3e>
 800f414:	a201      	add	r2, pc, #4	; (adr r2, 800f41c <UART_SetConfig+0x950>)
 800f416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f41a:	bf00      	nop
 800f41c:	0800f4a7 	.word	0x0800f4a7
 800f420:	0800f4af 	.word	0x0800f4af
 800f424:	0800f50b 	.word	0x0800f50b
 800f428:	0800f50b 	.word	0x0800f50b
 800f42c:	0800f4b7 	.word	0x0800f4b7
 800f430:	0800f50b 	.word	0x0800f50b
 800f434:	0800f50b 	.word	0x0800f50b
 800f438:	0800f50b 	.word	0x0800f50b
 800f43c:	0800f4c7 	.word	0x0800f4c7
 800f440:	0800f50b 	.word	0x0800f50b
 800f444:	0800f50b 	.word	0x0800f50b
 800f448:	0800f50b 	.word	0x0800f50b
 800f44c:	0800f50b 	.word	0x0800f50b
 800f450:	0800f50b 	.word	0x0800f50b
 800f454:	0800f50b 	.word	0x0800f50b
 800f458:	0800f50b 	.word	0x0800f50b
 800f45c:	0800f4d7 	.word	0x0800f4d7
 800f460:	0800f50b 	.word	0x0800f50b
 800f464:	0800f50b 	.word	0x0800f50b
 800f468:	0800f50b 	.word	0x0800f50b
 800f46c:	0800f50b 	.word	0x0800f50b
 800f470:	0800f50b 	.word	0x0800f50b
 800f474:	0800f50b 	.word	0x0800f50b
 800f478:	0800f50b 	.word	0x0800f50b
 800f47c:	0800f50b 	.word	0x0800f50b
 800f480:	0800f50b 	.word	0x0800f50b
 800f484:	0800f50b 	.word	0x0800f50b
 800f488:	0800f50b 	.word	0x0800f50b
 800f48c:	0800f50b 	.word	0x0800f50b
 800f490:	0800f50b 	.word	0x0800f50b
 800f494:	0800f50b 	.word	0x0800f50b
 800f498:	0800f50b 	.word	0x0800f50b
 800f49c:	0800f4fd 	.word	0x0800f4fd
 800f4a0:	2b40      	cmp	r3, #64	; 0x40
 800f4a2:	d02e      	beq.n	800f502 <UART_SetConfig+0xa36>
 800f4a4:	e031      	b.n	800f50a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f4a6:	f7fc fc03 	bl	800bcb0 <HAL_RCC_GetPCLK1Freq>
 800f4aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f4ac:	e033      	b.n	800f516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f4ae:	f7fc fc15 	bl	800bcdc <HAL_RCC_GetPCLK2Freq>
 800f4b2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f4b4:	e02f      	b.n	800f516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f4b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f7fd fb80 	bl	800cbc0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4c4:	e027      	b.n	800f516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f4c6:	f107 0318 	add.w	r3, r7, #24
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fd fccc 	bl	800ce68 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f4d0:	69fb      	ldr	r3, [r7, #28]
 800f4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4d4:	e01f      	b.n	800f516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4d6:	4b2d      	ldr	r3, [pc, #180]	; (800f58c <UART_SetConfig+0xac0>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	f003 0320 	and.w	r3, r3, #32
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d009      	beq.n	800f4f6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f4e2:	4b2a      	ldr	r3, [pc, #168]	; (800f58c <UART_SetConfig+0xac0>)
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	08db      	lsrs	r3, r3, #3
 800f4e8:	f003 0303 	and.w	r3, r3, #3
 800f4ec:	4a28      	ldr	r2, [pc, #160]	; (800f590 <UART_SetConfig+0xac4>)
 800f4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800f4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f4f4:	e00f      	b.n	800f516 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f4f6:	4b26      	ldr	r3, [pc, #152]	; (800f590 <UART_SetConfig+0xac4>)
 800f4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f4fa:	e00c      	b.n	800f516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f4fc:	4b25      	ldr	r3, [pc, #148]	; (800f594 <UART_SetConfig+0xac8>)
 800f4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f500:	e009      	b.n	800f516 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f508:	e005      	b.n	800f516 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f50a:	2300      	movs	r3, #0
 800f50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f50e:	2301      	movs	r3, #1
 800f510:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f514:	bf00      	nop
    }

    if (pclk != 0U)
 800f516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d021      	beq.n	800f560 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f520:	4a1d      	ldr	r2, [pc, #116]	; (800f598 <UART_SetConfig+0xacc>)
 800f522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f526:	461a      	mov	r2, r3
 800f528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f52a:	fbb3 f2f2 	udiv	r2, r3, r2
 800f52e:	697b      	ldr	r3, [r7, #20]
 800f530:	685b      	ldr	r3, [r3, #4]
 800f532:	085b      	lsrs	r3, r3, #1
 800f534:	441a      	add	r2, r3
 800f536:	697b      	ldr	r3, [r7, #20]
 800f538:	685b      	ldr	r3, [r3, #4]
 800f53a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f53e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f542:	2b0f      	cmp	r3, #15
 800f544:	d909      	bls.n	800f55a <UART_SetConfig+0xa8e>
 800f546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f54c:	d205      	bcs.n	800f55a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f550:	b29a      	uxth	r2, r3
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	60da      	str	r2, [r3, #12]
 800f558:	e002      	b.n	800f560 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f55a:	2301      	movs	r3, #1
 800f55c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	2201      	movs	r2, #1
 800f564:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f568:	697b      	ldr	r3, [r7, #20]
 800f56a:	2201      	movs	r2, #1
 800f56c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	2200      	movs	r2, #0
 800f574:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	2200      	movs	r2, #0
 800f57a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f57c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f580:	4618      	mov	r0, r3
 800f582:	3748      	adds	r7, #72	; 0x48
 800f584:	46bd      	mov	sp, r7
 800f586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f58a:	bf00      	nop
 800f58c:	58024400 	.word	0x58024400
 800f590:	03d09000 	.word	0x03d09000
 800f594:	003d0900 	.word	0x003d0900
 800f598:	08012570 	.word	0x08012570

0800f59c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5a8:	f003 0301 	and.w	r3, r3, #1
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00a      	beq.n	800f5c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	685b      	ldr	r3, [r3, #4]
 800f5b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	430a      	orrs	r2, r1
 800f5c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ca:	f003 0302 	and.w	r3, r3, #2
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00a      	beq.n	800f5e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	685b      	ldr	r3, [r3, #4]
 800f5d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	430a      	orrs	r2, r1
 800f5e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5ec:	f003 0304 	and.w	r3, r3, #4
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00a      	beq.n	800f60a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	681b      	ldr	r3, [r3, #0]
 800f5f8:	685b      	ldr	r3, [r3, #4]
 800f5fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	430a      	orrs	r2, r1
 800f608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f60e:	f003 0308 	and.w	r3, r3, #8
 800f612:	2b00      	cmp	r3, #0
 800f614:	d00a      	beq.n	800f62c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	685b      	ldr	r3, [r3, #4]
 800f61c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	430a      	orrs	r2, r1
 800f62a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f630:	f003 0310 	and.w	r3, r3, #16
 800f634:	2b00      	cmp	r3, #0
 800f636:	d00a      	beq.n	800f64e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	681b      	ldr	r3, [r3, #0]
 800f64a:	430a      	orrs	r2, r1
 800f64c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f652:	f003 0320 	and.w	r3, r3, #32
 800f656:	2b00      	cmp	r3, #0
 800f658:	d00a      	beq.n	800f670 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	681b      	ldr	r3, [r3, #0]
 800f65e:	689b      	ldr	r3, [r3, #8]
 800f660:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	430a      	orrs	r2, r1
 800f66e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d01a      	beq.n	800f6b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	685b      	ldr	r3, [r3, #4]
 800f682:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	430a      	orrs	r2, r1
 800f690:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f69a:	d10a      	bne.n	800f6b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	685b      	ldr	r3, [r3, #4]
 800f6a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	430a      	orrs	r2, r1
 800f6b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d00a      	beq.n	800f6d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	685b      	ldr	r3, [r3, #4]
 800f6c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	430a      	orrs	r2, r1
 800f6d2:	605a      	str	r2, [r3, #4]
  }
}
 800f6d4:	bf00      	nop
 800f6d6:	370c      	adds	r7, #12
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6de:	4770      	bx	lr

0800f6e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b086      	sub	sp, #24
 800f6e4:	af02      	add	r7, sp, #8
 800f6e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f6f0:	f7f7 ffca 	bl	8007688 <HAL_GetTick>
 800f6f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	681b      	ldr	r3, [r3, #0]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	f003 0308 	and.w	r3, r3, #8
 800f700:	2b08      	cmp	r3, #8
 800f702:	d10e      	bne.n	800f722 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f704:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f708:	9300      	str	r3, [sp, #0]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	2200      	movs	r2, #0
 800f70e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f712:	6878      	ldr	r0, [r7, #4]
 800f714:	f000 f82f 	bl	800f776 <UART_WaitOnFlagUntilTimeout>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f71e:	2303      	movs	r3, #3
 800f720:	e025      	b.n	800f76e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	f003 0304 	and.w	r3, r3, #4
 800f72c:	2b04      	cmp	r3, #4
 800f72e:	d10e      	bne.n	800f74e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f730:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	2200      	movs	r2, #0
 800f73a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 f819 	bl	800f776 <UART_WaitOnFlagUntilTimeout>
 800f744:	4603      	mov	r3, r0
 800f746:	2b00      	cmp	r3, #0
 800f748:	d001      	beq.n	800f74e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f74a:	2303      	movs	r3, #3
 800f74c:	e00f      	b.n	800f76e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2220      	movs	r2, #32
 800f752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2220      	movs	r2, #32
 800f75a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	2200      	movs	r2, #0
 800f762:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2200      	movs	r2, #0
 800f768:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f76c:	2300      	movs	r3, #0
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3710      	adds	r7, #16
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}

0800f776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f776:	b580      	push	{r7, lr}
 800f778:	b09c      	sub	sp, #112	; 0x70
 800f77a:	af00      	add	r7, sp, #0
 800f77c:	60f8      	str	r0, [r7, #12]
 800f77e:	60b9      	str	r1, [r7, #8]
 800f780:	603b      	str	r3, [r7, #0]
 800f782:	4613      	mov	r3, r2
 800f784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f786:	e0a9      	b.n	800f8dc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78e:	f000 80a5 	beq.w	800f8dc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f792:	f7f7 ff79 	bl	8007688 <HAL_GetTick>
 800f796:	4602      	mov	r2, r0
 800f798:	683b      	ldr	r3, [r7, #0]
 800f79a:	1ad3      	subs	r3, r2, r3
 800f79c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d302      	bcc.n	800f7a8 <UART_WaitOnFlagUntilTimeout+0x32>
 800f7a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d140      	bne.n	800f82a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	681b      	ldr	r3, [r3, #0]
 800f7ac:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7b0:	e853 3f00 	ldrex	r3, [r3]
 800f7b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f7b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f7bc:	667b      	str	r3, [r7, #100]	; 0x64
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	461a      	mov	r2, r3
 800f7c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f7c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f7c8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f7cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f7ce:	e841 2300 	strex	r3, r2, [r1]
 800f7d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f7d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d1e6      	bne.n	800f7a8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	3308      	adds	r3, #8
 800f7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7e4:	e853 3f00 	ldrex	r3, [r3]
 800f7e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ec:	f023 0301 	bic.w	r3, r3, #1
 800f7f0:	663b      	str	r3, [r7, #96]	; 0x60
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	3308      	adds	r3, #8
 800f7f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f7fa:	64ba      	str	r2, [r7, #72]	; 0x48
 800f7fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f7fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f802:	e841 2300 	strex	r3, r2, [r1]
 800f806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d1e5      	bne.n	800f7da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	2220      	movs	r2, #32
 800f812:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	2220      	movs	r2, #32
 800f81a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	2200      	movs	r2, #0
 800f822:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f826:	2303      	movs	r3, #3
 800f828:	e069      	b.n	800f8fe <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f003 0304 	and.w	r3, r3, #4
 800f834:	2b00      	cmp	r3, #0
 800f836:	d051      	beq.n	800f8dc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	69db      	ldr	r3, [r3, #28]
 800f83e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f842:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f846:	d149      	bne.n	800f8dc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f850:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f85a:	e853 3f00 	ldrex	r3, [r3]
 800f85e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f862:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f866:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	461a      	mov	r2, r3
 800f86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f870:	637b      	str	r3, [r7, #52]	; 0x34
 800f872:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f874:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f876:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f878:	e841 2300 	strex	r3, r2, [r1]
 800f87c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f880:	2b00      	cmp	r3, #0
 800f882:	d1e6      	bne.n	800f852 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	3308      	adds	r3, #8
 800f88a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	e853 3f00 	ldrex	r3, [r3]
 800f892:	613b      	str	r3, [r7, #16]
   return(result);
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	f023 0301 	bic.w	r3, r3, #1
 800f89a:	66bb      	str	r3, [r7, #104]	; 0x68
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	3308      	adds	r3, #8
 800f8a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f8a4:	623a      	str	r2, [r7, #32]
 800f8a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8a8:	69f9      	ldr	r1, [r7, #28]
 800f8aa:	6a3a      	ldr	r2, [r7, #32]
 800f8ac:	e841 2300 	strex	r3, r2, [r1]
 800f8b0:	61bb      	str	r3, [r7, #24]
   return(result);
 800f8b2:	69bb      	ldr	r3, [r7, #24]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1e5      	bne.n	800f884 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f8b8:	68fb      	ldr	r3, [r7, #12]
 800f8ba:	2220      	movs	r2, #32
 800f8bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	2220      	movs	r2, #32
 800f8c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	2220      	movs	r2, #32
 800f8cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f8d8:	2303      	movs	r3, #3
 800f8da:	e010      	b.n	800f8fe <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	69da      	ldr	r2, [r3, #28]
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	68ba      	ldr	r2, [r7, #8]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	bf0c      	ite	eq
 800f8ec:	2301      	moveq	r3, #1
 800f8ee:	2300      	movne	r3, #0
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	461a      	mov	r2, r3
 800f8f4:	79fb      	ldrb	r3, [r7, #7]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	f43f af46 	beq.w	800f788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f8fc:	2300      	movs	r3, #0
}
 800f8fe:	4618      	mov	r0, r3
 800f900:	3770      	adds	r7, #112	; 0x70
 800f902:	46bd      	mov	sp, r7
 800f904:	bd80      	pop	{r7, pc}
	...

0800f908 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f908:	b480      	push	{r7}
 800f90a:	b095      	sub	sp, #84	; 0x54
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f918:	e853 3f00 	ldrex	r3, [r3]
 800f91c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f920:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f924:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	461a      	mov	r2, r3
 800f92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f92e:	643b      	str	r3, [r7, #64]	; 0x40
 800f930:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f932:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f934:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f936:	e841 2300 	strex	r3, r2, [r1]
 800f93a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d1e6      	bne.n	800f910 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	3308      	adds	r3, #8
 800f948:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f94a:	6a3b      	ldr	r3, [r7, #32]
 800f94c:	e853 3f00 	ldrex	r3, [r3]
 800f950:	61fb      	str	r3, [r7, #28]
   return(result);
 800f952:	69fa      	ldr	r2, [r7, #28]
 800f954:	4b1e      	ldr	r3, [pc, #120]	; (800f9d0 <UART_EndRxTransfer+0xc8>)
 800f956:	4013      	ands	r3, r2
 800f958:	64bb      	str	r3, [r7, #72]	; 0x48
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	3308      	adds	r3, #8
 800f960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f962:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f964:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f966:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f968:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f96a:	e841 2300 	strex	r3, r2, [r1]
 800f96e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	2b00      	cmp	r3, #0
 800f974:	d1e5      	bne.n	800f942 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f97a:	2b01      	cmp	r3, #1
 800f97c:	d118      	bne.n	800f9b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	e853 3f00 	ldrex	r3, [r3]
 800f98a:	60bb      	str	r3, [r7, #8]
   return(result);
 800f98c:	68bb      	ldr	r3, [r7, #8]
 800f98e:	f023 0310 	bic.w	r3, r3, #16
 800f992:	647b      	str	r3, [r7, #68]	; 0x44
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	461a      	mov	r2, r3
 800f99a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f99c:	61bb      	str	r3, [r7, #24]
 800f99e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a0:	6979      	ldr	r1, [r7, #20]
 800f9a2:	69ba      	ldr	r2, [r7, #24]
 800f9a4:	e841 2300 	strex	r3, r2, [r1]
 800f9a8:	613b      	str	r3, [r7, #16]
   return(result);
 800f9aa:	693b      	ldr	r3, [r7, #16]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d1e6      	bne.n	800f97e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2220      	movs	r2, #32
 800f9b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	2200      	movs	r2, #0
 800f9bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	2200      	movs	r2, #0
 800f9c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800f9c4:	bf00      	nop
 800f9c6:	3754      	adds	r7, #84	; 0x54
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr
 800f9d0:	effffffe 	.word	0xeffffffe

0800f9d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f9d4:	b580      	push	{r7, lr}
 800f9d6:	b084      	sub	sp, #16
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	2200      	movs	r2, #0
 800f9ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800f9f2:	68f8      	ldr	r0, [r7, #12]
 800f9f4:	f7ff f854 	bl	800eaa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f9f8:	bf00      	nop
 800f9fa:	3710      	adds	r7, #16
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b088      	sub	sp, #32
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	e853 3f00 	ldrex	r3, [r3]
 800fa14:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa1c:	61fb      	str	r3, [r7, #28]
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	461a      	mov	r2, r3
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	61bb      	str	r3, [r7, #24]
 800fa28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2a:	6979      	ldr	r1, [r7, #20]
 800fa2c:	69ba      	ldr	r2, [r7, #24]
 800fa2e:	e841 2300 	strex	r3, r2, [r1]
 800fa32:	613b      	str	r3, [r7, #16]
   return(result);
 800fa34:	693b      	ldr	r3, [r7, #16]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1e6      	bne.n	800fa08 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2220      	movs	r2, #32
 800fa3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	2200      	movs	r2, #0
 800fa46:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	f7ff f81f 	bl	800ea8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa4e:	bf00      	nop
 800fa50:	3720      	adds	r7, #32
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}

0800fa56 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fa56:	b480      	push	{r7}
 800fa58:	b083      	sub	sp, #12
 800fa5a:	af00      	add	r7, sp, #0
 800fa5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fa5e:	bf00      	nop
 800fa60:	370c      	adds	r7, #12
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b083      	sub	sp, #12
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fa72:	bf00      	nop
 800fa74:	370c      	adds	r7, #12
 800fa76:	46bd      	mov	sp, r7
 800fa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7c:	4770      	bx	lr

0800fa7e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fa7e:	b480      	push	{r7}
 800fa80:	b083      	sub	sp, #12
 800fa82:	af00      	add	r7, sp, #0
 800fa84:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fa86:	bf00      	nop
 800fa88:	370c      	adds	r7, #12
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr

0800fa92 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fa92:	b480      	push	{r7}
 800fa94:	b085      	sub	sp, #20
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800faa0:	2b01      	cmp	r3, #1
 800faa2:	d101      	bne.n	800faa8 <HAL_UARTEx_DisableFifoMode+0x16>
 800faa4:	2302      	movs	r3, #2
 800faa6:	e027      	b.n	800faf8 <HAL_UARTEx_DisableFifoMode+0x66>
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2201      	movs	r2, #1
 800faac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2224      	movs	r2, #36	; 0x24
 800fab4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	681a      	ldr	r2, [r3, #0]
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	681b      	ldr	r3, [r3, #0]
 800faca:	f022 0201 	bic.w	r2, r2, #1
 800face:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fad6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2200      	movs	r2, #0
 800fadc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	68fa      	ldr	r2, [r7, #12]
 800fae4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2220      	movs	r2, #32
 800faea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800faf6:	2300      	movs	r3, #0
}
 800faf8:	4618      	mov	r0, r3
 800fafa:	3714      	adds	r7, #20
 800fafc:	46bd      	mov	sp, r7
 800fafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb02:	4770      	bx	lr

0800fb04 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b084      	sub	sp, #16
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	d101      	bne.n	800fb1c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fb18:	2302      	movs	r3, #2
 800fb1a:	e02d      	b.n	800fb78 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2224      	movs	r2, #36	; 0x24
 800fb28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	681a      	ldr	r2, [r3, #0]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	f022 0201 	bic.w	r2, r2, #1
 800fb42:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	689b      	ldr	r3, [r3, #8]
 800fb4a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	681b      	ldr	r3, [r3, #0]
 800fb52:	683a      	ldr	r2, [r7, #0]
 800fb54:	430a      	orrs	r2, r1
 800fb56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f000 f84f 	bl	800fbfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	68fa      	ldr	r2, [r7, #12]
 800fb64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2220      	movs	r2, #32
 800fb6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	2200      	movs	r2, #0
 800fb72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fb76:	2300      	movs	r3, #0
}
 800fb78:	4618      	mov	r0, r3
 800fb7a:	3710      	adds	r7, #16
 800fb7c:	46bd      	mov	sp, r7
 800fb7e:	bd80      	pop	{r7, pc}

0800fb80 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb90:	2b01      	cmp	r3, #1
 800fb92:	d101      	bne.n	800fb98 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fb94:	2302      	movs	r3, #2
 800fb96:	e02d      	b.n	800fbf4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2224      	movs	r2, #36	; 0x24
 800fba4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	681a      	ldr	r2, [r3, #0]
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	681b      	ldr	r3, [r3, #0]
 800fbba:	f022 0201 	bic.w	r2, r2, #1
 800fbbe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	689b      	ldr	r3, [r3, #8]
 800fbc6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	683a      	ldr	r2, [r7, #0]
 800fbd0:	430a      	orrs	r2, r1
 800fbd2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 f811 	bl	800fbfc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	2220      	movs	r2, #32
 800fbe6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	2200      	movs	r2, #0
 800fbee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbf2:	2300      	movs	r3, #0
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	3710      	adds	r7, #16
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd80      	pop	{r7, pc}

0800fbfc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b085      	sub	sp, #20
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d108      	bne.n	800fc1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2201      	movs	r2, #1
 800fc10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fc1c:	e031      	b.n	800fc82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fc1e:	2310      	movs	r3, #16
 800fc20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fc22:	2310      	movs	r3, #16
 800fc24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	689b      	ldr	r3, [r3, #8]
 800fc2c:	0e5b      	lsrs	r3, r3, #25
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	f003 0307 	and.w	r3, r3, #7
 800fc34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	689b      	ldr	r3, [r3, #8]
 800fc3c:	0f5b      	lsrs	r3, r3, #29
 800fc3e:	b2db      	uxtb	r3, r3
 800fc40:	f003 0307 	and.w	r3, r3, #7
 800fc44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc46:	7bbb      	ldrb	r3, [r7, #14]
 800fc48:	7b3a      	ldrb	r2, [r7, #12]
 800fc4a:	4911      	ldr	r1, [pc, #68]	; (800fc90 <UARTEx_SetNbDataToProcess+0x94>)
 800fc4c:	5c8a      	ldrb	r2, [r1, r2]
 800fc4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fc52:	7b3a      	ldrb	r2, [r7, #12]
 800fc54:	490f      	ldr	r1, [pc, #60]	; (800fc94 <UARTEx_SetNbDataToProcess+0x98>)
 800fc56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fc58:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc64:	7bfb      	ldrb	r3, [r7, #15]
 800fc66:	7b7a      	ldrb	r2, [r7, #13]
 800fc68:	4909      	ldr	r1, [pc, #36]	; (800fc90 <UARTEx_SetNbDataToProcess+0x94>)
 800fc6a:	5c8a      	ldrb	r2, [r1, r2]
 800fc6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fc70:	7b7a      	ldrb	r2, [r7, #13]
 800fc72:	4908      	ldr	r1, [pc, #32]	; (800fc94 <UARTEx_SetNbDataToProcess+0x98>)
 800fc74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fc76:	fb93 f3f2 	sdiv	r3, r3, r2
 800fc7a:	b29a      	uxth	r2, r3
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fc82:	bf00      	nop
 800fc84:	3714      	adds	r7, #20
 800fc86:	46bd      	mov	sp, r7
 800fc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8c:	4770      	bx	lr
 800fc8e:	bf00      	nop
 800fc90:	08012588 	.word	0x08012588
 800fc94:	08012590 	.word	0x08012590

0800fc98 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fc98:	b084      	sub	sp, #16
 800fc9a:	b580      	push	{r7, lr}
 800fc9c:	b084      	sub	sp, #16
 800fc9e:	af00      	add	r7, sp, #0
 800fca0:	6078      	str	r0, [r7, #4]
 800fca2:	f107 001c 	add.w	r0, r7, #28
 800fca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcac:	2b01      	cmp	r3, #1
 800fcae:	d120      	bne.n	800fcf2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fcb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	68da      	ldr	r2, [r3, #12]
 800fcc0:	4b2a      	ldr	r3, [pc, #168]	; (800fd6c <USB_CoreInit+0xd4>)
 800fcc2:	4013      	ands	r3, r2
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	68db      	ldr	r3, [r3, #12]
 800fccc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fcd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcd6:	2b01      	cmp	r3, #1
 800fcd8:	d105      	bne.n	800fce6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	68db      	ldr	r3, [r3, #12]
 800fcde:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f000 faac 	bl	8010244 <USB_CoreReset>
 800fcec:	4603      	mov	r3, r0
 800fcee:	73fb      	strb	r3, [r7, #15]
 800fcf0:	e01a      	b.n	800fd28 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	68db      	ldr	r3, [r3, #12]
 800fcf6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 faa0 	bl	8010244 <USB_CoreReset>
 800fd04:	4603      	mov	r3, r0
 800fd06:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fd08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d106      	bne.n	800fd1c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd12:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	639a      	str	r2, [r3, #56]	; 0x38
 800fd1a:	e005      	b.n	800fd28 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fd28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd2a:	2b01      	cmp	r3, #1
 800fd2c:	d116      	bne.n	800fd5c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fd32:	b29a      	uxth	r2, r3
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fd3c:	4b0c      	ldr	r3, [pc, #48]	; (800fd70 <USB_CoreInit+0xd8>)
 800fd3e:	4313      	orrs	r3, r2
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	689b      	ldr	r3, [r3, #8]
 800fd48:	f043 0206 	orr.w	r2, r3, #6
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	689b      	ldr	r3, [r3, #8]
 800fd54:	f043 0220 	orr.w	r2, r3, #32
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd5e:	4618      	mov	r0, r3
 800fd60:	3710      	adds	r7, #16
 800fd62:	46bd      	mov	sp, r7
 800fd64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd68:	b004      	add	sp, #16
 800fd6a:	4770      	bx	lr
 800fd6c:	ffbdffbf 	.word	0xffbdffbf
 800fd70:	03ee0000 	.word	0x03ee0000

0800fd74 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd74:	b480      	push	{r7}
 800fd76:	b083      	sub	sp, #12
 800fd78:	af00      	add	r7, sp, #0
 800fd7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	689b      	ldr	r3, [r3, #8]
 800fd80:	f023 0201 	bic.w	r2, r3, #1
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fd88:	2300      	movs	r3, #0
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	370c      	adds	r7, #12
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr

0800fd96 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b084      	sub	sp, #16
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
 800fd9e:	460b      	mov	r3, r1
 800fda0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fda2:	2300      	movs	r3, #0
 800fda4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	68db      	ldr	r3, [r3, #12]
 800fdaa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fdb2:	78fb      	ldrb	r3, [r7, #3]
 800fdb4:	2b01      	cmp	r3, #1
 800fdb6:	d115      	bne.n	800fde4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	68db      	ldr	r3, [r3, #12]
 800fdbc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fdc4:	2001      	movs	r0, #1
 800fdc6:	f7f7 fc6b 	bl	80076a0 <HAL_Delay>
      ms++;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	3301      	adds	r3, #1
 800fdce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fdd0:	6878      	ldr	r0, [r7, #4]
 800fdd2:	f000 fa29 	bl	8010228 <USB_GetMode>
 800fdd6:	4603      	mov	r3, r0
 800fdd8:	2b01      	cmp	r3, #1
 800fdda:	d01e      	beq.n	800fe1a <USB_SetCurrentMode+0x84>
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b31      	cmp	r3, #49	; 0x31
 800fde0:	d9f0      	bls.n	800fdc4 <USB_SetCurrentMode+0x2e>
 800fde2:	e01a      	b.n	800fe1a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fde4:	78fb      	ldrb	r3, [r7, #3]
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d115      	bne.n	800fe16 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800fdf6:	2001      	movs	r0, #1
 800fdf8:	f7f7 fc52 	bl	80076a0 <HAL_Delay>
      ms++;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	3301      	adds	r3, #1
 800fe00:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fe02:	6878      	ldr	r0, [r7, #4]
 800fe04:	f000 fa10 	bl	8010228 <USB_GetMode>
 800fe08:	4603      	mov	r3, r0
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d005      	beq.n	800fe1a <USB_SetCurrentMode+0x84>
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2b31      	cmp	r3, #49	; 0x31
 800fe12:	d9f0      	bls.n	800fdf6 <USB_SetCurrentMode+0x60>
 800fe14:	e001      	b.n	800fe1a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800fe16:	2301      	movs	r3, #1
 800fe18:	e005      	b.n	800fe26 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2b32      	cmp	r3, #50	; 0x32
 800fe1e:	d101      	bne.n	800fe24 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800fe20:	2301      	movs	r3, #1
 800fe22:	e000      	b.n	800fe26 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3710      	adds	r7, #16
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
	...

0800fe30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fe30:	b084      	sub	sp, #16
 800fe32:	b580      	push	{r7, lr}
 800fe34:	b086      	sub	sp, #24
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fe3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fe42:	2300      	movs	r3, #0
 800fe44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	613b      	str	r3, [r7, #16]
 800fe4e:	e009      	b.n	800fe64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	693b      	ldr	r3, [r7, #16]
 800fe54:	3340      	adds	r3, #64	; 0x40
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4413      	add	r3, r2
 800fe5a:	2200      	movs	r2, #0
 800fe5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	3301      	adds	r3, #1
 800fe62:	613b      	str	r3, [r7, #16]
 800fe64:	693b      	ldr	r3, [r7, #16]
 800fe66:	2b0e      	cmp	r3, #14
 800fe68:	d9f2      	bls.n	800fe50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fe6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d11c      	bne.n	800feaa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	68fa      	ldr	r2, [r7, #12]
 800fe7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe7e:	f043 0302 	orr.w	r3, r3, #2
 800fe82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	601a      	str	r2, [r3, #0]
 800fea8:	e005      	b.n	800feb6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800febc:	461a      	mov	r2, r3
 800febe:	2300      	movs	r3, #0
 800fec0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fec8:	4619      	mov	r1, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fed0:	461a      	mov	r2, r3
 800fed2:	680b      	ldr	r3, [r1, #0]
 800fed4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed8:	2b01      	cmp	r3, #1
 800feda:	d10c      	bne.n	800fef6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fedc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d104      	bne.n	800feec <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fee2:	2100      	movs	r1, #0
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 f965 	bl	80101b4 <USB_SetDevSpeed>
 800feea:	e008      	b.n	800fefe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800feec:	2101      	movs	r1, #1
 800feee:	6878      	ldr	r0, [r7, #4]
 800fef0:	f000 f960 	bl	80101b4 <USB_SetDevSpeed>
 800fef4:	e003      	b.n	800fefe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fef6:	2103      	movs	r1, #3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 f95b 	bl	80101b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fefe:	2110      	movs	r1, #16
 800ff00:	6878      	ldr	r0, [r7, #4]
 800ff02:	f000 f8f3 	bl	80100ec <USB_FlushTxFifo>
 800ff06:	4603      	mov	r3, r0
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d001      	beq.n	800ff10 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	f000 f91f 	bl	8010154 <USB_FlushRxFifo>
 800ff16:	4603      	mov	r3, r0
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d001      	beq.n	800ff20 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ff1c:	2301      	movs	r3, #1
 800ff1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff26:	461a      	mov	r2, r3
 800ff28:	2300      	movs	r3, #0
 800ff2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff32:	461a      	mov	r2, r3
 800ff34:	2300      	movs	r3, #0
 800ff36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff3e:	461a      	mov	r2, r3
 800ff40:	2300      	movs	r3, #0
 800ff42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ff44:	2300      	movs	r3, #0
 800ff46:	613b      	str	r3, [r7, #16]
 800ff48:	e043      	b.n	800ffd2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	015a      	lsls	r2, r3, #5
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	4413      	add	r3, r2
 800ff52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff60:	d118      	bne.n	800ff94 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ff62:	693b      	ldr	r3, [r7, #16]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d10a      	bne.n	800ff7e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	015a      	lsls	r2, r3, #5
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	4413      	add	r3, r2
 800ff70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff74:	461a      	mov	r2, r3
 800ff76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ff7a:	6013      	str	r3, [r2, #0]
 800ff7c:	e013      	b.n	800ffa6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	015a      	lsls	r2, r3, #5
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	4413      	add	r3, r2
 800ff86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ff90:	6013      	str	r3, [r2, #0]
 800ff92:	e008      	b.n	800ffa6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	015a      	lsls	r2, r3, #5
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	4413      	add	r3, r2
 800ff9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	015a      	lsls	r2, r3, #5
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	4413      	add	r3, r2
 800ffae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	2300      	movs	r3, #0
 800ffb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	015a      	lsls	r2, r3, #5
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	4413      	add	r3, r2
 800ffc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffc4:	461a      	mov	r2, r3
 800ffc6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ffca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffcc:	693b      	ldr	r3, [r7, #16]
 800ffce:	3301      	adds	r3, #1
 800ffd0:	613b      	str	r3, [r7, #16]
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd4:	693a      	ldr	r2, [r7, #16]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d3b7      	bcc.n	800ff4a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ffda:	2300      	movs	r3, #0
 800ffdc:	613b      	str	r3, [r7, #16]
 800ffde:	e043      	b.n	8010068 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	015a      	lsls	r2, r3, #5
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	4413      	add	r3, r2
 800ffe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fff6:	d118      	bne.n	801002a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d10a      	bne.n	8010014 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fffe:	693b      	ldr	r3, [r7, #16]
 8010000:	015a      	lsls	r2, r3, #5
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	4413      	add	r3, r2
 8010006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801000a:	461a      	mov	r2, r3
 801000c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010010:	6013      	str	r3, [r2, #0]
 8010012:	e013      	b.n	801003c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010014:	693b      	ldr	r3, [r7, #16]
 8010016:	015a      	lsls	r2, r3, #5
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	4413      	add	r3, r2
 801001c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010020:	461a      	mov	r2, r3
 8010022:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010026:	6013      	str	r3, [r2, #0]
 8010028:	e008      	b.n	801003c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801002a:	693b      	ldr	r3, [r7, #16]
 801002c:	015a      	lsls	r2, r3, #5
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	4413      	add	r3, r2
 8010032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010036:	461a      	mov	r2, r3
 8010038:	2300      	movs	r3, #0
 801003a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	015a      	lsls	r2, r3, #5
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	4413      	add	r3, r2
 8010044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010048:	461a      	mov	r2, r3
 801004a:	2300      	movs	r3, #0
 801004c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	015a      	lsls	r2, r3, #5
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	4413      	add	r3, r2
 8010056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801005a:	461a      	mov	r2, r3
 801005c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010060:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	3301      	adds	r3, #1
 8010066:	613b      	str	r3, [r7, #16]
 8010068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801006a:	693a      	ldr	r2, [r7, #16]
 801006c:	429a      	cmp	r2, r3
 801006e:	d3b7      	bcc.n	800ffe0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010076:	691b      	ldr	r3, [r3, #16]
 8010078:	68fa      	ldr	r2, [r7, #12]
 801007a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801007e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010082:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	2200      	movs	r2, #0
 8010088:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010090:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010094:	2b00      	cmp	r3, #0
 8010096:	d105      	bne.n	80100a4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	699b      	ldr	r3, [r3, #24]
 801009c:	f043 0210 	orr.w	r2, r3, #16
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	699a      	ldr	r2, [r3, #24]
 80100a8:	4b0e      	ldr	r3, [pc, #56]	; (80100e4 <USB_DevInit+0x2b4>)
 80100aa:	4313      	orrs	r3, r2
 80100ac:	687a      	ldr	r2, [r7, #4]
 80100ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80100b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d005      	beq.n	80100c2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	699b      	ldr	r3, [r3, #24]
 80100ba:	f043 0208 	orr.w	r2, r3, #8
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80100c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100c4:	2b01      	cmp	r3, #1
 80100c6:	d105      	bne.n	80100d4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	699a      	ldr	r2, [r3, #24]
 80100cc:	4b06      	ldr	r3, [pc, #24]	; (80100e8 <USB_DevInit+0x2b8>)
 80100ce:	4313      	orrs	r3, r2
 80100d0:	687a      	ldr	r2, [r7, #4]
 80100d2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80100d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80100d6:	4618      	mov	r0, r3
 80100d8:	3718      	adds	r7, #24
 80100da:	46bd      	mov	sp, r7
 80100dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80100e0:	b004      	add	sp, #16
 80100e2:	4770      	bx	lr
 80100e4:	803c3800 	.word	0x803c3800
 80100e8:	40000004 	.word	0x40000004

080100ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80100ec:	b480      	push	{r7}
 80100ee:	b085      	sub	sp, #20
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
 80100f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80100f6:	2300      	movs	r3, #0
 80100f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	3301      	adds	r3, #1
 80100fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	4a13      	ldr	r2, [pc, #76]	; (8010150 <USB_FlushTxFifo+0x64>)
 8010104:	4293      	cmp	r3, r2
 8010106:	d901      	bls.n	801010c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010108:	2303      	movs	r3, #3
 801010a:	e01b      	b.n	8010144 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	691b      	ldr	r3, [r3, #16]
 8010110:	2b00      	cmp	r3, #0
 8010112:	daf2      	bge.n	80100fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010114:	2300      	movs	r3, #0
 8010116:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010118:	683b      	ldr	r3, [r7, #0]
 801011a:	019b      	lsls	r3, r3, #6
 801011c:	f043 0220 	orr.w	r2, r3, #32
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	3301      	adds	r3, #1
 8010128:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	4a08      	ldr	r2, [pc, #32]	; (8010150 <USB_FlushTxFifo+0x64>)
 801012e:	4293      	cmp	r3, r2
 8010130:	d901      	bls.n	8010136 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010132:	2303      	movs	r3, #3
 8010134:	e006      	b.n	8010144 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	691b      	ldr	r3, [r3, #16]
 801013a:	f003 0320 	and.w	r3, r3, #32
 801013e:	2b20      	cmp	r3, #32
 8010140:	d0f0      	beq.n	8010124 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010142:	2300      	movs	r3, #0
}
 8010144:	4618      	mov	r0, r3
 8010146:	3714      	adds	r7, #20
 8010148:	46bd      	mov	sp, r7
 801014a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014e:	4770      	bx	lr
 8010150:	00030d40 	.word	0x00030d40

08010154 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801015c:	2300      	movs	r3, #0
 801015e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	3301      	adds	r3, #1
 8010164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	4a11      	ldr	r2, [pc, #68]	; (80101b0 <USB_FlushRxFifo+0x5c>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d901      	bls.n	8010172 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801016e:	2303      	movs	r3, #3
 8010170:	e018      	b.n	80101a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	691b      	ldr	r3, [r3, #16]
 8010176:	2b00      	cmp	r3, #0
 8010178:	daf2      	bge.n	8010160 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801017a:	2300      	movs	r3, #0
 801017c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	2210      	movs	r2, #16
 8010182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	3301      	adds	r3, #1
 8010188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	4a08      	ldr	r2, [pc, #32]	; (80101b0 <USB_FlushRxFifo+0x5c>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d901      	bls.n	8010196 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010192:	2303      	movs	r3, #3
 8010194:	e006      	b.n	80101a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	691b      	ldr	r3, [r3, #16]
 801019a:	f003 0310 	and.w	r3, r3, #16
 801019e:	2b10      	cmp	r3, #16
 80101a0:	d0f0      	beq.n	8010184 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80101a2:	2300      	movs	r3, #0
}
 80101a4:	4618      	mov	r0, r3
 80101a6:	3714      	adds	r7, #20
 80101a8:	46bd      	mov	sp, r7
 80101aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ae:	4770      	bx	lr
 80101b0:	00030d40 	.word	0x00030d40

080101b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80101b4:	b480      	push	{r7}
 80101b6:	b085      	sub	sp, #20
 80101b8:	af00      	add	r7, sp, #0
 80101ba:	6078      	str	r0, [r7, #4]
 80101bc:	460b      	mov	r3, r1
 80101be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ca:	681a      	ldr	r2, [r3, #0]
 80101cc:	78fb      	ldrb	r3, [r7, #3]
 80101ce:	68f9      	ldr	r1, [r7, #12]
 80101d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101d4:	4313      	orrs	r3, r2
 80101d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80101d8:	2300      	movs	r3, #0
}
 80101da:	4618      	mov	r0, r3
 80101dc:	3714      	adds	r7, #20
 80101de:	46bd      	mov	sp, r7
 80101e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e4:	4770      	bx	lr

080101e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80101e6:	b480      	push	{r7}
 80101e8:	b085      	sub	sp, #20
 80101ea:	af00      	add	r7, sp, #0
 80101ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	68fa      	ldr	r2, [r7, #12]
 80101fc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010200:	f023 0303 	bic.w	r3, r3, #3
 8010204:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801020c:	685b      	ldr	r3, [r3, #4]
 801020e:	68fa      	ldr	r2, [r7, #12]
 8010210:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010214:	f043 0302 	orr.w	r3, r3, #2
 8010218:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3714      	adds	r7, #20
 8010220:	46bd      	mov	sp, r7
 8010222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010226:	4770      	bx	lr

08010228 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010228:	b480      	push	{r7}
 801022a:	b083      	sub	sp, #12
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	695b      	ldr	r3, [r3, #20]
 8010234:	f003 0301 	and.w	r3, r3, #1
}
 8010238:	4618      	mov	r0, r3
 801023a:	370c      	adds	r7, #12
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr

08010244 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010244:	b480      	push	{r7}
 8010246:	b085      	sub	sp, #20
 8010248:	af00      	add	r7, sp, #0
 801024a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801024c:	2300      	movs	r3, #0
 801024e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	3301      	adds	r3, #1
 8010254:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	4a13      	ldr	r2, [pc, #76]	; (80102a8 <USB_CoreReset+0x64>)
 801025a:	4293      	cmp	r3, r2
 801025c:	d901      	bls.n	8010262 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801025e:	2303      	movs	r3, #3
 8010260:	e01b      	b.n	801029a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	691b      	ldr	r3, [r3, #16]
 8010266:	2b00      	cmp	r3, #0
 8010268:	daf2      	bge.n	8010250 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801026a:	2300      	movs	r3, #0
 801026c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	691b      	ldr	r3, [r3, #16]
 8010272:	f043 0201 	orr.w	r2, r3, #1
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801027a:	68fb      	ldr	r3, [r7, #12]
 801027c:	3301      	adds	r3, #1
 801027e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	4a09      	ldr	r2, [pc, #36]	; (80102a8 <USB_CoreReset+0x64>)
 8010284:	4293      	cmp	r3, r2
 8010286:	d901      	bls.n	801028c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010288:	2303      	movs	r3, #3
 801028a:	e006      	b.n	801029a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	691b      	ldr	r3, [r3, #16]
 8010290:	f003 0301 	and.w	r3, r3, #1
 8010294:	2b01      	cmp	r3, #1
 8010296:	d0f0      	beq.n	801027a <USB_CoreReset+0x36>

  return HAL_OK;
 8010298:	2300      	movs	r3, #0
}
 801029a:	4618      	mov	r0, r3
 801029c:	3714      	adds	r7, #20
 801029e:	46bd      	mov	sp, r7
 80102a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a4:	4770      	bx	lr
 80102a6:	bf00      	nop
 80102a8:	00030d40 	.word	0x00030d40

080102ac <__errno>:
 80102ac:	4b01      	ldr	r3, [pc, #4]	; (80102b4 <__errno+0x8>)
 80102ae:	6818      	ldr	r0, [r3, #0]
 80102b0:	4770      	bx	lr
 80102b2:	bf00      	nop
 80102b4:	24000024 	.word	0x24000024

080102b8 <__libc_init_array>:
 80102b8:	b570      	push	{r4, r5, r6, lr}
 80102ba:	4d0d      	ldr	r5, [pc, #52]	; (80102f0 <__libc_init_array+0x38>)
 80102bc:	4c0d      	ldr	r4, [pc, #52]	; (80102f4 <__libc_init_array+0x3c>)
 80102be:	1b64      	subs	r4, r4, r5
 80102c0:	10a4      	asrs	r4, r4, #2
 80102c2:	2600      	movs	r6, #0
 80102c4:	42a6      	cmp	r6, r4
 80102c6:	d109      	bne.n	80102dc <__libc_init_array+0x24>
 80102c8:	4d0b      	ldr	r5, [pc, #44]	; (80102f8 <__libc_init_array+0x40>)
 80102ca:	4c0c      	ldr	r4, [pc, #48]	; (80102fc <__libc_init_array+0x44>)
 80102cc:	f000 fc8e 	bl	8010bec <_init>
 80102d0:	1b64      	subs	r4, r4, r5
 80102d2:	10a4      	asrs	r4, r4, #2
 80102d4:	2600      	movs	r6, #0
 80102d6:	42a6      	cmp	r6, r4
 80102d8:	d105      	bne.n	80102e6 <__libc_init_array+0x2e>
 80102da:	bd70      	pop	{r4, r5, r6, pc}
 80102dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80102e0:	4798      	blx	r3
 80102e2:	3601      	adds	r6, #1
 80102e4:	e7ee      	b.n	80102c4 <__libc_init_array+0xc>
 80102e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80102ea:	4798      	blx	r3
 80102ec:	3601      	adds	r6, #1
 80102ee:	e7f2      	b.n	80102d6 <__libc_init_array+0x1e>
 80102f0:	080125d4 	.word	0x080125d4
 80102f4:	080125d4 	.word	0x080125d4
 80102f8:	080125d4 	.word	0x080125d4
 80102fc:	080125d8 	.word	0x080125d8

08010300 <memset>:
 8010300:	4402      	add	r2, r0
 8010302:	4603      	mov	r3, r0
 8010304:	4293      	cmp	r3, r2
 8010306:	d100      	bne.n	801030a <memset+0xa>
 8010308:	4770      	bx	lr
 801030a:	f803 1b01 	strb.w	r1, [r3], #1
 801030e:	e7f9      	b.n	8010304 <memset+0x4>

08010310 <_free_r>:
 8010310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010312:	2900      	cmp	r1, #0
 8010314:	d044      	beq.n	80103a0 <_free_r+0x90>
 8010316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801031a:	9001      	str	r0, [sp, #4]
 801031c:	2b00      	cmp	r3, #0
 801031e:	f1a1 0404 	sub.w	r4, r1, #4
 8010322:	bfb8      	it	lt
 8010324:	18e4      	addlt	r4, r4, r3
 8010326:	f000 f903 	bl	8010530 <__malloc_lock>
 801032a:	4a1e      	ldr	r2, [pc, #120]	; (80103a4 <_free_r+0x94>)
 801032c:	9801      	ldr	r0, [sp, #4]
 801032e:	6813      	ldr	r3, [r2, #0]
 8010330:	b933      	cbnz	r3, 8010340 <_free_r+0x30>
 8010332:	6063      	str	r3, [r4, #4]
 8010334:	6014      	str	r4, [r2, #0]
 8010336:	b003      	add	sp, #12
 8010338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801033c:	f000 b8fe 	b.w	801053c <__malloc_unlock>
 8010340:	42a3      	cmp	r3, r4
 8010342:	d908      	bls.n	8010356 <_free_r+0x46>
 8010344:	6825      	ldr	r5, [r4, #0]
 8010346:	1961      	adds	r1, r4, r5
 8010348:	428b      	cmp	r3, r1
 801034a:	bf01      	itttt	eq
 801034c:	6819      	ldreq	r1, [r3, #0]
 801034e:	685b      	ldreq	r3, [r3, #4]
 8010350:	1949      	addeq	r1, r1, r5
 8010352:	6021      	streq	r1, [r4, #0]
 8010354:	e7ed      	b.n	8010332 <_free_r+0x22>
 8010356:	461a      	mov	r2, r3
 8010358:	685b      	ldr	r3, [r3, #4]
 801035a:	b10b      	cbz	r3, 8010360 <_free_r+0x50>
 801035c:	42a3      	cmp	r3, r4
 801035e:	d9fa      	bls.n	8010356 <_free_r+0x46>
 8010360:	6811      	ldr	r1, [r2, #0]
 8010362:	1855      	adds	r5, r2, r1
 8010364:	42a5      	cmp	r5, r4
 8010366:	d10b      	bne.n	8010380 <_free_r+0x70>
 8010368:	6824      	ldr	r4, [r4, #0]
 801036a:	4421      	add	r1, r4
 801036c:	1854      	adds	r4, r2, r1
 801036e:	42a3      	cmp	r3, r4
 8010370:	6011      	str	r1, [r2, #0]
 8010372:	d1e0      	bne.n	8010336 <_free_r+0x26>
 8010374:	681c      	ldr	r4, [r3, #0]
 8010376:	685b      	ldr	r3, [r3, #4]
 8010378:	6053      	str	r3, [r2, #4]
 801037a:	4421      	add	r1, r4
 801037c:	6011      	str	r1, [r2, #0]
 801037e:	e7da      	b.n	8010336 <_free_r+0x26>
 8010380:	d902      	bls.n	8010388 <_free_r+0x78>
 8010382:	230c      	movs	r3, #12
 8010384:	6003      	str	r3, [r0, #0]
 8010386:	e7d6      	b.n	8010336 <_free_r+0x26>
 8010388:	6825      	ldr	r5, [r4, #0]
 801038a:	1961      	adds	r1, r4, r5
 801038c:	428b      	cmp	r3, r1
 801038e:	bf04      	itt	eq
 8010390:	6819      	ldreq	r1, [r3, #0]
 8010392:	685b      	ldreq	r3, [r3, #4]
 8010394:	6063      	str	r3, [r4, #4]
 8010396:	bf04      	itt	eq
 8010398:	1949      	addeq	r1, r1, r5
 801039a:	6021      	streq	r1, [r4, #0]
 801039c:	6054      	str	r4, [r2, #4]
 801039e:	e7ca      	b.n	8010336 <_free_r+0x26>
 80103a0:	b003      	add	sp, #12
 80103a2:	bd30      	pop	{r4, r5, pc}
 80103a4:	24000eb8 	.word	0x24000eb8

080103a8 <sbrk_aligned>:
 80103a8:	b570      	push	{r4, r5, r6, lr}
 80103aa:	4e0e      	ldr	r6, [pc, #56]	; (80103e4 <sbrk_aligned+0x3c>)
 80103ac:	460c      	mov	r4, r1
 80103ae:	6831      	ldr	r1, [r6, #0]
 80103b0:	4605      	mov	r5, r0
 80103b2:	b911      	cbnz	r1, 80103ba <sbrk_aligned+0x12>
 80103b4:	f000 f88c 	bl	80104d0 <_sbrk_r>
 80103b8:	6030      	str	r0, [r6, #0]
 80103ba:	4621      	mov	r1, r4
 80103bc:	4628      	mov	r0, r5
 80103be:	f000 f887 	bl	80104d0 <_sbrk_r>
 80103c2:	1c43      	adds	r3, r0, #1
 80103c4:	d00a      	beq.n	80103dc <sbrk_aligned+0x34>
 80103c6:	1cc4      	adds	r4, r0, #3
 80103c8:	f024 0403 	bic.w	r4, r4, #3
 80103cc:	42a0      	cmp	r0, r4
 80103ce:	d007      	beq.n	80103e0 <sbrk_aligned+0x38>
 80103d0:	1a21      	subs	r1, r4, r0
 80103d2:	4628      	mov	r0, r5
 80103d4:	f000 f87c 	bl	80104d0 <_sbrk_r>
 80103d8:	3001      	adds	r0, #1
 80103da:	d101      	bne.n	80103e0 <sbrk_aligned+0x38>
 80103dc:	f04f 34ff 	mov.w	r4, #4294967295
 80103e0:	4620      	mov	r0, r4
 80103e2:	bd70      	pop	{r4, r5, r6, pc}
 80103e4:	24000ebc 	.word	0x24000ebc

080103e8 <_malloc_r>:
 80103e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ec:	1ccd      	adds	r5, r1, #3
 80103ee:	f025 0503 	bic.w	r5, r5, #3
 80103f2:	3508      	adds	r5, #8
 80103f4:	2d0c      	cmp	r5, #12
 80103f6:	bf38      	it	cc
 80103f8:	250c      	movcc	r5, #12
 80103fa:	2d00      	cmp	r5, #0
 80103fc:	4607      	mov	r7, r0
 80103fe:	db01      	blt.n	8010404 <_malloc_r+0x1c>
 8010400:	42a9      	cmp	r1, r5
 8010402:	d905      	bls.n	8010410 <_malloc_r+0x28>
 8010404:	230c      	movs	r3, #12
 8010406:	603b      	str	r3, [r7, #0]
 8010408:	2600      	movs	r6, #0
 801040a:	4630      	mov	r0, r6
 801040c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010410:	4e2e      	ldr	r6, [pc, #184]	; (80104cc <_malloc_r+0xe4>)
 8010412:	f000 f88d 	bl	8010530 <__malloc_lock>
 8010416:	6833      	ldr	r3, [r6, #0]
 8010418:	461c      	mov	r4, r3
 801041a:	bb34      	cbnz	r4, 801046a <_malloc_r+0x82>
 801041c:	4629      	mov	r1, r5
 801041e:	4638      	mov	r0, r7
 8010420:	f7ff ffc2 	bl	80103a8 <sbrk_aligned>
 8010424:	1c43      	adds	r3, r0, #1
 8010426:	4604      	mov	r4, r0
 8010428:	d14d      	bne.n	80104c6 <_malloc_r+0xde>
 801042a:	6834      	ldr	r4, [r6, #0]
 801042c:	4626      	mov	r6, r4
 801042e:	2e00      	cmp	r6, #0
 8010430:	d140      	bne.n	80104b4 <_malloc_r+0xcc>
 8010432:	6823      	ldr	r3, [r4, #0]
 8010434:	4631      	mov	r1, r6
 8010436:	4638      	mov	r0, r7
 8010438:	eb04 0803 	add.w	r8, r4, r3
 801043c:	f000 f848 	bl	80104d0 <_sbrk_r>
 8010440:	4580      	cmp	r8, r0
 8010442:	d13a      	bne.n	80104ba <_malloc_r+0xd2>
 8010444:	6821      	ldr	r1, [r4, #0]
 8010446:	3503      	adds	r5, #3
 8010448:	1a6d      	subs	r5, r5, r1
 801044a:	f025 0503 	bic.w	r5, r5, #3
 801044e:	3508      	adds	r5, #8
 8010450:	2d0c      	cmp	r5, #12
 8010452:	bf38      	it	cc
 8010454:	250c      	movcc	r5, #12
 8010456:	4629      	mov	r1, r5
 8010458:	4638      	mov	r0, r7
 801045a:	f7ff ffa5 	bl	80103a8 <sbrk_aligned>
 801045e:	3001      	adds	r0, #1
 8010460:	d02b      	beq.n	80104ba <_malloc_r+0xd2>
 8010462:	6823      	ldr	r3, [r4, #0]
 8010464:	442b      	add	r3, r5
 8010466:	6023      	str	r3, [r4, #0]
 8010468:	e00e      	b.n	8010488 <_malloc_r+0xa0>
 801046a:	6822      	ldr	r2, [r4, #0]
 801046c:	1b52      	subs	r2, r2, r5
 801046e:	d41e      	bmi.n	80104ae <_malloc_r+0xc6>
 8010470:	2a0b      	cmp	r2, #11
 8010472:	d916      	bls.n	80104a2 <_malloc_r+0xba>
 8010474:	1961      	adds	r1, r4, r5
 8010476:	42a3      	cmp	r3, r4
 8010478:	6025      	str	r5, [r4, #0]
 801047a:	bf18      	it	ne
 801047c:	6059      	strne	r1, [r3, #4]
 801047e:	6863      	ldr	r3, [r4, #4]
 8010480:	bf08      	it	eq
 8010482:	6031      	streq	r1, [r6, #0]
 8010484:	5162      	str	r2, [r4, r5]
 8010486:	604b      	str	r3, [r1, #4]
 8010488:	4638      	mov	r0, r7
 801048a:	f104 060b 	add.w	r6, r4, #11
 801048e:	f000 f855 	bl	801053c <__malloc_unlock>
 8010492:	f026 0607 	bic.w	r6, r6, #7
 8010496:	1d23      	adds	r3, r4, #4
 8010498:	1af2      	subs	r2, r6, r3
 801049a:	d0b6      	beq.n	801040a <_malloc_r+0x22>
 801049c:	1b9b      	subs	r3, r3, r6
 801049e:	50a3      	str	r3, [r4, r2]
 80104a0:	e7b3      	b.n	801040a <_malloc_r+0x22>
 80104a2:	6862      	ldr	r2, [r4, #4]
 80104a4:	42a3      	cmp	r3, r4
 80104a6:	bf0c      	ite	eq
 80104a8:	6032      	streq	r2, [r6, #0]
 80104aa:	605a      	strne	r2, [r3, #4]
 80104ac:	e7ec      	b.n	8010488 <_malloc_r+0xa0>
 80104ae:	4623      	mov	r3, r4
 80104b0:	6864      	ldr	r4, [r4, #4]
 80104b2:	e7b2      	b.n	801041a <_malloc_r+0x32>
 80104b4:	4634      	mov	r4, r6
 80104b6:	6876      	ldr	r6, [r6, #4]
 80104b8:	e7b9      	b.n	801042e <_malloc_r+0x46>
 80104ba:	230c      	movs	r3, #12
 80104bc:	603b      	str	r3, [r7, #0]
 80104be:	4638      	mov	r0, r7
 80104c0:	f000 f83c 	bl	801053c <__malloc_unlock>
 80104c4:	e7a1      	b.n	801040a <_malloc_r+0x22>
 80104c6:	6025      	str	r5, [r4, #0]
 80104c8:	e7de      	b.n	8010488 <_malloc_r+0xa0>
 80104ca:	bf00      	nop
 80104cc:	24000eb8 	.word	0x24000eb8

080104d0 <_sbrk_r>:
 80104d0:	b538      	push	{r3, r4, r5, lr}
 80104d2:	4d06      	ldr	r5, [pc, #24]	; (80104ec <_sbrk_r+0x1c>)
 80104d4:	2300      	movs	r3, #0
 80104d6:	4604      	mov	r4, r0
 80104d8:	4608      	mov	r0, r1
 80104da:	602b      	str	r3, [r5, #0]
 80104dc:	f7f6 ffee 	bl	80074bc <_sbrk>
 80104e0:	1c43      	adds	r3, r0, #1
 80104e2:	d102      	bne.n	80104ea <_sbrk_r+0x1a>
 80104e4:	682b      	ldr	r3, [r5, #0]
 80104e6:	b103      	cbz	r3, 80104ea <_sbrk_r+0x1a>
 80104e8:	6023      	str	r3, [r4, #0]
 80104ea:	bd38      	pop	{r3, r4, r5, pc}
 80104ec:	24000ec0 	.word	0x24000ec0

080104f0 <siprintf>:
 80104f0:	b40e      	push	{r1, r2, r3}
 80104f2:	b500      	push	{lr}
 80104f4:	b09c      	sub	sp, #112	; 0x70
 80104f6:	ab1d      	add	r3, sp, #116	; 0x74
 80104f8:	9002      	str	r0, [sp, #8]
 80104fa:	9006      	str	r0, [sp, #24]
 80104fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010500:	4809      	ldr	r0, [pc, #36]	; (8010528 <siprintf+0x38>)
 8010502:	9107      	str	r1, [sp, #28]
 8010504:	9104      	str	r1, [sp, #16]
 8010506:	4909      	ldr	r1, [pc, #36]	; (801052c <siprintf+0x3c>)
 8010508:	f853 2b04 	ldr.w	r2, [r3], #4
 801050c:	9105      	str	r1, [sp, #20]
 801050e:	6800      	ldr	r0, [r0, #0]
 8010510:	9301      	str	r3, [sp, #4]
 8010512:	a902      	add	r1, sp, #8
 8010514:	f000 f874 	bl	8010600 <_svfiprintf_r>
 8010518:	9b02      	ldr	r3, [sp, #8]
 801051a:	2200      	movs	r2, #0
 801051c:	701a      	strb	r2, [r3, #0]
 801051e:	b01c      	add	sp, #112	; 0x70
 8010520:	f85d eb04 	ldr.w	lr, [sp], #4
 8010524:	b003      	add	sp, #12
 8010526:	4770      	bx	lr
 8010528:	24000024 	.word	0x24000024
 801052c:	ffff0208 	.word	0xffff0208

08010530 <__malloc_lock>:
 8010530:	4801      	ldr	r0, [pc, #4]	; (8010538 <__malloc_lock+0x8>)
 8010532:	f000 baf9 	b.w	8010b28 <__retarget_lock_acquire_recursive>
 8010536:	bf00      	nop
 8010538:	24000ec4 	.word	0x24000ec4

0801053c <__malloc_unlock>:
 801053c:	4801      	ldr	r0, [pc, #4]	; (8010544 <__malloc_unlock+0x8>)
 801053e:	f000 baf4 	b.w	8010b2a <__retarget_lock_release_recursive>
 8010542:	bf00      	nop
 8010544:	24000ec4 	.word	0x24000ec4

08010548 <__ssputs_r>:
 8010548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801054c:	688e      	ldr	r6, [r1, #8]
 801054e:	429e      	cmp	r6, r3
 8010550:	4682      	mov	sl, r0
 8010552:	460c      	mov	r4, r1
 8010554:	4690      	mov	r8, r2
 8010556:	461f      	mov	r7, r3
 8010558:	d838      	bhi.n	80105cc <__ssputs_r+0x84>
 801055a:	898a      	ldrh	r2, [r1, #12]
 801055c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010560:	d032      	beq.n	80105c8 <__ssputs_r+0x80>
 8010562:	6825      	ldr	r5, [r4, #0]
 8010564:	6909      	ldr	r1, [r1, #16]
 8010566:	eba5 0901 	sub.w	r9, r5, r1
 801056a:	6965      	ldr	r5, [r4, #20]
 801056c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010574:	3301      	adds	r3, #1
 8010576:	444b      	add	r3, r9
 8010578:	106d      	asrs	r5, r5, #1
 801057a:	429d      	cmp	r5, r3
 801057c:	bf38      	it	cc
 801057e:	461d      	movcc	r5, r3
 8010580:	0553      	lsls	r3, r2, #21
 8010582:	d531      	bpl.n	80105e8 <__ssputs_r+0xa0>
 8010584:	4629      	mov	r1, r5
 8010586:	f7ff ff2f 	bl	80103e8 <_malloc_r>
 801058a:	4606      	mov	r6, r0
 801058c:	b950      	cbnz	r0, 80105a4 <__ssputs_r+0x5c>
 801058e:	230c      	movs	r3, #12
 8010590:	f8ca 3000 	str.w	r3, [sl]
 8010594:	89a3      	ldrh	r3, [r4, #12]
 8010596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801059a:	81a3      	strh	r3, [r4, #12]
 801059c:	f04f 30ff 	mov.w	r0, #4294967295
 80105a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80105a4:	6921      	ldr	r1, [r4, #16]
 80105a6:	464a      	mov	r2, r9
 80105a8:	f000 fac0 	bl	8010b2c <memcpy>
 80105ac:	89a3      	ldrh	r3, [r4, #12]
 80105ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80105b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105b6:	81a3      	strh	r3, [r4, #12]
 80105b8:	6126      	str	r6, [r4, #16]
 80105ba:	6165      	str	r5, [r4, #20]
 80105bc:	444e      	add	r6, r9
 80105be:	eba5 0509 	sub.w	r5, r5, r9
 80105c2:	6026      	str	r6, [r4, #0]
 80105c4:	60a5      	str	r5, [r4, #8]
 80105c6:	463e      	mov	r6, r7
 80105c8:	42be      	cmp	r6, r7
 80105ca:	d900      	bls.n	80105ce <__ssputs_r+0x86>
 80105cc:	463e      	mov	r6, r7
 80105ce:	6820      	ldr	r0, [r4, #0]
 80105d0:	4632      	mov	r2, r6
 80105d2:	4641      	mov	r1, r8
 80105d4:	f000 fab8 	bl	8010b48 <memmove>
 80105d8:	68a3      	ldr	r3, [r4, #8]
 80105da:	1b9b      	subs	r3, r3, r6
 80105dc:	60a3      	str	r3, [r4, #8]
 80105de:	6823      	ldr	r3, [r4, #0]
 80105e0:	4433      	add	r3, r6
 80105e2:	6023      	str	r3, [r4, #0]
 80105e4:	2000      	movs	r0, #0
 80105e6:	e7db      	b.n	80105a0 <__ssputs_r+0x58>
 80105e8:	462a      	mov	r2, r5
 80105ea:	f000 fac7 	bl	8010b7c <_realloc_r>
 80105ee:	4606      	mov	r6, r0
 80105f0:	2800      	cmp	r0, #0
 80105f2:	d1e1      	bne.n	80105b8 <__ssputs_r+0x70>
 80105f4:	6921      	ldr	r1, [r4, #16]
 80105f6:	4650      	mov	r0, sl
 80105f8:	f7ff fe8a 	bl	8010310 <_free_r>
 80105fc:	e7c7      	b.n	801058e <__ssputs_r+0x46>
	...

08010600 <_svfiprintf_r>:
 8010600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010604:	4698      	mov	r8, r3
 8010606:	898b      	ldrh	r3, [r1, #12]
 8010608:	061b      	lsls	r3, r3, #24
 801060a:	b09d      	sub	sp, #116	; 0x74
 801060c:	4607      	mov	r7, r0
 801060e:	460d      	mov	r5, r1
 8010610:	4614      	mov	r4, r2
 8010612:	d50e      	bpl.n	8010632 <_svfiprintf_r+0x32>
 8010614:	690b      	ldr	r3, [r1, #16]
 8010616:	b963      	cbnz	r3, 8010632 <_svfiprintf_r+0x32>
 8010618:	2140      	movs	r1, #64	; 0x40
 801061a:	f7ff fee5 	bl	80103e8 <_malloc_r>
 801061e:	6028      	str	r0, [r5, #0]
 8010620:	6128      	str	r0, [r5, #16]
 8010622:	b920      	cbnz	r0, 801062e <_svfiprintf_r+0x2e>
 8010624:	230c      	movs	r3, #12
 8010626:	603b      	str	r3, [r7, #0]
 8010628:	f04f 30ff 	mov.w	r0, #4294967295
 801062c:	e0d1      	b.n	80107d2 <_svfiprintf_r+0x1d2>
 801062e:	2340      	movs	r3, #64	; 0x40
 8010630:	616b      	str	r3, [r5, #20]
 8010632:	2300      	movs	r3, #0
 8010634:	9309      	str	r3, [sp, #36]	; 0x24
 8010636:	2320      	movs	r3, #32
 8010638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801063c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010640:	2330      	movs	r3, #48	; 0x30
 8010642:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80107ec <_svfiprintf_r+0x1ec>
 8010646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801064a:	f04f 0901 	mov.w	r9, #1
 801064e:	4623      	mov	r3, r4
 8010650:	469a      	mov	sl, r3
 8010652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010656:	b10a      	cbz	r2, 801065c <_svfiprintf_r+0x5c>
 8010658:	2a25      	cmp	r2, #37	; 0x25
 801065a:	d1f9      	bne.n	8010650 <_svfiprintf_r+0x50>
 801065c:	ebba 0b04 	subs.w	fp, sl, r4
 8010660:	d00b      	beq.n	801067a <_svfiprintf_r+0x7a>
 8010662:	465b      	mov	r3, fp
 8010664:	4622      	mov	r2, r4
 8010666:	4629      	mov	r1, r5
 8010668:	4638      	mov	r0, r7
 801066a:	f7ff ff6d 	bl	8010548 <__ssputs_r>
 801066e:	3001      	adds	r0, #1
 8010670:	f000 80aa 	beq.w	80107c8 <_svfiprintf_r+0x1c8>
 8010674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010676:	445a      	add	r2, fp
 8010678:	9209      	str	r2, [sp, #36]	; 0x24
 801067a:	f89a 3000 	ldrb.w	r3, [sl]
 801067e:	2b00      	cmp	r3, #0
 8010680:	f000 80a2 	beq.w	80107c8 <_svfiprintf_r+0x1c8>
 8010684:	2300      	movs	r3, #0
 8010686:	f04f 32ff 	mov.w	r2, #4294967295
 801068a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801068e:	f10a 0a01 	add.w	sl, sl, #1
 8010692:	9304      	str	r3, [sp, #16]
 8010694:	9307      	str	r3, [sp, #28]
 8010696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801069a:	931a      	str	r3, [sp, #104]	; 0x68
 801069c:	4654      	mov	r4, sl
 801069e:	2205      	movs	r2, #5
 80106a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106a4:	4851      	ldr	r0, [pc, #324]	; (80107ec <_svfiprintf_r+0x1ec>)
 80106a6:	f7ef fe1b 	bl	80002e0 <memchr>
 80106aa:	9a04      	ldr	r2, [sp, #16]
 80106ac:	b9d8      	cbnz	r0, 80106e6 <_svfiprintf_r+0xe6>
 80106ae:	06d0      	lsls	r0, r2, #27
 80106b0:	bf44      	itt	mi
 80106b2:	2320      	movmi	r3, #32
 80106b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106b8:	0711      	lsls	r1, r2, #28
 80106ba:	bf44      	itt	mi
 80106bc:	232b      	movmi	r3, #43	; 0x2b
 80106be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106c2:	f89a 3000 	ldrb.w	r3, [sl]
 80106c6:	2b2a      	cmp	r3, #42	; 0x2a
 80106c8:	d015      	beq.n	80106f6 <_svfiprintf_r+0xf6>
 80106ca:	9a07      	ldr	r2, [sp, #28]
 80106cc:	4654      	mov	r4, sl
 80106ce:	2000      	movs	r0, #0
 80106d0:	f04f 0c0a 	mov.w	ip, #10
 80106d4:	4621      	mov	r1, r4
 80106d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80106da:	3b30      	subs	r3, #48	; 0x30
 80106dc:	2b09      	cmp	r3, #9
 80106de:	d94e      	bls.n	801077e <_svfiprintf_r+0x17e>
 80106e0:	b1b0      	cbz	r0, 8010710 <_svfiprintf_r+0x110>
 80106e2:	9207      	str	r2, [sp, #28]
 80106e4:	e014      	b.n	8010710 <_svfiprintf_r+0x110>
 80106e6:	eba0 0308 	sub.w	r3, r0, r8
 80106ea:	fa09 f303 	lsl.w	r3, r9, r3
 80106ee:	4313      	orrs	r3, r2
 80106f0:	9304      	str	r3, [sp, #16]
 80106f2:	46a2      	mov	sl, r4
 80106f4:	e7d2      	b.n	801069c <_svfiprintf_r+0x9c>
 80106f6:	9b03      	ldr	r3, [sp, #12]
 80106f8:	1d19      	adds	r1, r3, #4
 80106fa:	681b      	ldr	r3, [r3, #0]
 80106fc:	9103      	str	r1, [sp, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	bfbb      	ittet	lt
 8010702:	425b      	neglt	r3, r3
 8010704:	f042 0202 	orrlt.w	r2, r2, #2
 8010708:	9307      	strge	r3, [sp, #28]
 801070a:	9307      	strlt	r3, [sp, #28]
 801070c:	bfb8      	it	lt
 801070e:	9204      	strlt	r2, [sp, #16]
 8010710:	7823      	ldrb	r3, [r4, #0]
 8010712:	2b2e      	cmp	r3, #46	; 0x2e
 8010714:	d10c      	bne.n	8010730 <_svfiprintf_r+0x130>
 8010716:	7863      	ldrb	r3, [r4, #1]
 8010718:	2b2a      	cmp	r3, #42	; 0x2a
 801071a:	d135      	bne.n	8010788 <_svfiprintf_r+0x188>
 801071c:	9b03      	ldr	r3, [sp, #12]
 801071e:	1d1a      	adds	r2, r3, #4
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	9203      	str	r2, [sp, #12]
 8010724:	2b00      	cmp	r3, #0
 8010726:	bfb8      	it	lt
 8010728:	f04f 33ff 	movlt.w	r3, #4294967295
 801072c:	3402      	adds	r4, #2
 801072e:	9305      	str	r3, [sp, #20]
 8010730:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80107fc <_svfiprintf_r+0x1fc>
 8010734:	7821      	ldrb	r1, [r4, #0]
 8010736:	2203      	movs	r2, #3
 8010738:	4650      	mov	r0, sl
 801073a:	f7ef fdd1 	bl	80002e0 <memchr>
 801073e:	b140      	cbz	r0, 8010752 <_svfiprintf_r+0x152>
 8010740:	2340      	movs	r3, #64	; 0x40
 8010742:	eba0 000a 	sub.w	r0, r0, sl
 8010746:	fa03 f000 	lsl.w	r0, r3, r0
 801074a:	9b04      	ldr	r3, [sp, #16]
 801074c:	4303      	orrs	r3, r0
 801074e:	3401      	adds	r4, #1
 8010750:	9304      	str	r3, [sp, #16]
 8010752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010756:	4826      	ldr	r0, [pc, #152]	; (80107f0 <_svfiprintf_r+0x1f0>)
 8010758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801075c:	2206      	movs	r2, #6
 801075e:	f7ef fdbf 	bl	80002e0 <memchr>
 8010762:	2800      	cmp	r0, #0
 8010764:	d038      	beq.n	80107d8 <_svfiprintf_r+0x1d8>
 8010766:	4b23      	ldr	r3, [pc, #140]	; (80107f4 <_svfiprintf_r+0x1f4>)
 8010768:	bb1b      	cbnz	r3, 80107b2 <_svfiprintf_r+0x1b2>
 801076a:	9b03      	ldr	r3, [sp, #12]
 801076c:	3307      	adds	r3, #7
 801076e:	f023 0307 	bic.w	r3, r3, #7
 8010772:	3308      	adds	r3, #8
 8010774:	9303      	str	r3, [sp, #12]
 8010776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010778:	4433      	add	r3, r6
 801077a:	9309      	str	r3, [sp, #36]	; 0x24
 801077c:	e767      	b.n	801064e <_svfiprintf_r+0x4e>
 801077e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010782:	460c      	mov	r4, r1
 8010784:	2001      	movs	r0, #1
 8010786:	e7a5      	b.n	80106d4 <_svfiprintf_r+0xd4>
 8010788:	2300      	movs	r3, #0
 801078a:	3401      	adds	r4, #1
 801078c:	9305      	str	r3, [sp, #20]
 801078e:	4619      	mov	r1, r3
 8010790:	f04f 0c0a 	mov.w	ip, #10
 8010794:	4620      	mov	r0, r4
 8010796:	f810 2b01 	ldrb.w	r2, [r0], #1
 801079a:	3a30      	subs	r2, #48	; 0x30
 801079c:	2a09      	cmp	r2, #9
 801079e:	d903      	bls.n	80107a8 <_svfiprintf_r+0x1a8>
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d0c5      	beq.n	8010730 <_svfiprintf_r+0x130>
 80107a4:	9105      	str	r1, [sp, #20]
 80107a6:	e7c3      	b.n	8010730 <_svfiprintf_r+0x130>
 80107a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80107ac:	4604      	mov	r4, r0
 80107ae:	2301      	movs	r3, #1
 80107b0:	e7f0      	b.n	8010794 <_svfiprintf_r+0x194>
 80107b2:	ab03      	add	r3, sp, #12
 80107b4:	9300      	str	r3, [sp, #0]
 80107b6:	462a      	mov	r2, r5
 80107b8:	4b0f      	ldr	r3, [pc, #60]	; (80107f8 <_svfiprintf_r+0x1f8>)
 80107ba:	a904      	add	r1, sp, #16
 80107bc:	4638      	mov	r0, r7
 80107be:	f3af 8000 	nop.w
 80107c2:	1c42      	adds	r2, r0, #1
 80107c4:	4606      	mov	r6, r0
 80107c6:	d1d6      	bne.n	8010776 <_svfiprintf_r+0x176>
 80107c8:	89ab      	ldrh	r3, [r5, #12]
 80107ca:	065b      	lsls	r3, r3, #25
 80107cc:	f53f af2c 	bmi.w	8010628 <_svfiprintf_r+0x28>
 80107d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80107d2:	b01d      	add	sp, #116	; 0x74
 80107d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107d8:	ab03      	add	r3, sp, #12
 80107da:	9300      	str	r3, [sp, #0]
 80107dc:	462a      	mov	r2, r5
 80107de:	4b06      	ldr	r3, [pc, #24]	; (80107f8 <_svfiprintf_r+0x1f8>)
 80107e0:	a904      	add	r1, sp, #16
 80107e2:	4638      	mov	r0, r7
 80107e4:	f000 f87a 	bl	80108dc <_printf_i>
 80107e8:	e7eb      	b.n	80107c2 <_svfiprintf_r+0x1c2>
 80107ea:	bf00      	nop
 80107ec:	08012598 	.word	0x08012598
 80107f0:	080125a2 	.word	0x080125a2
 80107f4:	00000000 	.word	0x00000000
 80107f8:	08010549 	.word	0x08010549
 80107fc:	0801259e 	.word	0x0801259e

08010800 <_printf_common>:
 8010800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010804:	4616      	mov	r6, r2
 8010806:	4699      	mov	r9, r3
 8010808:	688a      	ldr	r2, [r1, #8]
 801080a:	690b      	ldr	r3, [r1, #16]
 801080c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010810:	4293      	cmp	r3, r2
 8010812:	bfb8      	it	lt
 8010814:	4613      	movlt	r3, r2
 8010816:	6033      	str	r3, [r6, #0]
 8010818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801081c:	4607      	mov	r7, r0
 801081e:	460c      	mov	r4, r1
 8010820:	b10a      	cbz	r2, 8010826 <_printf_common+0x26>
 8010822:	3301      	adds	r3, #1
 8010824:	6033      	str	r3, [r6, #0]
 8010826:	6823      	ldr	r3, [r4, #0]
 8010828:	0699      	lsls	r1, r3, #26
 801082a:	bf42      	ittt	mi
 801082c:	6833      	ldrmi	r3, [r6, #0]
 801082e:	3302      	addmi	r3, #2
 8010830:	6033      	strmi	r3, [r6, #0]
 8010832:	6825      	ldr	r5, [r4, #0]
 8010834:	f015 0506 	ands.w	r5, r5, #6
 8010838:	d106      	bne.n	8010848 <_printf_common+0x48>
 801083a:	f104 0a19 	add.w	sl, r4, #25
 801083e:	68e3      	ldr	r3, [r4, #12]
 8010840:	6832      	ldr	r2, [r6, #0]
 8010842:	1a9b      	subs	r3, r3, r2
 8010844:	42ab      	cmp	r3, r5
 8010846:	dc26      	bgt.n	8010896 <_printf_common+0x96>
 8010848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801084c:	1e13      	subs	r3, r2, #0
 801084e:	6822      	ldr	r2, [r4, #0]
 8010850:	bf18      	it	ne
 8010852:	2301      	movne	r3, #1
 8010854:	0692      	lsls	r2, r2, #26
 8010856:	d42b      	bmi.n	80108b0 <_printf_common+0xb0>
 8010858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801085c:	4649      	mov	r1, r9
 801085e:	4638      	mov	r0, r7
 8010860:	47c0      	blx	r8
 8010862:	3001      	adds	r0, #1
 8010864:	d01e      	beq.n	80108a4 <_printf_common+0xa4>
 8010866:	6823      	ldr	r3, [r4, #0]
 8010868:	68e5      	ldr	r5, [r4, #12]
 801086a:	6832      	ldr	r2, [r6, #0]
 801086c:	f003 0306 	and.w	r3, r3, #6
 8010870:	2b04      	cmp	r3, #4
 8010872:	bf08      	it	eq
 8010874:	1aad      	subeq	r5, r5, r2
 8010876:	68a3      	ldr	r3, [r4, #8]
 8010878:	6922      	ldr	r2, [r4, #16]
 801087a:	bf0c      	ite	eq
 801087c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010880:	2500      	movne	r5, #0
 8010882:	4293      	cmp	r3, r2
 8010884:	bfc4      	itt	gt
 8010886:	1a9b      	subgt	r3, r3, r2
 8010888:	18ed      	addgt	r5, r5, r3
 801088a:	2600      	movs	r6, #0
 801088c:	341a      	adds	r4, #26
 801088e:	42b5      	cmp	r5, r6
 8010890:	d11a      	bne.n	80108c8 <_printf_common+0xc8>
 8010892:	2000      	movs	r0, #0
 8010894:	e008      	b.n	80108a8 <_printf_common+0xa8>
 8010896:	2301      	movs	r3, #1
 8010898:	4652      	mov	r2, sl
 801089a:	4649      	mov	r1, r9
 801089c:	4638      	mov	r0, r7
 801089e:	47c0      	blx	r8
 80108a0:	3001      	adds	r0, #1
 80108a2:	d103      	bne.n	80108ac <_printf_common+0xac>
 80108a4:	f04f 30ff 	mov.w	r0, #4294967295
 80108a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108ac:	3501      	adds	r5, #1
 80108ae:	e7c6      	b.n	801083e <_printf_common+0x3e>
 80108b0:	18e1      	adds	r1, r4, r3
 80108b2:	1c5a      	adds	r2, r3, #1
 80108b4:	2030      	movs	r0, #48	; 0x30
 80108b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80108ba:	4422      	add	r2, r4
 80108bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80108c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80108c4:	3302      	adds	r3, #2
 80108c6:	e7c7      	b.n	8010858 <_printf_common+0x58>
 80108c8:	2301      	movs	r3, #1
 80108ca:	4622      	mov	r2, r4
 80108cc:	4649      	mov	r1, r9
 80108ce:	4638      	mov	r0, r7
 80108d0:	47c0      	blx	r8
 80108d2:	3001      	adds	r0, #1
 80108d4:	d0e6      	beq.n	80108a4 <_printf_common+0xa4>
 80108d6:	3601      	adds	r6, #1
 80108d8:	e7d9      	b.n	801088e <_printf_common+0x8e>
	...

080108dc <_printf_i>:
 80108dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108e0:	7e0f      	ldrb	r7, [r1, #24]
 80108e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80108e4:	2f78      	cmp	r7, #120	; 0x78
 80108e6:	4691      	mov	r9, r2
 80108e8:	4680      	mov	r8, r0
 80108ea:	460c      	mov	r4, r1
 80108ec:	469a      	mov	sl, r3
 80108ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80108f2:	d807      	bhi.n	8010904 <_printf_i+0x28>
 80108f4:	2f62      	cmp	r7, #98	; 0x62
 80108f6:	d80a      	bhi.n	801090e <_printf_i+0x32>
 80108f8:	2f00      	cmp	r7, #0
 80108fa:	f000 80d8 	beq.w	8010aae <_printf_i+0x1d2>
 80108fe:	2f58      	cmp	r7, #88	; 0x58
 8010900:	f000 80a3 	beq.w	8010a4a <_printf_i+0x16e>
 8010904:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801090c:	e03a      	b.n	8010984 <_printf_i+0xa8>
 801090e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010912:	2b15      	cmp	r3, #21
 8010914:	d8f6      	bhi.n	8010904 <_printf_i+0x28>
 8010916:	a101      	add	r1, pc, #4	; (adr r1, 801091c <_printf_i+0x40>)
 8010918:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801091c:	08010975 	.word	0x08010975
 8010920:	08010989 	.word	0x08010989
 8010924:	08010905 	.word	0x08010905
 8010928:	08010905 	.word	0x08010905
 801092c:	08010905 	.word	0x08010905
 8010930:	08010905 	.word	0x08010905
 8010934:	08010989 	.word	0x08010989
 8010938:	08010905 	.word	0x08010905
 801093c:	08010905 	.word	0x08010905
 8010940:	08010905 	.word	0x08010905
 8010944:	08010905 	.word	0x08010905
 8010948:	08010a95 	.word	0x08010a95
 801094c:	080109b9 	.word	0x080109b9
 8010950:	08010a77 	.word	0x08010a77
 8010954:	08010905 	.word	0x08010905
 8010958:	08010905 	.word	0x08010905
 801095c:	08010ab7 	.word	0x08010ab7
 8010960:	08010905 	.word	0x08010905
 8010964:	080109b9 	.word	0x080109b9
 8010968:	08010905 	.word	0x08010905
 801096c:	08010905 	.word	0x08010905
 8010970:	08010a7f 	.word	0x08010a7f
 8010974:	682b      	ldr	r3, [r5, #0]
 8010976:	1d1a      	adds	r2, r3, #4
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	602a      	str	r2, [r5, #0]
 801097c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010984:	2301      	movs	r3, #1
 8010986:	e0a3      	b.n	8010ad0 <_printf_i+0x1f4>
 8010988:	6820      	ldr	r0, [r4, #0]
 801098a:	6829      	ldr	r1, [r5, #0]
 801098c:	0606      	lsls	r6, r0, #24
 801098e:	f101 0304 	add.w	r3, r1, #4
 8010992:	d50a      	bpl.n	80109aa <_printf_i+0xce>
 8010994:	680e      	ldr	r6, [r1, #0]
 8010996:	602b      	str	r3, [r5, #0]
 8010998:	2e00      	cmp	r6, #0
 801099a:	da03      	bge.n	80109a4 <_printf_i+0xc8>
 801099c:	232d      	movs	r3, #45	; 0x2d
 801099e:	4276      	negs	r6, r6
 80109a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109a4:	485e      	ldr	r0, [pc, #376]	; (8010b20 <_printf_i+0x244>)
 80109a6:	230a      	movs	r3, #10
 80109a8:	e019      	b.n	80109de <_printf_i+0x102>
 80109aa:	680e      	ldr	r6, [r1, #0]
 80109ac:	602b      	str	r3, [r5, #0]
 80109ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80109b2:	bf18      	it	ne
 80109b4:	b236      	sxthne	r6, r6
 80109b6:	e7ef      	b.n	8010998 <_printf_i+0xbc>
 80109b8:	682b      	ldr	r3, [r5, #0]
 80109ba:	6820      	ldr	r0, [r4, #0]
 80109bc:	1d19      	adds	r1, r3, #4
 80109be:	6029      	str	r1, [r5, #0]
 80109c0:	0601      	lsls	r1, r0, #24
 80109c2:	d501      	bpl.n	80109c8 <_printf_i+0xec>
 80109c4:	681e      	ldr	r6, [r3, #0]
 80109c6:	e002      	b.n	80109ce <_printf_i+0xf2>
 80109c8:	0646      	lsls	r6, r0, #25
 80109ca:	d5fb      	bpl.n	80109c4 <_printf_i+0xe8>
 80109cc:	881e      	ldrh	r6, [r3, #0]
 80109ce:	4854      	ldr	r0, [pc, #336]	; (8010b20 <_printf_i+0x244>)
 80109d0:	2f6f      	cmp	r7, #111	; 0x6f
 80109d2:	bf0c      	ite	eq
 80109d4:	2308      	moveq	r3, #8
 80109d6:	230a      	movne	r3, #10
 80109d8:	2100      	movs	r1, #0
 80109da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80109de:	6865      	ldr	r5, [r4, #4]
 80109e0:	60a5      	str	r5, [r4, #8]
 80109e2:	2d00      	cmp	r5, #0
 80109e4:	bfa2      	ittt	ge
 80109e6:	6821      	ldrge	r1, [r4, #0]
 80109e8:	f021 0104 	bicge.w	r1, r1, #4
 80109ec:	6021      	strge	r1, [r4, #0]
 80109ee:	b90e      	cbnz	r6, 80109f4 <_printf_i+0x118>
 80109f0:	2d00      	cmp	r5, #0
 80109f2:	d04d      	beq.n	8010a90 <_printf_i+0x1b4>
 80109f4:	4615      	mov	r5, r2
 80109f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80109fa:	fb03 6711 	mls	r7, r3, r1, r6
 80109fe:	5dc7      	ldrb	r7, [r0, r7]
 8010a00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010a04:	4637      	mov	r7, r6
 8010a06:	42bb      	cmp	r3, r7
 8010a08:	460e      	mov	r6, r1
 8010a0a:	d9f4      	bls.n	80109f6 <_printf_i+0x11a>
 8010a0c:	2b08      	cmp	r3, #8
 8010a0e:	d10b      	bne.n	8010a28 <_printf_i+0x14c>
 8010a10:	6823      	ldr	r3, [r4, #0]
 8010a12:	07de      	lsls	r6, r3, #31
 8010a14:	d508      	bpl.n	8010a28 <_printf_i+0x14c>
 8010a16:	6923      	ldr	r3, [r4, #16]
 8010a18:	6861      	ldr	r1, [r4, #4]
 8010a1a:	4299      	cmp	r1, r3
 8010a1c:	bfde      	ittt	le
 8010a1e:	2330      	movle	r3, #48	; 0x30
 8010a20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a28:	1b52      	subs	r2, r2, r5
 8010a2a:	6122      	str	r2, [r4, #16]
 8010a2c:	f8cd a000 	str.w	sl, [sp]
 8010a30:	464b      	mov	r3, r9
 8010a32:	aa03      	add	r2, sp, #12
 8010a34:	4621      	mov	r1, r4
 8010a36:	4640      	mov	r0, r8
 8010a38:	f7ff fee2 	bl	8010800 <_printf_common>
 8010a3c:	3001      	adds	r0, #1
 8010a3e:	d14c      	bne.n	8010ada <_printf_i+0x1fe>
 8010a40:	f04f 30ff 	mov.w	r0, #4294967295
 8010a44:	b004      	add	sp, #16
 8010a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a4a:	4835      	ldr	r0, [pc, #212]	; (8010b20 <_printf_i+0x244>)
 8010a4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010a50:	6829      	ldr	r1, [r5, #0]
 8010a52:	6823      	ldr	r3, [r4, #0]
 8010a54:	f851 6b04 	ldr.w	r6, [r1], #4
 8010a58:	6029      	str	r1, [r5, #0]
 8010a5a:	061d      	lsls	r5, r3, #24
 8010a5c:	d514      	bpl.n	8010a88 <_printf_i+0x1ac>
 8010a5e:	07df      	lsls	r7, r3, #31
 8010a60:	bf44      	itt	mi
 8010a62:	f043 0320 	orrmi.w	r3, r3, #32
 8010a66:	6023      	strmi	r3, [r4, #0]
 8010a68:	b91e      	cbnz	r6, 8010a72 <_printf_i+0x196>
 8010a6a:	6823      	ldr	r3, [r4, #0]
 8010a6c:	f023 0320 	bic.w	r3, r3, #32
 8010a70:	6023      	str	r3, [r4, #0]
 8010a72:	2310      	movs	r3, #16
 8010a74:	e7b0      	b.n	80109d8 <_printf_i+0xfc>
 8010a76:	6823      	ldr	r3, [r4, #0]
 8010a78:	f043 0320 	orr.w	r3, r3, #32
 8010a7c:	6023      	str	r3, [r4, #0]
 8010a7e:	2378      	movs	r3, #120	; 0x78
 8010a80:	4828      	ldr	r0, [pc, #160]	; (8010b24 <_printf_i+0x248>)
 8010a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010a86:	e7e3      	b.n	8010a50 <_printf_i+0x174>
 8010a88:	0659      	lsls	r1, r3, #25
 8010a8a:	bf48      	it	mi
 8010a8c:	b2b6      	uxthmi	r6, r6
 8010a8e:	e7e6      	b.n	8010a5e <_printf_i+0x182>
 8010a90:	4615      	mov	r5, r2
 8010a92:	e7bb      	b.n	8010a0c <_printf_i+0x130>
 8010a94:	682b      	ldr	r3, [r5, #0]
 8010a96:	6826      	ldr	r6, [r4, #0]
 8010a98:	6961      	ldr	r1, [r4, #20]
 8010a9a:	1d18      	adds	r0, r3, #4
 8010a9c:	6028      	str	r0, [r5, #0]
 8010a9e:	0635      	lsls	r5, r6, #24
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	d501      	bpl.n	8010aa8 <_printf_i+0x1cc>
 8010aa4:	6019      	str	r1, [r3, #0]
 8010aa6:	e002      	b.n	8010aae <_printf_i+0x1d2>
 8010aa8:	0670      	lsls	r0, r6, #25
 8010aaa:	d5fb      	bpl.n	8010aa4 <_printf_i+0x1c8>
 8010aac:	8019      	strh	r1, [r3, #0]
 8010aae:	2300      	movs	r3, #0
 8010ab0:	6123      	str	r3, [r4, #16]
 8010ab2:	4615      	mov	r5, r2
 8010ab4:	e7ba      	b.n	8010a2c <_printf_i+0x150>
 8010ab6:	682b      	ldr	r3, [r5, #0]
 8010ab8:	1d1a      	adds	r2, r3, #4
 8010aba:	602a      	str	r2, [r5, #0]
 8010abc:	681d      	ldr	r5, [r3, #0]
 8010abe:	6862      	ldr	r2, [r4, #4]
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	4628      	mov	r0, r5
 8010ac4:	f7ef fc0c 	bl	80002e0 <memchr>
 8010ac8:	b108      	cbz	r0, 8010ace <_printf_i+0x1f2>
 8010aca:	1b40      	subs	r0, r0, r5
 8010acc:	6060      	str	r0, [r4, #4]
 8010ace:	6863      	ldr	r3, [r4, #4]
 8010ad0:	6123      	str	r3, [r4, #16]
 8010ad2:	2300      	movs	r3, #0
 8010ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010ad8:	e7a8      	b.n	8010a2c <_printf_i+0x150>
 8010ada:	6923      	ldr	r3, [r4, #16]
 8010adc:	462a      	mov	r2, r5
 8010ade:	4649      	mov	r1, r9
 8010ae0:	4640      	mov	r0, r8
 8010ae2:	47d0      	blx	sl
 8010ae4:	3001      	adds	r0, #1
 8010ae6:	d0ab      	beq.n	8010a40 <_printf_i+0x164>
 8010ae8:	6823      	ldr	r3, [r4, #0]
 8010aea:	079b      	lsls	r3, r3, #30
 8010aec:	d413      	bmi.n	8010b16 <_printf_i+0x23a>
 8010aee:	68e0      	ldr	r0, [r4, #12]
 8010af0:	9b03      	ldr	r3, [sp, #12]
 8010af2:	4298      	cmp	r0, r3
 8010af4:	bfb8      	it	lt
 8010af6:	4618      	movlt	r0, r3
 8010af8:	e7a4      	b.n	8010a44 <_printf_i+0x168>
 8010afa:	2301      	movs	r3, #1
 8010afc:	4632      	mov	r2, r6
 8010afe:	4649      	mov	r1, r9
 8010b00:	4640      	mov	r0, r8
 8010b02:	47d0      	blx	sl
 8010b04:	3001      	adds	r0, #1
 8010b06:	d09b      	beq.n	8010a40 <_printf_i+0x164>
 8010b08:	3501      	adds	r5, #1
 8010b0a:	68e3      	ldr	r3, [r4, #12]
 8010b0c:	9903      	ldr	r1, [sp, #12]
 8010b0e:	1a5b      	subs	r3, r3, r1
 8010b10:	42ab      	cmp	r3, r5
 8010b12:	dcf2      	bgt.n	8010afa <_printf_i+0x21e>
 8010b14:	e7eb      	b.n	8010aee <_printf_i+0x212>
 8010b16:	2500      	movs	r5, #0
 8010b18:	f104 0619 	add.w	r6, r4, #25
 8010b1c:	e7f5      	b.n	8010b0a <_printf_i+0x22e>
 8010b1e:	bf00      	nop
 8010b20:	080125a9 	.word	0x080125a9
 8010b24:	080125ba 	.word	0x080125ba

08010b28 <__retarget_lock_acquire_recursive>:
 8010b28:	4770      	bx	lr

08010b2a <__retarget_lock_release_recursive>:
 8010b2a:	4770      	bx	lr

08010b2c <memcpy>:
 8010b2c:	440a      	add	r2, r1
 8010b2e:	4291      	cmp	r1, r2
 8010b30:	f100 33ff 	add.w	r3, r0, #4294967295
 8010b34:	d100      	bne.n	8010b38 <memcpy+0xc>
 8010b36:	4770      	bx	lr
 8010b38:	b510      	push	{r4, lr}
 8010b3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010b3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010b42:	4291      	cmp	r1, r2
 8010b44:	d1f9      	bne.n	8010b3a <memcpy+0xe>
 8010b46:	bd10      	pop	{r4, pc}

08010b48 <memmove>:
 8010b48:	4288      	cmp	r0, r1
 8010b4a:	b510      	push	{r4, lr}
 8010b4c:	eb01 0402 	add.w	r4, r1, r2
 8010b50:	d902      	bls.n	8010b58 <memmove+0x10>
 8010b52:	4284      	cmp	r4, r0
 8010b54:	4623      	mov	r3, r4
 8010b56:	d807      	bhi.n	8010b68 <memmove+0x20>
 8010b58:	1e43      	subs	r3, r0, #1
 8010b5a:	42a1      	cmp	r1, r4
 8010b5c:	d008      	beq.n	8010b70 <memmove+0x28>
 8010b5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010b62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010b66:	e7f8      	b.n	8010b5a <memmove+0x12>
 8010b68:	4402      	add	r2, r0
 8010b6a:	4601      	mov	r1, r0
 8010b6c:	428a      	cmp	r2, r1
 8010b6e:	d100      	bne.n	8010b72 <memmove+0x2a>
 8010b70:	bd10      	pop	{r4, pc}
 8010b72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010b76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010b7a:	e7f7      	b.n	8010b6c <memmove+0x24>

08010b7c <_realloc_r>:
 8010b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b80:	4680      	mov	r8, r0
 8010b82:	4614      	mov	r4, r2
 8010b84:	460e      	mov	r6, r1
 8010b86:	b921      	cbnz	r1, 8010b92 <_realloc_r+0x16>
 8010b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b8c:	4611      	mov	r1, r2
 8010b8e:	f7ff bc2b 	b.w	80103e8 <_malloc_r>
 8010b92:	b92a      	cbnz	r2, 8010ba0 <_realloc_r+0x24>
 8010b94:	f7ff fbbc 	bl	8010310 <_free_r>
 8010b98:	4625      	mov	r5, r4
 8010b9a:	4628      	mov	r0, r5
 8010b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ba0:	f000 f81b 	bl	8010bda <_malloc_usable_size_r>
 8010ba4:	4284      	cmp	r4, r0
 8010ba6:	4607      	mov	r7, r0
 8010ba8:	d802      	bhi.n	8010bb0 <_realloc_r+0x34>
 8010baa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010bae:	d812      	bhi.n	8010bd6 <_realloc_r+0x5a>
 8010bb0:	4621      	mov	r1, r4
 8010bb2:	4640      	mov	r0, r8
 8010bb4:	f7ff fc18 	bl	80103e8 <_malloc_r>
 8010bb8:	4605      	mov	r5, r0
 8010bba:	2800      	cmp	r0, #0
 8010bbc:	d0ed      	beq.n	8010b9a <_realloc_r+0x1e>
 8010bbe:	42bc      	cmp	r4, r7
 8010bc0:	4622      	mov	r2, r4
 8010bc2:	4631      	mov	r1, r6
 8010bc4:	bf28      	it	cs
 8010bc6:	463a      	movcs	r2, r7
 8010bc8:	f7ff ffb0 	bl	8010b2c <memcpy>
 8010bcc:	4631      	mov	r1, r6
 8010bce:	4640      	mov	r0, r8
 8010bd0:	f7ff fb9e 	bl	8010310 <_free_r>
 8010bd4:	e7e1      	b.n	8010b9a <_realloc_r+0x1e>
 8010bd6:	4635      	mov	r5, r6
 8010bd8:	e7df      	b.n	8010b9a <_realloc_r+0x1e>

08010bda <_malloc_usable_size_r>:
 8010bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bde:	1f18      	subs	r0, r3, #4
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	bfbc      	itt	lt
 8010be4:	580b      	ldrlt	r3, [r1, r0]
 8010be6:	18c0      	addlt	r0, r0, r3
 8010be8:	4770      	bx	lr
	...

08010bec <_init>:
 8010bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bee:	bf00      	nop
 8010bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bf2:	bc08      	pop	{r3}
 8010bf4:	469e      	mov	lr, r3
 8010bf6:	4770      	bx	lr

08010bf8 <_fini>:
 8010bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bfa:	bf00      	nop
 8010bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010bfe:	bc08      	pop	{r3}
 8010c00:	469e      	mov	lr, r3
 8010c02:	4770      	bx	lr
