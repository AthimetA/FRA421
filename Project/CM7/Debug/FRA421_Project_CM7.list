
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0a0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800b338  0800b338  0001b338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b378  0800b378  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800b378  0800b378  0001b378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b380  0800b380  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b380  0800b380  0001b380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800b388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800b40c  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800b46c  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000c8e8  24000144  0800b4cc  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400ca2c  0800b4cc  0002ca2c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001ed44  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003372  00000000  00000000  0003eeb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001358  00000000  00000000  00042228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001220  00000000  00000000  00043580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bacf  00000000  00000000  000447a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b11c  00000000  00000000  0008026f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00185158  00000000  00000000  0009b38b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002204e3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000053bc  00000000  00000000  00220534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000144 	.word	0x24000144
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800b320 	.word	0x0800b320

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000148 	.word	0x24000148
 80002d4:	0800b320 	.word	0x0800b320

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <LCD_init>:
		0x2a,0x00,0x00,0x00,127,	//Set C Area
		0x2b,0x00,0x00,0x00,127,	//Set R Area
		0x2c						//Write Memory
};

void LCD_init(LCDHandle *lcd){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_RESET);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	6858      	ldr	r0, [r3, #4]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691b      	ldr	r3, [r3, #16]
 8000718:	b29b      	uxth	r3, r3
 800071a:	2200      	movs	r2, #0
 800071c:	4619      	mov	r1, r3
 800071e:	f004 fdef 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000722:	200a      	movs	r0, #10
 8000724:	f001 f87c 	bl	8001820 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->RstPort, lcd->RstPin, GPIO_PIN_SET);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6858      	ldr	r0, [r3, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	691b      	ldr	r3, [r3, #16]
 8000730:	b29b      	uxth	r3, r3
 8000732:	2201      	movs	r2, #1
 8000734:	4619      	mov	r1, r3
 8000736:	f004 fde3 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_SET);
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6898      	ldr	r0, [r3, #8]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	b29b      	uxth	r3, r3
 8000744:	2201      	movs	r2, #1
 8000746:	4619      	mov	r1, r3
 8000748:	f004 fdda 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800074c:	200a      	movs	r0, #10
 800074e:	f001 f867 	bl	8001820 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->CSPort, lcd->CSPin, GPIO_PIN_RESET);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6898      	ldr	r0, [r3, #8]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	b29b      	uxth	r3, r3
 800075c:	2200      	movs	r2, #0
 800075e:	4619      	mov	r1, r3
 8000760:	f004 fdce 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	68d8      	ldr	r0, [r3, #12]
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	699b      	ldr	r3, [r3, #24]
 800076c:	b29b      	uxth	r3, r3
 800076e:	2200      	movs	r2, #0
 8000770:	4619      	mov	r1, r3
 8000772:	f004 fdc5 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, LCDSTARTUPSeq, 4, 100);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	2204      	movs	r2, #4
 800077e:	4938      	ldr	r1, [pc, #224]	; (8000860 <LCD_init+0x158>)
 8000780:	f007 fbfa 	bl	8007f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68d8      	ldr	r0, [r3, #12]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	b29b      	uxth	r3, r3
 800078e:	2201      	movs	r2, #1
 8000790:	4619      	mov	r1, r3
 8000792:	f004 fdb5 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[4], 1, 100);
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6818      	ldr	r0, [r3, #0]
 800079a:	2364      	movs	r3, #100	; 0x64
 800079c:	2201      	movs	r2, #1
 800079e:	4931      	ldr	r1, [pc, #196]	; (8000864 <LCD_init+0x15c>)
 80007a0:	f007 fbea 	bl	8007f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68d8      	ldr	r0, [r3, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	2200      	movs	r2, #0
 80007b0:	4619      	mov	r1, r3
 80007b2:	f004 fda5 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[5], 1, 100);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6818      	ldr	r0, [r3, #0]
 80007ba:	2364      	movs	r3, #100	; 0x64
 80007bc:	2201      	movs	r2, #1
 80007be:	492a      	ldr	r1, [pc, #168]	; (8000868 <LCD_init+0x160>)
 80007c0:	f007 fbda 	bl	8007f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	68d8      	ldr	r0, [r3, #12]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	699b      	ldr	r3, [r3, #24]
 80007cc:	b29b      	uxth	r3, r3
 80007ce:	2201      	movs	r2, #1
 80007d0:	4619      	mov	r1, r3
 80007d2:	f004 fd95 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[6], 4, 100);
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	2204      	movs	r2, #4
 80007de:	4923      	ldr	r1, [pc, #140]	; (800086c <LCD_init+0x164>)
 80007e0:	f007 fbca 	bl	8007f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	68d8      	ldr	r0, [r3, #12]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	2200      	movs	r2, #0
 80007f0:	4619      	mov	r1, r3
 80007f2:	f004 fd85 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[10], 1, 100);
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	2364      	movs	r3, #100	; 0x64
 80007fc:	2201      	movs	r2, #1
 80007fe:	491c      	ldr	r1, [pc, #112]	; (8000870 <LCD_init+0x168>)
 8000800:	f007 fbba 	bl	8007f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	68d8      	ldr	r0, [r3, #12]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	699b      	ldr	r3, [r3, #24]
 800080c:	b29b      	uxth	r3, r3
 800080e:	2201      	movs	r2, #1
 8000810:	4619      	mov	r1, r3
 8000812:	f004 fd75 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[11], 4, 100);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	6818      	ldr	r0, [r3, #0]
 800081a:	2364      	movs	r3, #100	; 0x64
 800081c:	2204      	movs	r2, #4
 800081e:	4915      	ldr	r1, [pc, #84]	; (8000874 <LCD_init+0x16c>)
 8000820:	f007 fbaa 	bl	8007f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_RESET);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	68d8      	ldr	r0, [r3, #12]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	b29b      	uxth	r3, r3
 800082e:	2200      	movs	r2, #0
 8000830:	4619      	mov	r1, r3
 8000832:	f004 fd65 	bl	8005300 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(lcd->hspi, &LCDSTARTUPSeq[15], 1, 100);
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2201      	movs	r2, #1
 800083e:	490e      	ldr	r1, [pc, #56]	; (8000878 <LCD_init+0x170>)
 8000840:	f007 fb9a 	bl	8007f78 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(lcd->DCPort, lcd->DCPin, GPIO_PIN_SET);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68d8      	ldr	r0, [r3, #12]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	b29b      	uxth	r3, r3
 800084e:	2201      	movs	r2, #1
 8000850:	4619      	mov	r1, r3
 8000852:	f004 fd55 	bl	8005300 <HAL_GPIO_WritePin>

}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	24000008 	.word	0x24000008
 8000864:	2400000c 	.word	0x2400000c
 8000868:	2400000d 	.word	0x2400000d
 800086c:	2400000e 	.word	0x2400000e
 8000870:	24000012 	.word	0x24000012
 8000874:	24000013 	.word	0x24000013
 8000878:	24000017 	.word	0x24000017

0800087c <LCD_flush>:

void LCD_flush(LCDHandle *lcd)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	HAL_SPI_Transmit_DMA(lcd->hspi, Framememory, LCD_BUFFER_SIZE);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800088c:	4903      	ldr	r1, [pc, #12]	; (800089c <LCD_flush+0x20>)
 800088e:	4618      	mov	r0, r3
 8000890:	f007 fd64 	bl	800835c <HAL_SPI_Transmit_DMA>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	24000160 	.word	0x24000160

080008a0 <UARTInit>:
#include "stm32h7xx_hal.h"
#include "Uart.h"


void UARTInit(UARTStucrture *uart)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->RxLen);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	88db      	ldrh	r3, [r3, #6]
 80008ac:	4619      	mov	r1, r3
 80008ae:	2001      	movs	r0, #1
 80008b0:	f00a fc34 	bl	800b11c <calloc>
 80008b4:	4603      	mov	r3, r0
 80008b6:	461a      	mov	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), uart->TxLen);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	889b      	ldrh	r3, [r3, #4]
 80008c0:	4619      	mov	r1, r3
 80008c2:	2001      	movs	r0, #1
 80008c4:	f00a fc2a 	bl	800b11c <calloc>
 80008c8:	4603      	mov	r3, r0
 80008ca:	461a      	mov	r2, r3
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	2200      	movs	r2, #0
 80008d4:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	2200      	movs	r2, #0
 80008e0:	81da      	strh	r2, [r3, #14]

}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}

080008ea <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	b082      	sub	sp, #8
 80008ee:	af00      	add	r7, sp, #0
 80008f0:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6818      	ldr	r0, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	6919      	ldr	r1, [r3, #16]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	88db      	ldrh	r3, [r3, #6]
 80008fe:	461a      	mov	r2, r3
 8000900:	f008 fa1c 	bl	8008d3c <HAL_UART_Receive_DMA>
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000916:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000918:	bf00      	nop
 800091a:	4b46      	ldr	r3, [pc, #280]	; (8000a34 <main+0x128>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000922:	2b00      	cmp	r3, #0
 8000924:	d004      	beq.n	8000930 <main+0x24>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	1e5a      	subs	r2, r3, #1
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	2b00      	cmp	r3, #0
 800092e:	dcf4      	bgt.n	800091a <main+0xe>
	if ( timeout < 0 )
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2b00      	cmp	r3, #0
 8000934:	da01      	bge.n	800093a <main+0x2e>
	{
		Error_Handler();
 8000936:	f000 fb65 	bl	8001004 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800093a:	f000 fedf 	bl	80016fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800093e:	f000 f889 	bl	8000a54 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000942:	f000 f90b 	bl	8000b5c <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000946:	4b3b      	ldr	r3, [pc, #236]	; (8000a34 <main+0x128>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094c:	4a39      	ldr	r2, [pc, #228]	; (8000a34 <main+0x128>)
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000956:	4b37      	ldr	r3, [pc, #220]	; (8000a34 <main+0x128>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800095c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000964:	2000      	movs	r0, #0
 8000966:	f004 fcff 	bl	8005368 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 800096a:	2100      	movs	r1, #0
 800096c:	2000      	movs	r0, #0
 800096e:	f004 fd15 	bl	800539c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000976:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000978:	bf00      	nop
 800097a:	4b2e      	ldr	r3, [pc, #184]	; (8000a34 <main+0x128>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000982:	2b00      	cmp	r3, #0
 8000984:	d104      	bne.n	8000990 <main+0x84>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	1e5a      	subs	r2, r3, #1
 800098a:	607a      	str	r2, [r7, #4]
 800098c:	2b00      	cmp	r3, #0
 800098e:	dcf4      	bgt.n	800097a <main+0x6e>
	if ( timeout < 0 )
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	da01      	bge.n	800099a <main+0x8e>
	{
		Error_Handler();
 8000996:	f000 fb35 	bl	8001004 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800099a:	f000 fa65 	bl	8000e68 <MX_GPIO_Init>
	MX_ETH_Init();
 800099e:	f000 f90f 	bl	8000bc0 <MX_ETH_Init>
	MX_USART3_UART_Init();
 80009a2:	f000 f9b1 	bl	8000d08 <MX_USART3_UART_Init>
	MX_DMA_Init();
 80009a6:	f000 fa2f 	bl	8000e08 <MX_DMA_Init>
	MX_USB_OTG_FS_PCD_Init();
 80009aa:	f000 f9fb 	bl	8000da4 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI2_Init();
 80009ae:	f000 f953 	bl	8000c58 <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	ST7735.hspi = &hspi2;
 80009b2:	4b21      	ldr	r3, [pc, #132]	; (8000a38 <main+0x12c>)
 80009b4:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <main+0x130>)
 80009b6:	601a      	str	r2, [r3, #0]
	ST7735.CSPort = GPIOE;
 80009b8:	4b1f      	ldr	r3, [pc, #124]	; (8000a38 <main+0x12c>)
 80009ba:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <main+0x134>)
 80009bc:	609a      	str	r2, [r3, #8]
	ST7735.CSPin = GPIO_PIN_6;
 80009be:	4b1e      	ldr	r3, [pc, #120]	; (8000a38 <main+0x12c>)
 80009c0:	2240      	movs	r2, #64	; 0x40
 80009c2:	615a      	str	r2, [r3, #20]
	ST7735.DCPort = GPIOB;
 80009c4:	4b1c      	ldr	r3, [pc, #112]	; (8000a38 <main+0x12c>)
 80009c6:	4a1f      	ldr	r2, [pc, #124]	; (8000a44 <main+0x138>)
 80009c8:	60da      	str	r2, [r3, #12]
	ST7735.DCPin = GPIO_PIN_11;
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <main+0x12c>)
 80009cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009d0:	619a      	str	r2, [r3, #24]
	ST7735.RstPort = GPIOE;
 80009d2:	4b19      	ldr	r3, [pc, #100]	; (8000a38 <main+0x12c>)
 80009d4:	4a1a      	ldr	r2, [pc, #104]	; (8000a40 <main+0x134>)
 80009d6:	605a      	str	r2, [r3, #4]
	ST7735.RstPin = GPIO_PIN_15;
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <main+0x12c>)
 80009da:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009de:	611a      	str	r2, [r3, #16]
	LCD_init(&ST7735);
 80009e0:	4815      	ldr	r0, [pc, #84]	; (8000a38 <main+0x12c>)
 80009e2:	f7ff fe91 	bl	8000708 <LCD_init>
	LCD_flush(&ST7735);
 80009e6:	4814      	ldr	r0, [pc, #80]	; (8000a38 <main+0x12c>)
 80009e8:	f7ff ff48 	bl	800087c <LCD_flush>
	UART2.huart = &huart3;
 80009ec:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <main+0x13c>)
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <main+0x140>)
 80009f0:	601a      	str	r2, [r3, #0]
	UART2.RxLen =255;
 80009f2:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <main+0x13c>)
 80009f4:	22ff      	movs	r2, #255	; 0xff
 80009f6:	80da      	strh	r2, [r3, #6]
	UART2.TxLen =255;
 80009f8:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <main+0x13c>)
 80009fa:	22ff      	movs	r2, #255	; 0xff
 80009fc:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 80009fe:	4812      	ldr	r0, [pc, #72]	; (8000a48 <main+0x13c>)
 8000a00:	f7ff ff4e 	bl	80008a0 <UARTInit>
	UARTResetStart(&UART2);
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <main+0x13c>)
 8000a06:	f7ff ff70 	bl	80008ea <UARTResetStart>
	/* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 1000)
 8000a0a:	f000 fefd 	bl	8001808 <HAL_GetTick>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <main+0x144>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a1a:	d9f6      	bls.n	8000a0a <main+0xfe>
		{
			timemsM7_LED = HAL_GetTick();
 8000a1c:	f000 fef4 	bl	8001808 <HAL_GetTick>
 8000a20:	4603      	mov	r3, r0
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <main+0x144>)
 8000a24:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a26:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a2a:	4806      	ldr	r0, [pc, #24]	; (8000a44 <main+0x138>)
 8000a2c:	f004 fc81 	bl	8005332 <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - timemsM7_LED > 1000)
 8000a30:	e7eb      	b.n	8000a0a <main+0xfe>
 8000a32:	bf00      	nop
 8000a34:	58024400 	.word	0x58024400
 8000a38:	2400c9d8 	.word	0x2400c9d8
 8000a3c:	2400c248 	.word	0x2400c248
 8000a40:	58021000 	.word	0x58021000
 8000a44:	58020400 	.word	0x58020400
 8000a48:	2400c9f4 	.word	0x2400c9f4
 8000a4c:	2400c348 	.word	0x2400c348
 8000a50:	2400c9d4 	.word	0x2400c9d4

08000a54 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	; 0x70
 8000a58:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	224c      	movs	r2, #76	; 0x4c
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f00a fb8c 	bl	800b180 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	2220      	movs	r2, #32
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f00a fb86 	bl	800b180 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a74:	2004      	movs	r0, #4
 8000a76:	f004 fded 	bl	8005654 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <SystemClock_Config+0xfc>)
 8000a80:	699b      	ldr	r3, [r3, #24]
 8000a82:	4a33      	ldr	r2, [pc, #204]	; (8000b50 <SystemClock_Config+0xfc>)
 8000a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a88:	6193      	str	r3, [r2, #24]
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <SystemClock_Config+0xfc>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	4b2f      	ldr	r3, [pc, #188]	; (8000b54 <SystemClock_Config+0x100>)
 8000a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a98:	4a2e      	ldr	r2, [pc, #184]	; (8000b54 <SystemClock_Config+0x100>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	; (8000b54 <SystemClock_Config+0x100>)
 8000aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aac:	bf00      	nop
 8000aae:	4b28      	ldr	r3, [pc, #160]	; (8000b50 <SystemClock_Config+0xfc>)
 8000ab0:	699b      	ldr	r3, [r3, #24]
 8000ab2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aba:	d1f8      	bne.n	8000aae <SystemClock_Config+0x5a>

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <SystemClock_Config+0x104>)
 8000abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac0:	f023 0303 	bic.w	r3, r3, #3
 8000ac4:	4a24      	ldr	r2, [pc, #144]	; (8000b58 <SystemClock_Config+0x104>)
 8000ac6:	f043 0302 	orr.w	r3, r3, #2
 8000aca:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ad0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 8000ae2:	2378      	movs	r3, #120	; 0x78
 8000ae4:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000aee:	2302      	movs	r3, #2
 8000af0:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000af2:	230c      	movs	r3, #12
 8000af4:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b02:	4618      	mov	r0, r3
 8000b04:	f004 fe10 	bl	8005728 <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8000b0e:	f000 fa79 	bl	8001004 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b12:	233f      	movs	r3, #63	; 0x3f
 8000b14:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b16:	2303      	movs	r3, #3
 8000b18:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b22:	2340      	movs	r3, #64	; 0x40
 8000b24:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b26:	2340      	movs	r3, #64	; 0x40
 8000b28:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b2e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b30:	2340      	movs	r3, #64	; 0x40
 8000b32:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b34:	1d3b      	adds	r3, r7, #4
 8000b36:	2104      	movs	r1, #4
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f005 fa23 	bl	8005f84 <HAL_RCC_ClockConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0xf4>
	{
		Error_Handler();
 8000b44:	f000 fa5e 	bl	8001004 <Error_Handler>
	}
}
 8000b48:	bf00      	nop
 8000b4a:	3770      	adds	r7, #112	; 0x70
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	58024800 	.word	0x58024800
 8000b54:	58000400 	.word	0x58000400
 8000b58:	58024400 	.word	0x58024400

08000b5c <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b0b0      	sub	sp, #192	; 0xc0
 8000b60:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	22bc      	movs	r2, #188	; 0xbc
 8000b66:	2100      	movs	r1, #0
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f00a fb09 	bl	800b180 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI2
 8000b6e:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000b72:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000b78:	2318      	movs	r3, #24
 8000b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000b80:	2304      	movs	r3, #4
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000b88:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000b96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9a:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000b9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba4:	1d3b      	adds	r3, r7, #4
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f005 fd78 	bl	800669c <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <PeriphCommonClock_Config+0x5a>
	{
		Error_Handler();
 8000bb2:	f000 fa27 	bl	8001004 <Error_Handler>
	}
}
 8000bb6:	bf00      	nop
 8000bb8:	37c0      	adds	r7, #192	; 0xc0
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000bc4:	4b1e      	ldr	r3, [pc, #120]	; (8000c40 <MX_ETH_Init+0x80>)
 8000bc6:	4a1f      	ldr	r2, [pc, #124]	; (8000c44 <MX_ETH_Init+0x84>)
 8000bc8:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000bca:	4b1f      	ldr	r3, [pc, #124]	; (8000c48 <MX_ETH_Init+0x88>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000bd0:	4b1d      	ldr	r3, [pc, #116]	; (8000c48 <MX_ETH_Init+0x88>)
 8000bd2:	2280      	movs	r2, #128	; 0x80
 8000bd4:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	; (8000c48 <MX_ETH_Init+0x88>)
 8000bd8:	22e1      	movs	r2, #225	; 0xe1
 8000bda:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	; (8000c48 <MX_ETH_Init+0x88>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000be2:	4b19      	ldr	r3, [pc, #100]	; (8000c48 <MX_ETH_Init+0x88>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000be8:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <MX_ETH_Init+0x88>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_ETH_Init+0x80>)
 8000bf0:	4a15      	ldr	r2, [pc, #84]	; (8000c48 <MX_ETH_Init+0x88>)
 8000bf2:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <MX_ETH_Init+0x80>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000bfa:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_ETH_Init+0x80>)
 8000bfc:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <MX_ETH_Init+0x8c>)
 8000bfe:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000c00:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <MX_ETH_Init+0x80>)
 8000c02:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <MX_ETH_Init+0x90>)
 8000c04:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_ETH_Init+0x80>)
 8000c08:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c0c:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c0e:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_ETH_Init+0x80>)
 8000c10:	f003 fda2 	bl	8004758 <HAL_ETH_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_ETH_Init+0x5e>
	{
		Error_Handler();
 8000c1a:	f000 f9f3 	bl	8001004 <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c1e:	2238      	movs	r2, #56	; 0x38
 8000c20:	2100      	movs	r1, #0
 8000c22:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_ETH_Init+0x94>)
 8000c24:	f00a faac 	bl	800b180 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c28:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <MX_ETH_Init+0x94>)
 8000c2a:	2221      	movs	r2, #33	; 0x21
 8000c2c:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c2e:	4b09      	ldr	r3, [pc, #36]	; (8000c54 <MX_ETH_Init+0x94>)
 8000c30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c34:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c36:	4b07      	ldr	r3, [pc, #28]	; (8000c54 <MX_ETH_Init+0x94>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	2400c198 	.word	0x2400c198
 8000c44:	40028000 	.word	0x40028000
 8000c48:	2400ca0c 	.word	0x2400ca0c
 8000c4c:	240000e4 	.word	0x240000e4
 8000c50:	24000084 	.word	0x24000084
 8000c54:	2400c160 	.word	0x2400c160

08000c58 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c5e:	4a29      	ldr	r2, [pc, #164]	; (8000d04 <MX_SPI2_Init+0xac>)
 8000c60:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c64:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c68:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c70:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c72:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c74:	2207      	movs	r2, #7
 8000c76:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c86:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c8a:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000c8c:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c8e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000c92:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cac:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb2:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	641a      	str	r2, [r3, #64]	; 0x40
	hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	645a      	str	r2, [r3, #68]	; 0x44
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cd8:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_SPI2_Init+0xa8>)
 8000cec:	f007 f83e 	bl	8007d6c <HAL_SPI_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_SPI2_Init+0xa2>
	{
		Error_Handler();
 8000cf6:	f000 f985 	bl	8001004 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8000cfa:	bf00      	nop
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2400c248 	.word	0x2400c248
 8000d04:	40003800 	.word	0x40003800

08000d08 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000d0c:	4b22      	ldr	r3, [pc, #136]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d0e:	4a23      	ldr	r2, [pc, #140]	; (8000d9c <MX_USART3_UART_Init+0x94>)
 8000d10:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 384000;
 8000d12:	4b21      	ldr	r3, [pc, #132]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d14:	4a22      	ldr	r2, [pc, #136]	; (8000da0 <MX_USART3_UART_Init+0x98>)
 8000d16:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d18:	4b1f      	ldr	r3, [pc, #124]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000d1e:	4b1e      	ldr	r3, [pc, #120]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000d2a:	4b1b      	ldr	r3, [pc, #108]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d2c:	220c      	movs	r2, #12
 8000d2e:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d48:	4b13      	ldr	r3, [pc, #76]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d4e:	4812      	ldr	r0, [pc, #72]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d50:	f007 ffa3 	bl	8008c9a <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART3_UART_Init+0x56>
	{
		Error_Handler();
 8000d5a:	f000 f953 	bl	8001004 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	480d      	ldr	r0, [pc, #52]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d62:	f009 fe06 	bl	800a972 <HAL_UARTEx_SetTxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART3_UART_Init+0x68>
	{
		Error_Handler();
 8000d6c:	f000 f94a 	bl	8001004 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d70:	2100      	movs	r1, #0
 8000d72:	4809      	ldr	r0, [pc, #36]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d74:	f009 fe3b 	bl	800a9ee <HAL_UARTEx_SetRxFifoThreshold>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART3_UART_Init+0x7a>
	{
		Error_Handler();
 8000d7e:	f000 f941 	bl	8001004 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d82:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_USART3_UART_Init+0x90>)
 8000d84:	f009 fdbc 	bl	800a900 <HAL_UARTEx_DisableFifoMode>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_USART3_UART_Init+0x8a>
	{
		Error_Handler();
 8000d8e:	f000 f939 	bl	8001004 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000d92:	bf00      	nop
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	2400c348 	.word	0x2400c348
 8000d9c:	40004800 	.word	0x40004800
 8000da0:	0005dc00 	.word	0x0005dc00

08000da4 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000daa:	4a16      	ldr	r2, [pc, #88]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000dac:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db0:	2209      	movs	r2, #9
 8000db2:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dc0:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dc6:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dcc:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dd2:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dda:	2201      	movs	r2, #1
 8000ddc:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de0:	2201      	movs	r2, #1
 8000de2:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000dec:	f004 faea 	bl	80053c4 <HAL_PCD_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_USB_OTG_FS_PCD_Init+0x56>
	{
		Error_Handler();
 8000df6:	f000 f905 	bl	8001004 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2400c4c8 	.word	0x2400c4c8
 8000e04:	40080000 	.word	0x40080000

08000e08 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_DMA_Init+0x5c>)
 8000e10:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e14:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <MX_DMA_Init+0x5c>)
 8000e16:	f043 0301 	orr.w	r3, r3, #1
 8000e1a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <MX_DMA_Init+0x5c>)
 8000e20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2100      	movs	r1, #0
 8000e30:	200c      	movs	r0, #12
 8000e32:	f000 fe14 	bl	8001a5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e36:	200c      	movs	r0, #12
 8000e38:	f000 fe2b 	bl	8001a92 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	2100      	movs	r1, #0
 8000e40:	200d      	movs	r0, #13
 8000e42:	f000 fe0c 	bl	8001a5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000e46:	200d      	movs	r0, #13
 8000e48:	f000 fe23 	bl	8001a92 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	200f      	movs	r0, #15
 8000e52:	f000 fe04 	bl	8001a5e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e56:	200f      	movs	r0, #15
 8000e58:	f000 fe1b 	bl	8001a92 <HAL_NVIC_EnableIRQ>

}
 8000e5c:	bf00      	nop
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	58024400 	.word	0x58024400

08000e68 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08c      	sub	sp, #48	; 0x30
 8000e6c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]
 8000e7c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000e7e:	4b5c      	ldr	r3, [pc, #368]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	4a5a      	ldr	r2, [pc, #360]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e8e:	4b58      	ldr	r3, [pc, #352]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e94:	f003 0310 	and.w	r3, r3, #16
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9c:	4b54      	ldr	r3, [pc, #336]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	4a53      	ldr	r2, [pc, #332]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eac:	4b50      	ldr	r3, [pc, #320]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb2:	f003 0304 	and.w	r3, r3, #4
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000eba:	4b4d      	ldr	r3, [pc, #308]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	4a4b      	ldr	r2, [pc, #300]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000ec2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ec6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eca:	4b49      	ldr	r3, [pc, #292]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	4a44      	ldr	r2, [pc, #272]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee8:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef6:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000ef8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000efc:	4a3c      	ldr	r2, [pc, #240]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000efe:	f043 0302 	orr.w	r3, r3, #2
 8000f02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f06:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	f003 0302 	and.w	r3, r3, #2
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f14:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000f16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1a:	4a35      	ldr	r2, [pc, #212]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f24:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8000f32:	4b2f      	ldr	r3, [pc, #188]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	4a2d      	ldr	r2, [pc, #180]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000f3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f42:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <MX_GPIO_Init+0x188>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f4c:	603b      	str	r3, [r7, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCD_CS_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	f248 0140 	movw	r1, #32832	; 0x8040
 8000f56:	4827      	ldr	r0, [pc, #156]	; (8000ff4 <MX_GPIO_Init+0x18c>)
 8000f58:	f004 f9d2 	bl	8005300 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_DC_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8000f62:	4825      	ldr	r0, [pc, #148]	; (8000ff8 <MX_GPIO_Init+0x190>)
 8000f64:	f004 f9cc 	bl	8005300 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6e:	4823      	ldr	r0, [pc, #140]	; (8000ffc <MX_GPIO_Init+0x194>)
 8000f70:	f004 f9c6 	bl	8005300 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LCD_CS_Pin LCD_RST_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin|LCD_RST_Pin;
 8000f74:	f248 0340 	movw	r3, #32832	; 0x8040
 8000f78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f86:	f107 031c 	add.w	r3, r7, #28
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4819      	ldr	r0, [pc, #100]	; (8000ff4 <MX_GPIO_Init+0x18c>)
 8000f8e:	f004 f807 	bl	8004fa0 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_DC_Pin LD3_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin|LD3_Pin;
 8000f92:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8000f96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f107 031c 	add.w	r3, r7, #28
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4813      	ldr	r0, [pc, #76]	; (8000ff8 <MX_GPIO_Init+0x190>)
 8000fac:	f003 fff8 	bl	8004fa0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480c      	ldr	r0, [pc, #48]	; (8000ffc <MX_GPIO_Init+0x194>)
 8000fca:	f003 ffe9 	bl	8004fa0 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4807      	ldr	r0, [pc, #28]	; (8001000 <MX_GPIO_Init+0x198>)
 8000fe4:	f003 ffdc 	bl	8004fa0 <HAL_GPIO_Init>

}
 8000fe8:	bf00      	nop
 8000fea:	3730      	adds	r7, #48	; 0x30
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	58021000 	.word	0x58021000
 8000ff8:	58020400 	.word	0x58020400
 8000ffc:	58020c00 	.word	0x58020c00
 8001000:	58021800 	.word	0x58021800

08001004 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	; (8001040 <HAL_MspInit+0x30>)
 8001018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800101c:	4a08      	ldr	r2, [pc, #32]	; (8001040 <HAL_MspInit+0x30>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001026:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_MspInit+0x30>)
 8001028:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	58024400 	.word	0x58024400

08001044 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a59      	ldr	r2, [pc, #356]	; (80011c8 <HAL_ETH_MspInit+0x184>)
 8001062:	4293      	cmp	r3, r2
 8001064:	f040 80ab 	bne.w	80011be <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001068:	4b58      	ldr	r3, [pc, #352]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800106a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800106e:	4a57      	ldr	r2, [pc, #348]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001070:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001074:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001078:	4b54      	ldr	r3, [pc, #336]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800107a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800107e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001082:	623b      	str	r3, [r7, #32]
 8001084:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001086:	4b51      	ldr	r3, [pc, #324]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001088:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800108c:	4a4f      	ldr	r2, [pc, #316]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800108e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001092:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001096:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001098:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800109c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80010a4:	4b49      	ldr	r3, [pc, #292]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010aa:	4a48      	ldr	r2, [pc, #288]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80010b4:	4b45      	ldr	r3, [pc, #276]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010be:	61bb      	str	r3, [r7, #24]
 80010c0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	4b42      	ldr	r3, [pc, #264]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010c8:	4a40      	ldr	r2, [pc, #256]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010ca:	f043 0304 	orr.w	r3, r3, #4
 80010ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d2:	4b3e      	ldr	r3, [pc, #248]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	f003 0304 	and.w	r3, r3, #4
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b3a      	ldr	r3, [pc, #232]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e6:	4a39      	ldr	r2, [pc, #228]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010f0:	4b36      	ldr	r3, [pc, #216]	; (80011cc <HAL_ETH_MspInit+0x188>)
 80010f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	613b      	str	r3, [r7, #16]
 80010fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	4a31      	ldr	r2, [pc, #196]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001106:	f043 0302 	orr.w	r3, r3, #2
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a2a      	ldr	r2, [pc, #168]	; (80011cc <HAL_ETH_MspInit+0x188>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b27      	ldr	r3, [pc, #156]	; (80011cc <HAL_ETH_MspInit+0x188>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800113a:	2332      	movs	r3, #50	; 0x32
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800114a:	230b      	movs	r3, #11
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	4619      	mov	r1, r3
 8001154:	481e      	ldr	r0, [pc, #120]	; (80011d0 <HAL_ETH_MspInit+0x18c>)
 8001156:	f003 ff23 	bl	8004fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800115a:	2386      	movs	r3, #134	; 0x86
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800116a:	230b      	movs	r3, #11
 800116c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	4619      	mov	r1, r3
 8001174:	4817      	ldr	r0, [pc, #92]	; (80011d4 <HAL_ETH_MspInit+0x190>)
 8001176:	f003 ff13 	bl	8004fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001180:	2302      	movs	r3, #2
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800118c:	230b      	movs	r3, #11
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001194:	4619      	mov	r1, r3
 8001196:	4810      	ldr	r0, [pc, #64]	; (80011d8 <HAL_ETH_MspInit+0x194>)
 8001198:	f003 ff02 	bl	8004fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800119c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011ae:	230b      	movs	r3, #11
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011b6:	4619      	mov	r1, r3
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <HAL_ETH_MspInit+0x198>)
 80011ba:	f003 fef1 	bl	8004fa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3738      	adds	r7, #56	; 0x38
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40028000 	.word	0x40028000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	58020800 	.word	0x58020800
 80011d4:	58020000 	.word	0x58020000
 80011d8:	58020400 	.word	0x58020400
 80011dc:	58021800 	.word	0x58021800

080011e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b08a      	sub	sp, #40	; 0x28
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e8:	f107 0314 	add.w	r3, r7, #20
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	605a      	str	r2, [r3, #4]
 80011f2:	609a      	str	r2, [r3, #8]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a45      	ldr	r2, [pc, #276]	; (8001314 <HAL_SPI_MspInit+0x134>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	f040 8084 	bne.w	800130c <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001204:	4b44      	ldr	r3, [pc, #272]	; (8001318 <HAL_SPI_MspInit+0x138>)
 8001206:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800120a:	4a43      	ldr	r2, [pc, #268]	; (8001318 <HAL_SPI_MspInit+0x138>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001210:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001214:	4b40      	ldr	r3, [pc, #256]	; (8001318 <HAL_SPI_MspInit+0x138>)
 8001216:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800121a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800121e:	613b      	str	r3, [r7, #16]
 8001220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001222:	4b3d      	ldr	r3, [pc, #244]	; (8001318 <HAL_SPI_MspInit+0x138>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	4a3b      	ldr	r2, [pc, #236]	; (8001318 <HAL_SPI_MspInit+0x138>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001232:	4b39      	ldr	r3, [pc, #228]	; (8001318 <HAL_SPI_MspInit+0x138>)
 8001234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	60fb      	str	r3, [r7, #12]
 800123e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001240:	4b35      	ldr	r3, [pc, #212]	; (8001318 <HAL_SPI_MspInit+0x138>)
 8001242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001246:	4a34      	ldr	r2, [pc, #208]	; (8001318 <HAL_SPI_MspInit+0x138>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001250:	4b31      	ldr	r3, [pc, #196]	; (8001318 <HAL_SPI_MspInit+0x138>)
 8001252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3_C     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800125e:	2308      	movs	r3, #8
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800126e:	2305      	movs	r3, #5
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001272:	f107 0314 	add.w	r3, r7, #20
 8001276:	4619      	mov	r1, r3
 8001278:	4828      	ldr	r0, [pc, #160]	; (800131c <HAL_SPI_MspInit+0x13c>)
 800127a:	f003 fe91 	bl	8004fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800127e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001290:	2305      	movs	r3, #5
 8001292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4619      	mov	r1, r3
 800129a:	4821      	ldr	r0, [pc, #132]	; (8001320 <HAL_SPI_MspInit+0x140>)
 800129c:	f003 fe80 	bl	8004fa0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream2;
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012a2:	4a21      	ldr	r2, [pc, #132]	; (8001328 <HAL_SPI_MspInit+0x148>)
 80012a4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 80012a6:	4b1f      	ldr	r3, [pc, #124]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012a8:	2228      	movs	r2, #40	; 0x28
 80012aa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012ac:	4b1d      	ldr	r3, [pc, #116]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012ae:	2240      	movs	r2, #64	; 0x40
 80012b0:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012b2:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012be:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012c0:	4b18      	ldr	r3, [pc, #96]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012c6:	4b17      	ldr	r3, [pc, #92]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80012cc:	4b15      	ldr	r3, [pc, #84]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d2:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012d4:	4b13      	ldr	r3, [pc, #76]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012da:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012e2:	f000 fbf1 	bl	8001ac8 <HAL_DMA_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 80012ec:	f7ff fe8a 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012f4:	679a      	str	r2, [r3, #120]	; 0x78
 80012f6:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <HAL_SPI_MspInit+0x144>)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2100      	movs	r1, #0
 8001300:	2024      	movs	r0, #36	; 0x24
 8001302:	f000 fbac 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001306:	2024      	movs	r0, #36	; 0x24
 8001308:	f000 fbc3 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800130c:	bf00      	nop
 800130e:	3728      	adds	r7, #40	; 0x28
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40003800 	.word	0x40003800
 8001318:	58024400 	.word	0x58024400
 800131c:	58020800 	.word	0x58020800
 8001320:	58020400 	.word	0x58020400
 8001324:	2400c2d0 	.word	0x2400c2d0
 8001328:	40020040 	.word	0x40020040

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0b8      	sub	sp, #224	; 0xe0
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	22bc      	movs	r2, #188	; 0xbc
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f009 ff17 	bl	800b180 <memset>
  if(huart->Instance==USART3)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a57      	ldr	r2, [pc, #348]	; (80014b4 <HAL_UART_MspInit+0x188>)
 8001358:	4293      	cmp	r3, r2
 800135a:	f040 80a6 	bne.w	80014aa <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800135e:	2302      	movs	r3, #2
 8001360:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001362:	2300      	movs	r3, #0
 8001364:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4618      	mov	r0, r3
 800136e:	f005 f995 	bl	800669c <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001378:	f7ff fe44 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800137c:	4b4e      	ldr	r3, [pc, #312]	; (80014b8 <HAL_UART_MspInit+0x18c>)
 800137e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001382:	4a4d      	ldr	r2, [pc, #308]	; (80014b8 <HAL_UART_MspInit+0x18c>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001388:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800138c:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <HAL_UART_MspInit+0x18c>)
 800138e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001392:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139a:	4b47      	ldr	r3, [pc, #284]	; (80014b8 <HAL_UART_MspInit+0x18c>)
 800139c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a0:	4a45      	ldr	r2, [pc, #276]	; (80014b8 <HAL_UART_MspInit+0x18c>)
 80013a2:	f043 0308 	orr.w	r3, r3, #8
 80013a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013aa:	4b43      	ldr	r3, [pc, #268]	; (80014b8 <HAL_UART_MspInit+0x18c>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	f003 0308 	and.w	r3, r3, #8
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013d2:	2307      	movs	r3, #7
 80013d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013dc:	4619      	mov	r1, r3
 80013de:	4837      	ldr	r0, [pc, #220]	; (80014bc <HAL_UART_MspInit+0x190>)
 80013e0:	f003 fdde 	bl	8004fa0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_UART_MspInit+0x194>)
 80013e6:	4a37      	ldr	r2, [pc, #220]	; (80014c4 <HAL_UART_MspInit+0x198>)
 80013e8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 80013ea:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <HAL_UART_MspInit+0x194>)
 80013ec:	222d      	movs	r2, #45	; 0x2d
 80013ee:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f0:	4b33      	ldr	r3, [pc, #204]	; (80014c0 <HAL_UART_MspInit+0x194>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f6:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <HAL_UART_MspInit+0x194>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013fc:	4b30      	ldr	r3, [pc, #192]	; (80014c0 <HAL_UART_MspInit+0x194>)
 80013fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001402:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001404:	4b2e      	ldr	r3, [pc, #184]	; (80014c0 <HAL_UART_MspInit+0x194>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <HAL_UART_MspInit+0x194>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <HAL_UART_MspInit+0x194>)
 8001412:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001416:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_UART_MspInit+0x194>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_UART_MspInit+0x194>)
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001424:	4826      	ldr	r0, [pc, #152]	; (80014c0 <HAL_UART_MspInit+0x194>)
 8001426:	f000 fb4f 	bl	8001ac8 <HAL_DMA_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001430:	f7ff fde8 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a22      	ldr	r2, [pc, #136]	; (80014c0 <HAL_UART_MspInit+0x194>)
 8001438:	67da      	str	r2, [r3, #124]	; 0x7c
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <HAL_UART_MspInit+0x194>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8001440:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001442:	4a22      	ldr	r2, [pc, #136]	; (80014cc <HAL_UART_MspInit+0x1a0>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001446:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001448:	222e      	movs	r2, #46	; 0x2e
 800144a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144c:	4b1e      	ldr	r3, [pc, #120]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 800144e:	2240      	movs	r2, #64	; 0x40
 8001450:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 800145a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001478:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800147e:	4812      	ldr	r0, [pc, #72]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001480:	f000 fb22 	bl	8001ac8 <HAL_DMA_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 800148a:	f7ff fdbb 	bl	8001004 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001492:	679a      	str	r2, [r3, #120]	; 0x78
 8001494:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_UART_MspInit+0x19c>)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	2027      	movs	r0, #39	; 0x27
 80014a0:	f000 fadd 	bl	8001a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014a4:	2027      	movs	r0, #39	; 0x27
 80014a6:	f000 faf4 	bl	8001a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80014aa:	bf00      	nop
 80014ac:	37e0      	adds	r7, #224	; 0xe0
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40004800 	.word	0x40004800
 80014b8:	58024400 	.word	0x58024400
 80014bc:	58020c00 	.word	0x58020c00
 80014c0:	2400c3d8 	.word	0x2400c3d8
 80014c4:	40020028 	.word	0x40020028
 80014c8:	2400c450 	.word	0x2400c450
 80014cc:	40020070 	.word	0x40020070

080014d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a22      	ldr	r2, [pc, #136]	; (8001578 <HAL_PCD_MspInit+0xa8>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d13d      	bne.n	800156e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80014f2:	f004 f909 	bl	8005708 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b21      	ldr	r3, [pc, #132]	; (800157c <HAL_PCD_MspInit+0xac>)
 80014f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014fc:	4a1f      	ldr	r2, [pc, #124]	; (800157c <HAL_PCD_MspInit+0xac>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <HAL_PCD_MspInit+0xac>)
 8001508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001514:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001526:	230a      	movs	r3, #10
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0314 	add.w	r3, r7, #20
 800152e:	4619      	mov	r1, r3
 8001530:	4813      	ldr	r0, [pc, #76]	; (8001580 <HAL_PCD_MspInit+0xb0>)
 8001532:	f003 fd35 	bl	8004fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800153a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4619      	mov	r1, r3
 800154a:	480d      	ldr	r0, [pc, #52]	; (8001580 <HAL_PCD_MspInit+0xb0>)
 800154c:	f003 fd28 	bl	8004fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001550:	4b0a      	ldr	r3, [pc, #40]	; (800157c <HAL_PCD_MspInit+0xac>)
 8001552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <HAL_PCD_MspInit+0xac>)
 8001558:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800155c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_PCD_MspInit+0xac>)
 8001562:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800156e:	bf00      	nop
 8001570:	3728      	adds	r7, #40	; 0x28
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40080000 	.word	0x40080000
 800157c:	58024400 	.word	0x58024400
 8001580:	58020000 	.word	0x58020000

08001584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <NMI_Handler+0x4>

0800158a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <HardFault_Handler+0x4>

08001590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001594:	e7fe      	b.n	8001594 <MemManage_Handler+0x4>

08001596 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001596:	b480      	push	{r7}
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159a:	e7fe      	b.n	800159a <BusFault_Handler+0x4>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <UsageFault_Handler+0x4>

080015a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a6:	bf00      	nop
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015be:	b480      	push	{r7}
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c2:	bf00      	nop
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d0:	f000 f906 	bl	80017e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80015dc:	4802      	ldr	r0, [pc, #8]	; (80015e8 <DMA1_Stream1_IRQHandler+0x10>)
 80015de:	f001 fd9d 	bl	800311c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	2400c3d8 	.word	0x2400c3d8

080015ec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80015f0:	4802      	ldr	r0, [pc, #8]	; (80015fc <DMA1_Stream2_IRQHandler+0x10>)
 80015f2:	f001 fd93 	bl	800311c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	2400c2d0 	.word	0x2400c2d0

08001600 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <DMA1_Stream4_IRQHandler+0x10>)
 8001606:	f001 fd89 	bl	800311c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	2400c450 	.word	0x2400c450

08001614 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001618:	4802      	ldr	r0, [pc, #8]	; (8001624 <SPI2_IRQHandler+0x10>)
 800161a:	f006 ffe9 	bl	80085f0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2400c248 	.word	0x2400c248

08001628 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <USART3_IRQHandler+0x10>)
 800162e:	f007 fbdb 	bl	8008de8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	2400c348 	.word	0x2400c348

0800163c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001644:	4a14      	ldr	r2, [pc, #80]	; (8001698 <_sbrk+0x5c>)
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <_sbrk+0x60>)
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <_sbrk+0x64>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d102      	bne.n	800165e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <_sbrk+0x64>)
 800165a:	4a12      	ldr	r2, [pc, #72]	; (80016a4 <_sbrk+0x68>)
 800165c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <_sbrk+0x64>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	429a      	cmp	r2, r3
 800166a:	d207      	bcs.n	800167c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800166c:	f009 fd5e 	bl	800b12c <__errno>
 8001670:	4603      	mov	r3, r0
 8001672:	220c      	movs	r2, #12
 8001674:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001676:	f04f 33ff 	mov.w	r3, #4294967295
 800167a:	e009      	b.n	8001690 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <_sbrk+0x64>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001682:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	4a05      	ldr	r2, [pc, #20]	; (80016a0 <_sbrk+0x64>)
 800168c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800168e:	68fb      	ldr	r3, [r7, #12]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	24080000 	.word	0x24080000
 800169c:	00000400 	.word	0x00000400
 80016a0:	2400ca14 	.word	0x2400ca14
 80016a4:	2400ca30 	.word	0x2400ca30

080016a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80016a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80016ac:	f7fe ff96 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b2:	490d      	ldr	r1, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b4:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016c8:	4c0a      	ldr	r4, [pc, #40]	; (80016f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016d6:	f009 fd2f 	bl	800b138 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016da:	f7ff f917 	bl	800090c <main>
  bx  lr
 80016de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80016e4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80016e8:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80016ec:	0800b388 	.word	0x0800b388
  ldr r2, =_sbss
 80016f0:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 80016f4:	2400ca2c 	.word	0x2400ca2c

080016f8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016f8:	e7fe      	b.n	80016f8 <ADC3_IRQHandler>
	...

080016fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001702:	2003      	movs	r0, #3
 8001704:	f000 f9a0 	bl	8001a48 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001708:	f004 fdf2 	bl	80062f0 <HAL_RCC_GetSysClockFreq>
 800170c:	4602      	mov	r2, r0
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_Init+0x68>)
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	0a1b      	lsrs	r3, r3, #8
 8001714:	f003 030f 	and.w	r3, r3, #15
 8001718:	4913      	ldr	r1, [pc, #76]	; (8001768 <HAL_Init+0x6c>)
 800171a:	5ccb      	ldrb	r3, [r1, r3]
 800171c:	f003 031f 	and.w	r3, r3, #31
 8001720:	fa22 f303 	lsr.w	r3, r2, r3
 8001724:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001726:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_Init+0x68>)
 8001728:	699b      	ldr	r3, [r3, #24]
 800172a:	f003 030f 	and.w	r3, r3, #15
 800172e:	4a0e      	ldr	r2, [pc, #56]	; (8001768 <HAL_Init+0x6c>)
 8001730:	5cd3      	ldrb	r3, [r2, r3]
 8001732:	f003 031f 	and.w	r3, r3, #31
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	fa22 f303 	lsr.w	r3, r2, r3
 800173c:	4a0b      	ldr	r2, [pc, #44]	; (800176c <HAL_Init+0x70>)
 800173e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <HAL_Init+0x74>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f814 	bl	8001774 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e002      	b.n	800175c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001756:	f7ff fc5b 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	58024400 	.word	0x58024400
 8001768:	0800b338 	.word	0x0800b338
 800176c:	24000004 	.word	0x24000004
 8001770:	24000000 	.word	0x24000000

08001774 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <HAL_InitTick+0x60>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e021      	b.n	80017cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <HAL_InitTick+0x64>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_InitTick+0x60>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	4619      	mov	r1, r3
 8001792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001796:	fbb3 f3f1 	udiv	r3, r3, r1
 800179a:	fbb2 f3f3 	udiv	r3, r2, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 f985 	bl	8001aae <HAL_SYSTICK_Config>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00e      	b.n	80017cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b0f      	cmp	r3, #15
 80017b2:	d80a      	bhi.n	80017ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b4:	2200      	movs	r2, #0
 80017b6:	6879      	ldr	r1, [r7, #4]
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f000 f94f 	bl	8001a5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c0:	4a06      	ldr	r2, [pc, #24]	; (80017dc <HAL_InitTick+0x68>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
 80017c8:	e000      	b.n	80017cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3708      	adds	r7, #8
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	2400001c 	.word	0x2400001c
 80017d8:	24000000 	.word	0x24000000
 80017dc:	24000018 	.word	0x24000018

080017e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <HAL_IncTick+0x20>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b06      	ldr	r3, [pc, #24]	; (8001804 <HAL_IncTick+0x24>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	4a04      	ldr	r2, [pc, #16]	; (8001804 <HAL_IncTick+0x24>)
 80017f2:	6013      	str	r3, [r2, #0]
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	2400001c 	.word	0x2400001c
 8001804:	2400ca18 	.word	0x2400ca18

08001808 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return uwTick;
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <HAL_GetTick+0x14>)
 800180e:	681b      	ldr	r3, [r3, #0]
}
 8001810:	4618      	mov	r0, r3
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	2400ca18 	.word	0x2400ca18

08001820 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001828:	f7ff ffee 	bl	8001808 <HAL_GetTick>
 800182c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001838:	d005      	beq.n	8001846 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183a:	4b0a      	ldr	r3, [pc, #40]	; (8001864 <HAL_Delay+0x44>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001846:	bf00      	nop
 8001848:	f7ff ffde 	bl	8001808 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	429a      	cmp	r2, r3
 8001856:	d8f7      	bhi.n	8001848 <HAL_Delay+0x28>
  {
  }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2400001c 	.word	0x2400001c

08001868 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_GetREVID+0x14>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	0c1b      	lsrs	r3, r3, #16
}
 8001872:	4618      	mov	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	5c001000 	.word	0x5c001000

08001880 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001890:	4904      	ldr	r1, [pc, #16]	; (80018a4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
}
 8001898:	bf00      	nop
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	58000400 	.word	0x58000400

080018a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018b8:	4b0b      	ldr	r3, [pc, #44]	; (80018e8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018c4:	4013      	ands	r3, r2
 80018c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <__NVIC_SetPriorityGrouping+0x44>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018d6:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <__NVIC_SetPriorityGrouping+0x40>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	60d3      	str	r3, [r2, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000ed00 	.word	0xe000ed00
 80018ec:	05fa0000 	.word	0x05fa0000

080018f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <__NVIC_GetPriorityGrouping+0x18>)
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	f003 0307 	and.w	r3, r3, #7
}
 80018fe:	4618      	mov	r0, r3
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001916:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800191a:	2b00      	cmp	r3, #0
 800191c:	db0b      	blt.n	8001936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	f003 021f 	and.w	r2, r3, #31
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <__NVIC_EnableIRQ+0x38>)
 8001926:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800192a:	095b      	lsrs	r3, r3, #5
 800192c:	2001      	movs	r0, #1
 800192e:	fa00 f202 	lsl.w	r2, r0, r2
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000e100 	.word	0xe000e100

08001948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	4603      	mov	r3, r0
 8001950:	6039      	str	r1, [r7, #0]
 8001952:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001954:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001958:	2b00      	cmp	r3, #0
 800195a:	db0a      	blt.n	8001972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	490c      	ldr	r1, [pc, #48]	; (8001994 <__NVIC_SetPriority+0x4c>)
 8001962:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001966:	0112      	lsls	r2, r2, #4
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	440b      	add	r3, r1
 800196c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001970:	e00a      	b.n	8001988 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	b2da      	uxtb	r2, r3
 8001976:	4908      	ldr	r1, [pc, #32]	; (8001998 <__NVIC_SetPriority+0x50>)
 8001978:	88fb      	ldrh	r3, [r7, #6]
 800197a:	f003 030f 	and.w	r3, r3, #15
 800197e:	3b04      	subs	r3, #4
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	b2d2      	uxtb	r2, r2
 8001984:	440b      	add	r3, r1
 8001986:	761a      	strb	r2, [r3, #24]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199c:	b480      	push	{r7}
 800199e:	b089      	sub	sp, #36	; 0x24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	f1c3 0307 	rsb	r3, r3, #7
 80019b6:	2b04      	cmp	r3, #4
 80019b8:	bf28      	it	cs
 80019ba:	2304      	movcs	r3, #4
 80019bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3304      	adds	r3, #4
 80019c2:	2b06      	cmp	r3, #6
 80019c4:	d902      	bls.n	80019cc <NVIC_EncodePriority+0x30>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3b03      	subs	r3, #3
 80019ca:	e000      	b.n	80019ce <NVIC_EncodePriority+0x32>
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	f04f 32ff 	mov.w	r2, #4294967295
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43da      	mvns	r2, r3
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	401a      	ands	r2, r3
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019e4:	f04f 31ff 	mov.w	r1, #4294967295
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa01 f303 	lsl.w	r3, r1, r3
 80019ee:	43d9      	mvns	r1, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	4313      	orrs	r3, r2
         );
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3724      	adds	r7, #36	; 0x24
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
	...

08001a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a14:	d301      	bcc.n	8001a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a16:	2301      	movs	r3, #1
 8001a18:	e00f      	b.n	8001a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1a:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <SysTick_Config+0x40>)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a22:	210f      	movs	r1, #15
 8001a24:	f04f 30ff 	mov.w	r0, #4294967295
 8001a28:	f7ff ff8e 	bl	8001948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <SysTick_Config+0x40>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a32:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <SysTick_Config+0x40>)
 8001a34:	2207      	movs	r2, #7
 8001a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	e000e010 	.word	0xe000e010

08001a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f7ff ff29 	bl	80018a8 <__NVIC_SetPriorityGrouping>
}
 8001a56:	bf00      	nop
 8001a58:	3708      	adds	r7, #8
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a5e:	b580      	push	{r7, lr}
 8001a60:	b086      	sub	sp, #24
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	4603      	mov	r3, r0
 8001a66:	60b9      	str	r1, [r7, #8]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a6c:	f7ff ff40 	bl	80018f0 <__NVIC_GetPriorityGrouping>
 8001a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	6978      	ldr	r0, [r7, #20]
 8001a78:	f7ff ff90 	bl	800199c <NVIC_EncodePriority>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a82:	4611      	mov	r1, r2
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff5f 	bl	8001948 <__NVIC_SetPriority>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	4603      	mov	r3, r0
 8001a9a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff ff33 	bl	800190c <__NVIC_EnableIRQ>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ffa4 	bl	8001a04 <SysTick_Config>
 8001abc:	4603      	mov	r3, r0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
	...

08001ac8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001ad0:	f7ff fe9a 	bl	8001808 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d101      	bne.n	8001ae0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e316      	b.n	800210e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a66      	ldr	r2, [pc, #408]	; (8001c80 <HAL_DMA_Init+0x1b8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d04a      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a65      	ldr	r2, [pc, #404]	; (8001c84 <HAL_DMA_Init+0x1bc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d045      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a63      	ldr	r2, [pc, #396]	; (8001c88 <HAL_DMA_Init+0x1c0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d040      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a62      	ldr	r2, [pc, #392]	; (8001c8c <HAL_DMA_Init+0x1c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d03b      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a60      	ldr	r2, [pc, #384]	; (8001c90 <HAL_DMA_Init+0x1c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d036      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a5f      	ldr	r2, [pc, #380]	; (8001c94 <HAL_DMA_Init+0x1cc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d031      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	; (8001c98 <HAL_DMA_Init+0x1d0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d02c      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a5c      	ldr	r2, [pc, #368]	; (8001c9c <HAL_DMA_Init+0x1d4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d027      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a5a      	ldr	r2, [pc, #360]	; (8001ca0 <HAL_DMA_Init+0x1d8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d022      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a59      	ldr	r2, [pc, #356]	; (8001ca4 <HAL_DMA_Init+0x1dc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d01d      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a57      	ldr	r2, [pc, #348]	; (8001ca8 <HAL_DMA_Init+0x1e0>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d018      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a56      	ldr	r2, [pc, #344]	; (8001cac <HAL_DMA_Init+0x1e4>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d013      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a54      	ldr	r2, [pc, #336]	; (8001cb0 <HAL_DMA_Init+0x1e8>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d00e      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a53      	ldr	r2, [pc, #332]	; (8001cb4 <HAL_DMA_Init+0x1ec>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d009      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a51      	ldr	r2, [pc, #324]	; (8001cb8 <HAL_DMA_Init+0x1f0>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d004      	beq.n	8001b80 <HAL_DMA_Init+0xb8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a50      	ldr	r2, [pc, #320]	; (8001cbc <HAL_DMA_Init+0x1f4>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d101      	bne.n	8001b84 <HAL_DMA_Init+0xbc>
 8001b80:	2301      	movs	r3, #1
 8001b82:	e000      	b.n	8001b86 <HAL_DMA_Init+0xbe>
 8001b84:	2300      	movs	r3, #0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f000 813b 	beq.w	8001e02 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2202      	movs	r2, #2
 8001b90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a37      	ldr	r2, [pc, #220]	; (8001c80 <HAL_DMA_Init+0x1b8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d04a      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a36      	ldr	r2, [pc, #216]	; (8001c84 <HAL_DMA_Init+0x1bc>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d045      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a34      	ldr	r2, [pc, #208]	; (8001c88 <HAL_DMA_Init+0x1c0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d040      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a33      	ldr	r2, [pc, #204]	; (8001c8c <HAL_DMA_Init+0x1c4>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d03b      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a31      	ldr	r2, [pc, #196]	; (8001c90 <HAL_DMA_Init+0x1c8>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d036      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a30      	ldr	r2, [pc, #192]	; (8001c94 <HAL_DMA_Init+0x1cc>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d031      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a2e      	ldr	r2, [pc, #184]	; (8001c98 <HAL_DMA_Init+0x1d0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d02c      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2d      	ldr	r2, [pc, #180]	; (8001c9c <HAL_DMA_Init+0x1d4>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d027      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <HAL_DMA_Init+0x1d8>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d022      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a2a      	ldr	r2, [pc, #168]	; (8001ca4 <HAL_DMA_Init+0x1dc>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d01d      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a28      	ldr	r2, [pc, #160]	; (8001ca8 <HAL_DMA_Init+0x1e0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d018      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a27      	ldr	r2, [pc, #156]	; (8001cac <HAL_DMA_Init+0x1e4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_DMA_Init+0x1e8>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00e      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a24      	ldr	r2, [pc, #144]	; (8001cb4 <HAL_DMA_Init+0x1ec>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d009      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a22      	ldr	r2, [pc, #136]	; (8001cb8 <HAL_DMA_Init+0x1f0>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d004      	beq.n	8001c3c <HAL_DMA_Init+0x174>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <HAL_DMA_Init+0x1f4>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d108      	bne.n	8001c4e <HAL_DMA_Init+0x186>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0201 	bic.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e007      	b.n	8001c5e <HAL_DMA_Init+0x196>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 0201 	bic.w	r2, r2, #1
 8001c5c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c5e:	e02f      	b.n	8001cc0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c60:	f7ff fdd2 	bl	8001808 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b05      	cmp	r3, #5
 8001c6c:	d928      	bls.n	8001cc0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2203      	movs	r2, #3
 8001c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e246      	b.n	800210e <HAL_DMA_Init+0x646>
 8001c80:	40020010 	.word	0x40020010
 8001c84:	40020028 	.word	0x40020028
 8001c88:	40020040 	.word	0x40020040
 8001c8c:	40020058 	.word	0x40020058
 8001c90:	40020070 	.word	0x40020070
 8001c94:	40020088 	.word	0x40020088
 8001c98:	400200a0 	.word	0x400200a0
 8001c9c:	400200b8 	.word	0x400200b8
 8001ca0:	40020410 	.word	0x40020410
 8001ca4:	40020428 	.word	0x40020428
 8001ca8:	40020440 	.word	0x40020440
 8001cac:	40020458 	.word	0x40020458
 8001cb0:	40020470 	.word	0x40020470
 8001cb4:	40020488 	.word	0x40020488
 8001cb8:	400204a0 	.word	0x400204a0
 8001cbc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1c8      	bne.n	8001c60 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4b83      	ldr	r3, [pc, #524]	; (8001ee8 <HAL_DMA_Init+0x420>)
 8001cda:	4013      	ands	r3, r2
 8001cdc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001ce6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cfe:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001d06:	697a      	ldr	r2, [r7, #20]
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	d107      	bne.n	8001d24 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d24:	4b71      	ldr	r3, [pc, #452]	; (8001eec <HAL_DMA_Init+0x424>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4b71      	ldr	r3, [pc, #452]	; (8001ef0 <HAL_DMA_Init+0x428>)
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d30:	d328      	bcc.n	8001d84 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b28      	cmp	r3, #40	; 0x28
 8001d38:	d903      	bls.n	8001d42 <HAL_DMA_Init+0x27a>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b2e      	cmp	r3, #46	; 0x2e
 8001d40:	d917      	bls.n	8001d72 <HAL_DMA_Init+0x2aa>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b3e      	cmp	r3, #62	; 0x3e
 8001d48:	d903      	bls.n	8001d52 <HAL_DMA_Init+0x28a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b42      	cmp	r3, #66	; 0x42
 8001d50:	d90f      	bls.n	8001d72 <HAL_DMA_Init+0x2aa>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	2b46      	cmp	r3, #70	; 0x46
 8001d58:	d903      	bls.n	8001d62 <HAL_DMA_Init+0x29a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b48      	cmp	r3, #72	; 0x48
 8001d60:	d907      	bls.n	8001d72 <HAL_DMA_Init+0x2aa>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	2b4e      	cmp	r3, #78	; 0x4e
 8001d68:	d905      	bls.n	8001d76 <HAL_DMA_Init+0x2ae>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b52      	cmp	r3, #82	; 0x52
 8001d70:	d801      	bhi.n	8001d76 <HAL_DMA_Init+0x2ae>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_DMA_Init+0x2b0>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d82:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	f023 0307 	bic.w	r3, r3, #7
 8001d9a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d117      	bne.n	8001dde <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00e      	beq.n	8001dde <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f002 fb3f 	bl	8004444 <DMA_CheckFifoParam>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2240      	movs	r2, #64	; 0x40
 8001dd0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e197      	b.n	800210e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f002 fa7a 	bl	80042e0 <DMA_CalcBaseAndBitshift>
 8001dec:	4603      	mov	r3, r0
 8001dee:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	223f      	movs	r2, #63	; 0x3f
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	e0cd      	b.n	8001f9e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a3b      	ldr	r2, [pc, #236]	; (8001ef4 <HAL_DMA_Init+0x42c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d022      	beq.n	8001e52 <HAL_DMA_Init+0x38a>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a39      	ldr	r2, [pc, #228]	; (8001ef8 <HAL_DMA_Init+0x430>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d01d      	beq.n	8001e52 <HAL_DMA_Init+0x38a>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a38      	ldr	r2, [pc, #224]	; (8001efc <HAL_DMA_Init+0x434>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d018      	beq.n	8001e52 <HAL_DMA_Init+0x38a>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <HAL_DMA_Init+0x438>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d013      	beq.n	8001e52 <HAL_DMA_Init+0x38a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a35      	ldr	r2, [pc, #212]	; (8001f04 <HAL_DMA_Init+0x43c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d00e      	beq.n	8001e52 <HAL_DMA_Init+0x38a>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a33      	ldr	r2, [pc, #204]	; (8001f08 <HAL_DMA_Init+0x440>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d009      	beq.n	8001e52 <HAL_DMA_Init+0x38a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a32      	ldr	r2, [pc, #200]	; (8001f0c <HAL_DMA_Init+0x444>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d004      	beq.n	8001e52 <HAL_DMA_Init+0x38a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a30      	ldr	r2, [pc, #192]	; (8001f10 <HAL_DMA_Init+0x448>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d101      	bne.n	8001e56 <HAL_DMA_Init+0x38e>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e000      	b.n	8001e58 <HAL_DMA_Init+0x390>
 8001e56:	2300      	movs	r3, #0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	f000 8097 	beq.w	8001f8c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <HAL_DMA_Init+0x42c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d021      	beq.n	8001eac <HAL_DMA_Init+0x3e4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a22      	ldr	r2, [pc, #136]	; (8001ef8 <HAL_DMA_Init+0x430>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01c      	beq.n	8001eac <HAL_DMA_Init+0x3e4>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a21      	ldr	r2, [pc, #132]	; (8001efc <HAL_DMA_Init+0x434>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d017      	beq.n	8001eac <HAL_DMA_Init+0x3e4>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_DMA_Init+0x438>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d012      	beq.n	8001eac <HAL_DMA_Init+0x3e4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1e      	ldr	r2, [pc, #120]	; (8001f04 <HAL_DMA_Init+0x43c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00d      	beq.n	8001eac <HAL_DMA_Init+0x3e4>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a1c      	ldr	r2, [pc, #112]	; (8001f08 <HAL_DMA_Init+0x440>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d008      	beq.n	8001eac <HAL_DMA_Init+0x3e4>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a1b      	ldr	r2, [pc, #108]	; (8001f0c <HAL_DMA_Init+0x444>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d003      	beq.n	8001eac <HAL_DMA_Init+0x3e4>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	; (8001f10 <HAL_DMA_Init+0x448>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ec6:	697a      	ldr	r2, [r7, #20]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <HAL_DMA_Init+0x44c>)
 8001eca:	4013      	ands	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b40      	cmp	r3, #64	; 0x40
 8001ed4:	d020      	beq.n	8001f18 <HAL_DMA_Init+0x450>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	2b80      	cmp	r3, #128	; 0x80
 8001edc:	d102      	bne.n	8001ee4 <HAL_DMA_Init+0x41c>
 8001ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ee2:	e01a      	b.n	8001f1a <HAL_DMA_Init+0x452>
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	e018      	b.n	8001f1a <HAL_DMA_Init+0x452>
 8001ee8:	fe10803f 	.word	0xfe10803f
 8001eec:	5c001000 	.word	0x5c001000
 8001ef0:	ffff0000 	.word	0xffff0000
 8001ef4:	58025408 	.word	0x58025408
 8001ef8:	5802541c 	.word	0x5802541c
 8001efc:	58025430 	.word	0x58025430
 8001f00:	58025444 	.word	0x58025444
 8001f04:	58025458 	.word	0x58025458
 8001f08:	5802546c 	.word	0x5802546c
 8001f0c:	58025480 	.word	0x58025480
 8001f10:	58025494 	.word	0x58025494
 8001f14:	fffe000f 	.word	0xfffe000f
 8001f18:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68d2      	ldr	r2, [r2, #12]
 8001f1e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695b      	ldr	r3, [r3, #20]
 8001f2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f40:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f48:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b6e      	ldr	r3, [pc, #440]	; (8002118 <HAL_DMA_Init+0x650>)
 8001f60:	4413      	add	r3, r2
 8001f62:	4a6e      	ldr	r2, [pc, #440]	; (800211c <HAL_DMA_Init+0x654>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	009a      	lsls	r2, r3, #2
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f002 f9b5 	bl	80042e0 <DMA_CalcBaseAndBitshift>
 8001f76:	4603      	mov	r3, r0
 8001f78:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f7e:	f003 031f 	and.w	r3, r3, #31
 8001f82:	2201      	movs	r2, #1
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	605a      	str	r2, [r3, #4]
 8001f8a:	e008      	b.n	8001f9e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2203      	movs	r2, #3
 8001f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e0b7      	b.n	800210e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a5f      	ldr	r2, [pc, #380]	; (8002120 <HAL_DMA_Init+0x658>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d072      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a5d      	ldr	r2, [pc, #372]	; (8002124 <HAL_DMA_Init+0x65c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d06d      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a5c      	ldr	r2, [pc, #368]	; (8002128 <HAL_DMA_Init+0x660>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d068      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_DMA_Init+0x664>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d063      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a59      	ldr	r2, [pc, #356]	; (8002130 <HAL_DMA_Init+0x668>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d05e      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a57      	ldr	r2, [pc, #348]	; (8002134 <HAL_DMA_Init+0x66c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d059      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a56      	ldr	r2, [pc, #344]	; (8002138 <HAL_DMA_Init+0x670>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d054      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a54      	ldr	r2, [pc, #336]	; (800213c <HAL_DMA_Init+0x674>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04f      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a53      	ldr	r2, [pc, #332]	; (8002140 <HAL_DMA_Init+0x678>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d04a      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a51      	ldr	r2, [pc, #324]	; (8002144 <HAL_DMA_Init+0x67c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d045      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a50      	ldr	r2, [pc, #320]	; (8002148 <HAL_DMA_Init+0x680>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d040      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a4e      	ldr	r2, [pc, #312]	; (800214c <HAL_DMA_Init+0x684>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d03b      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a4d      	ldr	r2, [pc, #308]	; (8002150 <HAL_DMA_Init+0x688>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d036      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a4b      	ldr	r2, [pc, #300]	; (8002154 <HAL_DMA_Init+0x68c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d031      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a4a      	ldr	r2, [pc, #296]	; (8002158 <HAL_DMA_Init+0x690>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d02c      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a48      	ldr	r2, [pc, #288]	; (800215c <HAL_DMA_Init+0x694>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d027      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a47      	ldr	r2, [pc, #284]	; (8002160 <HAL_DMA_Init+0x698>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d022      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a45      	ldr	r2, [pc, #276]	; (8002164 <HAL_DMA_Init+0x69c>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d01d      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a44      	ldr	r2, [pc, #272]	; (8002168 <HAL_DMA_Init+0x6a0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d018      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a42      	ldr	r2, [pc, #264]	; (800216c <HAL_DMA_Init+0x6a4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d013      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a41      	ldr	r2, [pc, #260]	; (8002170 <HAL_DMA_Init+0x6a8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00e      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a3f      	ldr	r2, [pc, #252]	; (8002174 <HAL_DMA_Init+0x6ac>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d009      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a3e      	ldr	r2, [pc, #248]	; (8002178 <HAL_DMA_Init+0x6b0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d004      	beq.n	800208e <HAL_DMA_Init+0x5c6>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a3c      	ldr	r2, [pc, #240]	; (800217c <HAL_DMA_Init+0x6b4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d101      	bne.n	8002092 <HAL_DMA_Init+0x5ca>
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_DMA_Init+0x5cc>
 8002092:	2300      	movs	r3, #0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d032      	beq.n	80020fe <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f002 fa4f 	bl	800453c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	2b80      	cmp	r3, #128	; 0x80
 80020a4:	d102      	bne.n	80020ac <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b4:	b2d2      	uxtb	r2, r2
 80020b6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020c0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d010      	beq.n	80020ec <HAL_DMA_Init+0x624>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d80c      	bhi.n	80020ec <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f002 facc 	bl	8004670 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020e8:	605a      	str	r2, [r3, #4]
 80020ea:	e008      	b.n	80020fe <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	a7fdabf8 	.word	0xa7fdabf8
 800211c:	cccccccd 	.word	0xcccccccd
 8002120:	40020010 	.word	0x40020010
 8002124:	40020028 	.word	0x40020028
 8002128:	40020040 	.word	0x40020040
 800212c:	40020058 	.word	0x40020058
 8002130:	40020070 	.word	0x40020070
 8002134:	40020088 	.word	0x40020088
 8002138:	400200a0 	.word	0x400200a0
 800213c:	400200b8 	.word	0x400200b8
 8002140:	40020410 	.word	0x40020410
 8002144:	40020428 	.word	0x40020428
 8002148:	40020440 	.word	0x40020440
 800214c:	40020458 	.word	0x40020458
 8002150:	40020470 	.word	0x40020470
 8002154:	40020488 	.word	0x40020488
 8002158:	400204a0 	.word	0x400204a0
 800215c:	400204b8 	.word	0x400204b8
 8002160:	58025408 	.word	0x58025408
 8002164:	5802541c 	.word	0x5802541c
 8002168:	58025430 	.word	0x58025430
 800216c:	58025444 	.word	0x58025444
 8002170:	58025458 	.word	0x58025458
 8002174:	5802546c 	.word	0x5802546c
 8002178:	58025480 	.word	0x58025480
 800217c:	58025494 	.word	0x58025494

08002180 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
 800218c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800218e:	2300      	movs	r3, #0
 8002190:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e226      	b.n	80025ea <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d101      	bne.n	80021aa <HAL_DMA_Start_IT+0x2a>
 80021a6:	2302      	movs	r3, #2
 80021a8:	e21f      	b.n	80025ea <HAL_DMA_Start_IT+0x46a>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 820a 	bne.w	80025d4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2202      	movs	r2, #2
 80021c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a68      	ldr	r2, [pc, #416]	; (8002374 <HAL_DMA_Start_IT+0x1f4>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d04a      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a66      	ldr	r2, [pc, #408]	; (8002378 <HAL_DMA_Start_IT+0x1f8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d045      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a65      	ldr	r2, [pc, #404]	; (800237c <HAL_DMA_Start_IT+0x1fc>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d040      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a63      	ldr	r2, [pc, #396]	; (8002380 <HAL_DMA_Start_IT+0x200>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d03b      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a62      	ldr	r2, [pc, #392]	; (8002384 <HAL_DMA_Start_IT+0x204>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d036      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a60      	ldr	r2, [pc, #384]	; (8002388 <HAL_DMA_Start_IT+0x208>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d031      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a5f      	ldr	r2, [pc, #380]	; (800238c <HAL_DMA_Start_IT+0x20c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d02c      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a5d      	ldr	r2, [pc, #372]	; (8002390 <HAL_DMA_Start_IT+0x210>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d027      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5c      	ldr	r2, [pc, #368]	; (8002394 <HAL_DMA_Start_IT+0x214>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5a      	ldr	r2, [pc, #360]	; (8002398 <HAL_DMA_Start_IT+0x218>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01d      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a59      	ldr	r2, [pc, #356]	; (800239c <HAL_DMA_Start_IT+0x21c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d018      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a57      	ldr	r2, [pc, #348]	; (80023a0 <HAL_DMA_Start_IT+0x220>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a56      	ldr	r2, [pc, #344]	; (80023a4 <HAL_DMA_Start_IT+0x224>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a54      	ldr	r2, [pc, #336]	; (80023a8 <HAL_DMA_Start_IT+0x228>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a53      	ldr	r2, [pc, #332]	; (80023ac <HAL_DMA_Start_IT+0x22c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_DMA_Start_IT+0xee>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a51      	ldr	r2, [pc, #324]	; (80023b0 <HAL_DMA_Start_IT+0x230>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d108      	bne.n	8002280 <HAL_DMA_Start_IT+0x100>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e007      	b.n	8002290 <HAL_DMA_Start_IT+0x110>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68b9      	ldr	r1, [r7, #8]
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f001 fe76 	bl	8003f88 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a34      	ldr	r2, [pc, #208]	; (8002374 <HAL_DMA_Start_IT+0x1f4>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d04a      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a33      	ldr	r2, [pc, #204]	; (8002378 <HAL_DMA_Start_IT+0x1f8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d045      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a31      	ldr	r2, [pc, #196]	; (800237c <HAL_DMA_Start_IT+0x1fc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d040      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a30      	ldr	r2, [pc, #192]	; (8002380 <HAL_DMA_Start_IT+0x200>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d03b      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a2e      	ldr	r2, [pc, #184]	; (8002384 <HAL_DMA_Start_IT+0x204>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d036      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a2d      	ldr	r2, [pc, #180]	; (8002388 <HAL_DMA_Start_IT+0x208>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d031      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a2b      	ldr	r2, [pc, #172]	; (800238c <HAL_DMA_Start_IT+0x20c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d02c      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a2a      	ldr	r2, [pc, #168]	; (8002390 <HAL_DMA_Start_IT+0x210>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d027      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a28      	ldr	r2, [pc, #160]	; (8002394 <HAL_DMA_Start_IT+0x214>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d022      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a27      	ldr	r2, [pc, #156]	; (8002398 <HAL_DMA_Start_IT+0x218>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d01d      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a25      	ldr	r2, [pc, #148]	; (800239c <HAL_DMA_Start_IT+0x21c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d018      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a24      	ldr	r2, [pc, #144]	; (80023a0 <HAL_DMA_Start_IT+0x220>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d013      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a22      	ldr	r2, [pc, #136]	; (80023a4 <HAL_DMA_Start_IT+0x224>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00e      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a21      	ldr	r2, [pc, #132]	; (80023a8 <HAL_DMA_Start_IT+0x228>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d009      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a1f      	ldr	r2, [pc, #124]	; (80023ac <HAL_DMA_Start_IT+0x22c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d004      	beq.n	800233c <HAL_DMA_Start_IT+0x1bc>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a1e      	ldr	r2, [pc, #120]	; (80023b0 <HAL_DMA_Start_IT+0x230>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d101      	bne.n	8002340 <HAL_DMA_Start_IT+0x1c0>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_DMA_Start_IT+0x1c2>
 8002340:	2300      	movs	r3, #0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d036      	beq.n	80023b4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 021e 	bic.w	r2, r3, #30
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f042 0216 	orr.w	r2, r2, #22
 8002358:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d03e      	beq.n	80023e0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 0208 	orr.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
 8002372:	e035      	b.n	80023e0 <HAL_DMA_Start_IT+0x260>
 8002374:	40020010 	.word	0x40020010
 8002378:	40020028 	.word	0x40020028
 800237c:	40020040 	.word	0x40020040
 8002380:	40020058 	.word	0x40020058
 8002384:	40020070 	.word	0x40020070
 8002388:	40020088 	.word	0x40020088
 800238c:	400200a0 	.word	0x400200a0
 8002390:	400200b8 	.word	0x400200b8
 8002394:	40020410 	.word	0x40020410
 8002398:	40020428 	.word	0x40020428
 800239c:	40020440 	.word	0x40020440
 80023a0:	40020458 	.word	0x40020458
 80023a4:	40020470 	.word	0x40020470
 80023a8:	40020488 	.word	0x40020488
 80023ac:	400204a0 	.word	0x400204a0
 80023b0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 020e 	bic.w	r2, r3, #14
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 020a 	orr.w	r2, r2, #10
 80023c6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d007      	beq.n	80023e0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0204 	orr.w	r2, r2, #4
 80023de:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a83      	ldr	r2, [pc, #524]	; (80025f4 <HAL_DMA_Start_IT+0x474>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d072      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a82      	ldr	r2, [pc, #520]	; (80025f8 <HAL_DMA_Start_IT+0x478>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d06d      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a80      	ldr	r2, [pc, #512]	; (80025fc <HAL_DMA_Start_IT+0x47c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d068      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7f      	ldr	r2, [pc, #508]	; (8002600 <HAL_DMA_Start_IT+0x480>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d063      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a7d      	ldr	r2, [pc, #500]	; (8002604 <HAL_DMA_Start_IT+0x484>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d05e      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7c      	ldr	r2, [pc, #496]	; (8002608 <HAL_DMA_Start_IT+0x488>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d059      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a7a      	ldr	r2, [pc, #488]	; (800260c <HAL_DMA_Start_IT+0x48c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d054      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a79      	ldr	r2, [pc, #484]	; (8002610 <HAL_DMA_Start_IT+0x490>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d04f      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a77      	ldr	r2, [pc, #476]	; (8002614 <HAL_DMA_Start_IT+0x494>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d04a      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a76      	ldr	r2, [pc, #472]	; (8002618 <HAL_DMA_Start_IT+0x498>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d045      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a74      	ldr	r2, [pc, #464]	; (800261c <HAL_DMA_Start_IT+0x49c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d040      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a73      	ldr	r2, [pc, #460]	; (8002620 <HAL_DMA_Start_IT+0x4a0>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d03b      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a71      	ldr	r2, [pc, #452]	; (8002624 <HAL_DMA_Start_IT+0x4a4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d036      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a70      	ldr	r2, [pc, #448]	; (8002628 <HAL_DMA_Start_IT+0x4a8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d031      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a6e      	ldr	r2, [pc, #440]	; (800262c <HAL_DMA_Start_IT+0x4ac>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d02c      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6d      	ldr	r2, [pc, #436]	; (8002630 <HAL_DMA_Start_IT+0x4b0>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d027      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a6b      	ldr	r2, [pc, #428]	; (8002634 <HAL_DMA_Start_IT+0x4b4>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d022      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a6a      	ldr	r2, [pc, #424]	; (8002638 <HAL_DMA_Start_IT+0x4b8>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d01d      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a68      	ldr	r2, [pc, #416]	; (800263c <HAL_DMA_Start_IT+0x4bc>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d018      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_DMA_Start_IT+0x4c0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d013      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a65      	ldr	r2, [pc, #404]	; (8002644 <HAL_DMA_Start_IT+0x4c4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00e      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a64      	ldr	r2, [pc, #400]	; (8002648 <HAL_DMA_Start_IT+0x4c8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d009      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a62      	ldr	r2, [pc, #392]	; (800264c <HAL_DMA_Start_IT+0x4cc>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d004      	beq.n	80024d0 <HAL_DMA_Start_IT+0x350>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a61      	ldr	r2, [pc, #388]	; (8002650 <HAL_DMA_Start_IT+0x4d0>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d101      	bne.n	80024d4 <HAL_DMA_Start_IT+0x354>
 80024d0:	2301      	movs	r3, #1
 80024d2:	e000      	b.n	80024d6 <HAL_DMA_Start_IT+0x356>
 80024d4:	2300      	movs	r3, #0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d01a      	beq.n	8002510 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d007      	beq.n	80024f8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d007      	beq.n	8002510 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800250a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800250e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a37      	ldr	r2, [pc, #220]	; (80025f4 <HAL_DMA_Start_IT+0x474>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d04a      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a36      	ldr	r2, [pc, #216]	; (80025f8 <HAL_DMA_Start_IT+0x478>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d045      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a34      	ldr	r2, [pc, #208]	; (80025fc <HAL_DMA_Start_IT+0x47c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d040      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a33      	ldr	r2, [pc, #204]	; (8002600 <HAL_DMA_Start_IT+0x480>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d03b      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a31      	ldr	r2, [pc, #196]	; (8002604 <HAL_DMA_Start_IT+0x484>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d036      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a30      	ldr	r2, [pc, #192]	; (8002608 <HAL_DMA_Start_IT+0x488>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d031      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2e      	ldr	r2, [pc, #184]	; (800260c <HAL_DMA_Start_IT+0x48c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02c      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2d      	ldr	r2, [pc, #180]	; (8002610 <HAL_DMA_Start_IT+0x490>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d027      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2b      	ldr	r2, [pc, #172]	; (8002614 <HAL_DMA_Start_IT+0x494>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d022      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <HAL_DMA_Start_IT+0x498>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d01d      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a28      	ldr	r2, [pc, #160]	; (800261c <HAL_DMA_Start_IT+0x49c>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d018      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a27      	ldr	r2, [pc, #156]	; (8002620 <HAL_DMA_Start_IT+0x4a0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d013      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a25      	ldr	r2, [pc, #148]	; (8002624 <HAL_DMA_Start_IT+0x4a4>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d00e      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_DMA_Start_IT+0x4a8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d009      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a22      	ldr	r2, [pc, #136]	; (800262c <HAL_DMA_Start_IT+0x4ac>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <HAL_DMA_Start_IT+0x430>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <HAL_DMA_Start_IT+0x4b0>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d108      	bne.n	80025c2 <HAL_DMA_Start_IT+0x442>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f042 0201 	orr.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	e012      	b.n	80025e8 <HAL_DMA_Start_IT+0x468>
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f042 0201 	orr.w	r2, r2, #1
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	e009      	b.n	80025e8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80025da:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80025e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3718      	adds	r7, #24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40020010 	.word	0x40020010
 80025f8:	40020028 	.word	0x40020028
 80025fc:	40020040 	.word	0x40020040
 8002600:	40020058 	.word	0x40020058
 8002604:	40020070 	.word	0x40020070
 8002608:	40020088 	.word	0x40020088
 800260c:	400200a0 	.word	0x400200a0
 8002610:	400200b8 	.word	0x400200b8
 8002614:	40020410 	.word	0x40020410
 8002618:	40020428 	.word	0x40020428
 800261c:	40020440 	.word	0x40020440
 8002620:	40020458 	.word	0x40020458
 8002624:	40020470 	.word	0x40020470
 8002628:	40020488 	.word	0x40020488
 800262c:	400204a0 	.word	0x400204a0
 8002630:	400204b8 	.word	0x400204b8
 8002634:	58025408 	.word	0x58025408
 8002638:	5802541c 	.word	0x5802541c
 800263c:	58025430 	.word	0x58025430
 8002640:	58025444 	.word	0x58025444
 8002644:	58025458 	.word	0x58025458
 8002648:	5802546c 	.word	0x5802546c
 800264c:	58025480 	.word	0x58025480
 8002650:	58025494 	.word	0x58025494

08002654 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800265c:	f7ff f8d4 	bl	8001808 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e2dc      	b.n	8002c26 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d008      	beq.n	800268a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e2cd      	b.n	8002c26 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a76      	ldr	r2, [pc, #472]	; (8002868 <HAL_DMA_Abort+0x214>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d04a      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a74      	ldr	r2, [pc, #464]	; (800286c <HAL_DMA_Abort+0x218>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d045      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a73      	ldr	r2, [pc, #460]	; (8002870 <HAL_DMA_Abort+0x21c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d040      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a71      	ldr	r2, [pc, #452]	; (8002874 <HAL_DMA_Abort+0x220>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d03b      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a70      	ldr	r2, [pc, #448]	; (8002878 <HAL_DMA_Abort+0x224>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d036      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6e      	ldr	r2, [pc, #440]	; (800287c <HAL_DMA_Abort+0x228>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d031      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6d      	ldr	r2, [pc, #436]	; (8002880 <HAL_DMA_Abort+0x22c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d02c      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a6b      	ldr	r2, [pc, #428]	; (8002884 <HAL_DMA_Abort+0x230>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d027      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6a      	ldr	r2, [pc, #424]	; (8002888 <HAL_DMA_Abort+0x234>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d022      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a68      	ldr	r2, [pc, #416]	; (800288c <HAL_DMA_Abort+0x238>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01d      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a67      	ldr	r2, [pc, #412]	; (8002890 <HAL_DMA_Abort+0x23c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d018      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a65      	ldr	r2, [pc, #404]	; (8002894 <HAL_DMA_Abort+0x240>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a64      	ldr	r2, [pc, #400]	; (8002898 <HAL_DMA_Abort+0x244>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d00e      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a62      	ldr	r2, [pc, #392]	; (800289c <HAL_DMA_Abort+0x248>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d009      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a61      	ldr	r2, [pc, #388]	; (80028a0 <HAL_DMA_Abort+0x24c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d004      	beq.n	800272a <HAL_DMA_Abort+0xd6>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a5f      	ldr	r2, [pc, #380]	; (80028a4 <HAL_DMA_Abort+0x250>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d101      	bne.n	800272e <HAL_DMA_Abort+0xda>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <HAL_DMA_Abort+0xdc>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d013      	beq.n	800275c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f022 021e 	bic.w	r2, r2, #30
 8002742:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	695a      	ldr	r2, [r3, #20]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002752:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e00a      	b.n	8002772 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 020e 	bic.w	r2, r2, #14
 800276a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a3c      	ldr	r2, [pc, #240]	; (8002868 <HAL_DMA_Abort+0x214>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d072      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a3a      	ldr	r2, [pc, #232]	; (800286c <HAL_DMA_Abort+0x218>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d06d      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a39      	ldr	r2, [pc, #228]	; (8002870 <HAL_DMA_Abort+0x21c>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d068      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a37      	ldr	r2, [pc, #220]	; (8002874 <HAL_DMA_Abort+0x220>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d063      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a36      	ldr	r2, [pc, #216]	; (8002878 <HAL_DMA_Abort+0x224>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d05e      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a34      	ldr	r2, [pc, #208]	; (800287c <HAL_DMA_Abort+0x228>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d059      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a33      	ldr	r2, [pc, #204]	; (8002880 <HAL_DMA_Abort+0x22c>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d054      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a31      	ldr	r2, [pc, #196]	; (8002884 <HAL_DMA_Abort+0x230>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d04f      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a30      	ldr	r2, [pc, #192]	; (8002888 <HAL_DMA_Abort+0x234>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d04a      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a2e      	ldr	r2, [pc, #184]	; (800288c <HAL_DMA_Abort+0x238>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d045      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a2d      	ldr	r2, [pc, #180]	; (8002890 <HAL_DMA_Abort+0x23c>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d040      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_DMA_Abort+0x240>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d03b      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a2a      	ldr	r2, [pc, #168]	; (8002898 <HAL_DMA_Abort+0x244>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d036      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a28      	ldr	r2, [pc, #160]	; (800289c <HAL_DMA_Abort+0x248>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d031      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a27      	ldr	r2, [pc, #156]	; (80028a0 <HAL_DMA_Abort+0x24c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d02c      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a25      	ldr	r2, [pc, #148]	; (80028a4 <HAL_DMA_Abort+0x250>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d027      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a24      	ldr	r2, [pc, #144]	; (80028a8 <HAL_DMA_Abort+0x254>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a22      	ldr	r2, [pc, #136]	; (80028ac <HAL_DMA_Abort+0x258>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01d      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a21      	ldr	r2, [pc, #132]	; (80028b0 <HAL_DMA_Abort+0x25c>)
 800282c:	4293      	cmp	r3, r2
 800282e:	d018      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a1f      	ldr	r2, [pc, #124]	; (80028b4 <HAL_DMA_Abort+0x260>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d013      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a1e      	ldr	r2, [pc, #120]	; (80028b8 <HAL_DMA_Abort+0x264>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d00e      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a1c      	ldr	r2, [pc, #112]	; (80028bc <HAL_DMA_Abort+0x268>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_DMA_Abort+0x26c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d004      	beq.n	8002862 <HAL_DMA_Abort+0x20e>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a19      	ldr	r2, [pc, #100]	; (80028c4 <HAL_DMA_Abort+0x270>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d132      	bne.n	80028c8 <HAL_DMA_Abort+0x274>
 8002862:	2301      	movs	r3, #1
 8002864:	e031      	b.n	80028ca <HAL_DMA_Abort+0x276>
 8002866:	bf00      	nop
 8002868:	40020010 	.word	0x40020010
 800286c:	40020028 	.word	0x40020028
 8002870:	40020040 	.word	0x40020040
 8002874:	40020058 	.word	0x40020058
 8002878:	40020070 	.word	0x40020070
 800287c:	40020088 	.word	0x40020088
 8002880:	400200a0 	.word	0x400200a0
 8002884:	400200b8 	.word	0x400200b8
 8002888:	40020410 	.word	0x40020410
 800288c:	40020428 	.word	0x40020428
 8002890:	40020440 	.word	0x40020440
 8002894:	40020458 	.word	0x40020458
 8002898:	40020470 	.word	0x40020470
 800289c:	40020488 	.word	0x40020488
 80028a0:	400204a0 	.word	0x400204a0
 80028a4:	400204b8 	.word	0x400204b8
 80028a8:	58025408 	.word	0x58025408
 80028ac:	5802541c 	.word	0x5802541c
 80028b0:	58025430 	.word	0x58025430
 80028b4:	58025444 	.word	0x58025444
 80028b8:	58025458 	.word	0x58025458
 80028bc:	5802546c 	.word	0x5802546c
 80028c0:	58025480 	.word	0x58025480
 80028c4:	58025494 	.word	0x58025494
 80028c8:	2300      	movs	r3, #0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a6d      	ldr	r2, [pc, #436]	; (8002a98 <HAL_DMA_Abort+0x444>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d04a      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a6b      	ldr	r2, [pc, #428]	; (8002a9c <HAL_DMA_Abort+0x448>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d045      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_DMA_Abort+0x44c>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d040      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a68      	ldr	r2, [pc, #416]	; (8002aa4 <HAL_DMA_Abort+0x450>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d03b      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_DMA_Abort+0x454>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d036      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a65      	ldr	r2, [pc, #404]	; (8002aac <HAL_DMA_Abort+0x458>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d031      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a64      	ldr	r2, [pc, #400]	; (8002ab0 <HAL_DMA_Abort+0x45c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d02c      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a62      	ldr	r2, [pc, #392]	; (8002ab4 <HAL_DMA_Abort+0x460>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d027      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a61      	ldr	r2, [pc, #388]	; (8002ab8 <HAL_DMA_Abort+0x464>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d022      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a5f      	ldr	r2, [pc, #380]	; (8002abc <HAL_DMA_Abort+0x468>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01d      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a5e      	ldr	r2, [pc, #376]	; (8002ac0 <HAL_DMA_Abort+0x46c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d018      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a5c      	ldr	r2, [pc, #368]	; (8002ac4 <HAL_DMA_Abort+0x470>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d013      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a5b      	ldr	r2, [pc, #364]	; (8002ac8 <HAL_DMA_Abort+0x474>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d00e      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a59      	ldr	r2, [pc, #356]	; (8002acc <HAL_DMA_Abort+0x478>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d009      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a58      	ldr	r2, [pc, #352]	; (8002ad0 <HAL_DMA_Abort+0x47c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d004      	beq.n	800297e <HAL_DMA_Abort+0x32a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a56      	ldr	r2, [pc, #344]	; (8002ad4 <HAL_DMA_Abort+0x480>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d108      	bne.n	8002990 <HAL_DMA_Abort+0x33c>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f022 0201 	bic.w	r2, r2, #1
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e007      	b.n	80029a0 <HAL_DMA_Abort+0x34c>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029a0:	e013      	b.n	80029ca <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a2:	f7fe ff31 	bl	8001808 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b05      	cmp	r3, #5
 80029ae:	d90c      	bls.n	80029ca <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2220      	movs	r2, #32
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2203      	movs	r2, #3
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e12d      	b.n	8002c26 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1e5      	bne.n	80029a2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2f      	ldr	r2, [pc, #188]	; (8002a98 <HAL_DMA_Abort+0x444>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d04a      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2d      	ldr	r2, [pc, #180]	; (8002a9c <HAL_DMA_Abort+0x448>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d045      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <HAL_DMA_Abort+0x44c>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d040      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2a      	ldr	r2, [pc, #168]	; (8002aa4 <HAL_DMA_Abort+0x450>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d03b      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a29      	ldr	r2, [pc, #164]	; (8002aa8 <HAL_DMA_Abort+0x454>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d036      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a27      	ldr	r2, [pc, #156]	; (8002aac <HAL_DMA_Abort+0x458>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d031      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a26      	ldr	r2, [pc, #152]	; (8002ab0 <HAL_DMA_Abort+0x45c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d02c      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a24      	ldr	r2, [pc, #144]	; (8002ab4 <HAL_DMA_Abort+0x460>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d027      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a23      	ldr	r2, [pc, #140]	; (8002ab8 <HAL_DMA_Abort+0x464>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a21      	ldr	r2, [pc, #132]	; (8002abc <HAL_DMA_Abort+0x468>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01d      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <HAL_DMA_Abort+0x46c>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d018      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1e      	ldr	r2, [pc, #120]	; (8002ac4 <HAL_DMA_Abort+0x470>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d013      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1d      	ldr	r2, [pc, #116]	; (8002ac8 <HAL_DMA_Abort+0x474>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00e      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_DMA_Abort+0x478>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d009      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <HAL_DMA_Abort+0x47c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d004      	beq.n	8002a76 <HAL_DMA_Abort+0x422>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_DMA_Abort+0x480>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d101      	bne.n	8002a7a <HAL_DMA_Abort+0x426>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_DMA_Abort+0x428>
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d02b      	beq.n	8002ad8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a84:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8a:	f003 031f 	and.w	r3, r3, #31
 8002a8e:	223f      	movs	r2, #63	; 0x3f
 8002a90:	409a      	lsls	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	609a      	str	r2, [r3, #8]
 8002a96:	e02a      	b.n	8002aee <HAL_DMA_Abort+0x49a>
 8002a98:	40020010 	.word	0x40020010
 8002a9c:	40020028 	.word	0x40020028
 8002aa0:	40020040 	.word	0x40020040
 8002aa4:	40020058 	.word	0x40020058
 8002aa8:	40020070 	.word	0x40020070
 8002aac:	40020088 	.word	0x40020088
 8002ab0:	400200a0 	.word	0x400200a0
 8002ab4:	400200b8 	.word	0x400200b8
 8002ab8:	40020410 	.word	0x40020410
 8002abc:	40020428 	.word	0x40020428
 8002ac0:	40020440 	.word	0x40020440
 8002ac4:	40020458 	.word	0x40020458
 8002ac8:	40020470 	.word	0x40020470
 8002acc:	40020488 	.word	0x40020488
 8002ad0:	400204a0 	.word	0x400204a0
 8002ad4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f003 031f 	and.w	r3, r3, #31
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a4f      	ldr	r2, [pc, #316]	; (8002c30 <HAL_DMA_Abort+0x5dc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d072      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a4d      	ldr	r2, [pc, #308]	; (8002c34 <HAL_DMA_Abort+0x5e0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d06d      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a4c      	ldr	r2, [pc, #304]	; (8002c38 <HAL_DMA_Abort+0x5e4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d068      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4a      	ldr	r2, [pc, #296]	; (8002c3c <HAL_DMA_Abort+0x5e8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d063      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a49      	ldr	r2, [pc, #292]	; (8002c40 <HAL_DMA_Abort+0x5ec>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d05e      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a47      	ldr	r2, [pc, #284]	; (8002c44 <HAL_DMA_Abort+0x5f0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d059      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a46      	ldr	r2, [pc, #280]	; (8002c48 <HAL_DMA_Abort+0x5f4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d054      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a44      	ldr	r2, [pc, #272]	; (8002c4c <HAL_DMA_Abort+0x5f8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d04f      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a43      	ldr	r2, [pc, #268]	; (8002c50 <HAL_DMA_Abort+0x5fc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d04a      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a41      	ldr	r2, [pc, #260]	; (8002c54 <HAL_DMA_Abort+0x600>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d045      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a40      	ldr	r2, [pc, #256]	; (8002c58 <HAL_DMA_Abort+0x604>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d040      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a3e      	ldr	r2, [pc, #248]	; (8002c5c <HAL_DMA_Abort+0x608>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d03b      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a3d      	ldr	r2, [pc, #244]	; (8002c60 <HAL_DMA_Abort+0x60c>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d036      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a3b      	ldr	r2, [pc, #236]	; (8002c64 <HAL_DMA_Abort+0x610>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d031      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a3a      	ldr	r2, [pc, #232]	; (8002c68 <HAL_DMA_Abort+0x614>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d02c      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a38      	ldr	r2, [pc, #224]	; (8002c6c <HAL_DMA_Abort+0x618>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d027      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a37      	ldr	r2, [pc, #220]	; (8002c70 <HAL_DMA_Abort+0x61c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <HAL_DMA_Abort+0x620>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d01d      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a34      	ldr	r2, [pc, #208]	; (8002c78 <HAL_DMA_Abort+0x624>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d018      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a32      	ldr	r2, [pc, #200]	; (8002c7c <HAL_DMA_Abort+0x628>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d013      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a31      	ldr	r2, [pc, #196]	; (8002c80 <HAL_DMA_Abort+0x62c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00e      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <HAL_DMA_Abort+0x630>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d009      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <HAL_DMA_Abort+0x634>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_DMA_Abort+0x58a>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2c      	ldr	r2, [pc, #176]	; (8002c8c <HAL_DMA_Abort+0x638>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_DMA_Abort+0x58e>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_DMA_Abort+0x590>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d015      	beq.n	8002c14 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002bf0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00c      	beq.n	8002c14 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c08:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002c12:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002c24:	2300      	movs	r3, #0
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3718      	adds	r7, #24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40020010 	.word	0x40020010
 8002c34:	40020028 	.word	0x40020028
 8002c38:	40020040 	.word	0x40020040
 8002c3c:	40020058 	.word	0x40020058
 8002c40:	40020070 	.word	0x40020070
 8002c44:	40020088 	.word	0x40020088
 8002c48:	400200a0 	.word	0x400200a0
 8002c4c:	400200b8 	.word	0x400200b8
 8002c50:	40020410 	.word	0x40020410
 8002c54:	40020428 	.word	0x40020428
 8002c58:	40020440 	.word	0x40020440
 8002c5c:	40020458 	.word	0x40020458
 8002c60:	40020470 	.word	0x40020470
 8002c64:	40020488 	.word	0x40020488
 8002c68:	400204a0 	.word	0x400204a0
 8002c6c:	400204b8 	.word	0x400204b8
 8002c70:	58025408 	.word	0x58025408
 8002c74:	5802541c 	.word	0x5802541c
 8002c78:	58025430 	.word	0x58025430
 8002c7c:	58025444 	.word	0x58025444
 8002c80:	58025458 	.word	0x58025458
 8002c84:	5802546c 	.word	0x5802546c
 8002c88:	58025480 	.word	0x58025480
 8002c8c:	58025494 	.word	0x58025494

08002c90 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e237      	b.n	8003112 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d004      	beq.n	8002cb8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e22c      	b.n	8003112 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5c      	ldr	r2, [pc, #368]	; (8002e30 <HAL_DMA_Abort_IT+0x1a0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d04a      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5b      	ldr	r2, [pc, #364]	; (8002e34 <HAL_DMA_Abort_IT+0x1a4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d045      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a59      	ldr	r2, [pc, #356]	; (8002e38 <HAL_DMA_Abort_IT+0x1a8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d040      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a58      	ldr	r2, [pc, #352]	; (8002e3c <HAL_DMA_Abort_IT+0x1ac>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d03b      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a56      	ldr	r2, [pc, #344]	; (8002e40 <HAL_DMA_Abort_IT+0x1b0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d036      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a55      	ldr	r2, [pc, #340]	; (8002e44 <HAL_DMA_Abort_IT+0x1b4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d031      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a53      	ldr	r2, [pc, #332]	; (8002e48 <HAL_DMA_Abort_IT+0x1b8>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d02c      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a52      	ldr	r2, [pc, #328]	; (8002e4c <HAL_DMA_Abort_IT+0x1bc>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d027      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a50      	ldr	r2, [pc, #320]	; (8002e50 <HAL_DMA_Abort_IT+0x1c0>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d022      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a4f      	ldr	r2, [pc, #316]	; (8002e54 <HAL_DMA_Abort_IT+0x1c4>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d01d      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a4d      	ldr	r2, [pc, #308]	; (8002e58 <HAL_DMA_Abort_IT+0x1c8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d018      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a4c      	ldr	r2, [pc, #304]	; (8002e5c <HAL_DMA_Abort_IT+0x1cc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a4a      	ldr	r2, [pc, #296]	; (8002e60 <HAL_DMA_Abort_IT+0x1d0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d00e      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a49      	ldr	r2, [pc, #292]	; (8002e64 <HAL_DMA_Abort_IT+0x1d4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d009      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a47      	ldr	r2, [pc, #284]	; (8002e68 <HAL_DMA_Abort_IT+0x1d8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d004      	beq.n	8002d58 <HAL_DMA_Abort_IT+0xc8>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a46      	ldr	r2, [pc, #280]	; (8002e6c <HAL_DMA_Abort_IT+0x1dc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d101      	bne.n	8002d5c <HAL_DMA_Abort_IT+0xcc>
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e000      	b.n	8002d5e <HAL_DMA_Abort_IT+0xce>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f000 8086 	beq.w	8002e70 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2204      	movs	r2, #4
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2f      	ldr	r2, [pc, #188]	; (8002e30 <HAL_DMA_Abort_IT+0x1a0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d04a      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <HAL_DMA_Abort_IT+0x1a4>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d045      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <HAL_DMA_Abort_IT+0x1a8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d040      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a2b      	ldr	r2, [pc, #172]	; (8002e3c <HAL_DMA_Abort_IT+0x1ac>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d03b      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a29      	ldr	r2, [pc, #164]	; (8002e40 <HAL_DMA_Abort_IT+0x1b0>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d036      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a28      	ldr	r2, [pc, #160]	; (8002e44 <HAL_DMA_Abort_IT+0x1b4>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d031      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <HAL_DMA_Abort_IT+0x1b8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d02c      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <HAL_DMA_Abort_IT+0x1bc>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d027      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a23      	ldr	r2, [pc, #140]	; (8002e50 <HAL_DMA_Abort_IT+0x1c0>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d022      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a22      	ldr	r2, [pc, #136]	; (8002e54 <HAL_DMA_Abort_IT+0x1c4>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d01d      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <HAL_DMA_Abort_IT+0x1c8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d018      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <HAL_DMA_Abort_IT+0x1cc>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d013      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1d      	ldr	r2, [pc, #116]	; (8002e60 <HAL_DMA_Abort_IT+0x1d0>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00e      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1c      	ldr	r2, [pc, #112]	; (8002e64 <HAL_DMA_Abort_IT+0x1d4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d009      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1a      	ldr	r2, [pc, #104]	; (8002e68 <HAL_DMA_Abort_IT+0x1d8>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d004      	beq.n	8002e0c <HAL_DMA_Abort_IT+0x17c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a19      	ldr	r2, [pc, #100]	; (8002e6c <HAL_DMA_Abort_IT+0x1dc>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d108      	bne.n	8002e1e <HAL_DMA_Abort_IT+0x18e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e178      	b.n	8003110 <HAL_DMA_Abort_IT+0x480>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0201 	bic.w	r2, r2, #1
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e16f      	b.n	8003110 <HAL_DMA_Abort_IT+0x480>
 8002e30:	40020010 	.word	0x40020010
 8002e34:	40020028 	.word	0x40020028
 8002e38:	40020040 	.word	0x40020040
 8002e3c:	40020058 	.word	0x40020058
 8002e40:	40020070 	.word	0x40020070
 8002e44:	40020088 	.word	0x40020088
 8002e48:	400200a0 	.word	0x400200a0
 8002e4c:	400200b8 	.word	0x400200b8
 8002e50:	40020410 	.word	0x40020410
 8002e54:	40020428 	.word	0x40020428
 8002e58:	40020440 	.word	0x40020440
 8002e5c:	40020458 	.word	0x40020458
 8002e60:	40020470 	.word	0x40020470
 8002e64:	40020488 	.word	0x40020488
 8002e68:	400204a0 	.word	0x400204a0
 8002e6c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 020e 	bic.w	r2, r2, #14
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a6c      	ldr	r2, [pc, #432]	; (8003038 <HAL_DMA_Abort_IT+0x3a8>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d04a      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a6b      	ldr	r2, [pc, #428]	; (800303c <HAL_DMA_Abort_IT+0x3ac>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d045      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a69      	ldr	r2, [pc, #420]	; (8003040 <HAL_DMA_Abort_IT+0x3b0>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d040      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a68      	ldr	r2, [pc, #416]	; (8003044 <HAL_DMA_Abort_IT+0x3b4>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d03b      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a66      	ldr	r2, [pc, #408]	; (8003048 <HAL_DMA_Abort_IT+0x3b8>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d036      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a65      	ldr	r2, [pc, #404]	; (800304c <HAL_DMA_Abort_IT+0x3bc>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d031      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a63      	ldr	r2, [pc, #396]	; (8003050 <HAL_DMA_Abort_IT+0x3c0>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d02c      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a62      	ldr	r2, [pc, #392]	; (8003054 <HAL_DMA_Abort_IT+0x3c4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d027      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a60      	ldr	r2, [pc, #384]	; (8003058 <HAL_DMA_Abort_IT+0x3c8>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d022      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a5f      	ldr	r2, [pc, #380]	; (800305c <HAL_DMA_Abort_IT+0x3cc>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d01d      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a5d      	ldr	r2, [pc, #372]	; (8003060 <HAL_DMA_Abort_IT+0x3d0>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d018      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a5c      	ldr	r2, [pc, #368]	; (8003064 <HAL_DMA_Abort_IT+0x3d4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a5a      	ldr	r2, [pc, #360]	; (8003068 <HAL_DMA_Abort_IT+0x3d8>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d00e      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a59      	ldr	r2, [pc, #356]	; (800306c <HAL_DMA_Abort_IT+0x3dc>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a57      	ldr	r2, [pc, #348]	; (8003070 <HAL_DMA_Abort_IT+0x3e0>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d004      	beq.n	8002f20 <HAL_DMA_Abort_IT+0x290>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a56      	ldr	r2, [pc, #344]	; (8003074 <HAL_DMA_Abort_IT+0x3e4>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d108      	bne.n	8002f32 <HAL_DMA_Abort_IT+0x2a2>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0201 	bic.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e007      	b.n	8002f42 <HAL_DMA_Abort_IT+0x2b2>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0201 	bic.w	r2, r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a3c      	ldr	r2, [pc, #240]	; (8003038 <HAL_DMA_Abort_IT+0x3a8>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d072      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a3a      	ldr	r2, [pc, #232]	; (800303c <HAL_DMA_Abort_IT+0x3ac>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d06d      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a39      	ldr	r2, [pc, #228]	; (8003040 <HAL_DMA_Abort_IT+0x3b0>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d068      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a37      	ldr	r2, [pc, #220]	; (8003044 <HAL_DMA_Abort_IT+0x3b4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d063      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a36      	ldr	r2, [pc, #216]	; (8003048 <HAL_DMA_Abort_IT+0x3b8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d05e      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a34      	ldr	r2, [pc, #208]	; (800304c <HAL_DMA_Abort_IT+0x3bc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d059      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a33      	ldr	r2, [pc, #204]	; (8003050 <HAL_DMA_Abort_IT+0x3c0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d054      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a31      	ldr	r2, [pc, #196]	; (8003054 <HAL_DMA_Abort_IT+0x3c4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d04f      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a30      	ldr	r2, [pc, #192]	; (8003058 <HAL_DMA_Abort_IT+0x3c8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d04a      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a2e      	ldr	r2, [pc, #184]	; (800305c <HAL_DMA_Abort_IT+0x3cc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d045      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a2d      	ldr	r2, [pc, #180]	; (8003060 <HAL_DMA_Abort_IT+0x3d0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d040      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a2b      	ldr	r2, [pc, #172]	; (8003064 <HAL_DMA_Abort_IT+0x3d4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d03b      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <HAL_DMA_Abort_IT+0x3d8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d036      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a28      	ldr	r2, [pc, #160]	; (800306c <HAL_DMA_Abort_IT+0x3dc>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d031      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a27      	ldr	r2, [pc, #156]	; (8003070 <HAL_DMA_Abort_IT+0x3e0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d02c      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a25      	ldr	r2, [pc, #148]	; (8003074 <HAL_DMA_Abort_IT+0x3e4>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d027      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a24      	ldr	r2, [pc, #144]	; (8003078 <HAL_DMA_Abort_IT+0x3e8>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d022      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a22      	ldr	r2, [pc, #136]	; (800307c <HAL_DMA_Abort_IT+0x3ec>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01d      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a21      	ldr	r2, [pc, #132]	; (8003080 <HAL_DMA_Abort_IT+0x3f0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d018      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a1f      	ldr	r2, [pc, #124]	; (8003084 <HAL_DMA_Abort_IT+0x3f4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a1e      	ldr	r2, [pc, #120]	; (8003088 <HAL_DMA_Abort_IT+0x3f8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d00e      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a1c      	ldr	r2, [pc, #112]	; (800308c <HAL_DMA_Abort_IT+0x3fc>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d009      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a1b      	ldr	r2, [pc, #108]	; (8003090 <HAL_DMA_Abort_IT+0x400>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d004      	beq.n	8003032 <HAL_DMA_Abort_IT+0x3a2>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a19      	ldr	r2, [pc, #100]	; (8003094 <HAL_DMA_Abort_IT+0x404>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d132      	bne.n	8003098 <HAL_DMA_Abort_IT+0x408>
 8003032:	2301      	movs	r3, #1
 8003034:	e031      	b.n	800309a <HAL_DMA_Abort_IT+0x40a>
 8003036:	bf00      	nop
 8003038:	40020010 	.word	0x40020010
 800303c:	40020028 	.word	0x40020028
 8003040:	40020040 	.word	0x40020040
 8003044:	40020058 	.word	0x40020058
 8003048:	40020070 	.word	0x40020070
 800304c:	40020088 	.word	0x40020088
 8003050:	400200a0 	.word	0x400200a0
 8003054:	400200b8 	.word	0x400200b8
 8003058:	40020410 	.word	0x40020410
 800305c:	40020428 	.word	0x40020428
 8003060:	40020440 	.word	0x40020440
 8003064:	40020458 	.word	0x40020458
 8003068:	40020470 	.word	0x40020470
 800306c:	40020488 	.word	0x40020488
 8003070:	400204a0 	.word	0x400204a0
 8003074:	400204b8 	.word	0x400204b8
 8003078:	58025408 	.word	0x58025408
 800307c:	5802541c 	.word	0x5802541c
 8003080:	58025430 	.word	0x58025430
 8003084:	58025444 	.word	0x58025444
 8003088:	58025458 	.word	0x58025458
 800308c:	5802546c 	.word	0x5802546c
 8003090:	58025480 	.word	0x58025480
 8003094:	58025494 	.word	0x58025494
 8003098:	2300      	movs	r3, #0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d028      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030ac:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	f003 031f 	and.w	r3, r3, #31
 80030bc:	2201      	movs	r2, #1
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80030cc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00c      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030e4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80030ee:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop

0800311c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b08a      	sub	sp, #40	; 0x28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003128:	4b67      	ldr	r3, [pc, #412]	; (80032c8 <HAL_DMA_IRQHandler+0x1ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a67      	ldr	r2, [pc, #412]	; (80032cc <HAL_DMA_IRQHandler+0x1b0>)
 800312e:	fba2 2303 	umull	r2, r3, r2, r3
 8003132:	0a9b      	lsrs	r3, r3, #10
 8003134:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800313a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003140:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003142:	6a3b      	ldr	r3, [r7, #32]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5f      	ldr	r2, [pc, #380]	; (80032d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d04a      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5d      	ldr	r2, [pc, #372]	; (80032d4 <HAL_DMA_IRQHandler+0x1b8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d045      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a5c      	ldr	r2, [pc, #368]	; (80032d8 <HAL_DMA_IRQHandler+0x1bc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d040      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a5a      	ldr	r2, [pc, #360]	; (80032dc <HAL_DMA_IRQHandler+0x1c0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d03b      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a59      	ldr	r2, [pc, #356]	; (80032e0 <HAL_DMA_IRQHandler+0x1c4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d036      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a57      	ldr	r2, [pc, #348]	; (80032e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d031      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d02c      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a54      	ldr	r2, [pc, #336]	; (80032ec <HAL_DMA_IRQHandler+0x1d0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d027      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a53      	ldr	r2, [pc, #332]	; (80032f0 <HAL_DMA_IRQHandler+0x1d4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d022      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a51      	ldr	r2, [pc, #324]	; (80032f4 <HAL_DMA_IRQHandler+0x1d8>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01d      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a50      	ldr	r2, [pc, #320]	; (80032f8 <HAL_DMA_IRQHandler+0x1dc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d018      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4e      	ldr	r2, [pc, #312]	; (80032fc <HAL_DMA_IRQHandler+0x1e0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a4d      	ldr	r2, [pc, #308]	; (8003300 <HAL_DMA_IRQHandler+0x1e4>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d00e      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a4b      	ldr	r2, [pc, #300]	; (8003304 <HAL_DMA_IRQHandler+0x1e8>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a4a      	ldr	r2, [pc, #296]	; (8003308 <HAL_DMA_IRQHandler+0x1ec>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d004      	beq.n	80031ee <HAL_DMA_IRQHandler+0xd2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a48      	ldr	r2, [pc, #288]	; (800330c <HAL_DMA_IRQHandler+0x1f0>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_DMA_IRQHandler+0xd6>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <HAL_DMA_IRQHandler+0xd8>
 80031f2:	2300      	movs	r3, #0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 842b 	beq.w	8003a50 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	f003 031f 	and.w	r3, r3, #31
 8003202:	2208      	movs	r2, #8
 8003204:	409a      	lsls	r2, r3
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 80a2 	beq.w	8003354 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a2e      	ldr	r2, [pc, #184]	; (80032d0 <HAL_DMA_IRQHandler+0x1b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d04a      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a2d      	ldr	r2, [pc, #180]	; (80032d4 <HAL_DMA_IRQHandler+0x1b8>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d045      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a2b      	ldr	r2, [pc, #172]	; (80032d8 <HAL_DMA_IRQHandler+0x1bc>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d040      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a2a      	ldr	r2, [pc, #168]	; (80032dc <HAL_DMA_IRQHandler+0x1c0>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d03b      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a28      	ldr	r2, [pc, #160]	; (80032e0 <HAL_DMA_IRQHandler+0x1c4>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d036      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a27      	ldr	r2, [pc, #156]	; (80032e4 <HAL_DMA_IRQHandler+0x1c8>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d031      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a25      	ldr	r2, [pc, #148]	; (80032e8 <HAL_DMA_IRQHandler+0x1cc>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d02c      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a24      	ldr	r2, [pc, #144]	; (80032ec <HAL_DMA_IRQHandler+0x1d0>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d027      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a22      	ldr	r2, [pc, #136]	; (80032f0 <HAL_DMA_IRQHandler+0x1d4>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d022      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a21      	ldr	r2, [pc, #132]	; (80032f4 <HAL_DMA_IRQHandler+0x1d8>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d01d      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a1f      	ldr	r2, [pc, #124]	; (80032f8 <HAL_DMA_IRQHandler+0x1dc>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d018      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1e      	ldr	r2, [pc, #120]	; (80032fc <HAL_DMA_IRQHandler+0x1e0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a1c      	ldr	r2, [pc, #112]	; (8003300 <HAL_DMA_IRQHandler+0x1e4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00e      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_DMA_IRQHandler+0x1e8>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d009      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a19      	ldr	r2, [pc, #100]	; (8003308 <HAL_DMA_IRQHandler+0x1ec>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d004      	beq.n	80032b0 <HAL_DMA_IRQHandler+0x194>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a18      	ldr	r2, [pc, #96]	; (800330c <HAL_DMA_IRQHandler+0x1f0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d12f      	bne.n	8003310 <HAL_DMA_IRQHandler+0x1f4>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	bf14      	ite	ne
 80032be:	2301      	movne	r3, #1
 80032c0:	2300      	moveq	r3, #0
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	e02e      	b.n	8003324 <HAL_DMA_IRQHandler+0x208>
 80032c6:	bf00      	nop
 80032c8:	24000000 	.word	0x24000000
 80032cc:	1b4e81b5 	.word	0x1b4e81b5
 80032d0:	40020010 	.word	0x40020010
 80032d4:	40020028 	.word	0x40020028
 80032d8:	40020040 	.word	0x40020040
 80032dc:	40020058 	.word	0x40020058
 80032e0:	40020070 	.word	0x40020070
 80032e4:	40020088 	.word	0x40020088
 80032e8:	400200a0 	.word	0x400200a0
 80032ec:	400200b8 	.word	0x400200b8
 80032f0:	40020410 	.word	0x40020410
 80032f4:	40020428 	.word	0x40020428
 80032f8:	40020440 	.word	0x40020440
 80032fc:	40020458 	.word	0x40020458
 8003300:	40020470 	.word	0x40020470
 8003304:	40020488 	.word	0x40020488
 8003308:	400204a0 	.word	0x400204a0
 800330c:	400204b8 	.word	0x400204b8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	bf14      	ite	ne
 800331e:	2301      	movne	r3, #1
 8003320:	2300      	moveq	r3, #0
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d015      	beq.n	8003354 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0204 	bic.w	r2, r2, #4
 8003336:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333c:	f003 031f 	and.w	r3, r3, #31
 8003340:	2208      	movs	r2, #8
 8003342:	409a      	lsls	r2, r3
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800334c:	f043 0201 	orr.w	r2, r3, #1
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	f003 031f 	and.w	r3, r3, #31
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	fa22 f303 	lsr.w	r3, r2, r3
 8003362:	f003 0301 	and.w	r3, r3, #1
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06e      	beq.n	8003448 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a69      	ldr	r2, [pc, #420]	; (8003514 <HAL_DMA_IRQHandler+0x3f8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d04a      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a67      	ldr	r2, [pc, #412]	; (8003518 <HAL_DMA_IRQHandler+0x3fc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d045      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a66      	ldr	r2, [pc, #408]	; (800351c <HAL_DMA_IRQHandler+0x400>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d040      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a64      	ldr	r2, [pc, #400]	; (8003520 <HAL_DMA_IRQHandler+0x404>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d03b      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a63      	ldr	r2, [pc, #396]	; (8003524 <HAL_DMA_IRQHandler+0x408>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d036      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a61      	ldr	r2, [pc, #388]	; (8003528 <HAL_DMA_IRQHandler+0x40c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d031      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a60      	ldr	r2, [pc, #384]	; (800352c <HAL_DMA_IRQHandler+0x410>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d02c      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a5e      	ldr	r2, [pc, #376]	; (8003530 <HAL_DMA_IRQHandler+0x414>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d027      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a5d      	ldr	r2, [pc, #372]	; (8003534 <HAL_DMA_IRQHandler+0x418>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d022      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a5b      	ldr	r2, [pc, #364]	; (8003538 <HAL_DMA_IRQHandler+0x41c>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d01d      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a5a      	ldr	r2, [pc, #360]	; (800353c <HAL_DMA_IRQHandler+0x420>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d018      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a58      	ldr	r2, [pc, #352]	; (8003540 <HAL_DMA_IRQHandler+0x424>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d013      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a57      	ldr	r2, [pc, #348]	; (8003544 <HAL_DMA_IRQHandler+0x428>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d00e      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a55      	ldr	r2, [pc, #340]	; (8003548 <HAL_DMA_IRQHandler+0x42c>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d009      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a54      	ldr	r2, [pc, #336]	; (800354c <HAL_DMA_IRQHandler+0x430>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d004      	beq.n	800340a <HAL_DMA_IRQHandler+0x2ee>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a52      	ldr	r2, [pc, #328]	; (8003550 <HAL_DMA_IRQHandler+0x434>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d10a      	bne.n	8003420 <HAL_DMA_IRQHandler+0x304>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e003      	b.n	8003428 <HAL_DMA_IRQHandler+0x30c>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2300      	movs	r3, #0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00d      	beq.n	8003448 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2201      	movs	r2, #1
 8003436:	409a      	lsls	r2, r3
 8003438:	6a3b      	ldr	r3, [r7, #32]
 800343a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	f043 0202 	orr.w	r2, r3, #2
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2204      	movs	r2, #4
 8003452:	409a      	lsls	r2, r3
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 808f 	beq.w	800357c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a2c      	ldr	r2, [pc, #176]	; (8003514 <HAL_DMA_IRQHandler+0x3f8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d04a      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <HAL_DMA_IRQHandler+0x3fc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d045      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a29      	ldr	r2, [pc, #164]	; (800351c <HAL_DMA_IRQHandler+0x400>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d040      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a27      	ldr	r2, [pc, #156]	; (8003520 <HAL_DMA_IRQHandler+0x404>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d03b      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a26      	ldr	r2, [pc, #152]	; (8003524 <HAL_DMA_IRQHandler+0x408>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d036      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a24      	ldr	r2, [pc, #144]	; (8003528 <HAL_DMA_IRQHandler+0x40c>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d031      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a23      	ldr	r2, [pc, #140]	; (800352c <HAL_DMA_IRQHandler+0x410>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d02c      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a21      	ldr	r2, [pc, #132]	; (8003530 <HAL_DMA_IRQHandler+0x414>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d027      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a20      	ldr	r2, [pc, #128]	; (8003534 <HAL_DMA_IRQHandler+0x418>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d022      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1e      	ldr	r2, [pc, #120]	; (8003538 <HAL_DMA_IRQHandler+0x41c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d01d      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1d      	ldr	r2, [pc, #116]	; (800353c <HAL_DMA_IRQHandler+0x420>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d018      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a1b      	ldr	r2, [pc, #108]	; (8003540 <HAL_DMA_IRQHandler+0x424>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d013      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a1a      	ldr	r2, [pc, #104]	; (8003544 <HAL_DMA_IRQHandler+0x428>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d00e      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a18      	ldr	r2, [pc, #96]	; (8003548 <HAL_DMA_IRQHandler+0x42c>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d009      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a17      	ldr	r2, [pc, #92]	; (800354c <HAL_DMA_IRQHandler+0x430>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d004      	beq.n	80034fe <HAL_DMA_IRQHandler+0x3e2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a15      	ldr	r2, [pc, #84]	; (8003550 <HAL_DMA_IRQHandler+0x434>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d12a      	bne.n	8003554 <HAL_DMA_IRQHandler+0x438>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	e023      	b.n	800355c <HAL_DMA_IRQHandler+0x440>
 8003514:	40020010 	.word	0x40020010
 8003518:	40020028 	.word	0x40020028
 800351c:	40020040 	.word	0x40020040
 8003520:	40020058 	.word	0x40020058
 8003524:	40020070 	.word	0x40020070
 8003528:	40020088 	.word	0x40020088
 800352c:	400200a0 	.word	0x400200a0
 8003530:	400200b8 	.word	0x400200b8
 8003534:	40020410 	.word	0x40020410
 8003538:	40020428 	.word	0x40020428
 800353c:	40020440 	.word	0x40020440
 8003540:	40020458 	.word	0x40020458
 8003544:	40020470 	.word	0x40020470
 8003548:	40020488 	.word	0x40020488
 800354c:	400204a0 	.word	0x400204a0
 8003550:	400204b8 	.word	0x400204b8
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2300      	movs	r3, #0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00d      	beq.n	800357c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2204      	movs	r2, #4
 800356a:	409a      	lsls	r2, r3
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003574:	f043 0204 	orr.w	r2, r3, #4
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	2210      	movs	r2, #16
 8003586:	409a      	lsls	r2, r3
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	4013      	ands	r3, r2
 800358c:	2b00      	cmp	r3, #0
 800358e:	f000 80a6 	beq.w	80036de <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a85      	ldr	r2, [pc, #532]	; (80037ac <HAL_DMA_IRQHandler+0x690>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d04a      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a83      	ldr	r2, [pc, #524]	; (80037b0 <HAL_DMA_IRQHandler+0x694>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d045      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a82      	ldr	r2, [pc, #520]	; (80037b4 <HAL_DMA_IRQHandler+0x698>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d040      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a80      	ldr	r2, [pc, #512]	; (80037b8 <HAL_DMA_IRQHandler+0x69c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d03b      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7f      	ldr	r2, [pc, #508]	; (80037bc <HAL_DMA_IRQHandler+0x6a0>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d036      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a7d      	ldr	r2, [pc, #500]	; (80037c0 <HAL_DMA_IRQHandler+0x6a4>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d031      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7c      	ldr	r2, [pc, #496]	; (80037c4 <HAL_DMA_IRQHandler+0x6a8>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d02c      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a7a      	ldr	r2, [pc, #488]	; (80037c8 <HAL_DMA_IRQHandler+0x6ac>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d027      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a79      	ldr	r2, [pc, #484]	; (80037cc <HAL_DMA_IRQHandler+0x6b0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d022      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a77      	ldr	r2, [pc, #476]	; (80037d0 <HAL_DMA_IRQHandler+0x6b4>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01d      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a76      	ldr	r2, [pc, #472]	; (80037d4 <HAL_DMA_IRQHandler+0x6b8>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a74      	ldr	r2, [pc, #464]	; (80037d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a73      	ldr	r2, [pc, #460]	; (80037dc <HAL_DMA_IRQHandler+0x6c0>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00e      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a71      	ldr	r2, [pc, #452]	; (80037e0 <HAL_DMA_IRQHandler+0x6c4>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a70      	ldr	r2, [pc, #448]	; (80037e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_DMA_IRQHandler+0x516>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a6e      	ldr	r2, [pc, #440]	; (80037e8 <HAL_DMA_IRQHandler+0x6cc>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10a      	bne.n	8003648 <HAL_DMA_IRQHandler+0x52c>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	bf14      	ite	ne
 8003640:	2301      	movne	r3, #1
 8003642:	2300      	moveq	r3, #0
 8003644:	b2db      	uxtb	r3, r3
 8003646:	e009      	b.n	800365c <HAL_DMA_IRQHandler+0x540>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b00      	cmp	r3, #0
 8003654:	bf14      	ite	ne
 8003656:	2301      	movne	r3, #1
 8003658:	2300      	moveq	r3, #0
 800365a:	b2db      	uxtb	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d03e      	beq.n	80036de <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2210      	movs	r2, #16
 800366a:	409a      	lsls	r2, r3
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d018      	beq.n	80036b0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d108      	bne.n	800369e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	2b00      	cmp	r3, #0
 8003692:	d024      	beq.n	80036de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	4798      	blx	r3
 800369c:	e01f      	b.n	80036de <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d01b      	beq.n	80036de <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
 80036ae:	e016      	b.n	80036de <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d107      	bne.n	80036ce <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0208 	bic.w	r2, r2, #8
 80036cc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e2:	f003 031f 	and.w	r3, r3, #31
 80036e6:	2220      	movs	r2, #32
 80036e8:	409a      	lsls	r2, r3
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	f000 8110 	beq.w	8003914 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a2c      	ldr	r2, [pc, #176]	; (80037ac <HAL_DMA_IRQHandler+0x690>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d04a      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a2b      	ldr	r2, [pc, #172]	; (80037b0 <HAL_DMA_IRQHandler+0x694>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d045      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a29      	ldr	r2, [pc, #164]	; (80037b4 <HAL_DMA_IRQHandler+0x698>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d040      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a28      	ldr	r2, [pc, #160]	; (80037b8 <HAL_DMA_IRQHandler+0x69c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d03b      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a26      	ldr	r2, [pc, #152]	; (80037bc <HAL_DMA_IRQHandler+0x6a0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d036      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a25      	ldr	r2, [pc, #148]	; (80037c0 <HAL_DMA_IRQHandler+0x6a4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d031      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a23      	ldr	r2, [pc, #140]	; (80037c4 <HAL_DMA_IRQHandler+0x6a8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d02c      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a22      	ldr	r2, [pc, #136]	; (80037c8 <HAL_DMA_IRQHandler+0x6ac>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d027      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a20      	ldr	r2, [pc, #128]	; (80037cc <HAL_DMA_IRQHandler+0x6b0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d022      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a1f      	ldr	r2, [pc, #124]	; (80037d0 <HAL_DMA_IRQHandler+0x6b4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d01d      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <HAL_DMA_IRQHandler+0x6b8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d018      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_DMA_IRQHandler+0x6bc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d013      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a1a      	ldr	r2, [pc, #104]	; (80037dc <HAL_DMA_IRQHandler+0x6c0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d00e      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a19      	ldr	r2, [pc, #100]	; (80037e0 <HAL_DMA_IRQHandler+0x6c4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d009      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a17      	ldr	r2, [pc, #92]	; (80037e4 <HAL_DMA_IRQHandler+0x6c8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d004      	beq.n	8003794 <HAL_DMA_IRQHandler+0x678>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a16      	ldr	r2, [pc, #88]	; (80037e8 <HAL_DMA_IRQHandler+0x6cc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d12b      	bne.n	80037ec <HAL_DMA_IRQHandler+0x6d0>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf14      	ite	ne
 80037a2:	2301      	movne	r3, #1
 80037a4:	2300      	moveq	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	e02a      	b.n	8003800 <HAL_DMA_IRQHandler+0x6e4>
 80037aa:	bf00      	nop
 80037ac:	40020010 	.word	0x40020010
 80037b0:	40020028 	.word	0x40020028
 80037b4:	40020040 	.word	0x40020040
 80037b8:	40020058 	.word	0x40020058
 80037bc:	40020070 	.word	0x40020070
 80037c0:	40020088 	.word	0x40020088
 80037c4:	400200a0 	.word	0x400200a0
 80037c8:	400200b8 	.word	0x400200b8
 80037cc:	40020410 	.word	0x40020410
 80037d0:	40020428 	.word	0x40020428
 80037d4:	40020440 	.word	0x40020440
 80037d8:	40020458 	.word	0x40020458
 80037dc:	40020470 	.word	0x40020470
 80037e0:	40020488 	.word	0x40020488
 80037e4:	400204a0 	.word	0x400204a0
 80037e8:	400204b8 	.word	0x400204b8
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0302 	and.w	r3, r3, #2
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	bf14      	ite	ne
 80037fa:	2301      	movne	r3, #1
 80037fc:	2300      	moveq	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8087 	beq.w	8003914 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2220      	movs	r2, #32
 8003810:	409a      	lsls	r2, r3
 8003812:	6a3b      	ldr	r3, [r7, #32]
 8003814:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b04      	cmp	r3, #4
 8003820:	d139      	bne.n	8003896 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 0216 	bic.w	r2, r2, #22
 8003830:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	695a      	ldr	r2, [r3, #20]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003840:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d103      	bne.n	8003852 <HAL_DMA_IRQHandler+0x736>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800384e:	2b00      	cmp	r3, #0
 8003850:	d007      	beq.n	8003862 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 0208 	bic.w	r2, r2, #8
 8003860:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	223f      	movs	r2, #63	; 0x3f
 800386c:	409a      	lsls	r2, r3
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 834a 	beq.w	8003f20 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	4798      	blx	r3
          }
          return;
 8003894:	e344      	b.n	8003f20 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d018      	beq.n	80038d6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d108      	bne.n	80038c4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d02c      	beq.n	8003914 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	4798      	blx	r3
 80038c2:	e027      	b.n	8003914 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d023      	beq.n	8003914 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	4798      	blx	r3
 80038d4:	e01e      	b.n	8003914 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10f      	bne.n	8003904 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 0210 	bic.w	r2, r2, #16
 80038f2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003918:	2b00      	cmp	r3, #0
 800391a:	f000 8306 	beq.w	8003f2a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	2b00      	cmp	r3, #0
 8003928:	f000 8088 	beq.w	8003a3c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2204      	movs	r2, #4
 8003930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a7a      	ldr	r2, [pc, #488]	; (8003b24 <HAL_DMA_IRQHandler+0xa08>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d04a      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a79      	ldr	r2, [pc, #484]	; (8003b28 <HAL_DMA_IRQHandler+0xa0c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d045      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a77      	ldr	r2, [pc, #476]	; (8003b2c <HAL_DMA_IRQHandler+0xa10>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d040      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a76      	ldr	r2, [pc, #472]	; (8003b30 <HAL_DMA_IRQHandler+0xa14>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d03b      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a74      	ldr	r2, [pc, #464]	; (8003b34 <HAL_DMA_IRQHandler+0xa18>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d036      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a73      	ldr	r2, [pc, #460]	; (8003b38 <HAL_DMA_IRQHandler+0xa1c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d031      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a71      	ldr	r2, [pc, #452]	; (8003b3c <HAL_DMA_IRQHandler+0xa20>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d02c      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a70      	ldr	r2, [pc, #448]	; (8003b40 <HAL_DMA_IRQHandler+0xa24>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d027      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a6e      	ldr	r2, [pc, #440]	; (8003b44 <HAL_DMA_IRQHandler+0xa28>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d022      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a6d      	ldr	r2, [pc, #436]	; (8003b48 <HAL_DMA_IRQHandler+0xa2c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d01d      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a6b      	ldr	r2, [pc, #428]	; (8003b4c <HAL_DMA_IRQHandler+0xa30>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d018      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a6a      	ldr	r2, [pc, #424]	; (8003b50 <HAL_DMA_IRQHandler+0xa34>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d013      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a68      	ldr	r2, [pc, #416]	; (8003b54 <HAL_DMA_IRQHandler+0xa38>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d00e      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a67      	ldr	r2, [pc, #412]	; (8003b58 <HAL_DMA_IRQHandler+0xa3c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d009      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a65      	ldr	r2, [pc, #404]	; (8003b5c <HAL_DMA_IRQHandler+0xa40>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_DMA_IRQHandler+0x8b8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a64      	ldr	r2, [pc, #400]	; (8003b60 <HAL_DMA_IRQHandler+0xa44>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d108      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x8ca>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	e007      	b.n	80039f6 <HAL_DMA_IRQHandler+0x8da>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0201 	bic.w	r2, r2, #1
 80039f4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	3301      	adds	r3, #1
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d307      	bcc.n	8003a12 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f2      	bne.n	80039f6 <HAL_DMA_IRQHandler+0x8da>
 8003a10:	e000      	b.n	8003a14 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003a12:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d004      	beq.n	8003a2c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2203      	movs	r2, #3
 8003a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003a2a:	e003      	b.n	8003a34 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	f000 8272 	beq.w	8003f2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	4798      	blx	r3
 8003a4e:	e26c      	b.n	8003f2a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a43      	ldr	r2, [pc, #268]	; (8003b64 <HAL_DMA_IRQHandler+0xa48>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d022      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x984>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a42      	ldr	r2, [pc, #264]	; (8003b68 <HAL_DMA_IRQHandler+0xa4c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d01d      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x984>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a40      	ldr	r2, [pc, #256]	; (8003b6c <HAL_DMA_IRQHandler+0xa50>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d018      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x984>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a3f      	ldr	r2, [pc, #252]	; (8003b70 <HAL_DMA_IRQHandler+0xa54>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d013      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x984>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a3d      	ldr	r2, [pc, #244]	; (8003b74 <HAL_DMA_IRQHandler+0xa58>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d00e      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x984>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a3c      	ldr	r2, [pc, #240]	; (8003b78 <HAL_DMA_IRQHandler+0xa5c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d009      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x984>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a3a      	ldr	r2, [pc, #232]	; (8003b7c <HAL_DMA_IRQHandler+0xa60>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d004      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0x984>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a39      	ldr	r2, [pc, #228]	; (8003b80 <HAL_DMA_IRQHandler+0xa64>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d101      	bne.n	8003aa4 <HAL_DMA_IRQHandler+0x988>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_DMA_IRQHandler+0x98a>
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 823f 	beq.w	8003f2a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab8:	f003 031f 	and.w	r3, r3, #31
 8003abc:	2204      	movs	r2, #4
 8003abe:	409a      	lsls	r2, r3
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80cd 	beq.w	8003c64 <HAL_DMA_IRQHandler+0xb48>
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	f003 0304 	and.w	r3, r3, #4
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 80c7 	beq.w	8003c64 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ada:	f003 031f 	and.w	r3, r3, #31
 8003ade:	2204      	movs	r2, #4
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d049      	beq.n	8003b84 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d109      	bne.n	8003b0e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	f000 8210 	beq.w	8003f24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b0c:	e20a      	b.n	8003f24 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8206 	beq.w	8003f24 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b20:	e200      	b.n	8003f24 <HAL_DMA_IRQHandler+0xe08>
 8003b22:	bf00      	nop
 8003b24:	40020010 	.word	0x40020010
 8003b28:	40020028 	.word	0x40020028
 8003b2c:	40020040 	.word	0x40020040
 8003b30:	40020058 	.word	0x40020058
 8003b34:	40020070 	.word	0x40020070
 8003b38:	40020088 	.word	0x40020088
 8003b3c:	400200a0 	.word	0x400200a0
 8003b40:	400200b8 	.word	0x400200b8
 8003b44:	40020410 	.word	0x40020410
 8003b48:	40020428 	.word	0x40020428
 8003b4c:	40020440 	.word	0x40020440
 8003b50:	40020458 	.word	0x40020458
 8003b54:	40020470 	.word	0x40020470
 8003b58:	40020488 	.word	0x40020488
 8003b5c:	400204a0 	.word	0x400204a0
 8003b60:	400204b8 	.word	0x400204b8
 8003b64:	58025408 	.word	0x58025408
 8003b68:	5802541c 	.word	0x5802541c
 8003b6c:	58025430 	.word	0x58025430
 8003b70:	58025444 	.word	0x58025444
 8003b74:	58025458 	.word	0x58025458
 8003b78:	5802546c 	.word	0x5802546c
 8003b7c:	58025480 	.word	0x58025480
 8003b80:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	f003 0320 	and.w	r3, r3, #32
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d160      	bne.n	8003c50 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a7f      	ldr	r2, [pc, #508]	; (8003d90 <HAL_DMA_IRQHandler+0xc74>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d04a      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a7d      	ldr	r2, [pc, #500]	; (8003d94 <HAL_DMA_IRQHandler+0xc78>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d045      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a7c      	ldr	r2, [pc, #496]	; (8003d98 <HAL_DMA_IRQHandler+0xc7c>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d040      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a7a      	ldr	r2, [pc, #488]	; (8003d9c <HAL_DMA_IRQHandler+0xc80>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d03b      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a79      	ldr	r2, [pc, #484]	; (8003da0 <HAL_DMA_IRQHandler+0xc84>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d036      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a77      	ldr	r2, [pc, #476]	; (8003da4 <HAL_DMA_IRQHandler+0xc88>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d031      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a76      	ldr	r2, [pc, #472]	; (8003da8 <HAL_DMA_IRQHandler+0xc8c>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d02c      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a74      	ldr	r2, [pc, #464]	; (8003dac <HAL_DMA_IRQHandler+0xc90>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d027      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <HAL_DMA_IRQHandler+0xc94>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d022      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a71      	ldr	r2, [pc, #452]	; (8003db4 <HAL_DMA_IRQHandler+0xc98>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d01d      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a70      	ldr	r2, [pc, #448]	; (8003db8 <HAL_DMA_IRQHandler+0xc9c>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d018      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a6e      	ldr	r2, [pc, #440]	; (8003dbc <HAL_DMA_IRQHandler+0xca0>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d013      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a6d      	ldr	r2, [pc, #436]	; (8003dc0 <HAL_DMA_IRQHandler+0xca4>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00e      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a6b      	ldr	r2, [pc, #428]	; (8003dc4 <HAL_DMA_IRQHandler+0xca8>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d009      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6a      	ldr	r2, [pc, #424]	; (8003dc8 <HAL_DMA_IRQHandler+0xcac>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d004      	beq.n	8003c2e <HAL_DMA_IRQHandler+0xb12>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a68      	ldr	r2, [pc, #416]	; (8003dcc <HAL_DMA_IRQHandler+0xcb0>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d108      	bne.n	8003c40 <HAL_DMA_IRQHandler+0xb24>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 0208 	bic.w	r2, r2, #8
 8003c3c:	601a      	str	r2, [r3, #0]
 8003c3e:	e007      	b.n	8003c50 <HAL_DMA_IRQHandler+0xb34>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0204 	bic.w	r2, r2, #4
 8003c4e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f000 8165 	beq.w	8003f24 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c62:	e15f      	b.n	8003f24 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	f000 80c5 	beq.w	8003e04 <HAL_DMA_IRQHandler+0xce8>
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80bf 	beq.w	8003e04 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	f003 031f 	and.w	r3, r3, #31
 8003c8e:	2202      	movs	r2, #2
 8003c90:	409a      	lsls	r2, r3
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d018      	beq.n	8003cd2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 813a 	beq.w	8003f28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cbc:	e134      	b.n	8003f28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8130 	beq.w	8003f28 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cd0:	e12a      	b.n	8003f28 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	f003 0320 	and.w	r3, r3, #32
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f040 8089 	bne.w	8003df0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2b      	ldr	r2, [pc, #172]	; (8003d90 <HAL_DMA_IRQHandler+0xc74>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04a      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a29      	ldr	r2, [pc, #164]	; (8003d94 <HAL_DMA_IRQHandler+0xc78>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d045      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a28      	ldr	r2, [pc, #160]	; (8003d98 <HAL_DMA_IRQHandler+0xc7c>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d040      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <HAL_DMA_IRQHandler+0xc80>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a25      	ldr	r2, [pc, #148]	; (8003da0 <HAL_DMA_IRQHandler+0xc84>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d036      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a23      	ldr	r2, [pc, #140]	; (8003da4 <HAL_DMA_IRQHandler+0xc88>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a22      	ldr	r2, [pc, #136]	; (8003da8 <HAL_DMA_IRQHandler+0xc8c>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d02c      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a20      	ldr	r2, [pc, #128]	; (8003dac <HAL_DMA_IRQHandler+0xc90>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a1f      	ldr	r2, [pc, #124]	; (8003db0 <HAL_DMA_IRQHandler+0xc94>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1d      	ldr	r2, [pc, #116]	; (8003db4 <HAL_DMA_IRQHandler+0xc98>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <HAL_DMA_IRQHandler+0xc9c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1a      	ldr	r2, [pc, #104]	; (8003dbc <HAL_DMA_IRQHandler+0xca0>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a19      	ldr	r2, [pc, #100]	; (8003dc0 <HAL_DMA_IRQHandler+0xca4>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a17      	ldr	r2, [pc, #92]	; (8003dc4 <HAL_DMA_IRQHandler+0xca8>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a16      	ldr	r2, [pc, #88]	; (8003dc8 <HAL_DMA_IRQHandler+0xcac>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_DMA_IRQHandler+0xc62>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a14      	ldr	r2, [pc, #80]	; (8003dcc <HAL_DMA_IRQHandler+0xcb0>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d128      	bne.n	8003dd0 <HAL_DMA_IRQHandler+0xcb4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0214 	bic.w	r2, r2, #20
 8003d8c:	601a      	str	r2, [r3, #0]
 8003d8e:	e027      	b.n	8003de0 <HAL_DMA_IRQHandler+0xcc4>
 8003d90:	40020010 	.word	0x40020010
 8003d94:	40020028 	.word	0x40020028
 8003d98:	40020040 	.word	0x40020040
 8003d9c:	40020058 	.word	0x40020058
 8003da0:	40020070 	.word	0x40020070
 8003da4:	40020088 	.word	0x40020088
 8003da8:	400200a0 	.word	0x400200a0
 8003dac:	400200b8 	.word	0x400200b8
 8003db0:	40020410 	.word	0x40020410
 8003db4:	40020428 	.word	0x40020428
 8003db8:	40020440 	.word	0x40020440
 8003dbc:	40020458 	.word	0x40020458
 8003dc0:	40020470 	.word	0x40020470
 8003dc4:	40020488 	.word	0x40020488
 8003dc8:	400204a0 	.word	0x400204a0
 8003dcc:	400204b8 	.word	0x400204b8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 020a 	bic.w	r2, r2, #10
 8003dde:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8097 	beq.w	8003f28 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e02:	e091      	b.n	8003f28 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 8088 	beq.w	8003f2a <HAL_DMA_IRQHandler+0xe0e>
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0308 	and.w	r3, r3, #8
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8082 	beq.w	8003f2a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a41      	ldr	r2, [pc, #260]	; (8003f30 <HAL_DMA_IRQHandler+0xe14>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d04a      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3f      	ldr	r2, [pc, #252]	; (8003f34 <HAL_DMA_IRQHandler+0xe18>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d045      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a3e      	ldr	r2, [pc, #248]	; (8003f38 <HAL_DMA_IRQHandler+0xe1c>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d040      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a3c      	ldr	r2, [pc, #240]	; (8003f3c <HAL_DMA_IRQHandler+0xe20>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d03b      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a3b      	ldr	r2, [pc, #236]	; (8003f40 <HAL_DMA_IRQHandler+0xe24>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d036      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a39      	ldr	r2, [pc, #228]	; (8003f44 <HAL_DMA_IRQHandler+0xe28>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d031      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a38      	ldr	r2, [pc, #224]	; (8003f48 <HAL_DMA_IRQHandler+0xe2c>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d02c      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a36      	ldr	r2, [pc, #216]	; (8003f4c <HAL_DMA_IRQHandler+0xe30>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d027      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a35      	ldr	r2, [pc, #212]	; (8003f50 <HAL_DMA_IRQHandler+0xe34>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d022      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a33      	ldr	r2, [pc, #204]	; (8003f54 <HAL_DMA_IRQHandler+0xe38>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d01d      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a32      	ldr	r2, [pc, #200]	; (8003f58 <HAL_DMA_IRQHandler+0xe3c>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d018      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <HAL_DMA_IRQHandler+0xe40>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2f      	ldr	r2, [pc, #188]	; (8003f60 <HAL_DMA_IRQHandler+0xe44>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a2d      	ldr	r2, [pc, #180]	; (8003f64 <HAL_DMA_IRQHandler+0xe48>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d009      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a2c      	ldr	r2, [pc, #176]	; (8003f68 <HAL_DMA_IRQHandler+0xe4c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d004      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0xdaa>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a2a      	ldr	r2, [pc, #168]	; (8003f6c <HAL_DMA_IRQHandler+0xe50>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d108      	bne.n	8003ed8 <HAL_DMA_IRQHandler+0xdbc>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 021c 	bic.w	r2, r2, #28
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e007      	b.n	8003ee8 <HAL_DMA_IRQHandler+0xdcc>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f022 020e 	bic.w	r2, r2, #14
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	2201      	movs	r2, #1
 8003ef2:	409a      	lsls	r2, r3
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2201      	movs	r2, #1
 8003efc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d009      	beq.n	8003f2a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	4798      	blx	r3
 8003f1e:	e004      	b.n	8003f2a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003f20:	bf00      	nop
 8003f22:	e002      	b.n	8003f2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f24:	bf00      	nop
 8003f26:	e000      	b.n	8003f2a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f28:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003f2a:	3728      	adds	r7, #40	; 0x28
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	40020010 	.word	0x40020010
 8003f34:	40020028 	.word	0x40020028
 8003f38:	40020040 	.word	0x40020040
 8003f3c:	40020058 	.word	0x40020058
 8003f40:	40020070 	.word	0x40020070
 8003f44:	40020088 	.word	0x40020088
 8003f48:	400200a0 	.word	0x400200a0
 8003f4c:	400200b8 	.word	0x400200b8
 8003f50:	40020410 	.word	0x40020410
 8003f54:	40020428 	.word	0x40020428
 8003f58:	40020440 	.word	0x40020440
 8003f5c:	40020458 	.word	0x40020458
 8003f60:	40020470 	.word	0x40020470
 8003f64:	40020488 	.word	0x40020488
 8003f68:	400204a0 	.word	0x400204a0
 8003f6c:	400204b8 	.word	0x400204b8

08003f70 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a7f      	ldr	r2, [pc, #508]	; (80041a4 <DMA_SetConfig+0x21c>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d072      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a7d      	ldr	r2, [pc, #500]	; (80041a8 <DMA_SetConfig+0x220>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d06d      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a7c      	ldr	r2, [pc, #496]	; (80041ac <DMA_SetConfig+0x224>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d068      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a7a      	ldr	r2, [pc, #488]	; (80041b0 <DMA_SetConfig+0x228>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d063      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a79      	ldr	r2, [pc, #484]	; (80041b4 <DMA_SetConfig+0x22c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d05e      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a77      	ldr	r2, [pc, #476]	; (80041b8 <DMA_SetConfig+0x230>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d059      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a76      	ldr	r2, [pc, #472]	; (80041bc <DMA_SetConfig+0x234>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d054      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a74      	ldr	r2, [pc, #464]	; (80041c0 <DMA_SetConfig+0x238>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d04f      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a73      	ldr	r2, [pc, #460]	; (80041c4 <DMA_SetConfig+0x23c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d04a      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a71      	ldr	r2, [pc, #452]	; (80041c8 <DMA_SetConfig+0x240>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d045      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a70      	ldr	r2, [pc, #448]	; (80041cc <DMA_SetConfig+0x244>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d040      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a6e      	ldr	r2, [pc, #440]	; (80041d0 <DMA_SetConfig+0x248>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d03b      	beq.n	8004092 <DMA_SetConfig+0x10a>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a6d      	ldr	r2, [pc, #436]	; (80041d4 <DMA_SetConfig+0x24c>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d036      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a6b      	ldr	r2, [pc, #428]	; (80041d8 <DMA_SetConfig+0x250>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d031      	beq.n	8004092 <DMA_SetConfig+0x10a>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a6a      	ldr	r2, [pc, #424]	; (80041dc <DMA_SetConfig+0x254>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d02c      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a68      	ldr	r2, [pc, #416]	; (80041e0 <DMA_SetConfig+0x258>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d027      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a67      	ldr	r2, [pc, #412]	; (80041e4 <DMA_SetConfig+0x25c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d022      	beq.n	8004092 <DMA_SetConfig+0x10a>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a65      	ldr	r2, [pc, #404]	; (80041e8 <DMA_SetConfig+0x260>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d01d      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a64      	ldr	r2, [pc, #400]	; (80041ec <DMA_SetConfig+0x264>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d018      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a62      	ldr	r2, [pc, #392]	; (80041f0 <DMA_SetConfig+0x268>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <DMA_SetConfig+0x10a>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a61      	ldr	r2, [pc, #388]	; (80041f4 <DMA_SetConfig+0x26c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a5f      	ldr	r2, [pc, #380]	; (80041f8 <DMA_SetConfig+0x270>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <DMA_SetConfig+0x10a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a5e      	ldr	r2, [pc, #376]	; (80041fc <DMA_SetConfig+0x274>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <DMA_SetConfig+0x10a>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a5c      	ldr	r2, [pc, #368]	; (8004200 <DMA_SetConfig+0x278>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d101      	bne.n	8004096 <DMA_SetConfig+0x10e>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <DMA_SetConfig+0x110>
 8004096:	2300      	movs	r3, #0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00d      	beq.n	80040b8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040a4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d004      	beq.n	80040b8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040b6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a39      	ldr	r2, [pc, #228]	; (80041a4 <DMA_SetConfig+0x21c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d04a      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a38      	ldr	r2, [pc, #224]	; (80041a8 <DMA_SetConfig+0x220>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d045      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a36      	ldr	r2, [pc, #216]	; (80041ac <DMA_SetConfig+0x224>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d040      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a35      	ldr	r2, [pc, #212]	; (80041b0 <DMA_SetConfig+0x228>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d03b      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a33      	ldr	r2, [pc, #204]	; (80041b4 <DMA_SetConfig+0x22c>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d036      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a32      	ldr	r2, [pc, #200]	; (80041b8 <DMA_SetConfig+0x230>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d031      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a30      	ldr	r2, [pc, #192]	; (80041bc <DMA_SetConfig+0x234>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d02c      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a2f      	ldr	r2, [pc, #188]	; (80041c0 <DMA_SetConfig+0x238>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d027      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a2d      	ldr	r2, [pc, #180]	; (80041c4 <DMA_SetConfig+0x23c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d022      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2c      	ldr	r2, [pc, #176]	; (80041c8 <DMA_SetConfig+0x240>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d01d      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a2a      	ldr	r2, [pc, #168]	; (80041cc <DMA_SetConfig+0x244>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d018      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <DMA_SetConfig+0x248>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d013      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a27      	ldr	r2, [pc, #156]	; (80041d4 <DMA_SetConfig+0x24c>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d00e      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a26      	ldr	r2, [pc, #152]	; (80041d8 <DMA_SetConfig+0x250>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d009      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a24      	ldr	r2, [pc, #144]	; (80041dc <DMA_SetConfig+0x254>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d004      	beq.n	8004158 <DMA_SetConfig+0x1d0>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a23      	ldr	r2, [pc, #140]	; (80041e0 <DMA_SetConfig+0x258>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d101      	bne.n	800415c <DMA_SetConfig+0x1d4>
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <DMA_SetConfig+0x1d6>
 800415c:	2300      	movs	r3, #0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d059      	beq.n	8004216 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	223f      	movs	r2, #63	; 0x3f
 800416c:	409a      	lsls	r2, r3
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004180:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b40      	cmp	r3, #64	; 0x40
 8004190:	d138      	bne.n	8004204 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80041a2:	e086      	b.n	80042b2 <DMA_SetConfig+0x32a>
 80041a4:	40020010 	.word	0x40020010
 80041a8:	40020028 	.word	0x40020028
 80041ac:	40020040 	.word	0x40020040
 80041b0:	40020058 	.word	0x40020058
 80041b4:	40020070 	.word	0x40020070
 80041b8:	40020088 	.word	0x40020088
 80041bc:	400200a0 	.word	0x400200a0
 80041c0:	400200b8 	.word	0x400200b8
 80041c4:	40020410 	.word	0x40020410
 80041c8:	40020428 	.word	0x40020428
 80041cc:	40020440 	.word	0x40020440
 80041d0:	40020458 	.word	0x40020458
 80041d4:	40020470 	.word	0x40020470
 80041d8:	40020488 	.word	0x40020488
 80041dc:	400204a0 	.word	0x400204a0
 80041e0:	400204b8 	.word	0x400204b8
 80041e4:	58025408 	.word	0x58025408
 80041e8:	5802541c 	.word	0x5802541c
 80041ec:	58025430 	.word	0x58025430
 80041f0:	58025444 	.word	0x58025444
 80041f4:	58025458 	.word	0x58025458
 80041f8:	5802546c 	.word	0x5802546c
 80041fc:	58025480 	.word	0x58025480
 8004200:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	60da      	str	r2, [r3, #12]
}
 8004214:	e04d      	b.n	80042b2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a29      	ldr	r2, [pc, #164]	; (80042c0 <DMA_SetConfig+0x338>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d022      	beq.n	8004266 <DMA_SetConfig+0x2de>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a27      	ldr	r2, [pc, #156]	; (80042c4 <DMA_SetConfig+0x33c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <DMA_SetConfig+0x2de>
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a26      	ldr	r2, [pc, #152]	; (80042c8 <DMA_SetConfig+0x340>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d018      	beq.n	8004266 <DMA_SetConfig+0x2de>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a24      	ldr	r2, [pc, #144]	; (80042cc <DMA_SetConfig+0x344>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <DMA_SetConfig+0x2de>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <DMA_SetConfig+0x348>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <DMA_SetConfig+0x2de>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a21      	ldr	r2, [pc, #132]	; (80042d4 <DMA_SetConfig+0x34c>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <DMA_SetConfig+0x2de>
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a20      	ldr	r2, [pc, #128]	; (80042d8 <DMA_SetConfig+0x350>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <DMA_SetConfig+0x2de>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a1e      	ldr	r2, [pc, #120]	; (80042dc <DMA_SetConfig+0x354>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d101      	bne.n	800426a <DMA_SetConfig+0x2e2>
 8004266:	2301      	movs	r3, #1
 8004268:	e000      	b.n	800426c <DMA_SetConfig+0x2e4>
 800426a:	2300      	movs	r3, #0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004274:	f003 031f 	and.w	r3, r3, #31
 8004278:	2201      	movs	r2, #1
 800427a:	409a      	lsls	r2, r3
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b40      	cmp	r3, #64	; 0x40
 800428e:	d108      	bne.n	80042a2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	60da      	str	r2, [r3, #12]
}
 80042a0:	e007      	b.n	80042b2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	60da      	str	r2, [r3, #12]
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	58025408 	.word	0x58025408
 80042c4:	5802541c 	.word	0x5802541c
 80042c8:	58025430 	.word	0x58025430
 80042cc:	58025444 	.word	0x58025444
 80042d0:	58025458 	.word	0x58025458
 80042d4:	5802546c 	.word	0x5802546c
 80042d8:	58025480 	.word	0x58025480
 80042dc:	58025494 	.word	0x58025494

080042e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a42      	ldr	r2, [pc, #264]	; (80043f8 <DMA_CalcBaseAndBitshift+0x118>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d04a      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a41      	ldr	r2, [pc, #260]	; (80043fc <DMA_CalcBaseAndBitshift+0x11c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d045      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a3f      	ldr	r2, [pc, #252]	; (8004400 <DMA_CalcBaseAndBitshift+0x120>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d040      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a3e      	ldr	r2, [pc, #248]	; (8004404 <DMA_CalcBaseAndBitshift+0x124>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d03b      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a3c      	ldr	r2, [pc, #240]	; (8004408 <DMA_CalcBaseAndBitshift+0x128>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d036      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3b      	ldr	r2, [pc, #236]	; (800440c <DMA_CalcBaseAndBitshift+0x12c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d031      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a39      	ldr	r2, [pc, #228]	; (8004410 <DMA_CalcBaseAndBitshift+0x130>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d02c      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a38      	ldr	r2, [pc, #224]	; (8004414 <DMA_CalcBaseAndBitshift+0x134>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d027      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a36      	ldr	r2, [pc, #216]	; (8004418 <DMA_CalcBaseAndBitshift+0x138>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d022      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a35      	ldr	r2, [pc, #212]	; (800441c <DMA_CalcBaseAndBitshift+0x13c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d01d      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a33      	ldr	r2, [pc, #204]	; (8004420 <DMA_CalcBaseAndBitshift+0x140>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d018      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a32      	ldr	r2, [pc, #200]	; (8004424 <DMA_CalcBaseAndBitshift+0x144>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a30      	ldr	r2, [pc, #192]	; (8004428 <DMA_CalcBaseAndBitshift+0x148>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d00e      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2f      	ldr	r2, [pc, #188]	; (800442c <DMA_CalcBaseAndBitshift+0x14c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d009      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2d      	ldr	r2, [pc, #180]	; (8004430 <DMA_CalcBaseAndBitshift+0x150>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d004      	beq.n	8004388 <DMA_CalcBaseAndBitshift+0xa8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2c      	ldr	r2, [pc, #176]	; (8004434 <DMA_CalcBaseAndBitshift+0x154>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d101      	bne.n	800438c <DMA_CalcBaseAndBitshift+0xac>
 8004388:	2301      	movs	r3, #1
 800438a:	e000      	b.n	800438e <DMA_CalcBaseAndBitshift+0xae>
 800438c:	2300      	movs	r3, #0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d024      	beq.n	80043dc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	b2db      	uxtb	r3, r3
 8004398:	3b10      	subs	r3, #16
 800439a:	4a27      	ldr	r2, [pc, #156]	; (8004438 <DMA_CalcBaseAndBitshift+0x158>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	091b      	lsrs	r3, r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0307 	and.w	r3, r3, #7
 80043aa:	4a24      	ldr	r2, [pc, #144]	; (800443c <DMA_CalcBaseAndBitshift+0x15c>)
 80043ac:	5cd3      	ldrb	r3, [r2, r3]
 80043ae:	461a      	mov	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d908      	bls.n	80043cc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	461a      	mov	r2, r3
 80043c0:	4b1f      	ldr	r3, [pc, #124]	; (8004440 <DMA_CalcBaseAndBitshift+0x160>)
 80043c2:	4013      	ands	r3, r2
 80043c4:	1d1a      	adds	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	659a      	str	r2, [r3, #88]	; 0x58
 80043ca:	e00d      	b.n	80043e8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	461a      	mov	r2, r3
 80043d2:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <DMA_CalcBaseAndBitshift+0x160>)
 80043d4:	4013      	ands	r3, r2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	6593      	str	r3, [r2, #88]	; 0x58
 80043da:	e005      	b.n	80043e8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3714      	adds	r7, #20
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	40020010 	.word	0x40020010
 80043fc:	40020028 	.word	0x40020028
 8004400:	40020040 	.word	0x40020040
 8004404:	40020058 	.word	0x40020058
 8004408:	40020070 	.word	0x40020070
 800440c:	40020088 	.word	0x40020088
 8004410:	400200a0 	.word	0x400200a0
 8004414:	400200b8 	.word	0x400200b8
 8004418:	40020410 	.word	0x40020410
 800441c:	40020428 	.word	0x40020428
 8004420:	40020440 	.word	0x40020440
 8004424:	40020458 	.word	0x40020458
 8004428:	40020470 	.word	0x40020470
 800442c:	40020488 	.word	0x40020488
 8004430:	400204a0 	.word	0x400204a0
 8004434:	400204b8 	.word	0x400204b8
 8004438:	aaaaaaab 	.word	0xaaaaaaab
 800443c:	0800b348 	.word	0x0800b348
 8004440:	fffffc00 	.word	0xfffffc00

08004444 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d120      	bne.n	800449a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	2b03      	cmp	r3, #3
 800445e:	d858      	bhi.n	8004512 <DMA_CheckFifoParam+0xce>
 8004460:	a201      	add	r2, pc, #4	; (adr r2, 8004468 <DMA_CheckFifoParam+0x24>)
 8004462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004466:	bf00      	nop
 8004468:	08004479 	.word	0x08004479
 800446c:	0800448b 	.word	0x0800448b
 8004470:	08004479 	.word	0x08004479
 8004474:	08004513 	.word	0x08004513
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d048      	beq.n	8004516 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004488:	e045      	b.n	8004516 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004492:	d142      	bne.n	800451a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004498:	e03f      	b.n	800451a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044a2:	d123      	bne.n	80044ec <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d838      	bhi.n	800451e <DMA_CheckFifoParam+0xda>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <DMA_CheckFifoParam+0x70>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044cb 	.word	0x080044cb
 80044bc:	080044c5 	.word	0x080044c5
 80044c0:	080044dd 	.word	0x080044dd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	73fb      	strb	r3, [r7, #15]
        break;
 80044c8:	e030      	b.n	800452c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d025      	beq.n	8004522 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044da:	e022      	b.n	8004522 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044e4:	d11f      	bne.n	8004526 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ea:	e01c      	b.n	8004526 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d902      	bls.n	80044fa <DMA_CheckFifoParam+0xb6>
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d003      	beq.n	8004500 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044f8:	e018      	b.n	800452c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	73fb      	strb	r3, [r7, #15]
        break;
 80044fe:	e015      	b.n	800452c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004504:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00e      	beq.n	800452a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
    break;
 8004510:	e00b      	b.n	800452a <DMA_CheckFifoParam+0xe6>
        break;
 8004512:	bf00      	nop
 8004514:	e00a      	b.n	800452c <DMA_CheckFifoParam+0xe8>
        break;
 8004516:	bf00      	nop
 8004518:	e008      	b.n	800452c <DMA_CheckFifoParam+0xe8>
        break;
 800451a:	bf00      	nop
 800451c:	e006      	b.n	800452c <DMA_CheckFifoParam+0xe8>
        break;
 800451e:	bf00      	nop
 8004520:	e004      	b.n	800452c <DMA_CheckFifoParam+0xe8>
        break;
 8004522:	bf00      	nop
 8004524:	e002      	b.n	800452c <DMA_CheckFifoParam+0xe8>
        break;
 8004526:	bf00      	nop
 8004528:	e000      	b.n	800452c <DMA_CheckFifoParam+0xe8>
    break;
 800452a:	bf00      	nop
    }
  }

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop

0800453c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a38      	ldr	r2, [pc, #224]	; (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d022      	beq.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a36      	ldr	r2, [pc, #216]	; (8004634 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d01d      	beq.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a35      	ldr	r2, [pc, #212]	; (8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d018      	beq.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a33      	ldr	r2, [pc, #204]	; (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d013      	beq.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a32      	ldr	r2, [pc, #200]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d00e      	beq.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a30      	ldr	r2, [pc, #192]	; (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d009      	beq.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a2f      	ldr	r2, [pc, #188]	; (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d004      	beq.n	800459a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a2d      	ldr	r2, [pc, #180]	; (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d101      	bne.n	800459e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800459a:	2301      	movs	r3, #1
 800459c:	e000      	b.n	80045a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800459e:	2300      	movs	r3, #0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d01a      	beq.n	80045da <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	3b08      	subs	r3, #8
 80045ac:	4a28      	ldr	r2, [pc, #160]	; (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	4b26      	ldr	r3, [pc, #152]	; (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a24      	ldr	r2, [pc, #144]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045c8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 031f 	and.w	r3, r3, #31
 80045d0:	2201      	movs	r2, #1
 80045d2:	409a      	lsls	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80045d8:	e024      	b.n	8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3b10      	subs	r3, #16
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	091b      	lsrs	r3, r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a1c      	ldr	r2, [pc, #112]	; (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d806      	bhi.n	8004602 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	4a1b      	ldr	r2, [pc, #108]	; (8004664 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d902      	bls.n	8004602 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	3308      	adds	r3, #8
 8004600:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	4b18      	ldr	r3, [pc, #96]	; (8004668 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004606:	4413      	add	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	461a      	mov	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a16      	ldr	r2, [pc, #88]	; (800466c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004614:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 031f 	and.w	r3, r3, #31
 800461c:	2201      	movs	r2, #1
 800461e:	409a      	lsls	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	58025408 	.word	0x58025408
 8004634:	5802541c 	.word	0x5802541c
 8004638:	58025430 	.word	0x58025430
 800463c:	58025444 	.word	0x58025444
 8004640:	58025458 	.word	0x58025458
 8004644:	5802546c 	.word	0x5802546c
 8004648:	58025480 	.word	0x58025480
 800464c:	58025494 	.word	0x58025494
 8004650:	cccccccd 	.word	0xcccccccd
 8004654:	16009600 	.word	0x16009600
 8004658:	58025880 	.word	0x58025880
 800465c:	aaaaaaab 	.word	0xaaaaaaab
 8004660:	400204b8 	.word	0x400204b8
 8004664:	4002040f 	.word	0x4002040f
 8004668:	10008200 	.word	0x10008200
 800466c:	40020880 	.word	0x40020880

08004670 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004670:	b480      	push	{r7}
 8004672:	b085      	sub	sp, #20
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d04a      	beq.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b08      	cmp	r3, #8
 800468a:	d847      	bhi.n	800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a25      	ldr	r2, [pc, #148]	; (8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d022      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a24      	ldr	r2, [pc, #144]	; (800472c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d01d      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a22      	ldr	r2, [pc, #136]	; (8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d018      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a21      	ldr	r2, [pc, #132]	; (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d013      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d00e      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1e      	ldr	r2, [pc, #120]	; (800473c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d009      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d004      	beq.n	80046dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a1b      	ldr	r2, [pc, #108]	; (8004744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80046dc:	2301      	movs	r3, #1
 80046de:	e000      	b.n	80046e2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046e0:	2300      	movs	r3, #0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046ea:	4413      	add	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	461a      	mov	r2, r3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a15      	ldr	r2, [pc, #84]	; (800474c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046f8:	671a      	str	r2, [r3, #112]	; 0x70
 80046fa:	e009      	b.n	8004710 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4b14      	ldr	r3, [pc, #80]	; (8004750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	461a      	mov	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a11      	ldr	r2, [pc, #68]	; (8004754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800470e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3b01      	subs	r3, #1
 8004714:	2201      	movs	r2, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800471c:	bf00      	nop
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr
 8004728:	58025408 	.word	0x58025408
 800472c:	5802541c 	.word	0x5802541c
 8004730:	58025430 	.word	0x58025430
 8004734:	58025444 	.word	0x58025444
 8004738:	58025458 	.word	0x58025458
 800473c:	5802546c 	.word	0x5802546c
 8004740:	58025480 	.word	0x58025480
 8004744:	58025494 	.word	0x58025494
 8004748:	1600963f 	.word	0x1600963f
 800474c:	58025940 	.word	0x58025940
 8004750:	1000823f 	.word	0x1000823f
 8004754:	40020940 	.word	0x40020940

08004758 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e0cf      	b.n	800490a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2223      	movs	r2, #35	; 0x23
 8004778:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fc fc61 	bl	8001044 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004782:	4b64      	ldr	r3, [pc, #400]	; (8004914 <HAL_ETH_Init+0x1bc>)
 8004784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004788:	4a62      	ldr	r2, [pc, #392]	; (8004914 <HAL_ETH_Init+0x1bc>)
 800478a:	f043 0302 	orr.w	r3, r3, #2
 800478e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004792:	4b60      	ldr	r3, [pc, #384]	; (8004914 <HAL_ETH_Init+0x1bc>)
 8004794:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	7a1b      	ldrb	r3, [r3, #8]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80047a8:	2000      	movs	r0, #0
 80047aa:	f7fd f869 	bl	8001880 <HAL_SYSCFG_ETHInterfaceSelect>
 80047ae:	e003      	b.n	80047b8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80047b0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80047b4:	f7fd f864 	bl	8001880 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80047b8:	4b57      	ldr	r3, [pc, #348]	; (8004918 <HAL_ETH_Init+0x1c0>)
 80047ba:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6812      	ldr	r2, [r2, #0]
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047d4:	f7fd f818 	bl	8001808 <HAL_GetTick>
 80047d8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80047da:	e011      	b.n	8004800 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80047dc:	f7fd f814 	bl	8001808 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047ea:	d909      	bls.n	8004800 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2204      	movs	r2, #4
 80047f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	22e0      	movs	r2, #224	; 0xe0
 80047f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e084      	b.n	800490a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1e4      	bne.n	80047dc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f886 	bl	8004924 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004818:	f001 fee4 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 800481c:	4603      	mov	r3, r0
 800481e:	4a3f      	ldr	r2, [pc, #252]	; (800491c <HAL_ETH_Init+0x1c4>)
 8004820:	fba2 2303 	umull	r2, r3, r2, r3
 8004824:	0c9a      	lsrs	r2, r3, #18
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	3a01      	subs	r2, #1
 800482c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fa71 	bl	8004d18 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800483e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004842:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	6812      	ldr	r2, [r2, #0]
 800484a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800484e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004852:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	22e0      	movs	r2, #224	; 0xe0
 800486e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e049      	b.n	800490a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800487e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004882:	4b27      	ldr	r3, [pc, #156]	; (8004920 <HAL_ETH_Init+0x1c8>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6952      	ldr	r2, [r2, #20]
 800488a:	0051      	lsls	r1, r2, #1
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	6812      	ldr	r2, [r2, #0]
 8004890:	430b      	orrs	r3, r1
 8004892:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004896:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fad9 	bl	8004e52 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 fb1f 	bl	8004ee4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	3305      	adds	r3, #5
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	021a      	lsls	r2, r3, #8
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	3304      	adds	r3, #4
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	3303      	adds	r3, #3
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	061a      	lsls	r2, r3, #24
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	3302      	adds	r3, #2
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	041b      	lsls	r3, r3, #16
 80048d8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	3301      	adds	r3, #1
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80048f2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2210      	movs	r2, #16
 8004904:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	58024400 	.word	0x58024400
 8004918:	58000400 	.word	0x58000400
 800491c:	431bde83 	.word	0x431bde83
 8004920:	ffff8001 	.word	0xffff8001

08004924 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004934:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800493c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800493e:	f001 fe51 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8004942:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d908      	bls.n	800495e <HAL_ETH_SetMDIOClockRange+0x3a>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a1d      	ldr	r2, [pc, #116]	; (80049c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d804      	bhi.n	800495e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	e027      	b.n	80049ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	4a18      	ldr	r2, [pc, #96]	; (80049c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d908      	bls.n	8004978 <HAL_ETH_SetMDIOClockRange+0x54>
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4a17      	ldr	r2, [pc, #92]	; (80049c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d204      	bcs.n	8004978 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	e01a      	b.n	80049ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a13      	ldr	r2, [pc, #76]	; (80049c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d303      	bcc.n	8004988 <HAL_ETH_SetMDIOClockRange+0x64>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a12      	ldr	r2, [pc, #72]	; (80049cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d911      	bls.n	80049ac <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	4a10      	ldr	r2, [pc, #64]	; (80049cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d908      	bls.n	80049a2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4a0f      	ldr	r2, [pc, #60]	; (80049d0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d804      	bhi.n	80049a2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	e005      	b.n	80049ae <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	e000      	b.n	80049ae <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80049ac:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	01312cff 	.word	0x01312cff
 80049c4:	02160ebf 	.word	0x02160ebf
 80049c8:	03938700 	.word	0x03938700
 80049cc:	05f5e0ff 	.word	0x05f5e0ff
 80049d0:	08f0d17f 	.word	0x08f0d17f

080049d4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80049e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	791b      	ldrb	r3, [r3, #4]
 80049ec:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80049ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	7b1b      	ldrb	r3, [r3, #12]
 80049f4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80049f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	7b5b      	ldrb	r3, [r3, #13]
 80049fc:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80049fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	7b9b      	ldrb	r3, [r3, #14]
 8004a04:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	7bdb      	ldrb	r3, [r3, #15]
 8004a0c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004a0e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	7c12      	ldrb	r2, [r2, #16]
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	d102      	bne.n	8004a1e <ETH_SetMACConfig+0x4a>
 8004a18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a1c:	e000      	b.n	8004a20 <ETH_SetMACConfig+0x4c>
 8004a1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a20:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	7c52      	ldrb	r2, [r2, #17]
 8004a26:	2a00      	cmp	r2, #0
 8004a28:	d102      	bne.n	8004a30 <ETH_SetMACConfig+0x5c>
 8004a2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a2e:	e000      	b.n	8004a32 <ETH_SetMACConfig+0x5e>
 8004a30:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a32:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	7c9b      	ldrb	r3, [r3, #18]
 8004a38:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a3a:	431a      	orrs	r2, r3
               macconf->Speed |
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004a40:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004a46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	7f1b      	ldrb	r3, [r3, #28]
 8004a4c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	7f5b      	ldrb	r3, [r3, #29]
 8004a54:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004a56:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	7f92      	ldrb	r2, [r2, #30]
 8004a5c:	2a00      	cmp	r2, #0
 8004a5e:	d102      	bne.n	8004a66 <ETH_SetMACConfig+0x92>
 8004a60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a64:	e000      	b.n	8004a68 <ETH_SetMACConfig+0x94>
 8004a66:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004a68:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	7fdb      	ldrb	r3, [r3, #31]
 8004a6e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004a70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004a78:	2a00      	cmp	r2, #0
 8004a7a:	d102      	bne.n	8004a82 <ETH_SetMACConfig+0xae>
 8004a7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a80:	e000      	b.n	8004a84 <ETH_SetMACConfig+0xb0>
 8004a82:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004a84:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004a8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a92:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004a94:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	4b56      	ldr	r3, [pc, #344]	; (8004c00 <ETH_SetMACConfig+0x22c>)
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	6812      	ldr	r2, [r2, #0]
 8004aac:	68f9      	ldr	r1, [r7, #12]
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004abe:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004ac0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ac8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004aca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ad2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004ad4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004adc:	2a00      	cmp	r2, #0
 8004ade:	d102      	bne.n	8004ae6 <ETH_SetMACConfig+0x112>
 8004ae0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ae4:	e000      	b.n	8004ae8 <ETH_SetMACConfig+0x114>
 8004ae6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004ae8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004aee:	4313      	orrs	r3, r2
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685a      	ldr	r2, [r3, #4]
 8004af8:	4b42      	ldr	r3, [pc, #264]	; (8004c04 <ETH_SetMACConfig+0x230>)
 8004afa:	4013      	ands	r3, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	6812      	ldr	r2, [r2, #0]
 8004b00:	68f9      	ldr	r1, [r7, #12]
 8004b02:	430b      	orrs	r3, r1
 8004b04:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b0c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b12:	4313      	orrs	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	4b3a      	ldr	r3, [pc, #232]	; (8004c08 <ETH_SetMACConfig+0x234>)
 8004b1e:	4013      	ands	r3, r2
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	6812      	ldr	r2, [r2, #0]
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	430b      	orrs	r3, r1
 8004b28:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004b30:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b36:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004b38:	683a      	ldr	r2, [r7, #0]
 8004b3a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004b3e:	2a00      	cmp	r2, #0
 8004b40:	d101      	bne.n	8004b46 <ETH_SetMACConfig+0x172>
 8004b42:	2280      	movs	r2, #128	; 0x80
 8004b44:	e000      	b.n	8004b48 <ETH_SetMACConfig+0x174>
 8004b46:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004b48:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b50:	4313      	orrs	r3, r2
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b5a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004b5e:	4013      	ands	r3, r2
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	6812      	ldr	r2, [r2, #0]
 8004b64:	68f9      	ldr	r1, [r7, #12]
 8004b66:	430b      	orrs	r3, r1
 8004b68:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004b70:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004b78:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b86:	f023 0103 	bic.w	r1, r3, #3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004b9e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004bba:	2a00      	cmp	r2, #0
 8004bbc:	d101      	bne.n	8004bc2 <ETH_SetMACConfig+0x1ee>
 8004bbe:	2240      	movs	r2, #64	; 0x40
 8004bc0:	e000      	b.n	8004bc4 <ETH_SetMACConfig+0x1f0>
 8004bc2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004bc4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004bcc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004bce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004bd6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004be4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	00048083 	.word	0x00048083
 8004c04:	c0f88000 	.word	0xc0f88000
 8004c08:	fffffef0 	.word	0xfffffef0

08004c0c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	4b38      	ldr	r3, [pc, #224]	; (8004d04 <ETH_SetDMAConfig+0xf8>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	6811      	ldr	r1, [r2, #0]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	430b      	orrs	r3, r1
 8004c2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c32:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	791b      	ldrb	r3, [r3, #4]
 8004c38:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c3e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	7b1b      	ldrb	r3, [r3, #12]
 8004c44:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c46:	4313      	orrs	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c52:	685a      	ldr	r2, [r3, #4]
 8004c54:	4b2c      	ldr	r3, [pc, #176]	; (8004d08 <ETH_SetDMAConfig+0xfc>)
 8004c56:	4013      	ands	r3, r2
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	6812      	ldr	r2, [r2, #0]
 8004c5c:	68f9      	ldr	r1, [r7, #12]
 8004c5e:	430b      	orrs	r3, r1
 8004c60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c64:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	7b5b      	ldrb	r3, [r3, #13]
 8004c6a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c70:	4313      	orrs	r3, r2
 8004c72:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c7c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004c80:	4b22      	ldr	r3, [pc, #136]	; (8004d0c <ETH_SetDMAConfig+0x100>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6812      	ldr	r2, [r2, #0]
 8004c88:	68f9      	ldr	r1, [r7, #12]
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c90:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	7d1b      	ldrb	r3, [r3, #20]
 8004c9c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	7f5b      	ldrb	r3, [r3, #29]
 8004ca4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cb2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004cb6:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <ETH_SetDMAConfig+0x104>)
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cc6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	7f1b      	ldrb	r3, [r3, #28]
 8004cce:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ce0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <ETH_SetDMAConfig+0x108>)
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	6812      	ldr	r2, [r2, #0]
 8004cec:	68f9      	ldr	r1, [r7, #12]
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cf4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004cf8:	bf00      	nop
 8004cfa:	3714      	adds	r7, #20
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr
 8004d04:	ffff87fd 	.word	0xffff87fd
 8004d08:	ffff2ffe 	.word	0xffff2ffe
 8004d0c:	fffec000 	.word	0xfffec000
 8004d10:	ffc0efef 	.word	0xffc0efef
 8004d14:	7fc0ffff 	.word	0x7fc0ffff

08004d18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b0a4      	sub	sp, #144	; 0x90
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004d26:	2300      	movs	r3, #0
 8004d28:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004d42:	2301      	movs	r3, #1
 8004d44:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004d54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d58:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004d64:	2300      	movs	r3, #0
 8004d66:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004d70:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004d74:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004d86:	2300      	movs	r3, #0
 8004d88:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004d92:	2300      	movs	r3, #0
 8004d94:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004db0:	2320      	movs	r3, #32
 8004db2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004dc2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004dc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dcc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004de0:	2300      	movs	r3, #0
 8004de2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004df2:	2300      	movs	r3, #0
 8004df4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004dfc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7ff fde6 	bl	80049d4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004e10:	2300      	movs	r3, #0
 8004e12:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004e14:	2300      	movs	r3, #0
 8004e16:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e22:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e26:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004e2c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e30:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004e32:	2300      	movs	r3, #0
 8004e34:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004e38:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004e3c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004e3e:	f107 0308 	add.w	r3, r7, #8
 8004e42:	4619      	mov	r1, r3
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7ff fee1 	bl	8004c0c <ETH_SetDMAConfig>
}
 8004e4a:	bf00      	nop
 8004e4c:	3790      	adds	r7, #144	; 0x90
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
 8004e5e:	e01d      	b.n	8004e9c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68d9      	ldr	r1, [r3, #12]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	4613      	mov	r3, r2
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	4413      	add	r3, r2
 8004e6c:	00db      	lsls	r3, r3, #3
 8004e6e:	440b      	add	r3, r1
 8004e70:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2200      	movs	r2, #0
 8004e82:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2200      	movs	r2, #0
 8004e88:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004e8a:	68b9      	ldr	r1, [r7, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	3206      	adds	r2, #6
 8004e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	3301      	adds	r3, #1
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b03      	cmp	r3, #3
 8004ea0:	d9de      	bls.n	8004e60 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68da      	ldr	r2, [r3, #12]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ed4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004ed8:	bf00      	nop
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004eec:	2300      	movs	r3, #0
 8004eee:	60fb      	str	r3, [r7, #12]
 8004ef0:	e023      	b.n	8004f3a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6919      	ldr	r1, [r3, #16]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	005b      	lsls	r3, r3, #1
 8004efc:	4413      	add	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	440b      	add	r3, r1
 8004f02:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2200      	movs	r2, #0
 8004f08:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	2200      	movs	r2, #0
 8004f14:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2200      	movs	r2, #0
 8004f26:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	3212      	adds	r2, #18
 8004f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	3301      	adds	r3, #1
 8004f38:	60fb      	str	r3, [r7, #12]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d9d8      	bls.n	8004ef2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f66:	461a      	mov	r2, r3
 8004f68:	2303      	movs	r3, #3
 8004f6a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691a      	ldr	r2, [r3, #16]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	691b      	ldr	r3, [r3, #16]
 8004f82:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004f92:	bf00      	nop
 8004f94:	3714      	adds	r7, #20
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b089      	sub	sp, #36	; 0x24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004fae:	4b89      	ldr	r3, [pc, #548]	; (80051d4 <HAL_GPIO_Init+0x234>)
 8004fb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fb2:	e194      	b.n	80052de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2101      	movs	r1, #1
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	f000 8186 	beq.w	80052d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f003 0303 	and.w	r3, r3, #3
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d005      	beq.n	8004fe4 <HAL_GPIO_Init+0x44>
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f003 0303 	and.w	r3, r3, #3
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d130      	bne.n	8005046 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	005b      	lsls	r3, r3, #1
 8004fee:	2203      	movs	r2, #3
 8004ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	68da      	ldr	r2, [r3, #12]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800501a:	2201      	movs	r2, #1
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	091b      	lsrs	r3, r3, #4
 8005030:	f003 0201 	and.w	r2, r3, #1
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	fa02 f303 	lsl.w	r3, r2, r3
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	4313      	orrs	r3, r2
 800503e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f003 0303 	and.w	r3, r3, #3
 800504e:	2b03      	cmp	r3, #3
 8005050:	d017      	beq.n	8005082 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	2203      	movs	r2, #3
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43db      	mvns	r3, r3
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4013      	ands	r3, r2
 8005068:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	005b      	lsls	r3, r3, #1
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	4313      	orrs	r3, r2
 800507a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d123      	bne.n	80050d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	08da      	lsrs	r2, r3, #3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3208      	adds	r2, #8
 8005096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	220f      	movs	r2, #15
 80050a6:	fa02 f303 	lsl.w	r3, r2, r3
 80050aa:	43db      	mvns	r3, r3
 80050ac:	69ba      	ldr	r2, [r7, #24]
 80050ae:	4013      	ands	r3, r2
 80050b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	691a      	ldr	r2, [r3, #16]
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	fa02 f303 	lsl.w	r3, r2, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	08da      	lsrs	r2, r3, #3
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	3208      	adds	r2, #8
 80050d0:	69b9      	ldr	r1, [r7, #24]
 80050d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	2203      	movs	r2, #3
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43db      	mvns	r3, r3
 80050e8:	69ba      	ldr	r2, [r7, #24]
 80050ea:	4013      	ands	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f003 0203 	and.w	r2, r3, #3
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	005b      	lsls	r3, r3, #1
 80050fa:	fa02 f303 	lsl.w	r3, r2, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4313      	orrs	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005112:	2b00      	cmp	r3, #0
 8005114:	f000 80e0 	beq.w	80052d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005118:	4b2f      	ldr	r3, [pc, #188]	; (80051d8 <HAL_GPIO_Init+0x238>)
 800511a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800511e:	4a2e      	ldr	r2, [pc, #184]	; (80051d8 <HAL_GPIO_Init+0x238>)
 8005120:	f043 0302 	orr.w	r3, r3, #2
 8005124:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005128:	4b2b      	ldr	r3, [pc, #172]	; (80051d8 <HAL_GPIO_Init+0x238>)
 800512a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	60fb      	str	r3, [r7, #12]
 8005134:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005136:	4a29      	ldr	r2, [pc, #164]	; (80051dc <HAL_GPIO_Init+0x23c>)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	089b      	lsrs	r3, r3, #2
 800513c:	3302      	adds	r3, #2
 800513e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005142:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	220f      	movs	r2, #15
 800514e:	fa02 f303 	lsl.w	r3, r2, r3
 8005152:	43db      	mvns	r3, r3
 8005154:	69ba      	ldr	r2, [r7, #24]
 8005156:	4013      	ands	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a20      	ldr	r2, [pc, #128]	; (80051e0 <HAL_GPIO_Init+0x240>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d052      	beq.n	8005208 <HAL_GPIO_Init+0x268>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <HAL_GPIO_Init+0x244>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d031      	beq.n	80051ce <HAL_GPIO_Init+0x22e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1e      	ldr	r2, [pc, #120]	; (80051e8 <HAL_GPIO_Init+0x248>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02b      	beq.n	80051ca <HAL_GPIO_Init+0x22a>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1d      	ldr	r2, [pc, #116]	; (80051ec <HAL_GPIO_Init+0x24c>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d025      	beq.n	80051c6 <HAL_GPIO_Init+0x226>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1c      	ldr	r2, [pc, #112]	; (80051f0 <HAL_GPIO_Init+0x250>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d01f      	beq.n	80051c2 <HAL_GPIO_Init+0x222>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a1b      	ldr	r2, [pc, #108]	; (80051f4 <HAL_GPIO_Init+0x254>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d019      	beq.n	80051be <HAL_GPIO_Init+0x21e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a1a      	ldr	r2, [pc, #104]	; (80051f8 <HAL_GPIO_Init+0x258>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d013      	beq.n	80051ba <HAL_GPIO_Init+0x21a>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a19      	ldr	r2, [pc, #100]	; (80051fc <HAL_GPIO_Init+0x25c>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d00d      	beq.n	80051b6 <HAL_GPIO_Init+0x216>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a18      	ldr	r2, [pc, #96]	; (8005200 <HAL_GPIO_Init+0x260>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d007      	beq.n	80051b2 <HAL_GPIO_Init+0x212>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a17      	ldr	r2, [pc, #92]	; (8005204 <HAL_GPIO_Init+0x264>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d101      	bne.n	80051ae <HAL_GPIO_Init+0x20e>
 80051aa:	2309      	movs	r3, #9
 80051ac:	e02d      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051ae:	230a      	movs	r3, #10
 80051b0:	e02b      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051b2:	2308      	movs	r3, #8
 80051b4:	e029      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051b6:	2307      	movs	r3, #7
 80051b8:	e027      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051ba:	2306      	movs	r3, #6
 80051bc:	e025      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051be:	2305      	movs	r3, #5
 80051c0:	e023      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051c2:	2304      	movs	r3, #4
 80051c4:	e021      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051c6:	2303      	movs	r3, #3
 80051c8:	e01f      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e01d      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e01b      	b.n	800520a <HAL_GPIO_Init+0x26a>
 80051d2:	bf00      	nop
 80051d4:	58000080 	.word	0x58000080
 80051d8:	58024400 	.word	0x58024400
 80051dc:	58000400 	.word	0x58000400
 80051e0:	58020000 	.word	0x58020000
 80051e4:	58020400 	.word	0x58020400
 80051e8:	58020800 	.word	0x58020800
 80051ec:	58020c00 	.word	0x58020c00
 80051f0:	58021000 	.word	0x58021000
 80051f4:	58021400 	.word	0x58021400
 80051f8:	58021800 	.word	0x58021800
 80051fc:	58021c00 	.word	0x58021c00
 8005200:	58022000 	.word	0x58022000
 8005204:	58022400 	.word	0x58022400
 8005208:	2300      	movs	r3, #0
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	f002 0203 	and.w	r2, r2, #3
 8005210:	0092      	lsls	r2, r2, #2
 8005212:	4093      	lsls	r3, r2
 8005214:	69ba      	ldr	r2, [r7, #24]
 8005216:	4313      	orrs	r3, r2
 8005218:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800521a:	4938      	ldr	r1, [pc, #224]	; (80052fc <HAL_GPIO_Init+0x35c>)
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	089b      	lsrs	r3, r3, #2
 8005220:	3302      	adds	r3, #2
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	43db      	mvns	r3, r3
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	4013      	ands	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800524e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	43db      	mvns	r3, r3
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4013      	ands	r3, r2
 8005266:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d003      	beq.n	800527c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005274:	69ba      	ldr	r2, [r7, #24]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800527c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	43db      	mvns	r3, r3
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	4013      	ands	r3, r2
 8005292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d003      	beq.n	80052a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	43db      	mvns	r3, r3
 80052b8:	69ba      	ldr	r2, [r7, #24]
 80052ba:	4013      	ands	r3, r2
 80052bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052ca:	69ba      	ldr	r2, [r7, #24]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	3301      	adds	r3, #1
 80052dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	69fb      	ldr	r3, [r7, #28]
 80052e4:	fa22 f303 	lsr.w	r3, r2, r3
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f47f ae63 	bne.w	8004fb4 <HAL_GPIO_Init+0x14>
  }
}
 80052ee:	bf00      	nop
 80052f0:	bf00      	nop
 80052f2:	3724      	adds	r7, #36	; 0x24
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	58000400 	.word	0x58000400

08005300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	460b      	mov	r3, r1
 800530a:	807b      	strh	r3, [r7, #2]
 800530c:	4613      	mov	r3, r2
 800530e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005310:	787b      	ldrb	r3, [r7, #1]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005316:	887a      	ldrh	r2, [r7, #2]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800531c:	e003      	b.n	8005326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800531e:	887b      	ldrh	r3, [r7, #2]
 8005320:	041a      	lsls	r2, r3, #16
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	619a      	str	r2, [r3, #24]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005332:	b480      	push	{r7}
 8005334:	b085      	sub	sp, #20
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005344:	887a      	ldrh	r2, [r7, #2]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	4013      	ands	r3, r2
 800534a:	041a      	lsls	r2, r3, #16
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	43d9      	mvns	r1, r3
 8005350:	887b      	ldrh	r3, [r7, #2]
 8005352:	400b      	ands	r3, r1
 8005354:	431a      	orrs	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	619a      	str	r2, [r3, #24]
}
 800535a:	bf00      	nop
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
	...

08005368 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005368:	b480      	push	{r7}
 800536a:	b083      	sub	sp, #12
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <HAL_HSEM_FastTake+0x2c>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	3320      	adds	r3, #32
 8005376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537a:	4a07      	ldr	r2, [pc, #28]	; (8005398 <HAL_HSEM_FastTake+0x30>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d101      	bne.n	8005384 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
}
 8005386:	4618      	mov	r0, r3
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	58026400 	.word	0x58026400
 8005398:	80000300 	.word	0x80000300

0800539c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80053a6:	4906      	ldr	r1, [pc, #24]	; (80053c0 <HAL_HSEM_Release+0x24>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	58026400 	.word	0x58026400

080053c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053c6:	b08f      	sub	sp, #60	; 0x3c
 80053c8:	af0a      	add	r7, sp, #40	; 0x28
 80053ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e116      	b.n	8005604 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d106      	bne.n	80053f6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f7fc f86d 	bl	80014d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2203      	movs	r2, #3
 80053fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f005 fbe5 	bl	800abe4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	687e      	ldr	r6, [r7, #4]
 8005422:	466d      	mov	r5, sp
 8005424:	f106 0410 	add.w	r4, r6, #16
 8005428:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800542a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800542c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800542e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005430:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005434:	e885 0003 	stmia.w	r5, {r0, r1}
 8005438:	1d33      	adds	r3, r6, #4
 800543a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800543c:	6838      	ldr	r0, [r7, #0]
 800543e:	f005 fb63 	bl	800ab08 <USB_CoreInit>
 8005442:	4603      	mov	r3, r0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d005      	beq.n	8005454 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	e0d7      	b.n	8005604 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2100      	movs	r1, #0
 800545a:	4618      	mov	r0, r3
 800545c:	f005 fbd3 	bl	800ac06 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005460:	2300      	movs	r3, #0
 8005462:	73fb      	strb	r3, [r7, #15]
 8005464:	e04a      	b.n	80054fc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005466:	7bfa      	ldrb	r2, [r7, #15]
 8005468:	6879      	ldr	r1, [r7, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	00db      	lsls	r3, r3, #3
 800546e:	4413      	add	r3, r2
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	440b      	add	r3, r1
 8005474:	333d      	adds	r3, #61	; 0x3d
 8005476:	2201      	movs	r2, #1
 8005478:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800547a:	7bfa      	ldrb	r2, [r7, #15]
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	333c      	adds	r3, #60	; 0x3c
 800548a:	7bfa      	ldrb	r2, [r7, #15]
 800548c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800548e:	7bfa      	ldrb	r2, [r7, #15]
 8005490:	7bfb      	ldrb	r3, [r7, #15]
 8005492:	b298      	uxth	r0, r3
 8005494:	6879      	ldr	r1, [r7, #4]
 8005496:	4613      	mov	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	4413      	add	r3, r2
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	440b      	add	r3, r1
 80054a0:	3344      	adds	r3, #68	; 0x44
 80054a2:	4602      	mov	r2, r0
 80054a4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054a6:	7bfa      	ldrb	r2, [r7, #15]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	00db      	lsls	r3, r3, #3
 80054ae:	4413      	add	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	3340      	adds	r3, #64	; 0x40
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054ba:	7bfa      	ldrb	r2, [r7, #15]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4413      	add	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	3348      	adds	r3, #72	; 0x48
 80054ca:	2200      	movs	r2, #0
 80054cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054ce:	7bfa      	ldrb	r2, [r7, #15]
 80054d0:	6879      	ldr	r1, [r7, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	4413      	add	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	440b      	add	r3, r1
 80054dc:	334c      	adds	r3, #76	; 0x4c
 80054de:	2200      	movs	r2, #0
 80054e0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80054e2:	7bfa      	ldrb	r2, [r7, #15]
 80054e4:	6879      	ldr	r1, [r7, #4]
 80054e6:	4613      	mov	r3, r2
 80054e8:	00db      	lsls	r3, r3, #3
 80054ea:	4413      	add	r3, r2
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	440b      	add	r3, r1
 80054f0:	3354      	adds	r3, #84	; 0x54
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	3301      	adds	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
 80054fc:	7bfa      	ldrb	r2, [r7, #15]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d3af      	bcc.n	8005466 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005506:	2300      	movs	r3, #0
 8005508:	73fb      	strb	r3, [r7, #15]
 800550a:	e044      	b.n	8005596 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800550c:	7bfa      	ldrb	r2, [r7, #15]
 800550e:	6879      	ldr	r1, [r7, #4]
 8005510:	4613      	mov	r3, r2
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	4413      	add	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	440b      	add	r3, r1
 800551a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005522:	7bfa      	ldrb	r2, [r7, #15]
 8005524:	6879      	ldr	r1, [r7, #4]
 8005526:	4613      	mov	r3, r2
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4413      	add	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	440b      	add	r3, r1
 8005530:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005534:	7bfa      	ldrb	r2, [r7, #15]
 8005536:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005538:	7bfa      	ldrb	r2, [r7, #15]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4613      	mov	r3, r2
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800554a:	2200      	movs	r2, #0
 800554c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800554e:	7bfa      	ldrb	r2, [r7, #15]
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	00db      	lsls	r3, r3, #3
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005560:	2200      	movs	r2, #0
 8005562:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005564:	7bfa      	ldrb	r2, [r7, #15]
 8005566:	6879      	ldr	r1, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	00db      	lsls	r3, r3, #3
 800556c:	4413      	add	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	440b      	add	r3, r1
 8005572:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005576:	2200      	movs	r2, #0
 8005578:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800557a:	7bfa      	ldrb	r2, [r7, #15]
 800557c:	6879      	ldr	r1, [r7, #4]
 800557e:	4613      	mov	r3, r2
 8005580:	00db      	lsls	r3, r3, #3
 8005582:	4413      	add	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	440b      	add	r3, r1
 8005588:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	3301      	adds	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
 8005596:	7bfa      	ldrb	r2, [r7, #15]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d3b5      	bcc.n	800550c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	603b      	str	r3, [r7, #0]
 80055a6:	687e      	ldr	r6, [r7, #4]
 80055a8:	466d      	mov	r5, sp
 80055aa:	f106 0410 	add.w	r4, r6, #16
 80055ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055ba:	e885 0003 	stmia.w	r5, {r0, r1}
 80055be:	1d33      	adds	r3, r6, #4
 80055c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055c2:	6838      	ldr	r0, [r7, #0]
 80055c4:	f005 fb6c 	bl	800aca0 <USB_DevInit>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d005      	beq.n	80055da <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2202      	movs	r2, #2
 80055d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e014      	b.n	8005604 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2201      	movs	r2, #1
 80055e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d102      	bne.n	80055f8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f80a 	bl	800560c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4618      	mov	r0, r3
 80055fe:	f005 fd2a 	bl	800b056 <USB_DevDisconnect>

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800560c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <HAL_PCDEx_ActivateLPM+0x44>)
 800563c:	4313      	orrs	r3, r2
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr
 8005650:	10000003 	.word	0x10000003

08005654 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800565c:	4b29      	ldr	r3, [pc, #164]	; (8005704 <HAL_PWREx_ConfigSupply+0xb0>)
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	2b06      	cmp	r3, #6
 8005666:	d00a      	beq.n	800567e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005668:	4b26      	ldr	r3, [pc, #152]	; (8005704 <HAL_PWREx_ConfigSupply+0xb0>)
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d001      	beq.n	800567a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e040      	b.n	80056fc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800567a:	2300      	movs	r3, #0
 800567c:	e03e      	b.n	80056fc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800567e:	4b21      	ldr	r3, [pc, #132]	; (8005704 <HAL_PWREx_ConfigSupply+0xb0>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005686:	491f      	ldr	r1, [pc, #124]	; (8005704 <HAL_PWREx_ConfigSupply+0xb0>)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4313      	orrs	r3, r2
 800568c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800568e:	f7fc f8bb 	bl	8001808 <HAL_GetTick>
 8005692:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005694:	e009      	b.n	80056aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005696:	f7fc f8b7 	bl	8001808 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056a4:	d901      	bls.n	80056aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e028      	b.n	80056fc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056aa:	4b16      	ldr	r3, [pc, #88]	; (8005704 <HAL_PWREx_ConfigSupply+0xb0>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056b6:	d1ee      	bne.n	8005696 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b1e      	cmp	r3, #30
 80056bc:	d008      	beq.n	80056d0 <HAL_PWREx_ConfigSupply+0x7c>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b2e      	cmp	r3, #46	; 0x2e
 80056c2:	d005      	beq.n	80056d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b1d      	cmp	r3, #29
 80056c8:	d002      	beq.n	80056d0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b2d      	cmp	r3, #45	; 0x2d
 80056ce:	d114      	bne.n	80056fa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80056d0:	f7fc f89a 	bl	8001808 <HAL_GetTick>
 80056d4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80056d6:	e009      	b.n	80056ec <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056d8:	f7fc f896 	bl	8001808 <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056e6:	d901      	bls.n	80056ec <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e007      	b.n	80056fc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <HAL_PWREx_ConfigSupply+0xb0>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f8:	d1ee      	bne.n	80056d8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	58024800 	.word	0x58024800

08005708 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005708:	b480      	push	{r7}
 800570a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	4a04      	ldr	r2, [pc, #16]	; (8005724 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005712:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005716:	60d3      	str	r3, [r2, #12]
}
 8005718:	bf00      	nop
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	58024800 	.word	0x58024800

08005728 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	; 0x30
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	f000 bc1d 	b.w	8005f76 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 8087 	beq.w	8005858 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800574a:	4b99      	ldr	r3, [pc, #612]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005752:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005754:	4b96      	ldr	r3, [pc, #600]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	2b10      	cmp	r3, #16
 800575e:	d007      	beq.n	8005770 <HAL_RCC_OscConfig+0x48>
 8005760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005762:	2b18      	cmp	r3, #24
 8005764:	d110      	bne.n	8005788 <HAL_RCC_OscConfig+0x60>
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d10b      	bne.n	8005788 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005770:	4b8f      	ldr	r3, [pc, #572]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d06c      	beq.n	8005856 <HAL_RCC_OscConfig+0x12e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d168      	bne.n	8005856 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e3f6      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005790:	d106      	bne.n	80057a0 <HAL_RCC_OscConfig+0x78>
 8005792:	4b87      	ldr	r3, [pc, #540]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a86      	ldr	r2, [pc, #536]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e02e      	b.n	80057fe <HAL_RCC_OscConfig+0xd6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d10c      	bne.n	80057c2 <HAL_RCC_OscConfig+0x9a>
 80057a8:	4b81      	ldr	r3, [pc, #516]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a80      	ldr	r2, [pc, #512]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	4b7e      	ldr	r3, [pc, #504]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a7d      	ldr	r2, [pc, #500]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057be:	6013      	str	r3, [r2, #0]
 80057c0:	e01d      	b.n	80057fe <HAL_RCC_OscConfig+0xd6>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057ca:	d10c      	bne.n	80057e6 <HAL_RCC_OscConfig+0xbe>
 80057cc:	4b78      	ldr	r3, [pc, #480]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a77      	ldr	r2, [pc, #476]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	4b75      	ldr	r3, [pc, #468]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a74      	ldr	r2, [pc, #464]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e00b      	b.n	80057fe <HAL_RCC_OscConfig+0xd6>
 80057e6:	4b72      	ldr	r3, [pc, #456]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a71      	ldr	r2, [pc, #452]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b6f      	ldr	r3, [pc, #444]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a6e      	ldr	r2, [pc, #440]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80057f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d013      	beq.n	800582e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fb ffff 	bl	8001808 <HAL_GetTick>
 800580a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800580e:	f7fb fffb 	bl	8001808 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b64      	cmp	r3, #100	; 0x64
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e3aa      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005820:	4b63      	ldr	r3, [pc, #396]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0f0      	beq.n	800580e <HAL_RCC_OscConfig+0xe6>
 800582c:	e014      	b.n	8005858 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800582e:	f7fb ffeb 	bl	8001808 <HAL_GetTick>
 8005832:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005834:	e008      	b.n	8005848 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005836:	f7fb ffe7 	bl	8001808 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	2b64      	cmp	r3, #100	; 0x64
 8005842:	d901      	bls.n	8005848 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005844:	2303      	movs	r3, #3
 8005846:	e396      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005848:	4b59      	ldr	r3, [pc, #356]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1f0      	bne.n	8005836 <HAL_RCC_OscConfig+0x10e>
 8005854:	e000      	b.n	8005858 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005856:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 80cb 	beq.w	80059fc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005866:	4b52      	ldr	r3, [pc, #328]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800586e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005870:	4b4f      	ldr	r3, [pc, #316]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <HAL_RCC_OscConfig+0x164>
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	2b18      	cmp	r3, #24
 8005880:	d156      	bne.n	8005930 <HAL_RCC_OscConfig+0x208>
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	f003 0303 	and.w	r3, r3, #3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d151      	bne.n	8005930 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800588c:	4b48      	ldr	r3, [pc, #288]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0304 	and.w	r3, r3, #4
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <HAL_RCC_OscConfig+0x17c>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68db      	ldr	r3, [r3, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e368      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058a4:	4b42      	ldr	r3, [pc, #264]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f023 0219 	bic.w	r2, r3, #25
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	493f      	ldr	r1, [pc, #252]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058b6:	f7fb ffa7 	bl	8001808 <HAL_GetTick>
 80058ba:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058bc:	e008      	b.n	80058d0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058be:	f7fb ffa3 	bl	8001808 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b02      	cmp	r3, #2
 80058ca:	d901      	bls.n	80058d0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e352      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058d0:	4b37      	ldr	r3, [pc, #220]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0304 	and.w	r3, r3, #4
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d0f0      	beq.n	80058be <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058dc:	f7fb ffc4 	bl	8001868 <HAL_GetREVID>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f241 0203 	movw	r2, #4099	; 0x1003
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d817      	bhi.n	800591a <HAL_RCC_OscConfig+0x1f2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d108      	bne.n	8005904 <HAL_RCC_OscConfig+0x1dc>
 80058f2:	4b2f      	ldr	r3, [pc, #188]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80058fa:	4a2d      	ldr	r2, [pc, #180]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80058fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005900:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005902:	e07b      	b.n	80059fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005904:	4b2a      	ldr	r3, [pc, #168]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	031b      	lsls	r3, r3, #12
 8005912:	4927      	ldr	r1, [pc, #156]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005914:	4313      	orrs	r3, r2
 8005916:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005918:	e070      	b.n	80059fc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591a:	4b25      	ldr	r3, [pc, #148]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	4921      	ldr	r1, [pc, #132]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 800592a:	4313      	orrs	r3, r2
 800592c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800592e:	e065      	b.n	80059fc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d048      	beq.n	80059ca <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005938:	4b1d      	ldr	r3, [pc, #116]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f023 0219 	bic.w	r2, r3, #25
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	491a      	ldr	r1, [pc, #104]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594a:	f7fb ff5d 	bl	8001808 <HAL_GetTick>
 800594e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005950:	e008      	b.n	8005964 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005952:	f7fb ff59 	bl	8001808 <HAL_GetTick>
 8005956:	4602      	mov	r2, r0
 8005958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	2b02      	cmp	r3, #2
 800595e:	d901      	bls.n	8005964 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e308      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005964:	4b12      	ldr	r3, [pc, #72]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d0f0      	beq.n	8005952 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005970:	f7fb ff7a 	bl	8001868 <HAL_GetREVID>
 8005974:	4603      	mov	r3, r0
 8005976:	f241 0203 	movw	r2, #4099	; 0x1003
 800597a:	4293      	cmp	r3, r2
 800597c:	d81a      	bhi.n	80059b4 <HAL_RCC_OscConfig+0x28c>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	2b40      	cmp	r3, #64	; 0x40
 8005984:	d108      	bne.n	8005998 <HAL_RCC_OscConfig+0x270>
 8005986:	4b0a      	ldr	r3, [pc, #40]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800598e:	4a08      	ldr	r2, [pc, #32]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 8005990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005994:	6053      	str	r3, [r2, #4]
 8005996:	e031      	b.n	80059fc <HAL_RCC_OscConfig+0x2d4>
 8005998:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	031b      	lsls	r3, r3, #12
 80059a6:	4902      	ldr	r1, [pc, #8]	; (80059b0 <HAL_RCC_OscConfig+0x288>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	604b      	str	r3, [r1, #4]
 80059ac:	e026      	b.n	80059fc <HAL_RCC_OscConfig+0x2d4>
 80059ae:	bf00      	nop
 80059b0:	58024400 	.word	0x58024400
 80059b4:	4b9a      	ldr	r3, [pc, #616]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	061b      	lsls	r3, r3, #24
 80059c2:	4997      	ldr	r1, [pc, #604]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	604b      	str	r3, [r1, #4]
 80059c8:	e018      	b.n	80059fc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ca:	4b95      	ldr	r3, [pc, #596]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a94      	ldr	r2, [pc, #592]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 80059d0:	f023 0301 	bic.w	r3, r3, #1
 80059d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059d6:	f7fb ff17 	bl	8001808 <HAL_GetTick>
 80059da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059dc:	e008      	b.n	80059f0 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059de:	f7fb ff13 	bl	8001808 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	2b02      	cmp	r3, #2
 80059ea:	d901      	bls.n	80059f0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80059ec:	2303      	movs	r3, #3
 80059ee:	e2c2      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059f0:	4b8b      	ldr	r3, [pc, #556]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f003 0304 	and.w	r3, r3, #4
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1f0      	bne.n	80059de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f000 80a9 	beq.w	8005b5c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a0a:	4b85      	ldr	r3, [pc, #532]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a12:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a14:	4b82      	ldr	r3, [pc, #520]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a18:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a1a:	69bb      	ldr	r3, [r7, #24]
 8005a1c:	2b08      	cmp	r3, #8
 8005a1e:	d007      	beq.n	8005a30 <HAL_RCC_OscConfig+0x308>
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	2b18      	cmp	r3, #24
 8005a24:	d13a      	bne.n	8005a9c <HAL_RCC_OscConfig+0x374>
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f003 0303 	and.w	r3, r3, #3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d135      	bne.n	8005a9c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a30:	4b7b      	ldr	r3, [pc, #492]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_OscConfig+0x320>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	2b80      	cmp	r3, #128	; 0x80
 8005a42:	d001      	beq.n	8005a48 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e296      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a48:	f7fb ff0e 	bl	8001868 <HAL_GetREVID>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d817      	bhi.n	8005a86 <HAL_RCC_OscConfig+0x35e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	2b20      	cmp	r3, #32
 8005a5c:	d108      	bne.n	8005a70 <HAL_RCC_OscConfig+0x348>
 8005a5e:	4b70      	ldr	r3, [pc, #448]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a66:	4a6e      	ldr	r2, [pc, #440]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a6c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a6e:	e075      	b.n	8005b5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a70:	4b6b      	ldr	r3, [pc, #428]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	069b      	lsls	r3, r3, #26
 8005a7e:	4968      	ldr	r1, [pc, #416]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a84:	e06a      	b.n	8005b5c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a86:	4b66      	ldr	r3, [pc, #408]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	061b      	lsls	r3, r3, #24
 8005a94:	4962      	ldr	r1, [pc, #392]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a9a:	e05f      	b.n	8005b5c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	69db      	ldr	r3, [r3, #28]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d042      	beq.n	8005b2a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005aa4:	4b5e      	ldr	r3, [pc, #376]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a5d      	ldr	r2, [pc, #372]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005aaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab0:	f7fb feaa 	bl	8001808 <HAL_GetTick>
 8005ab4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ab6:	e008      	b.n	8005aca <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005ab8:	f7fb fea6 	bl	8001808 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e255      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aca:	4b55      	ldr	r3, [pc, #340]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d0f0      	beq.n	8005ab8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ad6:	f7fb fec7 	bl	8001868 <HAL_GetREVID>
 8005ada:	4603      	mov	r3, r0
 8005adc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d817      	bhi.n	8005b14 <HAL_RCC_OscConfig+0x3ec>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	2b20      	cmp	r3, #32
 8005aea:	d108      	bne.n	8005afe <HAL_RCC_OscConfig+0x3d6>
 8005aec:	4b4c      	ldr	r3, [pc, #304]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005af4:	4a4a      	ldr	r2, [pc, #296]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005af6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005afa:	6053      	str	r3, [r2, #4]
 8005afc:	e02e      	b.n	8005b5c <HAL_RCC_OscConfig+0x434>
 8005afe:	4b48      	ldr	r3, [pc, #288]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a1b      	ldr	r3, [r3, #32]
 8005b0a:	069b      	lsls	r3, r3, #26
 8005b0c:	4944      	ldr	r1, [pc, #272]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	604b      	str	r3, [r1, #4]
 8005b12:	e023      	b.n	8005b5c <HAL_RCC_OscConfig+0x434>
 8005b14:	4b42      	ldr	r3, [pc, #264]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	493f      	ldr	r1, [pc, #252]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60cb      	str	r3, [r1, #12]
 8005b28:	e018      	b.n	8005b5c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b2a:	4b3d      	ldr	r3, [pc, #244]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a3c      	ldr	r2, [pc, #240]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b36:	f7fb fe67 	bl	8001808 <HAL_GetTick>
 8005b3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b3e:	f7fb fe63 	bl	8001808 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e212      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b50:	4b33      	ldr	r3, [pc, #204]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1f0      	bne.n	8005b3e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0308 	and.w	r3, r3, #8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d036      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d019      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b70:	4b2b      	ldr	r3, [pc, #172]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b74:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b7c:	f7fb fe44 	bl	8001808 <HAL_GetTick>
 8005b80:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b82:	e008      	b.n	8005b96 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005b84:	f7fb fe40 	bl	8001808 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b92:	2303      	movs	r3, #3
 8005b94:	e1ef      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b96:	4b22      	ldr	r3, [pc, #136]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005b98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d0f0      	beq.n	8005b84 <HAL_RCC_OscConfig+0x45c>
 8005ba2:	e018      	b.n	8005bd6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ba4:	4b1e      	ldr	r3, [pc, #120]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ba8:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bb0:	f7fb fe2a 	bl	8001808 <HAL_GetTick>
 8005bb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bb6:	e008      	b.n	8005bca <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bb8:	f7fb fe26 	bl	8001808 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d901      	bls.n	8005bca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005bc6:	2303      	movs	r3, #3
 8005bc8:	e1d5      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bca:	4b15      	ldr	r3, [pc, #84]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005bcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1f0      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d039      	beq.n	8005c56 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	699b      	ldr	r3, [r3, #24]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d01c      	beq.n	8005c24 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005bea:	4b0d      	ldr	r3, [pc, #52]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a0c      	ldr	r2, [pc, #48]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005bf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005bf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005bf6:	f7fb fe07 	bl	8001808 <HAL_GetTick>
 8005bfa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005bfc:	e008      	b.n	8005c10 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005bfe:	f7fb fe03 	bl	8001808 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d901      	bls.n	8005c10 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e1b2      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c10:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <HAL_RCC_OscConfig+0x4f8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d0f0      	beq.n	8005bfe <HAL_RCC_OscConfig+0x4d6>
 8005c1c:	e01b      	b.n	8005c56 <HAL_RCC_OscConfig+0x52e>
 8005c1e:	bf00      	nop
 8005c20:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c24:	4b9b      	ldr	r3, [pc, #620]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a9a      	ldr	r2, [pc, #616]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005c2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c2e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c30:	f7fb fdea 	bl	8001808 <HAL_GetTick>
 8005c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c38:	f7fb fde6 	bl	8001808 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e195      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c4a:	4b92      	ldr	r3, [pc, #584]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f0      	bne.n	8005c38 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	f000 8081 	beq.w	8005d66 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c64:	4b8c      	ldr	r3, [pc, #560]	; (8005e98 <HAL_RCC_OscConfig+0x770>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a8b      	ldr	r2, [pc, #556]	; (8005e98 <HAL_RCC_OscConfig+0x770>)
 8005c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c70:	f7fb fdca 	bl	8001808 <HAL_GetTick>
 8005c74:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c76:	e008      	b.n	8005c8a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c78:	f7fb fdc6 	bl	8001808 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b64      	cmp	r3, #100	; 0x64
 8005c84:	d901      	bls.n	8005c8a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e175      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c8a:	4b83      	ldr	r3, [pc, #524]	; (8005e98 <HAL_RCC_OscConfig+0x770>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0f0      	beq.n	8005c78 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d106      	bne.n	8005cac <HAL_RCC_OscConfig+0x584>
 8005c9e:	4b7d      	ldr	r3, [pc, #500]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca2:	4a7c      	ldr	r2, [pc, #496]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005ca4:	f043 0301 	orr.w	r3, r3, #1
 8005ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8005caa:	e02d      	b.n	8005d08 <HAL_RCC_OscConfig+0x5e0>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d10c      	bne.n	8005cce <HAL_RCC_OscConfig+0x5a6>
 8005cb4:	4b77      	ldr	r3, [pc, #476]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb8:	4a76      	ldr	r2, [pc, #472]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005cc0:	4b74      	ldr	r3, [pc, #464]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc4:	4a73      	ldr	r2, [pc, #460]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cc6:	f023 0304 	bic.w	r3, r3, #4
 8005cca:	6713      	str	r3, [r2, #112]	; 0x70
 8005ccc:	e01c      	b.n	8005d08 <HAL_RCC_OscConfig+0x5e0>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d10c      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x5c8>
 8005cd6:	4b6f      	ldr	r3, [pc, #444]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cda:	4a6e      	ldr	r2, [pc, #440]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cdc:	f043 0304 	orr.w	r3, r3, #4
 8005ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce2:	4b6c      	ldr	r3, [pc, #432]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	4a6b      	ldr	r2, [pc, #428]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	6713      	str	r3, [r2, #112]	; 0x70
 8005cee:	e00b      	b.n	8005d08 <HAL_RCC_OscConfig+0x5e0>
 8005cf0:	4b68      	ldr	r3, [pc, #416]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf4:	4a67      	ldr	r2, [pc, #412]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cf6:	f023 0301 	bic.w	r3, r3, #1
 8005cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8005cfc:	4b65      	ldr	r3, [pc, #404]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d00:	4a64      	ldr	r2, [pc, #400]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005d02:	f023 0304 	bic.w	r3, r3, #4
 8005d06:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d015      	beq.n	8005d3c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d10:	f7fb fd7a 	bl	8001808 <HAL_GetTick>
 8005d14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d16:	e00a      	b.n	8005d2e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d18:	f7fb fd76 	bl	8001808 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d901      	bls.n	8005d2e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e123      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d2e:	4b59      	ldr	r3, [pc, #356]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0ee      	beq.n	8005d18 <HAL_RCC_OscConfig+0x5f0>
 8005d3a:	e014      	b.n	8005d66 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d3c:	f7fb fd64 	bl	8001808 <HAL_GetTick>
 8005d40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d42:	e00a      	b.n	8005d5a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d44:	f7fb fd60 	bl	8001808 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e10d      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1ee      	bne.n	8005d44 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 8102 	beq.w	8005f74 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d70:	4b48      	ldr	r3, [pc, #288]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005d72:	691b      	ldr	r3, [r3, #16]
 8005d74:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d78:	2b18      	cmp	r3, #24
 8005d7a:	f000 80bd 	beq.w	8005ef8 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b02      	cmp	r3, #2
 8005d84:	f040 809e 	bne.w	8005ec4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d88:	4b42      	ldr	r3, [pc, #264]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a41      	ldr	r2, [pc, #260]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d94:	f7fb fd38 	bl	8001808 <HAL_GetTick>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d9c:	f7fb fd34 	bl	8001808 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0e3      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dae:	4b39      	ldr	r3, [pc, #228]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1f0      	bne.n	8005d9c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dba:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dbe:	4b37      	ldr	r3, [pc, #220]	; (8005e9c <HAL_RCC_OscConfig+0x774>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dca:	0112      	lsls	r2, r2, #4
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	4931      	ldr	r1, [pc, #196]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	628b      	str	r3, [r1, #40]	; 0x28
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de2:	3b01      	subs	r3, #1
 8005de4:	025b      	lsls	r3, r3, #9
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dee:	3b01      	subs	r3, #1
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	061b      	lsls	r3, r3, #24
 8005e00:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e04:	4923      	ldr	r1, [pc, #140]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005e0a:	4b22      	ldr	r3, [pc, #136]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0e:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e10:	f023 0301 	bic.w	r3, r3, #1
 8005e14:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e16:	4b1f      	ldr	r3, [pc, #124]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e1a:	4b21      	ldr	r3, [pc, #132]	; (8005ea0 <HAL_RCC_OscConfig+0x778>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e22:	00d2      	lsls	r2, r2, #3
 8005e24:	491b      	ldr	r1, [pc, #108]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e2a:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	f023 020c 	bic.w	r2, r3, #12
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	4917      	ldr	r1, [pc, #92]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e3c:	4b15      	ldr	r3, [pc, #84]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e40:	f023 0202 	bic.w	r2, r3, #2
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e48:	4912      	ldr	r1, [pc, #72]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e4e:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e52:	4a10      	ldr	r2, [pc, #64]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e58:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e5a:	4b0e      	ldr	r3, [pc, #56]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5e:	4a0d      	ldr	r2, [pc, #52]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005e72:	4b08      	ldr	r3, [pc, #32]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e76:	4a07      	ldr	r2, [pc, #28]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e78:	f043 0301 	orr.w	r3, r3, #1
 8005e7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e7e:	4b05      	ldr	r3, [pc, #20]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a04      	ldr	r2, [pc, #16]	; (8005e94 <HAL_RCC_OscConfig+0x76c>)
 8005e84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e8a:	f7fb fcbd 	bl	8001808 <HAL_GetTick>
 8005e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e90:	e011      	b.n	8005eb6 <HAL_RCC_OscConfig+0x78e>
 8005e92:	bf00      	nop
 8005e94:	58024400 	.word	0x58024400
 8005e98:	58024800 	.word	0x58024800
 8005e9c:	fffffc0c 	.word	0xfffffc0c
 8005ea0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ea4:	f7fb fcb0 	bl	8001808 <HAL_GetTick>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	1ad3      	subs	r3, r2, r3
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d901      	bls.n	8005eb6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e05f      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eb6:	4b32      	ldr	r3, [pc, #200]	; (8005f80 <HAL_RCC_OscConfig+0x858>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d0f0      	beq.n	8005ea4 <HAL_RCC_OscConfig+0x77c>
 8005ec2:	e057      	b.n	8005f74 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ec4:	4b2e      	ldr	r3, [pc, #184]	; (8005f80 <HAL_RCC_OscConfig+0x858>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a2d      	ldr	r2, [pc, #180]	; (8005f80 <HAL_RCC_OscConfig+0x858>)
 8005eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed0:	f7fb fc9a 	bl	8001808 <HAL_GetTick>
 8005ed4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ed6:	e008      	b.n	8005eea <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ed8:	f7fb fc96 	bl	8001808 <HAL_GetTick>
 8005edc:	4602      	mov	r2, r0
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d901      	bls.n	8005eea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e045      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005eea:	4b25      	ldr	r3, [pc, #148]	; (8005f80 <HAL_RCC_OscConfig+0x858>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1f0      	bne.n	8005ed8 <HAL_RCC_OscConfig+0x7b0>
 8005ef6:	e03d      	b.n	8005f74 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005ef8:	4b21      	ldr	r3, [pc, #132]	; (8005f80 <HAL_RCC_OscConfig+0x858>)
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005efe:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <HAL_RCC_OscConfig+0x858>)
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d031      	beq.n	8005f70 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	f003 0203 	and.w	r2, r3, #3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d12a      	bne.n	8005f70 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	091b      	lsrs	r3, r3, #4
 8005f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d122      	bne.n	8005f70 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d11a      	bne.n	8005f70 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	0a5b      	lsrs	r3, r3, #9
 8005f3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f46:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d111      	bne.n	8005f70 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	0c1b      	lsrs	r3, r3, #16
 8005f50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f58:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d108      	bne.n	8005f70 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	0e1b      	lsrs	r3, r3, #24
 8005f62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d001      	beq.n	8005f74 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3730      	adds	r7, #48	; 0x30
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
 8005f7e:	bf00      	nop
 8005f80:	58024400 	.word	0x58024400

08005f84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d101      	bne.n	8005f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e19c      	b.n	80062d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f98:	4b8a      	ldr	r3, [pc, #552]	; (80061c4 <HAL_RCC_ClockConfig+0x240>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 030f 	and.w	r3, r3, #15
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d910      	bls.n	8005fc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa6:	4b87      	ldr	r3, [pc, #540]	; (80061c4 <HAL_RCC_ClockConfig+0x240>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f023 020f 	bic.w	r2, r3, #15
 8005fae:	4985      	ldr	r1, [pc, #532]	; (80061c4 <HAL_RCC_ClockConfig+0x240>)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb6:	4b83      	ldr	r3, [pc, #524]	; (80061c4 <HAL_RCC_ClockConfig+0x240>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d001      	beq.n	8005fc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	e184      	b.n	80062d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f003 0304 	and.w	r3, r3, #4
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d010      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691a      	ldr	r2, [r3, #16]
 8005fd8:	4b7b      	ldr	r3, [pc, #492]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d908      	bls.n	8005ff6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fe4:	4b78      	ldr	r3, [pc, #480]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	4975      	ldr	r1, [pc, #468]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0308 	and.w	r3, r3, #8
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d010      	beq.n	8006024 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	4b70      	ldr	r3, [pc, #448]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800600e:	429a      	cmp	r2, r3
 8006010:	d908      	bls.n	8006024 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006012:	4b6d      	ldr	r3, [pc, #436]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006014:	69db      	ldr	r3, [r3, #28]
 8006016:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	496a      	ldr	r1, [pc, #424]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006020:	4313      	orrs	r3, r2
 8006022:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0310 	and.w	r3, r3, #16
 800602c:	2b00      	cmp	r3, #0
 800602e:	d010      	beq.n	8006052 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	699a      	ldr	r2, [r3, #24]
 8006034:	4b64      	ldr	r3, [pc, #400]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800603c:	429a      	cmp	r2, r3
 800603e:	d908      	bls.n	8006052 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006040:	4b61      	ldr	r3, [pc, #388]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006042:	69db      	ldr	r3, [r3, #28]
 8006044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	495e      	ldr	r1, [pc, #376]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 800604e:	4313      	orrs	r3, r2
 8006050:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0320 	and.w	r3, r3, #32
 800605a:	2b00      	cmp	r3, #0
 800605c:	d010      	beq.n	8006080 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69da      	ldr	r2, [r3, #28]
 8006062:	4b59      	ldr	r3, [pc, #356]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006064:	6a1b      	ldr	r3, [r3, #32]
 8006066:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800606a:	429a      	cmp	r2, r3
 800606c:	d908      	bls.n	8006080 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800606e:	4b56      	ldr	r3, [pc, #344]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	4953      	ldr	r1, [pc, #332]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 800607c:	4313      	orrs	r3, r2
 800607e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d010      	beq.n	80060ae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	4b4d      	ldr	r3, [pc, #308]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	f003 030f 	and.w	r3, r3, #15
 8006098:	429a      	cmp	r2, r3
 800609a:	d908      	bls.n	80060ae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800609c:	4b4a      	ldr	r3, [pc, #296]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	f023 020f 	bic.w	r2, r3, #15
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	4947      	ldr	r1, [pc, #284]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d055      	beq.n	8006166 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060ba:	4b43      	ldr	r3, [pc, #268]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	4940      	ldr	r1, [pc, #256]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d107      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060d4:	4b3c      	ldr	r3, [pc, #240]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d121      	bne.n	8006124 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0f6      	b.n	80062d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b03      	cmp	r3, #3
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060ec:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d115      	bne.n	8006124 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0ea      	b.n	80062d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d107      	bne.n	8006114 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006104:	4b30      	ldr	r3, [pc, #192]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610c:	2b00      	cmp	r3, #0
 800610e:	d109      	bne.n	8006124 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	e0de      	b.n	80062d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006114:	4b2c      	ldr	r3, [pc, #176]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0304 	and.w	r3, r3, #4
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0d6      	b.n	80062d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006124:	4b28      	ldr	r3, [pc, #160]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f023 0207 	bic.w	r2, r3, #7
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	4925      	ldr	r1, [pc, #148]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006132:	4313      	orrs	r3, r2
 8006134:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006136:	f7fb fb67 	bl	8001808 <HAL_GetTick>
 800613a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800613c:	e00a      	b.n	8006154 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800613e:	f7fb fb63 	bl	8001808 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f241 3288 	movw	r2, #5000	; 0x1388
 800614c:	4293      	cmp	r3, r2
 800614e:	d901      	bls.n	8006154 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e0be      	b.n	80062d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006154:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	429a      	cmp	r2, r3
 8006164:	d1eb      	bne.n	800613e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d010      	beq.n	8006194 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68da      	ldr	r2, [r3, #12]
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	429a      	cmp	r2, r3
 8006180:	d208      	bcs.n	8006194 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006182:	4b11      	ldr	r3, [pc, #68]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f023 020f 	bic.w	r2, r3, #15
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	490e      	ldr	r1, [pc, #56]	; (80061c8 <HAL_RCC_ClockConfig+0x244>)
 8006190:	4313      	orrs	r3, r2
 8006192:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006194:	4b0b      	ldr	r3, [pc, #44]	; (80061c4 <HAL_RCC_ClockConfig+0x240>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 030f 	and.w	r3, r3, #15
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d214      	bcs.n	80061cc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061a2:	4b08      	ldr	r3, [pc, #32]	; (80061c4 <HAL_RCC_ClockConfig+0x240>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f023 020f 	bic.w	r2, r3, #15
 80061aa:	4906      	ldr	r1, [pc, #24]	; (80061c4 <HAL_RCC_ClockConfig+0x240>)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b04      	ldr	r3, [pc, #16]	; (80061c4 <HAL_RCC_ClockConfig+0x240>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d005      	beq.n	80061cc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e086      	b.n	80062d2 <HAL_RCC_ClockConfig+0x34e>
 80061c4:	52002000 	.word	0x52002000
 80061c8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0304 	and.w	r3, r3, #4
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d010      	beq.n	80061fa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	4b3f      	ldr	r3, [pc, #252]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d208      	bcs.n	80061fa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061e8:	4b3c      	ldr	r3, [pc, #240]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	4939      	ldr	r1, [pc, #228]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 80061f6:	4313      	orrs	r3, r2
 80061f8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f003 0308 	and.w	r3, r3, #8
 8006202:	2b00      	cmp	r3, #0
 8006204:	d010      	beq.n	8006228 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	4b34      	ldr	r3, [pc, #208]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006212:	429a      	cmp	r2, r3
 8006214:	d208      	bcs.n	8006228 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006216:	4b31      	ldr	r3, [pc, #196]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 8006218:	69db      	ldr	r3, [r3, #28]
 800621a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	695b      	ldr	r3, [r3, #20]
 8006222:	492e      	ldr	r1, [pc, #184]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 8006224:	4313      	orrs	r3, r2
 8006226:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0310 	and.w	r3, r3, #16
 8006230:	2b00      	cmp	r3, #0
 8006232:	d010      	beq.n	8006256 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	699a      	ldr	r2, [r3, #24]
 8006238:	4b28      	ldr	r3, [pc, #160]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006240:	429a      	cmp	r2, r3
 8006242:	d208      	bcs.n	8006256 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006244:	4b25      	ldr	r3, [pc, #148]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 8006246:	69db      	ldr	r3, [r3, #28]
 8006248:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	4922      	ldr	r1, [pc, #136]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 8006252:	4313      	orrs	r3, r2
 8006254:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0320 	and.w	r3, r3, #32
 800625e:	2b00      	cmp	r3, #0
 8006260:	d010      	beq.n	8006284 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69da      	ldr	r2, [r3, #28]
 8006266:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800626e:	429a      	cmp	r2, r3
 8006270:	d208      	bcs.n	8006284 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006272:	4b1a      	ldr	r3, [pc, #104]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	4917      	ldr	r1, [pc, #92]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 8006280:	4313      	orrs	r3, r2
 8006282:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006284:	f000 f834 	bl	80062f0 <HAL_RCC_GetSysClockFreq>
 8006288:	4602      	mov	r2, r0
 800628a:	4b14      	ldr	r3, [pc, #80]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	4912      	ldr	r1, [pc, #72]	; (80062e0 <HAL_RCC_ClockConfig+0x35c>)
 8006296:	5ccb      	ldrb	r3, [r1, r3]
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	fa22 f303 	lsr.w	r3, r2, r3
 80062a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062a2:	4b0e      	ldr	r3, [pc, #56]	; (80062dc <HAL_RCC_ClockConfig+0x358>)
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f003 030f 	and.w	r3, r3, #15
 80062aa:	4a0d      	ldr	r2, [pc, #52]	; (80062e0 <HAL_RCC_ClockConfig+0x35c>)
 80062ac:	5cd3      	ldrb	r3, [r2, r3]
 80062ae:	f003 031f 	and.w	r3, r3, #31
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	fa22 f303 	lsr.w	r3, r2, r3
 80062b8:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <HAL_RCC_ClockConfig+0x360>)
 80062ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062bc:	4a0a      	ldr	r2, [pc, #40]	; (80062e8 <HAL_RCC_ClockConfig+0x364>)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80062c2:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <HAL_RCC_ClockConfig+0x368>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fb fa54 	bl	8001774 <HAL_InitTick>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	58024400 	.word	0x58024400
 80062e0:	0800b338 	.word	0x0800b338
 80062e4:	24000004 	.word	0x24000004
 80062e8:	24000000 	.word	0x24000000
 80062ec:	24000018 	.word	0x24000018

080062f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b089      	sub	sp, #36	; 0x24
 80062f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062f6:	4bb3      	ldr	r3, [pc, #716]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062fe:	2b18      	cmp	r3, #24
 8006300:	f200 8155 	bhi.w	80065ae <HAL_RCC_GetSysClockFreq+0x2be>
 8006304:	a201      	add	r2, pc, #4	; (adr r2, 800630c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800630a:	bf00      	nop
 800630c:	08006371 	.word	0x08006371
 8006310:	080065af 	.word	0x080065af
 8006314:	080065af 	.word	0x080065af
 8006318:	080065af 	.word	0x080065af
 800631c:	080065af 	.word	0x080065af
 8006320:	080065af 	.word	0x080065af
 8006324:	080065af 	.word	0x080065af
 8006328:	080065af 	.word	0x080065af
 800632c:	08006397 	.word	0x08006397
 8006330:	080065af 	.word	0x080065af
 8006334:	080065af 	.word	0x080065af
 8006338:	080065af 	.word	0x080065af
 800633c:	080065af 	.word	0x080065af
 8006340:	080065af 	.word	0x080065af
 8006344:	080065af 	.word	0x080065af
 8006348:	080065af 	.word	0x080065af
 800634c:	0800639d 	.word	0x0800639d
 8006350:	080065af 	.word	0x080065af
 8006354:	080065af 	.word	0x080065af
 8006358:	080065af 	.word	0x080065af
 800635c:	080065af 	.word	0x080065af
 8006360:	080065af 	.word	0x080065af
 8006364:	080065af 	.word	0x080065af
 8006368:	080065af 	.word	0x080065af
 800636c:	080063a3 	.word	0x080063a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006370:	4b94      	ldr	r3, [pc, #592]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0320 	and.w	r3, r3, #32
 8006378:	2b00      	cmp	r3, #0
 800637a:	d009      	beq.n	8006390 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800637c:	4b91      	ldr	r3, [pc, #580]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	08db      	lsrs	r3, r3, #3
 8006382:	f003 0303 	and.w	r3, r3, #3
 8006386:	4a90      	ldr	r2, [pc, #576]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006388:	fa22 f303 	lsr.w	r3, r2, r3
 800638c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800638e:	e111      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006390:	4b8d      	ldr	r3, [pc, #564]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006392:	61bb      	str	r3, [r7, #24]
    break;
 8006394:	e10e      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006396:	4b8d      	ldr	r3, [pc, #564]	; (80065cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006398:	61bb      	str	r3, [r7, #24]
    break;
 800639a:	e10b      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800639c:	4b8c      	ldr	r3, [pc, #560]	; (80065d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800639e:	61bb      	str	r3, [r7, #24]
    break;
 80063a0:	e108      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063a2:	4b88      	ldr	r3, [pc, #544]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	f003 0303 	and.w	r3, r3, #3
 80063aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063ac:	4b85      	ldr	r3, [pc, #532]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	091b      	lsrs	r3, r3, #4
 80063b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063b8:	4b82      	ldr	r3, [pc, #520]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	f003 0301 	and.w	r3, r3, #1
 80063c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063c2:	4b80      	ldr	r3, [pc, #512]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063c6:	08db      	lsrs	r3, r3, #3
 80063c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	fb02 f303 	mul.w	r3, r2, r3
 80063d2:	ee07 3a90 	vmov	s15, r3
 80063d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f000 80e1 	beq.w	80065a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	f000 8083 	beq.w	80064f4 <HAL_RCC_GetSysClockFreq+0x204>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	f200 80a1 	bhi.w	8006538 <HAL_RCC_GetSysClockFreq+0x248>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d003      	beq.n	8006404 <HAL_RCC_GetSysClockFreq+0x114>
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d056      	beq.n	80064b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006402:	e099      	b.n	8006538 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006404:	4b6f      	ldr	r3, [pc, #444]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d02d      	beq.n	800646c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006410:	4b6c      	ldr	r3, [pc, #432]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	08db      	lsrs	r3, r3, #3
 8006416:	f003 0303 	and.w	r3, r3, #3
 800641a:	4a6b      	ldr	r2, [pc, #428]	; (80065c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800641c:	fa22 f303 	lsr.w	r3, r2, r3
 8006420:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	ee07 3a90 	vmov	s15, r3
 8006428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800643a:	4b62      	ldr	r3, [pc, #392]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006442:	ee07 3a90 	vmov	s15, r3
 8006446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644a:	ed97 6a02 	vldr	s12, [r7, #8]
 800644e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80065d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800645a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800645e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006466:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800646a:	e087      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006476:	eddf 6a58 	vldr	s13, [pc, #352]	; 80065d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800647a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800647e:	4b51      	ldr	r3, [pc, #324]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006486:	ee07 3a90 	vmov	s15, r3
 800648a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800648e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006492:	eddf 5a50 	vldr	s11, [pc, #320]	; 80065d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800649a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800649e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ae:	e065      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	ee07 3a90 	vmov	s15, r3
 80064b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80065dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80064be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c2:	4b40      	ldr	r3, [pc, #256]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80065d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f2:	e043      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80065e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006506:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650e:	ee07 3a90 	vmov	s15, r3
 8006512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006516:	ed97 6a02 	vldr	s12, [r7, #8]
 800651a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80065d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800651e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800652a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800652e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006536:	e021      	b.n	800657c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	ee07 3a90 	vmov	s15, r3
 800653e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006542:	eddf 6a26 	vldr	s13, [pc, #152]	; 80065dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800654a:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800654c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006552:	ee07 3a90 	vmov	s15, r3
 8006556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800655a:	ed97 6a02 	vldr	s12, [r7, #8]
 800655e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80065d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800656a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800656e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800657a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800657c:	4b11      	ldr	r3, [pc, #68]	; (80065c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	0a5b      	lsrs	r3, r3, #9
 8006582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006586:	3301      	adds	r3, #1
 8006588:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	ee07 3a90 	vmov	s15, r3
 8006590:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006594:	edd7 6a07 	vldr	s13, [r7, #28]
 8006598:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800659c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065a0:	ee17 3a90 	vmov	r3, s15
 80065a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80065a6:	e005      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	61bb      	str	r3, [r7, #24]
    break;
 80065ac:	e002      	b.n	80065b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065b0:	61bb      	str	r3, [r7, #24]
    break;
 80065b2:	bf00      	nop
  }

  return sysclockfreq;
 80065b4:	69bb      	ldr	r3, [r7, #24]
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3724      	adds	r7, #36	; 0x24
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	58024400 	.word	0x58024400
 80065c8:	03d09000 	.word	0x03d09000
 80065cc:	003d0900 	.word	0x003d0900
 80065d0:	007a1200 	.word	0x007a1200
 80065d4:	46000000 	.word	0x46000000
 80065d8:	4c742400 	.word	0x4c742400
 80065dc:	4a742400 	.word	0x4a742400
 80065e0:	4af42400 	.word	0x4af42400

080065e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80065ea:	f7ff fe81 	bl	80062f0 <HAL_RCC_GetSysClockFreq>
 80065ee:	4602      	mov	r2, r0
 80065f0:	4b10      	ldr	r3, [pc, #64]	; (8006634 <HAL_RCC_GetHCLKFreq+0x50>)
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	0a1b      	lsrs	r3, r3, #8
 80065f6:	f003 030f 	and.w	r3, r3, #15
 80065fa:	490f      	ldr	r1, [pc, #60]	; (8006638 <HAL_RCC_GetHCLKFreq+0x54>)
 80065fc:	5ccb      	ldrb	r3, [r1, r3]
 80065fe:	f003 031f 	and.w	r3, r3, #31
 8006602:	fa22 f303 	lsr.w	r3, r2, r3
 8006606:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006608:	4b0a      	ldr	r3, [pc, #40]	; (8006634 <HAL_RCC_GetHCLKFreq+0x50>)
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	f003 030f 	and.w	r3, r3, #15
 8006610:	4a09      	ldr	r2, [pc, #36]	; (8006638 <HAL_RCC_GetHCLKFreq+0x54>)
 8006612:	5cd3      	ldrb	r3, [r2, r3]
 8006614:	f003 031f 	and.w	r3, r3, #31
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	fa22 f303 	lsr.w	r3, r2, r3
 800661e:	4a07      	ldr	r2, [pc, #28]	; (800663c <HAL_RCC_GetHCLKFreq+0x58>)
 8006620:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006622:	4a07      	ldr	r2, [pc, #28]	; (8006640 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006628:	4b04      	ldr	r3, [pc, #16]	; (800663c <HAL_RCC_GetHCLKFreq+0x58>)
 800662a:	681b      	ldr	r3, [r3, #0]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	58024400 	.word	0x58024400
 8006638:	0800b338 	.word	0x0800b338
 800663c:	24000004 	.word	0x24000004
 8006640:	24000000 	.word	0x24000000

08006644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006648:	f7ff ffcc 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 800664c:	4602      	mov	r2, r0
 800664e:	4b06      	ldr	r3, [pc, #24]	; (8006668 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	091b      	lsrs	r3, r3, #4
 8006654:	f003 0307 	and.w	r3, r3, #7
 8006658:	4904      	ldr	r1, [pc, #16]	; (800666c <HAL_RCC_GetPCLK1Freq+0x28>)
 800665a:	5ccb      	ldrb	r3, [r1, r3]
 800665c:	f003 031f 	and.w	r3, r3, #31
 8006660:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006664:	4618      	mov	r0, r3
 8006666:	bd80      	pop	{r7, pc}
 8006668:	58024400 	.word	0x58024400
 800666c:	0800b338 	.word	0x0800b338

08006670 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006674:	f7ff ffb6 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8006678:	4602      	mov	r2, r0
 800667a:	4b06      	ldr	r3, [pc, #24]	; (8006694 <HAL_RCC_GetPCLK2Freq+0x24>)
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	0a1b      	lsrs	r3, r3, #8
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	4904      	ldr	r1, [pc, #16]	; (8006698 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006686:	5ccb      	ldrb	r3, [r1, r3]
 8006688:	f003 031f 	and.w	r3, r3, #31
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006690:	4618      	mov	r0, r3
 8006692:	bd80      	pop	{r7, pc}
 8006694:	58024400 	.word	0x58024400
 8006698:	0800b338 	.word	0x0800b338

0800669c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066a4:	2300      	movs	r3, #0
 80066a6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066a8:	2300      	movs	r3, #0
 80066aa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d03f      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066bc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066c0:	d02a      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80066c2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066c6:	d824      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066cc:	d018      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80066ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066d2:	d81e      	bhi.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d003      	beq.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80066d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066dc:	d007      	beq.n	80066ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80066de:	e018      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066e0:	4ba3      	ldr	r3, [pc, #652]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4aa2      	ldr	r2, [pc, #648]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066ec:	e015      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3304      	adds	r3, #4
 80066f2:	2102      	movs	r1, #2
 80066f4:	4618      	mov	r0, r3
 80066f6:	f001 f9d5 	bl	8007aa4 <RCCEx_PLL2_Config>
 80066fa:	4603      	mov	r3, r0
 80066fc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80066fe:	e00c      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3324      	adds	r3, #36	; 0x24
 8006704:	2102      	movs	r1, #2
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fa7e 	bl	8007c08 <RCCEx_PLL3_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006710:	e003      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	75fb      	strb	r3, [r7, #23]
      break;
 8006716:	e000      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800671a:	7dfb      	ldrb	r3, [r7, #23]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d109      	bne.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006720:	4b93      	ldr	r3, [pc, #588]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800672c:	4990      	ldr	r1, [pc, #576]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800672e:	4313      	orrs	r3, r2
 8006730:	650b      	str	r3, [r1, #80]	; 0x50
 8006732:	e001      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006734:	7dfb      	ldrb	r3, [r7, #23]
 8006736:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006740:	2b00      	cmp	r3, #0
 8006742:	d03d      	beq.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006748:	2b04      	cmp	r3, #4
 800674a:	d826      	bhi.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800674c:	a201      	add	r2, pc, #4	; (adr r2, 8006754 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800674e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006752:	bf00      	nop
 8006754:	08006769 	.word	0x08006769
 8006758:	08006777 	.word	0x08006777
 800675c:	08006789 	.word	0x08006789
 8006760:	080067a1 	.word	0x080067a1
 8006764:	080067a1 	.word	0x080067a1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006768:	4b81      	ldr	r3, [pc, #516]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800676a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800676c:	4a80      	ldr	r2, [pc, #512]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800676e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006772:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006774:	e015      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3304      	adds	r3, #4
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f001 f991 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006782:	4603      	mov	r3, r0
 8006784:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006786:	e00c      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3324      	adds	r3, #36	; 0x24
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f001 fa3a 	bl	8007c08 <RCCEx_PLL3_Config>
 8006794:	4603      	mov	r3, r0
 8006796:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006798:	e003      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	75fb      	strb	r3, [r7, #23]
      break;
 800679e:	e000      	b.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80067a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d109      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067a8:	4b71      	ldr	r3, [pc, #452]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067ac:	f023 0207 	bic.w	r2, r3, #7
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b4:	496e      	ldr	r1, [pc, #440]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067b6:	4313      	orrs	r3, r2
 80067b8:	650b      	str	r3, [r1, #80]	; 0x50
 80067ba:	e001      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d042      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d4:	d02b      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80067d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067da:	d825      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80067dc:	2bc0      	cmp	r3, #192	; 0xc0
 80067de:	d028      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80067e0:	2bc0      	cmp	r3, #192	; 0xc0
 80067e2:	d821      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80067e4:	2b80      	cmp	r3, #128	; 0x80
 80067e6:	d016      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80067e8:	2b80      	cmp	r3, #128	; 0x80
 80067ea:	d81d      	bhi.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d002      	beq.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80067f0:	2b40      	cmp	r3, #64	; 0x40
 80067f2:	d007      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80067f4:	e018      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067f6:	4b5e      	ldr	r3, [pc, #376]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fa:	4a5d      	ldr	r2, [pc, #372]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006800:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006802:	e017      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	3304      	adds	r3, #4
 8006808:	2100      	movs	r1, #0
 800680a:	4618      	mov	r0, r3
 800680c:	f001 f94a 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006810:	4603      	mov	r3, r0
 8006812:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006814:	e00e      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	3324      	adds	r3, #36	; 0x24
 800681a:	2100      	movs	r1, #0
 800681c:	4618      	mov	r0, r3
 800681e:	f001 f9f3 	bl	8007c08 <RCCEx_PLL3_Config>
 8006822:	4603      	mov	r3, r0
 8006824:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006826:	e005      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	75fb      	strb	r3, [r7, #23]
      break;
 800682c:	e002      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800682e:	bf00      	nop
 8006830:	e000      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006832:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006834:	7dfb      	ldrb	r3, [r7, #23]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d109      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800683a:	4b4d      	ldr	r3, [pc, #308]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800683c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800683e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006846:	494a      	ldr	r1, [pc, #296]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006848:	4313      	orrs	r3, r2
 800684a:	650b      	str	r3, [r1, #80]	; 0x50
 800684c:	e001      	b.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	7dfb      	ldrb	r3, [r7, #23]
 8006850:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800685a:	2b00      	cmp	r3, #0
 800685c:	d049      	beq.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006864:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006868:	d030      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800686a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800686e:	d82a      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006870:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006874:	d02c      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006876:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800687a:	d824      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800687c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006880:	d018      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006882:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006886:	d81e      	bhi.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800688c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006890:	d007      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006892:	e018      	b.n	80068c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006894:	4b36      	ldr	r3, [pc, #216]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006898:	4a35      	ldr	r2, [pc, #212]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800689a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800689e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068a0:	e017      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	3304      	adds	r3, #4
 80068a6:	2100      	movs	r1, #0
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 f8fb 	bl	8007aa4 <RCCEx_PLL2_Config>
 80068ae:	4603      	mov	r3, r0
 80068b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80068b2:	e00e      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3324      	adds	r3, #36	; 0x24
 80068b8:	2100      	movs	r1, #0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f001 f9a4 	bl	8007c08 <RCCEx_PLL3_Config>
 80068c0:	4603      	mov	r3, r0
 80068c2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068c4:	e005      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ca:	e002      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80068cc:	bf00      	nop
 80068ce:	e000      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80068d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068d2:	7dfb      	ldrb	r3, [r7, #23]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d10a      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068d8:	4b25      	ldr	r3, [pc, #148]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068dc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80068e6:	4922      	ldr	r1, [pc, #136]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	658b      	str	r3, [r1, #88]	; 0x58
 80068ec:	e001      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d04b      	beq.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006908:	d030      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800690a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800690e:	d82a      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006910:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006914:	d02e      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800691a:	d824      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800691c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006920:	d018      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006926:	d81e      	bhi.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800692c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006930:	d007      	beq.n	8006942 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006932:	e018      	b.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006934:	4b0e      	ldr	r3, [pc, #56]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	4a0d      	ldr	r2, [pc, #52]	; (8006970 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800693a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800693e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006940:	e019      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	3304      	adds	r3, #4
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f001 f8ab 	bl	8007aa4 <RCCEx_PLL2_Config>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006952:	e010      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3324      	adds	r3, #36	; 0x24
 8006958:	2100      	movs	r1, #0
 800695a:	4618      	mov	r0, r3
 800695c:	f001 f954 	bl	8007c08 <RCCEx_PLL3_Config>
 8006960:	4603      	mov	r3, r0
 8006962:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006964:	e007      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006966:	2301      	movs	r3, #1
 8006968:	75fb      	strb	r3, [r7, #23]
      break;
 800696a:	e004      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800696c:	bf00      	nop
 800696e:	e002      	b.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006970:	58024400 	.word	0x58024400
      break;
 8006974:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006976:	7dfb      	ldrb	r3, [r7, #23]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10a      	bne.n	8006992 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800697c:	4b99      	ldr	r3, [pc, #612]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800697e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006980:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800698a:	4996      	ldr	r1, [pc, #600]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800698c:	4313      	orrs	r3, r2
 800698e:	658b      	str	r3, [r1, #88]	; 0x58
 8006990:	e001      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d032      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069a6:	2b30      	cmp	r3, #48	; 0x30
 80069a8:	d01c      	beq.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80069aa:	2b30      	cmp	r3, #48	; 0x30
 80069ac:	d817      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x342>
 80069ae:	2b20      	cmp	r3, #32
 80069b0:	d00c      	beq.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x330>
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d813      	bhi.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x342>
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d016      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80069ba:	2b10      	cmp	r3, #16
 80069bc:	d10f      	bne.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069be:	4b89      	ldr	r3, [pc, #548]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c2:	4a88      	ldr	r2, [pc, #544]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069ca:	e00e      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3304      	adds	r3, #4
 80069d0:	2102      	movs	r1, #2
 80069d2:	4618      	mov	r0, r3
 80069d4:	f001 f866 	bl	8007aa4 <RCCEx_PLL2_Config>
 80069d8:	4603      	mov	r3, r0
 80069da:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069dc:	e005      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	75fb      	strb	r3, [r7, #23]
      break;
 80069e2:	e002      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80069e4:	bf00      	nop
 80069e6:	e000      	b.n	80069ea <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80069e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069ea:	7dfb      	ldrb	r3, [r7, #23]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d109      	bne.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069f0:	4b7c      	ldr	r3, [pc, #496]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069f4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069fc:	4979      	ldr	r1, [pc, #484]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a02:	e001      	b.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a04:	7dfb      	ldrb	r3, [r7, #23]
 8006a06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d047      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a1c:	d030      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a22:	d82a      	bhi.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a28:	d02c      	beq.n	8006a84 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006a2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a2e:	d824      	bhi.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a34:	d018      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a3a:	d81e      	bhi.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a44:	d007      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006a46:	e018      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a48:	4b66      	ldr	r3, [pc, #408]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	4a65      	ldr	r2, [pc, #404]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a54:	e017      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f001 f821 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006a62:	4603      	mov	r3, r0
 8006a64:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a66:	e00e      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3324      	adds	r3, #36	; 0x24
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 f8ca 	bl	8007c08 <RCCEx_PLL3_Config>
 8006a74:	4603      	mov	r3, r0
 8006a76:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a78:	e005      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a7e:	e002      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006a80:	bf00      	nop
 8006a82:	e000      	b.n	8006a86 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006a84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a86:	7dfb      	ldrb	r3, [r7, #23]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d109      	bne.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006a8c:	4b55      	ldr	r3, [pc, #340]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a90:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a98:	4952      	ldr	r1, [pc, #328]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	650b      	str	r3, [r1, #80]	; 0x50
 8006a9e:	e001      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aa0:	7dfb      	ldrb	r3, [r7, #23]
 8006aa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d049      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ab4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ab8:	d02e      	beq.n	8006b18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006aba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006abe:	d828      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006ac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ac4:	d02a      	beq.n	8006b1c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006ac6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aca:	d822      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006acc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad0:	d026      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006ad2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006ad6:	d81c      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006ad8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006adc:	d010      	beq.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006ade:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ae2:	d816      	bhi.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01d      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aec:	d111      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	3304      	adds	r3, #4
 8006af2:	2101      	movs	r1, #1
 8006af4:	4618      	mov	r0, r3
 8006af6:	f000 ffd5 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006afa:	4603      	mov	r3, r0
 8006afc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006afe:	e012      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	3324      	adds	r3, #36	; 0x24
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f001 f87e 	bl	8007c08 <RCCEx_PLL3_Config>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b10:	e009      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	75fb      	strb	r3, [r7, #23]
      break;
 8006b16:	e006      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b18:	bf00      	nop
 8006b1a:	e004      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b1c:	bf00      	nop
 8006b1e:	e002      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b24:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b26:	7dfb      	ldrb	r3, [r7, #23]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d109      	bne.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b2c:	4b2d      	ldr	r3, [pc, #180]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b30:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b38:	492a      	ldr	r1, [pc, #168]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b3e:	e001      	b.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b40:	7dfb      	ldrb	r3, [r7, #23]
 8006b42:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d04d      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b5a:	d02e      	beq.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006b5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b60:	d828      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b66:	d02a      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006b68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b6c:	d822      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b6e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b72:	d026      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006b74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b78:	d81c      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b7e:	d010      	beq.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006b80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b84:	d816      	bhi.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d01d      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006b8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b8e:	d111      	bne.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	3304      	adds	r3, #4
 8006b94:	2101      	movs	r1, #1
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 ff84 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006ba0:	e012      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3324      	adds	r3, #36	; 0x24
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f001 f82d 	bl	8007c08 <RCCEx_PLL3_Config>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006bb2:	e009      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bb8:	e006      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006bba:	bf00      	nop
 8006bbc:	e004      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006bbe:	bf00      	nop
 8006bc0:	e002      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006bc2:	bf00      	nop
 8006bc4:	e000      	b.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bc8:	7dfb      	ldrb	r3, [r7, #23]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d10c      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bce:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bd2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bdc:	4901      	ldr	r1, [pc, #4]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	658b      	str	r3, [r1, #88]	; 0x58
 8006be2:	e003      	b.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006be4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d02f      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c00:	d00e      	beq.n	8006c20 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006c02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c06:	d814      	bhi.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d015      	beq.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c10:	d10f      	bne.n	8006c32 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c12:	4baf      	ldr	r3, [pc, #700]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	4aae      	ldr	r2, [pc, #696]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c1c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c1e:	e00c      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	3304      	adds	r3, #4
 8006c24:	2101      	movs	r1, #1
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 ff3c 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c30:	e003      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	75fb      	strb	r3, [r7, #23]
      break;
 8006c36:	e000      	b.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006c38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d109      	bne.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c40:	4ba3      	ldr	r3, [pc, #652]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c4c:	49a0      	ldr	r1, [pc, #640]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	650b      	str	r3, [r1, #80]	; 0x50
 8006c52:	e001      	b.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d032      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d81b      	bhi.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006c6c:	a201      	add	r2, pc, #4	; (adr r2, 8006c74 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c72:	bf00      	nop
 8006c74:	08006cab 	.word	0x08006cab
 8006c78:	08006c85 	.word	0x08006c85
 8006c7c:	08006c93 	.word	0x08006c93
 8006c80:	08006cab 	.word	0x08006cab
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c84:	4b92      	ldr	r3, [pc, #584]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c88:	4a91      	ldr	r2, [pc, #580]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c8e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006c90:	e00c      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	3304      	adds	r3, #4
 8006c96:	2102      	movs	r1, #2
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f000 ff03 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006ca2:	e003      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ca8:	e000      	b.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d109      	bne.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cb2:	4b87      	ldr	r3, [pc, #540]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb6:	f023 0203 	bic.w	r2, r3, #3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cbe:	4984      	ldr	r1, [pc, #528]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006cc4:	e001      	b.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cc6:	7dfb      	ldrb	r3, [r7, #23]
 8006cc8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 8086 	beq.w	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cd8:	4b7e      	ldr	r3, [pc, #504]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a7d      	ldr	r2, [pc, #500]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ce2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ce4:	f7fa fd90 	bl	8001808 <HAL_GetTick>
 8006ce8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cea:	e009      	b.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cec:	f7fa fd8c 	bl	8001808 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	2b64      	cmp	r3, #100	; 0x64
 8006cf8:	d902      	bls.n	8006d00 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	75fb      	strb	r3, [r7, #23]
        break;
 8006cfe:	e005      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d00:	4b74      	ldr	r3, [pc, #464]	; (8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d0ef      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d166      	bne.n	8006de0 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d12:	4b6f      	ldr	r3, [pc, #444]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d1c:	4053      	eors	r3, r2
 8006d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d013      	beq.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d26:	4b6a      	ldr	r3, [pc, #424]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d30:	4b67      	ldr	r3, [pc, #412]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	4a66      	ldr	r2, [pc, #408]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d3a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d3c:	4b64      	ldr	r3, [pc, #400]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d40:	4a63      	ldr	r2, [pc, #396]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d46:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d48:	4a61      	ldr	r2, [pc, #388]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d58:	d115      	bne.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d5a:	f7fa fd55 	bl	8001808 <HAL_GetTick>
 8006d5e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d60:	e00b      	b.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d62:	f7fa fd51 	bl	8001808 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d902      	bls.n	8006d7a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	75fb      	strb	r3, [r7, #23]
            break;
 8006d78:	e005      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d7a:	4b55      	ldr	r3, [pc, #340]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d7e:	f003 0302 	and.w	r3, r3, #2
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d0ed      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d126      	bne.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d9a:	d10d      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006d9c:	4b4c      	ldr	r3, [pc, #304]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006daa:	0919      	lsrs	r1, r3, #4
 8006dac:	4b4a      	ldr	r3, [pc, #296]	; (8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006dae:	400b      	ands	r3, r1
 8006db0:	4947      	ldr	r1, [pc, #284]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006db2:	4313      	orrs	r3, r2
 8006db4:	610b      	str	r3, [r1, #16]
 8006db6:	e005      	b.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006db8:	4b45      	ldr	r3, [pc, #276]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	4a44      	ldr	r2, [pc, #272]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006dc2:	6113      	str	r3, [r2, #16]
 8006dc4:	4b42      	ldr	r3, [pc, #264]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dc6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dd2:	493f      	ldr	r1, [pc, #252]	; (8006ed0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	670b      	str	r3, [r1, #112]	; 0x70
 8006dd8:	e004      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dda:	7dfb      	ldrb	r3, [r7, #23]
 8006ddc:	75bb      	strb	r3, [r7, #22]
 8006dde:	e001      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 8085 	beq.w	8006efc <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006df6:	2b28      	cmp	r3, #40	; 0x28
 8006df8:	d866      	bhi.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006edd 	.word	0x08006edd
 8006e04:	08006ec9 	.word	0x08006ec9
 8006e08:	08006ec9 	.word	0x08006ec9
 8006e0c:	08006ec9 	.word	0x08006ec9
 8006e10:	08006ec9 	.word	0x08006ec9
 8006e14:	08006ec9 	.word	0x08006ec9
 8006e18:	08006ec9 	.word	0x08006ec9
 8006e1c:	08006ec9 	.word	0x08006ec9
 8006e20:	08006ea5 	.word	0x08006ea5
 8006e24:	08006ec9 	.word	0x08006ec9
 8006e28:	08006ec9 	.word	0x08006ec9
 8006e2c:	08006ec9 	.word	0x08006ec9
 8006e30:	08006ec9 	.word	0x08006ec9
 8006e34:	08006ec9 	.word	0x08006ec9
 8006e38:	08006ec9 	.word	0x08006ec9
 8006e3c:	08006ec9 	.word	0x08006ec9
 8006e40:	08006eb7 	.word	0x08006eb7
 8006e44:	08006ec9 	.word	0x08006ec9
 8006e48:	08006ec9 	.word	0x08006ec9
 8006e4c:	08006ec9 	.word	0x08006ec9
 8006e50:	08006ec9 	.word	0x08006ec9
 8006e54:	08006ec9 	.word	0x08006ec9
 8006e58:	08006ec9 	.word	0x08006ec9
 8006e5c:	08006ec9 	.word	0x08006ec9
 8006e60:	08006edd 	.word	0x08006edd
 8006e64:	08006ec9 	.word	0x08006ec9
 8006e68:	08006ec9 	.word	0x08006ec9
 8006e6c:	08006ec9 	.word	0x08006ec9
 8006e70:	08006ec9 	.word	0x08006ec9
 8006e74:	08006ec9 	.word	0x08006ec9
 8006e78:	08006ec9 	.word	0x08006ec9
 8006e7c:	08006ec9 	.word	0x08006ec9
 8006e80:	08006edd 	.word	0x08006edd
 8006e84:	08006ec9 	.word	0x08006ec9
 8006e88:	08006ec9 	.word	0x08006ec9
 8006e8c:	08006ec9 	.word	0x08006ec9
 8006e90:	08006ec9 	.word	0x08006ec9
 8006e94:	08006ec9 	.word	0x08006ec9
 8006e98:	08006ec9 	.word	0x08006ec9
 8006e9c:	08006ec9 	.word	0x08006ec9
 8006ea0:	08006edd 	.word	0x08006edd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	3304      	adds	r3, #4
 8006ea8:	2101      	movs	r1, #1
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f000 fdfa 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006eb4:	e013      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	3324      	adds	r3, #36	; 0x24
 8006eba:	2101      	movs	r1, #1
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 fea3 	bl	8007c08 <RCCEx_PLL3_Config>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ec6:	e00a      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	75fb      	strb	r3, [r7, #23]
      break;
 8006ecc:	e007      	b.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006ece:	bf00      	nop
 8006ed0:	58024400 	.word	0x58024400
 8006ed4:	58024800 	.word	0x58024800
 8006ed8:	00ffffcf 	.word	0x00ffffcf
      break;
 8006edc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d109      	bne.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ee4:	4b96      	ldr	r3, [pc, #600]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ee8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ef0:	4993      	ldr	r1, [pc, #588]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	654b      	str	r3, [r1, #84]	; 0x54
 8006ef6:	e001      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ef8:	7dfb      	ldrb	r3, [r7, #23]
 8006efa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d038      	beq.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f0c:	2b05      	cmp	r3, #5
 8006f0e:	d821      	bhi.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006f10:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f16:	bf00      	nop
 8006f18:	08006f5b 	.word	0x08006f5b
 8006f1c:	08006f31 	.word	0x08006f31
 8006f20:	08006f43 	.word	0x08006f43
 8006f24:	08006f5b 	.word	0x08006f5b
 8006f28:	08006f5b 	.word	0x08006f5b
 8006f2c:	08006f5b 	.word	0x08006f5b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	3304      	adds	r3, #4
 8006f34:	2101      	movs	r1, #1
 8006f36:	4618      	mov	r0, r3
 8006f38:	f000 fdb4 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f40:	e00c      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3324      	adds	r3, #36	; 0x24
 8006f46:	2101      	movs	r1, #1
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 fe5d 	bl	8007c08 <RCCEx_PLL3_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f52:	e003      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75fb      	strb	r3, [r7, #23]
      break;
 8006f58:	e000      	b.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006f5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5c:	7dfb      	ldrb	r3, [r7, #23]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d109      	bne.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f62:	4b77      	ldr	r3, [pc, #476]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f66:	f023 0207 	bic.w	r2, r3, #7
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f6e:	4974      	ldr	r1, [pc, #464]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	654b      	str	r3, [r1, #84]	; 0x54
 8006f74:	e001      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f76:	7dfb      	ldrb	r3, [r7, #23]
 8006f78:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f003 0304 	and.w	r3, r3, #4
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d03a      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8c:	2b05      	cmp	r3, #5
 8006f8e:	d821      	bhi.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006f90:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006fdb 	.word	0x08006fdb
 8006f9c:	08006fb1 	.word	0x08006fb1
 8006fa0:	08006fc3 	.word	0x08006fc3
 8006fa4:	08006fdb 	.word	0x08006fdb
 8006fa8:	08006fdb 	.word	0x08006fdb
 8006fac:	08006fdb 	.word	0x08006fdb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fd74 	bl	8007aa4 <RCCEx_PLL2_Config>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fc0:	e00c      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	3324      	adds	r3, #36	; 0x24
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f000 fe1d 	bl	8007c08 <RCCEx_PLL3_Config>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fd2:	e003      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006fd8:	e000      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fdc:	7dfb      	ldrb	r3, [r7, #23]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10a      	bne.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006fe2:	4b57      	ldr	r3, [pc, #348]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fe6:	f023 0207 	bic.w	r2, r3, #7
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff0:	4953      	ldr	r1, [pc, #332]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ff6:	e001      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ff8:	7dfb      	ldrb	r3, [r7, #23]
 8006ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d04b      	beq.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800700e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007012:	d02e      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007018:	d828      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800701a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800701e:	d02a      	beq.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007024:	d822      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007026:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800702a:	d026      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800702c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007030:	d81c      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007032:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007036:	d010      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007038:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800703c:	d816      	bhi.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800703e:	2b00      	cmp	r3, #0
 8007040:	d01d      	beq.n	800707e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007042:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007046:	d111      	bne.n	800706c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	3304      	adds	r3, #4
 800704c:	2100      	movs	r1, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fd28 	bl	8007aa4 <RCCEx_PLL2_Config>
 8007054:	4603      	mov	r3, r0
 8007056:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007058:	e012      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	3324      	adds	r3, #36	; 0x24
 800705e:	2102      	movs	r1, #2
 8007060:	4618      	mov	r0, r3
 8007062:	f000 fdd1 	bl	8007c08 <RCCEx_PLL3_Config>
 8007066:	4603      	mov	r3, r0
 8007068:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800706a:	e009      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	75fb      	strb	r3, [r7, #23]
      break;
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007072:	bf00      	nop
 8007074:	e004      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007076:	bf00      	nop
 8007078:	e002      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800707e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007080:	7dfb      	ldrb	r3, [r7, #23]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10a      	bne.n	800709c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007086:	4b2e      	ldr	r3, [pc, #184]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800708a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007094:	492a      	ldr	r1, [pc, #168]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007096:	4313      	orrs	r3, r2
 8007098:	654b      	str	r3, [r1, #84]	; 0x54
 800709a:	e001      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d04d      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070b2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070b6:	d02e      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80070b8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070bc:	d828      	bhi.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80070be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c2:	d02a      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80070c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070c8:	d822      	bhi.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80070ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ce:	d026      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80070d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070d4:	d81c      	bhi.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80070d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070da:	d010      	beq.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80070dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070e0:	d816      	bhi.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01d      	beq.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80070e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ea:	d111      	bne.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	3304      	adds	r3, #4
 80070f0:	2100      	movs	r1, #0
 80070f2:	4618      	mov	r0, r3
 80070f4:	f000 fcd6 	bl	8007aa4 <RCCEx_PLL2_Config>
 80070f8:	4603      	mov	r3, r0
 80070fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80070fc:	e012      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	3324      	adds	r3, #36	; 0x24
 8007102:	2102      	movs	r1, #2
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fd7f 	bl	8007c08 <RCCEx_PLL3_Config>
 800710a:	4603      	mov	r3, r0
 800710c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800710e:	e009      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007110:	2301      	movs	r3, #1
 8007112:	75fb      	strb	r3, [r7, #23]
      break;
 8007114:	e006      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007116:	bf00      	nop
 8007118:	e004      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800711a:	bf00      	nop
 800711c:	e002      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800711e:	bf00      	nop
 8007120:	e000      	b.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007122:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007124:	7dfb      	ldrb	r3, [r7, #23]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10c      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800712a:	4b05      	ldr	r3, [pc, #20]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800712c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007138:	4901      	ldr	r1, [pc, #4]	; (8007140 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800713a:	4313      	orrs	r3, r2
 800713c:	658b      	str	r3, [r1, #88]	; 0x58
 800713e:	e003      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007150:	2b00      	cmp	r3, #0
 8007152:	d04b      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800715a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800715e:	d02e      	beq.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007160:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007164:	d828      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800716a:	d02a      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800716c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007170:	d822      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007172:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007176:	d026      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007178:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800717c:	d81c      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800717e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007182:	d010      	beq.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007184:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007188:	d816      	bhi.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01d      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800718e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007192:	d111      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	3304      	adds	r3, #4
 8007198:	2100      	movs	r1, #0
 800719a:	4618      	mov	r0, r3
 800719c:	f000 fc82 	bl	8007aa4 <RCCEx_PLL2_Config>
 80071a0:	4603      	mov	r3, r0
 80071a2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071a4:	e012      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	3324      	adds	r3, #36	; 0x24
 80071aa:	2102      	movs	r1, #2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f000 fd2b 	bl	8007c08 <RCCEx_PLL3_Config>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071b6:	e009      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071b8:	2301      	movs	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
      break;
 80071bc:	e006      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80071be:	bf00      	nop
 80071c0:	e004      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80071c2:	bf00      	nop
 80071c4:	e002      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80071ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071cc:	7dfb      	ldrb	r3, [r7, #23]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d10a      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071d2:	4b9d      	ldr	r3, [pc, #628]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071e0:	4999      	ldr	r1, [pc, #612]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	658b      	str	r3, [r1, #88]	; 0x58
 80071e6:	e001      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0308 	and.w	r3, r3, #8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d01a      	beq.n	800722e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007202:	d10a      	bne.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	3324      	adds	r3, #36	; 0x24
 8007208:	2102      	movs	r1, #2
 800720a:	4618      	mov	r0, r3
 800720c:	f000 fcfc 	bl	8007c08 <RCCEx_PLL3_Config>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800721a:	4b8b      	ldr	r3, [pc, #556]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800721c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800721e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007228:	4987      	ldr	r1, [pc, #540]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800722a:	4313      	orrs	r3, r2
 800722c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b00      	cmp	r3, #0
 8007238:	d01a      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007240:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007244:	d10a      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	3324      	adds	r3, #36	; 0x24
 800724a:	2102      	movs	r1, #2
 800724c:	4618      	mov	r0, r3
 800724e:	f000 fcdb 	bl	8007c08 <RCCEx_PLL3_Config>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800725c:	4b7a      	ldr	r3, [pc, #488]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800725e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007260:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800726a:	4977      	ldr	r1, [pc, #476]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800726c:	4313      	orrs	r3, r2
 800726e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d034      	beq.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007282:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007286:	d01d      	beq.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007288:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800728c:	d817      	bhi.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007296:	d009      	beq.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007298:	e011      	b.n	80072be <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3304      	adds	r3, #4
 800729e:	2100      	movs	r1, #0
 80072a0:	4618      	mov	r0, r3
 80072a2:	f000 fbff 	bl	8007aa4 <RCCEx_PLL2_Config>
 80072a6:	4603      	mov	r3, r0
 80072a8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072aa:	e00c      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3324      	adds	r3, #36	; 0x24
 80072b0:	2102      	movs	r1, #2
 80072b2:	4618      	mov	r0, r3
 80072b4:	f000 fca8 	bl	8007c08 <RCCEx_PLL3_Config>
 80072b8:	4603      	mov	r3, r0
 80072ba:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072bc:	e003      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072be:	2301      	movs	r3, #1
 80072c0:	75fb      	strb	r3, [r7, #23]
      break;
 80072c2:	e000      	b.n	80072c6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80072c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072cc:	4b5e      	ldr	r3, [pc, #376]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072da:	495b      	ldr	r1, [pc, #364]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072dc:	4313      	orrs	r3, r2
 80072de:	658b      	str	r3, [r1, #88]	; 0x58
 80072e0:	e001      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072e2:	7dfb      	ldrb	r3, [r7, #23]
 80072e4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d033      	beq.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80072f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80072fc:	d01c      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80072fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007302:	d816      	bhi.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007308:	d003      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800730a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800730e:	d007      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007310:	e00f      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007312:	4b4d      	ldr	r3, [pc, #308]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007316:	4a4c      	ldr	r2, [pc, #304]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007318:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800731c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800731e:	e00c      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	3324      	adds	r3, #36	; 0x24
 8007324:	2101      	movs	r1, #1
 8007326:	4618      	mov	r0, r3
 8007328:	f000 fc6e 	bl	8007c08 <RCCEx_PLL3_Config>
 800732c:	4603      	mov	r3, r0
 800732e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007330:	e003      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	75fb      	strb	r3, [r7, #23]
      break;
 8007336:	e000      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10a      	bne.n	8007356 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007340:	4b41      	ldr	r3, [pc, #260]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734e:	493e      	ldr	r1, [pc, #248]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007350:	4313      	orrs	r3, r2
 8007352:	654b      	str	r3, [r1, #84]	; 0x54
 8007354:	e001      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d029      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736a:	2b00      	cmp	r3, #0
 800736c:	d003      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800736e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007372:	d007      	beq.n	8007384 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007374:	e00f      	b.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007376:	4b34      	ldr	r3, [pc, #208]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800737a:	4a33      	ldr	r2, [pc, #204]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800737c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007382:	e00b      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	3304      	adds	r3, #4
 8007388:	2102      	movs	r1, #2
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fb8a 	bl	8007aa4 <RCCEx_PLL2_Config>
 8007390:	4603      	mov	r3, r0
 8007392:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007394:	e002      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	75fb      	strb	r3, [r7, #23]
      break;
 800739a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d109      	bne.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073a2:	4b29      	ldr	r3, [pc, #164]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ae:	4926      	ldr	r1, [pc, #152]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073b0:	4313      	orrs	r3, r2
 80073b2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073b4:	e001      	b.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b6:	7dfb      	ldrb	r3, [r7, #23]
 80073b8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d00a      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	3324      	adds	r3, #36	; 0x24
 80073ca:	2102      	movs	r1, #2
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fc1b 	bl	8007c08 <RCCEx_PLL3_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d033      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f0:	d017      	beq.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80073f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073f6:	d811      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80073f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073fc:	d013      	beq.n	8007426 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80073fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007402:	d80b      	bhi.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007404:	2b00      	cmp	r3, #0
 8007406:	d010      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007408:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800740c:	d106      	bne.n	800741c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800740e:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	4a0d      	ldr	r2, [pc, #52]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007414:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007418:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800741a:	e007      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	75fb      	strb	r3, [r7, #23]
      break;
 8007420:	e004      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007422:	bf00      	nop
 8007424:	e002      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007426:	bf00      	nop
 8007428:	e000      	b.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800742a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800742c:	7dfb      	ldrb	r3, [r7, #23]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d10c      	bne.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007432:	4b05      	ldr	r3, [pc, #20]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007436:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800743e:	4902      	ldr	r1, [pc, #8]	; (8007448 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007440:	4313      	orrs	r3, r2
 8007442:	654b      	str	r3, [r1, #84]	; 0x54
 8007444:	e004      	b.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007446:	bf00      	nop
 8007448:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d008      	beq.n	800746e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800745c:	4b31      	ldr	r3, [pc, #196]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800745e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007460:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007468:	492e      	ldr	r1, [pc, #184]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800746a:	4313      	orrs	r3, r2
 800746c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d009      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800747a:	4b2a      	ldr	r3, [pc, #168]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800747c:	691b      	ldr	r3, [r3, #16]
 800747e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007488:	4926      	ldr	r1, [pc, #152]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800748a:	4313      	orrs	r3, r2
 800748c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d008      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800749a:	4b22      	ldr	r3, [pc, #136]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800749c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800749e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074a6:	491f      	ldr	r1, [pc, #124]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074a8:	4313      	orrs	r3, r2
 80074aa:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00d      	beq.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074b8:	4b1a      	ldr	r3, [pc, #104]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	4a19      	ldr	r2, [pc, #100]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074c2:	6113      	str	r3, [r2, #16]
 80074c4:	4b17      	ldr	r3, [pc, #92]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074ce:	4915      	ldr	r1, [pc, #84]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074d0:	4313      	orrs	r3, r2
 80074d2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	da08      	bge.n	80074ee <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80074dc:	4b11      	ldr	r3, [pc, #68]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e8:	490e      	ldr	r1, [pc, #56]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d009      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074fe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007508:	4906      	ldr	r1, [pc, #24]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800750a:	4313      	orrs	r3, r2
 800750c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800750e:	7dbb      	ldrb	r3, [r7, #22]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d101      	bne.n	8007518 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007514:	2300      	movs	r3, #0
 8007516:	e000      	b.n	800751a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007518:	2301      	movs	r3, #1
}
 800751a:	4618      	mov	r0, r3
 800751c:	3718      	adds	r7, #24
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	58024400 	.word	0x58024400

08007528 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800752c:	f7ff f85a 	bl	80065e4 <HAL_RCC_GetHCLKFreq>
 8007530:	4602      	mov	r2, r0
 8007532:	4b06      	ldr	r3, [pc, #24]	; (800754c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007534:	6a1b      	ldr	r3, [r3, #32]
 8007536:	091b      	lsrs	r3, r3, #4
 8007538:	f003 0307 	and.w	r3, r3, #7
 800753c:	4904      	ldr	r1, [pc, #16]	; (8007550 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800753e:	5ccb      	ldrb	r3, [r1, r3]
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007548:	4618      	mov	r0, r3
 800754a:	bd80      	pop	{r7, pc}
 800754c:	58024400 	.word	0x58024400
 8007550:	0800b338 	.word	0x0800b338

08007554 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007554:	b480      	push	{r7}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800755c:	4ba1      	ldr	r3, [pc, #644]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007566:	4b9f      	ldr	r3, [pc, #636]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	0b1b      	lsrs	r3, r3, #12
 800756c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007570:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007572:	4b9c      	ldr	r3, [pc, #624]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	091b      	lsrs	r3, r3, #4
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800757e:	4b99      	ldr	r3, [pc, #612]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	08db      	lsrs	r3, r3, #3
 8007584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 8111 	beq.w	80077c4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	f000 8083 	beq.w	80076b0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	f200 80a1 	bhi.w	80076f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d056      	beq.n	800766c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075be:	e099      	b.n	80076f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075c0:	4b88      	ldr	r3, [pc, #544]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0320 	and.w	r3, r3, #32
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d02d      	beq.n	8007628 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075cc:	4b85      	ldr	r3, [pc, #532]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	08db      	lsrs	r3, r3, #3
 80075d2:	f003 0303 	and.w	r3, r3, #3
 80075d6:	4a84      	ldr	r2, [pc, #528]	; (80077e8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075d8:	fa22 f303 	lsr.w	r3, r2, r3
 80075dc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	ee07 3a90 	vmov	s15, r3
 80075e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	ee07 3a90 	vmov	s15, r3
 80075ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075f6:	4b7b      	ldr	r3, [pc, #492]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075fe:	ee07 3a90 	vmov	s15, r3
 8007602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007606:	ed97 6a03 	vldr	s12, [r7, #12]
 800760a:	eddf 5a78 	vldr	s11, [pc, #480]	; 80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800760e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800761a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800761e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007622:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007626:	e087      	b.n	8007738 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007632:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80077f0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800763a:	4b6a      	ldr	r3, [pc, #424]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800763c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007642:	ee07 3a90 	vmov	s15, r3
 8007646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800764a:	ed97 6a03 	vldr	s12, [r7, #12]
 800764e:	eddf 5a67 	vldr	s11, [pc, #412]	; 80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800765a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800765e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007666:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800766a:	e065      	b.n	8007738 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007676:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800767a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800767e:	4b59      	ldr	r3, [pc, #356]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007686:	ee07 3a90 	vmov	s15, r3
 800768a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800768e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007692:	eddf 5a56 	vldr	s11, [pc, #344]	; 80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800769a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800769e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076ae:	e043      	b.n	8007738 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80077f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076c2:	4b48      	ldr	r3, [pc, #288]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ca:	ee07 3a90 	vmov	s15, r3
 80076ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076f2:	e021      	b.n	8007738 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80077f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007702:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007706:	4b37      	ldr	r3, [pc, #220]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800770a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800770e:	ee07 3a90 	vmov	s15, r3
 8007712:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007716:	ed97 6a03 	vldr	s12, [r7, #12]
 800771a:	eddf 5a34 	vldr	s11, [pc, #208]	; 80077ec <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800771e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007722:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007726:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800772a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800772e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007732:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007736:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007738:	4b2a      	ldr	r3, [pc, #168]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	0a5b      	lsrs	r3, r3, #9
 800773e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007742:	ee07 3a90 	vmov	s15, r3
 8007746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800774a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800774e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007752:	edd7 6a07 	vldr	s13, [r7, #28]
 8007756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800775a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800775e:	ee17 2a90 	vmov	r2, s15
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007766:	4b1f      	ldr	r3, [pc, #124]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776a:	0c1b      	lsrs	r3, r3, #16
 800776c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007778:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800777c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007780:	edd7 6a07 	vldr	s13, [r7, #28]
 8007784:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007788:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800778c:	ee17 2a90 	vmov	r2, s15
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007794:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007798:	0e1b      	lsrs	r3, r3, #24
 800779a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800779e:	ee07 3a90 	vmov	s15, r3
 80077a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80077b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ba:	ee17 2a90 	vmov	r2, s15
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077c2:	e008      	b.n	80077d6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2200      	movs	r2, #0
 80077d4:	609a      	str	r2, [r3, #8]
}
 80077d6:	bf00      	nop
 80077d8:	3724      	adds	r7, #36	; 0x24
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
 80077e2:	bf00      	nop
 80077e4:	58024400 	.word	0x58024400
 80077e8:	03d09000 	.word	0x03d09000
 80077ec:	46000000 	.word	0x46000000
 80077f0:	4c742400 	.word	0x4c742400
 80077f4:	4a742400 	.word	0x4a742400
 80077f8:	4af42400 	.word	0x4af42400

080077fc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b089      	sub	sp, #36	; 0x24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007804:	4ba1      	ldr	r3, [pc, #644]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007808:	f003 0303 	and.w	r3, r3, #3
 800780c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800780e:	4b9f      	ldr	r3, [pc, #636]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	0d1b      	lsrs	r3, r3, #20
 8007814:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007818:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800781a:	4b9c      	ldr	r3, [pc, #624]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	0a1b      	lsrs	r3, r3, #8
 8007820:	f003 0301 	and.w	r3, r3, #1
 8007824:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007826:	4b99      	ldr	r3, [pc, #612]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782a:	08db      	lsrs	r3, r3, #3
 800782c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	ee07 3a90 	vmov	s15, r3
 800783a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800783e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8111 	beq.w	8007a6c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b02      	cmp	r3, #2
 800784e:	f000 8083 	beq.w	8007958 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007852:	69bb      	ldr	r3, [r7, #24]
 8007854:	2b02      	cmp	r3, #2
 8007856:	f200 80a1 	bhi.w	800799c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d003      	beq.n	8007868 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	2b01      	cmp	r3, #1
 8007864:	d056      	beq.n	8007914 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007866:	e099      	b.n	800799c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007868:	4b88      	ldr	r3, [pc, #544]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f003 0320 	and.w	r3, r3, #32
 8007870:	2b00      	cmp	r3, #0
 8007872:	d02d      	beq.n	80078d0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007874:	4b85      	ldr	r3, [pc, #532]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	08db      	lsrs	r3, r3, #3
 800787a:	f003 0303 	and.w	r3, r3, #3
 800787e:	4a84      	ldr	r2, [pc, #528]	; (8007a90 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007880:	fa22 f303 	lsr.w	r3, r2, r3
 8007884:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	ee07 3a90 	vmov	s15, r3
 8007896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800789a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800789e:	4b7b      	ldr	r3, [pc, #492]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a6:	ee07 3a90 	vmov	s15, r3
 80078aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80078b2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078ce:	e087      	b.n	80079e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	ee07 3a90 	vmov	s15, r3
 80078d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078da:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a98 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078e2:	4b6a      	ldr	r3, [pc, #424]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ea:	ee07 3a90 	vmov	s15, r3
 80078ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078f6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800790a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800790e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007912:	e065      	b.n	80079e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	ee07 3a90 	vmov	s15, r3
 800791a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800791e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007926:	4b59      	ldr	r3, [pc, #356]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800792e:	ee07 3a90 	vmov	s15, r3
 8007932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007936:	ed97 6a03 	vldr	s12, [r7, #12]
 800793a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800793e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007946:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800794a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800794e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007952:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007956:	e043      	b.n	80079e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	ee07 3a90 	vmov	s15, r3
 800795e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007962:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800796a:	4b48      	ldr	r3, [pc, #288]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800796c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007972:	ee07 3a90 	vmov	s15, r3
 8007976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800797a:	ed97 6a03 	vldr	s12, [r7, #12]
 800797e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800798a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800798e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007996:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800799a:	e021      	b.n	80079e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079a6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a9c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079b6:	ee07 3a90 	vmov	s15, r3
 80079ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079be:	ed97 6a03 	vldr	s12, [r7, #12]
 80079c2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a94 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079de:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80079e0:	4b2a      	ldr	r3, [pc, #168]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e4:	0a5b      	lsrs	r3, r3, #9
 80079e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ea:	ee07 3a90 	vmov	s15, r3
 80079ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80079fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a06:	ee17 2a90 	vmov	r2, s15
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a0e:	4b1f      	ldr	r3, [pc, #124]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a12:	0c1b      	lsrs	r3, r3, #16
 8007a14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a18:	ee07 3a90 	vmov	s15, r3
 8007a1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a34:	ee17 2a90 	vmov	r2, s15
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a3c:	4b13      	ldr	r3, [pc, #76]	; (8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a40:	0e1b      	lsrs	r3, r3, #24
 8007a42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a46:	ee07 3a90 	vmov	s15, r3
 8007a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a62:	ee17 2a90 	vmov	r2, s15
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a6a:	e008      	b.n	8007a7e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	609a      	str	r2, [r3, #8]
}
 8007a7e:	bf00      	nop
 8007a80:	3724      	adds	r7, #36	; 0x24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	58024400 	.word	0x58024400
 8007a90:	03d09000 	.word	0x03d09000
 8007a94:	46000000 	.word	0x46000000
 8007a98:	4c742400 	.word	0x4c742400
 8007a9c:	4a742400 	.word	0x4a742400
 8007aa0:	4af42400 	.word	0x4af42400

08007aa4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b084      	sub	sp, #16
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ab2:	4b53      	ldr	r3, [pc, #332]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d101      	bne.n	8007ac2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e099      	b.n	8007bf6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ac2:	4b4f      	ldr	r3, [pc, #316]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a4e      	ldr	r2, [pc, #312]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007ac8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007acc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ace:	f7f9 fe9b 	bl	8001808 <HAL_GetTick>
 8007ad2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ad4:	e008      	b.n	8007ae8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ad6:	f7f9 fe97 	bl	8001808 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d901      	bls.n	8007ae8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ae4:	2303      	movs	r3, #3
 8007ae6:	e086      	b.n	8007bf6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ae8:	4b45      	ldr	r3, [pc, #276]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1f0      	bne.n	8007ad6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007af4:	4b42      	ldr	r3, [pc, #264]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	031b      	lsls	r3, r3, #12
 8007b02:	493f      	ldr	r1, [pc, #252]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b04:	4313      	orrs	r3, r2
 8007b06:	628b      	str	r3, [r1, #40]	; 0x28
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	025b      	lsls	r3, r3, #9
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	431a      	orrs	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	3b01      	subs	r3, #1
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b2a:	431a      	orrs	r2, r3
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	061b      	lsls	r3, r3, #24
 8007b34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b38:	4931      	ldr	r1, [pc, #196]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b3e:	4b30      	ldr	r3, [pc, #192]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	492d      	ldr	r1, [pc, #180]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b50:	4b2b      	ldr	r3, [pc, #172]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	f023 0220 	bic.w	r2, r3, #32
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	4928      	ldr	r1, [pc, #160]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b62:	4b27      	ldr	r3, [pc, #156]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	4a26      	ldr	r2, [pc, #152]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b68:	f023 0310 	bic.w	r3, r3, #16
 8007b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b6e:	4b24      	ldr	r3, [pc, #144]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b72:	4b24      	ldr	r3, [pc, #144]	; (8007c04 <RCCEx_PLL2_Config+0x160>)
 8007b74:	4013      	ands	r3, r2
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	69d2      	ldr	r2, [r2, #28]
 8007b7a:	00d2      	lsls	r2, r2, #3
 8007b7c:	4920      	ldr	r1, [pc, #128]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b82:	4b1f      	ldr	r3, [pc, #124]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b86:	4a1e      	ldr	r2, [pc, #120]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	f043 0310 	orr.w	r3, r3, #16
 8007b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d106      	bne.n	8007ba2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b94:	4b1a      	ldr	r3, [pc, #104]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	4a19      	ldr	r2, [pc, #100]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007b9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba0:	e00f      	b.n	8007bc2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d106      	bne.n	8007bb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ba8:	4b15      	ldr	r3, [pc, #84]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	4a14      	ldr	r2, [pc, #80]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bb4:	e005      	b.n	8007bc2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bb6:	4b12      	ldr	r3, [pc, #72]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bba:	4a11      	ldr	r2, [pc, #68]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007bbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bc0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007bc2:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a0e      	ldr	r2, [pc, #56]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007bc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bce:	f7f9 fe1b 	bl	8001808 <HAL_GetTick>
 8007bd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bd4:	e008      	b.n	8007be8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bd6:	f7f9 fe17 	bl	8001808 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d901      	bls.n	8007be8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e006      	b.n	8007bf6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <RCCEx_PLL2_Config+0x15c>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0f0      	beq.n	8007bd6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	58024400 	.word	0x58024400
 8007c04:	ffff0007 	.word	0xffff0007

08007c08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c16:	4b53      	ldr	r3, [pc, #332]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b03      	cmp	r3, #3
 8007c20:	d101      	bne.n	8007c26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c22:	2301      	movs	r3, #1
 8007c24:	e099      	b.n	8007d5a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c26:	4b4f      	ldr	r3, [pc, #316]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a4e      	ldr	r2, [pc, #312]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c32:	f7f9 fde9 	bl	8001808 <HAL_GetTick>
 8007c36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c38:	e008      	b.n	8007c4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c3a:	f7f9 fde5 	bl	8001808 <HAL_GetTick>
 8007c3e:	4602      	mov	r2, r0
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	1ad3      	subs	r3, r2, r3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d901      	bls.n	8007c4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e086      	b.n	8007d5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c4c:	4b45      	ldr	r3, [pc, #276]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1f0      	bne.n	8007c3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c58:	4b42      	ldr	r3, [pc, #264]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	051b      	lsls	r3, r3, #20
 8007c66:	493f      	ldr	r1, [pc, #252]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	3b01      	subs	r3, #1
 8007c72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	025b      	lsls	r3, r3, #9
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	431a      	orrs	r2, r3
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	3b01      	subs	r3, #1
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c8e:	431a      	orrs	r2, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	691b      	ldr	r3, [r3, #16]
 8007c94:	3b01      	subs	r3, #1
 8007c96:	061b      	lsls	r3, r3, #24
 8007c98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c9c:	4931      	ldr	r1, [pc, #196]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007ca2:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	492d      	ldr	r1, [pc, #180]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cb4:	4b2b      	ldr	r3, [pc, #172]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	699b      	ldr	r3, [r3, #24]
 8007cc0:	4928      	ldr	r1, [pc, #160]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007cc6:	4b27      	ldr	r3, [pc, #156]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	4a26      	ldr	r2, [pc, #152]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007ccc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cd2:	4b24      	ldr	r3, [pc, #144]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007cd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cd6:	4b24      	ldr	r3, [pc, #144]	; (8007d68 <RCCEx_PLL3_Config+0x160>)
 8007cd8:	4013      	ands	r3, r2
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	69d2      	ldr	r2, [r2, #28]
 8007cde:	00d2      	lsls	r2, r2, #3
 8007ce0:	4920      	ldr	r1, [pc, #128]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ce6:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	4a1e      	ldr	r2, [pc, #120]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d106      	bne.n	8007d06 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cf8:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfc:	4a19      	ldr	r2, [pc, #100]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007cfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d04:	e00f      	b.n	8007d26 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d106      	bne.n	8007d1a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d0c:	4b15      	ldr	r3, [pc, #84]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d10:	4a14      	ldr	r2, [pc, #80]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007d12:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d16:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d18:	e005      	b.n	8007d26 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d1a:	4b12      	ldr	r3, [pc, #72]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1e:	4a11      	ldr	r2, [pc, #68]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007d20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d24:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d26:	4b0f      	ldr	r3, [pc, #60]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4a0e      	ldr	r2, [pc, #56]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d32:	f7f9 fd69 	bl	8001808 <HAL_GetTick>
 8007d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d38:	e008      	b.n	8007d4c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d3a:	f7f9 fd65 	bl	8001808 <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d901      	bls.n	8007d4c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e006      	b.n	8007d5a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <RCCEx_PLL3_Config+0x15c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0f0      	beq.n	8007d3a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3710      	adds	r7, #16
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
 8007d62:	bf00      	nop
 8007d64:	58024400 	.word	0x58024400
 8007d68:	ffff0007 	.word	0xffff0007

08007d6c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d101      	bne.n	8007d7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e0f1      	b.n	8007f62 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a78      	ldr	r2, [pc, #480]	; (8007f6c <HAL_SPI_Init+0x200>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d00f      	beq.n	8007dae <HAL_SPI_Init+0x42>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a77      	ldr	r2, [pc, #476]	; (8007f70 <HAL_SPI_Init+0x204>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00a      	beq.n	8007dae <HAL_SPI_Init+0x42>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a75      	ldr	r2, [pc, #468]	; (8007f74 <HAL_SPI_Init+0x208>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d005      	beq.n	8007dae <HAL_SPI_Init+0x42>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	2b0f      	cmp	r3, #15
 8007da8:	d901      	bls.n	8007dae <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007daa:	2301      	movs	r3, #1
 8007dac:	e0d9      	b.n	8007f62 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007dae:	6878      	ldr	r0, [r7, #4]
 8007db0:	f000 ff58 	bl	8008c64 <SPI_GetPacketSize>
 8007db4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a6c      	ldr	r2, [pc, #432]	; (8007f6c <HAL_SPI_Init+0x200>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d00c      	beq.n	8007dda <HAL_SPI_Init+0x6e>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a6a      	ldr	r2, [pc, #424]	; (8007f70 <HAL_SPI_Init+0x204>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d007      	beq.n	8007dda <HAL_SPI_Init+0x6e>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a69      	ldr	r2, [pc, #420]	; (8007f74 <HAL_SPI_Init+0x208>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d002      	beq.n	8007dda <HAL_SPI_Init+0x6e>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b08      	cmp	r3, #8
 8007dd8:	d811      	bhi.n	8007dfe <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007dde:	4a63      	ldr	r2, [pc, #396]	; (8007f6c <HAL_SPI_Init+0x200>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d009      	beq.n	8007df8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a61      	ldr	r2, [pc, #388]	; (8007f70 <HAL_SPI_Init+0x204>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d004      	beq.n	8007df8 <HAL_SPI_Init+0x8c>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a60      	ldr	r2, [pc, #384]	; (8007f74 <HAL_SPI_Init+0x208>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d104      	bne.n	8007e02 <HAL_SPI_Init+0x96>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2b10      	cmp	r3, #16
 8007dfc:	d901      	bls.n	8007e02 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007dfe:	2301      	movs	r3, #1
 8007e00:	e0af      	b.n	8007f62 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d106      	bne.n	8007e1c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7f9 f9e2 	bl	80011e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2202      	movs	r2, #2
 8007e20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f022 0201 	bic.w	r2, r2, #1
 8007e32:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007e3e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e48:	d119      	bne.n	8007e7e <HAL_SPI_Init+0x112>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e52:	d103      	bne.n	8007e5c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d008      	beq.n	8007e6e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10c      	bne.n	8007e7e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e6c:	d107      	bne.n	8007e7e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69da      	ldr	r2, [r3, #28]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e86:	431a      	orrs	r2, r3
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	431a      	orrs	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e90:	ea42 0103 	orr.w	r1, r2, r3
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68da      	ldr	r2, [r3, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	430a      	orrs	r2, r1
 8007e9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea8:	431a      	orrs	r2, r3
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eae:	431a      	orrs	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	431a      	orrs	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a1b      	ldr	r3, [r3, #32]
 8007ec6:	431a      	orrs	r2, r3
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed2:	431a      	orrs	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	431a      	orrs	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ede:	ea42 0103 	orr.w	r1, r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	430a      	orrs	r2, r1
 8007eec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d113      	bne.n	8007f1e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f022 0201 	bic.w	r2, r2, #1
 8007f2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00a      	beq.n	8007f50 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	430a      	orrs	r2, r1
 8007f4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2201      	movs	r2, #1
 8007f5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40013000 	.word	0x40013000
 8007f70:	40003800 	.word	0x40003800
 8007f74:	40003c00 	.word	0x40003c00

08007f78 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08a      	sub	sp, #40	; 0x28
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	603b      	str	r3, [r7, #0]
 8007f84:	4613      	mov	r3, r2
 8007f86:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	3320      	adds	r3, #32
 8007f8e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d101      	bne.n	8007fa2 <HAL_SPI_Transmit+0x2a>
 8007f9e:	2302      	movs	r3, #2
 8007fa0:	e1d7      	b.n	8008352 <HAL_SPI_Transmit+0x3da>
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007faa:	f7f9 fc2d 	bl	8001808 <HAL_GetTick>
 8007fae:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d007      	beq.n	8007fcc <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fc8:	7efb      	ldrb	r3, [r7, #27]
 8007fca:	e1c2      	b.n	8008352 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d002      	beq.n	8007fd8 <HAL_SPI_Transmit+0x60>
 8007fd2:	88fb      	ldrh	r3, [r7, #6]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d107      	bne.n	8007fe8 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fe4:	7efb      	ldrb	r3, [r7, #27]
 8007fe6:	e1b4      	b.n	8008352 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2203      	movs	r2, #3
 8007fec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	68ba      	ldr	r2, [r7, #8]
 8007ffc:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	88fa      	ldrh	r2, [r7, #6]
 8008002:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	88fa      	ldrh	r2, [r7, #6]
 800800a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2200      	movs	r2, #0
 8008012:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2200      	movs	r2, #0
 8008018:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2200      	movs	r2, #0
 800802e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008038:	d107      	bne.n	800804a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008048:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	685a      	ldr	r2, [r3, #4]
 8008050:	4b96      	ldr	r3, [pc, #600]	; (80082ac <HAL_SPI_Transmit+0x334>)
 8008052:	4013      	ands	r3, r2
 8008054:	88f9      	ldrh	r1, [r7, #6]
 8008056:	68fa      	ldr	r2, [r7, #12]
 8008058:	6812      	ldr	r2, [r2, #0]
 800805a:	430b      	orrs	r3, r1
 800805c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f042 0201 	orr.w	r2, r2, #1
 800806c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008076:	d107      	bne.n	8008088 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008086:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	68db      	ldr	r3, [r3, #12]
 800808c:	2b0f      	cmp	r3, #15
 800808e:	d947      	bls.n	8008120 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008090:	e03f      	b.n	8008112 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	f003 0302 	and.w	r3, r3, #2
 800809c:	2b02      	cmp	r3, #2
 800809e:	d114      	bne.n	80080ca <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6812      	ldr	r2, [r2, #0]
 80080aa:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b0:	1d1a      	adds	r2, r3, #4
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080bc:	b29b      	uxth	r3, r3
 80080be:	3b01      	subs	r3, #1
 80080c0:	b29a      	uxth	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080c8:	e023      	b.n	8008112 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ca:	f7f9 fb9d 	bl	8001808 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	429a      	cmp	r2, r3
 80080d8:	d803      	bhi.n	80080e2 <HAL_SPI_Transmit+0x16a>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e0:	d102      	bne.n	80080e8 <HAL_SPI_Transmit+0x170>
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d114      	bne.n	8008112 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80080e8:	68f8      	ldr	r0, [r7, #12]
 80080ea:	f000 fced 	bl	8008ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800810e:	2303      	movs	r3, #3
 8008110:	e11f      	b.n	8008352 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008118:	b29b      	uxth	r3, r3
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1b9      	bne.n	8008092 <HAL_SPI_Transmit+0x11a>
 800811e:	e0f2      	b.n	8008306 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	2b07      	cmp	r3, #7
 8008126:	f240 80e7 	bls.w	80082f8 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800812a:	e05d      	b.n	80081e8 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	f003 0302 	and.w	r3, r3, #2
 8008136:	2b02      	cmp	r3, #2
 8008138:	d132      	bne.n	80081a0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008140:	b29b      	uxth	r3, r3
 8008142:	2b01      	cmp	r3, #1
 8008144:	d918      	bls.n	8008178 <HAL_SPI_Transmit+0x200>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800814a:	2b00      	cmp	r3, #0
 800814c:	d014      	beq.n	8008178 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	6812      	ldr	r2, [r2, #0]
 8008158:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800815e:	1d1a      	adds	r2, r3, #4
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b02      	subs	r3, #2
 800816e:	b29a      	uxth	r2, r3
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008176:	e037      	b.n	80081e8 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817c:	881a      	ldrh	r2, [r3, #0]
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008186:	1c9a      	adds	r2, r3, #2
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008192:	b29b      	uxth	r3, r3
 8008194:	3b01      	subs	r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800819e:	e023      	b.n	80081e8 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081a0:	f7f9 fb32 	bl	8001808 <HAL_GetTick>
 80081a4:	4602      	mov	r2, r0
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	1ad3      	subs	r3, r2, r3
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d803      	bhi.n	80081b8 <HAL_SPI_Transmit+0x240>
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081b6:	d102      	bne.n	80081be <HAL_SPI_Transmit+0x246>
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d114      	bne.n	80081e8 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 fc82 	bl	8008ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80081e4:	2303      	movs	r3, #3
 80081e6:	e0b4      	b.n	8008352 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d19b      	bne.n	800812c <HAL_SPI_Transmit+0x1b4>
 80081f4:	e087      	b.n	8008306 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	695b      	ldr	r3, [r3, #20]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b02      	cmp	r3, #2
 8008202:	d155      	bne.n	80082b0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800820a:	b29b      	uxth	r3, r3
 800820c:	2b03      	cmp	r3, #3
 800820e:	d918      	bls.n	8008242 <HAL_SPI_Transmit+0x2ca>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	d914      	bls.n	8008242 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6812      	ldr	r2, [r2, #0]
 8008222:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008228:	1d1a      	adds	r2, r3, #4
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008234:	b29b      	uxth	r3, r3
 8008236:	3b04      	subs	r3, #4
 8008238:	b29a      	uxth	r2, r3
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008240:	e05a      	b.n	80082f8 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008248:	b29b      	uxth	r3, r3
 800824a:	2b01      	cmp	r3, #1
 800824c:	d917      	bls.n	800827e <HAL_SPI_Transmit+0x306>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008252:	2b00      	cmp	r3, #0
 8008254:	d013      	beq.n	800827e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800825a:	881a      	ldrh	r2, [r3, #0]
 800825c:	69fb      	ldr	r3, [r7, #28]
 800825e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008264:	1c9a      	adds	r2, r3, #2
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008270:	b29b      	uxth	r3, r3
 8008272:	3b02      	subs	r3, #2
 8008274:	b29a      	uxth	r2, r3
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800827c:	e03c      	b.n	80082f8 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	3320      	adds	r3, #32
 8008288:	7812      	ldrb	r2, [r2, #0]
 800828a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800829c:	b29b      	uxth	r3, r3
 800829e:	3b01      	subs	r3, #1
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80082a8:	e026      	b.n	80082f8 <HAL_SPI_Transmit+0x380>
 80082aa:	bf00      	nop
 80082ac:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082b0:	f7f9 faaa 	bl	8001808 <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	683a      	ldr	r2, [r7, #0]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d803      	bhi.n	80082c8 <HAL_SPI_Transmit+0x350>
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c6:	d102      	bne.n	80082ce <HAL_SPI_Transmit+0x356>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d114      	bne.n	80082f8 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f000 fbfa 	bl	8008ac8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	2201      	movs	r2, #1
 80082f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e02c      	b.n	8008352 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082fe:	b29b      	uxth	r3, r3
 8008300:	2b00      	cmp	r3, #0
 8008302:	f47f af78 	bne.w	80081f6 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	2200      	movs	r2, #0
 800830e:	2108      	movs	r1, #8
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fc79 	bl	8008c08 <SPI_WaitOnFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d007      	beq.n	800832c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008322:	f043 0220 	orr.w	r2, r3, #32
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f000 fbcb 	bl	8008ac8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2201      	movs	r2, #1
 800833e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e000      	b.n	8008352 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008350:	7efb      	ldrb	r3, [r7, #27]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3720      	adds	r7, #32
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop

0800835c <HAL_SPI_Transmit_DMA>:
  * @param  pData: pointer to data buffer
  * @param  Size : amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_SPI_Transmit_DMA+0x20>
 8008378:	2302      	movs	r3, #2
 800837a:	e12c      	b.n	80085d6 <HAL_SPI_Transmit_DMA+0x27a>
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  if (hspi->State != HAL_SPI_STATE_READY)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	d007      	beq.n	80083a0 <HAL_SPI_Transmit_DMA+0x44>
  {
    errorcode = HAL_BUSY;
 8008390:	2302      	movs	r3, #2
 8008392:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	e11a      	b.n	80085d6 <HAL_SPI_Transmit_DMA+0x27a>
  }

  if ((pData == NULL) || (Size == 0UL))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d002      	beq.n	80083ac <HAL_SPI_Transmit_DMA+0x50>
 80083a6:	88fb      	ldrh	r3, [r7, #6]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d107      	bne.n	80083bc <HAL_SPI_Transmit_DMA+0x60>
  {
    errorcode = HAL_ERROR;
 80083ac:	2301      	movs	r3, #1
 80083ae:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 80083b8:	7dfb      	ldrb	r3, [r7, #23]
 80083ba:	e10c      	b.n	80085d6 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2203      	movs	r2, #3
 80083c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	68ba      	ldr	r2, [r7, #8]
 80083d0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	88fa      	ldrh	r2, [r7, #6]
 80083d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	88fa      	ldrh	r2, [r7, #6]
 80083de:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->TxISR       = NULL;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	2200      	movs	r2, #0
 80083ec:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->RxXferSize  = (uint16_t)0UL;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t)0UL;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800840c:	d107      	bne.n	800841e <HAL_SPI_Transmit_DMA+0xc2>
  {
    SPI_1LINE_TX(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800841c:	601a      	str	r2, [r3, #0]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	2b0f      	cmp	r3, #15
 8008424:	d905      	bls.n	8008432 <HAL_SPI_Transmit_DMA+0xd6>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008430:	d10f      	bne.n	8008452 <HAL_SPI_Transmit_DMA+0xf6>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8008436:	2b07      	cmp	r3, #7
 8008438:	d913      	bls.n	8008462 <HAL_SPI_Transmit_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800843e:	699b      	ldr	r3, [r3, #24]
 8008440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008444:	d00d      	beq.n	8008462 <HAL_SPI_Transmit_DMA+0x106>
                                                     (hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800844a:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmatx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800844c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008450:	d007      	beq.n	8008462 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    errorcode = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	75fb      	strb	r3, [r7, #23]
    __HAL_UNLOCK(hspi);
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800845e:	7dfb      	ldrb	r3, [r7, #23]
 8008460:	e0b9      	b.n	80085d6 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	2b07      	cmp	r3, #7
 8008468:	d820      	bhi.n	80084ac <HAL_SPI_Transmit_DMA+0x150>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008474:	d109      	bne.n	800848a <HAL_SPI_Transmit_DMA+0x12e>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800847c:	b29b      	uxth	r3, r3
 800847e:	3301      	adds	r3, #1
 8008480:	105b      	asrs	r3, r3, #1
 8008482:	b29a      	uxth	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    }
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800848e:	699b      	ldr	r3, [r3, #24]
 8008490:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008494:	d11e      	bne.n	80084d4 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800849c:	b29b      	uxth	r3, r3
 800849e:	3303      	adds	r3, #3
 80084a0:	109b      	asrs	r3, r3, #2
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80084aa:	e013      	b.n	80084d4 <HAL_SPI_Transmit_DMA+0x178>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	2b0f      	cmp	r3, #15
 80084b2:	d80f      	bhi.n	80084d4 <HAL_SPI_Transmit_DMA+0x178>
  {
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084be:	d109      	bne.n	80084d4 <HAL_SPI_Transmit_DMA+0x178>
    {
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	3301      	adds	r3, #1
 80084ca:	105b      	asrs	r3, r3, #1
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  {
    /* Adjustment done */
  }

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084d8:	4a41      	ldr	r2, [pc, #260]	; (80085e0 <HAL_SPI_Transmit_DMA+0x284>)
 80084da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e0:	4a40      	ldr	r2, [pc, #256]	; (80085e4 <HAL_SPI_Transmit_DMA+0x288>)
 80084e2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084e8:	4a3f      	ldr	r2, [pc, #252]	; (80085e8 <HAL_SPI_Transmit_DMA+0x28c>)
 80084ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084f0:	2200      	movs	r2, #0
 80084f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear TXDMAEN bit*/
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	689a      	ldr	r2, [r3, #8]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008502:	609a      	str	r2, [r3, #8]

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800850c:	4619      	mov	r1, r3
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3320      	adds	r3, #32
 8008514:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800851c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800851e:	f7f9 fe2f 	bl	8002180 <HAL_DMA_Start_IT>
 8008522:	4603      	mov	r3, r0
 8008524:	2b00      	cmp	r3, #0
 8008526:	d013      	beq.n	8008550 <HAL_SPI_Transmit_DMA+0x1f4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852e:	f043 0210 	orr.w	r2, r3, #16
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hspi->State = HAL_SPI_STATE_READY;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    errorcode = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	75fb      	strb	r3, [r7, #23]
    return errorcode;
 800854c:	7dfb      	ldrb	r3, [r7, #23]
 800854e:	e042      	b.n	80085d6 <HAL_SPI_Transmit_DMA+0x27a>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800855a:	d108      	bne.n	800856e <HAL_SPI_Transmit_DMA+0x212>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6859      	ldr	r1, [r3, #4]
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	4b21      	ldr	r3, [pc, #132]	; (80085ec <HAL_SPI_Transmit_DMA+0x290>)
 8008568:	400b      	ands	r3, r1
 800856a:	6053      	str	r3, [r2, #4]
 800856c:	e009      	b.n	8008582 <HAL_SPI_Transmit_DMA+0x226>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	4b1d      	ldr	r3, [pc, #116]	; (80085ec <HAL_SPI_Transmit_DMA+0x290>)
 8008576:	4013      	ands	r3, r2
 8008578:	88f9      	ldrh	r1, [r7, #6]
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	6812      	ldr	r2, [r2, #0]
 800857e:	430b      	orrs	r3, r1
 8008580:	6053      	str	r3, [r2, #4]
  }

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008590:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	691a      	ldr	r2, [r3, #16]
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f442 7248 	orr.w	r2, r2, #800	; 0x320
 80085a0:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	681a      	ldr	r2, [r3, #0]
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f042 0201 	orr.w	r2, r2, #1
 80085b0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085ba:	d107      	bne.n	80085cc <HAL_SPI_Transmit_DMA+0x270>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085ca:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  return errorcode;
 80085d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3718      	adds	r7, #24
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
 80085de:	bf00      	nop
 80085e0:	08008a33 	.word	0x08008a33
 80085e4:	080089ed 	.word	0x080089ed
 80085e8:	08008a4f 	.word	0x08008a4f
 80085ec:	ffff0000 	.word	0xffff0000

080085f0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08a      	sub	sp, #40	; 0x28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8008608:	6a3a      	ldr	r2, [r7, #32]
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4013      	ands	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8008618:	2300      	movs	r3, #0
 800861a:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008622:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3330      	adds	r3, #48	; 0x30
 800862a:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */


  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800862c:	69bb      	ldr	r3, [r7, #24]
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b00      	cmp	r3, #0
 8008634:	d113      	bne.n	800865e <HAL_SPI_IRQHandler+0x6e>
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	f003 0320 	and.w	r3, r3, #32
 800863c:	2b00      	cmp	r3, #0
 800863e:	d10e      	bne.n	800865e <HAL_SPI_IRQHandler+0x6e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8008646:	2b00      	cmp	r3, #0
 8008648:	d009      	beq.n	800865e <HAL_SPI_IRQHandler+0x6e>
  {
    hspi->TxISR(hspi);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	4798      	blx	r3
    hspi->RxISR(hspi);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	4798      	blx	r3
    handled = 1UL;
 800865a:	2301      	movs	r3, #1
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800865e:	69bb      	ldr	r3, [r7, #24]
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10f      	bne.n	8008688 <HAL_SPI_IRQHandler+0x98>
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	f003 0301 	and.w	r3, r3, #1
 800866e:	2b00      	cmp	r3, #0
 8008670:	d00a      	beq.n	8008688 <HAL_SPI_IRQHandler+0x98>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8008678:	2b00      	cmp	r3, #0
 800867a:	d105      	bne.n	8008688 <HAL_SPI_IRQHandler+0x98>
  {
    hspi->RxISR(hspi);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	4798      	blx	r3
    handled = 1UL;
 8008684:	2301      	movs	r3, #1
 8008686:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	f003 0320 	and.w	r3, r3, #32
 800868e:	2b00      	cmp	r3, #0
 8008690:	d10f      	bne.n	80086b2 <HAL_SPI_IRQHandler+0xc2>
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	f003 0302 	and.w	r3, r3, #2
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <HAL_SPI_IRQHandler+0xc2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d105      	bne.n	80086b2 <HAL_SPI_IRQHandler+0xc2>
  {
    hspi->TxISR(hspi);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	4798      	blx	r3
    handled = 1UL;
 80086ae:	2301      	movs	r3, #1
 80086b0:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 80086b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 815a 	bne.w	800896e <HAL_SPI_IRQHandler+0x37e>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 80086ba:	69bb      	ldr	r3, [r7, #24]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f000 808b 	beq.w	80087dc <HAL_SPI_IRQHandler+0x1ec>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	699a      	ldr	r2, [r3, #24]
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f042 0208 	orr.w	r2, r2, #8
 80086d4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	699a      	ldr	r2, [r3, #24]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f042 0210 	orr.w	r2, r2, #16
 80086e4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086f4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	691a      	ldr	r2, [r3, #16]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f022 0208 	bic.w	r2, r2, #8
 8008704:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	689b      	ldr	r3, [r3, #8]
 800870c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d13d      	bne.n	8008790 <HAL_SPI_IRQHandler+0x1a0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8008714:	e036      	b.n	8008784 <HAL_SPI_IRQHandler+0x194>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	68db      	ldr	r3, [r3, #12]
 800871a:	2b0f      	cmp	r3, #15
 800871c:	d90b      	bls.n	8008736 <HAL_SPI_IRQHandler+0x146>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008726:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008728:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800872e:	1d1a      	adds	r2, r3, #4
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	665a      	str	r2, [r3, #100]	; 0x64
 8008734:	e01d      	b.n	8008772 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	2b07      	cmp	r3, #7
 800873c:	d90b      	bls.n	8008756 <HAL_SPI_IRQHandler+0x166>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	8812      	ldrh	r2, [r2, #0]
 8008746:	b292      	uxth	r2, r2
 8008748:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800874e:	1c9a      	adds	r2, r3, #2
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	665a      	str	r2, [r3, #100]	; 0x64
 8008754:	e00d      	b.n	8008772 <HAL_SPI_IRQHandler+0x182>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008762:	7812      	ldrb	r2, [r2, #0]
 8008764:	b2d2      	uxtb	r2, r2
 8008766:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008778:	b29b      	uxth	r3, r3
 800877a:	3b01      	subs	r3, #1
 800877c:	b29a      	uxth	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800878a:	b29b      	uxth	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1c2      	bne.n	8008716 <HAL_SPI_IRQHandler+0x126>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f999 	bl	8008ac8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d003      	beq.n	80087b0 <HAL_SPI_IRQHandler+0x1c0>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f000 f915 	bl	80089d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80087ae:	e0e3      	b.n	8008978 <HAL_SPI_IRQHandler+0x388>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 80087b0:	7cfb      	ldrb	r3, [r7, #19]
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d103      	bne.n	80087be <HAL_SPI_IRQHandler+0x1ce>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 f8fa 	bl	80089b0 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 80087bc:	e0d9      	b.n	8008972 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 80087be:	7cfb      	ldrb	r3, [r7, #19]
 80087c0:	2b04      	cmp	r3, #4
 80087c2:	d103      	bne.n	80087cc <HAL_SPI_IRQHandler+0x1dc>
      HAL_SPI_RxCpltCallback(hspi);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f000 f8e9 	bl	800899c <HAL_SPI_RxCpltCallback>
    return;
 80087ca:	e0d2      	b.n	8008972 <HAL_SPI_IRQHandler+0x382>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 80087cc:	7cfb      	ldrb	r3, [r7, #19]
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	f040 80cf 	bne.w	8008972 <HAL_SPI_IRQHandler+0x382>
      HAL_SPI_TxCpltCallback(hspi);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 f8d7 	bl	8008988 <HAL_SPI_TxCpltCallback>
    return;
 80087da:	e0ca      	b.n	8008972 <HAL_SPI_IRQHandler+0x382>
  }

  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 80087dc:	69fb      	ldr	r3, [r7, #28]
 80087de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d00d      	beq.n	8008802 <HAL_SPI_IRQHandler+0x212>
 80087e6:	6a3b      	ldr	r3, [r7, #32]
 80087e8:	f003 0308 	and.w	r3, r3, #8
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d008      	beq.n	8008802 <HAL_SPI_IRQHandler+0x212>
  {
    /* Abort on going, clear SUSP flag to avoid infinite looping */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	699a      	ldr	r2, [r3, #24]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80087fe:	619a      	str	r2, [r3, #24]

    return;
 8008800:	e0ba      	b.n	8008978 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	f403 7358 	and.w	r3, r3, #864	; 0x360
 8008808:	2b00      	cmp	r3, #0
 800880a:	f000 80b5 	beq.w	8008978 <HAL_SPI_IRQHandler+0x388>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800880e:	69bb      	ldr	r3, [r7, #24]
 8008810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008814:	2b00      	cmp	r3, #0
 8008816:	d00f      	beq.n	8008838 <HAL_SPI_IRQHandler+0x248>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800881e:	f043 0204 	orr.w	r2, r3, #4
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	699a      	ldr	r2, [r3, #24]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008836:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00f      	beq.n	8008862 <HAL_SPI_IRQHandler+0x272>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008848:	f043 0201 	orr.w	r2, r3, #1
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008860:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00f      	beq.n	800888c <HAL_SPI_IRQHandler+0x29c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008872:	f043 0208 	orr.w	r2, r3, #8
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	699a      	ldr	r2, [r3, #24]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800888a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00f      	beq.n	80088b6 <HAL_SPI_IRQHandler+0x2c6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800889c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	699a      	ldr	r2, [r3, #24]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0220 	orr.w	r2, r2, #32
 80088b4:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d05a      	beq.n	8008976 <HAL_SPI_IRQHandler+0x386>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	681a      	ldr	r2, [r3, #0]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f022 0201 	bic.w	r2, r2, #1
 80088ce:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6919      	ldr	r1, [r3, #16]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681a      	ldr	r2, [r3, #0]
 80088da:	4b29      	ldr	r3, [pc, #164]	; (8008980 <HAL_SPI_IRQHandler+0x390>)
 80088dc:	400b      	ands	r3, r1
 80088de:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80088e6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80088ea:	d138      	bne.n	800895e <HAL_SPI_IRQHandler+0x36e>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689a      	ldr	r2, [r3, #8]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80088fa:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d013      	beq.n	800892c <HAL_SPI_IRQHandler+0x33c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008908:	4a1e      	ldr	r2, [pc, #120]	; (8008984 <HAL_SPI_IRQHandler+0x394>)
 800890a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008910:	4618      	mov	r0, r3
 8008912:	f7fa f9bd 	bl	8002c90 <HAL_DMA_Abort_IT>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d007      	beq.n	800892c <HAL_SPI_IRQHandler+0x33c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008922:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008930:	2b00      	cmp	r3, #0
 8008932:	d020      	beq.n	8008976 <HAL_SPI_IRQHandler+0x386>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008938:	4a12      	ldr	r2, [pc, #72]	; (8008984 <HAL_SPI_IRQHandler+0x394>)
 800893a:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008940:	4618      	mov	r0, r3
 8008942:	f7fa f9a5 	bl	8002c90 <HAL_DMA_Abort_IT>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d014      	beq.n	8008976 <HAL_SPI_IRQHandler+0x386>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008952:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800895c:	e00b      	b.n	8008976 <HAL_SPI_IRQHandler+0x386>
        hspi->State = HAL_SPI_STATE_READY;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f836 	bl	80089d8 <HAL_SPI_ErrorCallback>
    return;
 800896c:	e003      	b.n	8008976 <HAL_SPI_IRQHandler+0x386>
    return;
 800896e:	bf00      	nop
 8008970:	e002      	b.n	8008978 <HAL_SPI_IRQHandler+0x388>
    return;
 8008972:	bf00      	nop
 8008974:	e000      	b.n	8008978 <HAL_SPI_IRQHandler+0x388>
    return;
 8008976:	bf00      	nop
  }
}
 8008978:	3728      	adds	r7, #40	; 0x28
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop
 8008980:	fffffc94 	.word	0xfffffc94
 8008984:	08008a95 	.word	0x08008a95

08008988 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80089e0:	bf00      	nop
 80089e2:	370c      	adds	r7, #12
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr

080089ec <SPI_DMATransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a00:	b2db      	uxtb	r3, r3
 8008a02:	2b07      	cmp	r3, #7
 8008a04:	d011      	beq.n	8008a2a <SPI_DMATransmitCplt+0x3e>
  {
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a10:	d103      	bne.n	8008a1a <SPI_DMATransmitCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->TxCpltCallback(hspi);
#else
      HAL_SPI_TxCpltCallback(hspi);
 8008a12:	68f8      	ldr	r0, [r7, #12]
 8008a14:	f7ff ffb8 	bl	8008988 <HAL_SPI_TxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8008a18:	e007      	b.n	8008a2a <SPI_DMATransmitCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	691a      	ldr	r2, [r3, #16]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f042 0208 	orr.w	r2, r2, #8
 8008a28:	611a      	str	r2, [r3, #16]
}
 8008a2a:	bf00      	nop
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}

08008a32 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a32:	b580      	push	{r7, lr}
 8008a34:	b084      	sub	sp, #16
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f7ff ffbf 	bl	80089c4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008a46:	bf00      	nop
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7fb fa87 	bl	8003f70 <HAL_DMA_GetError>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d011      	beq.n	8008a8c <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f000 f82d 	bl	8008ac8 <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a74:	f043 0210 	orr.w	r2, r3, #16
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8008a86:	68f8      	ldr	r0, [r7, #12]
 8008a88:	f7ff ffa6 	bl	80089d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8008a8c:	bf00      	nop
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff ff8c 	bl	80089d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008ac0:	bf00      	nop
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	699a      	ldr	r2, [r3, #24]
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f042 0208 	orr.w	r2, r2, #8
 8008ae6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f042 0210 	orr.w	r2, r2, #16
 8008af6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	681a      	ldr	r2, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f022 0201 	bic.w	r2, r2, #1
 8008b06:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6919      	ldr	r1, [r3, #16]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b3c      	ldr	r3, [pc, #240]	; (8008c04 <SPI_CloseTransfer+0x13c>)
 8008b14:	400b      	ands	r3, r1
 8008b16:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689a      	ldr	r2, [r3, #8]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8008b26:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b2e:	b2db      	uxtb	r3, r3
 8008b30:	2b04      	cmp	r3, #4
 8008b32:	d014      	beq.n	8008b5e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 0320 	and.w	r3, r3, #32
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d00f      	beq.n	8008b5e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	699a      	ldr	r2, [r3, #24]
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0220 	orr.w	r2, r2, #32
 8008b5c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d014      	beq.n	8008b94 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d00f      	beq.n	8008b94 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008b7a:	f043 0204 	orr.w	r2, r3, #4
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	699a      	ldr	r2, [r3, #24]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b92:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00f      	beq.n	8008bbe <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ba4:	f043 0201 	orr.w	r2, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	699a      	ldr	r2, [r3, #24]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008bbc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00f      	beq.n	8008be8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bce:	f043 0208 	orr.w	r2, r3, #8
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699a      	ldr	r2, [r3, #24]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008be6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8008bf8:	bf00      	nop
 8008bfa:	3714      	adds	r7, #20
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	fffffc90 	.word	0xfffffc90

08008c08 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	603b      	str	r3, [r7, #0]
 8008c14:	4613      	mov	r3, r2
 8008c16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c18:	e010      	b.n	8008c3c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c1a:	f7f8 fdf5 	bl	8001808 <HAL_GetTick>
 8008c1e:	4602      	mov	r2, r0
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	1ad3      	subs	r3, r2, r3
 8008c24:	69ba      	ldr	r2, [r7, #24]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d803      	bhi.n	8008c32 <SPI_WaitOnFlagUntilTimeout+0x2a>
 8008c2a:	69bb      	ldr	r3, [r7, #24]
 8008c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c30:	d102      	bne.n	8008c38 <SPI_WaitOnFlagUntilTimeout+0x30>
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d101      	bne.n	8008c3c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e00f      	b.n	8008c5c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	695a      	ldr	r2, [r3, #20]
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	4013      	ands	r3, r2
 8008c46:	68ba      	ldr	r2, [r7, #8]
 8008c48:	429a      	cmp	r2, r3
 8008c4a:	bf0c      	ite	eq
 8008c4c:	2301      	moveq	r3, #1
 8008c4e:	2300      	movne	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	461a      	mov	r2, r3
 8008c54:	79fb      	ldrb	r3, [r7, #7]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d0df      	beq.n	8008c1a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8008c5a:	2300      	movs	r3, #0
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3710      	adds	r7, #16
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c70:	095b      	lsrs	r3, r3, #5
 8008c72:	3301      	adds	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	3307      	adds	r3, #7
 8008c82:	08db      	lsrs	r3, r3, #3
 8008c84:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	fb02 f303 	mul.w	r3, r2, r3
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3714      	adds	r7, #20
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d101      	bne.n	8008cac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	e042      	b.n	8008d32 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d106      	bne.n	8008cc4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7f8 fb34 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2224      	movs	r2, #36	; 0x24
 8008cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f022 0201 	bic.w	r2, r2, #1
 8008cda:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fc55 	bl	800958c <UART_SetConfig>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d101      	bne.n	8008cec <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e022      	b.n	8008d32 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d002      	beq.n	8008cfa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f001 f9b1 	bl	800a05c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008d08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008d18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f042 0201 	orr.w	r2, r2, #1
 8008d28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f001 fa38 	bl	800a1a0 <UART_CheckIdleState>
 8008d30:	4603      	mov	r3, r0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3708      	adds	r7, #8
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
	...

08008d3c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b08a      	sub	sp, #40	; 0x28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	4613      	mov	r3, r2
 8008d48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d50:	2b20      	cmp	r3, #32
 8008d52:	d142      	bne.n	8008dda <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d002      	beq.n	8008d60 <HAL_UART_Receive_DMA+0x24>
 8008d5a:	88fb      	ldrh	r3, [r7, #6]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d60:	2301      	movs	r3, #1
 8008d62:	e03b      	b.n	8008ddc <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d101      	bne.n	8008d72 <HAL_UART_Receive_DMA+0x36>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e034      	b.n	8008ddc <HAL_UART_Receive_DMA+0xa0>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a17      	ldr	r2, [pc, #92]	; (8008de4 <HAL_UART_Receive_DMA+0xa8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d01f      	beq.n	8008dca <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d018      	beq.n	8008dca <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	613b      	str	r3, [r7, #16]
   return(result);
 8008da6:	693b      	ldr	r3, [r7, #16]
 8008da8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	623b      	str	r3, [r7, #32]
 8008db8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	69f9      	ldr	r1, [r7, #28]
 8008dbc:	6a3a      	ldr	r2, [r7, #32]
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e6      	bne.n	8008d98 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008dca:	88fb      	ldrh	r3, [r7, #6]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68b9      	ldr	r1, [r7, #8]
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f001 faf9 	bl	800a3c8 <UART_Start_Receive_DMA>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	e000      	b.n	8008ddc <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008dda:	2302      	movs	r3, #2
  }
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3728      	adds	r7, #40	; 0x28
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	58000c00 	.word	0x58000c00

08008de8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b0ba      	sub	sp, #232	; 0xe8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e0e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008e12:	f640 030f 	movw	r3, #2063	; 0x80f
 8008e16:	4013      	ands	r3, r2
 8008e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008e1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d11b      	bne.n	8008e5c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e28:	f003 0320 	and.w	r3, r3, #32
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d015      	beq.n	8008e5c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e34:	f003 0320 	and.w	r3, r3, #32
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d105      	bne.n	8008e48 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d009      	beq.n	8008e5c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 835a 	beq.w	8009506 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	4798      	blx	r3
      }
      return;
 8008e5a:	e354      	b.n	8009506 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 811f 	beq.w	80090a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e66:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008e6a:	4b8b      	ldr	r3, [pc, #556]	; (8009098 <HAL_UART_IRQHandler+0x2b0>)
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e72:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008e76:	4b89      	ldr	r3, [pc, #548]	; (800909c <HAL_UART_IRQHandler+0x2b4>)
 8008e78:	4013      	ands	r3, r2
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 8112 	beq.w	80090a4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d011      	beq.n	8008eb0 <HAL_UART_IRQHandler+0xc8>
 8008e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea6:	f043 0201 	orr.w	r2, r3, #1
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008eb4:	f003 0302 	and.w	r3, r3, #2
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d011      	beq.n	8008ee0 <HAL_UART_IRQHandler+0xf8>
 8008ebc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ec0:	f003 0301 	and.w	r3, r3, #1
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00b      	beq.n	8008ee0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2202      	movs	r2, #2
 8008ece:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed6:	f043 0204 	orr.w	r2, r3, #4
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ee4:	f003 0304 	and.w	r3, r3, #4
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d011      	beq.n	8008f10 <HAL_UART_IRQHandler+0x128>
 8008eec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2204      	movs	r2, #4
 8008efe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f06:	f043 0202 	orr.w	r2, r3, #2
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f14:	f003 0308 	and.w	r3, r3, #8
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d017      	beq.n	8008f4c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f20:	f003 0320 	and.w	r3, r3, #32
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d105      	bne.n	8008f34 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f28:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008f2c:	4b5a      	ldr	r3, [pc, #360]	; (8009098 <HAL_UART_IRQHandler+0x2b0>)
 8008f2e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d00b      	beq.n	8008f4c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2208      	movs	r2, #8
 8008f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f42:	f043 0208 	orr.w	r2, r3, #8
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d012      	beq.n	8008f7e <HAL_UART_IRQHandler+0x196>
 8008f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d00c      	beq.n	8008f7e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f74:	f043 0220 	orr.w	r2, r3, #32
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 82c0 	beq.w	800950a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8e:	f003 0320 	and.w	r3, r3, #32
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d013      	beq.n	8008fbe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f9a:	f003 0320 	and.w	r3, r3, #32
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d105      	bne.n	8008fae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d007      	beq.n	8008fbe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d003      	beq.n	8008fbe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	689b      	ldr	r3, [r3, #8]
 8008fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fd2:	2b40      	cmp	r3, #64	; 0x40
 8008fd4:	d005      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008fda:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d04f      	beq.n	8009082 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f001 fada 	bl	800a59c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ff2:	2b40      	cmp	r3, #64	; 0x40
 8008ff4:	d141      	bne.n	800907a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800900c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3308      	adds	r3, #8
 800901e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009022:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009026:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800902a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800902e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009032:	e841 2300 	strex	r3, r2, [r1]
 8009036:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800903a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d1d9      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009046:	2b00      	cmp	r3, #0
 8009048:	d013      	beq.n	8009072 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800904e:	4a14      	ldr	r2, [pc, #80]	; (80090a0 <HAL_UART_IRQHandler+0x2b8>)
 8009050:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009056:	4618      	mov	r0, r3
 8009058:	f7f9 fe1a 	bl	8002c90 <HAL_DMA_Abort_IT>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d017      	beq.n	8009092 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800906c:	4610      	mov	r0, r2
 800906e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009070:	e00f      	b.n	8009092 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 fa74 	bl	8009560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009078:	e00b      	b.n	8009092 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa70 	bl	8009560 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009080:	e007      	b.n	8009092 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f000 fa6c 	bl	8009560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2200      	movs	r2, #0
 800908c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009090:	e23b      	b.n	800950a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009092:	bf00      	nop
    return;
 8009094:	e239      	b.n	800950a <HAL_UART_IRQHandler+0x722>
 8009096:	bf00      	nop
 8009098:	10000001 	.word	0x10000001
 800909c:	04000120 	.word	0x04000120
 80090a0:	0800a843 	.word	0x0800a843

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	f040 81ce 	bne.w	800944a <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b2:	f003 0310 	and.w	r3, r3, #16
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f000 81c7 	beq.w	800944a <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c0:	f003 0310 	and.w	r3, r3, #16
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 81c0 	beq.w	800944a <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2210      	movs	r2, #16
 80090d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090dc:	2b40      	cmp	r3, #64	; 0x40
 80090de:	f040 813b 	bne.w	8009358 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a8b      	ldr	r2, [pc, #556]	; (8009318 <HAL_UART_IRQHandler+0x530>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d059      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a89      	ldr	r2, [pc, #548]	; (800931c <HAL_UART_IRQHandler+0x534>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d053      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a87      	ldr	r2, [pc, #540]	; (8009320 <HAL_UART_IRQHandler+0x538>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d04d      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a85      	ldr	r2, [pc, #532]	; (8009324 <HAL_UART_IRQHandler+0x53c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d047      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	4a83      	ldr	r2, [pc, #524]	; (8009328 <HAL_UART_IRQHandler+0x540>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d041      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4a81      	ldr	r2, [pc, #516]	; (800932c <HAL_UART_IRQHandler+0x544>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d03b      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a7f      	ldr	r2, [pc, #508]	; (8009330 <HAL_UART_IRQHandler+0x548>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d035      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a7d      	ldr	r2, [pc, #500]	; (8009334 <HAL_UART_IRQHandler+0x54c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d02f      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a7b      	ldr	r2, [pc, #492]	; (8009338 <HAL_UART_IRQHandler+0x550>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d029      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a79      	ldr	r2, [pc, #484]	; (800933c <HAL_UART_IRQHandler+0x554>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d023      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a77      	ldr	r2, [pc, #476]	; (8009340 <HAL_UART_IRQHandler+0x558>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d01d      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a75      	ldr	r2, [pc, #468]	; (8009344 <HAL_UART_IRQHandler+0x55c>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d017      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a73      	ldr	r2, [pc, #460]	; (8009348 <HAL_UART_IRQHandler+0x560>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d011      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a71      	ldr	r2, [pc, #452]	; (800934c <HAL_UART_IRQHandler+0x564>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d00b      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a6f      	ldr	r2, [pc, #444]	; (8009350 <HAL_UART_IRQHandler+0x568>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d005      	beq.n	80091a2 <HAL_UART_IRQHandler+0x3ba>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a6d      	ldr	r2, [pc, #436]	; (8009354 <HAL_UART_IRQHandler+0x56c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d105      	bne.n	80091ae <HAL_UART_IRQHandler+0x3c6>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	e004      	b.n	80091b8 <HAL_UART_IRQHandler+0x3d0>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	b29b      	uxth	r3, r3
 80091b8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80091bc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 81a4 	beq.w	800950e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80091cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091d0:	429a      	cmp	r2, r3
 80091d2:	f080 819c 	bcs.w	800950e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80091dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091ea:	f000 8086 	beq.w	80092fa <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009202:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009206:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800920a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	461a      	mov	r2, r3
 8009214:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009218:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800921c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009220:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009224:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009230:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1da      	bne.n	80091ee <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	3308      	adds	r3, #8
 800923e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009242:	e853 3f00 	ldrex	r3, [r3]
 8009246:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800924a:	f023 0301 	bic.w	r3, r3, #1
 800924e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3308      	adds	r3, #8
 8009258:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800925c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009260:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009262:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009264:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009268:	e841 2300 	strex	r3, r2, [r1]
 800926c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800926e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009270:	2b00      	cmp	r3, #0
 8009272:	d1e1      	bne.n	8009238 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	3308      	adds	r3, #8
 800927a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009284:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009286:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800928a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	3308      	adds	r3, #8
 8009294:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009298:	66fa      	str	r2, [r7, #108]	; 0x6c
 800929a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800929e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80092a0:	e841 2300 	strex	r3, r2, [r1]
 80092a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80092a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1e3      	bne.n	8009274 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2220      	movs	r2, #32
 80092b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80092c2:	e853 3f00 	ldrex	r3, [r3]
 80092c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80092c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092ca:	f023 0310 	bic.w	r3, r3, #16
 80092ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092dc:	65bb      	str	r3, [r7, #88]	; 0x58
 80092de:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80092e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80092e4:	e841 2300 	strex	r3, r2, [r1]
 80092e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80092ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1e4      	bne.n	80092ba <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7f9 f9ad 	bl	8002654 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009306:	b29b      	uxth	r3, r3
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	b29b      	uxth	r3, r3
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f930 	bl	8009574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009314:	e0fb      	b.n	800950e <HAL_UART_IRQHandler+0x726>
 8009316:	bf00      	nop
 8009318:	40020010 	.word	0x40020010
 800931c:	40020028 	.word	0x40020028
 8009320:	40020040 	.word	0x40020040
 8009324:	40020058 	.word	0x40020058
 8009328:	40020070 	.word	0x40020070
 800932c:	40020088 	.word	0x40020088
 8009330:	400200a0 	.word	0x400200a0
 8009334:	400200b8 	.word	0x400200b8
 8009338:	40020410 	.word	0x40020410
 800933c:	40020428 	.word	0x40020428
 8009340:	40020440 	.word	0x40020440
 8009344:	40020458 	.word	0x40020458
 8009348:	40020470 	.word	0x40020470
 800934c:	40020488 	.word	0x40020488
 8009350:	400204a0 	.word	0x400204a0
 8009354:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009364:	b29b      	uxth	r3, r3
 8009366:	1ad3      	subs	r3, r2, r3
 8009368:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009372:	b29b      	uxth	r3, r3
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 80cc 	beq.w	8009512 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800937a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800937e:	2b00      	cmp	r3, #0
 8009380:	f000 80c7 	beq.w	8009512 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800938c:	e853 3f00 	ldrex	r3, [r3]
 8009390:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009398:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80093a6:	647b      	str	r3, [r7, #68]	; 0x44
 80093a8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d1e4      	bne.n	8009384 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3308      	adds	r3, #8
 80093c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	e853 3f00 	ldrex	r3, [r3]
 80093c8:	623b      	str	r3, [r7, #32]
   return(result);
 80093ca:	6a3a      	ldr	r2, [r7, #32]
 80093cc:	4b54      	ldr	r3, [pc, #336]	; (8009520 <HAL_UART_IRQHandler+0x738>)
 80093ce:	4013      	ands	r3, r2
 80093d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	3308      	adds	r3, #8
 80093da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80093de:	633a      	str	r2, [r7, #48]	; 0x30
 80093e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80093e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093e6:	e841 2300 	strex	r3, r2, [r1]
 80093ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80093ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d1e3      	bne.n	80093ba <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2220      	movs	r2, #32
 80093f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2200      	movs	r2, #0
 80093fe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	e853 3f00 	ldrex	r3, [r3]
 8009412:	60fb      	str	r3, [r7, #12]
   return(result);
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f023 0310 	bic.w	r3, r3, #16
 800941a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	461a      	mov	r2, r3
 8009424:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009428:	61fb      	str	r3, [r7, #28]
 800942a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942c:	69b9      	ldr	r1, [r7, #24]
 800942e:	69fa      	ldr	r2, [r7, #28]
 8009430:	e841 2300 	strex	r3, r2, [r1]
 8009434:	617b      	str	r3, [r7, #20]
   return(result);
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1e4      	bne.n	8009406 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800943c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009440:	4619      	mov	r1, r3
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f000 f896 	bl	8009574 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009448:	e063      	b.n	8009512 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800944a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800944e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00e      	beq.n	8009474 <HAL_UART_IRQHandler+0x68c>
 8009456:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800945a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800945e:	2b00      	cmp	r3, #0
 8009460:	d008      	beq.n	8009474 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800946a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f001 fa29 	bl	800a8c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009472:	e051      	b.n	8009518 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947c:	2b00      	cmp	r3, #0
 800947e:	d014      	beq.n	80094aa <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009488:	2b00      	cmp	r3, #0
 800948a:	d105      	bne.n	8009498 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800948c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009494:	2b00      	cmp	r3, #0
 8009496:	d008      	beq.n	80094aa <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800949c:	2b00      	cmp	r3, #0
 800949e:	d03a      	beq.n	8009516 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
    }
    return;
 80094a8:	e035      	b.n	8009516 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80094aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d009      	beq.n	80094ca <HAL_UART_IRQHandler+0x6e2>
 80094b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d003      	beq.n	80094ca <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 f9d3 	bl	800a86e <UART_EndTransmit_IT>
    return;
 80094c8:	e026      	b.n	8009518 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80094ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d009      	beq.n	80094ea <HAL_UART_IRQHandler+0x702>
 80094d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094da:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f001 fa02 	bl	800a8ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80094e8:	e016      	b.n	8009518 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80094ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d010      	beq.n	8009518 <HAL_UART_IRQHandler+0x730>
 80094f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	da0c      	bge.n	8009518 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f001 f9ea 	bl	800a8d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009504:	e008      	b.n	8009518 <HAL_UART_IRQHandler+0x730>
      return;
 8009506:	bf00      	nop
 8009508:	e006      	b.n	8009518 <HAL_UART_IRQHandler+0x730>
    return;
 800950a:	bf00      	nop
 800950c:	e004      	b.n	8009518 <HAL_UART_IRQHandler+0x730>
      return;
 800950e:	bf00      	nop
 8009510:	e002      	b.n	8009518 <HAL_UART_IRQHandler+0x730>
      return;
 8009512:	bf00      	nop
 8009514:	e000      	b.n	8009518 <HAL_UART_IRQHandler+0x730>
    return;
 8009516:	bf00      	nop
  }
}
 8009518:	37e8      	adds	r7, #232	; 0xe8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	effffffe 	.word	0xeffffffe

08009524 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009524:	b480      	push	{r7}
 8009526:	b083      	sub	sp, #12
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800952c:	bf00      	nop
 800952e:	370c      	adds	r7, #12
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009540:	bf00      	nop
 8009542:	370c      	adds	r7, #12
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009554:	bf00      	nop
 8009556:	370c      	adds	r7, #12
 8009558:	46bd      	mov	sp, r7
 800955a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955e:	4770      	bx	lr

08009560 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009560:	b480      	push	{r7}
 8009562:	b083      	sub	sp, #12
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	460b      	mov	r3, r1
 800957e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009580:	bf00      	nop
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800958c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009590:	b092      	sub	sp, #72	; 0x48
 8009592:	af00      	add	r7, sp, #0
 8009594:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009596:	2300      	movs	r3, #0
 8009598:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	431a      	orrs	r2, r3
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	431a      	orrs	r2, r3
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	4bbe      	ldr	r3, [pc, #760]	; (80098b4 <UART_SetConfig+0x328>)
 80095bc:	4013      	ands	r3, r2
 80095be:	697a      	ldr	r2, [r7, #20]
 80095c0:	6812      	ldr	r2, [r2, #0]
 80095c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80095c4:	430b      	orrs	r3, r1
 80095c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c8:	697b      	ldr	r3, [r7, #20]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	68da      	ldr	r2, [r3, #12]
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80095e4:	697b      	ldr	r3, [r7, #20]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4ab3      	ldr	r2, [pc, #716]	; (80098b8 <UART_SetConfig+0x32c>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d004      	beq.n	80095f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	6a1b      	ldr	r3, [r3, #32]
 80095f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095f4:	4313      	orrs	r3, r2
 80095f6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	689a      	ldr	r2, [r3, #8]
 80095fe:	4baf      	ldr	r3, [pc, #700]	; (80098bc <UART_SetConfig+0x330>)
 8009600:	4013      	ands	r3, r2
 8009602:	697a      	ldr	r2, [r7, #20]
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009608:	430b      	orrs	r3, r1
 800960a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009612:	f023 010f 	bic.w	r1, r3, #15
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	430a      	orrs	r2, r1
 8009620:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	4aa6      	ldr	r2, [pc, #664]	; (80098c0 <UART_SetConfig+0x334>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d177      	bne.n	800971c <UART_SetConfig+0x190>
 800962c:	4ba5      	ldr	r3, [pc, #660]	; (80098c4 <UART_SetConfig+0x338>)
 800962e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009630:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009634:	2b28      	cmp	r3, #40	; 0x28
 8009636:	d86d      	bhi.n	8009714 <UART_SetConfig+0x188>
 8009638:	a201      	add	r2, pc, #4	; (adr r2, 8009640 <UART_SetConfig+0xb4>)
 800963a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800963e:	bf00      	nop
 8009640:	080096e5 	.word	0x080096e5
 8009644:	08009715 	.word	0x08009715
 8009648:	08009715 	.word	0x08009715
 800964c:	08009715 	.word	0x08009715
 8009650:	08009715 	.word	0x08009715
 8009654:	08009715 	.word	0x08009715
 8009658:	08009715 	.word	0x08009715
 800965c:	08009715 	.word	0x08009715
 8009660:	080096ed 	.word	0x080096ed
 8009664:	08009715 	.word	0x08009715
 8009668:	08009715 	.word	0x08009715
 800966c:	08009715 	.word	0x08009715
 8009670:	08009715 	.word	0x08009715
 8009674:	08009715 	.word	0x08009715
 8009678:	08009715 	.word	0x08009715
 800967c:	08009715 	.word	0x08009715
 8009680:	080096f5 	.word	0x080096f5
 8009684:	08009715 	.word	0x08009715
 8009688:	08009715 	.word	0x08009715
 800968c:	08009715 	.word	0x08009715
 8009690:	08009715 	.word	0x08009715
 8009694:	08009715 	.word	0x08009715
 8009698:	08009715 	.word	0x08009715
 800969c:	08009715 	.word	0x08009715
 80096a0:	080096fd 	.word	0x080096fd
 80096a4:	08009715 	.word	0x08009715
 80096a8:	08009715 	.word	0x08009715
 80096ac:	08009715 	.word	0x08009715
 80096b0:	08009715 	.word	0x08009715
 80096b4:	08009715 	.word	0x08009715
 80096b8:	08009715 	.word	0x08009715
 80096bc:	08009715 	.word	0x08009715
 80096c0:	08009705 	.word	0x08009705
 80096c4:	08009715 	.word	0x08009715
 80096c8:	08009715 	.word	0x08009715
 80096cc:	08009715 	.word	0x08009715
 80096d0:	08009715 	.word	0x08009715
 80096d4:	08009715 	.word	0x08009715
 80096d8:	08009715 	.word	0x08009715
 80096dc:	08009715 	.word	0x08009715
 80096e0:	0800970d 	.word	0x0800970d
 80096e4:	2301      	movs	r3, #1
 80096e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096ea:	e222      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80096ec:	2304      	movs	r3, #4
 80096ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096f2:	e21e      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80096f4:	2308      	movs	r3, #8
 80096f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80096fa:	e21a      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80096fc:	2310      	movs	r3, #16
 80096fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009702:	e216      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009704:	2320      	movs	r3, #32
 8009706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800970a:	e212      	b.n	8009b32 <UART_SetConfig+0x5a6>
 800970c:	2340      	movs	r3, #64	; 0x40
 800970e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009712:	e20e      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009714:	2380      	movs	r3, #128	; 0x80
 8009716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800971a:	e20a      	b.n	8009b32 <UART_SetConfig+0x5a6>
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	4a69      	ldr	r2, [pc, #420]	; (80098c8 <UART_SetConfig+0x33c>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d130      	bne.n	8009788 <UART_SetConfig+0x1fc>
 8009726:	4b67      	ldr	r3, [pc, #412]	; (80098c4 <UART_SetConfig+0x338>)
 8009728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	2b05      	cmp	r3, #5
 8009730:	d826      	bhi.n	8009780 <UART_SetConfig+0x1f4>
 8009732:	a201      	add	r2, pc, #4	; (adr r2, 8009738 <UART_SetConfig+0x1ac>)
 8009734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009738:	08009751 	.word	0x08009751
 800973c:	08009759 	.word	0x08009759
 8009740:	08009761 	.word	0x08009761
 8009744:	08009769 	.word	0x08009769
 8009748:	08009771 	.word	0x08009771
 800974c:	08009779 	.word	0x08009779
 8009750:	2300      	movs	r3, #0
 8009752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009756:	e1ec      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009758:	2304      	movs	r3, #4
 800975a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800975e:	e1e8      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009760:	2308      	movs	r3, #8
 8009762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009766:	e1e4      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009768:	2310      	movs	r3, #16
 800976a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800976e:	e1e0      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009770:	2320      	movs	r3, #32
 8009772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009776:	e1dc      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009778:	2340      	movs	r3, #64	; 0x40
 800977a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800977e:	e1d8      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009780:	2380      	movs	r3, #128	; 0x80
 8009782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009786:	e1d4      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	4a4f      	ldr	r2, [pc, #316]	; (80098cc <UART_SetConfig+0x340>)
 800978e:	4293      	cmp	r3, r2
 8009790:	d130      	bne.n	80097f4 <UART_SetConfig+0x268>
 8009792:	4b4c      	ldr	r3, [pc, #304]	; (80098c4 <UART_SetConfig+0x338>)
 8009794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009796:	f003 0307 	and.w	r3, r3, #7
 800979a:	2b05      	cmp	r3, #5
 800979c:	d826      	bhi.n	80097ec <UART_SetConfig+0x260>
 800979e:	a201      	add	r2, pc, #4	; (adr r2, 80097a4 <UART_SetConfig+0x218>)
 80097a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097a4:	080097bd 	.word	0x080097bd
 80097a8:	080097c5 	.word	0x080097c5
 80097ac:	080097cd 	.word	0x080097cd
 80097b0:	080097d5 	.word	0x080097d5
 80097b4:	080097dd 	.word	0x080097dd
 80097b8:	080097e5 	.word	0x080097e5
 80097bc:	2300      	movs	r3, #0
 80097be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097c2:	e1b6      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80097c4:	2304      	movs	r3, #4
 80097c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ca:	e1b2      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80097cc:	2308      	movs	r3, #8
 80097ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097d2:	e1ae      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80097d4:	2310      	movs	r3, #16
 80097d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097da:	e1aa      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80097dc:	2320      	movs	r3, #32
 80097de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097e2:	e1a6      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80097e4:	2340      	movs	r3, #64	; 0x40
 80097e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097ea:	e1a2      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80097ec:	2380      	movs	r3, #128	; 0x80
 80097ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80097f2:	e19e      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a35      	ldr	r2, [pc, #212]	; (80098d0 <UART_SetConfig+0x344>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d130      	bne.n	8009860 <UART_SetConfig+0x2d4>
 80097fe:	4b31      	ldr	r3, [pc, #196]	; (80098c4 <UART_SetConfig+0x338>)
 8009800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009802:	f003 0307 	and.w	r3, r3, #7
 8009806:	2b05      	cmp	r3, #5
 8009808:	d826      	bhi.n	8009858 <UART_SetConfig+0x2cc>
 800980a:	a201      	add	r2, pc, #4	; (adr r2, 8009810 <UART_SetConfig+0x284>)
 800980c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009810:	08009829 	.word	0x08009829
 8009814:	08009831 	.word	0x08009831
 8009818:	08009839 	.word	0x08009839
 800981c:	08009841 	.word	0x08009841
 8009820:	08009849 	.word	0x08009849
 8009824:	08009851 	.word	0x08009851
 8009828:	2300      	movs	r3, #0
 800982a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800982e:	e180      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009830:	2304      	movs	r3, #4
 8009832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009836:	e17c      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009838:	2308      	movs	r3, #8
 800983a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800983e:	e178      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009840:	2310      	movs	r3, #16
 8009842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009846:	e174      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009848:	2320      	movs	r3, #32
 800984a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800984e:	e170      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009850:	2340      	movs	r3, #64	; 0x40
 8009852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009856:	e16c      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009858:	2380      	movs	r3, #128	; 0x80
 800985a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800985e:	e168      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009860:	697b      	ldr	r3, [r7, #20]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a1b      	ldr	r2, [pc, #108]	; (80098d4 <UART_SetConfig+0x348>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d142      	bne.n	80098f0 <UART_SetConfig+0x364>
 800986a:	4b16      	ldr	r3, [pc, #88]	; (80098c4 <UART_SetConfig+0x338>)
 800986c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b05      	cmp	r3, #5
 8009874:	d838      	bhi.n	80098e8 <UART_SetConfig+0x35c>
 8009876:	a201      	add	r2, pc, #4	; (adr r2, 800987c <UART_SetConfig+0x2f0>)
 8009878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987c:	08009895 	.word	0x08009895
 8009880:	0800989d 	.word	0x0800989d
 8009884:	080098a5 	.word	0x080098a5
 8009888:	080098ad 	.word	0x080098ad
 800988c:	080098d9 	.word	0x080098d9
 8009890:	080098e1 	.word	0x080098e1
 8009894:	2300      	movs	r3, #0
 8009896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800989a:	e14a      	b.n	8009b32 <UART_SetConfig+0x5a6>
 800989c:	2304      	movs	r3, #4
 800989e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098a2:	e146      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80098a4:	2308      	movs	r3, #8
 80098a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098aa:	e142      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80098ac:	2310      	movs	r3, #16
 80098ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098b2:	e13e      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80098b4:	cfff69f3 	.word	0xcfff69f3
 80098b8:	58000c00 	.word	0x58000c00
 80098bc:	11fff4ff 	.word	0x11fff4ff
 80098c0:	40011000 	.word	0x40011000
 80098c4:	58024400 	.word	0x58024400
 80098c8:	40004400 	.word	0x40004400
 80098cc:	40004800 	.word	0x40004800
 80098d0:	40004c00 	.word	0x40004c00
 80098d4:	40005000 	.word	0x40005000
 80098d8:	2320      	movs	r3, #32
 80098da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098de:	e128      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80098e0:	2340      	movs	r3, #64	; 0x40
 80098e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098e6:	e124      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80098e8:	2380      	movs	r3, #128	; 0x80
 80098ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80098ee:	e120      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4acb      	ldr	r2, [pc, #812]	; (8009c24 <UART_SetConfig+0x698>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d176      	bne.n	80099e8 <UART_SetConfig+0x45c>
 80098fa:	4bcb      	ldr	r3, [pc, #812]	; (8009c28 <UART_SetConfig+0x69c>)
 80098fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009902:	2b28      	cmp	r3, #40	; 0x28
 8009904:	d86c      	bhi.n	80099e0 <UART_SetConfig+0x454>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <UART_SetConfig+0x380>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	080099b1 	.word	0x080099b1
 8009910:	080099e1 	.word	0x080099e1
 8009914:	080099e1 	.word	0x080099e1
 8009918:	080099e1 	.word	0x080099e1
 800991c:	080099e1 	.word	0x080099e1
 8009920:	080099e1 	.word	0x080099e1
 8009924:	080099e1 	.word	0x080099e1
 8009928:	080099e1 	.word	0x080099e1
 800992c:	080099b9 	.word	0x080099b9
 8009930:	080099e1 	.word	0x080099e1
 8009934:	080099e1 	.word	0x080099e1
 8009938:	080099e1 	.word	0x080099e1
 800993c:	080099e1 	.word	0x080099e1
 8009940:	080099e1 	.word	0x080099e1
 8009944:	080099e1 	.word	0x080099e1
 8009948:	080099e1 	.word	0x080099e1
 800994c:	080099c1 	.word	0x080099c1
 8009950:	080099e1 	.word	0x080099e1
 8009954:	080099e1 	.word	0x080099e1
 8009958:	080099e1 	.word	0x080099e1
 800995c:	080099e1 	.word	0x080099e1
 8009960:	080099e1 	.word	0x080099e1
 8009964:	080099e1 	.word	0x080099e1
 8009968:	080099e1 	.word	0x080099e1
 800996c:	080099c9 	.word	0x080099c9
 8009970:	080099e1 	.word	0x080099e1
 8009974:	080099e1 	.word	0x080099e1
 8009978:	080099e1 	.word	0x080099e1
 800997c:	080099e1 	.word	0x080099e1
 8009980:	080099e1 	.word	0x080099e1
 8009984:	080099e1 	.word	0x080099e1
 8009988:	080099e1 	.word	0x080099e1
 800998c:	080099d1 	.word	0x080099d1
 8009990:	080099e1 	.word	0x080099e1
 8009994:	080099e1 	.word	0x080099e1
 8009998:	080099e1 	.word	0x080099e1
 800999c:	080099e1 	.word	0x080099e1
 80099a0:	080099e1 	.word	0x080099e1
 80099a4:	080099e1 	.word	0x080099e1
 80099a8:	080099e1 	.word	0x080099e1
 80099ac:	080099d9 	.word	0x080099d9
 80099b0:	2301      	movs	r3, #1
 80099b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099b6:	e0bc      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80099b8:	2304      	movs	r3, #4
 80099ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099be:	e0b8      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80099c0:	2308      	movs	r3, #8
 80099c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099c6:	e0b4      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80099c8:	2310      	movs	r3, #16
 80099ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099ce:	e0b0      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80099d0:	2320      	movs	r3, #32
 80099d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099d6:	e0ac      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80099d8:	2340      	movs	r3, #64	; 0x40
 80099da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099de:	e0a8      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80099e0:	2380      	movs	r3, #128	; 0x80
 80099e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80099e6:	e0a4      	b.n	8009b32 <UART_SetConfig+0x5a6>
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a8f      	ldr	r2, [pc, #572]	; (8009c2c <UART_SetConfig+0x6a0>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d130      	bne.n	8009a54 <UART_SetConfig+0x4c8>
 80099f2:	4b8d      	ldr	r3, [pc, #564]	; (8009c28 <UART_SetConfig+0x69c>)
 80099f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099f6:	f003 0307 	and.w	r3, r3, #7
 80099fa:	2b05      	cmp	r3, #5
 80099fc:	d826      	bhi.n	8009a4c <UART_SetConfig+0x4c0>
 80099fe:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <UART_SetConfig+0x478>)
 8009a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a04:	08009a1d 	.word	0x08009a1d
 8009a08:	08009a25 	.word	0x08009a25
 8009a0c:	08009a2d 	.word	0x08009a2d
 8009a10:	08009a35 	.word	0x08009a35
 8009a14:	08009a3d 	.word	0x08009a3d
 8009a18:	08009a45 	.word	0x08009a45
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a22:	e086      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a24:	2304      	movs	r3, #4
 8009a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a2a:	e082      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a32:	e07e      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a34:	2310      	movs	r3, #16
 8009a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a3a:	e07a      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a3c:	2320      	movs	r3, #32
 8009a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a42:	e076      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a44:	2340      	movs	r3, #64	; 0x40
 8009a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a4a:	e072      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a4c:	2380      	movs	r3, #128	; 0x80
 8009a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a52:	e06e      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a75      	ldr	r2, [pc, #468]	; (8009c30 <UART_SetConfig+0x6a4>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d130      	bne.n	8009ac0 <UART_SetConfig+0x534>
 8009a5e:	4b72      	ldr	r3, [pc, #456]	; (8009c28 <UART_SetConfig+0x69c>)
 8009a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a62:	f003 0307 	and.w	r3, r3, #7
 8009a66:	2b05      	cmp	r3, #5
 8009a68:	d826      	bhi.n	8009ab8 <UART_SetConfig+0x52c>
 8009a6a:	a201      	add	r2, pc, #4	; (adr r2, 8009a70 <UART_SetConfig+0x4e4>)
 8009a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a70:	08009a89 	.word	0x08009a89
 8009a74:	08009a91 	.word	0x08009a91
 8009a78:	08009a99 	.word	0x08009a99
 8009a7c:	08009aa1 	.word	0x08009aa1
 8009a80:	08009aa9 	.word	0x08009aa9
 8009a84:	08009ab1 	.word	0x08009ab1
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a8e:	e050      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a90:	2304      	movs	r3, #4
 8009a92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a96:	e04c      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009a98:	2308      	movs	r3, #8
 8009a9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009a9e:	e048      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009aa0:	2310      	movs	r3, #16
 8009aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aa6:	e044      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009aa8:	2320      	movs	r3, #32
 8009aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009aae:	e040      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009ab0:	2340      	movs	r3, #64	; 0x40
 8009ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ab6:	e03c      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009ab8:	2380      	movs	r3, #128	; 0x80
 8009aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009abe:	e038      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	4a5b      	ldr	r2, [pc, #364]	; (8009c34 <UART_SetConfig+0x6a8>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d130      	bne.n	8009b2c <UART_SetConfig+0x5a0>
 8009aca:	4b57      	ldr	r3, [pc, #348]	; (8009c28 <UART_SetConfig+0x69c>)
 8009acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ace:	f003 0307 	and.w	r3, r3, #7
 8009ad2:	2b05      	cmp	r3, #5
 8009ad4:	d826      	bhi.n	8009b24 <UART_SetConfig+0x598>
 8009ad6:	a201      	add	r2, pc, #4	; (adr r2, 8009adc <UART_SetConfig+0x550>)
 8009ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009adc:	08009af5 	.word	0x08009af5
 8009ae0:	08009afd 	.word	0x08009afd
 8009ae4:	08009b05 	.word	0x08009b05
 8009ae8:	08009b0d 	.word	0x08009b0d
 8009aec:	08009b15 	.word	0x08009b15
 8009af0:	08009b1d 	.word	0x08009b1d
 8009af4:	2302      	movs	r3, #2
 8009af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009afa:	e01a      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009afc:	2304      	movs	r3, #4
 8009afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b02:	e016      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009b04:	2308      	movs	r3, #8
 8009b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b0a:	e012      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009b0c:	2310      	movs	r3, #16
 8009b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b12:	e00e      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009b14:	2320      	movs	r3, #32
 8009b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b1a:	e00a      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009b1c:	2340      	movs	r3, #64	; 0x40
 8009b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b22:	e006      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009b24:	2380      	movs	r3, #128	; 0x80
 8009b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b2a:	e002      	b.n	8009b32 <UART_SetConfig+0x5a6>
 8009b2c:	2380      	movs	r3, #128	; 0x80
 8009b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a3f      	ldr	r2, [pc, #252]	; (8009c34 <UART_SetConfig+0x6a8>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	f040 80f8 	bne.w	8009d2e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009b3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b42:	2b20      	cmp	r3, #32
 8009b44:	dc46      	bgt.n	8009bd4 <UART_SetConfig+0x648>
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	f2c0 8082 	blt.w	8009c50 <UART_SetConfig+0x6c4>
 8009b4c:	3b02      	subs	r3, #2
 8009b4e:	2b1e      	cmp	r3, #30
 8009b50:	d87e      	bhi.n	8009c50 <UART_SetConfig+0x6c4>
 8009b52:	a201      	add	r2, pc, #4	; (adr r2, 8009b58 <UART_SetConfig+0x5cc>)
 8009b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b58:	08009bdb 	.word	0x08009bdb
 8009b5c:	08009c51 	.word	0x08009c51
 8009b60:	08009be3 	.word	0x08009be3
 8009b64:	08009c51 	.word	0x08009c51
 8009b68:	08009c51 	.word	0x08009c51
 8009b6c:	08009c51 	.word	0x08009c51
 8009b70:	08009bf3 	.word	0x08009bf3
 8009b74:	08009c51 	.word	0x08009c51
 8009b78:	08009c51 	.word	0x08009c51
 8009b7c:	08009c51 	.word	0x08009c51
 8009b80:	08009c51 	.word	0x08009c51
 8009b84:	08009c51 	.word	0x08009c51
 8009b88:	08009c51 	.word	0x08009c51
 8009b8c:	08009c51 	.word	0x08009c51
 8009b90:	08009c03 	.word	0x08009c03
 8009b94:	08009c51 	.word	0x08009c51
 8009b98:	08009c51 	.word	0x08009c51
 8009b9c:	08009c51 	.word	0x08009c51
 8009ba0:	08009c51 	.word	0x08009c51
 8009ba4:	08009c51 	.word	0x08009c51
 8009ba8:	08009c51 	.word	0x08009c51
 8009bac:	08009c51 	.word	0x08009c51
 8009bb0:	08009c51 	.word	0x08009c51
 8009bb4:	08009c51 	.word	0x08009c51
 8009bb8:	08009c51 	.word	0x08009c51
 8009bbc:	08009c51 	.word	0x08009c51
 8009bc0:	08009c51 	.word	0x08009c51
 8009bc4:	08009c51 	.word	0x08009c51
 8009bc8:	08009c51 	.word	0x08009c51
 8009bcc:	08009c51 	.word	0x08009c51
 8009bd0:	08009c43 	.word	0x08009c43
 8009bd4:	2b40      	cmp	r3, #64	; 0x40
 8009bd6:	d037      	beq.n	8009c48 <UART_SetConfig+0x6bc>
 8009bd8:	e03a      	b.n	8009c50 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009bda:	f7fd fca5 	bl	8007528 <HAL_RCCEx_GetD3PCLK1Freq>
 8009bde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009be0:	e03c      	b.n	8009c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fd fcb4 	bl	8007554 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009bf0:	e034      	b.n	8009c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bf2:	f107 0318 	add.w	r3, r7, #24
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f7fd fe00 	bl	80077fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bfc:	69fb      	ldr	r3, [r7, #28]
 8009bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c00:	e02c      	b.n	8009c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c02:	4b09      	ldr	r3, [pc, #36]	; (8009c28 <UART_SetConfig+0x69c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 0320 	and.w	r3, r3, #32
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d016      	beq.n	8009c3c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009c0e:	4b06      	ldr	r3, [pc, #24]	; (8009c28 <UART_SetConfig+0x69c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	08db      	lsrs	r3, r3, #3
 8009c14:	f003 0303 	and.w	r3, r3, #3
 8009c18:	4a07      	ldr	r2, [pc, #28]	; (8009c38 <UART_SetConfig+0x6ac>)
 8009c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c20:	e01c      	b.n	8009c5c <UART_SetConfig+0x6d0>
 8009c22:	bf00      	nop
 8009c24:	40011400 	.word	0x40011400
 8009c28:	58024400 	.word	0x58024400
 8009c2c:	40007800 	.word	0x40007800
 8009c30:	40007c00 	.word	0x40007c00
 8009c34:	58000c00 	.word	0x58000c00
 8009c38:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009c3c:	4b9d      	ldr	r3, [pc, #628]	; (8009eb4 <UART_SetConfig+0x928>)
 8009c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c40:	e00c      	b.n	8009c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c42:	4b9d      	ldr	r3, [pc, #628]	; (8009eb8 <UART_SetConfig+0x92c>)
 8009c44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c46:	e009      	b.n	8009c5c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c48:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009c4e:	e005      	b.n	8009c5c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009c50:	2300      	movs	r3, #0
 8009c52:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009c5a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	f000 81de 	beq.w	800a020 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c68:	4a94      	ldr	r2, [pc, #592]	; (8009ebc <UART_SetConfig+0x930>)
 8009c6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c76:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	4413      	add	r3, r2
 8009c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d305      	bcc.n	8009c94 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c88:	697b      	ldr	r3, [r7, #20]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c90:	429a      	cmp	r2, r3
 8009c92:	d903      	bls.n	8009c9c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009c94:	2301      	movs	r3, #1
 8009c96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009c9a:	e1c1      	b.n	800a020 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	60bb      	str	r3, [r7, #8]
 8009ca2:	60fa      	str	r2, [r7, #12]
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	4a84      	ldr	r2, [pc, #528]	; (8009ebc <UART_SetConfig+0x930>)
 8009caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cae:	b29b      	uxth	r3, r3
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	607a      	str	r2, [r7, #4]
 8009cb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009cbe:	f7f6 fb0b 	bl	80002d8 <__aeabi_uldivmod>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	4619      	mov	r1, r3
 8009cca:	f04f 0200 	mov.w	r2, #0
 8009cce:	f04f 0300 	mov.w	r3, #0
 8009cd2:	020b      	lsls	r3, r1, #8
 8009cd4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cd8:	0202      	lsls	r2, r0, #8
 8009cda:	6979      	ldr	r1, [r7, #20]
 8009cdc:	6849      	ldr	r1, [r1, #4]
 8009cde:	0849      	lsrs	r1, r1, #1
 8009ce0:	2000      	movs	r0, #0
 8009ce2:	460c      	mov	r4, r1
 8009ce4:	4605      	mov	r5, r0
 8009ce6:	eb12 0804 	adds.w	r8, r2, r4
 8009cea:	eb43 0905 	adc.w	r9, r3, r5
 8009cee:	697b      	ldr	r3, [r7, #20]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	469a      	mov	sl, r3
 8009cf6:	4693      	mov	fp, r2
 8009cf8:	4652      	mov	r2, sl
 8009cfa:	465b      	mov	r3, fp
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f7f6 faea 	bl	80002d8 <__aeabi_uldivmod>
 8009d04:	4602      	mov	r2, r0
 8009d06:	460b      	mov	r3, r1
 8009d08:	4613      	mov	r3, r2
 8009d0a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d12:	d308      	bcc.n	8009d26 <UART_SetConfig+0x79a>
 8009d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d1a:	d204      	bcs.n	8009d26 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009d1c:	697b      	ldr	r3, [r7, #20]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009d22:	60da      	str	r2, [r3, #12]
 8009d24:	e17c      	b.n	800a020 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009d26:	2301      	movs	r3, #1
 8009d28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009d2c:	e178      	b.n	800a020 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	69db      	ldr	r3, [r3, #28]
 8009d32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d36:	f040 80c5 	bne.w	8009ec4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009d3a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009d3e:	2b20      	cmp	r3, #32
 8009d40:	dc48      	bgt.n	8009dd4 <UART_SetConfig+0x848>
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	db7b      	blt.n	8009e3e <UART_SetConfig+0x8b2>
 8009d46:	2b20      	cmp	r3, #32
 8009d48:	d879      	bhi.n	8009e3e <UART_SetConfig+0x8b2>
 8009d4a:	a201      	add	r2, pc, #4	; (adr r2, 8009d50 <UART_SetConfig+0x7c4>)
 8009d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d50:	08009ddb 	.word	0x08009ddb
 8009d54:	08009de3 	.word	0x08009de3
 8009d58:	08009e3f 	.word	0x08009e3f
 8009d5c:	08009e3f 	.word	0x08009e3f
 8009d60:	08009deb 	.word	0x08009deb
 8009d64:	08009e3f 	.word	0x08009e3f
 8009d68:	08009e3f 	.word	0x08009e3f
 8009d6c:	08009e3f 	.word	0x08009e3f
 8009d70:	08009dfb 	.word	0x08009dfb
 8009d74:	08009e3f 	.word	0x08009e3f
 8009d78:	08009e3f 	.word	0x08009e3f
 8009d7c:	08009e3f 	.word	0x08009e3f
 8009d80:	08009e3f 	.word	0x08009e3f
 8009d84:	08009e3f 	.word	0x08009e3f
 8009d88:	08009e3f 	.word	0x08009e3f
 8009d8c:	08009e3f 	.word	0x08009e3f
 8009d90:	08009e0b 	.word	0x08009e0b
 8009d94:	08009e3f 	.word	0x08009e3f
 8009d98:	08009e3f 	.word	0x08009e3f
 8009d9c:	08009e3f 	.word	0x08009e3f
 8009da0:	08009e3f 	.word	0x08009e3f
 8009da4:	08009e3f 	.word	0x08009e3f
 8009da8:	08009e3f 	.word	0x08009e3f
 8009dac:	08009e3f 	.word	0x08009e3f
 8009db0:	08009e3f 	.word	0x08009e3f
 8009db4:	08009e3f 	.word	0x08009e3f
 8009db8:	08009e3f 	.word	0x08009e3f
 8009dbc:	08009e3f 	.word	0x08009e3f
 8009dc0:	08009e3f 	.word	0x08009e3f
 8009dc4:	08009e3f 	.word	0x08009e3f
 8009dc8:	08009e3f 	.word	0x08009e3f
 8009dcc:	08009e3f 	.word	0x08009e3f
 8009dd0:	08009e31 	.word	0x08009e31
 8009dd4:	2b40      	cmp	r3, #64	; 0x40
 8009dd6:	d02e      	beq.n	8009e36 <UART_SetConfig+0x8aa>
 8009dd8:	e031      	b.n	8009e3e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dda:	f7fc fc33 	bl	8006644 <HAL_RCC_GetPCLK1Freq>
 8009dde:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009de0:	e033      	b.n	8009e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009de2:	f7fc fc45 	bl	8006670 <HAL_RCC_GetPCLK2Freq>
 8009de6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009de8:	e02f      	b.n	8009e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009dea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009dee:	4618      	mov	r0, r3
 8009df0:	f7fd fbb0 	bl	8007554 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009df8:	e027      	b.n	8009e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009dfa:	f107 0318 	add.w	r3, r7, #24
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f7fd fcfc 	bl	80077fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e08:	e01f      	b.n	8009e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009e0a:	4b2d      	ldr	r3, [pc, #180]	; (8009ec0 <UART_SetConfig+0x934>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d009      	beq.n	8009e2a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009e16:	4b2a      	ldr	r3, [pc, #168]	; (8009ec0 <UART_SetConfig+0x934>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	08db      	lsrs	r3, r3, #3
 8009e1c:	f003 0303 	and.w	r3, r3, #3
 8009e20:	4a24      	ldr	r2, [pc, #144]	; (8009eb4 <UART_SetConfig+0x928>)
 8009e22:	fa22 f303 	lsr.w	r3, r2, r3
 8009e26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009e28:	e00f      	b.n	8009e4a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009e2a:	4b22      	ldr	r3, [pc, #136]	; (8009eb4 <UART_SetConfig+0x928>)
 8009e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e2e:	e00c      	b.n	8009e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009e30:	4b21      	ldr	r3, [pc, #132]	; (8009eb8 <UART_SetConfig+0x92c>)
 8009e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e34:	e009      	b.n	8009e4a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009e3c:	e005      	b.n	8009e4a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009e48:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	f000 80e7 	beq.w	800a020 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e56:	4a19      	ldr	r2, [pc, #100]	; (8009ebc <UART_SetConfig+0x930>)
 8009e58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e64:	005a      	lsls	r2, r3, #1
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	685b      	ldr	r3, [r3, #4]
 8009e6a:	085b      	lsrs	r3, r3, #1
 8009e6c:	441a      	add	r2, r3
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e76:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e7a:	2b0f      	cmp	r3, #15
 8009e7c:	d916      	bls.n	8009eac <UART_SetConfig+0x920>
 8009e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e84:	d212      	bcs.n	8009eac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f023 030f 	bic.w	r3, r3, #15
 8009e8e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009e90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e92:	085b      	lsrs	r3, r3, #1
 8009e94:	b29b      	uxth	r3, r3
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	b29a      	uxth	r2, r3
 8009e9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009ea8:	60da      	str	r2, [r3, #12]
 8009eaa:	e0b9      	b.n	800a020 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009eac:	2301      	movs	r3, #1
 8009eae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009eb2:	e0b5      	b.n	800a020 <UART_SetConfig+0xa94>
 8009eb4:	03d09000 	.word	0x03d09000
 8009eb8:	003d0900 	.word	0x003d0900
 8009ebc:	0800b350 	.word	0x0800b350
 8009ec0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ec4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009ec8:	2b20      	cmp	r3, #32
 8009eca:	dc49      	bgt.n	8009f60 <UART_SetConfig+0x9d4>
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	db7c      	blt.n	8009fca <UART_SetConfig+0xa3e>
 8009ed0:	2b20      	cmp	r3, #32
 8009ed2:	d87a      	bhi.n	8009fca <UART_SetConfig+0xa3e>
 8009ed4:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <UART_SetConfig+0x950>)
 8009ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eda:	bf00      	nop
 8009edc:	08009f67 	.word	0x08009f67
 8009ee0:	08009f6f 	.word	0x08009f6f
 8009ee4:	08009fcb 	.word	0x08009fcb
 8009ee8:	08009fcb 	.word	0x08009fcb
 8009eec:	08009f77 	.word	0x08009f77
 8009ef0:	08009fcb 	.word	0x08009fcb
 8009ef4:	08009fcb 	.word	0x08009fcb
 8009ef8:	08009fcb 	.word	0x08009fcb
 8009efc:	08009f87 	.word	0x08009f87
 8009f00:	08009fcb 	.word	0x08009fcb
 8009f04:	08009fcb 	.word	0x08009fcb
 8009f08:	08009fcb 	.word	0x08009fcb
 8009f0c:	08009fcb 	.word	0x08009fcb
 8009f10:	08009fcb 	.word	0x08009fcb
 8009f14:	08009fcb 	.word	0x08009fcb
 8009f18:	08009fcb 	.word	0x08009fcb
 8009f1c:	08009f97 	.word	0x08009f97
 8009f20:	08009fcb 	.word	0x08009fcb
 8009f24:	08009fcb 	.word	0x08009fcb
 8009f28:	08009fcb 	.word	0x08009fcb
 8009f2c:	08009fcb 	.word	0x08009fcb
 8009f30:	08009fcb 	.word	0x08009fcb
 8009f34:	08009fcb 	.word	0x08009fcb
 8009f38:	08009fcb 	.word	0x08009fcb
 8009f3c:	08009fcb 	.word	0x08009fcb
 8009f40:	08009fcb 	.word	0x08009fcb
 8009f44:	08009fcb 	.word	0x08009fcb
 8009f48:	08009fcb 	.word	0x08009fcb
 8009f4c:	08009fcb 	.word	0x08009fcb
 8009f50:	08009fcb 	.word	0x08009fcb
 8009f54:	08009fcb 	.word	0x08009fcb
 8009f58:	08009fcb 	.word	0x08009fcb
 8009f5c:	08009fbd 	.word	0x08009fbd
 8009f60:	2b40      	cmp	r3, #64	; 0x40
 8009f62:	d02e      	beq.n	8009fc2 <UART_SetConfig+0xa36>
 8009f64:	e031      	b.n	8009fca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f66:	f7fc fb6d 	bl	8006644 <HAL_RCC_GetPCLK1Freq>
 8009f6a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f6c:	e033      	b.n	8009fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f6e:	f7fc fb7f 	bl	8006670 <HAL_RCC_GetPCLK2Freq>
 8009f72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009f74:	e02f      	b.n	8009fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	f7fd faea 	bl	8007554 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f84:	e027      	b.n	8009fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f86:	f107 0318 	add.w	r3, r7, #24
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7fd fc36 	bl	80077fc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009f94:	e01f      	b.n	8009fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009f96:	4b2d      	ldr	r3, [pc, #180]	; (800a04c <UART_SetConfig+0xac0>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f003 0320 	and.w	r3, r3, #32
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d009      	beq.n	8009fb6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009fa2:	4b2a      	ldr	r3, [pc, #168]	; (800a04c <UART_SetConfig+0xac0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	08db      	lsrs	r3, r3, #3
 8009fa8:	f003 0303 	and.w	r3, r3, #3
 8009fac:	4a28      	ldr	r2, [pc, #160]	; (800a050 <UART_SetConfig+0xac4>)
 8009fae:	fa22 f303 	lsr.w	r3, r2, r3
 8009fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009fb4:	e00f      	b.n	8009fd6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009fb6:	4b26      	ldr	r3, [pc, #152]	; (800a050 <UART_SetConfig+0xac4>)
 8009fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fba:	e00c      	b.n	8009fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009fbc:	4b25      	ldr	r3, [pc, #148]	; (800a054 <UART_SetConfig+0xac8>)
 8009fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc0:	e009      	b.n	8009fd6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009fc8:	e005      	b.n	8009fd6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009fce:	2301      	movs	r3, #1
 8009fd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009fd4:	bf00      	nop
    }

    if (pclk != 0U)
 8009fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d021      	beq.n	800a020 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe0:	4a1d      	ldr	r2, [pc, #116]	; (800a058 <UART_SetConfig+0xacc>)
 8009fe2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fe6:	461a      	mov	r2, r3
 8009fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fea:	fbb3 f2f2 	udiv	r2, r3, r2
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	085b      	lsrs	r3, r3, #1
 8009ff4:	441a      	add	r2, r3
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ffe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a002:	2b0f      	cmp	r3, #15
 800a004:	d909      	bls.n	800a01a <UART_SetConfig+0xa8e>
 800a006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a00c:	d205      	bcs.n	800a01a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	b29a      	uxth	r2, r3
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	60da      	str	r2, [r3, #12]
 800a018:	e002      	b.n	800a020 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a01a:	2301      	movs	r3, #1
 800a01c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	2201      	movs	r2, #1
 800a024:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	2200      	movs	r2, #0
 800a034:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	2200      	movs	r2, #0
 800a03a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a03c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a040:	4618      	mov	r0, r3
 800a042:	3748      	adds	r7, #72	; 0x48
 800a044:	46bd      	mov	sp, r7
 800a046:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a04a:	bf00      	nop
 800a04c:	58024400 	.word	0x58024400
 800a050:	03d09000 	.word	0x03d09000
 800a054:	003d0900 	.word	0x003d0900
 800a058:	0800b350 	.word	0x0800b350

0800a05c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a068:	f003 0301 	and.w	r3, r3, #1
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d00a      	beq.n	800a086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	430a      	orrs	r2, r1
 800a084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a08a:	f003 0302 	and.w	r3, r3, #2
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d00a      	beq.n	800a0a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	430a      	orrs	r2, r1
 800a0a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d00a      	beq.n	800a0ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	430a      	orrs	r2, r1
 800a0c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0ce:	f003 0308 	and.w	r3, r3, #8
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00a      	beq.n	800a0ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	430a      	orrs	r2, r1
 800a0ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0f0:	f003 0310 	and.w	r3, r3, #16
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00a      	beq.n	800a10e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	430a      	orrs	r2, r1
 800a10c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a112:	f003 0320 	and.w	r3, r3, #32
 800a116:	2b00      	cmp	r3, #0
 800a118:	d00a      	beq.n	800a130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	430a      	orrs	r2, r1
 800a12e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d01a      	beq.n	800a172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	430a      	orrs	r2, r1
 800a150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a156:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a15a:	d10a      	bne.n	800a172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	430a      	orrs	r2, r1
 800a170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d00a      	beq.n	800a194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	430a      	orrs	r2, r1
 800a192:	605a      	str	r2, [r3, #4]
  }
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a1b0:	f7f7 fb2a 	bl	8001808 <HAL_GetTick>
 800a1b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0308 	and.w	r3, r3, #8
 800a1c0:	2b08      	cmp	r3, #8
 800a1c2:	d10e      	bne.n	800a1e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1c8:	9300      	str	r3, [sp, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f000 f82f 	bl	800a236 <UART_WaitOnFlagUntilTimeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d001      	beq.n	800a1e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1de:	2303      	movs	r3, #3
 800a1e0:	e025      	b.n	800a22e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f003 0304 	and.w	r3, r3, #4
 800a1ec:	2b04      	cmp	r3, #4
 800a1ee:	d10e      	bne.n	800a20e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1f4:	9300      	str	r3, [sp, #0]
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2200      	movs	r2, #0
 800a1fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f000 f819 	bl	800a236 <UART_WaitOnFlagUntilTimeout>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a20a:	2303      	movs	r3, #3
 800a20c:	e00f      	b.n	800a22e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2220      	movs	r2, #32
 800a212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2220      	movs	r2, #32
 800a21a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b09c      	sub	sp, #112	; 0x70
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	603b      	str	r3, [r7, #0]
 800a242:	4613      	mov	r3, r2
 800a244:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a246:	e0a9      	b.n	800a39c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a24e:	f000 80a5 	beq.w	800a39c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a252:	f7f7 fad9 	bl	8001808 <HAL_GetTick>
 800a256:	4602      	mov	r2, r0
 800a258:	683b      	ldr	r3, [r7, #0]
 800a25a:	1ad3      	subs	r3, r2, r3
 800a25c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a25e:	429a      	cmp	r2, r3
 800a260:	d302      	bcc.n	800a268 <UART_WaitOnFlagUntilTimeout+0x32>
 800a262:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a264:	2b00      	cmp	r3, #0
 800a266:	d140      	bne.n	800a2ea <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a276:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a278:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a27c:	667b      	str	r3, [r7, #100]	; 0x64
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a286:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a288:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a28c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e6      	bne.n	800a268 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	3308      	adds	r3, #8
 800a2a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2a4:	e853 3f00 	ldrex	r3, [r3]
 800a2a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2ac:	f023 0301 	bic.w	r3, r3, #1
 800a2b0:	663b      	str	r3, [r7, #96]	; 0x60
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3308      	adds	r3, #8
 800a2b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a2ba:	64ba      	str	r2, [r7, #72]	; 0x48
 800a2bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2be:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2c2:	e841 2300 	strex	r3, r2, [r1]
 800a2c6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d1e5      	bne.n	800a29a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	2220      	movs	r2, #32
 800a2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2220      	movs	r2, #32
 800a2da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e069      	b.n	800a3be <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f003 0304 	and.w	r3, r3, #4
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d051      	beq.n	800a39c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	69db      	ldr	r3, [r3, #28]
 800a2fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a306:	d149      	bne.n	800a39c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a310:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31a:	e853 3f00 	ldrex	r3, [r3]
 800a31e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a326:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a330:	637b      	str	r3, [r7, #52]	; 0x34
 800a332:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a334:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a338:	e841 2300 	strex	r3, r2, [r1]
 800a33c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1e6      	bne.n	800a312 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	3308      	adds	r3, #8
 800a34a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	e853 3f00 	ldrex	r3, [r3]
 800a352:	613b      	str	r3, [r7, #16]
   return(result);
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	f023 0301 	bic.w	r3, r3, #1
 800a35a:	66bb      	str	r3, [r7, #104]	; 0x68
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	3308      	adds	r3, #8
 800a362:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a364:	623a      	str	r2, [r7, #32]
 800a366:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a368:	69f9      	ldr	r1, [r7, #28]
 800a36a:	6a3a      	ldr	r2, [r7, #32]
 800a36c:	e841 2300 	strex	r3, r2, [r1]
 800a370:	61bb      	str	r3, [r7, #24]
   return(result);
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	2b00      	cmp	r3, #0
 800a376:	d1e5      	bne.n	800a344 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2220      	movs	r2, #32
 800a37c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2220      	movs	r2, #32
 800a384:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2220      	movs	r2, #32
 800a38c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e010      	b.n	800a3be <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	69da      	ldr	r2, [r3, #28]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	bf0c      	ite	eq
 800a3ac:	2301      	moveq	r3, #1
 800a3ae:	2300      	movne	r3, #0
 800a3b0:	b2db      	uxtb	r3, r3
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	79fb      	ldrb	r3, [r7, #7]
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	f43f af46 	beq.w	800a248 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a3bc:	2300      	movs	r3, #0
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3770      	adds	r7, #112	; 0x70
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
	...

0800a3c8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b096      	sub	sp, #88	; 0x58
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	60f8      	str	r0, [r7, #12]
 800a3d0:	60b9      	str	r1, [r7, #8]
 800a3d2:	4613      	mov	r3, r2
 800a3d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	88fa      	ldrh	r2, [r7, #6]
 800a3e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2222      	movs	r2, #34	; 0x22
 800a3f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d02c      	beq.n	800a456 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a400:	4a42      	ldr	r2, [pc, #264]	; (800a50c <UART_Start_Receive_DMA+0x144>)
 800a402:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a408:	4a41      	ldr	r2, [pc, #260]	; (800a510 <UART_Start_Receive_DMA+0x148>)
 800a40a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a410:	4a40      	ldr	r2, [pc, #256]	; (800a514 <UART_Start_Receive_DMA+0x14c>)
 800a412:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a418:	2200      	movs	r2, #0
 800a41a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	3324      	adds	r3, #36	; 0x24
 800a426:	4619      	mov	r1, r3
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42c:	461a      	mov	r2, r3
 800a42e:	88fb      	ldrh	r3, [r7, #6]
 800a430:	f7f7 fea6 	bl	8002180 <HAL_DMA_Start_IT>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d00d      	beq.n	800a456 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2210      	movs	r2, #16
 800a43e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2200      	movs	r2, #0
 800a446:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	2220      	movs	r2, #32
 800a44e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800a452:	2301      	movs	r3, #1
 800a454:	e055      	b.n	800a502 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d018      	beq.n	800a498 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a46e:	e853 3f00 	ldrex	r3, [r3]
 800a472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a476:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a47a:	657b      	str	r3, [r7, #84]	; 0x54
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	461a      	mov	r2, r3
 800a482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a484:	64bb      	str	r3, [r7, #72]	; 0x48
 800a486:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a488:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a48a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a48c:	e841 2300 	strex	r3, r2, [r1]
 800a490:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a494:	2b00      	cmp	r3, #0
 800a496:	d1e6      	bne.n	800a466 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	3308      	adds	r3, #8
 800a49e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	e853 3f00 	ldrex	r3, [r3]
 800a4a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4aa:	f043 0301 	orr.w	r3, r3, #1
 800a4ae:	653b      	str	r3, [r7, #80]	; 0x50
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4b8:	637a      	str	r2, [r7, #52]	; 0x34
 800a4ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4c0:	e841 2300 	strex	r3, r2, [r1]
 800a4c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d1e5      	bne.n	800a498 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	3308      	adds	r3, #8
 800a4d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	e853 3f00 	ldrex	r3, [r3]
 800a4da:	613b      	str	r3, [r7, #16]
   return(result);
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	3308      	adds	r3, #8
 800a4ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a4ec:	623a      	str	r2, [r7, #32]
 800a4ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f0:	69f9      	ldr	r1, [r7, #28]
 800a4f2:	6a3a      	ldr	r2, [r7, #32]
 800a4f4:	e841 2300 	strex	r3, r2, [r1]
 800a4f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a4fa:	69bb      	ldr	r3, [r7, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d1e5      	bne.n	800a4cc <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	3758      	adds	r7, #88	; 0x58
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	0800a669 	.word	0x0800a669
 800a510:	0800a78b 	.word	0x0800a78b
 800a514:	0800a7c3 	.word	0x0800a7c3

0800a518 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a518:	b480      	push	{r7}
 800a51a:	b08f      	sub	sp, #60	; 0x3c
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a526:	6a3b      	ldr	r3, [r7, #32]
 800a528:	e853 3f00 	ldrex	r3, [r3]
 800a52c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a534:	637b      	str	r3, [r7, #52]	; 0x34
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	461a      	mov	r2, r3
 800a53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a53e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a540:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a542:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a544:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a546:	e841 2300 	strex	r3, r2, [r1]
 800a54a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d1e6      	bne.n	800a520 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	3308      	adds	r3, #8
 800a558:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	e853 3f00 	ldrex	r3, [r3]
 800a560:	60bb      	str	r3, [r7, #8]
   return(result);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a568:	633b      	str	r3, [r7, #48]	; 0x30
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3308      	adds	r3, #8
 800a570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a572:	61ba      	str	r2, [r7, #24]
 800a574:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a576:	6979      	ldr	r1, [r7, #20]
 800a578:	69ba      	ldr	r2, [r7, #24]
 800a57a:	e841 2300 	strex	r3, r2, [r1]
 800a57e:	613b      	str	r3, [r7, #16]
   return(result);
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d1e5      	bne.n	800a552 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2220      	movs	r2, #32
 800a58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800a58e:	bf00      	nop
 800a590:	373c      	adds	r7, #60	; 0x3c
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
	...

0800a59c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a59c:	b480      	push	{r7}
 800a59e:	b095      	sub	sp, #84	; 0x54
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a5b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	461a      	mov	r2, r3
 800a5c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5c2:	643b      	str	r3, [r7, #64]	; 0x40
 800a5c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a5c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e6      	bne.n	800a5a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	3308      	adds	r3, #8
 800a5dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5de:	6a3b      	ldr	r3, [r7, #32]
 800a5e0:	e853 3f00 	ldrex	r3, [r3]
 800a5e4:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5e6:	69fa      	ldr	r2, [r7, #28]
 800a5e8:	4b1e      	ldr	r3, [pc, #120]	; (800a664 <UART_EndRxTransfer+0xc8>)
 800a5ea:	4013      	ands	r3, r2
 800a5ec:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	3308      	adds	r3, #8
 800a5f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5fe:	e841 2300 	strex	r3, r2, [r1]
 800a602:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a606:	2b00      	cmp	r3, #0
 800a608:	d1e5      	bne.n	800a5d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a60e:	2b01      	cmp	r3, #1
 800a610:	d118      	bne.n	800a644 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	e853 3f00 	ldrex	r3, [r3]
 800a61e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	f023 0310 	bic.w	r3, r3, #16
 800a626:	647b      	str	r3, [r7, #68]	; 0x44
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	461a      	mov	r2, r3
 800a62e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a630:	61bb      	str	r3, [r7, #24]
 800a632:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a634:	6979      	ldr	r1, [r7, #20]
 800a636:	69ba      	ldr	r2, [r7, #24]
 800a638:	e841 2300 	strex	r3, r2, [r1]
 800a63c:	613b      	str	r3, [r7, #16]
   return(result);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d1e6      	bne.n	800a612 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2220      	movs	r2, #32
 800a648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2200      	movs	r2, #0
 800a656:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a658:	bf00      	nop
 800a65a:	3754      	adds	r7, #84	; 0x54
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr
 800a664:	effffffe 	.word	0xeffffffe

0800a668 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b09c      	sub	sp, #112	; 0x70
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a674:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	69db      	ldr	r3, [r3, #28]
 800a67a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a67e:	d071      	beq.n	800a764 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800a680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a682:	2200      	movs	r2, #0
 800a684:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a68e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a690:	e853 3f00 	ldrex	r3, [r3]
 800a694:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a696:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a698:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a69c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a69e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a6a6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6a8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6ae:	e841 2300 	strex	r3, r2, [r1]
 800a6b2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1e6      	bne.n	800a688 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	3308      	adds	r3, #8
 800a6c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6c4:	e853 3f00 	ldrex	r3, [r3]
 800a6c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6cc:	f023 0301 	bic.w	r3, r3, #1
 800a6d0:	667b      	str	r3, [r7, #100]	; 0x64
 800a6d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	3308      	adds	r3, #8
 800a6d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6da:	647a      	str	r2, [r7, #68]	; 0x44
 800a6dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a6e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a6e2:	e841 2300 	strex	r3, r2, [r1]
 800a6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a6e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d1e5      	bne.n	800a6ba <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a6ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	3308      	adds	r3, #8
 800a6f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f8:	e853 3f00 	ldrex	r3, [r3]
 800a6fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a6fe:	6a3b      	ldr	r3, [r7, #32]
 800a700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a704:	663b      	str	r3, [r7, #96]	; 0x60
 800a706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	3308      	adds	r3, #8
 800a70c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a70e:	633a      	str	r2, [r7, #48]	; 0x30
 800a710:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a712:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a716:	e841 2300 	strex	r3, r2, [r1]
 800a71a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1e5      	bne.n	800a6ee <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a724:	2220      	movs	r2, #32
 800a726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a72c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d118      	bne.n	800a764 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a738:	693b      	ldr	r3, [r7, #16]
 800a73a:	e853 3f00 	ldrex	r3, [r3]
 800a73e:	60fb      	str	r3, [r7, #12]
   return(result);
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	f023 0310 	bic.w	r3, r3, #16
 800a746:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	461a      	mov	r2, r3
 800a74e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a750:	61fb      	str	r3, [r7, #28]
 800a752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a754:	69b9      	ldr	r1, [r7, #24]
 800a756:	69fa      	ldr	r2, [r7, #28]
 800a758:	e841 2300 	strex	r3, r2, [r1]
 800a75c:	617b      	str	r3, [r7, #20]
   return(result);
 800a75e:	697b      	ldr	r3, [r7, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d1e6      	bne.n	800a732 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a764:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d107      	bne.n	800a77c <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a76c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a76e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a772:	4619      	mov	r1, r3
 800a774:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a776:	f7fe fefd 	bl	8009574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a77a:	e002      	b.n	800a782 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800a77c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a77e:	f7fe fedb 	bl	8009538 <HAL_UART_RxCpltCallback>
}
 800a782:	bf00      	nop
 800a784:	3770      	adds	r7, #112	; 0x70
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a796:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d109      	bne.n	800a7b4 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a7a6:	085b      	lsrs	r3, r3, #1
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7fe fee1 	bl	8009574 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a7b2:	e002      	b.n	800a7ba <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f7fe fec9 	bl	800954c <HAL_UART_RxHalfCpltCallback>
}
 800a7ba:	bf00      	nop
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b086      	sub	sp, #24
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ce:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689b      	ldr	r3, [r3, #8]
 800a7e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ea:	2b80      	cmp	r3, #128	; 0x80
 800a7ec:	d109      	bne.n	800a802 <UART_DMAError+0x40>
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b21      	cmp	r3, #33	; 0x21
 800a7f2:	d106      	bne.n	800a802 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a7f4:	697b      	ldr	r3, [r7, #20]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800a7fc:	6978      	ldr	r0, [r7, #20]
 800a7fe:	f7ff fe8b 	bl	800a518 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a80c:	2b40      	cmp	r3, #64	; 0x40
 800a80e:	d109      	bne.n	800a824 <UART_DMAError+0x62>
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2b22      	cmp	r3, #34	; 0x22
 800a814:	d106      	bne.n	800a824 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a816:	697b      	ldr	r3, [r7, #20]
 800a818:	2200      	movs	r2, #0
 800a81a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800a81e:	6978      	ldr	r0, [r7, #20]
 800a820:	f7ff febc 	bl	800a59c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a82a:	f043 0210 	orr.w	r2, r3, #16
 800a82e:	697b      	ldr	r3, [r7, #20]
 800a830:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a834:	6978      	ldr	r0, [r7, #20]
 800a836:	f7fe fe93 	bl	8009560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a83a:	bf00      	nop
 800a83c:	3718      	adds	r7, #24
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b084      	sub	sp, #16
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a84e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	f7fe fe7d 	bl	8009560 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a866:	bf00      	nop
 800a868:	3710      	adds	r7, #16
 800a86a:	46bd      	mov	sp, r7
 800a86c:	bd80      	pop	{r7, pc}

0800a86e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a86e:	b580      	push	{r7, lr}
 800a870:	b088      	sub	sp, #32
 800a872:	af00      	add	r7, sp, #0
 800a874:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	e853 3f00 	ldrex	r3, [r3]
 800a882:	60bb      	str	r3, [r7, #8]
   return(result);
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a88a:	61fb      	str	r3, [r7, #28]
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	461a      	mov	r2, r3
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	61bb      	str	r3, [r7, #24]
 800a896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a898:	6979      	ldr	r1, [r7, #20]
 800a89a:	69ba      	ldr	r2, [r7, #24]
 800a89c:	e841 2300 	strex	r3, r2, [r1]
 800a8a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1e6      	bne.n	800a876 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7fe fe34 	bl	8009524 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8bc:	bf00      	nop
 800a8be:	3720      	adds	r7, #32
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a8d8:	b480      	push	{r7}
 800a8da:	b083      	sub	sp, #12
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a8e0:	bf00      	nop
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b083      	sub	sp, #12
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a8f4:	bf00      	nop
 800a8f6:	370c      	adds	r7, #12
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a900:	b480      	push	{r7}
 800a902:	b085      	sub	sp, #20
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d101      	bne.n	800a916 <HAL_UARTEx_DisableFifoMode+0x16>
 800a912:	2302      	movs	r3, #2
 800a914:	e027      	b.n	800a966 <HAL_UARTEx_DisableFifoMode+0x66>
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	2201      	movs	r2, #1
 800a91a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2224      	movs	r2, #36	; 0x24
 800a922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f022 0201 	bic.w	r2, r2, #1
 800a93c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a944:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2200      	movs	r2, #0
 800a94a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	68fa      	ldr	r2, [r7, #12]
 800a952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2220      	movs	r2, #32
 800a958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2200      	movs	r2, #0
 800a960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a964:	2300      	movs	r3, #0
}
 800a966:	4618      	mov	r0, r3
 800a968:	3714      	adds	r7, #20
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr

0800a972 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b084      	sub	sp, #16
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a982:	2b01      	cmp	r3, #1
 800a984:	d101      	bne.n	800a98a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a986:	2302      	movs	r3, #2
 800a988:	e02d      	b.n	800a9e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2224      	movs	r2, #36	; 0x24
 800a996:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	681a      	ldr	r2, [r3, #0]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f022 0201 	bic.w	r2, r2, #1
 800a9b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f000 f850 	bl	800aa6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3710      	adds	r7, #16
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}

0800a9ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9ee:	b580      	push	{r7, lr}
 800a9f0:	b084      	sub	sp, #16
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
 800a9f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d101      	bne.n	800aa06 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800aa02:	2302      	movs	r3, #2
 800aa04:	e02d      	b.n	800aa62 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2201      	movs	r2, #1
 800aa0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2224      	movs	r2, #36	; 0x24
 800aa12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f022 0201 	bic.w	r2, r2, #1
 800aa2c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	689b      	ldr	r3, [r3, #8]
 800aa34:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	430a      	orrs	r2, r1
 800aa40:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f000 f812 	bl	800aa6c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68fa      	ldr	r2, [r7, #12]
 800aa4e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2220      	movs	r2, #32
 800aa54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3710      	adds	r7, #16
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d108      	bne.n	800aa8e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2201      	movs	r2, #1
 800aa80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa8c:	e031      	b.n	800aaf2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa8e:	2310      	movs	r3, #16
 800aa90:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa92:	2310      	movs	r3, #16
 800aa94:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	0e5b      	lsrs	r3, r3, #25
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	f003 0307 	and.w	r3, r3, #7
 800aaa4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	689b      	ldr	r3, [r3, #8]
 800aaac:	0f5b      	lsrs	r3, r3, #29
 800aaae:	b2db      	uxtb	r3, r3
 800aab0:	f003 0307 	and.w	r3, r3, #7
 800aab4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aab6:	7bbb      	ldrb	r3, [r7, #14]
 800aab8:	7b3a      	ldrb	r2, [r7, #12]
 800aaba:	4911      	ldr	r1, [pc, #68]	; (800ab00 <UARTEx_SetNbDataToProcess+0x94>)
 800aabc:	5c8a      	ldrb	r2, [r1, r2]
 800aabe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aac2:	7b3a      	ldrb	r2, [r7, #12]
 800aac4:	490f      	ldr	r1, [pc, #60]	; (800ab04 <UARTEx_SetNbDataToProcess+0x98>)
 800aac6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aac8:	fb93 f3f2 	sdiv	r3, r3, r2
 800aacc:	b29a      	uxth	r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
 800aad6:	7b7a      	ldrb	r2, [r7, #13]
 800aad8:	4909      	ldr	r1, [pc, #36]	; (800ab00 <UARTEx_SetNbDataToProcess+0x94>)
 800aada:	5c8a      	ldrb	r2, [r1, r2]
 800aadc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aae0:	7b7a      	ldrb	r2, [r7, #13]
 800aae2:	4908      	ldr	r1, [pc, #32]	; (800ab04 <UARTEx_SetNbDataToProcess+0x98>)
 800aae4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aae6:	fb93 f3f2 	sdiv	r3, r3, r2
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aaf2:	bf00      	nop
 800aaf4:	3714      	adds	r7, #20
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafc:	4770      	bx	lr
 800aafe:	bf00      	nop
 800ab00:	0800b368 	.word	0x0800b368
 800ab04:	0800b370 	.word	0x0800b370

0800ab08 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ab08:	b084      	sub	sp, #16
 800ab0a:	b580      	push	{r7, lr}
 800ab0c:	b084      	sub	sp, #16
 800ab0e:	af00      	add	r7, sp, #0
 800ab10:	6078      	str	r0, [r7, #4]
 800ab12:	f107 001c 	add.w	r0, r7, #28
 800ab16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	2b01      	cmp	r3, #1
 800ab1e:	d120      	bne.n	800ab62 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	4b2a      	ldr	r3, [pc, #168]	; (800abdc <USB_CoreInit+0xd4>)
 800ab32:	4013      	ands	r3, r2
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ab44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d105      	bne.n	800ab56 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 faac 	bl	800b0b4 <USB_CoreReset>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	73fb      	strb	r3, [r7, #15]
 800ab60:	e01a      	b.n	800ab98 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	68db      	ldr	r3, [r3, #12]
 800ab66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 faa0 	bl	800b0b4 <USB_CoreReset>
 800ab74:	4603      	mov	r3, r0
 800ab76:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ab78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d106      	bne.n	800ab8c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab82:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	639a      	str	r2, [r3, #56]	; 0x38
 800ab8a:	e005      	b.n	800ab98 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ab98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d116      	bne.n	800abcc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800abac:	4b0c      	ldr	r3, [pc, #48]	; (800abe0 <USB_CoreInit+0xd8>)
 800abae:	4313      	orrs	r3, r2
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	689b      	ldr	r3, [r3, #8]
 800abb8:	f043 0206 	orr.w	r2, r3, #6
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	f043 0220 	orr.w	r2, r3, #32
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800abcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abd8:	b004      	add	sp, #16
 800abda:	4770      	bx	lr
 800abdc:	ffbdffbf 	.word	0xffbdffbf
 800abe0:	03ee0000 	.word	0x03ee0000

0800abe4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b083      	sub	sp, #12
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	689b      	ldr	r3, [r3, #8]
 800abf0:	f023 0201 	bic.w	r2, r3, #1
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	370c      	adds	r7, #12
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac06:	b580      	push	{r7, lr}
 800ac08:	b084      	sub	sp, #16
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	6078      	str	r0, [r7, #4]
 800ac0e:	460b      	mov	r3, r1
 800ac10:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ac12:	2300      	movs	r3, #0
 800ac14:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac22:	78fb      	ldrb	r3, [r7, #3]
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d115      	bne.n	800ac54 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	68db      	ldr	r3, [r3, #12]
 800ac2c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac34:	2001      	movs	r0, #1
 800ac36:	f7f6 fdf3 	bl	8001820 <HAL_Delay>
      ms++;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 fa29 	bl	800b098 <USB_GetMode>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b01      	cmp	r3, #1
 800ac4a:	d01e      	beq.n	800ac8a <USB_SetCurrentMode+0x84>
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b31      	cmp	r3, #49	; 0x31
 800ac50:	d9f0      	bls.n	800ac34 <USB_SetCurrentMode+0x2e>
 800ac52:	e01a      	b.n	800ac8a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac54:	78fb      	ldrb	r3, [r7, #3]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d115      	bne.n	800ac86 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac66:	2001      	movs	r0, #1
 800ac68:	f7f6 fdda 	bl	8001820 <HAL_Delay>
      ms++;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	3301      	adds	r3, #1
 800ac70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fa10 	bl	800b098 <USB_GetMode>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d005      	beq.n	800ac8a <USB_SetCurrentMode+0x84>
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2b31      	cmp	r3, #49	; 0x31
 800ac82:	d9f0      	bls.n	800ac66 <USB_SetCurrentMode+0x60>
 800ac84:	e001      	b.n	800ac8a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	e005      	b.n	800ac96 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	2b32      	cmp	r3, #50	; 0x32
 800ac8e:	d101      	bne.n	800ac94 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac90:	2301      	movs	r3, #1
 800ac92:	e000      	b.n	800ac96 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac94:	2300      	movs	r3, #0
}
 800ac96:	4618      	mov	r0, r3
 800ac98:	3710      	adds	r7, #16
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd80      	pop	{r7, pc}
	...

0800aca0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aca0:	b084      	sub	sp, #16
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b086      	sub	sp, #24
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800acae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800acba:	2300      	movs	r3, #0
 800acbc:	613b      	str	r3, [r7, #16]
 800acbe:	e009      	b.n	800acd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	3340      	adds	r3, #64	; 0x40
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	2200      	movs	r2, #0
 800accc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	3301      	adds	r3, #1
 800acd2:	613b      	str	r3, [r7, #16]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b0e      	cmp	r3, #14
 800acd8:	d9f2      	bls.n	800acc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800acda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d11c      	bne.n	800ad1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acee:	f043 0302 	orr.w	r3, r3, #2
 800acf2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	601a      	str	r2, [r3, #0]
 800ad18:	e005      	b.n	800ad26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad2c:	461a      	mov	r2, r3
 800ad2e:	2300      	movs	r3, #0
 800ad30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad38:	4619      	mov	r1, r3
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad40:	461a      	mov	r2, r3
 800ad42:	680b      	ldr	r3, [r1, #0]
 800ad44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad48:	2b01      	cmp	r3, #1
 800ad4a:	d10c      	bne.n	800ad66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d104      	bne.n	800ad5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad52:	2100      	movs	r1, #0
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f965 	bl	800b024 <USB_SetDevSpeed>
 800ad5a:	e008      	b.n	800ad6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad5c:	2101      	movs	r1, #1
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 f960 	bl	800b024 <USB_SetDevSpeed>
 800ad64:	e003      	b.n	800ad6e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad66:	2103      	movs	r1, #3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f95b 	bl	800b024 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad6e:	2110      	movs	r1, #16
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f000 f8f3 	bl	800af5c <USB_FlushTxFifo>
 800ad76:	4603      	mov	r3, r0
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d001      	beq.n	800ad80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f91f 	bl	800afc4 <USB_FlushRxFifo>
 800ad86:	4603      	mov	r3, r0
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d001      	beq.n	800ad90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad96:	461a      	mov	r2, r3
 800ad98:	2300      	movs	r3, #0
 800ad9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada2:	461a      	mov	r2, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adae:	461a      	mov	r2, r3
 800adb0:	2300      	movs	r3, #0
 800adb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adb4:	2300      	movs	r3, #0
 800adb6:	613b      	str	r3, [r7, #16]
 800adb8:	e043      	b.n	800ae42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	015a      	lsls	r2, r3, #5
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	4413      	add	r3, r2
 800adc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800add0:	d118      	bne.n	800ae04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade4:	461a      	mov	r2, r3
 800ade6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adea:	6013      	str	r3, [r2, #0]
 800adec:	e013      	b.n	800ae16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfa:	461a      	mov	r2, r3
 800adfc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae00:	6013      	str	r3, [r2, #0]
 800ae02:	e008      	b.n	800ae16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae10:	461a      	mov	r2, r3
 800ae12:	2300      	movs	r3, #0
 800ae14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae16:	693b      	ldr	r3, [r7, #16]
 800ae18:	015a      	lsls	r2, r3, #5
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae22:	461a      	mov	r2, r3
 800ae24:	2300      	movs	r3, #0
 800ae26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	015a      	lsls	r2, r3, #5
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	4413      	add	r3, r2
 800ae30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae34:	461a      	mov	r2, r3
 800ae36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae3c:	693b      	ldr	r3, [r7, #16]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	613b      	str	r3, [r7, #16]
 800ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae44:	693a      	ldr	r2, [r7, #16]
 800ae46:	429a      	cmp	r2, r3
 800ae48:	d3b7      	bcc.n	800adba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae4a:	2300      	movs	r3, #0
 800ae4c:	613b      	str	r3, [r7, #16]
 800ae4e:	e043      	b.n	800aed8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae66:	d118      	bne.n	800ae9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae80:	6013      	str	r3, [r2, #0]
 800ae82:	e013      	b.n	800aeac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	015a      	lsls	r2, r3, #5
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	4413      	add	r3, r2
 800ae8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae90:	461a      	mov	r2, r3
 800ae92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	e008      	b.n	800aeac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae9a:	693b      	ldr	r3, [r7, #16]
 800ae9c:	015a      	lsls	r2, r3, #5
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	4413      	add	r3, r2
 800aea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aea6:	461a      	mov	r2, r3
 800aea8:	2300      	movs	r3, #0
 800aeaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aeac:	693b      	ldr	r3, [r7, #16]
 800aeae:	015a      	lsls	r2, r3, #5
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	4413      	add	r3, r2
 800aeb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb8:	461a      	mov	r2, r3
 800aeba:	2300      	movs	r3, #0
 800aebc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeca:	461a      	mov	r2, r3
 800aecc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aed0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	3301      	adds	r3, #1
 800aed6:	613b      	str	r3, [r7, #16]
 800aed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d3b7      	bcc.n	800ae50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aeee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aef2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2200      	movs	r2, #0
 800aef8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af04:	2b00      	cmp	r3, #0
 800af06:	d105      	bne.n	800af14 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	699b      	ldr	r3, [r3, #24]
 800af0c:	f043 0210 	orr.w	r2, r3, #16
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	699a      	ldr	r2, [r3, #24]
 800af18:	4b0e      	ldr	r3, [pc, #56]	; (800af54 <USB_DevInit+0x2b4>)
 800af1a:	4313      	orrs	r3, r2
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af22:	2b00      	cmp	r3, #0
 800af24:	d005      	beq.n	800af32 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	f043 0208 	orr.w	r2, r3, #8
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af34:	2b01      	cmp	r3, #1
 800af36:	d105      	bne.n	800af44 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	699a      	ldr	r2, [r3, #24]
 800af3c:	4b06      	ldr	r3, [pc, #24]	; (800af58 <USB_DevInit+0x2b8>)
 800af3e:	4313      	orrs	r3, r2
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af44:	7dfb      	ldrb	r3, [r7, #23]
}
 800af46:	4618      	mov	r0, r3
 800af48:	3718      	adds	r7, #24
 800af4a:	46bd      	mov	sp, r7
 800af4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af50:	b004      	add	sp, #16
 800af52:	4770      	bx	lr
 800af54:	803c3800 	.word	0x803c3800
 800af58:	40000004 	.word	0x40000004

0800af5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b085      	sub	sp, #20
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	3301      	adds	r3, #1
 800af6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4a13      	ldr	r2, [pc, #76]	; (800afc0 <USB_FlushTxFifo+0x64>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d901      	bls.n	800af7c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800af78:	2303      	movs	r3, #3
 800af7a:	e01b      	b.n	800afb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	daf2      	bge.n	800af6a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af84:	2300      	movs	r3, #0
 800af86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	019b      	lsls	r3, r3, #6
 800af8c:	f043 0220 	orr.w	r2, r3, #32
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	3301      	adds	r3, #1
 800af98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	4a08      	ldr	r2, [pc, #32]	; (800afc0 <USB_FlushTxFifo+0x64>)
 800af9e:	4293      	cmp	r3, r2
 800afa0:	d901      	bls.n	800afa6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800afa2:	2303      	movs	r3, #3
 800afa4:	e006      	b.n	800afb4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	691b      	ldr	r3, [r3, #16]
 800afaa:	f003 0320 	and.w	r3, r3, #32
 800afae:	2b20      	cmp	r3, #32
 800afb0:	d0f0      	beq.n	800af94 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	00030d40 	.word	0x00030d40

0800afc4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afcc:	2300      	movs	r3, #0
 800afce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	3301      	adds	r3, #1
 800afd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	4a11      	ldr	r2, [pc, #68]	; (800b020 <USB_FlushRxFifo+0x5c>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d901      	bls.n	800afe2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800afde:	2303      	movs	r3, #3
 800afe0:	e018      	b.n	800b014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	691b      	ldr	r3, [r3, #16]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	daf2      	bge.n	800afd0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800afea:	2300      	movs	r3, #0
 800afec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2210      	movs	r2, #16
 800aff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	3301      	adds	r3, #1
 800aff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	4a08      	ldr	r2, [pc, #32]	; (800b020 <USB_FlushRxFifo+0x5c>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d901      	bls.n	800b006 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b002:	2303      	movs	r3, #3
 800b004:	e006      	b.n	800b014 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	f003 0310 	and.w	r3, r3, #16
 800b00e:	2b10      	cmp	r3, #16
 800b010:	d0f0      	beq.n	800aff4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3714      	adds	r7, #20
 800b018:	46bd      	mov	sp, r7
 800b01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01e:	4770      	bx	lr
 800b020:	00030d40 	.word	0x00030d40

0800b024 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b024:	b480      	push	{r7}
 800b026:	b085      	sub	sp, #20
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	460b      	mov	r3, r1
 800b02e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	78fb      	ldrb	r3, [r7, #3]
 800b03e:	68f9      	ldr	r1, [r7, #12]
 800b040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b044:	4313      	orrs	r3, r2
 800b046:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b048:	2300      	movs	r3, #0
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3714      	adds	r7, #20
 800b04e:	46bd      	mov	sp, r7
 800b050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b054:	4770      	bx	lr

0800b056 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b056:	b480      	push	{r7}
 800b058:	b085      	sub	sp, #20
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	68fa      	ldr	r2, [r7, #12]
 800b06c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b070:	f023 0303 	bic.w	r3, r3, #3
 800b074:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b084:	f043 0302 	orr.w	r3, r3, #2
 800b088:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b08a:	2300      	movs	r3, #0
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3714      	adds	r7, #20
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	695b      	ldr	r3, [r3, #20]
 800b0a4:	f003 0301 	and.w	r3, r3, #1
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	4a13      	ldr	r2, [pc, #76]	; (800b118 <USB_CoreReset+0x64>)
 800b0ca:	4293      	cmp	r3, r2
 800b0cc:	d901      	bls.n	800b0d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b0ce:	2303      	movs	r3, #3
 800b0d0:	e01b      	b.n	800b10a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	691b      	ldr	r3, [r3, #16]
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	daf2      	bge.n	800b0c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	f043 0201 	orr.w	r2, r3, #1
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	3301      	adds	r3, #1
 800b0ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4a09      	ldr	r2, [pc, #36]	; (800b118 <USB_CoreReset+0x64>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d901      	bls.n	800b0fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b0f8:	2303      	movs	r3, #3
 800b0fa:	e006      	b.n	800b10a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	f003 0301 	and.w	r3, r3, #1
 800b104:	2b01      	cmp	r3, #1
 800b106:	d0f0      	beq.n	800b0ea <USB_CoreReset+0x36>

  return HAL_OK;
 800b108:	2300      	movs	r3, #0
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3714      	adds	r7, #20
 800b10e:	46bd      	mov	sp, r7
 800b110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	00030d40 	.word	0x00030d40

0800b11c <calloc>:
 800b11c:	4b02      	ldr	r3, [pc, #8]	; (800b128 <calloc+0xc>)
 800b11e:	460a      	mov	r2, r1
 800b120:	4601      	mov	r1, r0
 800b122:	6818      	ldr	r0, [r3, #0]
 800b124:	f000 b834 	b.w	800b190 <_calloc_r>
 800b128:	24000020 	.word	0x24000020

0800b12c <__errno>:
 800b12c:	4b01      	ldr	r3, [pc, #4]	; (800b134 <__errno+0x8>)
 800b12e:	6818      	ldr	r0, [r3, #0]
 800b130:	4770      	bx	lr
 800b132:	bf00      	nop
 800b134:	24000020 	.word	0x24000020

0800b138 <__libc_init_array>:
 800b138:	b570      	push	{r4, r5, r6, lr}
 800b13a:	4d0d      	ldr	r5, [pc, #52]	; (800b170 <__libc_init_array+0x38>)
 800b13c:	4c0d      	ldr	r4, [pc, #52]	; (800b174 <__libc_init_array+0x3c>)
 800b13e:	1b64      	subs	r4, r4, r5
 800b140:	10a4      	asrs	r4, r4, #2
 800b142:	2600      	movs	r6, #0
 800b144:	42a6      	cmp	r6, r4
 800b146:	d109      	bne.n	800b15c <__libc_init_array+0x24>
 800b148:	4d0b      	ldr	r5, [pc, #44]	; (800b178 <__libc_init_array+0x40>)
 800b14a:	4c0c      	ldr	r4, [pc, #48]	; (800b17c <__libc_init_array+0x44>)
 800b14c:	f000 f8e8 	bl	800b320 <_init>
 800b150:	1b64      	subs	r4, r4, r5
 800b152:	10a4      	asrs	r4, r4, #2
 800b154:	2600      	movs	r6, #0
 800b156:	42a6      	cmp	r6, r4
 800b158:	d105      	bne.n	800b166 <__libc_init_array+0x2e>
 800b15a:	bd70      	pop	{r4, r5, r6, pc}
 800b15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b160:	4798      	blx	r3
 800b162:	3601      	adds	r6, #1
 800b164:	e7ee      	b.n	800b144 <__libc_init_array+0xc>
 800b166:	f855 3b04 	ldr.w	r3, [r5], #4
 800b16a:	4798      	blx	r3
 800b16c:	3601      	adds	r6, #1
 800b16e:	e7f2      	b.n	800b156 <__libc_init_array+0x1e>
 800b170:	0800b380 	.word	0x0800b380
 800b174:	0800b380 	.word	0x0800b380
 800b178:	0800b380 	.word	0x0800b380
 800b17c:	0800b384 	.word	0x0800b384

0800b180 <memset>:
 800b180:	4402      	add	r2, r0
 800b182:	4603      	mov	r3, r0
 800b184:	4293      	cmp	r3, r2
 800b186:	d100      	bne.n	800b18a <memset+0xa>
 800b188:	4770      	bx	lr
 800b18a:	f803 1b01 	strb.w	r1, [r3], #1
 800b18e:	e7f9      	b.n	800b184 <memset+0x4>

0800b190 <_calloc_r>:
 800b190:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b192:	fba1 2402 	umull	r2, r4, r1, r2
 800b196:	b94c      	cbnz	r4, 800b1ac <_calloc_r+0x1c>
 800b198:	4611      	mov	r1, r2
 800b19a:	9201      	str	r2, [sp, #4]
 800b19c:	f000 f82e 	bl	800b1fc <_malloc_r>
 800b1a0:	9a01      	ldr	r2, [sp, #4]
 800b1a2:	4605      	mov	r5, r0
 800b1a4:	b930      	cbnz	r0, 800b1b4 <_calloc_r+0x24>
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	b003      	add	sp, #12
 800b1aa:	bd30      	pop	{r4, r5, pc}
 800b1ac:	220c      	movs	r2, #12
 800b1ae:	6002      	str	r2, [r0, #0]
 800b1b0:	2500      	movs	r5, #0
 800b1b2:	e7f8      	b.n	800b1a6 <_calloc_r+0x16>
 800b1b4:	4621      	mov	r1, r4
 800b1b6:	f7ff ffe3 	bl	800b180 <memset>
 800b1ba:	e7f4      	b.n	800b1a6 <_calloc_r+0x16>

0800b1bc <sbrk_aligned>:
 800b1bc:	b570      	push	{r4, r5, r6, lr}
 800b1be:	4e0e      	ldr	r6, [pc, #56]	; (800b1f8 <sbrk_aligned+0x3c>)
 800b1c0:	460c      	mov	r4, r1
 800b1c2:	6831      	ldr	r1, [r6, #0]
 800b1c4:	4605      	mov	r5, r0
 800b1c6:	b911      	cbnz	r1, 800b1ce <sbrk_aligned+0x12>
 800b1c8:	f000 f88c 	bl	800b2e4 <_sbrk_r>
 800b1cc:	6030      	str	r0, [r6, #0]
 800b1ce:	4621      	mov	r1, r4
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	f000 f887 	bl	800b2e4 <_sbrk_r>
 800b1d6:	1c43      	adds	r3, r0, #1
 800b1d8:	d00a      	beq.n	800b1f0 <sbrk_aligned+0x34>
 800b1da:	1cc4      	adds	r4, r0, #3
 800b1dc:	f024 0403 	bic.w	r4, r4, #3
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	d007      	beq.n	800b1f4 <sbrk_aligned+0x38>
 800b1e4:	1a21      	subs	r1, r4, r0
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	f000 f87c 	bl	800b2e4 <_sbrk_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d101      	bne.n	800b1f4 <sbrk_aligned+0x38>
 800b1f0:	f04f 34ff 	mov.w	r4, #4294967295
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	bd70      	pop	{r4, r5, r6, pc}
 800b1f8:	2400ca20 	.word	0x2400ca20

0800b1fc <_malloc_r>:
 800b1fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b200:	1ccd      	adds	r5, r1, #3
 800b202:	f025 0503 	bic.w	r5, r5, #3
 800b206:	3508      	adds	r5, #8
 800b208:	2d0c      	cmp	r5, #12
 800b20a:	bf38      	it	cc
 800b20c:	250c      	movcc	r5, #12
 800b20e:	2d00      	cmp	r5, #0
 800b210:	4607      	mov	r7, r0
 800b212:	db01      	blt.n	800b218 <_malloc_r+0x1c>
 800b214:	42a9      	cmp	r1, r5
 800b216:	d905      	bls.n	800b224 <_malloc_r+0x28>
 800b218:	230c      	movs	r3, #12
 800b21a:	603b      	str	r3, [r7, #0]
 800b21c:	2600      	movs	r6, #0
 800b21e:	4630      	mov	r0, r6
 800b220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b224:	4e2e      	ldr	r6, [pc, #184]	; (800b2e0 <_malloc_r+0xe4>)
 800b226:	f000 f86d 	bl	800b304 <__malloc_lock>
 800b22a:	6833      	ldr	r3, [r6, #0]
 800b22c:	461c      	mov	r4, r3
 800b22e:	bb34      	cbnz	r4, 800b27e <_malloc_r+0x82>
 800b230:	4629      	mov	r1, r5
 800b232:	4638      	mov	r0, r7
 800b234:	f7ff ffc2 	bl	800b1bc <sbrk_aligned>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	4604      	mov	r4, r0
 800b23c:	d14d      	bne.n	800b2da <_malloc_r+0xde>
 800b23e:	6834      	ldr	r4, [r6, #0]
 800b240:	4626      	mov	r6, r4
 800b242:	2e00      	cmp	r6, #0
 800b244:	d140      	bne.n	800b2c8 <_malloc_r+0xcc>
 800b246:	6823      	ldr	r3, [r4, #0]
 800b248:	4631      	mov	r1, r6
 800b24a:	4638      	mov	r0, r7
 800b24c:	eb04 0803 	add.w	r8, r4, r3
 800b250:	f000 f848 	bl	800b2e4 <_sbrk_r>
 800b254:	4580      	cmp	r8, r0
 800b256:	d13a      	bne.n	800b2ce <_malloc_r+0xd2>
 800b258:	6821      	ldr	r1, [r4, #0]
 800b25a:	3503      	adds	r5, #3
 800b25c:	1a6d      	subs	r5, r5, r1
 800b25e:	f025 0503 	bic.w	r5, r5, #3
 800b262:	3508      	adds	r5, #8
 800b264:	2d0c      	cmp	r5, #12
 800b266:	bf38      	it	cc
 800b268:	250c      	movcc	r5, #12
 800b26a:	4629      	mov	r1, r5
 800b26c:	4638      	mov	r0, r7
 800b26e:	f7ff ffa5 	bl	800b1bc <sbrk_aligned>
 800b272:	3001      	adds	r0, #1
 800b274:	d02b      	beq.n	800b2ce <_malloc_r+0xd2>
 800b276:	6823      	ldr	r3, [r4, #0]
 800b278:	442b      	add	r3, r5
 800b27a:	6023      	str	r3, [r4, #0]
 800b27c:	e00e      	b.n	800b29c <_malloc_r+0xa0>
 800b27e:	6822      	ldr	r2, [r4, #0]
 800b280:	1b52      	subs	r2, r2, r5
 800b282:	d41e      	bmi.n	800b2c2 <_malloc_r+0xc6>
 800b284:	2a0b      	cmp	r2, #11
 800b286:	d916      	bls.n	800b2b6 <_malloc_r+0xba>
 800b288:	1961      	adds	r1, r4, r5
 800b28a:	42a3      	cmp	r3, r4
 800b28c:	6025      	str	r5, [r4, #0]
 800b28e:	bf18      	it	ne
 800b290:	6059      	strne	r1, [r3, #4]
 800b292:	6863      	ldr	r3, [r4, #4]
 800b294:	bf08      	it	eq
 800b296:	6031      	streq	r1, [r6, #0]
 800b298:	5162      	str	r2, [r4, r5]
 800b29a:	604b      	str	r3, [r1, #4]
 800b29c:	4638      	mov	r0, r7
 800b29e:	f104 060b 	add.w	r6, r4, #11
 800b2a2:	f000 f835 	bl	800b310 <__malloc_unlock>
 800b2a6:	f026 0607 	bic.w	r6, r6, #7
 800b2aa:	1d23      	adds	r3, r4, #4
 800b2ac:	1af2      	subs	r2, r6, r3
 800b2ae:	d0b6      	beq.n	800b21e <_malloc_r+0x22>
 800b2b0:	1b9b      	subs	r3, r3, r6
 800b2b2:	50a3      	str	r3, [r4, r2]
 800b2b4:	e7b3      	b.n	800b21e <_malloc_r+0x22>
 800b2b6:	6862      	ldr	r2, [r4, #4]
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	bf0c      	ite	eq
 800b2bc:	6032      	streq	r2, [r6, #0]
 800b2be:	605a      	strne	r2, [r3, #4]
 800b2c0:	e7ec      	b.n	800b29c <_malloc_r+0xa0>
 800b2c2:	4623      	mov	r3, r4
 800b2c4:	6864      	ldr	r4, [r4, #4]
 800b2c6:	e7b2      	b.n	800b22e <_malloc_r+0x32>
 800b2c8:	4634      	mov	r4, r6
 800b2ca:	6876      	ldr	r6, [r6, #4]
 800b2cc:	e7b9      	b.n	800b242 <_malloc_r+0x46>
 800b2ce:	230c      	movs	r3, #12
 800b2d0:	603b      	str	r3, [r7, #0]
 800b2d2:	4638      	mov	r0, r7
 800b2d4:	f000 f81c 	bl	800b310 <__malloc_unlock>
 800b2d8:	e7a1      	b.n	800b21e <_malloc_r+0x22>
 800b2da:	6025      	str	r5, [r4, #0]
 800b2dc:	e7de      	b.n	800b29c <_malloc_r+0xa0>
 800b2de:	bf00      	nop
 800b2e0:	2400ca1c 	.word	0x2400ca1c

0800b2e4 <_sbrk_r>:
 800b2e4:	b538      	push	{r3, r4, r5, lr}
 800b2e6:	4d06      	ldr	r5, [pc, #24]	; (800b300 <_sbrk_r+0x1c>)
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	4604      	mov	r4, r0
 800b2ec:	4608      	mov	r0, r1
 800b2ee:	602b      	str	r3, [r5, #0]
 800b2f0:	f7f6 f9a4 	bl	800163c <_sbrk>
 800b2f4:	1c43      	adds	r3, r0, #1
 800b2f6:	d102      	bne.n	800b2fe <_sbrk_r+0x1a>
 800b2f8:	682b      	ldr	r3, [r5, #0]
 800b2fa:	b103      	cbz	r3, 800b2fe <_sbrk_r+0x1a>
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	bd38      	pop	{r3, r4, r5, pc}
 800b300:	2400ca24 	.word	0x2400ca24

0800b304 <__malloc_lock>:
 800b304:	4801      	ldr	r0, [pc, #4]	; (800b30c <__malloc_lock+0x8>)
 800b306:	f000 b809 	b.w	800b31c <__retarget_lock_acquire_recursive>
 800b30a:	bf00      	nop
 800b30c:	2400ca28 	.word	0x2400ca28

0800b310 <__malloc_unlock>:
 800b310:	4801      	ldr	r0, [pc, #4]	; (800b318 <__malloc_unlock+0x8>)
 800b312:	f000 b804 	b.w	800b31e <__retarget_lock_release_recursive>
 800b316:	bf00      	nop
 800b318:	2400ca28 	.word	0x2400ca28

0800b31c <__retarget_lock_acquire_recursive>:
 800b31c:	4770      	bx	lr

0800b31e <__retarget_lock_release_recursive>:
 800b31e:	4770      	bx	lr

0800b320 <_init>:
 800b320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b322:	bf00      	nop
 800b324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b326:	bc08      	pop	{r3}
 800b328:	469e      	mov	lr, r3
 800b32a:	4770      	bx	lr

0800b32c <_fini>:
 800b32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b32e:	bf00      	nop
 800b330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b332:	bc08      	pop	{r3}
 800b334:	469e      	mov	lr, r3
 800b336:	4770      	bx	lr
